
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000168e4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08016bb8  08016bb8  00026bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016e60  08016e60  00026e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016e68  08016e68  00026e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016e6c  08016e6c  00026e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08016e70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 RAM_D2        00000034  20000084  08016ef4  00030084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000100c  200000b8  08016f28  000300b8  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  200010c4  08016f28  000310c4  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c07b  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a7a  00000000  00000000  0005c161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001da8  00000000  00000000  00060be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001bb0  00000000  00000000  00062988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003975c  00000000  00000000  00064538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002c347  00000000  00000000  0009dc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016cf23  00000000  00000000  000c9fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00236efe  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008150  00000000  00000000  00236f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200000b8 	.word	0x200000b8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08016b9c 	.word	0x08016b9c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000bc 	.word	0x200000bc
 800030c:	08016b9c 	.word	0x08016b9c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <EncPulse2Rad_Read>:
 *      Author: Thansak Pongpaket
 */

#include "AS5047U.h"

float EncPulse2Rad_Read(AS5047U *Enc,uint8_t inv_dir){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	AS5047U_Position_Highspeed_Read(Enc,inv_dir);
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f8e7 	bl	80007f8 <AS5047U_Position_Highspeed_Read>
	return (Enc->Position * 0.000383495f) - Enc->Offset;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	89db      	ldrh	r3, [r3, #14]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000636:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000654 <EncPulse2Rad_Read+0x40>
 800063a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	edd3 7a07 	vldr	s15, [r3, #28]
 8000644:	ee77 7a67 	vsub.f32	s15, s14, s15
//	return (Enc->Position * 0.000383495f);
}
 8000648:	eeb0 0a67 	vmov.f32	s0, s15
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	39c90fd4 	.word	0x39c90fd4

08000658 <AS5047U_init>:

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin,float offset) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6178      	str	r0, [r7, #20]
 8000660:	6139      	str	r1, [r7, #16]
 8000662:	60fa      	str	r2, [r7, #12]
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	ed87 0a01 	vstr	s0, [r7, #4]
	dev->hspiHandle = hspiHandle;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	8c3a      	ldrh	r2, [r7, #32]
 8000680:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(CSGPIOTypedef, CSGPIOPin, 1);
 8000682:	8c3b      	ldrh	r3, [r7, #32]
 8000684:	2201      	movs	r2, #1
 8000686:	4619      	mov	r1, r3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f00a ffad 	bl	800b5e8 <HAL_GPIO_WritePin>
	dev->Error_Status.CORDIC_Overflow = 0;
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	2200      	movs	r2, #0
 8000692:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	2200      	movs	r2, #0
 8000698:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	2200      	movs	r2, #0
 800069e:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2200      	movs	r2, #0
 80006a4:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	2200      	movs	r2, #0
 80006aa:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	2200      	movs	r2, #0
 80006b0:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	2200      	movs	r2, #0
 80006b6:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2200      	movs	r2, #0
 80006bc:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	2200      	movs	r2, #0
 80006c2:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2200      	movs	r2, #0
 80006c8:	765a      	strb	r2, [r3, #25]

	/* User Variable */
	dev->Offset = offset * 0.000383495f;
 80006ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80006ce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80006e4 <AS5047U_init+0x8c>
 80006d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	39c90fd4 	.word	0x39c90fd4

080006e8 <AS5047U_Write>:

/*
 * This function for Non-Volatile Registers (OTP) Only
 */

inline void AS5047U_Write(AS5047U *dev,uint16_t Register_Address, uint16_t Data){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	807b      	strh	r3, [r7, #2]
 80006f4:	4613      	mov	r3, r2
 80006f6:	803b      	strh	r3, [r7, #0]
	uint8_t Buffer[3] = {};
 80006f8:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <AS5047U_Write+0x10c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	723b      	strb	r3, [r7, #8]
 80006fe:	f107 0309 	add.w	r3, r7, #9
 8000702:	2200      	movs	r2, #0
 8000704:	801a      	strh	r2, [r3, #0]

	Buffer[0] = ((uint8_t) (Register_Address >> 8)) & 0xBF;
 8000706:	887b      	ldrh	r3, [r7, #2]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	b29b      	uxth	r3, r3
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000712:	b2db      	uxtb	r3, r3
 8000714:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Register_Address & 0xFF);
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	f107 0108 	add.w	r1, r7, #8
 8000724:	2202      	movs	r2, #2
 8000726:	4618      	mov	r0, r3
 8000728:	f008 f9ea 	bl	8008b00 <HAL_CRC_Calculate>
 800072c:	4603      	mov	r3, r0
 800072e:	b2db      	uxtb	r3, r3
 8000730:	43db      	mvns	r3, r3
 8000732:	b2db      	uxtb	r3, r3
 8000734:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6898      	ldr	r0, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	899b      	ldrh	r3, [r3, #12]
 800073e:	2200      	movs	r2, #0
 8000740:	4619      	mov	r1, r3
 8000742:	f00a ff51 	bl	800b5e8 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 8000746:	2300      	movs	r3, #0
 8000748:	81fb      	strh	r3, [r7, #14]
 800074a:	e002      	b.n	8000752 <AS5047U_Write+0x6a>
 800074c:	89fb      	ldrh	r3, [r7, #14]
 800074e:	3301      	adds	r3, #1
 8000750:	81fb      	strh	r3, [r7, #14]
 8000752:	89fb      	ldrh	r3, [r7, #14]
 8000754:	f240 2226 	movw	r2, #550	; 0x226
 8000758:	4293      	cmp	r3, r2
 800075a:	d9f7      	bls.n	800074c <AS5047U_Write+0x64>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	f107 0108 	add.w	r1, r7, #8
 8000764:	2301      	movs	r3, #1
 8000766:	2203      	movs	r2, #3
 8000768:	f010 f82e 	bl	80107c8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6898      	ldr	r0, [r3, #8]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	899b      	ldrh	r3, [r3, #12]
 8000774:	2201      	movs	r2, #1
 8000776:	4619      	mov	r1, r3
 8000778:	f00a ff36 	bl	800b5e8 <HAL_GPIO_WritePin>

	Buffer[0] = (uint8_t) (Data >> 8);
 800077c:	883b      	ldrh	r3, [r7, #0]
 800077e:	0a1b      	lsrs	r3, r3, #8
 8000780:	b29b      	uxth	r3, r3
 8000782:	b2db      	uxtb	r3, r3
 8000784:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Data & 0xFF);
 8000786:	883b      	ldrh	r3, [r7, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f107 0108 	add.w	r1, r7, #8
 8000794:	2202      	movs	r2, #2
 8000796:	4618      	mov	r0, r3
 8000798:	f008 f9b2 	bl	8008b00 <HAL_CRC_Calculate>
 800079c:	4603      	mov	r3, r0
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	43db      	mvns	r3, r3
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6898      	ldr	r0, [r3, #8]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	899b      	ldrh	r3, [r3, #12]
 80007ae:	2200      	movs	r2, #0
 80007b0:	4619      	mov	r1, r3
 80007b2:	f00a ff19 	bl	800b5e8 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 80007b6:	2300      	movs	r3, #0
 80007b8:	81bb      	strh	r3, [r7, #12]
 80007ba:	e002      	b.n	80007c2 <AS5047U_Write+0xda>
 80007bc:	89bb      	ldrh	r3, [r7, #12]
 80007be:	3301      	adds	r3, #1
 80007c0:	81bb      	strh	r3, [r7, #12]
 80007c2:	89bb      	ldrh	r3, [r7, #12]
 80007c4:	f240 2226 	movw	r2, #550	; 0x226
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d9f7      	bls.n	80007bc <AS5047U_Write+0xd4>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	f107 0108 	add.w	r1, r7, #8
 80007d4:	2301      	movs	r3, #1
 80007d6:	2203      	movs	r2, #3
 80007d8:	f00f fff6 	bl	80107c8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6898      	ldr	r0, [r3, #8]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	899b      	ldrh	r3, [r3, #12]
 80007e4:	2201      	movs	r2, #1
 80007e6:	4619      	mov	r1, r3
 80007e8:	f00a fefe 	bl	800b5e8 <HAL_GPIO_WritePin>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	08016bb8 	.word	0x08016bb8

080007f8 <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev,uint8_t dir){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[2] = { 0x3F,0xFF };
 8000804:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000808:	823b      	strh	r3, [r7, #16]
	uint8_t Buffer[2] = {};
 800080a:	2300      	movs	r3, #0
 800080c:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i=0; i <= 400; i++);
 800080e:	2300      	movs	r3, #0
 8000810:	82fb      	strh	r3, [r7, #22]
 8000812:	e002      	b.n	800081a <AS5047U_Position_Highspeed_Read+0x22>
 8000814:	8afb      	ldrh	r3, [r7, #22]
 8000816:	3301      	adds	r3, #1
 8000818:	82fb      	strh	r3, [r7, #22]
 800081a:	8afb      	ldrh	r3, [r7, #22]
 800081c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000820:	d9f8      	bls.n	8000814 <AS5047U_Position_Highspeed_Read+0x1c>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6898      	ldr	r0, [r3, #8]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	899b      	ldrh	r3, [r3, #12]
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	f00a fedb 	bl	800b5e8 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 100);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	f107 0110 	add.w	r1, r7, #16
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	2202      	movs	r2, #2
 800083e:	f00f ffc3 	bl	80107c8 <HAL_SPI_Transmit>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6898      	ldr	r0, [r3, #8]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	899b      	ldrh	r3, [r3, #12]
 800084a:	2201      	movs	r2, #1
 800084c:	4619      	mov	r1, r3
 800084e:	f00a fecb 	bl	800b5e8 <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550; i++);			//delay before sent data (#Base clock 550MHz)
 8000852:	2300      	movs	r3, #0
 8000854:	82bb      	strh	r3, [r7, #20]
 8000856:	e002      	b.n	800085e <AS5047U_Position_Highspeed_Read+0x66>
 8000858:	8abb      	ldrh	r3, [r7, #20]
 800085a:	3301      	adds	r3, #1
 800085c:	82bb      	strh	r3, [r7, #20]
 800085e:	8abb      	ldrh	r3, [r7, #20]
 8000860:	f240 2226 	movw	r2, #550	; 0x226
 8000864:	4293      	cmp	r3, r2
 8000866:	d9f7      	bls.n	8000858 <AS5047U_Position_Highspeed_Read+0x60>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6898      	ldr	r0, [r3, #8]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	899b      	ldrh	r3, [r3, #12]
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	f00a feb8 	bl	800b5e8 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 100);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	f107 010c 	add.w	r1, r7, #12
 8000880:	2364      	movs	r3, #100	; 0x64
 8000882:	2202      	movs	r2, #2
 8000884:	f010 f992 	bl	8010bac <HAL_SPI_Receive>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6898      	ldr	r0, [r3, #8]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	899b      	ldrh	r3, [r3, #12]
 8000890:	2201      	movs	r2, #1
 8000892:	4619      	mov	r1, r3
 8000894:	f00a fea8 	bl	800b5e8 <HAL_GPIO_WritePin>
	if (dir == 1){
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d111      	bne.n	80008c2 <AS5047U_Position_Highspeed_Read+0xca>
		dev->Position = (uint16_t)((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]) ^ 0x3FFF;
 800089e:	7b3b      	ldrb	r3, [r7, #12]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	b21b      	sxth	r3, r3
 80008a4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	7b7b      	ldrb	r3, [r7, #13]
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008b8:	4053      	eors	r3, r2
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	81da      	strh	r2, [r3, #14]
 80008c0:	e00c      	b.n	80008dc <AS5047U_Position_Highspeed_Read+0xe4>
	}
	else{
		dev->Position = ((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]);
 80008c2:	7b3b      	ldrb	r3, [r7, #12]
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008cc:	b21a      	sxth	r2, r3
 80008ce:	7b7b      	ldrb	r3, [r7, #13]
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	81da      	strh	r2, [r3, #14]
	}
	return dev->Position;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	89db      	ldrh	r3, [r3, #14]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <TPM75_init>:
 *      Author: thansak Pongpraket
 */

#include <TPM75.h>

void TPM75_init(TPM75 *dev, I2C_HandleTypeDef *i2cHandle, uint8_t A2, uint8_t A1, uint8_t A0) {
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	4611      	mov	r1, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	460b      	mov	r3, r1
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	4613      	mov	r3, r2
 80008fc:	71bb      	strb	r3, [r7, #6]
	dev->address = 0x92;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	2292      	movs	r2, #146	; 0x92
 8000902:	711a      	strb	r2, [r3, #4]
//	dev->address = 0x92;
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2224      	movs	r2, #36	; 0x24
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f015 f909 	bl	8015b40 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800092e:	4b33      	ldr	r3, [pc, #204]	; (80009fc <MX_ADC1_Init+0xec>)
 8000930:	4a33      	ldr	r2, [pc, #204]	; (8000a00 <MX_ADC1_Init+0xf0>)
 8000932:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000934:	4b31      	ldr	r3, [pc, #196]	; (80009fc <MX_ADC1_Init+0xec>)
 8000936:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800093a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800093c:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <MX_ADC1_Init+0xec>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <MX_ADC1_Init+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000948:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <MX_ADC1_Init+0xec>)
 800094a:	2204      	movs	r2, #4
 800094c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_ADC1_Init+0xec>)
 8000950:	2200      	movs	r2, #0
 8000952:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_ADC1_Init+0xec>)
 8000956:	2200      	movs	r2, #0
 8000958:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_ADC1_Init+0xec>)
 800095c:	2201      	movs	r2, #1
 800095e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_ADC1_Init+0xec>)
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_ADC1_Init+0xec>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_ADC1_Init+0xec>)
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_ADC1_Init+0xec>)
 8000976:	2200      	movs	r2, #0
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_ADC1_Init+0xec>)
 800097c:	2200      	movs	r2, #0
 800097e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_ADC1_Init+0xec>)
 8000982:	2200      	movs	r2, #0
 8000984:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_ADC1_Init+0xec>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098e:	481b      	ldr	r0, [pc, #108]	; (80009fc <MX_ADC1_Init+0xec>)
 8000990:	f006 f8ca 	bl	8006b28 <HAL_ADC_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800099a:	f003 ff27 	bl	80047ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 800099e:	2305      	movs	r3, #5
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_DISABLED;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	4812      	ldr	r0, [pc, #72]	; (80009fc <MX_ADC1_Init+0xec>)
 80009b2:	f007 fe4f 	bl	8008654 <HAL_ADCEx_MultiModeConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80009bc:	f003 ff16 	bl	80047ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_ADC1_Init+0xf4>)
 80009c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c4:	2306      	movs	r3, #6
 80009c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d2:	2304      	movs	r3, #4
 80009d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e0:	463b      	mov	r3, r7
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_ADC1_Init+0xec>)
 80009e6:	f006 fe43 	bl	8007670 <HAL_ADC_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80009f0:	f003 fefc 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	3730      	adds	r7, #48	; 0x30
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000d4 	.word	0x200000d4
 8000a00:	40022000 	.word	0x40022000
 8000a04:	21800100 	.word	0x21800100

08000a08 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2224      	movs	r2, #36	; 0x24
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f015 f893 	bl	8015b40 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a1a:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a1c:	4a28      	ldr	r2, [pc, #160]	; (8000ac0 <MX_ADC2_Init+0xb8>)
 8000a1e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a22:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a26:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a34:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a6e:	4813      	ldr	r0, [pc, #76]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a70:	f006 f85a 	bl	8006b28 <HAL_ADC_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8000a7a:	f003 feb7 	bl	80047ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a82:	2306      	movs	r3, #6
 8000a84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a8a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a8e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a90:	2304      	movs	r3, #4
 8000a92:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000aa4:	f006 fde4 	bl	8007670 <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000aae:	f003 fe9d 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000144 	.word	0x20000144
 8000ac0:	40022100 	.word	0x40022100
 8000ac4:	21800100 	.word	0x21800100

08000ac8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2224      	movs	r2, #36	; 0x24
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f015 f833 	bl	8015b40 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000adc:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <MX_ADC3_Init+0xe0>)
 8000ade:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000ae8:	2208      	movs	r2, #8
 8000aea:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000aec:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b04:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b4c:	4815      	ldr	r0, [pc, #84]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b4e:	f005 ffeb 	bl	8006b28 <HAL_ADC_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000b58:	f003 fe48 	bl	80047ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_ADC3_Init+0xe4>)
 8000b5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b60:	2306      	movs	r3, #6
 8000b62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 8000b64:	2306      	movs	r3, #6
 8000b66:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b68:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b6c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b8c:	f006 fd70 	bl	8007670 <HAL_ADC_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000b96:	f003 fe29 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200001b4 	.word	0x200001b4
 8000ba8:	58026000 	.word	0x58026000
 8000bac:	c7520000 	.word	0xc7520000

08000bb0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a47      	ldr	r2, [pc, #284]	; (8000cec <HAL_ADC_MspInit+0x13c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d133      	bne.n	8000c3a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000bd2:	4b47      	ldr	r3, [pc, #284]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a45      	ldr	r2, [pc, #276]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000bda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000bdc:	4b44      	ldr	r3, [pc, #272]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d10e      	bne.n	8000c02 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000be4:	4b43      	ldr	r3, [pc, #268]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000be6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bea:	4a42      	ldr	r2, [pc, #264]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000bec:	f043 0320 	orr.w	r3, r3, #32
 8000bf0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bf4:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bfa:	f003 0320 	and.w	r3, r3, #32
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	4a3a      	ldr	r2, [pc, #232]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c12:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c20:	2320      	movs	r3, #32
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c24:	2303      	movs	r3, #3
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	4831      	ldr	r0, [pc, #196]	; (8000cf8 <HAL_ADC_MspInit+0x148>)
 8000c34:	f00a fb30 	bl	800b298 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c38:	e054      	b.n	8000ce4 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a2f      	ldr	r2, [pc, #188]	; (8000cfc <HAL_ADC_MspInit+0x14c>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d133      	bne.n	8000cac <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000c4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d10e      	bne.n	8000c74 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c5c:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c5e:	f043 0320 	orr.w	r3, r3, #32
 8000c62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c66:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c6c:	f003 0320 	and.w	r3, r3, #32
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c92:	2320      	movs	r3, #32
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <HAL_ADC_MspInit+0x148>)
 8000ca6:	f00a faf7 	bl	800b298 <HAL_GPIO_Init>
}
 8000caa:	e01b      	b.n	8000ce4 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC3)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <HAL_ADC_MspInit+0x150>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d116      	bne.n	8000ce4 <HAL_ADC_MspInit+0x134>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	207f      	movs	r0, #127	; 0x7f
 8000cda:	f007 fe78 	bl	80089ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000cde:	207f      	movs	r0, #127	; 0x7f
 8000ce0:	f007 fe8f 	bl	8008a02 <HAL_NVIC_EnableIRQ>
}
 8000ce4:	bf00      	nop
 8000ce6:	3730      	adds	r7, #48	; 0x30
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40022000 	.word	0x40022000
 8000cf0:	20000224 	.word	0x20000224
 8000cf4:	58024400 	.word	0x58024400
 8000cf8:	58020800 	.word	0x58020800
 8000cfc:	40022100 	.word	0x40022100
 8000d00:	58026000 	.word	0x58026000

08000d04 <Step_Driver_init>:
 * __HAL_TIM_SET_COMPARE();		CCR
 * __HAL_TIM_SET_AUTORELOAD();	ARR
 */
void Step_Driver_init(SteperParameter *step, TIM_HandleTypeDef *htim,
		uint32_t Channel, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t f_timer,uint8_t DIR_init) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]
	step->htim = htim;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	601a      	str	r2, [r3, #0]
	step->Channel = Channel;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	605a      	str	r2, [r3, #4]
	step->GPIOx = GPIOx;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	609a      	str	r2, [r3, #8]
	step->GPIO_Pin = GPIO_Pin;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	8b3a      	ldrh	r2, [r7, #24]
 8000d28:	819a      	strh	r2, [r3, #12]
	step->f_timer = f_timer;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	81da      	strh	r2, [r3, #14]
	step->DIR_init = DIR_init;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d38:	741a      	strb	r2, [r3, #16]
	HAL_TIM_PWM_Start(step->htim, step->Channel);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4610      	mov	r0, r2
 8000d46:	f010 fd13 	bl	8011770 <HAL_TIM_PWM_Start>
	step->htim->Instance->ARR = 500;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
	step->htim->Instance->CCR1 = 0;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d60:	bf00      	nop
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <Step_Driver>:


void Step_Driver(SteperParameter *step, float f_driver) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	ed87 0a00 	vstr	s0, [r7]
	float abs_f_driver = fabs(f_driver);
 8000d74:	edd7 7a00 	vldr	s15, [r7]
 8000d78:	eef0 7ae7 	vabs.f32	s15, s15
 8000d7c:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t reg_out;
	if (abs_f_driver <= 5) {
 8000d80:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d84:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d90:	d80e      	bhi.n	8000db0 <Step_Driver+0x48>
		reg_out = 20000;
 8000d92:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000d96:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = 20000;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = 0;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2200      	movs	r2, #0
 8000dac:	635a      	str	r2, [r3, #52]	; 0x34
 8000dae:	e033      	b.n	8000e18 <Step_Driver+0xb0>
	} else if (abs_f_driver < 25) {
 8000db0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000db4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc0:	d50f      	bpl.n	8000de2 <Step_Driver+0x7a>
		reg_out = 20000;
 8000dc2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000dc6:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	897a      	ldrh	r2, [r7, #10]
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000dd2:	897b      	ldrh	r3, [r7, #10]
 8000dd4:	085b      	lsrs	r3, r3, #1
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
 8000de0:	e01a      	b.n	8000e18 <Step_Driver+0xb0>
	} else {
		reg_out = (uint16_t) (step->f_timer / abs_f_driver);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	89db      	ldrh	r3, [r3, #14]
 8000de6:	ee07 3a90 	vmov	s15, r3
 8000dea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dee:	ed97 7a03 	vldr	s14, [r7, #12]
 8000df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dfa:	ee17 3a90 	vmov	r3, s15
 8000dfe:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	897a      	ldrh	r2, [r7, #10]
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000e0a:	897b      	ldrh	r3, [r7, #10]
 8000e0c:	085b      	lsrs	r3, r3, #1
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (f_driver >= 0) {
 8000e18:	edd7 7a00 	vldr	s15, [r7]
 8000e1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e24:	db09      	blt.n	8000e3a <Step_Driver+0xd2>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6898      	ldr	r0, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	8999      	ldrh	r1, [r3, #12]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7c1b      	ldrb	r3, [r3, #16]
 8000e32:	461a      	mov	r2, r3
 8000e34:	f00a fbd8 	bl	800b5e8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
	}
}
 8000e38:	e00b      	b.n	8000e52 <Step_Driver+0xea>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6898      	ldr	r0, [r3, #8]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	8999      	ldrh	r1, [r3, #12]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7c1b      	ldrb	r3, [r3, #16]
 8000e46:	f083 0301 	eor.w	r3, r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	f00a fbcb 	bl	800b5e8 <HAL_GPIO_WritePin>
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <Traj_Coeff_Cal>:
	uint16_t Pulse_in  =  (uint16_t)(((((int16_t)Deg)+90)*5.55555f) + 999);
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Deg);
}

void Traj_Coeff_Cal(TrajParameter *Traj, float T, float Pos_Final,
  float Pos_Now, float Vel_Final, float Vel_Now) {
 8000e5a:	b480      	push	{r7}
 8000e5c:	b08f      	sub	sp, #60	; 0x3c
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6178      	str	r0, [r7, #20]
 8000e62:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e66:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e6a:	ed87 1a02 	vstr	s2, [r7, #8]
 8000e6e:	edc7 1a01 	vstr	s3, [r7, #4]
 8000e72:	ed87 2a00 	vstr	s4, [r7]
 Traj->T = T;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	619a      	str	r2, [r3, #24]
 float T_P2 = T * T;
 8000e7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e84:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 float T_P3 = T_P2 * T;
 8000e88:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000e8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e94:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 float T_P4 = T_P3 * T;
 8000e98:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000e9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 float T_P5 = T_P4 * T;
 8000ea8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000eac:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 float ds = Pos_Now - Pos_Final;
 8000eb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ebc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 float tfv0 = T * Vel_Now;
 8000ec8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ecc:	edd7 7a00 	vldr	s15, [r7]
 8000ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed4:	edc7 7a08 	vstr	s15, [r7, #32]
 float tfv1 = T * Vel_Final;
 8000ed8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee4:	edc7 7a07 	vstr	s15, [r7, #28]
 Traj->TrajCoef[0] = Pos_Now;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	601a      	str	r2, [r3, #0]
 Traj->TrajCoef[1] = Vel_Now;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 Traj->TrajCoef[3] = -(2 * (5 * ds + 3 * tfv0 + 2*tfv1)) / T_P3;
 8000ef4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ef8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000efc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f00:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f04:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000f08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f10:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f20:	eef1 6a67 	vneg.f32	s13, s15
 8000f24:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	edc3 7a03 	vstr	s15, [r3, #12]
 Traj->TrajCoef[4] = (15 * ds + 8 * tfv0 + 7*tfv1) / T_P4;
 8000f32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f36:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000f3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f42:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000f46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f52:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8000f56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f5a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000f5e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	edc3 7a04 	vstr	s15, [r3, #16]
 Traj->TrajCoef[5] = -(3 * (2 * ds + tfv0 + tfv1)) / T_P5;
 8000f6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f70:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000f74:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f84:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f8c:	eef1 6a67 	vneg.f32	s13, s15
 8000f90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000f9e:	bf00      	nop
 8000fa0:	373c      	adds	r7, #60	; 0x3c
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <TrajFollow>:

void TrajFollow(TrajParameter *Traj, float traj_t[5], float *Position,
		float *Velocity) {
 8000faa:	b480      	push	{r7}
 8000fac:	b085      	sub	sp, #20
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	603b      	str	r3, [r7, #0]
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	ed93 7a00 	vldr	s14, [r3]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	edd3 7a00 	vldr	s15, [r3]
 8000fca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fce:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Traj->TrajCoef[3] * traj_t[2]) + (Traj->TrajCoef[4] * traj_t[3])
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	edd3 6a03 	vldr	s13, [r3, #12]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3308      	adds	r3, #8
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	330c      	adds	r3, #12
 8000ff2:	edd3 7a00 	vldr	s15, [r3]
 8000ff6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ffa:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Traj->TrajCoef[5] * traj_t[4]);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	edd3 6a05 	vldr	s13, [r3, #20]
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	3310      	adds	r3, #16
 8001008:	edd3 7a00 	vldr	s15, [r3]
 800100c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001010:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	edc3 7a00 	vstr	s15, [r3]
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001020:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	edd3 7a03 	vldr	s15, [r3, #12]
 800102a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800102e:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001032:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	3304      	adds	r3, #4
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001042:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001046:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((4.0 * Traj->TrajCoef[4]) * traj_t[2])
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001050:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001054:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001058:	ee27 5b05 	vmul.f64	d5, d7, d5
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	3308      	adds	r3, #8
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001068:	ee25 7b07 	vmul.f64	d7, d5, d7
 800106c:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((5.0 * Traj->TrajCoef[5]) * traj_t[3]);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	edd3 7a05 	vldr	s15, [r3, #20]
 8001076:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800107a:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 800107e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	330c      	adds	r3, #12
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800108e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001092:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001096:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	edc3 7a00 	vstr	s15, [r3]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <Kalman_init>:
 * KalmanFilter
 *
 * Q -> Process
 * R -> Sensor
 */
void Kalman_init(KalmanParameter *kalman, double Q, double R) {
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6178      	str	r0, [r7, #20]
 80010b4:	ed87 0b02 	vstr	d0, [r7, #8]
 80010b8:	ed87 1b00 	vstr	d1, [r7]
	kalman->Q = Q; 			// Adjustable
 80010bc:	ed97 7b02 	vldr	d7, [r7, #8]
 80010c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	edc3 7a00 	vstr	s15, [r3]
	kalman->R = R; 			// Adjustable
 80010ca:	ed97 7b00 	vldr	d7, [r7]
 80010ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	edc3 7a01 	vstr	s15, [r3, #4]
	kalman->x1 = 0.0;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
	kalman->x2 = 0.0;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
	kalman->p11 = 0.05;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <Kalman_init+0x60>)
 80010ec:	611a      	str	r2, [r3, #16]
	kalman->p12 = 0.05;
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <Kalman_init+0x60>)
 80010f2:	615a      	str	r2, [r3, #20]
	kalman->p21 = 0.05;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <Kalman_init+0x60>)
 80010f8:	619a      	str	r2, [r3, #24]
	kalman->p22 = 0.05;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	4a03      	ldr	r2, [pc, #12]	; (800110c <Kalman_init+0x60>)
 80010fe:	61da      	str	r2, [r3, #28]
}
 8001100:	bf00      	nop
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	3d4ccccd 	.word	0x3d4ccccd

08001110 <KalmanFilter>:


/*
 *	theta_k is Position input
 */
void KalmanFilter(KalmanParameter *kalman ,double theta_k) {
 8001110:	b480      	push	{r7}
 8001112:	b0a5      	sub	sp, #148	; 0x94
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	ed87 0b00 	vstr	d0, [r7]
	double e_xx1_tmp;
	double xx1_tmp;
	double xx1_tmp_tmp;
	double xx2_tmp;
	double xx1,xx2,pp11,pp12,pp21,pp22;
	xx1_tmp = 4.0 * delta_t * kalman->p12;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001122:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001126:	ed9f 6bec 	vldr	d6, [pc, #944]	; 80014d8 <KalmanFilter+0x3c8>
 800112a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800112e:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	b_xx1_tmp = 4.0 * delta_t * kalman->p21;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	edd3 7a06 	vldr	s15, [r3, #24]
 8001138:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800113c:	ed9f 6be6 	vldr	d6, [pc, #920]	; 80014d8 <KalmanFilter+0x3c8>
 8001140:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001144:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	c_xx1_tmp = kalman->Q * delta_tPow4;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001152:	ed9f 6be3 	vldr	d6, [pc, #908]	; 80014e0 <KalmanFilter+0x3d0>
 8001156:	ee27 7b06 	vmul.f64	d7, d7, d6
 800115a:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	xx1_tmp_tmp = delta_tPow2;
 800115e:	a3e6      	add	r3, pc, #920	; (adr r3, 80014f8 <KalmanFilter+0x3e8>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	d_xx1_tmp = 4.0 * xx1_tmp_tmp * kalman->p22;
 8001168:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800116c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001170:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	edd3 7a07 	vldr	s15, [r3, #28]
 800117a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800117e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001182:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	e_xx1_tmp = ((((4.0 * kalman->R + 4.0 * kalman->p11) + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	edd3 7a01 	vldr	s15, [r3, #4]
 800118c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001190:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001194:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	edd3 7a04 	vldr	s15, [r3, #16]
 800119e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011aa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011ae:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80011b2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011b6:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80011ba:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011be:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80011c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011c6:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 80011ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011ce:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			+ d_xx1_tmp;
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80011d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011dc:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80011e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ee:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80011f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011fc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001200:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001204:	ed97 7b00 	vldr	d7, [r7]
 8001208:	ee25 7b07 	vmul.f64	d7, d5, d7
 800120c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001210:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 8001214:	ed97 7b00 	vldr	d7, [r7]
 8001218:	ee25 7b07 	vmul.f64	d7, d5, d7
 800121c:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ 4.0 * kalman->R * delta_t * kalman->x2) + xx1_tmp * theta_k) + b_xx1_tmp * theta_k)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	edd3 7a01 	vldr	s15, [r3, #4]
 8001226:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800122a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800122e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001232:	ed9f 5bad 	vldr	d5, [pc, #692]	; 80014e8 <KalmanFilter+0x3d8>
 8001236:	ee27 5b05 	vmul.f64	d5, d7, d5
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001240:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001244:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001248:	ee36 6b07 	vadd.f64	d6, d6, d7
 800124c:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 8001250:	ed97 7b00 	vldr	d7, [r7]
 8001254:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001258:	ee36 6b07 	vadd.f64	d6, d6, d7
 800125c:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8001260:	ed97 7b00 	vldr	d7, [r7]
 8001264:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001268:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ c_xx1_tmp * theta_k) / e_xx1_tmp;
 800126c:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8001270:	ed97 7b00 	vldr	d7, [r7]
 8001274:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001278:	ee36 5b07 	vadd.f64	d5, d6, d7
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 800127c:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001280:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001284:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	xx2_tmp = kalman->p22 * delta_t;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	edd3 7a07 	vldr	s15, [r3, #28]
 800128e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001292:	ed9f 6b95 	vldr	d6, [pc, #596]	; 80014e8 <KalmanFilter+0x3d8>
 8001296:	ee27 7b06 	vmul.f64	d7, d7, d6
 800129a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	b_xx2_tmp = kalman->Q * delta_tPow3;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012a8:	ed9f 6b91 	vldr	d6, [pc, #580]	; 80014f0 <KalmanFilter+0x3e0>
 80012ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012b0:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	c_xx2_tmp = b_xx2_tmp / 2.0 + xx2_tmp;
 80012b4:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80012b8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80012bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012c0:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80012c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012c8:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	d_xx2_tmp = c_xx2_tmp + kalman->p21;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80012d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012d6:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 80012da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012de:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	xx2_tmp = (((kalman->R + kalman->p11) + delta_t * kalman->p21) + c_xx1_tmp / 4.0) + delta_t * (kalman->p12 + xx2_tmp);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80012ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80012fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001300:	ed9f 5b79 	vldr	d5, [pc, #484]	; 80014e8 <KalmanFilter+0x3d8>
 8001304:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001308:	ee36 6b07 	vadd.f64	d6, d6, d7
 800130c:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8001310:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 8001314:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001318:	ee36 6b07 	vadd.f64	d6, d6, d7
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001322:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001326:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800132a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800132e:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 80014e8 <KalmanFilter+0x3d8>
 8001332:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001336:	ee36 7b07 	vadd.f64	d7, d6, d7
 800133a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	xx2 = kalman->x2 - d_xx2_tmp * ((kalman->x1 - theta_k) + delta_t * kalman->x2) / xx2_tmp;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	edd3 7a03 	vldr	s15, [r3, #12]
 8001344:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	edd3 7a02 	vldr	s15, [r3, #8]
 800134e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001352:	ed97 7b00 	vldr	d7, [r7]
 8001356:	ee35 5b47 	vsub.f64	d5, d5, d7
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001360:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001364:	ed9f 4b60 	vldr	d4, [pc, #384]	; 80014e8 <KalmanFilter+0x3d8>
 8001368:	ee27 7b04 	vmul.f64	d7, d7, d4
 800136c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001370:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001374:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001378:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 800137c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001380:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001384:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	pp11 = kalman->R * ((((4.0 * kalman->p11 + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp) + d_xx1_tmp)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	edd3 7a01 	vldr	s15, [r3, #4]
 800138e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	edd3 7a04 	vldr	s15, [r3, #16]
 8001398:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800139c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013a0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80013a4:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80013a8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80013ac:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80013b0:	ee35 5b07 	vadd.f64	d5, d5, d7
 80013b4:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80013b8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80013bc:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80013c0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80013c4:	ee26 5b07 	vmul.f64	d5, d6, d7
 80013c8:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80013cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013d0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			/ e_xx1_tmp;
	xx1_tmp = b_xx2_tmp + 2.0 * kalman->p22 * delta_t;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80013da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013de:	ee37 7b07 	vadd.f64	d7, d7, d7
 80013e2:	ed9f 6b41 	vldr	d6, [pc, #260]	; 80014e8 <KalmanFilter+0x3d8>
 80013e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013ea:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80013ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013f2:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	pp12 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p12) / e_xx1_tmp;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80013fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001400:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	edd3 7a05 	vldr	s15, [r3, #20]
 800140a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800140e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001412:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001416:	ee35 7b07 	vadd.f64	d7, d5, d7
 800141a:	ee26 5b07 	vmul.f64	d5, d6, d7
 800141e:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001422:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001426:	ed87 7b08 	vstr	d7, [r7, #32]
	pp21 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p21) / e_xx1_tmp;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001430:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001434:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	edd3 7a06 	vldr	s15, [r3, #24]
 800143e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001442:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001446:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800144a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800144e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001452:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001456:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800145a:	ed87 7b06 	vstr	d7, [r7, #24]
	pp22 = (kalman->p22 + kalman->Q * xx1_tmp_tmp) - (c_xx2_tmp + kalman->p12) * d_xx2_tmp / xx2_tmp;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	edd3 7a07 	vldr	s15, [r3, #28]
 8001464:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001472:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001476:	ee25 7b07 	vmul.f64	d7, d5, d7
 800147a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	edd3 7a05 	vldr	s15, [r3, #20]
 8001484:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001488:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800148c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001490:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001494:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001498:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 800149c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80014a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014a4:	ed87 7b04 	vstr	d7, [r7, #16]

	/*Update Variable*/
	kalman->x1 = xx1;
 80014a8:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80014ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	edc3 7a02 	vstr	s15, [r3, #8]
	kalman->x2 = xx2;
 80014b6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80014ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	edc3 7a03 	vstr	s15, [r3, #12]
	kalman->p11 = pp11;
 80014c4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80014c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	edc3 7a04 	vstr	s15, [r3, #16]
 80014d2:	e015      	b.n	8001500 <KalmanFilter+0x3f0>
 80014d4:	f3af 8000 	nop.w
 80014d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80014dc:	3f70624d 	.word	0x3f70624d
 80014e0:	812dea12 	.word	0x812dea12
 80014e4:	3d719799 	.word	0x3d719799
 80014e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80014ec:	3f50624d 	.word	0x3f50624d
 80014f0:	e826d695 	.word	0xe826d695
 80014f4:	3e112e0b 	.word	0x3e112e0b
 80014f8:	a0b5ed8d 	.word	0xa0b5ed8d
 80014fc:	3eb0c6f7 	.word	0x3eb0c6f7
	kalman->p12 = pp12;
 8001500:	ed97 7b08 	vldr	d7, [r7, #32]
 8001504:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	edc3 7a05 	vstr	s15, [r3, #20]
	kalman->p21 = pp21;
 800150e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001512:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	edc3 7a06 	vstr	s15, [r3, #24]
	kalman->p22 = pp22;
 800151c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001520:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800152a:	bf00      	nop
 800152c:	3794      	adds	r7, #148	; 0x94
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <PID_init>:

float BaseENCRead(){
	return 970.0f;  //fsaldfkjas;dflkjas;dflksjf;asdf
}

void PID_init(PIDParameter *PID, float Kp, float Ki, float Kd) {
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	ed87 0a02 	vstr	s0, [r7, #8]
 8001544:	edc7 0a01 	vstr	s1, [r7, #4]
 8001548:	ed87 1a00 	vstr	s2, [r7]
	PID->Kp = Kp;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	601a      	str	r2, [r3, #0]
	PID->Ki = Ki;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	605a      	str	r2, [r3, #4]
	PID->Kd = Kd;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	609a      	str	r2, [r3, #8]
	PID->ITerm = 0;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
	PID->Setpoint = 0;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
	PID->Feedback = 0;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
	PID->Error[0] = 0;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
	PID->Error[1] = 0;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
	PID->Output = 0;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <PID_Control>:

float PID_Control(PIDParameter *PID,float Setpoint,float Feedback){
 800159a:	b480      	push	{r7}
 800159c:	b085      	sub	sp, #20
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80015a6:	edc7 0a01 	vstr	s1, [r7, #4]
	PID->Feedback = Feedback; 	// Feedback Input
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	615a      	str	r2, [r3, #20]
	PID->Setpoint = Setpoint;	// Setpoint Input
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	611a      	str	r2, [r3, #16]
	PID->Error[0] = PID->Setpoint - PID->Feedback;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	ed93 7a04 	vldr	s14, [r3, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	edd3 7a05 	vldr	s15, [r3, #20]
 80015c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	edc3 7a06 	vstr	s15, [r3, #24]
	PID->ITerm += PID->Error[0];
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	ed93 7a00 	vldr	s14, [r3]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80015ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80015fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001602:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (PID->Kd * (PID->Error[0] - PID->Error[1])));
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	edd3 6a02 	vldr	s13, [r3, #8]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	ed93 6a06 	vldr	s12, [r3, #24]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	edd3 7a07 	vldr	s15, [r3, #28]
 8001618:	ee76 7a67 	vsub.f32	s15, s12, s15
 800161c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001620:	ee77 7a27 	vadd.f32	s15, s14, s15
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	edc3 7a08 	vstr	s15, [r3, #32]
	PID->Error[1] = PID->Error[0]; // Update Error
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	699a      	ldr	r2, [r3, #24]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	61da      	str	r2, [r3, #28]
	return PID->Output;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	ee07 3a90 	vmov	s15, r3
}
 800163a:	eeb0 0a67 	vmov.f32	s0, s15
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <CascadeControl_init>:


void CascadeControl_init(ControlParameter *Control,float PosP,float PosI,float PosD,float VelP,float VelI,float VelD, float GFeed){
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
 800164e:	61f8      	str	r0, [r7, #28]
 8001650:	ed87 0a06 	vstr	s0, [r7, #24]
 8001654:	edc7 0a05 	vstr	s1, [r7, #20]
 8001658:	ed87 1a04 	vstr	s2, [r7, #16]
 800165c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001660:	ed87 2a02 	vstr	s4, [r7, #8]
 8001664:	edc7 2a01 	vstr	s5, [r7, #4]
 8001668:	ed87 3a00 	vstr	s6, [r7]
	PID_init(&Control->Pos,PosP,PosI,PosD);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	ed97 1a04 	vldr	s2, [r7, #16]
 8001672:	edd7 0a05 	vldr	s1, [r7, #20]
 8001676:	ed97 0a06 	vldr	s0, [r7, #24]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff5c 	bl	8001538 <PID_init>
	PID_init(&Control->Vel,VelP,VelI,VelD);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	3330      	adds	r3, #48	; 0x30
 8001684:	ed97 1a01 	vldr	s2, [r7, #4]
 8001688:	edd7 0a02 	vldr	s1, [r7, #8]
 800168c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff51 	bl	8001538 <PID_init>
	Control->Vel_Gfeed = GFeed;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <CascadeControl>:


void CascadeControl(ControlParameter *Control, KalmanParameter *kalman,
		float Pos_Feed, float pos_set, float vel_set) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6178      	str	r0, [r7, #20]
 80016ac:	6139      	str	r1, [r7, #16]
 80016ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80016b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80016b6:	ed87 1a01 	vstr	s2, [r7, #4]
	/*Set Setpoint*/
	Control->PositionSetpoint = pos_set;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	625a      	str	r2, [r3, #36]	; 0x24
	Control->VelocitySetpoint = vel_set;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	655a      	str	r2, [r3, #84]	; 0x54

	/*Kalman Filter*/
	KalmanFilter(kalman, Pos_Feed); /*Kalman filter */
 80016c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016ce:	eeb0 0b47 	vmov.f64	d0, d7
 80016d2:	6938      	ldr	r0, [r7, #16]
 80016d4:	f7ff fd1c 	bl	8001110 <KalmanFilter>
	Control->VelocityFeedback = kalman->x2;
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	65da      	str	r2, [r3, #92]	; 0x5c
	Control->PositionFeedback = kalman->x1;
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28

	/*Position PID Control*/
	Control->PositionPIDOutput = PID_Control(&Control->Pos,
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016f6:	eef0 0a47 	vmov.f32	s1, s14
 80016fa:	eeb0 0a67 	vmov.f32	s0, s15
 80016fe:	4610      	mov	r0, r2
 8001700:	f7ff ff4b 	bl	800159a <PID_Control>
 8001704:	eef0 7a40 	vmov.f32	s15, s0
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			Control->PositionSetpoint, Control->PositionFeedback);
	/*Feedforward Velocity*/
	Control->SumVelocityFeedForward = Control->PositionPIDOutput + Control->VelocitySetpoint;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800171a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	/*Velocity PID Control*/
	Control->VelocityPIDOutput = PID_Control(&Control->Vel,
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001736:	eef0 0a47 	vmov.f32	s1, s14
 800173a:	eeb0 0a67 	vmov.f32	s0, s15
 800173e:	4610      	mov	r0, r2
 8001740:	f7ff ff2b 	bl	800159a <PID_Control>
 8001744:	eef0 7a40 	vmov.f32	s15, s0
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			Control->SumVelocityFeedForward, Control->VelocityFeedback);
	/*Feedforward Velocity Setpoint*/
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800175a:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Control->VelocityPIDOutput;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001764:	ee77 7a27 	vadd.f32	s15, s14, s15
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
//	Control->Output = Control->VelocityPIDOutput;
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_CRC_Init+0x50>)
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <MX_CRC_Init+0x54>)
 8001780:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_CRC_Init+0x50>)
 8001784:	2201      	movs	r2, #1
 8001786:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_CRC_Init+0x50>)
 800178a:	2201      	movs	r2, #1
 800178c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_CRC_Init+0x50>)
 8001790:	221d      	movs	r2, #29
 8001792:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_CRC_Init+0x50>)
 8001796:	2210      	movs	r2, #16
 8001798:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <MX_CRC_Init+0x50>)
 800179c:	22c4      	movs	r2, #196	; 0xc4
 800179e:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_CRC_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <MX_CRC_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_CRC_Init+0x50>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_CRC_Init+0x50>)
 80017b4:	f007 f940 	bl	8008a38 <HAL_CRC_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 80017be:	f003 f815 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000228 	.word	0x20000228
 80017cc:	58024c00 	.word	0x58024c00

080017d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <HAL_CRC_MspInit+0x3c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d10e      	bne.n	8001800 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_CRC_MspInit+0x40>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e8:	4a09      	ldr	r2, [pc, #36]	; (8001810 <HAL_CRC_MspInit+0x40>)
 80017ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <HAL_CRC_MspInit+0x40>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	58024c00 	.word	0x58024c00
 8001810:	58024400 	.word	0x58024400

08001814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <MX_DMA_Init+0x5c>)
 800181c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001820:	4a13      	ldr	r2, [pc, #76]	; (8001870 <MX_DMA_Init+0x5c>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <MX_DMA_Init+0x5c>)
 800182c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	200b      	movs	r0, #11
 800183e:	f007 f8c6 	bl	80089ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001842:	200b      	movs	r0, #11
 8001844:	f007 f8dd 	bl	8008a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	200c      	movs	r0, #12
 800184e:	f007 f8be 	bl	80089ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001852:	200c      	movs	r0, #12
 8001854:	f007 f8d5 	bl	8008a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	200d      	movs	r0, #13
 800185e:	f007 f8b6 	bl	80089ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001862:	200d      	movs	r0, #13
 8001864:	f007 f8cd 	bl	8008a02 <HAL_NVIC_EnableIRQ>

}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	58024400 	.word	0x58024400

08001874 <MX_GPIO_Init>:
        * the Code Generation settings)
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08c      	sub	sp, #48	; 0x30
 8001878:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	f107 031c 	add.w	r3, r7, #28
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800188a:	4b91      	ldr	r3, [pc, #580]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001890:	4a8f      	ldr	r2, [pc, #572]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 8001892:	f043 0310 	orr.w	r3, r3, #16
 8001896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189a:	4b8d      	ldr	r3, [pc, #564]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 800189c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a8:	4b89      	ldr	r3, [pc, #548]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ae:	4a88      	ldr	r2, [pc, #544]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b8:	4b85      	ldr	r3, [pc, #532]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 80018ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c6:	4b82      	ldr	r3, [pc, #520]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 80018c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018cc:	4a80      	ldr	r2, [pc, #512]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 80018ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d6:	4b7e      	ldr	r3, [pc, #504]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 80018d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e4:	4b7a      	ldr	r3, [pc, #488]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 80018e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ea:	4a79      	ldr	r2, [pc, #484]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f4:	4b76      	ldr	r3, [pc, #472]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 80018f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	4b73      	ldr	r3, [pc, #460]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001908:	4a71      	ldr	r2, [pc, #452]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 800190a:	f043 0302 	orr.w	r3, r3, #2
 800190e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001912:	4b6f      	ldr	r3, [pc, #444]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001920:	4b6b      	ldr	r3, [pc, #428]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001926:	4a6a      	ldr	r2, [pc, #424]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001930:	4b67      	ldr	r3, [pc, #412]	; (8001ad0 <MX_GPIO_Init+0x25c>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 800193e:	2200      	movs	r2, #0
 8001940:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001944:	4863      	ldr	r0, [pc, #396]	; (8001ad4 <MX_GPIO_Init+0x260>)
 8001946:	f009 fe4f 	bl	800b5e8 <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED2_Pin, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001950:	4861      	ldr	r0, [pc, #388]	; (8001ad8 <MX_GPIO_Init+0x264>)
 8001952:	f009 fe49 	bl	800b5e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	21c4      	movs	r1, #196	; 0xc4
 800195a:	4860      	ldr	r0, [pc, #384]	; (8001adc <MX_GPIO_Init+0x268>)
 800195c:	f009 fe44 	bl	800b5e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	f24c 0140 	movw	r1, #49216	; 0xc040
 8001966:	485e      	ldr	r0, [pc, #376]	; (8001ae0 <MX_GPIO_Init+0x26c>)
 8001968:	f009 fe3e 	bl	800b5e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800196c:	2201      	movs	r2, #1
 800196e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001972:	4859      	ldr	r0, [pc, #356]	; (8001ad8 <MX_GPIO_Init+0x264>)
 8001974:	f009 fe38 	bl	800b5e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001978:	2201      	movs	r2, #1
 800197a:	213f      	movs	r1, #63	; 0x3f
 800197c:	4858      	ldr	r0, [pc, #352]	; (8001ae0 <MX_GPIO_Init+0x26c>)
 800197e:	f009 fe33 	bl	800b5e8 <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001982:	f648 33df 	movw	r3, #35807	; 0x8bdf
 8001986:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	484e      	ldr	r0, [pc, #312]	; (8001ad4 <MX_GPIO_Init+0x260>)
 800199c:	f009 fc7c 	bl	800b298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80019a0:	f24e 030f 	movw	r3, #57359	; 0xe00f
 80019a4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a6:	2303      	movs	r3, #3
 80019a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	4848      	ldr	r0, [pc, #288]	; (8001ad8 <MX_GPIO_Init+0x264>)
 80019b6:	f009 fc6f 	bl	800b298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80019ba:	233c      	movs	r3, #60	; 0x3c
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019be:	2303      	movs	r3, #3
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	4845      	ldr	r0, [pc, #276]	; (8001ae4 <MX_GPIO_Init+0x270>)
 80019ce:	f009 fc63 	bl	800b298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 80019d2:	f44f 7344 	mov.w	r3, #784	; 0x310
 80019d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	483b      	ldr	r0, [pc, #236]	; (8001ad8 <MX_GPIO_Init+0x264>)
 80019ec:	f009 fc54 	bl	800b298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f4:	2303      	movs	r3, #3
 80019f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	4836      	ldr	r0, [pc, #216]	; (8001adc <MX_GPIO_Init+0x268>)
 8001a04:	f009 fc48 	bl	800b298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	482f      	ldr	r0, [pc, #188]	; (8001adc <MX_GPIO_Init+0x268>)
 8001a1e:	f009 fc3b 	bl	800b298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 8001a22:	23c4      	movs	r3, #196	; 0xc4
 8001a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	4828      	ldr	r0, [pc, #160]	; (8001adc <MX_GPIO_Init+0x268>)
 8001a3a:	f009 fc2d 	bl	800b298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a44:	2303      	movs	r3, #3
 8001a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4619      	mov	r1, r3
 8001a52:	4820      	ldr	r0, [pc, #128]	; (8001ad4 <MX_GPIO_Init+0x260>)
 8001a54:	f009 fc20 	bl	800b298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_7;
 8001a58:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	481c      	ldr	r0, [pc, #112]	; (8001ae0 <MX_GPIO_Init+0x26c>)
 8001a6e:	f009 fc13 	bl	800b298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001a72:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001a76:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4815      	ldr	r0, [pc, #84]	; (8001ae0 <MX_GPIO_Init+0x26c>)
 8001a8c:	f009 fc04 	bl	800b298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480f      	ldr	r0, [pc, #60]	; (8001ae4 <MX_GPIO_Init+0x270>)
 8001aa6:	f009 fbf7 	bl	800b298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001aaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4808      	ldr	r0, [pc, #32]	; (8001ae4 <MX_GPIO_Init+0x270>)
 8001ac4:	f009 fbe8 	bl	800b298 <HAL_GPIO_Init>

}
 8001ac8:	bf00      	nop
 8001aca:	3730      	adds	r7, #48	; 0x30
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	58024400 	.word	0x58024400
 8001ad4:	58021000 	.word	0x58021000
 8001ad8:	58020800 	.word	0x58020800
 8001adc:	58020400 	.word	0x58020400
 8001ae0:	58020c00 	.word	0x58020c00
 8001ae4:	58020000 	.word	0x58020000

08001ae8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <MX_I2C2_Init+0x74>)
 8001aee:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <MX_I2C2_Init+0x78>)
 8001af0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_I2C2_Init+0x74>)
 8001af4:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <MX_I2C2_Init+0x7c>)
 8001af6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <MX_I2C2_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <MX_I2C2_Init+0x74>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <MX_I2C2_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <MX_I2C2_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_I2C2_Init+0x74>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_I2C2_Init+0x74>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_I2C2_Init+0x74>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b22:	480e      	ldr	r0, [pc, #56]	; (8001b5c <MX_I2C2_Init+0x74>)
 8001b24:	f009 fd94 	bl	800b650 <HAL_I2C_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b2e:	f002 fe5d 	bl	80047ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b32:	2100      	movs	r1, #0
 8001b34:	4809      	ldr	r0, [pc, #36]	; (8001b5c <MX_I2C2_Init+0x74>)
 8001b36:	f00b fca1 	bl	800d47c <HAL_I2CEx_ConfigAnalogFilter>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b40:	f002 fe54 	bl	80047ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b44:	2100      	movs	r1, #0
 8001b46:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_I2C2_Init+0x74>)
 8001b48:	f00b fce3 	bl	800d512 <HAL_I2CEx_ConfigDigitalFilter>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b52:	f002 fe4b 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000024c 	.word	0x2000024c
 8001b60:	40005800 	.word	0x40005800
 8001b64:	60404e72 	.word	0x60404e72

08001b68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b0b6      	sub	sp, #216	; 0xd8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	22b4      	movs	r2, #180	; 0xb4
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f013 ffd9 	bl	8015b40 <memset>
  if(i2cHandle->Instance==I2C2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a29      	ldr	r2, [pc, #164]	; (8001c38 <HAL_I2C_MspInit+0xd0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d14a      	bne.n	8001c2e <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f00c fc74 	bl	800e494 <HAL_RCCEx_PeriphCLKConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001bb2:	f002 fe1b 	bl	80047ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_I2C_MspInit+0xd4>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <HAL_I2C_MspInit+0xd4>)
 8001bbe:	f043 0302 	orr.w	r3, r3, #2
 8001bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_I2C_MspInit+0xd4>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bd4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bdc:	2312      	movs	r3, #18
 8001bde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4811      	ldr	r0, [pc, #68]	; (8001c40 <HAL_I2C_MspInit+0xd8>)
 8001bfc:	f009 fb4c 	bl	800b298 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_I2C_MspInit+0xd4>)
 8001c02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c06:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <HAL_I2C_MspInit+0xd4>)
 8001c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_I2C_MspInit+0xd4>)
 8001c12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	2022      	movs	r0, #34	; 0x22
 8001c24:	f006 fed3 	bl	80089ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001c28:	2022      	movs	r0, #34	; 0x22
 8001c2a:	f006 feea 	bl	8008a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001c2e:	bf00      	nop
 8001c30:	37d8      	adds	r7, #216	; 0xd8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40005800 	.word	0x40005800
 8001c3c:	58024400 	.word	0x58024400
 8001c40:	58020400 	.word	0x58020400
 8001c44:	00000000 	.word	0x00000000

08001c48 <IPK>:
 *
 **************** Output ********************
 * q[4]				---> JointSpace Position
 *
 */
Kinematics_StatusTypeDef IPK(float gammabar[3], float chi[3], float q[4]) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	ed2d 8b02 	vpush	{d8}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
	float c2;
	float q2;
	float q3;
	float s2;
	float x24;
	x24 = gammabar[1] * sqrt(chi[0] * chi[0] + chi[1] * chi[1]) - 20.0;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	ed93 7a00 	vldr	s14, [r3]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	3304      	adds	r3, #4
 8001c78:	edd3 6a00 	vldr	s13, [r3]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	3304      	adds	r3, #4
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c90:	eeb0 0b47 	vmov.f64	d0, d7
 8001c94:	f013 fff8 	bl	8015c88 <sqrt>
 8001c98:	eeb0 7b40 	vmov.f64	d7, d0
 8001c9c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001ca0:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8001ca4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ca8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	c2 = x24 * x24
 8001cb0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cb8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			+ ((chi[2] + 268.23) - 295.89) * ((chi[2] + 268.23) - 295.89);
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cc8:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8001ed8 <IPK+0x290>
 8001ccc:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001cd0:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8001ee0 <IPK+0x298>
 8001cd4:	ee37 5b45 	vsub.f64	d5, d7, d5
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	3308      	adds	r3, #8
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce4:	ed9f 4b7c 	vldr	d4, [pc, #496]	; 8001ed8 <IPK+0x290>
 8001ce8:	ee37 7b04 	vadd.f64	d7, d7, d4
 8001cec:	ed9f 4b7c 	vldr	d4, [pc, #496]	; 8001ee0 <IPK+0x298>
 8001cf0:	ee37 7b44 	vsub.f64	d7, d7, d4
 8001cf4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001cf8:	ee36 7b07 	vadd.f64	d7, d6, d7
	c2 = x24 * x24
 8001cfc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d00:	edc7 7a08 	vstr	s15, [r7, #32]
	s2 = sqrt(c2);
 8001d04:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d0c:	eeb0 0b47 	vmov.f64	d0, d7
 8001d10:	f013 ffba 	bl	8015c88 <sqrt>
 8001d14:	eeb0 7b40 	vmov.f64	d7, d0
 8001d18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d1c:	edc7 7a07 	vstr	s15, [r7, #28]
	if ((s2 <= 760.0) && (s2 >= 0.0)) {
 8001d20:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d24:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001f08 <IPK+0x2c0>
 8001d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d30:	f200 80c8 	bhi.w	8001ec4 <IPK+0x27c>
 8001d34:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	f2c0 80c0 	blt.w	8001ec4 <IPK+0x27c>
		c2 = ((c2 - 144400.0) - 144400.0) / 288800.0;
 8001d44:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d4c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8001ee8 <IPK+0x2a0>
 8001d50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d54:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8001ee8 <IPK+0x2a0>
 8001d58:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001d5c:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8001ef0 <IPK+0x2a8>
 8001d60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d68:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = gammabar[2] * sqrt(1.0 - c2 * c2);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3308      	adds	r3, #8
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001d78:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d8c:	eeb0 0b47 	vmov.f64	d0, d7
 8001d90:	f013 ff7a 	bl	8015c88 <sqrt>
 8001d94:	eeb0 7b40 	vmov.f64	d7, d0
 8001d98:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001d9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001da0:	edc7 7a07 	vstr	s15, [r7, #28]
		q2 = (atan2((chi[2] + 268.23) - 295.89, x24)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	3308      	adds	r3, #8
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001db0:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001ed8 <IPK+0x290>
 8001db4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001db8:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001ee0 <IPK+0x298>
 8001dbc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dc0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001dc4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001dc8:	eeb0 1b46 	vmov.f64	d1, d6
 8001dcc:	eeb0 0b47 	vmov.f64	d0, d7
 8001dd0:	f013 ff56 	bl	8015c80 <atan2>
 8001dd4:	eeb0 8b40 	vmov.f64	d8, d0
				- atan2(380.0 * s2, 380.0 * c2 + 380.0)) - 1.5707963267948966;
 8001dd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ddc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001de0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8001ef8 <IPK+0x2b0>
 8001de4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001de8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001df0:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8001ef8 <IPK+0x2b0>
 8001df4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001df8:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8001ef8 <IPK+0x2b0>
 8001dfc:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001e00:	eeb0 1b47 	vmov.f64	d1, d7
 8001e04:	eeb0 0b46 	vmov.f64	d0, d6
 8001e08:	f013 ff3a 	bl	8015c80 <atan2>
 8001e0c:	eeb0 7b40 	vmov.f64	d7, d0
 8001e10:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001e14:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8001f00 <IPK+0x2b8>
 8001e18:	ee37 7b46 	vsub.f64	d7, d7, d6
		q2 = (atan2((chi[2] + 268.23) - 295.89, x24)
 8001e1c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e20:	edc7 7a06 	vstr	s15, [r7, #24]
		q3 = atan2(s2, c2) + 1.5707963267948966;
 8001e24:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e2c:	edd7 6a08 	vldr	s13, [r7, #32]
 8001e30:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001e34:	eeb0 1b46 	vmov.f64	d1, d6
 8001e38:	eeb0 0b47 	vmov.f64	d0, d7
 8001e3c:	f013 ff20 	bl	8015c80 <atan2>
 8001e40:	eeb0 7b40 	vmov.f64	d7, d0
 8001e44:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001f00 <IPK+0x2b8>
 8001e48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e50:	edc7 7a05 	vstr	s15, [r7, #20]
		q[0] = atan2(gammabar[0] * chi[1], gammabar[0] * chi[0]);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	ed93 7a00 	vldr	s14, [r3]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	edd3 7a00 	vldr	s15, [r3]
 8001e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	ed93 6a00 	vldr	s12, [r3]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	edd3 6a00 	vldr	s13, [r3]
 8001e76:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001e7a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001e7e:	eeb0 1b46 	vmov.f64	d1, d6
 8001e82:	eeb0 0b47 	vmov.f64	d0, d7
 8001e86:	f013 fefb 	bl	8015c80 <atan2>
 8001e8a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edc3 7a00 	vstr	s15, [r3]
		q[1] = q2;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	601a      	str	r2, [r3, #0]
		q[2] = q3;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3308      	adds	r3, #8
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	601a      	str	r2, [r3, #0]
		q[3] = -q2 - q3;
 8001ea8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eac:	eeb1 7a67 	vneg.f32	s14, s15
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	330c      	adds	r3, #12
 8001eb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ebc:	edc3 7a00 	vstr	s15, [r3]
		return Kinematics_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e000      	b.n	8001ec6 <IPK+0x27e>
	} else {
		return Error_Link_length;
 8001ec4:	2301      	movs	r3, #1
	}
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3728      	adds	r7, #40	; 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	ecbd 8b02 	vpop	{d8}
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	147ae148 	.word	0x147ae148
 8001edc:	4070c3ae 	.word	0x4070c3ae
 8001ee0:	70a3d70a 	.word	0x70a3d70a
 8001ee4:	40727e3d 	.word	0x40727e3d
 8001ee8:	00000000 	.word	0x00000000
 8001eec:	4101a080 	.word	0x4101a080
 8001ef0:	00000000 	.word	0x00000000
 8001ef4:	4111a080 	.word	0x4111a080
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	4077c000 	.word	0x4077c000
 8001f00:	54442d18 	.word	0x54442d18
 8001f04:	3ff921fb 	.word	0x3ff921fb
 8001f08:	443e0000 	.word	0x443e0000
 8001f0c:	00000000 	.word	0x00000000

08001f10 <IVK>:
 */

//Kinematics_StatusTypeDef IVK(float q[3], float chi_dot[3], float qv[4])

Kinematics_StatusTypeDef IVK(float q[4], float chi_dot[3], float qv[4])
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	ed2d 8b04 	vpush	{d8-d9}
 8001f16:	b096      	sub	sp, #88	; 0x58
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  float qvbar_idx_1;
  float qvbar_idx_2;
  int r1;
  int r2;
  int rtemp;
  qvbar_idx_1 = q[1] + q[2];
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3304      	adds	r3, #4
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3308      	adds	r3, #8
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f34:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qvbar_idx_2 = sin(qvbar_idx_1);
 8001f38:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f40:	eeb0 0b47 	vmov.f64	d0, d7
 8001f44:	f013 fe50 	bl	8015be8 <sin>
 8001f48:	eeb0 7b40 	vmov.f64	d7, d0
 8001f4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f50:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  Jv4_tmp = cos(q[0]);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f5e:	eeb0 0b47 	vmov.f64	d0, d7
 8001f62:	f013 fdf5 	bl	8015b50 <cos>
 8001f66:	eeb0 7b40 	vmov.f64	d7, d0
 8001f6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f6e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  b_Jv4_tmp = sin(q[0]);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f7c:	eeb0 0b47 	vmov.f64	d0, d7
 8001f80:	f013 fe32 	bl	8015be8 <sin>
 8001f84:	eeb0 7b40 	vmov.f64	d7, d0
 8001f88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f8c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  qvbar_idx_1 = 380.0 * cos(qvbar_idx_1);
 8001f90:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f98:	eeb0 0b47 	vmov.f64	d0, d7
 8001f9c:	f013 fdd8 	bl	8015b50 <cos>
 8001fa0:	eeb0 7b40 	vmov.f64	d7, d0
 8001fa4:	ed9f 6bce 	vldr	d6, [pc, #824]	; 80022e0 <IVK+0x3d0>
 8001fa8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fb0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  Jv4_tmp_tmp = 380.0 * sin(q[1]);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fc0:	eeb0 0b47 	vmov.f64	d0, d7
 8001fc4:	f013 fe10 	bl	8015be8 <sin>
 8001fc8:	eeb0 7b40 	vmov.f64	d7, d0
 8001fcc:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 80022e0 <IVK+0x3d0>
 8001fd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fd4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fd8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  c_Jv4_tmp = (qvbar_idx_1 + 20.0) - Jv4_tmp_tmp;
 8001fdc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001fe0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fe4:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8001fe8:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001fec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ff0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ff4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ff8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ffc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  Jv4[0] = -b_Jv4_tmp * c_Jv4_tmp;
 8002000:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002004:	eeb1 7a67 	vneg.f32	s14, s15
 8002008:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800200c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002010:	edc7 7a04 	vstr	s15, [r7, #16]
  Jv4[3] = -Jv4_tmp * (380.0 * qvbar_idx_2 + 380.0 * cos(q[1]));
 8002014:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002018:	eef1 7a67 	vneg.f32	s15, s15
 800201c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002020:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002024:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002028:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80022e0 <IVK+0x3d0>
 800202c:	ee27 9b06 	vmul.f64	d9, d7, d6
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3304      	adds	r3, #4
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800203c:	eeb0 0b47 	vmov.f64	d0, d7
 8002040:	f013 fd86 	bl	8015b50 <cos>
 8002044:	eeb0 7b40 	vmov.f64	d7, d0
 8002048:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 80022e0 <IVK+0x3d0>
 800204c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002050:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002054:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002058:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800205c:	edc7 7a07 	vstr	s15, [r7, #28]
  Jv4[6] = -380.0 * qvbar_idx_2 * Jv4_tmp;
 8002060:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002064:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002068:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 80022e8 <IVK+0x3d8>
 800206c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002070:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002074:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002078:	ee26 7b07 	vmul.f64	d7, d6, d7
 800207c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002080:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  Jv4[1] = Jv4_tmp * c_Jv4_tmp;
 8002084:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002088:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800208c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002090:	edc7 7a05 	vstr	s15, [r7, #20]
  Jv4[4] = -sin(q[0]) * (380.0 * sin(q[1] + q[2]) + 380.0 * cos(q[1]));
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800209e:	eeb0 0b47 	vmov.f64	d0, d7
 80020a2:	f013 fda1 	bl	8015be8 <sin>
 80020a6:	eeb0 7b40 	vmov.f64	d7, d0
 80020aa:	eeb1 8b47 	vneg.f64	d8, d7
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3304      	adds	r3, #4
 80020b2:	ed93 7a00 	vldr	s14, [r3]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3308      	adds	r3, #8
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020c6:	eeb0 0b47 	vmov.f64	d0, d7
 80020ca:	f013 fd8d 	bl	8015be8 <sin>
 80020ce:	eeb0 7b40 	vmov.f64	d7, d0
 80020d2:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80022e0 <IVK+0x3d0>
 80020d6:	ee27 9b06 	vmul.f64	d9, d7, d6
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3304      	adds	r3, #4
 80020de:	edd3 7a00 	vldr	s15, [r3]
 80020e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020e6:	eeb0 0b47 	vmov.f64	d0, d7
 80020ea:	f013 fd31 	bl	8015b50 <cos>
 80020ee:	eeb0 7b40 	vmov.f64	d7, d0
 80020f2:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 80022e0 <IVK+0x3d0>
 80020f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020fa:	ee39 7b07 	vadd.f64	d7, d9, d7
 80020fe:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002102:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002106:	edc7 7a08 	vstr	s15, [r7, #32]
  Jv4[7] = -380.0 * sin(q[1] + q[2]) * b_Jv4_tmp;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3304      	adds	r3, #4
 800210e:	ed93 7a00 	vldr	s14, [r3]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	3308      	adds	r3, #8
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002122:	eeb0 0b47 	vmov.f64	d0, d7
 8002126:	f013 fd5f 	bl	8015be8 <sin>
 800212a:	eeb0 7b40 	vmov.f64	d7, d0
 800212e:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 80022e8 <IVK+0x3d8>
 8002132:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002136:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800213a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800213e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002142:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002146:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  Jv4[2] = 0.0;
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]
  Jv4[5] = qvbar_idx_1 - Jv4_tmp_tmp;
 8002150:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002154:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800215c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  Jv4[8] = qvbar_idx_1;
 8002160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
  r1 = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	657b      	str	r3, [r7, #84]	; 0x54
  r2 = 1;
 8002168:	2301      	movs	r3, #1
 800216a:	653b      	str	r3, [r7, #80]	; 0x50
  rtemp = 2;
 800216c:	2302      	movs	r3, #2
 800216e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (fabs(Jv4[1]) > fabs(Jv4[0])) {
 8002170:	edd7 7a05 	vldr	s15, [r7, #20]
 8002174:	eeb0 7ae7 	vabs.f32	s14, s15
 8002178:	edd7 7a04 	vldr	s15, [r7, #16]
 800217c:	eef0 7ae7 	vabs.f32	s15, s15
 8002180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002188:	dd03      	ble.n	8002192 <IVK+0x282>
    r1 = 1;
 800218a:	2301      	movs	r3, #1
 800218c:	657b      	str	r3, [r7, #84]	; 0x54
    r2 = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	653b      	str	r3, [r7, #80]	; 0x50
  }
  Jv4[r2] /= Jv4[r1];
 8002192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	3358      	adds	r3, #88	; 0x58
 8002198:	443b      	add	r3, r7
 800219a:	3b48      	subs	r3, #72	; 0x48
 800219c:	edd3 6a00 	vldr	s13, [r3]
 80021a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	3358      	adds	r3, #88	; 0x58
 80021a6:	443b      	add	r3, r7
 80021a8:	3b48      	subs	r3, #72	; 0x48
 80021aa:	ed93 7a00 	vldr	s14, [r3]
 80021ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	3358      	adds	r3, #88	; 0x58
 80021b8:	443b      	add	r3, r7
 80021ba:	3b48      	subs	r3, #72	; 0x48
 80021bc:	edc3 7a00 	vstr	s15, [r3]
  Jv4[2] = 0.0 / Jv4[r1];
 80021c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	3358      	adds	r3, #88	; 0x58
 80021c6:	443b      	add	r3, r7
 80021c8:	3b48      	subs	r3, #72	; 0x48
 80021ca:	ed93 7a00 	vldr	s14, [r3]
 80021ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80022f0 <IVK+0x3e0>
 80021d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d6:	edc7 7a06 	vstr	s15, [r7, #24]
  Jv4[r2 + 3] -= Jv4[r2] * Jv4[r1 + 3];
 80021da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021dc:	3303      	adds	r3, #3
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	3358      	adds	r3, #88	; 0x58
 80021e2:	443b      	add	r3, r7
 80021e4:	3b48      	subs	r3, #72	; 0x48
 80021e6:	ed93 7a00 	vldr	s14, [r3]
 80021ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	3358      	adds	r3, #88	; 0x58
 80021f0:	443b      	add	r3, r7
 80021f2:	3b48      	subs	r3, #72	; 0x48
 80021f4:	edd3 6a00 	vldr	s13, [r3]
 80021f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021fa:	3303      	adds	r3, #3
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	3358      	adds	r3, #88	; 0x58
 8002200:	443b      	add	r3, r7
 8002202:	3b48      	subs	r3, #72	; 0x48
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800220c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800220e:	3303      	adds	r3, #3
 8002210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	3358      	adds	r3, #88	; 0x58
 8002218:	443b      	add	r3, r7
 800221a:	3b48      	subs	r3, #72	; 0x48
 800221c:	edc3 7a00 	vstr	s15, [r3]
  Jv4[5] -= Jv4[2] * Jv4[r1 + 3];
 8002220:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002224:	edd7 6a06 	vldr	s13, [r7, #24]
 8002228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800222a:	3303      	adds	r3, #3
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	3358      	adds	r3, #88	; 0x58
 8002230:	443b      	add	r3, r7
 8002232:	3b48      	subs	r3, #72	; 0x48
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800223c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002240:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  Jv4[r2 + 6] -= Jv4[r2] * Jv4[r1 + 6];
 8002244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002246:	3306      	adds	r3, #6
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	3358      	adds	r3, #88	; 0x58
 800224c:	443b      	add	r3, r7
 800224e:	3b48      	subs	r3, #72	; 0x48
 8002250:	ed93 7a00 	vldr	s14, [r3]
 8002254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	3358      	adds	r3, #88	; 0x58
 800225a:	443b      	add	r3, r7
 800225c:	3b48      	subs	r3, #72	; 0x48
 800225e:	edd3 6a00 	vldr	s13, [r3]
 8002262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002264:	3306      	adds	r3, #6
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	3358      	adds	r3, #88	; 0x58
 800226a:	443b      	add	r3, r7
 800226c:	3b48      	subs	r3, #72	; 0x48
 800226e:	edd3 7a00 	vldr	s15, [r3]
 8002272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002278:	3306      	adds	r3, #6
 800227a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	3358      	adds	r3, #88	; 0x58
 8002282:	443b      	add	r3, r7
 8002284:	3b48      	subs	r3, #72	; 0x48
 8002286:	edc3 7a00 	vstr	s15, [r3]
  Jv4[8] -= Jv4[2] * Jv4[r1 + 6];
 800228a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800228e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002294:	3306      	adds	r3, #6
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	3358      	adds	r3, #88	; 0x58
 800229a:	443b      	add	r3, r7
 800229c:	3b48      	subs	r3, #72	; 0x48
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022aa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  if (fabs(Jv4[5]) > fabs(Jv4[r2 + 3])) {
 80022ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022b2:	eeb0 7ae7 	vabs.f32	s14, s15
 80022b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b8:	3303      	adds	r3, #3
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	3358      	adds	r3, #88	; 0x58
 80022be:	443b      	add	r3, r7
 80022c0:	3b48      	subs	r3, #72	; 0x48
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	eef0 7ae7 	vabs.f32	s15, s15
 80022ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d2:	dd0f      	ble.n	80022f4 <IVK+0x3e4>
    rtemp = r2;
 80022d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    r2 = 2;
 80022d8:	2302      	movs	r3, #2
 80022da:	653b      	str	r3, [r7, #80]	; 0x50
 80022dc:	e00a      	b.n	80022f4 <IVK+0x3e4>
 80022de:	bf00      	nop
 80022e0:	00000000 	.word	0x00000000
 80022e4:	4077c000 	.word	0x4077c000
 80022e8:	00000000 	.word	0x00000000
 80022ec:	c077c000 	.word	0xc077c000
 80022f0:	00000000 	.word	0x00000000
  }
  Jv4[rtemp + 3] /= Jv4[r2 + 3];
 80022f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f6:	3303      	adds	r3, #3
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	3358      	adds	r3, #88	; 0x58
 80022fc:	443b      	add	r3, r7
 80022fe:	3b48      	subs	r3, #72	; 0x48
 8002300:	edd3 6a00 	vldr	s13, [r3]
 8002304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002306:	3303      	adds	r3, #3
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	3358      	adds	r3, #88	; 0x58
 800230c:	443b      	add	r3, r7
 800230e:	3b48      	subs	r3, #72	; 0x48
 8002310:	ed93 7a00 	vldr	s14, [r3]
 8002314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002316:	3303      	adds	r3, #3
 8002318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	3358      	adds	r3, #88	; 0x58
 8002320:	443b      	add	r3, r7
 8002322:	3b48      	subs	r3, #72	; 0x48
 8002324:	edc3 7a00 	vstr	s15, [r3]
  Jv4[rtemp + 6] -= Jv4[rtemp + 3] * Jv4[r2 + 6];
 8002328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800232a:	3306      	adds	r3, #6
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	3358      	adds	r3, #88	; 0x58
 8002330:	443b      	add	r3, r7
 8002332:	3b48      	subs	r3, #72	; 0x48
 8002334:	ed93 7a00 	vldr	s14, [r3]
 8002338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800233a:	3303      	adds	r3, #3
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	3358      	adds	r3, #88	; 0x58
 8002340:	443b      	add	r3, r7
 8002342:	3b48      	subs	r3, #72	; 0x48
 8002344:	edd3 6a00 	vldr	s13, [r3]
 8002348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800234a:	3306      	adds	r3, #6
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	3358      	adds	r3, #88	; 0x58
 8002350:	443b      	add	r3, r7
 8002352:	3b48      	subs	r3, #72	; 0x48
 8002354:	edd3 7a00 	vldr	s15, [r3]
 8002358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800235c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235e:	3306      	adds	r3, #6
 8002360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	3358      	adds	r3, #88	; 0x58
 8002368:	443b      	add	r3, r7
 800236a:	3b48      	subs	r3, #72	; 0x48
 800236c:	edc3 7a00 	vstr	s15, [r3]
  qvbar_idx_1 = chi_dot[r2] - chi_dot[r1] * Jv4[r2];
 8002370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	4413      	add	r3, r2
 8002378:	ed93 7a00 	vldr	s14, [r3]
 800237c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	4413      	add	r3, r2
 8002384:	edd3 6a00 	vldr	s13, [r3]
 8002388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	3358      	adds	r3, #88	; 0x58
 800238e:	443b      	add	r3, r7
 8002390:	3b48      	subs	r3, #72	; 0x48
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800239e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 80023a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	4413      	add	r3, r2
 80023aa:	ed93 7a00 	vldr	s14, [r3]
 80023ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	4413      	add	r3, r2
 80023b6:	edd3 6a00 	vldr	s13, [r3]
 80023ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	3358      	adds	r3, #88	; 0x58
 80023c0:	443b      	add	r3, r7
 80023c2:	3b48      	subs	r3, #72	; 0x48
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023cc:	ee37 7a67 	vsub.f32	s14, s14, s15
                 qvbar_idx_1 * Jv4[rtemp + 3]) /
 80023d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d2:	3303      	adds	r3, #3
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	3358      	adds	r3, #88	; 0x58
 80023d8:	443b      	add	r3, r7
 80023da:	3b48      	subs	r3, #72	; 0x48
 80023dc:	edd3 6a00 	vldr	s13, [r3]
 80023e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80023e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 80023e8:	ee77 6a67 	vsub.f32	s13, s14, s15
                Jv4[rtemp + 6];
 80023ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ee:	3306      	adds	r3, #6
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	3358      	adds	r3, #88	; 0x58
 80023f4:	443b      	add	r3, r7
 80023f6:	3b48      	subs	r3, #72	; 0x48
 80023f8:	ed93 7a00 	vldr	s14, [r3]
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 80023fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002400:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  qvbar_idx_1 -= qvbar_idx_2 * Jv4[r2 + 6];
 8002404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002406:	3306      	adds	r3, #6
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	3358      	adds	r3, #88	; 0x58
 800240c:	443b      	add	r3, r7
 800240e:	3b48      	subs	r3, #72	; 0x48
 8002410:	ed93 7a00 	vldr	s14, [r3]
 8002414:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002424:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qvbar_idx_1 /= Jv4[r2 + 3];
 8002428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800242a:	3303      	adds	r3, #3
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	3358      	adds	r3, #88	; 0x58
 8002430:	443b      	add	r3, r7
 8002432:	3b48      	subs	r3, #72	; 0x48
 8002434:	ed93 7a00 	vldr	s14, [r3]
 8002438:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800243c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002440:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qv[0] =
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 8002444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	4413      	add	r3, r2
 800244c:	ed93 7a00 	vldr	s14, [r3]
 8002450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002452:	3306      	adds	r3, #6
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	3358      	adds	r3, #88	; 0x58
 8002458:	443b      	add	r3, r7
 800245a:	3b48      	subs	r3, #72	; 0x48
 800245c:	edd3 6a00 	vldr	s13, [r3]
 8002460:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002468:	ee37 7a67 	vsub.f32	s14, s14, s15
 800246c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800246e:	3303      	adds	r3, #3
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	3358      	adds	r3, #88	; 0x58
 8002474:	443b      	add	r3, r7
 8002476:	3b48      	subs	r3, #72	; 0x48
 8002478:	edd3 6a00 	vldr	s13, [r3]
 800247c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002484:	ee77 6a67 	vsub.f32	s13, s14, s15
      Jv4[r1];
 8002488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	3358      	adds	r3, #88	; 0x58
 800248e:	443b      	add	r3, r7
 8002490:	3b48      	subs	r3, #72	; 0x48
 8002492:	ed93 7a00 	vldr	s14, [r3]
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 8002496:	eec6 7a87 	vdiv.f32	s15, s13, s14
  qv[0] =
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	edc3 7a00 	vstr	s15, [r3]
  qv[1] = qvbar_idx_1;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3304      	adds	r3, #4
 80024a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024a6:	601a      	str	r2, [r3, #0]
  qv[2] = qvbar_idx_2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3308      	adds	r3, #8
 80024ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024ae:	601a      	str	r2, [r3, #0]
  qv[3] = -qvbar_idx_1 - qvbar_idx_2;
 80024b0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80024b4:	eeb1 7a67 	vneg.f32	s14, s15
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	330c      	adds	r3, #12
 80024bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80024c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c4:	edc3 7a00 	vstr	s15, [r3]
  return Kinematics_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3758      	adds	r7, #88	; 0x58
 80024ce:	46bd      	mov	sp, r7
 80024d0:	ecbd 8b04 	vpop	{d8-d9}
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop

080024d8 <FPK>:
 * Arguments    : const double q[5]
 *                double l3
 *                double Pne[3]
 * Return Type  : void
 */
void FPK(float q[5], float l3, float Pne[3]) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	ed2d 8b0c 	vpush	{d8-d13}
 80024de:	b08c      	sub	sp, #48	; 0x30
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80024e8:	6079      	str	r1, [r7, #4]
	float e_Pne_tmp;
	float f_Pne_tmp;
	float g_Pne_tmp;
	float h_Pne_tmp;
	/* offset */
	Pne_tmp = cos(q[0]);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	edd3 7a00 	vldr	s15, [r3]
 80024f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024f4:	eeb0 0b47 	vmov.f64	d0, d7
 80024f8:	f013 fb2a 	bl	8015b50 <cos>
 80024fc:	eeb0 7b40 	vmov.f64	d7, d0
 8002500:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002504:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	b_Pne_tmp = sin(q[2]);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3308      	adds	r3, #8
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002514:	eeb0 0b47 	vmov.f64	d0, d7
 8002518:	f013 fb66 	bl	8015be8 <sin>
 800251c:	eeb0 7b40 	vmov.f64	d7, d0
 8002520:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002524:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	c_Pne_tmp = cos(q[2]);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3308      	adds	r3, #8
 800252c:	edd3 7a00 	vldr	s15, [r3]
 8002530:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002534:	eeb0 0b47 	vmov.f64	d0, d7
 8002538:	f013 fb0a 	bl	8015b50 <cos>
 800253c:	eeb0 7b40 	vmov.f64	d7, d0
 8002540:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002544:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	d_Pne_tmp = sin(q[1]);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3304      	adds	r3, #4
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002554:	eeb0 0b47 	vmov.f64	d0, d7
 8002558:	f013 fb46 	bl	8015be8 <sin>
 800255c:	eeb0 7b40 	vmov.f64	d7, d0
 8002560:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002564:	edc7 7a08 	vstr	s15, [r7, #32]
	e_Pne_tmp = cos(q[1]);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	3304      	adds	r3, #4
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002574:	eeb0 0b47 	vmov.f64	d0, d7
 8002578:	f013 faea 	bl	8015b50 <cos>
 800257c:	eeb0 7b40 	vmov.f64	d7, d0
 8002580:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002584:	edc7 7a07 	vstr	s15, [r7, #28]
	f_Pne_tmp = sin(q[0]);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	edd3 7a00 	vldr	s15, [r3]
 800258e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002592:	eeb0 0b47 	vmov.f64	d0, d7
 8002596:	f013 fb27 	bl	8015be8 <sin>
 800259a:	eeb0 7b40 	vmov.f64	d7, d0
 800259e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025a2:	edc7 7a06 	vstr	s15, [r7, #24]
	g_Pne_tmp = cos(q[3]);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	330c      	adds	r3, #12
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025b2:	eeb0 0b47 	vmov.f64	d0, d7
 80025b6:	f013 facb 	bl	8015b50 <cos>
 80025ba:	eeb0 7b40 	vmov.f64	d7, d0
 80025be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025c2:	edc7 7a05 	vstr	s15, [r7, #20]
	h_Pne_tmp = sin(q[3]);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	330c      	adds	r3, #12
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025d2:	eeb0 0b47 	vmov.f64	d0, d7
 80025d6:	f013 fb07 	bl	8015be8 <sin>
 80025da:	eeb0 7b40 	vmov.f64	d7, d0
 80025de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025e2:	edc7 7a04 	vstr	s15, [r7, #16]
	Pne[0] =
			((380.0
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 80025e6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80025ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80025ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025f6:	ee27 7a27 	vmul.f32	s14, s14, s15
							- Pne_tmp * d_Pne_tmp * b_Pne_tmp)
 80025fa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80025fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8002602:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002606:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800260a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002612:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 8002616:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 80029e0 <FPK+0x508>
 800261a:	ee27 8b06 	vmul.f64	d8, d7, d6
					+ l3
							* (g_Pne_tmp
 800261e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002622:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 8002626:	edd7 7a05 	vldr	s15, [r7, #20]
 800262a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	edd3 7a00 	vldr	s15, [r3]
 8002634:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002638:	eeb0 0b47 	vmov.f64	d0, d7
 800263c:	f013 fa88 	bl	8015b50 <cos>
 8002640:	eeb0 bb40 	vmov.f64	d11, d0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3304      	adds	r3, #4
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002650:	eeb0 0b47 	vmov.f64	d0, d7
 8002654:	f013 fa7c 	bl	8015b50 <cos>
 8002658:	eeb0 7b40 	vmov.f64	d7, d0
 800265c:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002660:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002664:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002668:	ee26 6b07 	vmul.f64	d6, d6, d7
											+ Pne_tmp * c_Pne_tmp * d_Pne_tmp)
 800266c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002670:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002678:	edd7 7a08 	vldr	s15, [r7, #32]
 800267c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002680:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002684:	ee36 7b07 	vadd.f64	d7, d6, d7
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 8002688:	ee2a ab07 	vmul.f64	d10, d10, d7
									+ h_Pne_tmp
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 800268c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002690:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800269e:	eeb0 0b47 	vmov.f64	d0, d7
 80026a2:	f013 fa55 	bl	8015b50 <cos>
 80026a6:	eeb0 cb40 	vmov.f64	d12, d0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3304      	adds	r3, #4
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026b6:	eeb0 0b47 	vmov.f64	d0, d7
 80026ba:	f013 fa49 	bl	8015b50 <cos>
 80026be:	eeb0 7b40 	vmov.f64	d7, d0
 80026c2:	ee2c cb07 	vmul.f64	d12, d12, d7
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3308      	adds	r3, #8
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026d2:	eeb0 0b47 	vmov.f64	d0, d7
 80026d6:	f013 fa3b 	bl	8015b50 <cos>
 80026da:	eeb0 7b40 	vmov.f64	d7, d0
 80026de:	ee2c cb07 	vmul.f64	d12, d12, d7
													- cos(q[0]) * sin(q[1])
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026ec:	eeb0 0b47 	vmov.f64	d0, d7
 80026f0:	f013 fa2e 	bl	8015b50 <cos>
 80026f4:	eeb0 db40 	vmov.f64	d13, d0
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3304      	adds	r3, #4
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002704:	eeb0 0b47 	vmov.f64	d0, d7
 8002708:	f013 fa6e 	bl	8015be8 <sin>
 800270c:	eeb0 7b40 	vmov.f64	d7, d0
 8002710:	ee2d db07 	vmul.f64	d13, d13, d7
															* sin(q[2]))))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3308      	adds	r3, #8
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002720:	eeb0 0b47 	vmov.f64	d0, d7
 8002724:	f013 fa60 	bl	8015be8 <sin>
 8002728:	eeb0 7b40 	vmov.f64	d7, d0
 800272c:	ee2d 7b07 	vmul.f64	d7, d13, d7
													- cos(q[0]) * sin(q[1])
 8002730:	ee3c 7b47 	vsub.f64	d7, d12, d7
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 8002734:	ee2b 7b07 	vmul.f64	d7, d11, d7
									+ h_Pne_tmp
 8002738:	ee3a 7b07 	vadd.f64	d7, d10, d7
							* (g_Pne_tmp
 800273c:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ l3
 8002740:	ee38 6b07 	vadd.f64	d6, d8, d7
					+ 20.0 * Pne_tmp) - 380.0 * Pne_tmp * d_Pne_tmp;
 8002744:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002748:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800274c:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8002750:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002754:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002758:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800275c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002760:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 80029e0 <FPK+0x508>
 8002764:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002768:	edd7 7a08 	vldr	s15, [r7, #32]
 800276c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002770:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002774:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002778:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	Pne[0] =
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	edc3 7a00 	vstr	s15, [r3]
	Pne[1] = ((l3
			* (g_Pne_tmp
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 8002782:	ed97 7a07 	vldr	s14, [r7, #28]
 8002786:	edd7 7a06 	vldr	s15, [r7, #24]
 800278a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800278e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002792:	ee27 7a27 	vmul.f32	s14, s14, s15
							+ c_Pne_tmp * f_Pne_tmp * d_Pne_tmp)
 8002796:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800279a:	edd7 7a06 	vldr	s15, [r7, #24]
 800279e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80027a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027aa:	ee37 7a27 	vadd.f32	s14, s14, s15
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 80027ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80027b2:	ee27 7a27 	vmul.f32	s14, s14, s15
					- h_Pne_tmp
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 80027b6:	edd7 6a06 	vldr	s13, [r7, #24]
 80027ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80027be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80027c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
									- e_Pne_tmp * c_Pne_tmp * f_Pne_tmp))
 80027ca:	ed97 6a07 	vldr	s12, [r7, #28]
 80027ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027d2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80027da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027de:	ee76 6ae7 	vsub.f32	s13, s13, s15
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 80027e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80027e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
					- h_Pne_tmp
 80027ea:	ee37 7a67 	vsub.f32	s14, s14, s15
			* (g_Pne_tmp
 80027ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80027f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- 380.0
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002804:	eeb0 0b47 	vmov.f64	d0, d7
 8002808:	f013 f9ee 	bl	8015be8 <sin>
 800280c:	eeb0 9b40 	vmov.f64	d9, d0
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3304      	adds	r3, #4
 8002814:	edd3 7a00 	vldr	s15, [r3]
 8002818:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800281c:	eeb0 0b47 	vmov.f64	d0, d7
 8002820:	f013 f9e2 	bl	8015be8 <sin>
 8002824:	eeb0 7b40 	vmov.f64	d7, d0
 8002828:	ee29 9b07 	vmul.f64	d9, d9, d7
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	3308      	adds	r3, #8
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002838:	eeb0 0b47 	vmov.f64	d0, d7
 800283c:	f013 f9d4 	bl	8015be8 <sin>
 8002840:	eeb0 7b40 	vmov.f64	d7, d0
 8002844:	ee29 9b07 	vmul.f64	d9, d9, d7
							- cos(q[1]) * cos(q[2]) * sin(q[0])))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3304      	adds	r3, #4
 800284c:	edd3 7a00 	vldr	s15, [r3]
 8002850:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002854:	eeb0 0b47 	vmov.f64	d0, d7
 8002858:	f013 f97a 	bl	8015b50 <cos>
 800285c:	eeb0 ab40 	vmov.f64	d10, d0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3308      	adds	r3, #8
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800286c:	eeb0 0b47 	vmov.f64	d0, d7
 8002870:	f013 f96e 	bl	8015b50 <cos>
 8002874:	eeb0 7b40 	vmov.f64	d7, d0
 8002878:	ee2a ab07 	vmul.f64	d10, d10, d7
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	edd3 7a00 	vldr	s15, [r3]
 8002882:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002886:	eeb0 0b47 	vmov.f64	d0, d7
 800288a:	f013 f9ad 	bl	8015be8 <sin>
 800288e:	eeb0 7b40 	vmov.f64	d7, d0
 8002892:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8002896:	ee39 7b47 	vsub.f64	d7, d9, d7
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 800289a:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80029e0 <FPK+0x508>
 800289e:	ee27 7b06 	vmul.f64	d7, d7, d6
			- 380.0
 80028a2:	ee38 6b47 	vsub.f64	d6, d8, d7
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 80028a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80028aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028ae:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 80028b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80028b6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80028ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80028be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028c2:	ed9f 5b47 	vldr	d5, [pc, #284]	; 80029e0 <FPK+0x508>
 80028c6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80028ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80028ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80028d6:	ee36 7b47 	vsub.f64	d7, d6, d7
	Pne[1] = ((l3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3304      	adds	r3, #4
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 80028de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	Pne[1] = ((l3
 80028e2:	edc3 7a00 	vstr	s15, [r3]
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 80028e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80028ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028f2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80028f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80028fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002902:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002906:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80029e0 <FPK+0x508>
 800290a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800290e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80029e8 <FPK+0x510>
 8002912:	ee37 6b06 	vadd.f64	d6, d7, d6
			+ 380.0 * e_Pne_tmp)
 8002916:	edd7 7a07 	vldr	s15, [r7, #28]
 800291a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800291e:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80029e0 <FPK+0x508>
 8002922:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002926:	ee36 8b07 	vadd.f64	d8, d6, d7
			- l3
					* (g_Pne_tmp
 800292a:	edd7 7a02 	vldr	s15, [r7, #8]
 800292e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
							* (cos(q[1]) * cos(q[2]) - d_Pne_tmp * b_Pne_tmp)
 8002932:	edd7 7a05 	vldr	s15, [r7, #20]
 8002936:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3304      	adds	r3, #4
 800293e:	edd3 7a00 	vldr	s15, [r3]
 8002942:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002946:	eeb0 0b47 	vmov.f64	d0, d7
 800294a:	f013 f901 	bl	8015b50 <cos>
 800294e:	eeb0 bb40 	vmov.f64	d11, d0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3308      	adds	r3, #8
 8002956:	edd3 7a00 	vldr	s15, [r3]
 800295a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800295e:	eeb0 0b47 	vmov.f64	d0, d7
 8002962:	f013 f8f5 	bl	8015b50 <cos>
 8002966:	eeb0 7b40 	vmov.f64	d7, d0
 800296a:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800296e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002972:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800297e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002982:	ee2a ab07 	vmul.f64	d10, d10, d7
							- h_Pne_tmp
									* (cos(q[1]) * sin(q[2])
 8002986:	edd7 7a04 	vldr	s15, [r7, #16]
 800298a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3304      	adds	r3, #4
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800299a:	eeb0 0b47 	vmov.f64	d0, d7
 800299e:	f013 f8d7 	bl	8015b50 <cos>
 80029a2:	eeb0 cb40 	vmov.f64	d12, d0
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	3308      	adds	r3, #8
 80029aa:	edd3 7a00 	vldr	s15, [r3]
 80029ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029b2:	eeb0 0b47 	vmov.f64	d0, d7
 80029b6:	f013 f917 	bl	8015be8 <sin>
 80029ba:	eeb0 7b40 	vmov.f64	d7, d0
 80029be:	ee2c cb07 	vmul.f64	d12, d12, d7
											+ cos(q[2]) * sin(q[1])));
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3308      	adds	r3, #8
 80029c6:	edd3 7a00 	vldr	s15, [r3]
 80029ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029ce:	eeb0 0b47 	vmov.f64	d0, d7
 80029d2:	f013 f8bd 	bl	8015b50 <cos>
 80029d6:	eeb0 db40 	vmov.f64	d13, d0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3304      	adds	r3, #4
 80029de:	e007      	b.n	80029f0 <FPK+0x518>
 80029e0:	00000000 	.word	0x00000000
 80029e4:	4077c000 	.word	0x4077c000
 80029e8:	70a3d70a 	.word	0x70a3d70a
 80029ec:	40727e3d 	.word	0x40727e3d
 80029f0:	edd3 7a00 	vldr	s15, [r3]
 80029f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029f8:	eeb0 0b47 	vmov.f64	d0, d7
 80029fc:	f013 f8f4 	bl	8015be8 <sin>
 8002a00:	eeb0 7b40 	vmov.f64	d7, d0
 8002a04:	ee2d 7b07 	vmul.f64	d7, d13, d7
 8002a08:	ee3c 7b07 	vadd.f64	d7, d12, d7
									* (cos(q[1]) * sin(q[2])
 8002a0c:	ee2b 7b07 	vmul.f64	d7, d11, d7
							- h_Pne_tmp
 8002a10:	ee3a 7b47 	vsub.f64	d7, d10, d7
					* (g_Pne_tmp
 8002a14:	ee29 7b07 	vmul.f64	d7, d9, d7
			- l3
 8002a18:	ee38 7b47 	vsub.f64	d7, d8, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3308      	adds	r3, #8
			- l3
 8002a20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002a24:	edc3 7a00 	vstr	s15, [r3]
}
 8002a28:	bf00      	nop
 8002a2a:	3730      	adds	r7, #48	; 0x30
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	ecbd 8b0c 	vpop	{d8-d13}
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <ChessPose>:
	twist_tmp = l3 * sin((q[1] + q[2]) + q[3]);
	twist[2] = (qd[1] * ((twist_tmp_tmp - twist_tmp_tmp_tmp) + twist_tmp)
			+ qd[2] * (twist_tmp_tmp + twist_tmp)) + g_twist_tmp * d_twist_tmp;
}

void ChessPose(uint8_t Chess_Index, float Chess_Theta, float ChessPosition[2]) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	; 0x30
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a40:	6079      	str	r1, [r7, #4]
 8002a42:	73fb      	strb	r3, [r7, #15]
	/*
	 *
	 */
	uint8_t X = Chess_Index%8;
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t N = Chess_Index/8;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	08db      	lsrs	r3, r3, #3
 8002a52:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	float l = 230;
 8002a56:	4b4e      	ldr	r3, [pc, #312]	; (8002b90 <ChessPose+0x15c>)
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
	float L = 400;
 8002a5a:	4b4e      	ldr	r3, [pc, #312]	; (8002b94 <ChessPose+0x160>)
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
	float b_positionx_tmp;
	float c_positionx_tmp;
	float d_positionx_tmp;
	float e_positionx_tmp;
	float positionx_tmp;
	positionx_tmp = cos(Chess_Theta);
 8002a5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a66:	eeb0 0b47 	vmov.f64	d0, d7
 8002a6a:	f013 f871 	bl	8015b50 <cos>
 8002a6e:	eeb0 7b40 	vmov.f64	d7, d0
 8002a72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a76:	edc7 7a08 	vstr	s15, [r7, #32]
	b_positionx_tmp = sin(Chess_Theta);
 8002a7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a82:	eeb0 0b47 	vmov.f64	d0, d7
 8002a86:	f013 f8af 	bl	8015be8 <sin>
 8002a8a:	eeb0 7b40 	vmov.f64	d7, d0
 8002a8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a92:	edc7 7a07 	vstr	s15, [r7, #28]
	c_positionx_tmp = 9.0 * L / 16.0;
 8002a96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a9e:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002aa2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002aa6:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8002aaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002aae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ab2:	edc7 7a06 	vstr	s15, [r7, #24]
	d_positionx_tmp = X * L / 8.0 - c_positionx_tmp;
 8002ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ac2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ace:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8002ad2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ad6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ada:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ade:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ae2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ae6:	edc7 7a05 	vstr	s15, [r7, #20]
	e_positionx_tmp = N * L / 8.0;
 8002aea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002af6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002afe:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b06:	edc7 7a04 	vstr	s15, [r7, #16]
	ChessPosition[0] = ((b_positionx_tmp * d_positionx_tmp
 8002b0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b12:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (e_positionx_tmp - c_positionx_tmp * positionx_tmp)) + l)
 8002b16:	edd7 6a06 	vldr	s13, [r7, #24]
 8002b1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b22:	edd7 6a04 	vldr	s13, [r7, #16]
 8002b26:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b36:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			+ L / 2.0;
 8002b3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b3e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002b42:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8002b46:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002b4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	ChessPosition[0] = ((b_positionx_tmp * d_positionx_tmp
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	edc3 7a00 	vstr	s15, [r3]
	ChessPosition[1] = -positionx_tmp * d_positionx_tmp
 8002b58:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b5c:	eeb1 7a67 	vneg.f32	s14, s15
 8002b60:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b64:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (e_positionx_tmp - c_positionx_tmp) * b_positionx_tmp;
 8002b68:	edd7 6a04 	vldr	s13, [r7, #16]
 8002b6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b74:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
	ChessPosition[1] = -positionx_tmp * d_positionx_tmp
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3304      	adds	r3, #4
			+ (e_positionx_tmp - c_positionx_tmp) * b_positionx_tmp;
 8002b80:	ee77 7a27 	vadd.f32	s15, s14, s15
	ChessPosition[1] = -positionx_tmp * d_positionx_tmp
 8002b84:	edc3 7a00 	vstr	s15, [r3]
}
 8002b88:	bf00      	nop
 8002b8a:	3730      	adds	r7, #48	; 0x30
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	43660000 	.word	0x43660000
 8002b94:	43c80000 	.word	0x43c80000

08002b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08e      	sub	sp, #56	; 0x38
 8002b9c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b9e:	f003 fc37 	bl	8006410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ba2:	f000 fb25 	bl	80031f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002ba6:	f000 fb9b 	bl	80032e0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002baa:	f7fe fe63 	bl	8001874 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bae:	f7fe fe31 	bl	8001814 <MX_DMA_Init>
  MX_ADC3_Init();
 8002bb2:	f7fd ff89 	bl	8000ac8 <MX_ADC3_Init>
  MX_TIM1_Init();
 8002bb6:	f002 f893 	bl	8004ce0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002bba:	f002 f975 	bl	8004ea8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002bbe:	f002 f9eb 	bl	8004f98 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002bc2:	f002 fa3f 	bl	8005044 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002bc6:	f002 faf9 	bl	80051bc <MX_TIM8_Init>
  MX_TIM13_Init();
 8002bca:	f002 fb51 	bl	8005270 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002bce:	f002 fb9f 	bl	8005310 <MX_TIM14_Init>
  MX_TIM15_Init();
 8002bd2:	f002 fbed 	bl	80053b0 <MX_TIM15_Init>
  MX_TIM16_Init();
 8002bd6:	f002 fc73 	bl	80054c0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002bda:	f002 fced 	bl	80055b8 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002bde:	f003 fa23 	bl	8006028 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002be2:	f003 fa6f 	bl	80060c4 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8002be6:	f001 fe07 	bl	80047f8 <MX_SPI3_Init>
  MX_SPI4_Init();
 8002bea:	f001 fe5d 	bl	80048a8 <MX_SPI4_Init>
  MX_I2C2_Init();
 8002bee:	f7fe ff7b 	bl	8001ae8 <MX_I2C2_Init>
  MX_CRC_Init();
 8002bf2:	f7fe fdc1 	bl	8001778 <MX_CRC_Init>
  MX_TIM24_Init();
 8002bf6:	f002 fdab 	bl	8005750 <MX_TIM24_Init>
  MX_TIM23_Init();
 8002bfa:	f002 fd59 	bl	80056b0 <MX_TIM23_Init>
  MX_TIM6_Init();
 8002bfe:	f002 faa5 	bl	800514c <MX_TIM6_Init>
  MX_UART5_Init();
 8002c02:	f003 f9bf 	bl	8005f84 <MX_UART5_Init>
  MX_ADC1_Init();
 8002c06:	f7fd fe83 	bl	8000910 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002c0a:	f7fd fefd 	bl	8000a08 <MX_ADC2_Init>
  MX_TIM2_Init();
 8002c0e:	f002 f8f7 	bl	8004e00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	MX_DMA_Init();
 8002c12:	f7fe fdff 	bl	8001814 <MX_DMA_Init>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);	// LVDS EN
 8002c16:	2201      	movs	r2, #1
 8002c18:	2140      	movs	r1, #64	; 0x40
 8002c1a:	48c1      	ldr	r0, [pc, #772]	; (8002f20 <main+0x388>)
 8002c1c:	f008 fce4 	bl	800b5e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);	// Level Shifter EN
 8002c20:	2201      	movs	r2, #1
 8002c22:	2140      	movs	r1, #64	; 0x40
 8002c24:	48bf      	ldr	r0, [pc, #764]	; (8002f24 <main+0x38c>)
 8002c26:	f008 fcdf 	bl	800b5e8 <HAL_GPIO_WritePin>

	Temp_Calibration = (110.0 - 30.0)	/ (*(unsigned short*) (0x1FF1E840) - *(unsigned short*) (0x1FF1E820));
 8002c2a:	4bbf      	ldr	r3, [pc, #764]	; (8002f28 <main+0x390>)
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4bbe      	ldr	r3, [pc, #760]	; (8002f2c <main+0x394>)
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002c3e:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 8002f08 <main+0x370>
 8002c42:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002c46:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c4a:	4bb9      	ldr	r3, [pc, #740]	; (8002f30 <main+0x398>)
 8002c4c:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002c50:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002c54:	2100      	movs	r1, #0
 8002c56:	48b7      	ldr	r0, [pc, #732]	; (8002f34 <main+0x39c>)
 8002c58:	f005 fc66 	bl	8008528 <HAL_ADCEx_Calibration_Start>

	/*			   Encoder				*/
	AS5047U_init(&Encoder[0], &hspi3, GPIOD, &hcrc, GPIO_PIN_0,6500);
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8002f38 <main+0x3a0>
 8002c64:	4bb5      	ldr	r3, [pc, #724]	; (8002f3c <main+0x3a4>)
 8002c66:	4aae      	ldr	r2, [pc, #696]	; (8002f20 <main+0x388>)
 8002c68:	49b5      	ldr	r1, [pc, #724]	; (8002f40 <main+0x3a8>)
 8002c6a:	48b6      	ldr	r0, [pc, #728]	; (8002f44 <main+0x3ac>)
 8002c6c:	f7fd fcf4 	bl	8000658 <AS5047U_init>
	AS5047U_init(&Encoder[1], &hspi3, GPIOD, &hcrc, GPIO_PIN_1,10100);
 8002c70:	2302      	movs	r3, #2
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8002f48 <main+0x3b0>
 8002c78:	4bb0      	ldr	r3, [pc, #704]	; (8002f3c <main+0x3a4>)
 8002c7a:	4aa9      	ldr	r2, [pc, #676]	; (8002f20 <main+0x388>)
 8002c7c:	49b0      	ldr	r1, [pc, #704]	; (8002f40 <main+0x3a8>)
 8002c7e:	48b3      	ldr	r0, [pc, #716]	; (8002f4c <main+0x3b4>)
 8002c80:	f7fd fcea 	bl	8000658 <AS5047U_init>
	AS5047U_init(&Encoder[2], &hspi3, GPIOD, &hcrc, GPIO_PIN_2,3165);
 8002c84:	2304      	movs	r3, #4
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8002f50 <main+0x3b8>
 8002c8c:	4bab      	ldr	r3, [pc, #684]	; (8002f3c <main+0x3a4>)
 8002c8e:	4aa4      	ldr	r2, [pc, #656]	; (8002f20 <main+0x388>)
 8002c90:	49ab      	ldr	r1, [pc, #684]	; (8002f40 <main+0x3a8>)
 8002c92:	48b0      	ldr	r0, [pc, #704]	; (8002f54 <main+0x3bc>)
 8002c94:	f7fd fce0 	bl	8000658 <AS5047U_init>
	AS5047U_init(&Encoder[3], &hspi3, GPIOD, &hcrc, GPIO_PIN_3,6970);
 8002c98:	2308      	movs	r3, #8
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8002f58 <main+0x3c0>
 8002ca0:	4ba6      	ldr	r3, [pc, #664]	; (8002f3c <main+0x3a4>)
 8002ca2:	4a9f      	ldr	r2, [pc, #636]	; (8002f20 <main+0x388>)
 8002ca4:	49a6      	ldr	r1, [pc, #664]	; (8002f40 <main+0x3a8>)
 8002ca6:	48ad      	ldr	r0, [pc, #692]	; (8002f5c <main+0x3c4>)
 8002ca8:	f7fd fcd6 	bl	8000658 <AS5047U_init>

	HAL_Delay(50);
 8002cac:	2032      	movs	r0, #50	; 0x32
 8002cae:	f003 fc41 	bl	8006534 <HAL_Delay>
//	AS5047U_Write(&Encoder[0], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[1], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[2], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[3], 0x0019, 0b00100000);

	AS5047U_Write(&Encoder[0], 0x001A, 0b01000000);
 8002cb2:	2240      	movs	r2, #64	; 0x40
 8002cb4:	211a      	movs	r1, #26
 8002cb6:	48a3      	ldr	r0, [pc, #652]	; (8002f44 <main+0x3ac>)
 8002cb8:	f7fd fd16 	bl	80006e8 <AS5047U_Write>
	AS5047U_Write(&Encoder[1], 0x001A, 0b01000000);
 8002cbc:	2240      	movs	r2, #64	; 0x40
 8002cbe:	211a      	movs	r1, #26
 8002cc0:	48a2      	ldr	r0, [pc, #648]	; (8002f4c <main+0x3b4>)
 8002cc2:	f7fd fd11 	bl	80006e8 <AS5047U_Write>
	AS5047U_Write(&Encoder[2], 0x001A, 0b01000000);
 8002cc6:	2240      	movs	r2, #64	; 0x40
 8002cc8:	211a      	movs	r1, #26
 8002cca:	48a2      	ldr	r0, [pc, #648]	; (8002f54 <main+0x3bc>)
 8002ccc:	f7fd fd0c 	bl	80006e8 <AS5047U_Write>
	AS5047U_Write(&Encoder[3], 0x001A, 0b01000000);
 8002cd0:	2240      	movs	r2, #64	; 0x40
 8002cd2:	211a      	movs	r1, #26
 8002cd4:	48a1      	ldr	r0, [pc, #644]	; (8002f5c <main+0x3c4>)
 8002cd6:	f7fd fd07 	bl	80006e8 <AS5047U_Write>

	/*			Kalman Filter			*/
	Kalman_init(&Kalman[0], 5000, 0.001);
 8002cda:	ed9f 1b8d 	vldr	d1, [pc, #564]	; 8002f10 <main+0x378>
 8002cde:	ed9f 0b8e 	vldr	d0, [pc, #568]	; 8002f18 <main+0x380>
 8002ce2:	489f      	ldr	r0, [pc, #636]	; (8002f60 <main+0x3c8>)
 8002ce4:	f7fe f9e2 	bl	80010ac <Kalman_init>
	Kalman_init(&Kalman[1], 5000, 0.001);
 8002ce8:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8002f10 <main+0x378>
 8002cec:	ed9f 0b8a 	vldr	d0, [pc, #552]	; 8002f18 <main+0x380>
 8002cf0:	489c      	ldr	r0, [pc, #624]	; (8002f64 <main+0x3cc>)
 8002cf2:	f7fe f9db 	bl	80010ac <Kalman_init>
	Kalman_init(&Kalman[2], 5000, 0.001);
 8002cf6:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8002f10 <main+0x378>
 8002cfa:	ed9f 0b87 	vldr	d0, [pc, #540]	; 8002f18 <main+0x380>
 8002cfe:	489a      	ldr	r0, [pc, #616]	; (8002f68 <main+0x3d0>)
 8002d00:	f7fe f9d4 	bl	80010ac <Kalman_init>
	Kalman_init(&Kalman[3], 5000, 0.001);
 8002d04:	ed9f 1b82 	vldr	d1, [pc, #520]	; 8002f10 <main+0x378>
 8002d08:	ed9f 0b83 	vldr	d0, [pc, #524]	; 8002f18 <main+0x380>
 8002d0c:	4897      	ldr	r0, [pc, #604]	; (8002f6c <main+0x3d4>)
 8002d0e:	f7fe f9cd 	bl	80010ac <Kalman_init>
	Kalman_init(&Kalman[5], 5000, 0.001);
 8002d12:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8002f10 <main+0x378>
 8002d16:	ed9f 0b80 	vldr	d0, [pc, #512]	; 8002f18 <main+0x380>
 8002d1a:	4895      	ldr	r0, [pc, #596]	; (8002f70 <main+0x3d8>)
 8002d1c:	f7fe f9c6 	bl	80010ac <Kalman_init>
//	CascadeControl_init(&Control[0], 0.6, 0, 0, 15, 0.5, 10, 400);
//	CascadeControl_init(&Control[1], 0.7, 0, 0.3, 10, 0.1, 5, 430);
//	CascadeControl_init(&Control[2], 0.7, 0, 0, 10, 0.2, 0, 450);
//	CascadeControl_init(&Control[3], 0.8, 0.005, 0, 10, 0.1, 3, 470);

	CascadeControl_init(&Control[0], 0.6, 0, 0, 15, 0.5, 10, 400);
 8002d20:	ed9f 3a94 	vldr	s6, [pc, #592]	; 8002f74 <main+0x3dc>
 8002d24:	eef2 2a04 	vmov.f32	s5, #36	; 0x41200000  10.0
 8002d28:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 8002d2c:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
 8002d30:	ed9f 1a91 	vldr	s2, [pc, #580]	; 8002f78 <main+0x3e0>
 8002d34:	eddf 0a90 	vldr	s1, [pc, #576]	; 8002f78 <main+0x3e0>
 8002d38:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8002f7c <main+0x3e4>
 8002d3c:	4890      	ldr	r0, [pc, #576]	; (8002f80 <main+0x3e8>)
 8002d3e:	f7fe fc83 	bl	8001648 <CascadeControl_init>
	CascadeControl_init(&Control[1], 0.7, 0, 0.3, 10, 0, 10, 410);
 8002d42:	ed9f 3a90 	vldr	s6, [pc, #576]	; 8002f84 <main+0x3ec>
 8002d46:	eef2 2a04 	vmov.f32	s5, #36	; 0x41200000  10.0
 8002d4a:	ed9f 2a8b 	vldr	s4, [pc, #556]	; 8002f78 <main+0x3e0>
 8002d4e:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8002d52:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 8002f88 <main+0x3f0>
 8002d56:	eddf 0a88 	vldr	s1, [pc, #544]	; 8002f78 <main+0x3e0>
 8002d5a:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8002f8c <main+0x3f4>
 8002d5e:	488c      	ldr	r0, [pc, #560]	; (8002f90 <main+0x3f8>)
 8002d60:	f7fe fc72 	bl	8001648 <CascadeControl_init>
	CascadeControl_init(&Control[2], 0.82, 0, 0.2, 11, 0.13, 3, 445);
 8002d64:	ed9f 3a8b 	vldr	s6, [pc, #556]	; 8002f94 <main+0x3fc>
 8002d68:	eef0 2a08 	vmov.f32	s5, #8	; 0x40400000  3.0
 8002d6c:	ed9f 2a8a 	vldr	s4, [pc, #552]	; 8002f98 <main+0x400>
 8002d70:	eef2 1a06 	vmov.f32	s3, #38	; 0x41300000  11.0
 8002d74:	ed9f 1a89 	vldr	s2, [pc, #548]	; 8002f9c <main+0x404>
 8002d78:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8002f78 <main+0x3e0>
 8002d7c:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8002fa0 <main+0x408>
 8002d80:	4888      	ldr	r0, [pc, #544]	; (8002fa4 <main+0x40c>)
 8002d82:	f7fe fc61 	bl	8001648 <CascadeControl_init>
	CascadeControl_init(&Control[3], 0.7, 0.001, 0, 9, 0.1, 3, 500);
 8002d86:	ed9f 3a88 	vldr	s6, [pc, #544]	; 8002fa8 <main+0x410>
 8002d8a:	eef0 2a08 	vmov.f32	s5, #8	; 0x40400000  3.0
 8002d8e:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8002fac <main+0x414>
 8002d92:	eef2 1a02 	vmov.f32	s3, #34	; 0x41100000  9.0
 8002d96:	ed9f 1a78 	vldr	s2, [pc, #480]	; 8002f78 <main+0x3e0>
 8002d9a:	eddf 0a85 	vldr	s1, [pc, #532]	; 8002fb0 <main+0x418>
 8002d9e:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8002f8c <main+0x3f4>
 8002da2:	4884      	ldr	r0, [pc, #528]	; (8002fb4 <main+0x41c>)
 8002da4:	f7fe fc50 	bl	8001648 <CascadeControl_init>

	/*  Power Supply Temperature Sensor */
	TPM75_init(&TempSensor, &hi2c2, 0, 0, 1);
 8002da8:	2301      	movs	r3, #1
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	2300      	movs	r3, #0
 8002dae:	2200      	movs	r2, #0
 8002db0:	4981      	ldr	r1, [pc, #516]	; (8002fb8 <main+0x420>)
 8002db2:	4882      	ldr	r0, [pc, #520]	; (8002fbc <main+0x424>)
 8002db4:	f7fd fd98 	bl	80008e8 <TPM75_init>

	SetPoint_Position[0] = EncPulse2Rad_Read(&Encoder[0], 1);
 8002db8:	2101      	movs	r1, #1
 8002dba:	4862      	ldr	r0, [pc, #392]	; (8002f44 <main+0x3ac>)
 8002dbc:	f7fd fc2a 	bl	8000614 <EncPulse2Rad_Read>
 8002dc0:	eef0 7a40 	vmov.f32	s15, s0
 8002dc4:	4b7e      	ldr	r3, [pc, #504]	; (8002fc0 <main+0x428>)
 8002dc6:	edc3 7a00 	vstr	s15, [r3]
	SetPoint_Position[1] = EncPulse2Rad_Read(&Encoder[1], 0);
 8002dca:	2100      	movs	r1, #0
 8002dcc:	485f      	ldr	r0, [pc, #380]	; (8002f4c <main+0x3b4>)
 8002dce:	f7fd fc21 	bl	8000614 <EncPulse2Rad_Read>
 8002dd2:	eef0 7a40 	vmov.f32	s15, s0
 8002dd6:	4b7a      	ldr	r3, [pc, #488]	; (8002fc0 <main+0x428>)
 8002dd8:	edc3 7a01 	vstr	s15, [r3, #4]
	SetPoint_Position[2] = EncPulse2Rad_Read(&Encoder[2], 0);
 8002ddc:	2100      	movs	r1, #0
 8002dde:	485d      	ldr	r0, [pc, #372]	; (8002f54 <main+0x3bc>)
 8002de0:	f7fd fc18 	bl	8000614 <EncPulse2Rad_Read>
 8002de4:	eef0 7a40 	vmov.f32	s15, s0
 8002de8:	4b75      	ldr	r3, [pc, #468]	; (8002fc0 <main+0x428>)
 8002dea:	edc3 7a02 	vstr	s15, [r3, #8]
	SetPoint_Position[3] = EncPulse2Rad_Read(&Encoder[3], 0);
 8002dee:	2100      	movs	r1, #0
 8002df0:	485a      	ldr	r0, [pc, #360]	; (8002f5c <main+0x3c4>)
 8002df2:	f7fd fc0f 	bl	8000614 <EncPulse2Rad_Read>
 8002df6:	eef0 7a40 	vmov.f32	s15, s0
 8002dfa:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <main+0x428>)
 8002dfc:	edc3 7a03 	vstr	s15, [r3, #12]
	SetPoint_Velocity[0] = 0;
 8002e00:	4b70      	ldr	r3, [pc, #448]	; (8002fc4 <main+0x42c>)
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
	SetPoint_Velocity[1] = 0;
 8002e08:	4b6e      	ldr	r3, [pc, #440]	; (8002fc4 <main+0x42c>)
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	605a      	str	r2, [r3, #4]
	SetPoint_Velocity[2] = 0;
 8002e10:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <main+0x42c>)
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
	SetPoint_Velocity[3] = 0;
 8002e18:	4b6a      	ldr	r3, [pc, #424]	; (8002fc4 <main+0x42c>)
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	60da      	str	r2, [r3, #12]

	/*			Stepper Driver			*/
	Step_Driver_init(&Stepper[0], &htim13, TIM_CHANNEL_1, GPIOE, GPIO_PIN_0, 500000, 1);
 8002e20:	2301      	movs	r3, #1
 8002e22:	9302      	str	r3, [sp, #8]
 8002e24:	4b68      	ldr	r3, [pc, #416]	; (8002fc8 <main+0x430>)
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	4b3d      	ldr	r3, [pc, #244]	; (8002f24 <main+0x38c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	4966      	ldr	r1, [pc, #408]	; (8002fcc <main+0x434>)
 8002e32:	4867      	ldr	r0, [pc, #412]	; (8002fd0 <main+0x438>)
 8002e34:	f7fd ff66 	bl	8000d04 <Step_Driver_init>
	Step_Driver_init(&Stepper[1], &htim14, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1, 500000, 0);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	9302      	str	r3, [sp, #8]
 8002e3c:	4b62      	ldr	r3, [pc, #392]	; (8002fc8 <main+0x430>)
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	2302      	movs	r3, #2
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <main+0x38c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	4962      	ldr	r1, [pc, #392]	; (8002fd4 <main+0x43c>)
 8002e4a:	4863      	ldr	r0, [pc, #396]	; (8002fd8 <main+0x440>)
 8002e4c:	f7fd ff5a 	bl	8000d04 <Step_Driver_init>
	Step_Driver_init(&Stepper[2], &htim15, TIM_CHANNEL_1, GPIOE, GPIO_PIN_2, 500000, 0);
 8002e50:	2300      	movs	r3, #0
 8002e52:	9302      	str	r3, [sp, #8]
 8002e54:	4b5c      	ldr	r3, [pc, #368]	; (8002fc8 <main+0x430>)
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	2304      	movs	r3, #4
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <main+0x38c>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	495e      	ldr	r1, [pc, #376]	; (8002fdc <main+0x444>)
 8002e62:	485f      	ldr	r0, [pc, #380]	; (8002fe0 <main+0x448>)
 8002e64:	f7fd ff4e 	bl	8000d04 <Step_Driver_init>
	Step_Driver_init(&Stepper[3], &htim16, TIM_CHANNEL_1, GPIOE, GPIO_PIN_3, 500000, 0);
 8002e68:	2300      	movs	r3, #0
 8002e6a:	9302      	str	r3, [sp, #8]
 8002e6c:	4b56      	ldr	r3, [pc, #344]	; (8002fc8 <main+0x430>)
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	2308      	movs	r3, #8
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <main+0x38c>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	495a      	ldr	r1, [pc, #360]	; (8002fe4 <main+0x44c>)
 8002e7a:	485b      	ldr	r0, [pc, #364]	; (8002fe8 <main+0x450>)
 8002e7c:	f7fd ff42 	bl	8000d04 <Step_Driver_init>

	/*			Trajectory			*/

	Test_traj_Val[0] = 0;
 8002e80:	4b5a      	ldr	r3, [pc, #360]	; (8002fec <main+0x454>)
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
	Test_traj_Val[1] = 0;
 8002e88:	4b58      	ldr	r3, [pc, #352]	; (8002fec <main+0x454>)
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	605a      	str	r2, [r3, #4]
	Test_traj_Val[2] = 0;
 8002e90:	4b56      	ldr	r3, [pc, #344]	; (8002fec <main+0x454>)
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
	Test_traj_Val[3] = 0;
 8002e98:	4b54      	ldr	r3, [pc, #336]	; (8002fec <main+0x454>)
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	60da      	str	r2, [r3, #12]
	Traj_Flag = 0;
 8002ea0:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <main+0x458>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
	t = 0;
 8002ea6:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <main+0x45c>)
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim23);   // Start Control Timer
 8002eae:	4852      	ldr	r0, [pc, #328]	; (8002ff8 <main+0x460>)
 8002eb0:	f00e fb80 	bl	80115b4 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 8002eb4:	220e      	movs	r2, #14
 8002eb6:	4951      	ldr	r1, [pc, #324]	; (8002ffc <main+0x464>)
 8002eb8:	4851      	ldr	r0, [pc, #324]	; (8003000 <main+0x468>)
 8002eba:	f010 f8ef 	bl	801309c <HAL_UART_Receive_IT>

	ChessMoveStates = Chess_idle;
 8002ebe:	4b51      	ldr	r3, [pc, #324]	; (8003004 <main+0x46c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Test_traj) {
 8002ec4:	4b50      	ldr	r3, [pc, #320]	; (8003008 <main+0x470>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <main+0x34a>
			Test_traj = 0;
 8002ecc:	4b4e      	ldr	r3, [pc, #312]	; (8003008 <main+0x470>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
			JMoveTaskSpace(TaskSpace_Live_Ex1, Time_Live_Ex1);
 8002ed2:	4b4e      	ldr	r3, [pc, #312]	; (800300c <main+0x474>)
 8002ed4:	edd3 7a00 	vldr	s15, [r3]
 8002ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8002edc:	484c      	ldr	r0, [pc, #304]	; (8003010 <main+0x478>)
 8002ede:	f001 fae7 	bl	80044b0 <JMoveTaskSpace>
		}
		if (Test_traj2) {
 8002ee2:	4b4c      	ldr	r3, [pc, #304]	; (8003014 <main+0x47c>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80a8 	beq.w	800303c <main+0x4a4>
			Test_traj2 = 0;
 8002eec:	4b49      	ldr	r3, [pc, #292]	; (8003014 <main+0x47c>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
			float TaskSpace_Live_Ex1_ChangeZ[3];
			TaskSpace_Live_Ex1_ChangeZ[0] = TaskSpace_Live_Ex1[0];
 8002ef2:	4b47      	ldr	r3, [pc, #284]	; (8003010 <main+0x478>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
			TaskSpace_Live_Ex1_ChangeZ[1] = TaskSpace_Live_Ex1[1];
 8002ef8:	4b45      	ldr	r3, [pc, #276]	; (8003010 <main+0x478>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	617b      	str	r3, [r7, #20]
			TaskSpace_Live_Ex1_ChangeZ[2] = TaskSpace_Live_Ex1[2] - 100;
 8002efe:	4b44      	ldr	r3, [pc, #272]	; (8003010 <main+0x478>)
 8002f00:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f04:	e08a      	b.n	800301c <main+0x484>
 8002f06:	bf00      	nop
 8002f08:	00000000 	.word	0x00000000
 8002f0c:	40540000 	.word	0x40540000
 8002f10:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f14:	3f50624d 	.word	0x3f50624d
 8002f18:	00000000 	.word	0x00000000
 8002f1c:	40b38800 	.word	0x40b38800
 8002f20:	58020c00 	.word	0x58020c00
 8002f24:	58021000 	.word	0x58021000
 8002f28:	1ff1e840 	.word	0x1ff1e840
 8002f2c:	1ff1e820 	.word	0x1ff1e820
 8002f30:	2000029c 	.word	0x2000029c
 8002f34:	200001b4 	.word	0x200001b4
 8002f38:	45cb2000 	.word	0x45cb2000
 8002f3c:	20000228 	.word	0x20000228
 8002f40:	20000870 	.word	0x20000870
 8002f44:	200002a0 	.word	0x200002a0
 8002f48:	461dd000 	.word	0x461dd000
 8002f4c:	200002c0 	.word	0x200002c0
 8002f50:	4545d000 	.word	0x4545d000
 8002f54:	200002e0 	.word	0x200002e0
 8002f58:	45d9d000 	.word	0x45d9d000
 8002f5c:	20000300 	.word	0x20000300
 8002f60:	20000320 	.word	0x20000320
 8002f64:	20000340 	.word	0x20000340
 8002f68:	20000360 	.word	0x20000360
 8002f6c:	20000380 	.word	0x20000380
 8002f70:	200003c0 	.word	0x200003c0
 8002f74:	43c80000 	.word	0x43c80000
 8002f78:	00000000 	.word	0x00000000
 8002f7c:	3f19999a 	.word	0x3f19999a
 8002f80:	200003c0 	.word	0x200003c0
 8002f84:	43cd0000 	.word	0x43cd0000
 8002f88:	3e99999a 	.word	0x3e99999a
 8002f8c:	3f333333 	.word	0x3f333333
 8002f90:	2000042c 	.word	0x2000042c
 8002f94:	43de8000 	.word	0x43de8000
 8002f98:	3e051eb8 	.word	0x3e051eb8
 8002f9c:	3e4ccccd 	.word	0x3e4ccccd
 8002fa0:	3f51eb85 	.word	0x3f51eb85
 8002fa4:	20000498 	.word	0x20000498
 8002fa8:	43fa0000 	.word	0x43fa0000
 8002fac:	3dcccccd 	.word	0x3dcccccd
 8002fb0:	3a83126f 	.word	0x3a83126f
 8002fb4:	20000504 	.word	0x20000504
 8002fb8:	2000024c 	.word	0x2000024c
 8002fbc:	20000738 	.word	0x20000738
 8002fc0:	20000808 	.word	0x20000808
 8002fc4:	2000081c 	.word	0x2000081c
 8002fc8:	0007a120 	.word	0x0007a120
 8002fcc:	20000b94 	.word	0x20000b94
 8002fd0:	20000570 	.word	0x20000570
 8002fd4:	20000be0 	.word	0x20000be0
 8002fd8:	20000584 	.word	0x20000584
 8002fdc:	20000c2c 	.word	0x20000c2c
 8002fe0:	20000598 	.word	0x20000598
 8002fe4:	20000c78 	.word	0x20000c78
 8002fe8:	200005ac 	.word	0x200005ac
 8002fec:	20000850 	.word	0x20000850
 8002ff0:	20000835 	.word	0x20000835
 8002ff4:	20000830 	.word	0x20000830
 8002ff8:	20000d10 	.word	0x20000d10
 8002ffc:	20000084 	.word	0x20000084
 8003000:	20000e20 	.word	0x20000e20
 8003004:	20000843 	.word	0x20000843
 8003008:	2000084e 	.word	0x2000084e
 800300c:	2000000c 	.word	0x2000000c
 8003010:	20000860 	.word	0x20000860
 8003014:	2000084f 	.word	0x2000084f
 8003018:	42c80000 	.word	0x42c80000
 800301c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8003018 <main+0x480>
 8003020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003024:	edc7 7a06 	vstr	s15, [r7, #24]
			JMoveTaskSpace(TaskSpace_Live_Ex1_ChangeZ, Time_Live_Ex1);
 8003028:	4b61      	ldr	r3, [pc, #388]	; (80031b0 <main+0x618>)
 800302a:	edd3 7a00 	vldr	s15, [r3]
 800302e:	f107 0310 	add.w	r3, r7, #16
 8003032:	eeb0 0a67 	vmov.f32	s0, s15
 8003036:	4618      	mov	r0, r3
 8003038:	f001 fa3a 	bl	80044b0 <JMoveTaskSpace>
		}

	   uint8_t tune_joint = 1;
 800303c:	2301      	movs	r3, #1
 800303e:	77fb      	strb	r3, [r7, #31]
	   if (tune_PID[0] != tune_PID[1]){
 8003040:	4b5c      	ldr	r3, [pc, #368]	; (80031b4 <main+0x61c>)
 8003042:	ed93 7a00 	vldr	s14, [r3]
 8003046:	4b5b      	ldr	r3, [pc, #364]	; (80031b4 <main+0x61c>)
 8003048:	edd3 7a01 	vldr	s15, [r3, #4]
 800304c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003054:	d068      	beq.n	8003128 <main+0x590>
		   	tune_PID[1] = tune_PID[0];
 8003056:	4b57      	ldr	r3, [pc, #348]	; (80031b4 <main+0x61c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a56      	ldr	r2, [pc, #344]	; (80031b4 <main+0x61c>)
 800305c:	6053      	str	r3, [r2, #4]
			t = 0;
 800305e:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <main+0x620>)
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
			float Joint[4] = {0,0,0,0};
 8003066:	463b      	mov	r3, r7
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
			for (int i = 0; i < 4; i++) {
 8003072:	2300      	movs	r3, #0
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
 8003076:	e010      	b.n	800309a <main+0x502>
				Joint[i] = Control[i].PositionFeedback;
 8003078:	4a50      	ldr	r2, [pc, #320]	; (80031bc <main+0x624>)
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	216c      	movs	r1, #108	; 0x6c
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	3328      	adds	r3, #40	; 0x28
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	3328      	adds	r3, #40	; 0x28
 800308e:	443b      	add	r3, r7
 8003090:	3b28      	subs	r3, #40	; 0x28
 8003092:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	3301      	adds	r3, #1
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	2b03      	cmp	r3, #3
 800309e:	ddeb      	ble.n	8003078 <main+0x4e0>
			}
			Joint[tune_joint] = tune_PID[0];
 80030a0:	7ffb      	ldrb	r3, [r7, #31]
 80030a2:	4a44      	ldr	r2, [pc, #272]	; (80031b4 <main+0x61c>)
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	3328      	adds	r3, #40	; 0x28
 80030aa:	443b      	add	r3, r7
 80030ac:	3b28      	subs	r3, #40	; 0x28
 80030ae:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 80030b0:	2300      	movs	r3, #0
 80030b2:	623b      	str	r3, [r7, #32]
 80030b4:	e032      	b.n	800311c <main+0x584>
				Traj_Coeff_Cal(&Traj[i], T_tune_PID, Joint[i], Control[i].PositionFeedback,0, Control[i].VelocityFeedback);
 80030b6:	6a3a      	ldr	r2, [r7, #32]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4a3f      	ldr	r2, [pc, #252]	; (80031c0 <main+0x628>)
 80030c2:	441a      	add	r2, r3
 80030c4:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <main+0x62c>)
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	3328      	adds	r3, #40	; 0x28
 80030d0:	443b      	add	r3, r7
 80030d2:	3b28      	subs	r3, #40	; 0x28
 80030d4:	ed93 7a00 	vldr	s14, [r3]
 80030d8:	4938      	ldr	r1, [pc, #224]	; (80031bc <main+0x624>)
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	206c      	movs	r0, #108	; 0x6c
 80030de:	fb00 f303 	mul.w	r3, r0, r3
 80030e2:	440b      	add	r3, r1
 80030e4:	3328      	adds	r3, #40	; 0x28
 80030e6:	edd3 6a00 	vldr	s13, [r3]
 80030ea:	4934      	ldr	r1, [pc, #208]	; (80031bc <main+0x624>)
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	206c      	movs	r0, #108	; 0x6c
 80030f0:	fb00 f303 	mul.w	r3, r0, r3
 80030f4:	440b      	add	r3, r1
 80030f6:	335c      	adds	r3, #92	; 0x5c
 80030f8:	ed93 6a00 	vldr	s12, [r3]
 80030fc:	eeb0 2a46 	vmov.f32	s4, s12
 8003100:	eddf 1a31 	vldr	s3, [pc, #196]	; 80031c8 <main+0x630>
 8003104:	eeb0 1a66 	vmov.f32	s2, s13
 8003108:	eef0 0a47 	vmov.f32	s1, s14
 800310c:	eeb0 0a67 	vmov.f32	s0, s15
 8003110:	4610      	mov	r0, r2
 8003112:	f7fd fea2 	bl	8000e5a <Traj_Coeff_Cal>
			for (int i = 0; i < 4; i++) {
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	3301      	adds	r3, #1
 800311a:	623b      	str	r3, [r7, #32]
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	2b03      	cmp	r3, #3
 8003120:	ddc9      	ble.n	80030b6 <main+0x51e>
			}
			Traj_Flag = 0x0F;
 8003122:	4b2a      	ldr	r3, [pc, #168]	; (80031cc <main+0x634>)
 8003124:	220f      	movs	r2, #15
 8003126:	701a      	strb	r2, [r3, #0]
	   }

		if (Contorl_Flag) {
 8003128:	4b29      	ldr	r3, [pc, #164]	; (80031d0 <main+0x638>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d004      	beq.n	800313a <main+0x5a2>
			Control_Function();
 8003130:	f000 ffaa 	bl	8004088 <Control_Function>
			Contorl_Flag = 0;    // Clear Control Flag
 8003134:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <main+0x638>)
 8003136:	2200      	movs	r2, #0
 8003138:	701a      	strb	r2, [r3, #0]
		}

		if (Protocol_Flag) {
 800313a:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <main+0x63c>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <main+0x5b4>
			Narwhal_Protocol();
 8003142:	f000 f9b5 	bl	80034b0 <Narwhal_Protocol>
			Protocol_Flag = 0;
 8003146:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <main+0x63c>)
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - Software_Timer_100ms >= 10) {
 800314c:	f003 f9e6 	bl	800651c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <main+0x640>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b09      	cmp	r3, #9
 800315a:	d913      	bls.n	8003184 <main+0x5ec>
			Software_Timer_100ms = HAL_GetTick();
 800315c:	f003 f9de 	bl	800651c <HAL_GetTick>
 8003160:	4603      	mov	r3, r0
 8003162:	4a1d      	ldr	r2, [pc, #116]	; (80031d8 <main+0x640>)
 8003164:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc3); 				//	read temperature sensor
 8003166:	481d      	ldr	r0, [pc, #116]	; (80031dc <main+0x644>)
 8003168:	f003 fee6 	bl	8006f38 <HAL_ADC_Start_IT>
			HAL_I2C_Mem_Read_IT(&hi2c2, 0x92, 0x00, I2C_MEMADD_SIZE_8BIT,
 800316c:	2302      	movs	r3, #2
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <main+0x648>)
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	2301      	movs	r3, #1
 8003176:	2200      	movs	r2, #0
 8003178:	2192      	movs	r1, #146	; 0x92
 800317a:	481a      	ldr	r0, [pc, #104]	; (80031e4 <main+0x64c>)
 800317c:	f008 faf8 	bl	800b770 <HAL_I2C_Mem_Read_IT>
					Buffer_TPM75, 2);
			ChessMoveStateMachine();
 8003180:	f001 fa2e 	bl	80045e0 <ChessMoveStateMachine>
		}

		if (HAL_GetTick() - Software_Timer_1s >= 1000) {		// 	Update System Status
 8003184:	f003 f9ca 	bl	800651c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <main+0x650>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003194:	f4ff ae96 	bcc.w	8002ec4 <main+0x32c>
			Software_Timer_1s = HAL_GetTick();
 8003198:	f003 f9c0 	bl	800651c <HAL_GetTick>
 800319c:	4603      	mov	r3, r0
 800319e:	4a12      	ldr	r2, [pc, #72]	; (80031e8 <main+0x650>)
 80031a0:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED2_Pin);
 80031a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031a6:	4811      	ldr	r0, [pc, #68]	; (80031ec <main+0x654>)
 80031a8:	f008 fa37 	bl	800b61a <HAL_GPIO_TogglePin>
  {
 80031ac:	e68a      	b.n	8002ec4 <main+0x32c>
 80031ae:	bf00      	nop
 80031b0:	2000000c 	.word	0x2000000c
 80031b4:	20000844 	.word	0x20000844
 80031b8:	20000830 	.word	0x20000830
 80031bc:	200003c0 	.word	0x200003c0
 80031c0:	20000744 	.word	0x20000744
 80031c4:	20000008 	.word	0x20000008
 80031c8:	00000000 	.word	0x00000000
 80031cc:	20000835 	.word	0x20000835
 80031d0:	20000834 	.word	0x20000834
 80031d4:	20000836 	.word	0x20000836
 80031d8:	2000083c 	.word	0x2000083c
 80031dc:	200001b4 	.word	0x200001b4
 80031e0:	2000084c 	.word	0x2000084c
 80031e4:	2000024c 	.word	0x2000024c
 80031e8:	20000838 	.word	0x20000838
 80031ec:	58020800 	.word	0x58020800

080031f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b09c      	sub	sp, #112	; 0x70
 80031f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031fa:	224c      	movs	r2, #76	; 0x4c
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f012 fc9e 	bl	8015b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003204:	1d3b      	adds	r3, r7, #4
 8003206:	2220      	movs	r2, #32
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f012 fc98 	bl	8015b40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003210:	2002      	movs	r0, #2
 8003212:	f00a f9cb 	bl	800d5ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003216:	2300      	movs	r3, #0
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <SystemClock_Config+0xe8>)
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	4a2e      	ldr	r2, [pc, #184]	; (80032d8 <SystemClock_Config+0xe8>)
 8003220:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003224:	6193      	str	r3, [r2, #24]
 8003226:	4b2c      	ldr	r3, [pc, #176]	; (80032d8 <SystemClock_Config+0xe8>)
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003232:	bf00      	nop
 8003234:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <SystemClock_Config+0xe8>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800323c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003240:	d1f8      	bne.n	8003234 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003242:	4b26      	ldr	r3, [pc, #152]	; (80032dc <SystemClock_Config+0xec>)
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	f023 0303 	bic.w	r3, r3, #3
 800324a:	4a24      	ldr	r2, [pc, #144]	; (80032dc <SystemClock_Config+0xec>)
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003252:	2301      	movs	r3, #1
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800325c:	2302      	movs	r3, #2
 800325e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003260:	2302      	movs	r3, #2
 8003262:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003264:	2302      	movs	r3, #2
 8003266:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8003268:	232c      	movs	r3, #44	; 0x2c
 800326a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800326c:	2301      	movs	r3, #1
 800326e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003270:	2302      	movs	r3, #2
 8003272:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003274:	2302      	movs	r3, #2
 8003276:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003278:	230c      	movs	r3, #12
 800327a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800327c:	2300      	movs	r3, #0
 800327e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003288:	4618      	mov	r0, r3
 800328a:	f00a f9c9 	bl	800d620 <HAL_RCC_OscConfig>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003294:	f001 faaa 	bl	80047ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003298:	233f      	movs	r3, #63	; 0x3f
 800329a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800329c:	2303      	movs	r3, #3
 800329e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80032a4:	2308      	movs	r3, #8
 80032a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80032a8:	2340      	movs	r3, #64	; 0x40
 80032aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80032ac:	2340      	movs	r3, #64	; 0x40
 80032ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80032b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80032b6:	2340      	movs	r3, #64	; 0x40
 80032b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	2103      	movs	r1, #3
 80032be:	4618      	mov	r0, r3
 80032c0:	f00a fd5c 	bl	800dd7c <HAL_RCC_ClockConfig>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <SystemClock_Config+0xde>
  {
    Error_Handler();
 80032ca:	f001 fa8f 	bl	80047ec <Error_Handler>
  }
}
 80032ce:	bf00      	nop
 80032d0:	3770      	adds	r7, #112	; 0x70
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	58024800 	.word	0x58024800
 80032dc:	58024400 	.word	0x58024400

080032e0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b0ae      	sub	sp, #184	; 0xb8
 80032e4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	22b4      	movs	r2, #180	; 0xb4
 80032ea:	2100      	movs	r1, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f012 fc27 	bl	8015b40 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 80032f2:	4b14      	ldr	r3, [pc, #80]	; (8003344 <PeriphCommonClock_Config+0x64>)
 80032f4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80032f6:	2302      	movs	r3, #2
 80032f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80032fa:	2310      	movs	r3, #16
 80032fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80032fe:	2302      	movs	r3, #2
 8003300:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003302:	2302      	movs	r3, #2
 8003304:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003306:	2302      	movs	r3, #2
 8003308:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800330a:	23c0      	movs	r3, #192	; 0xc0
 800330c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8003316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800331a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 800331c:	2301      	movs	r3, #1
 800331e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8003320:	2308      	movs	r3, #8
 8003322:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003324:	2300      	movs	r3, #0
 8003326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	4618      	mov	r0, r3
 800332e:	f00b f8b1 	bl	800e494 <HAL_RCCEx_PeriphCLKConfig>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8003338:	f001 fa58 	bl	80047ec <Error_Handler>
  }
}
 800333c:	bf00      	nop
 800333e:	37b8      	adds	r7, #184	; 0xb8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	00082003 	.word	0x00082003

08003348 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a06      	ldr	r2, [pc, #24]	; (800336c <HAL_UART_RxCpltCallback+0x24>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d102      	bne.n	800335e <HAL_UART_RxCpltCallback+0x16>
		Protocol_Flag = 1;
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_UART_RxCpltCallback+0x28>)
 800335a:	2201      	movs	r2, #1
 800335c:	701a      	strb	r2, [r3, #0]
	}
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000e20 	.word	0x20000e20
 8003370:	20000836 	.word	0x20000836

08003374 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(Neopixel.htim, TIM_CHANNEL_1);
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800337e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f00e fb0f 	bl	80119a8 <HAL_TIM_PWM_Stop_DMA>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200005c0 	.word	0x200005c0

08003398 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a18      	ldr	r2, [pc, #96]	; (8003404 <HAL_ADC_ConvCpltCallback+0x6c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d129      	bne.n	80033fc <HAL_ADC_ConvCpltCallback+0x64>
		uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 80033a8:	4816      	ldr	r0, [pc, #88]	; (8003404 <HAL_ADC_ConvCpltCallback+0x6c>)
 80033aa:	f003 ff05 	bl	80071b8 <HAL_ADC_GetValue>
 80033ae:	60f8      	str	r0, [r7, #12]
		Temperature = ((Temperature * 9)
 80033b0:	4b15      	ldr	r3, [pc, #84]	; (8003408 <HAL_ADC_ConvCpltCallback+0x70>)
 80033b2:	edd3 7a00 	vldr	s15, [r3]
 80033b6:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80033ba:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ (Temp_Calibration
						* (float) ((float) ADC_Output
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 80033c8:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_ADC_ConvCpltCallback+0x74>)
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	ee07 3a90 	vmov	s15, r3
						* (float) ((float) ADC_Output
 80033d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80033d8:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <HAL_ADC_ConvCpltCallback+0x78>)
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	ee66 7aa7 	vmul.f32	s15, s13, s15
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 80033e2:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 80033e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
				+ (Temp_Calibration
 80033ea:	ee37 7a27 	vadd.f32	s14, s14, s15
				/ 10;
 80033ee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80033f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
		Temperature = ((Temperature * 9)
 80033f6:	4b04      	ldr	r3, [pc, #16]	; (8003408 <HAL_ADC_ConvCpltCallback+0x70>)
 80033f8:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	200001b4 	.word	0x200001b4
 8003408:	20000298 	.word	0x20000298
 800340c:	1ff1e820 	.word	0x1ff1e820
 8003410:	2000029c 	.word	0x2000029c

08003414 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	if (htim == &htim23) {
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a06      	ldr	r2, [pc, #24]	; (8003438 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d102      	bne.n	800342a <HAL_TIM_PeriodElapsedCallback+0x16>
		Contorl_Flag = 1;
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
	}
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000d10 	.word	0x20000d10
 800343c:	20000834 	.word	0x20000834

08003440 <CRC8>:

inline uint8_t CRC8(uint8_t *Data,uint8_t BufferLength){
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]
	return HAL_CRC_Calculate(&hcrc, (uint32_t*) Data, BufferLength) ^ 0xFF;
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	461a      	mov	r2, r3
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4805      	ldr	r0, [pc, #20]	; (8003468 <CRC8+0x28>)
 8003454:	f005 fb54 	bl	8008b00 <HAL_CRC_Calculate>
 8003458:	4603      	mov	r3, r0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	b2db      	uxtb	r3, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000228 	.word	0x20000228

0800346c <SentData>:
inline void SentData(uint8_t range){
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	71fb      	strb	r3, [r7, #7]
	UART5_txBuffer[range] = CRC8(UART5_txBuffer, range);
 8003476:	79fc      	ldrb	r4, [r7, #7]
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	4619      	mov	r1, r3
 800347c:	4809      	ldr	r0, [pc, #36]	; (80034a4 <SentData+0x38>)
 800347e:	f7ff ffdf 	bl	8003440 <CRC8>
 8003482:	4603      	mov	r3, r0
 8003484:	461a      	mov	r2, r3
 8003486:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <SentData+0x38>)
 8003488:	551a      	strb	r2, [r3, r4]
	HAL_UART_Transmit_IT(&huart5, UART5_txBuffer, range+1);
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	b29b      	uxth	r3, r3
 800348e:	3301      	adds	r3, #1
 8003490:	b29b      	uxth	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	4903      	ldr	r1, [pc, #12]	; (80034a4 <SentData+0x38>)
 8003496:	4804      	ldr	r0, [pc, #16]	; (80034a8 <SentData+0x3c>)
 8003498:	f00f fd58 	bl	8012f4c <HAL_UART_Transmit_IT>
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd90      	pop	{r4, r7, pc}
 80034a4:	20000094 	.word	0x20000094
 80034a8:	20000e20 	.word	0x20000e20
 80034ac:	00000000 	.word	0x00000000

080034b0 <Narwhal_Protocol>:

inline void Narwhal_Protocol() {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b0ae      	sub	sp, #184	; 0xb8
 80034b4:	af00      	add	r7, sp, #0
	if (UART5_rxBuffer[0] == 0xFF) {
 80034b6:	4bb6      	ldr	r3, [pc, #728]	; (8003790 <Narwhal_Protocol+0x2e0>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2bff      	cmp	r3, #255	; 0xff
 80034bc:	f040 85c4 	bne.w	8004048 <Narwhal_Protocol+0xb98>
		uint8_t CRC_Cal = CRC8(UART5_rxBuffer, 13);
 80034c0:	210d      	movs	r1, #13
 80034c2:	48b3      	ldr	r0, [pc, #716]	; (8003790 <Narwhal_Protocol+0x2e0>)
 80034c4:	f7ff ffbc 	bl	8003440 <CRC8>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		if (CRC_Cal == UART5_rxBuffer[13]) {
 80034ce:	4bb0      	ldr	r3, [pc, #704]	; (8003790 <Narwhal_Protocol+0x2e0>)
 80034d0:	7b5b      	ldrb	r3, [r3, #13]
 80034d2:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 80034d6:	429a      	cmp	r2, r3
 80034d8:	f040 85af 	bne.w	800403a <Narwhal_Protocol+0xb8a>
			UART5_txBuffer[0] = 0xFF;
 80034dc:	4bad      	ldr	r3, [pc, #692]	; (8003794 <Narwhal_Protocol+0x2e4>)
 80034de:	22ff      	movs	r2, #255	; 0xff
 80034e0:	701a      	strb	r2, [r3, #0]

			float q_Feed[4];
			float dq[4];
			float d_Task[3];
			float q_in[5] = {0,0,0,0,0};
 80034e2:	f107 031c 	add.w	r3, r7, #28
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	605a      	str	r2, [r3, #4]
 80034ec:	609a      	str	r2, [r3, #8]
 80034ee:	60da      	str	r2, [r3, #12]
 80034f0:	611a      	str	r2, [r3, #16]
			float task[3] = { -500, 300, 50 };
 80034f2:	4aa9      	ldr	r2, [pc, #676]	; (8003798 <Narwhal_Protocol+0x2e8>)
 80034f4:	f107 0310 	add.w	r3, r7, #16
 80034f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80034fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			uint16_t Temperature_Protocol = Temperature * 1000;
 80034fe:	4ba7      	ldr	r3, [pc, #668]	; (800379c <Narwhal_Protocol+0x2ec>)
 8003500:	edd3 7a00 	vldr	s15, [r3]
 8003504:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80037a0 <Narwhal_Protocol+0x2f0>
 8003508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800350c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003510:	ee17 3a90 	vmov	r3, s15
 8003514:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			/* 		Data to MCU Start	*/
			switch (UART5_rxBuffer[1]) {
 8003518:	4b9d      	ldr	r3, [pc, #628]	; (8003790 <Narwhal_Protocol+0x2e0>)
 800351a:	785b      	ldrb	r3, [r3, #1]
 800351c:	3ba0      	subs	r3, #160	; 0xa0
 800351e:	2b5f      	cmp	r3, #95	; 0x5f
 8003520:	f200 8584 	bhi.w	800402c <Narwhal_Protocol+0xb7c>
 8003524:	a201      	add	r2, pc, #4	; (adr r2, 800352c <Narwhal_Protocol+0x7c>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	08003c1f 	.word	0x08003c1f
 8003530:	08003c45 	.word	0x08003c45
 8003534:	08003c6b 	.word	0x08003c6b
 8003538:	0800402d 	.word	0x0800402d
 800353c:	0800402d 	.word	0x0800402d
 8003540:	0800402d 	.word	0x0800402d
 8003544:	0800402d 	.word	0x0800402d
 8003548:	0800402d 	.word	0x0800402d
 800354c:	0800402d 	.word	0x0800402d
 8003550:	0800402d 	.word	0x0800402d
 8003554:	08003ccf 	.word	0x08003ccf
 8003558:	08003d53 	.word	0x08003d53
 800355c:	0800402d 	.word	0x0800402d
 8003560:	0800402d 	.word	0x0800402d
 8003564:	0800402d 	.word	0x0800402d
 8003568:	08003e15 	.word	0x08003e15
 800356c:	0800402d 	.word	0x0800402d
 8003570:	0800402d 	.word	0x0800402d
 8003574:	0800402d 	.word	0x0800402d
 8003578:	0800402d 	.word	0x0800402d
 800357c:	0800402d 	.word	0x0800402d
 8003580:	0800402d 	.word	0x0800402d
 8003584:	0800402d 	.word	0x0800402d
 8003588:	0800402d 	.word	0x0800402d
 800358c:	0800402d 	.word	0x0800402d
 8003590:	0800402d 	.word	0x0800402d
 8003594:	0800402d 	.word	0x0800402d
 8003598:	0800402d 	.word	0x0800402d
 800359c:	0800402d 	.word	0x0800402d
 80035a0:	0800402d 	.word	0x0800402d
 80035a4:	0800402d 	.word	0x0800402d
 80035a8:	0800402d 	.word	0x0800402d
 80035ac:	0800402d 	.word	0x0800402d
 80035b0:	0800402d 	.word	0x0800402d
 80035b4:	0800402d 	.word	0x0800402d
 80035b8:	0800402d 	.word	0x0800402d
 80035bc:	0800402d 	.word	0x0800402d
 80035c0:	0800402d 	.word	0x0800402d
 80035c4:	0800402d 	.word	0x0800402d
 80035c8:	0800402d 	.word	0x0800402d
 80035cc:	0800402d 	.word	0x0800402d
 80035d0:	0800402d 	.word	0x0800402d
 80035d4:	0800402d 	.word	0x0800402d
 80035d8:	0800402d 	.word	0x0800402d
 80035dc:	0800402d 	.word	0x0800402d
 80035e0:	0800402d 	.word	0x0800402d
 80035e4:	0800402d 	.word	0x0800402d
 80035e8:	0800402d 	.word	0x0800402d
 80035ec:	0800402d 	.word	0x0800402d
 80035f0:	0800402d 	.word	0x0800402d
 80035f4:	0800402d 	.word	0x0800402d
 80035f8:	0800402d 	.word	0x0800402d
 80035fc:	0800402d 	.word	0x0800402d
 8003600:	0800402d 	.word	0x0800402d
 8003604:	0800402d 	.word	0x0800402d
 8003608:	0800402d 	.word	0x0800402d
 800360c:	0800402d 	.word	0x0800402d
 8003610:	0800402d 	.word	0x0800402d
 8003614:	0800402d 	.word	0x0800402d
 8003618:	0800402d 	.word	0x0800402d
 800361c:	0800402d 	.word	0x0800402d
 8003620:	0800402d 	.word	0x0800402d
 8003624:	0800402d 	.word	0x0800402d
 8003628:	0800402d 	.word	0x0800402d
 800362c:	0800402d 	.word	0x0800402d
 8003630:	0800402d 	.word	0x0800402d
 8003634:	0800402d 	.word	0x0800402d
 8003638:	0800402d 	.word	0x0800402d
 800363c:	0800402d 	.word	0x0800402d
 8003640:	0800402d 	.word	0x0800402d
 8003644:	0800402d 	.word	0x0800402d
 8003648:	0800402d 	.word	0x0800402d
 800364c:	0800402d 	.word	0x0800402d
 8003650:	0800402d 	.word	0x0800402d
 8003654:	0800402d 	.word	0x0800402d
 8003658:	0800402d 	.word	0x0800402d
 800365c:	0800402d 	.word	0x0800402d
 8003660:	0800402d 	.word	0x0800402d
 8003664:	0800402d 	.word	0x0800402d
 8003668:	0800402d 	.word	0x0800402d
 800366c:	080036ad 	.word	0x080036ad
 8003670:	080036c3 	.word	0x080036c3
 8003674:	0800402d 	.word	0x0800402d
 8003678:	0800402d 	.word	0x0800402d
 800367c:	0800402d 	.word	0x0800402d
 8003680:	080036d9 	.word	0x080036d9
 8003684:	0800402d 	.word	0x0800402d
 8003688:	0800402d 	.word	0x0800402d
 800368c:	0800402d 	.word	0x0800402d
 8003690:	0800402d 	.word	0x0800402d
 8003694:	0800377f 	.word	0x0800377f
 8003698:	08003897 	.word	0x08003897
 800369c:	0800402d 	.word	0x0800402d
 80036a0:	080039e7 	.word	0x080039e7
 80036a4:	08003af1 	.word	0x08003af1
 80036a8:	08003c0b 	.word	0x08003c0b
			case 0xF0:
				/* Ping */
				UART5_txBuffer[2] = 0x00;
 80036ac:	4b39      	ldr	r3, [pc, #228]	; (8003794 <Narwhal_Protocol+0x2e4>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80036b2:	4b38      	ldr	r3, [pc, #224]	; (8003794 <Narwhal_Protocol+0x2e4>)
 80036b4:	22ff      	movs	r2, #255	; 0xff
 80036b6:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80036b8:	2003      	movs	r0, #3
 80036ba:	f7ff fed7 	bl	800346c <SentData>
				break;
 80036be:	f000 bcc9 	b.w	8004054 <Narwhal_Protocol+0xba4>
			case 0xF1:
				/* Working Mode Set */
				UART5_txBuffer[2] = 0x01;
 80036c2:	4b34      	ldr	r3, [pc, #208]	; (8003794 <Narwhal_Protocol+0x2e4>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80036c8:	4b32      	ldr	r3, [pc, #200]	; (8003794 <Narwhal_Protocol+0x2e4>)
 80036ca:	22ff      	movs	r2, #255	; 0xff
 80036cc:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80036ce:	2003      	movs	r0, #3
 80036d0:	f7ff fecc 	bl	800346c <SentData>
				break;
 80036d4:	f000 bcbe 	b.w	8004054 <Narwhal_Protocol+0xba4>
			case 0xF5:
				/* GoHome */
				if (Traj_Flag == 0) {;
 80036d8:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <Narwhal_Protocol+0x2f4>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d143      	bne.n	8003768 <Narwhal_Protocol+0x2b8>
					t = 0;
 80036e0:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <Narwhal_Protocol+0x2f8>)
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
					for (int i = 0; i < 4; i++) {
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036ee:	e02d      	b.n	800374c <Narwhal_Protocol+0x29c>
						Traj_Coeff_Cal(&Traj[i], 2, 0,
 80036f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4a2b      	ldr	r2, [pc, #172]	; (80037ac <Narwhal_Protocol+0x2fc>)
 80036fe:	441a      	add	r2, r3
 8003700:	492b      	ldr	r1, [pc, #172]	; (80037b0 <Narwhal_Protocol+0x300>)
 8003702:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003706:	206c      	movs	r0, #108	; 0x6c
 8003708:	fb00 f303 	mul.w	r3, r0, r3
 800370c:	440b      	add	r3, r1
 800370e:	3328      	adds	r3, #40	; 0x28
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	4926      	ldr	r1, [pc, #152]	; (80037b0 <Narwhal_Protocol+0x300>)
 8003716:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800371a:	206c      	movs	r0, #108	; 0x6c
 800371c:	fb00 f303 	mul.w	r3, r0, r3
 8003720:	440b      	add	r3, r1
 8003722:	335c      	adds	r3, #92	; 0x5c
 8003724:	ed93 7a00 	vldr	s14, [r3]
 8003728:	eeb0 2a47 	vmov.f32	s4, s14
 800372c:	eddf 1a21 	vldr	s3, [pc, #132]	; 80037b4 <Narwhal_Protocol+0x304>
 8003730:	eeb0 1a67 	vmov.f32	s2, s15
 8003734:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80037b4 <Narwhal_Protocol+0x304>
 8003738:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800373c:	4610      	mov	r0, r2
 800373e:	f7fd fb8c 	bl	8000e5a <Traj_Coeff_Cal>
					for (int i = 0; i < 4; i++) {
 8003742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003746:	3301      	adds	r3, #1
 8003748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800374c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003750:	2b03      	cmp	r3, #3
 8003752:	ddcd      	ble.n	80036f0 <Narwhal_Protocol+0x240>
								Control[i].PositionFeedback, 0,
								Control[i].VelocityFeedback);
					}
					Traj_Flag = 0x0F;
 8003754:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <Narwhal_Protocol+0x2f4>)
 8003756:	220f      	movs	r2, #15
 8003758:	701a      	strb	r2, [r3, #0]
					Chessmove_State = 0;
 800375a:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <Narwhal_Protocol+0x308>)
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
					UART5_txBuffer[2] = 0x00;
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <Narwhal_Protocol+0x2e4>)
 8003762:	2200      	movs	r2, #0
 8003764:	709a      	strb	r2, [r3, #2]
 8003766:	e002      	b.n	800376e <Narwhal_Protocol+0x2be>
				} else {
					UART5_txBuffer[2] = 0x01;
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <Narwhal_Protocol+0x2e4>)
 800376a:	2201      	movs	r2, #1
 800376c:	709a      	strb	r2, [r3, #2]
				}
				UART5_txBuffer[1] = 0xFF;
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <Narwhal_Protocol+0x2e4>)
 8003770:	22ff      	movs	r2, #255	; 0xff
 8003772:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003774:	2003      	movs	r0, #3
 8003776:	f7ff fe79 	bl	800346c <SentData>
				break;
 800377a:	f000 bc6b 	b.w	8004054 <Narwhal_Protocol+0xba4>
			case 0xFA:
				/* Joint Jog */
				t = 0;
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <Narwhal_Protocol+0x2f8>)
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++) {
 8003786:	2300      	movs	r3, #0
 8003788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800378c:	e06f      	b.n	800386e <Narwhal_Protocol+0x3be>
 800378e:	bf00      	nop
 8003790:	20000084 	.word	0x20000084
 8003794:	20000094 	.word	0x20000094
 8003798:	08016bbc 	.word	0x08016bbc
 800379c:	20000298 	.word	0x20000298
 80037a0:	447a0000 	.word	0x447a0000
 80037a4:	20000835 	.word	0x20000835
 80037a8:	20000830 	.word	0x20000830
 80037ac:	20000744 	.word	0x20000744
 80037b0:	200003c0 	.word	0x200003c0
 80037b4:	00000000 	.word	0x00000000
 80037b8:	20000837 	.word	0x20000837
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 80037bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037c0:	3301      	adds	r3, #1
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4ad2      	ldr	r2, [pc, #840]	; (8003b10 <Narwhal_Protocol+0x660>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 80037c8:	021b      	lsls	r3, r3, #8
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 80037ca:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 80037cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	3303      	adds	r3, #3
 80037d4:	49ce      	ldr	r1, [pc, #824]	; (8003b10 <Narwhal_Protocol+0x660>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	b21b      	sxth	r3, r3
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 80037da:	4313      	orrs	r3, r2
 80037dc:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80037e6:	ed9f 5bc6 	vldr	d5, [pc, #792]	; 8003b00 <Narwhal_Protocol+0x650>
 80037ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 80037ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037f2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
					Traj_Coeff_Cal(&Traj[i], 0.5,
 80037f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4ac4      	ldr	r2, [pc, #784]	; (8003b14 <Narwhal_Protocol+0x664>)
 8003804:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 8003806:	49c4      	ldr	r1, [pc, #784]	; (8003b18 <Narwhal_Protocol+0x668>)
 8003808:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800380c:	206c      	movs	r0, #108	; 0x6c
 800380e:	fb00 f303 	mul.w	r3, r0, r3
 8003812:	440b      	add	r3, r1
 8003814:	3328      	adds	r3, #40	; 0x28
 8003816:	ed93 7a00 	vldr	s14, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 800381a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800381e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003822:	49bd      	ldr	r1, [pc, #756]	; (8003b18 <Narwhal_Protocol+0x668>)
 8003824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003828:	206c      	movs	r0, #108	; 0x6c
 800382a:	fb00 f303 	mul.w	r3, r0, r3
 800382e:	440b      	add	r3, r1
 8003830:	3328      	adds	r3, #40	; 0x28
 8003832:	ed93 7a00 	vldr	s14, [r3]
 8003836:	49b8      	ldr	r1, [pc, #736]	; (8003b18 <Narwhal_Protocol+0x668>)
 8003838:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800383c:	206c      	movs	r0, #108	; 0x6c
 800383e:	fb00 f303 	mul.w	r3, r0, r3
 8003842:	440b      	add	r3, r1
 8003844:	335c      	adds	r3, #92	; 0x5c
 8003846:	edd3 6a00 	vldr	s13, [r3]
 800384a:	eeb0 2a66 	vmov.f32	s4, s13
 800384e:	eddf 1ab3 	vldr	s3, [pc, #716]	; 8003b1c <Narwhal_Protocol+0x66c>
 8003852:	eeb0 1a47 	vmov.f32	s2, s14
 8003856:	eef0 0a67 	vmov.f32	s1, s15
 800385a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800385e:	4610      	mov	r0, r2
 8003860:	f7fd fafb 	bl	8000e5a <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003864:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003868:	3301      	adds	r3, #1
 800386a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800386e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003872:	2b03      	cmp	r3, #3
 8003874:	dda2      	ble.n	80037bc <Narwhal_Protocol+0x30c>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003876:	4baa      	ldr	r3, [pc, #680]	; (8003b20 <Narwhal_Protocol+0x670>)
 8003878:	220f      	movs	r2, #15
 800387a:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 800387c:	4ba9      	ldr	r3, [pc, #676]	; (8003b24 <Narwhal_Protocol+0x674>)
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003882:	4ba9      	ldr	r3, [pc, #676]	; (8003b28 <Narwhal_Protocol+0x678>)
 8003884:	2200      	movs	r2, #0
 8003886:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003888:	4ba7      	ldr	r3, [pc, #668]	; (8003b28 <Narwhal_Protocol+0x678>)
 800388a:	22ff      	movs	r2, #255	; 0xff
 800388c:	705a      	strb	r2, [r3, #1]
				SentData(3);
 800388e:	2003      	movs	r0, #3
 8003890:	f7ff fdec 	bl	800346c <SentData>
				break;
 8003894:	e3de      	b.n	8004054 <Narwhal_Protocol+0xba4>
			case 0xFB:
				/* Cartesian Jog */
				q_Feed[0] = Control[0].PositionFeedback;
 8003896:	4ba0      	ldr	r3, [pc, #640]	; (8003b18 <Narwhal_Protocol+0x668>)
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	64fb      	str	r3, [r7, #76]	; 0x4c
				q_Feed[1] = Control[1].PositionFeedback;
 800389c:	4b9e      	ldr	r3, [pc, #632]	; (8003b18 <Narwhal_Protocol+0x668>)
 800389e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a2:	653b      	str	r3, [r7, #80]	; 0x50
				q_Feed[2] = Control[2].PositionFeedback;
 80038a4:	4b9c      	ldr	r3, [pc, #624]	; (8003b18 <Narwhal_Protocol+0x668>)
 80038a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80038aa:	657b      	str	r3, [r7, #84]	; 0x54
				q_Feed[3] = Control[3].PositionFeedback;
 80038ac:	4b9a      	ldr	r3, [pc, #616]	; (8003b18 <Narwhal_Protocol+0x668>)
 80038ae:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80038b2:	65bb      	str	r3, [r7, #88]	; 0x58
				for (int i = 0; i < 3; i++) {
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038ba:	e027      	b.n	800390c <Narwhal_Protocol+0x45c>
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 80038bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038c0:	3301      	adds	r3, #1
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4a92      	ldr	r2, [pc, #584]	; (8003b10 <Narwhal_Protocol+0x660>)
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 80038cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	3303      	adds	r3, #3
 80038d4:	498e      	ldr	r1, [pc, #568]	; (8003b10 <Narwhal_Protocol+0x660>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	b21b      	sxth	r3, r3
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 80038da:	4313      	orrs	r3, r2
 80038dc:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80038e6:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8003b08 <Narwhal_Protocol+0x658>
 80038ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80038ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 80038f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	33b8      	adds	r3, #184	; 0xb8
 80038fa:	443b      	add	r3, r7
 80038fc:	3b88      	subs	r3, #136	; 0x88
 80038fe:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < 3; i++) {
 8003902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003906:	3301      	adds	r3, #1
 8003908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800390c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003910:	2b02      	cmp	r3, #2
 8003912:	ddd3      	ble.n	80038bc <Narwhal_Protocol+0x40c>
				}
				IVK(q_Feed, d_Task, dq);
 8003914:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003918:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800391c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe faf5 	bl	8001f10 <IVK>
				t = 0;
 8003926:	4b81      	ldr	r3, [pc, #516]	; (8003b2c <Narwhal_Protocol+0x67c>)
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 3; i++) {
 800392e:	2300      	movs	r3, #0
 8003930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003934:	e043      	b.n	80039be <Narwhal_Protocol+0x50e>
					float Setpoint = Control[i].PositionFeedback + dq[i];
 8003936:	4a78      	ldr	r2, [pc, #480]	; (8003b18 <Narwhal_Protocol+0x668>)
 8003938:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800393c:	216c      	movs	r1, #108	; 0x6c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	3328      	adds	r3, #40	; 0x28
 8003946:	ed93 7a00 	vldr	s14, [r3]
 800394a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	33b8      	adds	r3, #184	; 0xb8
 8003952:	443b      	add	r3, r7
 8003954:	3b7c      	subs	r3, #124	; 0x7c
 8003956:	edd3 7a00 	vldr	s15, [r3]
 800395a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800395e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
					Traj_Coeff_Cal(&Traj[i], 0.5, Setpoint,
 8003962:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4a69      	ldr	r2, [pc, #420]	; (8003b14 <Narwhal_Protocol+0x664>)
 8003970:	441a      	add	r2, r3
 8003972:	4969      	ldr	r1, [pc, #420]	; (8003b18 <Narwhal_Protocol+0x668>)
 8003974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003978:	206c      	movs	r0, #108	; 0x6c
 800397a:	fb00 f303 	mul.w	r3, r0, r3
 800397e:	440b      	add	r3, r1
 8003980:	3328      	adds	r3, #40	; 0x28
 8003982:	edd3 7a00 	vldr	s15, [r3]
 8003986:	4964      	ldr	r1, [pc, #400]	; (8003b18 <Narwhal_Protocol+0x668>)
 8003988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800398c:	206c      	movs	r0, #108	; 0x6c
 800398e:	fb00 f303 	mul.w	r3, r0, r3
 8003992:	440b      	add	r3, r1
 8003994:	335c      	adds	r3, #92	; 0x5c
 8003996:	ed93 7a00 	vldr	s14, [r3]
 800399a:	eeb0 2a47 	vmov.f32	s4, s14
 800399e:	eddf 1a5f 	vldr	s3, [pc, #380]	; 8003b1c <Narwhal_Protocol+0x66c>
 80039a2:	eeb0 1a67 	vmov.f32	s2, s15
 80039a6:	edd7 0a1b 	vldr	s1, [r7, #108]	; 0x6c
 80039aa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80039ae:	4610      	mov	r0, r2
 80039b0:	f7fd fa53 	bl	8000e5a <Traj_Coeff_Cal>
				for (int i = 0; i < 3; i++) {
 80039b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039b8:	3301      	adds	r3, #1
 80039ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	ddb7      	ble.n	8003936 <Narwhal_Protocol+0x486>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 80039c6:	4b56      	ldr	r3, [pc, #344]	; (8003b20 <Narwhal_Protocol+0x670>)
 80039c8:	220f      	movs	r2, #15
 80039ca:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 80039cc:	4b55      	ldr	r3, [pc, #340]	; (8003b24 <Narwhal_Protocol+0x674>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 80039d2:	4b55      	ldr	r3, [pc, #340]	; (8003b28 <Narwhal_Protocol+0x678>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80039d8:	4b53      	ldr	r3, [pc, #332]	; (8003b28 <Narwhal_Protocol+0x678>)
 80039da:	22ff      	movs	r2, #255	; 0xff
 80039dc:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80039de:	2003      	movs	r0, #3
 80039e0:	f7ff fd44 	bl	800346c <SentData>
				break;
 80039e4:	e336      	b.n	8004054 <Narwhal_Protocol+0xba4>
			case 0xFD:
				/* Joint Set */
				t = 0;
 80039e6:	4b51      	ldr	r3, [pc, #324]	; (8003b2c <Narwhal_Protocol+0x67c>)
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
				float Joint[4];
				float T;
				for (int i = 0; i < 4; i++) {
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80039f4:	e027      	b.n	8003a46 <Narwhal_Protocol+0x596>
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 80039f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80039fa:	3301      	adds	r3, #1
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	4a44      	ldr	r2, [pc, #272]	; (8003b10 <Narwhal_Protocol+0x660>)
 8003a00:	5cd3      	ldrb	r3, [r2, r3]
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	3303      	adds	r3, #3
 8003a0e:	4940      	ldr	r1, [pc, #256]	; (8003b10 <Narwhal_Protocol+0x660>)
 8003a10:	5ccb      	ldrb	r3, [r1, r3]
 8003a12:	b21b      	sxth	r3, r3
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003a18:	ee07 3a90 	vmov	s15, r3
 8003a1c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a20:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8003b00 <Narwhal_Protocol+0x650>
 8003a24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003a2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	33b8      	adds	r3, #184	; 0xb8
 8003a34:	443b      	add	r3, r7
 8003a36:	3bb8      	subs	r3, #184	; 0xb8
 8003a38:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < 4; i++) {
 8003a3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a40:	3301      	adds	r3, #1
 8003a42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	ddd3      	ble.n	80039f6 <Narwhal_Protocol+0x546>
				}
				T = 0.5;
 8003a4e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003a52:	673b      	str	r3, [r7, #112]	; 0x70
				for (int i = 0; i < 4; i++) {
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a5a:	e035      	b.n	8003ac8 <Narwhal_Protocol+0x618>
					Traj_Coeff_Cal(&Traj[i], T, Joint[i],
 8003a5c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4a2a      	ldr	r2, [pc, #168]	; (8003b14 <Narwhal_Protocol+0x664>)
 8003a6a:	441a      	add	r2, r3
 8003a6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	33b8      	adds	r3, #184	; 0xb8
 8003a74:	443b      	add	r3, r7
 8003a76:	3bb8      	subs	r3, #184	; 0xb8
 8003a78:	edd3 7a00 	vldr	s15, [r3]
 8003a7c:	4926      	ldr	r1, [pc, #152]	; (8003b18 <Narwhal_Protocol+0x668>)
 8003a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a82:	206c      	movs	r0, #108	; 0x6c
 8003a84:	fb00 f303 	mul.w	r3, r0, r3
 8003a88:	440b      	add	r3, r1
 8003a8a:	3328      	adds	r3, #40	; 0x28
 8003a8c:	ed93 7a00 	vldr	s14, [r3]
 8003a90:	4921      	ldr	r1, [pc, #132]	; (8003b18 <Narwhal_Protocol+0x668>)
 8003a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a96:	206c      	movs	r0, #108	; 0x6c
 8003a98:	fb00 f303 	mul.w	r3, r0, r3
 8003a9c:	440b      	add	r3, r1
 8003a9e:	335c      	adds	r3, #92	; 0x5c
 8003aa0:	edd3 6a00 	vldr	s13, [r3]
 8003aa4:	eeb0 2a66 	vmov.f32	s4, s13
 8003aa8:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8003b1c <Narwhal_Protocol+0x66c>
 8003aac:	eeb0 1a47 	vmov.f32	s2, s14
 8003ab0:	eef0 0a67 	vmov.f32	s1, s15
 8003ab4:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8003ab8:	4610      	mov	r0, r2
 8003aba:	f7fd f9ce 	bl	8000e5a <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ac8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	ddc5      	ble.n	8003a5c <Narwhal_Protocol+0x5ac>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003ad0:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <Narwhal_Protocol+0x670>)
 8003ad2:	220f      	movs	r2, #15
 8003ad4:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003ad6:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <Narwhal_Protocol+0x674>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x03;
 8003adc:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <Narwhal_Protocol+0x678>)
 8003ade:	2203      	movs	r2, #3
 8003ae0:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <Narwhal_Protocol+0x678>)
 8003ae4:	22ff      	movs	r2, #255	; 0xff
 8003ae6:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003ae8:	2003      	movs	r0, #3
 8003aea:	f7ff fcbf 	bl	800346c <SentData>
				break;
 8003aee:	e2b1      	b.n	8004054 <Narwhal_Protocol+0xba4>
			case 0xFE:
				/* Cartesian Set */
				t = 0;
 8003af0:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <Narwhal_Protocol+0x67c>)
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++) {
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003afe:	e070      	b.n	8003be2 <Narwhal_Protocol+0x732>
 8003b00:	00000000 	.word	0x00000000
 8003b04:	408f4000 	.word	0x408f4000
 8003b08:	00000000 	.word	0x00000000
 8003b0c:	40490000 	.word	0x40490000
 8003b10:	20000084 	.word	0x20000084
 8003b14:	20000744 	.word	0x20000744
 8003b18:	200003c0 	.word	0x200003c0
 8003b1c:	00000000 	.word	0x00000000
 8003b20:	20000835 	.word	0x20000835
 8003b24:	20000837 	.word	0x20000837
 8003b28:	20000094 	.word	0x20000094
 8003b2c:	20000830 	.word	0x20000830
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b34:	3301      	adds	r3, #1
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	4abd      	ldr	r2, [pc, #756]	; (8003e30 <Narwhal_Protocol+0x980>)
 8003b3a:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003b3c:	021b      	lsls	r3, r3, #8
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003b3e:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	3303      	adds	r3, #3
 8003b48:	49b9      	ldr	r1, [pc, #740]	; (8003e30 <Narwhal_Protocol+0x980>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	b21b      	sxth	r3, r3
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003b5a:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 8003e28 <Narwhal_Protocol+0x978>
 8003b5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003b62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b66:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8003b6a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003b6e:	4613      	mov	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4aaf      	ldr	r2, [pc, #700]	; (8003e34 <Narwhal_Protocol+0x984>)
 8003b78:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 8003b7a:	49af      	ldr	r1, [pc, #700]	; (8003e38 <Narwhal_Protocol+0x988>)
 8003b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b80:	206c      	movs	r0, #108	; 0x6c
 8003b82:	fb00 f303 	mul.w	r3, r0, r3
 8003b86:	440b      	add	r3, r1
 8003b88:	3328      	adds	r3, #40	; 0x28
 8003b8a:	ed93 7a00 	vldr	s14, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8003b8e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b96:	49a8      	ldr	r1, [pc, #672]	; (8003e38 <Narwhal_Protocol+0x988>)
 8003b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b9c:	206c      	movs	r0, #108	; 0x6c
 8003b9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3328      	adds	r3, #40	; 0x28
 8003ba6:	ed93 7a00 	vldr	s14, [r3]
 8003baa:	49a3      	ldr	r1, [pc, #652]	; (8003e38 <Narwhal_Protocol+0x988>)
 8003bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bb0:	206c      	movs	r0, #108	; 0x6c
 8003bb2:	fb00 f303 	mul.w	r3, r0, r3
 8003bb6:	440b      	add	r3, r1
 8003bb8:	335c      	adds	r3, #92	; 0x5c
 8003bba:	edd3 6a00 	vldr	s13, [r3]
 8003bbe:	eeb0 2a66 	vmov.f32	s4, s13
 8003bc2:	eddf 1a9e 	vldr	s3, [pc, #632]	; 8003e3c <Narwhal_Protocol+0x98c>
 8003bc6:	eeb0 1a47 	vmov.f32	s2, s14
 8003bca:	eef0 0a67 	vmov.f32	s1, s15
 8003bce:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f7fd f941 	bl	8000e5a <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003be2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	dda2      	ble.n	8003b30 <Narwhal_Protocol+0x680>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003bea:	4b95      	ldr	r3, [pc, #596]	; (8003e40 <Narwhal_Protocol+0x990>)
 8003bec:	220f      	movs	r2, #15
 8003bee:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003bf0:	4b94      	ldr	r3, [pc, #592]	; (8003e44 <Narwhal_Protocol+0x994>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003bf6:	4b94      	ldr	r3, [pc, #592]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003bfc:	4b92      	ldr	r3, [pc, #584]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003bfe:	22ff      	movs	r2, #255	; 0xff
 8003c00:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003c02:	2003      	movs	r0, #3
 8003c04:	f7ff fc32 	bl	800346c <SentData>
				break;
 8003c08:	e224      	b.n	8004054 <Narwhal_Protocol+0xba4>
			case 0xFF:
				/* Chess Move */
				UART5_txBuffer[2] = 0x05;
 8003c0a:	4b8f      	ldr	r3, [pc, #572]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003c0c:	2205      	movs	r2, #5
 8003c0e:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003c10:	4b8d      	ldr	r3, [pc, #564]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003c12:	22ff      	movs	r2, #255	; 0xff
 8003c14:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003c16:	2003      	movs	r0, #3
 8003c18:	f7ff fc28 	bl	800346c <SentData>
				break;
 8003c1c:	e21a      	b.n	8004054 <Narwhal_Protocol+0xba4>
				/* 		Data to MCU End	*/

				/* 		Sent Data to Master Start 	*/
			case 0xA0:
				/* System Status */
				UART5_txBuffer[1] = 0xEE;
 8003c1e:	4b8a      	ldr	r3, [pc, #552]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003c20:	22ee      	movs	r2, #238	; 0xee
 8003c22:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 8003c24:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003c28:	0a1b      	lsrs	r3, r3, #8
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	4b86      	ldr	r3, [pc, #536]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003c30:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Temperature_Protocol & 0xFF);
 8003c32:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	4b83      	ldr	r3, [pc, #524]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003c3a:	70da      	strb	r2, [r3, #3]
				SentData(4);
 8003c3c:	2004      	movs	r0, #4
 8003c3e:	f7ff fc15 	bl	800346c <SentData>
				break;
 8003c42:	e207      	b.n	8004054 <Narwhal_Protocol+0xba4>
			case 0xA1:
				/* Station Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 8003c44:	4b80      	ldr	r3, [pc, #512]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003c46:	22ee      	movs	r2, #238	; 0xee
 8003c48:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Encoder[0].Position >> 8) & 0xFF);
 8003c4a:	4b80      	ldr	r3, [pc, #512]	; (8003e4c <Narwhal_Protocol+0x99c>)
 8003c4c:	89db      	ldrh	r3, [r3, #14]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	4b7c      	ldr	r3, [pc, #496]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003c56:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Encoder[0].Position & 0xFF);
 8003c58:	4b7c      	ldr	r3, [pc, #496]	; (8003e4c <Narwhal_Protocol+0x99c>)
 8003c5a:	89db      	ldrh	r3, [r3, #14]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4b7a      	ldr	r3, [pc, #488]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003c60:	70da      	strb	r2, [r3, #3]
				SentData(4);
 8003c62:	2004      	movs	r0, #4
 8003c64:	f7ff fc02 	bl	800346c <SentData>
				break;
 8003c68:	e1f4      	b.n	8004054 <Narwhal_Protocol+0xba4>
			case 0xA2:
				/* Raw Joint Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 8003c6a:	4b77      	ldr	r3, [pc, #476]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003c6c:	22ee      	movs	r2, #238	; 0xee
 8003c6e:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 8003c70:	2300      	movs	r3, #0
 8003c72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c76:	e022      	b.n	8003cbe <Narwhal_Protocol+0x80e>
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Encoder[i].Position >> 8)
 8003c78:	4a74      	ldr	r2, [pc, #464]	; (8003e4c <Narwhal_Protocol+0x99c>)
 8003c7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c7e:	015b      	lsls	r3, r3, #5
 8003c80:	4413      	add	r3, r2
 8003c82:	330e      	adds	r3, #14
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c8e:	3301      	adds	r3, #1
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	b2d1      	uxtb	r1, r2
 8003c94:	4a6c      	ldr	r2, [pc, #432]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003c96:	54d1      	strb	r1, [r2, r3]
							& 0xFF);
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Encoder[i].Position & 0xFF);
 8003c98:	4a6c      	ldr	r2, [pc, #432]	; (8003e4c <Narwhal_Protocol+0x99c>)
 8003c9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c9e:	015b      	lsls	r3, r3, #5
 8003ca0:	4413      	add	r3, r2
 8003ca2:	330e      	adds	r3, #14
 8003ca4:	881a      	ldrh	r2, [r3, #0]
 8003ca6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	3303      	adds	r3, #3
 8003cae:	b2d1      	uxtb	r1, r2
 8003cb0:	4a65      	ldr	r2, [pc, #404]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003cb2:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8003cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	ddd8      	ble.n	8003c78 <Narwhal_Protocol+0x7c8>
				}
				SentData(12);
 8003cc6:	200c      	movs	r0, #12
 8003cc8:	f7ff fbd0 	bl	800346c <SentData>
				break;
 8003ccc:	e1c2      	b.n	8004054 <Narwhal_Protocol+0xba4>
			case 0xAA:
				/* Joint Position */
				UART5_txBuffer[1] = 0xEE;
 8003cce:	4b5e      	ldr	r3, [pc, #376]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003cd0:	22ee      	movs	r2, #238	; 0xee
 8003cd2:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cda:	e02c      	b.n	8003d36 <Narwhal_Protocol+0x886>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003cdc:	4a56      	ldr	r2, [pc, #344]	; (8003e38 <Narwhal_Protocol+0x988>)
 8003cde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ce2:	216c      	movs	r1, #108	; 0x6c
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	3328      	adds	r3, #40	; 0x28
 8003cec:	edd3 7a00 	vldr	s15, [r3]
							* 1000.0f);
 8003cf0:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8003e50 <Narwhal_Protocol+0x9a0>
 8003cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cfc:	ee17 3a90 	vmov	r3, s15
 8003d00:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8003d04:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8003d08:	121b      	asrs	r3, r3, #8
 8003d0a:	b21a      	sxth	r2, r3
 8003d0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d10:	3301      	adds	r3, #1
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	b2d1      	uxtb	r1, r2
 8003d16:	4a4c      	ldr	r2, [pc, #304]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003d18:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8003d1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	3303      	adds	r3, #3
 8003d22:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003d26:	b2d1      	uxtb	r1, r2
 8003d28:	4a47      	ldr	r2, [pc, #284]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003d2a:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8003d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d30:	3301      	adds	r3, #1
 8003d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	ddce      	ble.n	8003cdc <Narwhal_Protocol+0x82c>
				}
				UART5_txBuffer[10] = 0;
 8003d3e:	4b42      	ldr	r3, [pc, #264]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	729a      	strb	r2, [r3, #10]
				UART5_txBuffer[11] = 0;
 8003d44:	4b40      	ldr	r3, [pc, #256]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	72da      	strb	r2, [r3, #11]
				SentData(12);
 8003d4a:	200c      	movs	r0, #12
 8003d4c:	f7ff fb8e 	bl	800346c <SentData>
				break;
 8003d50:	e180      	b.n	8004054 <Narwhal_Protocol+0xba4>
			case 0xAB:
				/* Task Space Position */
				UART5_txBuffer[1] = 0xEE;
 8003d52:	4b3d      	ldr	r3, [pc, #244]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003d54:	22ee      	movs	r2, #238	; 0xee
 8003d56:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */

				for (int i = 0; i < 4; i++) {
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d5e:	e014      	b.n	8003d8a <Narwhal_Protocol+0x8da>
					q_in[i] = Control[i].PositionFeedback;
 8003d60:	4a35      	ldr	r2, [pc, #212]	; (8003e38 <Narwhal_Protocol+0x988>)
 8003d62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d66:	216c      	movs	r1, #108	; 0x6c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3328      	adds	r3, #40	; 0x28
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	33b8      	adds	r3, #184	; 0xb8
 8003d7a:	443b      	add	r3, r7
 8003d7c:	3b9c      	subs	r3, #156	; 0x9c
 8003d7e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++) {
 8003d80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d84:	3301      	adds	r3, #1
 8003d86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	dde6      	ble.n	8003d60 <Narwhal_Protocol+0x8b0>
				}
				FPK(q_in, 269.0f, task);
 8003d92:	f107 0210 	add.w	r2, r7, #16
 8003d96:	f107 031c 	add.w	r3, r7, #28
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8003e54 <Narwhal_Protocol+0x9a4>
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fe fb99 	bl	80024d8 <FPK>

				for (int i = 0; i < 3; i++) {
 8003da6:	2300      	movs	r3, #0
 8003da8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003dac:	e02a      	b.n	8003e04 <Narwhal_Protocol+0x954>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 8003dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	33b8      	adds	r3, #184	; 0xb8
 8003db6:	443b      	add	r3, r7
 8003db8:	3ba8      	subs	r3, #168	; 0xa8
 8003dba:	edd3 7a00 	vldr	s15, [r3]
 8003dbe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dca:	ee17 3a90 	vmov	r3, s15
 8003dce:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8003dd2:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8003dd6:	121b      	asrs	r3, r3, #8
 8003dd8:	b21a      	sxth	r2, r3
 8003dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dde:	3301      	adds	r3, #1
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	b2d1      	uxtb	r1, r2
 8003de4:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003de6:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8003de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	3303      	adds	r3, #3
 8003df0:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8003df4:	b2d1      	uxtb	r1, r2
 8003df6:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003df8:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 8003dfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dfe:	3301      	adds	r3, #1
 8003e00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	ddd0      	ble.n	8003dae <Narwhal_Protocol+0x8fe>
				}
				SentData(8);
 8003e0c:	2008      	movs	r0, #8
 8003e0e:	f7ff fb2d 	bl	800346c <SentData>
				break;
 8003e12:	e11f      	b.n	8004054 <Narwhal_Protocol+0xba4>
			case 0xAF:
				/* UI Feedback */
				UART5_txBuffer[1] = 0xEE;
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <Narwhal_Protocol+0x998>)
 8003e16:	22ee      	movs	r2, #238	; 0xee
 8003e18:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */
				for (int i = 0; i < 4; i++) {
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e20:	e02f      	b.n	8003e82 <Narwhal_Protocol+0x9d2>
 8003e22:	bf00      	nop
 8003e24:	f3af 8000 	nop.w
 8003e28:	00000000 	.word	0x00000000
 8003e2c:	408f4000 	.word	0x408f4000
 8003e30:	20000084 	.word	0x20000084
 8003e34:	20000744 	.word	0x20000744
 8003e38:	200003c0 	.word	0x200003c0
 8003e3c:	00000000 	.word	0x00000000
 8003e40:	20000835 	.word	0x20000835
 8003e44:	20000837 	.word	0x20000837
 8003e48:	20000094 	.word	0x20000094
 8003e4c:	200002a0 	.word	0x200002a0
 8003e50:	447a0000 	.word	0x447a0000
 8003e54:	43868000 	.word	0x43868000
					q_in[i] = Control[i].PositionFeedback;
 8003e58:	4a83      	ldr	r2, [pc, #524]	; (8004068 <Narwhal_Protocol+0xbb8>)
 8003e5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e5e:	216c      	movs	r1, #108	; 0x6c
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	3328      	adds	r3, #40	; 0x28
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	33b8      	adds	r3, #184	; 0xb8
 8003e72:	443b      	add	r3, r7
 8003e74:	3b9c      	subs	r3, #156	; 0x9c
 8003e76:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++) {
 8003e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	dde6      	ble.n	8003e58 <Narwhal_Protocol+0x9a8>
				}
				FPK(q_in, 269.0f, task);
 8003e8a:	f107 0210 	add.w	r2, r7, #16
 8003e8e:	f107 031c 	add.w	r3, r7, #28
 8003e92:	4611      	mov	r1, r2
 8003e94:	ed9f 0a75 	vldr	s0, [pc, #468]	; 800406c <Narwhal_Protocol+0xbbc>
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe fb1d 	bl	80024d8 <FPK>

				/* Station Encoder */
				UART5_txBuffer[2] = (uint8_t) ((Encoder[0].Position >> 8) & 0xFF);
 8003e9e:	4b74      	ldr	r3, [pc, #464]	; (8004070 <Narwhal_Protocol+0xbc0>)
 8003ea0:	89db      	ldrh	r3, [r3, #14]
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	4b72      	ldr	r3, [pc, #456]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8003eaa:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Encoder[0].Position & 0xFF);
 8003eac:	4b70      	ldr	r3, [pc, #448]	; (8004070 <Narwhal_Protocol+0xbc0>)
 8003eae:	89db      	ldrh	r3, [r3, #14]
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4b70      	ldr	r3, [pc, #448]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8003eb4:	70da      	strb	r2, [r3, #3]

				/* Temp */
				UART5_txBuffer[4] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 8003eb6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	4b6c      	ldr	r3, [pc, #432]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8003ec2:	711a      	strb	r2, [r3, #4]
				UART5_txBuffer[5] = (uint8_t) (Temperature_Protocol & 0xFF);
 8003ec4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	4b6a      	ldr	r3, [pc, #424]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8003ecc:	715a      	strb	r2, [r3, #5]
				UART5_txBuffer[6] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 8003ece:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	4b66      	ldr	r3, [pc, #408]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8003eda:	719a      	strb	r2, [r3, #6]
				UART5_txBuffer[7] = (uint8_t) (Temperature_Protocol & 0xFF);
 8003edc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	4b64      	ldr	r3, [pc, #400]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8003ee4:	71da      	strb	r2, [r3, #7]

				/* Joint Current */
				for (int i = 0; i < 4; i++) {
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003eec:	e02c      	b.n	8003f48 <Narwhal_Protocol+0xa98>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003eee:	4a5e      	ldr	r2, [pc, #376]	; (8004068 <Narwhal_Protocol+0xbb8>)
 8003ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ef4:	216c      	movs	r1, #108	; 0x6c
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	3328      	adds	r3, #40	; 0x28
 8003efe:	edd3 7a00 	vldr	s15, [r3]
							* 1000.0f);
 8003f02:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8004078 <Narwhal_Protocol+0xbc8>
 8003f06:	ee67 7a87 	vmul.f32	s15, s15, s14
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f0e:	ee17 3a90 	vmov	r3, s15
 8003f12:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
					UART5_txBuffer[8 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8003f16:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8003f1a:	121b      	asrs	r3, r3, #8
 8003f1c:	b21a      	sxth	r2, r3
 8003f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f22:	3304      	adds	r3, #4
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	b2d1      	uxtb	r1, r2
 8003f28:	4a52      	ldr	r2, [pc, #328]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8003f2a:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[9 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8003f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	3309      	adds	r3, #9
 8003f34:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003f38:	b2d1      	uxtb	r1, r2
 8003f3a:	4a4e      	ldr	r2, [pc, #312]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8003f3c:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8003f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f42:	3301      	adds	r3, #1
 8003f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	ddce      	ble.n	8003eee <Narwhal_Protocol+0xa3e>
				}
				UART5_txBuffer[16] = 0;
 8003f50:	4b48      	ldr	r3, [pc, #288]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	741a      	strb	r2, [r3, #16]
				UART5_txBuffer[17] = 0;
 8003f56:	4b47      	ldr	r3, [pc, #284]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	745a      	strb	r2, [r3, #17]

				/* Joint Set point*/
				for (int i = 0; i < 4; i++) {
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f62:	e029      	b.n	8003fb8 <Narwhal_Protocol+0xb08>
					int16_t Buf = (int16_t) (SetPoint_Position[i] * 1000.0f);
 8003f64:	4a45      	ldr	r2, [pc, #276]	; (800407c <Narwhal_Protocol+0xbcc>)
 8003f66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	edd3 7a00 	vldr	s15, [r3]
 8003f72:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8004078 <Narwhal_Protocol+0xbc8>
 8003f76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f7e:	ee17 3a90 	vmov	r3, s15
 8003f82:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
					UART5_txBuffer[18 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8003f86:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8003f8a:	121b      	asrs	r3, r3, #8
 8003f8c:	b21a      	sxth	r2, r3
 8003f8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f92:	3309      	adds	r3, #9
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	b2d1      	uxtb	r1, r2
 8003f98:	4a36      	ldr	r2, [pc, #216]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8003f9a:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[19 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8003f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	3313      	adds	r3, #19
 8003fa4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8003fa8:	b2d1      	uxtb	r1, r2
 8003faa:	4a32      	ldr	r2, [pc, #200]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8003fac:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8003fae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	ddd1      	ble.n	8003f64 <Narwhal_Protocol+0xab4>
				}
				UART5_txBuffer[26] = 0;
 8003fc0:	4b2c      	ldr	r3, [pc, #176]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	769a      	strb	r2, [r3, #26]
				UART5_txBuffer[27] = 0;
 8003fc6:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	76da      	strb	r2, [r3, #27]

				for (int i = 0; i < 3; i++) {
 8003fcc:	2300      	movs	r3, #0
 8003fce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fd0:	e025      	b.n	800401e <Narwhal_Protocol+0xb6e>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 8003fd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	33b8      	adds	r3, #184	; 0xb8
 8003fd8:	443b      	add	r3, r7
 8003fda:	3ba8      	subs	r3, #168	; 0xa8
 8003fdc:	edd3 7a00 	vldr	s15, [r3]
 8003fe0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fec:	ee17 3a90 	vmov	r3, s15
 8003ff0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
					UART5_txBuffer[28 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8003ff4:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8003ff8:	121b      	asrs	r3, r3, #8
 8003ffa:	b21a      	sxth	r2, r3
 8003ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ffe:	330e      	adds	r3, #14
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	b2d1      	uxtb	r1, r2
 8004004:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8004006:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[29 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8004008:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	331d      	adds	r3, #29
 800400e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004012:	b2d1      	uxtb	r1, r2
 8004014:	4a17      	ldr	r2, [pc, #92]	; (8004074 <Narwhal_Protocol+0xbc4>)
 8004016:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 8004018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800401a:	3301      	adds	r3, #1
 800401c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800401e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004020:	2b02      	cmp	r3, #2
 8004022:	ddd6      	ble.n	8003fd2 <Narwhal_Protocol+0xb22>
				}
				SentData(34);
 8004024:	2022      	movs	r0, #34	; 0x22
 8004026:	f7ff fa21 	bl	800346c <SentData>
				break;
 800402a:	e013      	b.n	8004054 <Narwhal_Protocol+0xba4>
			default:
				UART5_txBuffer[2] = 0xFF;
 800402c:	4b11      	ldr	r3, [pc, #68]	; (8004074 <Narwhal_Protocol+0xbc4>)
 800402e:	22ff      	movs	r2, #255	; 0xff
 8004030:	709a      	strb	r2, [r3, #2]
				SentData(3);
 8004032:	2003      	movs	r0, #3
 8004034:	f7ff fa1a 	bl	800346c <SentData>
 8004038:	e00c      	b.n	8004054 <Narwhal_Protocol+0xba4>
				/* 		Sent Data to Master End 	*/
			}
		} else {
			/*		CRC Error		*/
			UART5_txBuffer[1] = 0xCC;
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <Narwhal_Protocol+0xbc4>)
 800403c:	22cc      	movs	r2, #204	; 0xcc
 800403e:	705a      	strb	r2, [r3, #1]
			SentData(3);
 8004040:	2003      	movs	r0, #3
 8004042:	f7ff fa13 	bl	800346c <SentData>
 8004046:	e005      	b.n	8004054 <Narwhal_Protocol+0xba4>
		}
	} else {
		/*		Header Error	*/
		UART5_txBuffer[1] = 0xAA;
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <Narwhal_Protocol+0xbc4>)
 800404a:	22aa      	movs	r2, #170	; 0xaa
 800404c:	705a      	strb	r2, [r3, #1]
		SentData(3);
 800404e:	2003      	movs	r0, #3
 8004050:	f7ff fa0c 	bl	800346c <SentData>
	}
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 8004054:	220e      	movs	r2, #14
 8004056:	490a      	ldr	r1, [pc, #40]	; (8004080 <Narwhal_Protocol+0xbd0>)
 8004058:	480a      	ldr	r0, [pc, #40]	; (8004084 <Narwhal_Protocol+0xbd4>)
 800405a:	f00f f81f 	bl	801309c <HAL_UART_Receive_IT>
}
 800405e:	bf00      	nop
 8004060:	37b8      	adds	r7, #184	; 0xb8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	200003c0 	.word	0x200003c0
 800406c:	43868000 	.word	0x43868000
 8004070:	200002a0 	.word	0x200002a0
 8004074:	20000094 	.word	0x20000094
 8004078:	447a0000 	.word	0x447a0000
 800407c:	20000808 	.word	0x20000808
 8004080:	20000084 	.word	0x20000084
 8004084:	20000e20 	.word	0x20000e20

08004088 <Control_Function>:
	}
	Traj_Flag = 0x0F;
	Chessmove_State = 0;
}

inline void Control_Function() {
 8004088:	b590      	push	{r4, r7, lr}
 800408a:	b0a3      	sub	sp, #140	; 0x8c
 800408c:	af00      	add	r7, sp, #0
	/***** Encoder Read *****/
	float J1, J2, J3, J4;
	J1 = EncPulse2Rad_Read(&Encoder[0], 1);
 800408e:	2101      	movs	r1, #1
 8004090:	48a3      	ldr	r0, [pc, #652]	; (8004320 <Control_Function+0x298>)
 8004092:	f7fc fabf 	bl	8000614 <EncPulse2Rad_Read>
 8004096:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
	J2 = EncPulse2Rad_Read(&Encoder[1], 0);
 800409a:	2100      	movs	r1, #0
 800409c:	48a1      	ldr	r0, [pc, #644]	; (8004324 <Control_Function+0x29c>)
 800409e:	f7fc fab9 	bl	8000614 <EncPulse2Rad_Read>
 80040a2:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	J3 = EncPulse2Rad_Read(&Encoder[2], 0);
 80040a6:	2100      	movs	r1, #0
 80040a8:	489f      	ldr	r0, [pc, #636]	; (8004328 <Control_Function+0x2a0>)
 80040aa:	f7fc fab3 	bl	8000614 <EncPulse2Rad_Read>
 80040ae:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	J4 = EncPulse2Rad_Read(&Encoder[3], 0);
 80040b2:	2100      	movs	r1, #0
 80040b4:	489d      	ldr	r0, [pc, #628]	; (800432c <Control_Function+0x2a4>)
 80040b6:	f7fc faad 	bl	8000614 <EncPulse2Rad_Read>
 80040ba:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c

	/***** Joint Space SetPoint Gen *****/
	if (Chessmove_State == 0) {
 80040be:	4b9c      	ldr	r3, [pc, #624]	; (8004330 <Control_Function+0x2a8>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f040 808f 	bne.w	80041e6 <Control_Function+0x15e>
		if (Traj_Flag & 0x0F) {
 80040c8:	4b9a      	ldr	r3, [pc, #616]	; (8004334 <Control_Function+0x2ac>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8164 	beq.w	800439e <Control_Function+0x316>
			float traj_t_set[5];
			traj_t_set[0] = t;
 80040d6:	4b98      	ldr	r3, [pc, #608]	; (8004338 <Control_Function+0x2b0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	65bb      	str	r3, [r7, #88]	; 0x58
			traj_t_set[1] = t * t;
 80040dc:	4b96      	ldr	r3, [pc, #600]	; (8004338 <Control_Function+0x2b0>)
 80040de:	ed93 7a00 	vldr	s14, [r3]
 80040e2:	4b95      	ldr	r3, [pc, #596]	; (8004338 <Control_Function+0x2b0>)
 80040e4:	edd3 7a00 	vldr	s15, [r3]
 80040e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ec:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			traj_t_set[2] = traj_t_set[1] * t;
 80040f0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80040f4:	4b90      	ldr	r3, [pc, #576]	; (8004338 <Control_Function+0x2b0>)
 80040f6:	edd3 7a00 	vldr	s15, [r3]
 80040fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			traj_t_set[3] = traj_t_set[2] * t;
 8004102:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004106:	4b8c      	ldr	r3, [pc, #560]	; (8004338 <Control_Function+0x2b0>)
 8004108:	edd3 7a00 	vldr	s15, [r3]
 800410c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004110:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			traj_t_set[4] = traj_t_set[3] * t;
 8004114:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8004118:	4b87      	ldr	r3, [pc, #540]	; (8004338 <Control_Function+0x2b0>)
 800411a:	edd3 7a00 	vldr	s15, [r3]
 800411e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004122:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
			for (int i = 0; i < 4; i++) {
 8004126:	2300      	movs	r3, #0
 8004128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800412c:	e048      	b.n	80041c0 <Control_Function+0x138>
				if (Traj_Flag & (0x01 << i)) {
 800412e:	4b81      	ldr	r3, [pc, #516]	; (8004334 <Control_Function+0x2ac>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004138:	fa42 f303 	asr.w	r3, r2, r3
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d038      	beq.n	80041b6 <Control_Function+0x12e>
					TrajFollow(&Traj[i], traj_t_set, &SetPoint_Position[i],
 8004144:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4a7a      	ldr	r2, [pc, #488]	; (800433c <Control_Function+0x2b4>)
 8004152:	1898      	adds	r0, r3, r2
 8004154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4a79      	ldr	r2, [pc, #484]	; (8004340 <Control_Function+0x2b8>)
 800415c:	441a      	add	r2, r3
 800415e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4977      	ldr	r1, [pc, #476]	; (8004344 <Control_Function+0x2bc>)
 8004166:	440b      	add	r3, r1
 8004168:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800416c:	f7fc ff1d 	bl	8000faa <TrajFollow>
							&SetPoint_Velocity[i]);
					if (t >= Traj[i].T) {
 8004170:	4972      	ldr	r1, [pc, #456]	; (800433c <Control_Function+0x2b4>)
 8004172:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004176:	4613      	mov	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	3318      	adds	r3, #24
 8004182:	ed93 7a00 	vldr	s14, [r3]
 8004186:	4b6c      	ldr	r3, [pc, #432]	; (8004338 <Control_Function+0x2b0>)
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004194:	d80f      	bhi.n	80041b6 <Control_Function+0x12e>
						Traj_Flag &= ((0x01 << i) ^ 0xFF);
 8004196:	2201      	movs	r2, #1
 8004198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	b25b      	sxtb	r3, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	b25a      	sxtb	r2, r3
 80041a6:	4b63      	ldr	r3, [pc, #396]	; (8004334 <Control_Function+0x2ac>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	b25b      	sxtb	r3, r3
 80041ac:	4013      	ands	r3, r2
 80041ae:	b25b      	sxtb	r3, r3
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	4b60      	ldr	r3, [pc, #384]	; (8004334 <Control_Function+0x2ac>)
 80041b4:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 80041b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041ba:	3301      	adds	r3, #1
 80041bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	ddb2      	ble.n	800412e <Control_Function+0xa6>
					}
				}
			}
			t += delta_t;
 80041c8:	4b5b      	ldr	r3, [pc, #364]	; (8004338 <Control_Function+0x2b0>)
 80041ca:	edd3 7a00 	vldr	s15, [r3]
 80041ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041d2:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8004318 <Control_Function+0x290>
 80041d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80041da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80041de:	4b56      	ldr	r3, [pc, #344]	; (8004338 <Control_Function+0x2b0>)
 80041e0:	edc3 7a00 	vstr	s15, [r3]
 80041e4:	e0db      	b.n	800439e <Control_Function+0x316>
		}
	}

	else if (Chessmove_State == 1) {
 80041e6:	4b52      	ldr	r3, [pc, #328]	; (8004330 <Control_Function+0x2a8>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	f040 80d7 	bne.w	800439e <Control_Function+0x316>
		if (Traj_Flag & 0x0F) {
 80041f0:	4b50      	ldr	r3, [pc, #320]	; (8004334 <Control_Function+0x2ac>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80d0 	beq.w	800439e <Control_Function+0x316>
			float gamma[3] = { 1, 1, -1 };
 80041fe:	4a52      	ldr	r2, [pc, #328]	; (8004348 <Control_Function+0x2c0>)
 8004200:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004204:	ca07      	ldmia	r2, {r0, r1, r2}
 8004206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			//*********** Chi Output ************//
			float SetPointPosition[4];
			float SetPointVelocity[4];

			float traj_t_set[5];
			traj_t_set[0] = t;
 800420a:	4b4b      	ldr	r3, [pc, #300]	; (8004338 <Control_Function+0x2b0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	603b      	str	r3, [r7, #0]
			traj_t_set[1] = t * t;
 8004210:	4b49      	ldr	r3, [pc, #292]	; (8004338 <Control_Function+0x2b0>)
 8004212:	ed93 7a00 	vldr	s14, [r3]
 8004216:	4b48      	ldr	r3, [pc, #288]	; (8004338 <Control_Function+0x2b0>)
 8004218:	edd3 7a00 	vldr	s15, [r3]
 800421c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004220:	edc7 7a01 	vstr	s15, [r7, #4]
			traj_t_set[2] = traj_t_set[1] * t;
 8004224:	ed97 7a01 	vldr	s14, [r7, #4]
 8004228:	4b43      	ldr	r3, [pc, #268]	; (8004338 <Control_Function+0x2b0>)
 800422a:	edd3 7a00 	vldr	s15, [r3]
 800422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004232:	edc7 7a02 	vstr	s15, [r7, #8]
			traj_t_set[3] = traj_t_set[2] * t;
 8004236:	ed97 7a02 	vldr	s14, [r7, #8]
 800423a:	4b3f      	ldr	r3, [pc, #252]	; (8004338 <Control_Function+0x2b0>)
 800423c:	edd3 7a00 	vldr	s15, [r3]
 8004240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004244:	edc7 7a03 	vstr	s15, [r7, #12]
			traj_t_set[4] = traj_t_set[3] * t;
 8004248:	ed97 7a03 	vldr	s14, [r7, #12]
 800424c:	4b3a      	ldr	r3, [pc, #232]	; (8004338 <Control_Function+0x2b0>)
 800424e:	edd3 7a00 	vldr	s15, [r3]
 8004252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004256:	edc7 7a04 	vstr	s15, [r7, #16]
			for (int i = 4; i < 7; i++) {
 800425a:	2304      	movs	r3, #4
 800425c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004260:	e03f      	b.n	80042e2 <Control_Function+0x25a>
				TrajFollow(&Traj[i], traj_t_set, &Chi_t[i], &ChiDot_t[i]);
 8004262:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4a33      	ldr	r2, [pc, #204]	; (800433c <Control_Function+0x2b4>)
 8004270:	1898      	adds	r0, r3, r2
 8004272:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004276:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	18d4      	adds	r4, r2, r3
 800427e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004282:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	4639      	mov	r1, r7
 800428c:	4622      	mov	r2, r4
 800428e:	f7fc fe8c 	bl	8000faa <TrajFollow>
				if (t >= Traj[i].T) {
 8004292:	492a      	ldr	r1, [pc, #168]	; (800433c <Control_Function+0x2b4>)
 8004294:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	3318      	adds	r3, #24
 80042a4:	ed93 7a00 	vldr	s14, [r3]
 80042a8:	4b23      	ldr	r3, [pc, #140]	; (8004338 <Control_Function+0x2b0>)
 80042aa:	edd3 7a00 	vldr	s15, [r3]
 80042ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b6:	d80f      	bhi.n	80042d8 <Control_Function+0x250>
					Traj_Flag &= ((0x01 << i) ^ 0xFF);
 80042b8:	2201      	movs	r2, #1
 80042ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	b25b      	sxtb	r3, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	b25a      	sxtb	r2, r3
 80042c8:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <Control_Function+0x2ac>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b25b      	sxtb	r3, r3
 80042ce:	4013      	ands	r3, r2
 80042d0:	b25b      	sxtb	r3, r3
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	4b17      	ldr	r3, [pc, #92]	; (8004334 <Control_Function+0x2ac>)
 80042d6:	701a      	strb	r2, [r3, #0]
			for (int i = 4; i < 7; i++) {
 80042d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042dc:	3301      	adds	r3, #1
 80042de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	ddbb      	ble.n	8004262 <Control_Function+0x1da>
				}
			}
			IPK(gamma, Chi_t, SetPointPosition);
 80042ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80042ee:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80042f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd fca6 	bl	8001c48 <IPK>
			IVK(SetPointPosition, ChiDot_t, SetPointVelocity);
 80042fc:	f107 0214 	add.w	r2, r7, #20
 8004300:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8004304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004308:	4618      	mov	r0, r3
 800430a:	f7fd fe01 	bl	8001f10 <IVK>
			for (int i = 0; i < 4; i++) {
 800430e:	2300      	movs	r3, #0
 8004310:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004312:	e033      	b.n	800437c <Control_Function+0x2f4>
 8004314:	f3af 8000 	nop.w
 8004318:	d2f1a9fc 	.word	0xd2f1a9fc
 800431c:	3f50624d 	.word	0x3f50624d
 8004320:	200002a0 	.word	0x200002a0
 8004324:	200002c0 	.word	0x200002c0
 8004328:	200002e0 	.word	0x200002e0
 800432c:	20000300 	.word	0x20000300
 8004330:	20000837 	.word	0x20000837
 8004334:	20000835 	.word	0x20000835
 8004338:	20000830 	.word	0x20000830
 800433c:	20000744 	.word	0x20000744
 8004340:	20000808 	.word	0x20000808
 8004344:	2000081c 	.word	0x2000081c
 8004348:	08016bc8 	.word	0x08016bc8
				TrajFollow(&Traj[i], traj_t_set, &SetPointPosition[i],
 800434c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4a46      	ldr	r2, [pc, #280]	; (8004470 <Control_Function+0x3e8>)
 8004358:	1898      	adds	r0, r3, r2
 800435a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800435e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	18d4      	adds	r4, r2, r3
 8004364:	f107 0214 	add.w	r2, r7, #20
 8004368:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	4639      	mov	r1, r7
 8004370:	4622      	mov	r2, r4
 8004372:	f7fc fe1a 	bl	8000faa <TrajFollow>
			for (int i = 0; i < 4; i++) {
 8004376:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004378:	3301      	adds	r3, #1
 800437a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800437c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800437e:	2b03      	cmp	r3, #3
 8004380:	dde4      	ble.n	800434c <Control_Function+0x2c4>
						&SetPointVelocity[i]);
			}
			t += delta_t;
 8004382:	4b3c      	ldr	r3, [pc, #240]	; (8004474 <Control_Function+0x3ec>)
 8004384:	edd3 7a00 	vldr	s15, [r3]
 8004388:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800438c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8004468 <Control_Function+0x3e0>
 8004390:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004394:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004398:	4b36      	ldr	r3, [pc, #216]	; (8004474 <Control_Function+0x3ec>)
 800439a:	edc3 7a00 	vstr	s15, [r3]
		}
	}

	CascadeControl(&Control[0], &Kalman[0], J1, SetPoint_Position[0], SetPoint_Velocity[0]);
 800439e:	4b36      	ldr	r3, [pc, #216]	; (8004478 <Control_Function+0x3f0>)
 80043a0:	edd3 7a00 	vldr	s15, [r3]
 80043a4:	4b35      	ldr	r3, [pc, #212]	; (800447c <Control_Function+0x3f4>)
 80043a6:	ed93 7a00 	vldr	s14, [r3]
 80043aa:	eeb0 1a47 	vmov.f32	s2, s14
 80043ae:	eef0 0a67 	vmov.f32	s1, s15
 80043b2:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 80043b6:	4932      	ldr	r1, [pc, #200]	; (8004480 <Control_Function+0x3f8>)
 80043b8:	4832      	ldr	r0, [pc, #200]	; (8004484 <Control_Function+0x3fc>)
 80043ba:	f7fd f973 	bl	80016a4 <CascadeControl>
	CascadeControl(&Control[1], &Kalman[1], J2, SetPoint_Position[1], SetPoint_Velocity[1]);
 80043be:	4b2e      	ldr	r3, [pc, #184]	; (8004478 <Control_Function+0x3f0>)
 80043c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80043c4:	4b2d      	ldr	r3, [pc, #180]	; (800447c <Control_Function+0x3f4>)
 80043c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80043ca:	eeb0 1a47 	vmov.f32	s2, s14
 80043ce:	eef0 0a67 	vmov.f32	s1, s15
 80043d2:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 80043d6:	492c      	ldr	r1, [pc, #176]	; (8004488 <Control_Function+0x400>)
 80043d8:	482c      	ldr	r0, [pc, #176]	; (800448c <Control_Function+0x404>)
 80043da:	f7fd f963 	bl	80016a4 <CascadeControl>
	CascadeControl(&Control[2], &Kalman[2], J3, SetPoint_Position[2], SetPoint_Velocity[2]);
 80043de:	4b26      	ldr	r3, [pc, #152]	; (8004478 <Control_Function+0x3f0>)
 80043e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80043e4:	4b25      	ldr	r3, [pc, #148]	; (800447c <Control_Function+0x3f4>)
 80043e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80043ea:	eeb0 1a47 	vmov.f32	s2, s14
 80043ee:	eef0 0a67 	vmov.f32	s1, s15
 80043f2:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 80043f6:	4926      	ldr	r1, [pc, #152]	; (8004490 <Control_Function+0x408>)
 80043f8:	4826      	ldr	r0, [pc, #152]	; (8004494 <Control_Function+0x40c>)
 80043fa:	f7fd f953 	bl	80016a4 <CascadeControl>
	CascadeControl(&Control[3], &Kalman[3], J4, SetPoint_Position[3], SetPoint_Velocity[3]);
 80043fe:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <Control_Function+0x3f0>)
 8004400:	edd3 7a03 	vldr	s15, [r3, #12]
 8004404:	4b1d      	ldr	r3, [pc, #116]	; (800447c <Control_Function+0x3f4>)
 8004406:	ed93 7a03 	vldr	s14, [r3, #12]
 800440a:	eeb0 1a47 	vmov.f32	s2, s14
 800440e:	eef0 0a67 	vmov.f32	s1, s15
 8004412:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8004416:	4920      	ldr	r1, [pc, #128]	; (8004498 <Control_Function+0x410>)
 8004418:	4820      	ldr	r0, [pc, #128]	; (800449c <Control_Function+0x414>)
 800441a:	f7fd f943 	bl	80016a4 <CascadeControl>

	Step_Driver(&Stepper[0], Control[0].Output);
 800441e:	4b19      	ldr	r3, [pc, #100]	; (8004484 <Control_Function+0x3fc>)
 8004420:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8004424:	eeb0 0a67 	vmov.f32	s0, s15
 8004428:	481d      	ldr	r0, [pc, #116]	; (80044a0 <Control_Function+0x418>)
 800442a:	f7fc fc9d 	bl	8000d68 <Step_Driver>
	Step_Driver(&Stepper[1], Control[1].Output);
 800442e:	4b15      	ldr	r3, [pc, #84]	; (8004484 <Control_Function+0x3fc>)
 8004430:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8004434:	eeb0 0a67 	vmov.f32	s0, s15
 8004438:	481a      	ldr	r0, [pc, #104]	; (80044a4 <Control_Function+0x41c>)
 800443a:	f7fc fc95 	bl	8000d68 <Step_Driver>
	Step_Driver(&Stepper[2], Control[2].Output);
 800443e:	4b11      	ldr	r3, [pc, #68]	; (8004484 <Control_Function+0x3fc>)
 8004440:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8004444:	eeb0 0a67 	vmov.f32	s0, s15
 8004448:	4817      	ldr	r0, [pc, #92]	; (80044a8 <Control_Function+0x420>)
 800444a:	f7fc fc8d 	bl	8000d68 <Step_Driver>
	Step_Driver(&Stepper[3], Control[3].Output);
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <Control_Function+0x3fc>)
 8004450:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 8004454:	eeb0 0a67 	vmov.f32	s0, s15
 8004458:	4814      	ldr	r0, [pc, #80]	; (80044ac <Control_Function+0x424>)
 800445a:	f7fc fc85 	bl	8000d68 <Step_Driver>
}
 800445e:	bf00      	nop
 8004460:	378c      	adds	r7, #140	; 0x8c
 8004462:	46bd      	mov	sp, r7
 8004464:	bd90      	pop	{r4, r7, pc}
 8004466:	bf00      	nop
 8004468:	d2f1a9fc 	.word	0xd2f1a9fc
 800446c:	3f50624d 	.word	0x3f50624d
 8004470:	20000744 	.word	0x20000744
 8004474:	20000830 	.word	0x20000830
 8004478:	20000808 	.word	0x20000808
 800447c:	2000081c 	.word	0x2000081c
 8004480:	20000320 	.word	0x20000320
 8004484:	200003c0 	.word	0x200003c0
 8004488:	20000340 	.word	0x20000340
 800448c:	2000042c 	.word	0x2000042c
 8004490:	20000360 	.word	0x20000360
 8004494:	20000498 	.word	0x20000498
 8004498:	20000380 	.word	0x20000380
 800449c:	20000504 	.word	0x20000504
 80044a0:	20000570 	.word	0x20000570
 80044a4:	20000584 	.word	0x20000584
 80044a8:	20000598 	.word	0x20000598
 80044ac:	200005ac 	.word	0x200005ac

080044b0 <JMoveTaskSpace>:

inline void JMoveTaskSpace(float Task2Go[3], float Time2Move){
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	; 0x28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	ed87 0a00 	vstr	s0, [r7]
	float gamma[3] = { 1, 1, -1 };
 80044bc:	4a28      	ldr	r2, [pc, #160]	; (8004560 <JMoveTaskSpace+0xb0>)
 80044be:	f107 0318 	add.w	r3, r7, #24
 80044c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80044c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float q_inv[4];
	IPK(gamma, Task2Go, q_inv);
 80044c8:	f107 0208 	add.w	r2, r7, #8
 80044cc:	f107 0318 	add.w	r3, r7, #24
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd fbb8 	bl	8001c48 <IPK>
	t = 0;
 80044d8:	4b22      	ldr	r3, [pc, #136]	; (8004564 <JMoveTaskSpace+0xb4>)
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 80044e0:	2300      	movs	r3, #0
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
 80044e4:	e02f      	b.n	8004546 <JMoveTaskSpace+0x96>
		Traj_Coeff_Cal(&Traj[i], Time2Move, q_inv[i], Control[i].PositionFeedback, 0,
 80044e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4a1d      	ldr	r2, [pc, #116]	; (8004568 <JMoveTaskSpace+0xb8>)
 80044f2:	441a      	add	r2, r3
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	3328      	adds	r3, #40	; 0x28
 80044fa:	443b      	add	r3, r7
 80044fc:	3b20      	subs	r3, #32
 80044fe:	edd3 7a00 	vldr	s15, [r3]
 8004502:	491a      	ldr	r1, [pc, #104]	; (800456c <JMoveTaskSpace+0xbc>)
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	206c      	movs	r0, #108	; 0x6c
 8004508:	fb00 f303 	mul.w	r3, r0, r3
 800450c:	440b      	add	r3, r1
 800450e:	3328      	adds	r3, #40	; 0x28
 8004510:	ed93 7a00 	vldr	s14, [r3]
 8004514:	4915      	ldr	r1, [pc, #84]	; (800456c <JMoveTaskSpace+0xbc>)
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	206c      	movs	r0, #108	; 0x6c
 800451a:	fb00 f303 	mul.w	r3, r0, r3
 800451e:	440b      	add	r3, r1
 8004520:	335c      	adds	r3, #92	; 0x5c
 8004522:	edd3 6a00 	vldr	s13, [r3]
 8004526:	eeb0 2a66 	vmov.f32	s4, s13
 800452a:	eddf 1a11 	vldr	s3, [pc, #68]	; 8004570 <JMoveTaskSpace+0xc0>
 800452e:	eeb0 1a47 	vmov.f32	s2, s14
 8004532:	eef0 0a67 	vmov.f32	s1, s15
 8004536:	ed97 0a00 	vldr	s0, [r7]
 800453a:	4610      	mov	r0, r2
 800453c:	f7fc fc8d 	bl	8000e5a <Traj_Coeff_Cal>
	for (int i = 0; i < 4; i++) {
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	3301      	adds	r3, #1
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	2b03      	cmp	r3, #3
 800454a:	ddcc      	ble.n	80044e6 <JMoveTaskSpace+0x36>
				Control[i].VelocityFeedback);
	}
	Traj_Flag = 0x0F;
 800454c:	4b09      	ldr	r3, [pc, #36]	; (8004574 <JMoveTaskSpace+0xc4>)
 800454e:	220f      	movs	r2, #15
 8004550:	701a      	strb	r2, [r3, #0]
	Chessmove_State = 0;
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <JMoveTaskSpace+0xc8>)
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
}
 8004558:	bf00      	nop
 800455a:	3728      	adds	r7, #40	; 0x28
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	08016bc8 	.word	0x08016bc8
 8004564:	20000830 	.word	0x20000830
 8004568:	20000744 	.word	0x20000744
 800456c:	200003c0 	.word	0x200003c0
 8004570:	00000000 	.word	0x00000000
 8004574:	20000835 	.word	0x20000835
 8004578:	20000837 	.word	0x20000837

0800457c <ChessNotMovePathWay>:
	}
	Traj_Flag = 0x0F;
	Chessmove_State = 1; // Change to TaskSpace Traj
}

inline void ChessNotMovePathWay(uint8_t Index2Move, float Z_Offset, uint8_t IsJMove) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	ed87 0a00 	vstr	s0, [r7]
 8004588:	460a      	mov	r2, r1
 800458a:	71fb      	strb	r3, [r7, #7]
 800458c:	4613      	mov	r3, r2
 800458e:	71bb      	strb	r3, [r7, #6]
	float BaseEnc;
	float PositionXY[2];

	/***** Base Encoder Read *****/
//	BaseEnc = BaseENCRead();   //?????????????????????????????????????????????????????????
	BaseEnc = 0;
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
	ChessPose(Index2Move, BaseEnc, PositionXY);
 8004596:	f107 0214 	add.w	r2, r7, #20
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	4611      	mov	r1, r2
 800459e:	ed97 0a07 	vldr	s0, [r7, #28]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fe fa46 	bl	8002a34 <ChessPose>
	float TaskSpace2Go[3];
	TaskSpace2Go[0] = PositionXY[0];
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	60bb      	str	r3, [r7, #8]
	TaskSpace2Go[1] = PositionXY[1];
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	60fb      	str	r3, [r7, #12]
	TaskSpace2Go[2] = Z_Offset;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	613b      	str	r3, [r7, #16]
	if (IsJMove){
 80045b4:	79bb      	ldrb	r3, [r7, #6]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <ChessNotMovePathWay+0x4e>
		JMoveTaskSpace(TaskSpace2Go, 2);
 80045ba:	f107 0308 	add.w	r3, r7, #8
 80045be:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff ff74 	bl	80044b0 <JMoveTaskSpace>
	}
	else{
		JMoveTaskSpace(TaskSpace2Go, 2);
	}
}
 80045c8:	e006      	b.n	80045d8 <ChessNotMovePathWay+0x5c>
		JMoveTaskSpace(TaskSpace2Go, 2);
 80045ca:	f107 0308 	add.w	r3, r7, #8
 80045ce:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff ff6c 	bl	80044b0 <JMoveTaskSpace>
}
 80045d8:	bf00      	nop
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <ChessMoveStateMachine>:

void ChessMoveStateMachine() {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
	static uint8_t ChangeState = 0;
	switch (ChessMoveStates) {
 80045e4:	4b7a      	ldr	r3, [pc, #488]	; (80047d0 <ChessMoveStateMachine+0x1f0>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b09      	cmp	r3, #9
 80045ea:	f200 80df 	bhi.w	80047ac <ChessMoveStateMachine+0x1cc>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <ChessMoveStateMachine+0x14>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	0800462f 	.word	0x0800462f
 80045fc:	0800466b 	.word	0x0800466b
 8004600:	080046a7 	.word	0x080046a7
 8004604:	080046af 	.word	0x080046af
 8004608:	080046e9 	.word	0x080046e9
 800460c:	08004723 	.word	0x08004723
 8004610:	0800475d 	.word	0x0800475d
 8004614:	08004765 	.word	0x08004765
 8004618:	0800479f 	.word	0x0800479f
	case Chess_idle:
		if (Chess_Move_Start_Flag) {
 800461c:	4b6d      	ldr	r3, [pc, #436]	; (80047d4 <ChessMoveStateMachine+0x1f4>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80c5 	beq.w	80047b0 <ChessMoveStateMachine+0x1d0>
			ChessMoveStates = Move_2_Start_Top_Point;
 8004626:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <ChessMoveStateMachine+0x1f0>)
 8004628:	2201      	movs	r2, #1
 800462a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800462c:	e0c0      	b.n	80047b0 <ChessMoveStateMachine+0x1d0>
	case Move_2_Start_Top_Point:
		if (ChangeState) {
 800462e:	4b6a      	ldr	r3, [pc, #424]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00d      	beq.n	8004652 <ChessMoveStateMachine+0x72>
			ChessNotMovePathWay(ChessIndex[0], Z_TopOffset, 1);
 8004636:	4b69      	ldr	r3, [pc, #420]	; (80047dc <ChessMoveStateMachine+0x1fc>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	4a69      	ldr	r2, [pc, #420]	; (80047e0 <ChessMoveStateMachine+0x200>)
 800463c:	edd2 7a00 	vldr	s15, [r2]
 8004640:	2101      	movs	r1, #1
 8004642:	eeb0 0a67 	vmov.f32	s0, s15
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff ff98 	bl	800457c <ChessNotMovePathWay>
			ChangeState = 0;
 800464c:	4b62      	ldr	r3, [pc, #392]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004652:	4b64      	ldr	r3, [pc, #400]	; (80047e4 <ChessMoveStateMachine+0x204>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f040 80ac 	bne.w	80047b4 <ChessMoveStateMachine+0x1d4>
			ChessMoveStates = Move_2_Start_Grip_Point;
 800465c:	4b5c      	ldr	r3, [pc, #368]	; (80047d0 <ChessMoveStateMachine+0x1f0>)
 800465e:	2202      	movs	r2, #2
 8004660:	701a      	strb	r2, [r3, #0]
			ChangeState = 1;
 8004662:	4b5d      	ldr	r3, [pc, #372]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 8004664:	2201      	movs	r2, #1
 8004666:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004668:	e0a4      	b.n	80047b4 <ChessMoveStateMachine+0x1d4>
	case Move_2_Start_Grip_Point:
		if (ChangeState) {
 800466a:	4b5b      	ldr	r3, [pc, #364]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00d      	beq.n	800468e <ChessMoveStateMachine+0xae>
			ChessNotMovePathWay(ChessIndex[0], Z_2GripOffset, 0);
 8004672:	4b5a      	ldr	r3, [pc, #360]	; (80047dc <ChessMoveStateMachine+0x1fc>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	4a5c      	ldr	r2, [pc, #368]	; (80047e8 <ChessMoveStateMachine+0x208>)
 8004678:	edd2 7a00 	vldr	s15, [r2]
 800467c:	2100      	movs	r1, #0
 800467e:	eeb0 0a67 	vmov.f32	s0, s15
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ff7a 	bl	800457c <ChessNotMovePathWay>
			ChangeState = 0;
 8004688:	4b53      	ldr	r3, [pc, #332]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 800468e:	4b55      	ldr	r3, [pc, #340]	; (80047e4 <ChessMoveStateMachine+0x204>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	f040 8090 	bne.w	80047b8 <ChessMoveStateMachine+0x1d8>
			ChessMoveStates = Move_2_Start_Point_and_Griping;
 8004698:	4b4d      	ldr	r3, [pc, #308]	; (80047d0 <ChessMoveStateMachine+0x1f0>)
 800469a:	2203      	movs	r2, #3
 800469c:	701a      	strb	r2, [r3, #0]
			ChangeState = 1;
 800469e:	4b4e      	ldr	r3, [pc, #312]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80046a4:	e088      	b.n	80047b8 <ChessMoveStateMachine+0x1d8>
	case Move_2_Start_Point_and_Griping:
		// Grip Chess

		ChessMoveStates = Back_2_Start_Top_Point;
 80046a6:	4b4a      	ldr	r3, [pc, #296]	; (80047d0 <ChessMoveStateMachine+0x1f0>)
 80046a8:	2204      	movs	r2, #4
 80046aa:	701a      	strb	r2, [r3, #0]
		break;
 80046ac:	e08d      	b.n	80047ca <ChessMoveStateMachine+0x1ea>
	case Back_2_Start_Top_Point:
		if (ChangeState) {
 80046ae:	4b4a      	ldr	r3, [pc, #296]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00d      	beq.n	80046d2 <ChessMoveStateMachine+0xf2>
			ChessNotMovePathWay(ChessIndex[0], Z_TopOffset, 0);
 80046b6:	4b49      	ldr	r3, [pc, #292]	; (80047dc <ChessMoveStateMachine+0x1fc>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	4a49      	ldr	r2, [pc, #292]	; (80047e0 <ChessMoveStateMachine+0x200>)
 80046bc:	edd2 7a00 	vldr	s15, [r2]
 80046c0:	2100      	movs	r1, #0
 80046c2:	eeb0 0a67 	vmov.f32	s0, s15
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff ff58 	bl	800457c <ChessNotMovePathWay>
			ChangeState = 0;
 80046cc:	4b42      	ldr	r3, [pc, #264]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 80046d2:	4b44      	ldr	r3, [pc, #272]	; (80047e4 <ChessMoveStateMachine+0x204>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d170      	bne.n	80047bc <ChessMoveStateMachine+0x1dc>
			ChessMoveStates = Move_2_End_Top_Point;
 80046da:	4b3d      	ldr	r3, [pc, #244]	; (80047d0 <ChessMoveStateMachine+0x1f0>)
 80046dc:	2205      	movs	r2, #5
 80046de:	701a      	strb	r2, [r3, #0]
			ChangeState = 1;
 80046e0:	4b3d      	ldr	r3, [pc, #244]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80046e6:	e069      	b.n	80047bc <ChessMoveStateMachine+0x1dc>

		// Finish To Grip Chess

	case Move_2_End_Top_Point:
		if (ChangeState) {
 80046e8:	4b3b      	ldr	r3, [pc, #236]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00d      	beq.n	800470c <ChessMoveStateMachine+0x12c>
			ChessNotMovePathWay(ChessIndex[1], Z_TopOffset, 1);
 80046f0:	4b3a      	ldr	r3, [pc, #232]	; (80047dc <ChessMoveStateMachine+0x1fc>)
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	4a3a      	ldr	r2, [pc, #232]	; (80047e0 <ChessMoveStateMachine+0x200>)
 80046f6:	edd2 7a00 	vldr	s15, [r2]
 80046fa:	2101      	movs	r1, #1
 80046fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ff3b 	bl	800457c <ChessNotMovePathWay>
			ChangeState = 0;
 8004706:	4b34      	ldr	r3, [pc, #208]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 800470c:	4b35      	ldr	r3, [pc, #212]	; (80047e4 <ChessMoveStateMachine+0x204>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d155      	bne.n	80047c0 <ChessMoveStateMachine+0x1e0>
			ChessMoveStates = Move_2_End_Ungrip_Point;
 8004714:	4b2e      	ldr	r3, [pc, #184]	; (80047d0 <ChessMoveStateMachine+0x1f0>)
 8004716:	2206      	movs	r2, #6
 8004718:	701a      	strb	r2, [r3, #0]
			ChangeState = 1;
 800471a:	4b2f      	ldr	r3, [pc, #188]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 800471c:	2201      	movs	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004720:	e04e      	b.n	80047c0 <ChessMoveStateMachine+0x1e0>
	case Move_2_End_Ungrip_Point:
		if (ChangeState) {
 8004722:	4b2d      	ldr	r3, [pc, #180]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00d      	beq.n	8004746 <ChessMoveStateMachine+0x166>
			ChessNotMovePathWay(ChessIndex[1], Z_2GripOffset, 0);
 800472a:	4b2c      	ldr	r3, [pc, #176]	; (80047dc <ChessMoveStateMachine+0x1fc>)
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	4a2e      	ldr	r2, [pc, #184]	; (80047e8 <ChessMoveStateMachine+0x208>)
 8004730:	edd2 7a00 	vldr	s15, [r2]
 8004734:	2100      	movs	r1, #0
 8004736:	eeb0 0a67 	vmov.f32	s0, s15
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff ff1e 	bl	800457c <ChessNotMovePathWay>
			ChangeState = 0;
 8004740:	4b25      	ldr	r3, [pc, #148]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 8004742:	2200      	movs	r2, #0
 8004744:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004746:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <ChessMoveStateMachine+0x204>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d13a      	bne.n	80047c4 <ChessMoveStateMachine+0x1e4>
			ChessMoveStates = Move_2_End_Point_and_Ungriping;
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <ChessMoveStateMachine+0x1f0>)
 8004750:	2207      	movs	r2, #7
 8004752:	701a      	strb	r2, [r3, #0]
			ChangeState = 1;
 8004754:	4b20      	ldr	r3, [pc, #128]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 8004756:	2201      	movs	r2, #1
 8004758:	701a      	strb	r2, [r3, #0]
		}
		break;
 800475a:	e033      	b.n	80047c4 <ChessMoveStateMachine+0x1e4>
	case Move_2_End_Point_and_Ungriping:
		// Grip Chess

		ChessMoveStates = Back_2_End_Top_Point;
 800475c:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <ChessMoveStateMachine+0x1f0>)
 800475e:	2208      	movs	r2, #8
 8004760:	701a      	strb	r2, [r3, #0]
		break;
 8004762:	e032      	b.n	80047ca <ChessMoveStateMachine+0x1ea>
	case Back_2_End_Top_Point:
		if (ChangeState) {
 8004764:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00d      	beq.n	8004788 <ChessMoveStateMachine+0x1a8>
			ChessNotMovePathWay(ChessIndex[1], Z_TopOffset, 0);
 800476c:	4b1b      	ldr	r3, [pc, #108]	; (80047dc <ChessMoveStateMachine+0x1fc>)
 800476e:	785b      	ldrb	r3, [r3, #1]
 8004770:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <ChessMoveStateMachine+0x200>)
 8004772:	edd2 7a00 	vldr	s15, [r2]
 8004776:	2100      	movs	r1, #0
 8004778:	eeb0 0a67 	vmov.f32	s0, s15
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fefd 	bl	800457c <ChessNotMovePathWay>
			ChangeState = 0;
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 8004784:	2200      	movs	r2, #0
 8004786:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004788:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <ChessMoveStateMachine+0x204>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d11b      	bne.n	80047c8 <ChessMoveStateMachine+0x1e8>
			ChessMoveStates = ChessMove_Finish;
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <ChessMoveStateMachine+0x1f0>)
 8004792:	2209      	movs	r2, #9
 8004794:	701a      	strb	r2, [r3, #0]
			ChangeState = 1;
 8004796:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <ChessMoveStateMachine+0x1f8>)
 8004798:	2201      	movs	r2, #1
 800479a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800479c:	e014      	b.n	80047c8 <ChessMoveStateMachine+0x1e8>
	case ChessMove_Finish:
		Chess_Move_Start_Flag = 0;
 800479e:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <ChessMoveStateMachine+0x1f4>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
		ChessMoveStates = Chess_idle;
 80047a4:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <ChessMoveStateMachine+0x1f0>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]
		break;
 80047aa:	e00e      	b.n	80047ca <ChessMoveStateMachine+0x1ea>
	default:
		break;
 80047ac:	bf00      	nop
 80047ae:	e00c      	b.n	80047ca <ChessMoveStateMachine+0x1ea>
		break;
 80047b0:	bf00      	nop
 80047b2:	e00a      	b.n	80047ca <ChessMoveStateMachine+0x1ea>
		break;
 80047b4:	bf00      	nop
 80047b6:	e008      	b.n	80047ca <ChessMoveStateMachine+0x1ea>
		break;
 80047b8:	bf00      	nop
 80047ba:	e006      	b.n	80047ca <ChessMoveStateMachine+0x1ea>
		break;
 80047bc:	bf00      	nop
 80047be:	e004      	b.n	80047ca <ChessMoveStateMachine+0x1ea>
		break;
 80047c0:	bf00      	nop
 80047c2:	e002      	b.n	80047ca <ChessMoveStateMachine+0x1ea>
		break;
 80047c4:	bf00      	nop
 80047c6:	e000      	b.n	80047ca <ChessMoveStateMachine+0x1ea>
		break;
 80047c8:	bf00      	nop
	}
}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000843 	.word	0x20000843
 80047d4:	20000842 	.word	0x20000842
 80047d8:	2000086c 	.word	0x2000086c
 80047dc:	20000840 	.word	0x20000840
 80047e0:	20000000 	.word	0x20000000
 80047e4:	20000835 	.word	0x20000835
 80047e8:	20000004 	.word	0x20000004

080047ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047f0:	b672      	cpsid	i
}
 80047f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047f4:	e7fe      	b.n	80047f4 <Error_Handler+0x8>
	...

080047f8 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80047fc:	4b28      	ldr	r3, [pc, #160]	; (80048a0 <MX_SPI3_Init+0xa8>)
 80047fe:	4a29      	ldr	r2, [pc, #164]	; (80048a4 <MX_SPI3_Init+0xac>)
 8004800:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004802:	4b27      	ldr	r3, [pc, #156]	; (80048a0 <MX_SPI3_Init+0xa8>)
 8004804:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004808:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800480a:	4b25      	ldr	r3, [pc, #148]	; (80048a0 <MX_SPI3_Init+0xa8>)
 800480c:	2200      	movs	r2, #0
 800480e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004810:	4b23      	ldr	r3, [pc, #140]	; (80048a0 <MX_SPI3_Init+0xa8>)
 8004812:	2207      	movs	r2, #7
 8004814:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004816:	4b22      	ldr	r3, [pc, #136]	; (80048a0 <MX_SPI3_Init+0xa8>)
 8004818:	2200      	movs	r2, #0
 800481a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800481c:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <MX_SPI3_Init+0xa8>)
 800481e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004822:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004824:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <MX_SPI3_Init+0xa8>)
 8004826:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800482a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800482c:	4b1c      	ldr	r3, [pc, #112]	; (80048a0 <MX_SPI3_Init+0xa8>)
 800482e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004832:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004834:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <MX_SPI3_Init+0xa8>)
 8004836:	2200      	movs	r2, #0
 8004838:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800483a:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <MX_SPI3_Init+0xa8>)
 800483c:	2200      	movs	r2, #0
 800483e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004840:	4b17      	ldr	r3, [pc, #92]	; (80048a0 <MX_SPI3_Init+0xa8>)
 8004842:	2200      	movs	r2, #0
 8004844:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 8004846:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <MX_SPI3_Init+0xa8>)
 8004848:	221d      	movs	r2, #29
 800484a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800484c:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <MX_SPI3_Init+0xa8>)
 800484e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004852:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004854:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <MX_SPI3_Init+0xa8>)
 8004856:	2200      	movs	r2, #0
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800485a:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <MX_SPI3_Init+0xa8>)
 800485c:	2200      	movs	r2, #0
 800485e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <MX_SPI3_Init+0xa8>)
 8004862:	2200      	movs	r2, #0
 8004864:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004866:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <MX_SPI3_Init+0xa8>)
 8004868:	2200      	movs	r2, #0
 800486a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <MX_SPI3_Init+0xa8>)
 800486e:	2200      	movs	r2, #0
 8004870:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004872:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <MX_SPI3_Init+0xa8>)
 8004874:	2200      	movs	r2, #0
 8004876:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004878:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <MX_SPI3_Init+0xa8>)
 800487a:	2200      	movs	r2, #0
 800487c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800487e:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <MX_SPI3_Init+0xa8>)
 8004880:	2200      	movs	r2, #0
 8004882:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <MX_SPI3_Init+0xa8>)
 8004886:	2200      	movs	r2, #0
 8004888:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800488a:	4805      	ldr	r0, [pc, #20]	; (80048a0 <MX_SPI3_Init+0xa8>)
 800488c:	f00b fe96 	bl	80105bc <HAL_SPI_Init>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8004896:	f7ff ffa9 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000870 	.word	0x20000870
 80048a4:	40003c00 	.word	0x40003c00

080048a8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80048ac:	4b27      	ldr	r3, [pc, #156]	; (800494c <MX_SPI4_Init+0xa4>)
 80048ae:	4a28      	ldr	r2, [pc, #160]	; (8004950 <MX_SPI4_Init+0xa8>)
 80048b0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80048b2:	4b26      	ldr	r3, [pc, #152]	; (800494c <MX_SPI4_Init+0xa4>)
 80048b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80048b8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80048ba:	4b24      	ldr	r3, [pc, #144]	; (800494c <MX_SPI4_Init+0xa4>)
 80048bc:	2200      	movs	r2, #0
 80048be:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80048c0:	4b22      	ldr	r3, [pc, #136]	; (800494c <MX_SPI4_Init+0xa4>)
 80048c2:	220f      	movs	r2, #15
 80048c4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80048c6:	4b21      	ldr	r3, [pc, #132]	; (800494c <MX_SPI4_Init+0xa4>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048cc:	4b1f      	ldr	r3, [pc, #124]	; (800494c <MX_SPI4_Init+0xa4>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80048d2:	4b1e      	ldr	r3, [pc, #120]	; (800494c <MX_SPI4_Init+0xa4>)
 80048d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80048d8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80048da:	4b1c      	ldr	r3, [pc, #112]	; (800494c <MX_SPI4_Init+0xa4>)
 80048dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80048e0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048e2:	4b1a      	ldr	r3, [pc, #104]	; (800494c <MX_SPI4_Init+0xa4>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80048e8:	4b18      	ldr	r3, [pc, #96]	; (800494c <MX_SPI4_Init+0xa4>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ee:	4b17      	ldr	r3, [pc, #92]	; (800494c <MX_SPI4_Init+0xa4>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80048f4:	4b15      	ldr	r3, [pc, #84]	; (800494c <MX_SPI4_Init+0xa4>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80048fa:	4b14      	ldr	r3, [pc, #80]	; (800494c <MX_SPI4_Init+0xa4>)
 80048fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004900:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004902:	4b12      	ldr	r3, [pc, #72]	; (800494c <MX_SPI4_Init+0xa4>)
 8004904:	2200      	movs	r2, #0
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004908:	4b10      	ldr	r3, [pc, #64]	; (800494c <MX_SPI4_Init+0xa4>)
 800490a:	2200      	movs	r2, #0
 800490c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <MX_SPI4_Init+0xa4>)
 8004910:	2200      	movs	r2, #0
 8004912:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004914:	4b0d      	ldr	r3, [pc, #52]	; (800494c <MX_SPI4_Init+0xa4>)
 8004916:	2200      	movs	r2, #0
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800491a:	4b0c      	ldr	r3, [pc, #48]	; (800494c <MX_SPI4_Init+0xa4>)
 800491c:	2200      	movs	r2, #0
 800491e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <MX_SPI4_Init+0xa4>)
 8004922:	2200      	movs	r2, #0
 8004924:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004926:	4b09      	ldr	r3, [pc, #36]	; (800494c <MX_SPI4_Init+0xa4>)
 8004928:	2200      	movs	r2, #0
 800492a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <MX_SPI4_Init+0xa4>)
 800492e:	2200      	movs	r2, #0
 8004930:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <MX_SPI4_Init+0xa4>)
 8004934:	2200      	movs	r2, #0
 8004936:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004938:	4804      	ldr	r0, [pc, #16]	; (800494c <MX_SPI4_Init+0xa4>)
 800493a:	f00b fe3f 	bl	80105bc <HAL_SPI_Init>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8004944:	f7ff ff52 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004948:	bf00      	nop
 800494a:	bd80      	pop	{r7, pc}
 800494c:	200008f8 	.word	0x200008f8
 8004950:	40013400 	.word	0x40013400

08004954 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b0b8      	sub	sp, #224	; 0xe0
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800496c:	f107 0318 	add.w	r3, r7, #24
 8004970:	22b4      	movs	r2, #180	; 0xb4
 8004972:	2100      	movs	r1, #0
 8004974:	4618      	mov	r0, r3
 8004976:	f011 f8e3 	bl	8015b40 <memset>
  if(spiHandle->Instance==SPI3)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a4b      	ldr	r2, [pc, #300]	; (8004aac <HAL_SPI_MspInit+0x158>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d156      	bne.n	8004a32 <HAL_SPI_MspInit+0xde>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004988:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 800498a:	2319      	movs	r3, #25
 800498c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 800498e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004992:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8004994:	2302      	movs	r3, #2
 8004996:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8004998:	2302      	movs	r3, #2
 800499a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800499c:	2302      	movs	r3, #2
 800499e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80049a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a8:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80049ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049b2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049b4:	f107 0318 	add.w	r3, r7, #24
 80049b8:	4618      	mov	r0, r3
 80049ba:	f009 fd6b 	bl	800e494 <HAL_RCCEx_PeriphCLKConfig>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 80049c4:	f7ff ff12 	bl	80047ec <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80049c8:	4b39      	ldr	r3, [pc, #228]	; (8004ab0 <HAL_SPI_MspInit+0x15c>)
 80049ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049ce:	4a38      	ldr	r2, [pc, #224]	; (8004ab0 <HAL_SPI_MspInit+0x15c>)
 80049d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80049d8:	4b35      	ldr	r3, [pc, #212]	; (8004ab0 <HAL_SPI_MspInit+0x15c>)
 80049da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049e6:	4b32      	ldr	r3, [pc, #200]	; (8004ab0 <HAL_SPI_MspInit+0x15c>)
 80049e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ec:	4a30      	ldr	r2, [pc, #192]	; (8004ab0 <HAL_SPI_MspInit+0x15c>)
 80049ee:	f043 0304 	orr.w	r3, r3, #4
 80049f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049f6:	4b2e      	ldr	r3, [pc, #184]	; (8004ab0 <HAL_SPI_MspInit+0x15c>)
 80049f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004a04:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004a08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004a1e:	2306      	movs	r3, #6
 8004a20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4822      	ldr	r0, [pc, #136]	; (8004ab4 <HAL_SPI_MspInit+0x160>)
 8004a2c:	f006 fc34 	bl	800b298 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8004a30:	e038      	b.n	8004aa4 <HAL_SPI_MspInit+0x150>
  else if(spiHandle->Instance==SPI4)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a20      	ldr	r2, [pc, #128]	; (8004ab8 <HAL_SPI_MspInit+0x164>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d133      	bne.n	8004aa4 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004a3c:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <HAL_SPI_MspInit+0x15c>)
 8004a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a42:	4a1b      	ldr	r2, [pc, #108]	; (8004ab0 <HAL_SPI_MspInit+0x15c>)
 8004a44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004a4c:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <HAL_SPI_MspInit+0x15c>)
 8004a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a5a:	4b15      	ldr	r3, [pc, #84]	; (8004ab0 <HAL_SPI_MspInit+0x15c>)
 8004a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a60:	4a13      	ldr	r2, [pc, #76]	; (8004ab0 <HAL_SPI_MspInit+0x15c>)
 8004a62:	f043 0310 	orr.w	r3, r3, #16
 8004a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a6a:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <HAL_SPI_MspInit+0x15c>)
 8004a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 8004a78:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004a7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a80:	2302      	movs	r3, #2
 8004a82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004a92:	2305      	movs	r3, #5
 8004a94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4807      	ldr	r0, [pc, #28]	; (8004abc <HAL_SPI_MspInit+0x168>)
 8004aa0:	f006 fbfa 	bl	800b298 <HAL_GPIO_Init>
}
 8004aa4:	bf00      	nop
 8004aa6:	37e0      	adds	r7, #224	; 0xe0
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40003c00 	.word	0x40003c00
 8004ab0:	58024400 	.word	0x58024400
 8004ab4:	58020800 	.word	0x58020800
 8004ab8:	40013400 	.word	0x40013400
 8004abc:	58021000 	.word	0x58021000

08004ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <HAL_MspInit+0x30>)
 8004ac8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004acc:	4a08      	ldr	r2, [pc, #32]	; (8004af0 <HAL_MspInit+0x30>)
 8004ace:	f043 0302 	orr.w	r3, r3, #2
 8004ad2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_MspInit+0x30>)
 8004ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	58024400 	.word	0x58024400

08004af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004af8:	e7fe      	b.n	8004af8 <NMI_Handler+0x4>

08004afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004afa:	b480      	push	{r7}
 8004afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004afe:	e7fe      	b.n	8004afe <HardFault_Handler+0x4>

08004b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b04:	e7fe      	b.n	8004b04 <MemManage_Handler+0x4>

08004b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b06:	b480      	push	{r7}
 8004b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b0a:	e7fe      	b.n	8004b0a <BusFault_Handler+0x4>

08004b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b10:	e7fe      	b.n	8004b10 <UsageFault_Handler+0x4>

08004b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b12:	b480      	push	{r7}
 8004b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b16:	bf00      	nop
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b24:	bf00      	nop
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b32:	bf00      	nop
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b40:	f001 fcd8 	bl	80064f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b44:	bf00      	nop
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004b4c:	4802      	ldr	r0, [pc, #8]	; (8004b58 <DMA1_Stream0_IRQHandler+0x10>)
 8004b4e:	f005 fa2f 	bl	8009fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004b52:	bf00      	nop
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20000fd0 	.word	0x20000fd0

08004b5c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004b60:	4802      	ldr	r0, [pc, #8]	; (8004b6c <DMA1_Stream1_IRQHandler+0x10>)
 8004b62:	f005 fa25 	bl	8009fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004b66:	bf00      	nop
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20001048 	.word	0x20001048

08004b70 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004b74:	4802      	ldr	r0, [pc, #8]	; (8004b80 <DMA1_Stream2_IRQHandler+0x10>)
 8004b76:	f005 fa1b 	bl	8009fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004b7a:	bf00      	nop
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000da8 	.word	0x20000da8

08004b84 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8004b88:	4802      	ldr	r0, [pc, #8]	; (8004b94 <I2C2_ER_IRQHandler+0x10>)
 8004b8a:	f006 fe87 	bl	800b89c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8004b8e:	bf00      	nop
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	2000024c 	.word	0x2000024c

08004b98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004b9c:	4802      	ldr	r0, [pc, #8]	; (8004ba8 <USART3_IRQHandler+0x10>)
 8004b9e:	f00e fad3 	bl	8013148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004ba2:	bf00      	nop
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000f40 	.word	0x20000f40

08004bac <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004bb0:	4802      	ldr	r0, [pc, #8]	; (8004bbc <UART5_IRQHandler+0x10>)
 8004bb2:	f00e fac9 	bl	8013148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004bb6:	bf00      	nop
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000e20 	.word	0x20000e20

08004bc0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8004bc4:	4802      	ldr	r0, [pc, #8]	; (8004bd0 <ADC3_IRQHandler+0x10>)
 8004bc6:	f002 fb05 	bl	80071d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8004bca:	bf00      	nop
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	200001b4 	.word	0x200001b4

08004bd4 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8004bd8:	4802      	ldr	r0, [pc, #8]	; (8004be4 <TIM23_IRQHandler+0x10>)
 8004bda:	f00d f883 	bl	8011ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8004bde:	bf00      	nop
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000d10 	.word	0x20000d10

08004be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004bec:	4b34      	ldr	r3, [pc, #208]	; (8004cc0 <SystemInit+0xd8>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf2:	4a33      	ldr	r2, [pc, #204]	; (8004cc0 <SystemInit+0xd8>)
 8004bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004bfc:	4b31      	ldr	r3, [pc, #196]	; (8004cc4 <SystemInit+0xdc>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	2b06      	cmp	r3, #6
 8004c06:	d807      	bhi.n	8004c18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004c08:	4b2e      	ldr	r3, [pc, #184]	; (8004cc4 <SystemInit+0xdc>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f023 030f 	bic.w	r3, r3, #15
 8004c10:	4a2c      	ldr	r2, [pc, #176]	; (8004cc4 <SystemInit+0xdc>)
 8004c12:	f043 0307 	orr.w	r3, r3, #7
 8004c16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004c18:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <SystemInit+0xe0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a2a      	ldr	r2, [pc, #168]	; (8004cc8 <SystemInit+0xe0>)
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004c24:	4b28      	ldr	r3, [pc, #160]	; (8004cc8 <SystemInit+0xe0>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004c2a:	4b27      	ldr	r3, [pc, #156]	; (8004cc8 <SystemInit+0xe0>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4926      	ldr	r1, [pc, #152]	; (8004cc8 <SystemInit+0xe0>)
 8004c30:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <SystemInit+0xe4>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004c36:	4b23      	ldr	r3, [pc, #140]	; (8004cc4 <SystemInit+0xdc>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004c42:	4b20      	ldr	r3, [pc, #128]	; (8004cc4 <SystemInit+0xdc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 030f 	bic.w	r3, r3, #15
 8004c4a:	4a1e      	ldr	r2, [pc, #120]	; (8004cc4 <SystemInit+0xdc>)
 8004c4c:	f043 0307 	orr.w	r3, r3, #7
 8004c50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <SystemInit+0xe0>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004c58:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <SystemInit+0xe0>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <SystemInit+0xe0>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004c64:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <SystemInit+0xe0>)
 8004c66:	4a1a      	ldr	r2, [pc, #104]	; (8004cd0 <SystemInit+0xe8>)
 8004c68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004c6a:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <SystemInit+0xe0>)
 8004c6c:	4a19      	ldr	r2, [pc, #100]	; (8004cd4 <SystemInit+0xec>)
 8004c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004c70:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <SystemInit+0xe0>)
 8004c72:	4a19      	ldr	r2, [pc, #100]	; (8004cd8 <SystemInit+0xf0>)
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004c76:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <SystemInit+0xe0>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004c7c:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <SystemInit+0xe0>)
 8004c7e:	4a16      	ldr	r2, [pc, #88]	; (8004cd8 <SystemInit+0xf0>)
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004c82:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <SystemInit+0xe0>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004c88:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <SystemInit+0xe0>)
 8004c8a:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <SystemInit+0xf0>)
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <SystemInit+0xe0>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <SystemInit+0xe0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a0b      	ldr	r2, [pc, #44]	; (8004cc8 <SystemInit+0xe0>)
 8004c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004ca0:	4b09      	ldr	r3, [pc, #36]	; (8004cc8 <SystemInit+0xe0>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <SystemInit+0xf4>)
 8004ca8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004cac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004cae:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <SystemInit+0xd8>)
 8004cb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cb4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004cb6:	bf00      	nop
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	e000ed00 	.word	0xe000ed00
 8004cc4:	52002000 	.word	0x52002000
 8004cc8:	58024400 	.word	0x58024400
 8004ccc:	eaf6ed7f 	.word	0xeaf6ed7f
 8004cd0:	02020200 	.word	0x02020200
 8004cd4:	01ff0000 	.word	0x01ff0000
 8004cd8:	01010280 	.word	0x01010280
 8004cdc:	52004000 	.word	0x52004000

08004ce0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim24;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b098      	sub	sp, #96	; 0x60
 8004ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ce6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	605a      	str	r2, [r3, #4]
 8004cf0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cf2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	605a      	str	r2, [r3, #4]
 8004cfc:	609a      	str	r2, [r3, #8]
 8004cfe:	60da      	str	r2, [r3, #12]
 8004d00:	611a      	str	r2, [r3, #16]
 8004d02:	615a      	str	r2, [r3, #20]
 8004d04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d06:	1d3b      	adds	r3, r7, #4
 8004d08:	2234      	movs	r2, #52	; 0x34
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f010 ff17 	bl	8015b40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d12:	4b39      	ldr	r3, [pc, #228]	; (8004df8 <MX_TIM1_Init+0x118>)
 8004d14:	4a39      	ldr	r2, [pc, #228]	; (8004dfc <MX_TIM1_Init+0x11c>)
 8004d16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004d18:	4b37      	ldr	r3, [pc, #220]	; (8004df8 <MX_TIM1_Init+0x118>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d1e:	4b36      	ldr	r3, [pc, #216]	; (8004df8 <MX_TIM1_Init+0x118>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 343;
 8004d24:	4b34      	ldr	r3, [pc, #208]	; (8004df8 <MX_TIM1_Init+0x118>)
 8004d26:	f240 1257 	movw	r2, #343	; 0x157
 8004d2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d2c:	4b32      	ldr	r3, [pc, #200]	; (8004df8 <MX_TIM1_Init+0x118>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d32:	4b31      	ldr	r3, [pc, #196]	; (8004df8 <MX_TIM1_Init+0x118>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d38:	4b2f      	ldr	r3, [pc, #188]	; (8004df8 <MX_TIM1_Init+0x118>)
 8004d3a:	2280      	movs	r2, #128	; 0x80
 8004d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004d3e:	482e      	ldr	r0, [pc, #184]	; (8004df8 <MX_TIM1_Init+0x118>)
 8004d40:	f00c fcbe 	bl	80116c0 <HAL_TIM_PWM_Init>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8004d4a:	f7ff fd4f 	bl	80047ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004d52:	2300      	movs	r3, #0
 8004d54:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4825      	ldr	r0, [pc, #148]	; (8004df8 <MX_TIM1_Init+0x118>)
 8004d62:	f00d ff49 	bl	8012bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004d6c:	f7ff fd3e 	bl	80047ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d70:	2360      	movs	r3, #96	; 0x60
 8004d72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004d80:	2304      	movs	r3, #4
 8004d82:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d84:	2300      	movs	r3, #0
 8004d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d90:	2200      	movs	r2, #0
 8004d92:	4619      	mov	r1, r3
 8004d94:	4818      	ldr	r0, [pc, #96]	; (8004df8 <MX_TIM1_Init+0x118>)
 8004d96:	f00d f8c5 	bl	8011f24 <HAL_TIM_PWM_ConfigChannel>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004da0:	f7ff fd24 	bl	80047ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dbc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4807      	ldr	r0, [pc, #28]	; (8004df8 <MX_TIM1_Init+0x118>)
 8004dda:	f00d ffa9 	bl	8012d30 <HAL_TIMEx_ConfigBreakDeadTime>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8004de4:	f7ff fd02 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004de8:	4803      	ldr	r0, [pc, #12]	; (8004df8 <MX_TIM1_Init+0x118>)
 8004dea:	f000 ff79 	bl	8005ce0 <HAL_TIM_MspPostInit>

}
 8004dee:	bf00      	nop
 8004df0:	3760      	adds	r7, #96	; 0x60
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000980 	.word	0x20000980
 8004dfc:	40010000 	.word	0x40010000

08004e00 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	; 0x30
 8004e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004e06:	f107 030c 	add.w	r3, r7, #12
 8004e0a:	2224      	movs	r2, #36	; 0x24
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f010 fe96 	bl	8015b40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e14:	463b      	mov	r3, r7
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	605a      	str	r2, [r3, #4]
 8004e1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e1e:	4b21      	ldr	r3, [pc, #132]	; (8004ea4 <MX_TIM2_Init+0xa4>)
 8004e20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004e26:	4b1f      	ldr	r3, [pc, #124]	; (8004ea4 <MX_TIM2_Init+0xa4>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <MX_TIM2_Init+0xa4>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004e32:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <MX_TIM2_Init+0xa4>)
 8004e34:	f04f 32ff 	mov.w	r2, #4294967295
 8004e38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ea4 <MX_TIM2_Init+0xa4>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e40:	4b18      	ldr	r3, [pc, #96]	; (8004ea4 <MX_TIM2_Init+0xa4>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004e46:	2301      	movs	r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e62:	2300      	movs	r3, #0
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004e6a:	f107 030c 	add.w	r3, r7, #12
 8004e6e:	4619      	mov	r1, r3
 8004e70:	480c      	ldr	r0, [pc, #48]	; (8004ea4 <MX_TIM2_Init+0xa4>)
 8004e72:	f00c fe91 	bl	8011b98 <HAL_TIM_Encoder_Init>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004e7c:	f7ff fcb6 	bl	80047ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e80:	2300      	movs	r3, #0
 8004e82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e88:	463b      	mov	r3, r7
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4805      	ldr	r0, [pc, #20]	; (8004ea4 <MX_TIM2_Init+0xa4>)
 8004e8e:	f00d feb3 	bl	8012bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004e98:	f7ff fca8 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004e9c:	bf00      	nop
 8004e9e:	3730      	adds	r7, #48	; 0x30
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	200009cc 	.word	0x200009cc

08004ea8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08e      	sub	sp, #56	; 0x38
 8004eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	605a      	str	r2, [r3, #4]
 8004eb8:	609a      	str	r2, [r3, #8]
 8004eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ebc:	f107 031c 	add.w	r3, r7, #28
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	605a      	str	r2, [r3, #4]
 8004ec6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ec8:	463b      	mov	r3, r7
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	605a      	str	r2, [r3, #4]
 8004ed0:	609a      	str	r2, [r3, #8]
 8004ed2:	60da      	str	r2, [r3, #12]
 8004ed4:	611a      	str	r2, [r3, #16]
 8004ed6:	615a      	str	r2, [r3, #20]
 8004ed8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004eda:	4b2d      	ldr	r3, [pc, #180]	; (8004f90 <MX_TIM3_Init+0xe8>)
 8004edc:	4a2d      	ldr	r2, [pc, #180]	; (8004f94 <MX_TIM3_Init+0xec>)
 8004ede:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004ee0:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <MX_TIM3_Init+0xe8>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ee6:	4b2a      	ldr	r3, [pc, #168]	; (8004f90 <MX_TIM3_Init+0xe8>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004eec:	4b28      	ldr	r3, [pc, #160]	; (8004f90 <MX_TIM3_Init+0xe8>)
 8004eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ef2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ef4:	4b26      	ldr	r3, [pc, #152]	; (8004f90 <MX_TIM3_Init+0xe8>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004efa:	4b25      	ldr	r3, [pc, #148]	; (8004f90 <MX_TIM3_Init+0xe8>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004f00:	4823      	ldr	r0, [pc, #140]	; (8004f90 <MX_TIM3_Init+0xe8>)
 8004f02:	f00c fb00 	bl	8011506 <HAL_TIM_Base_Init>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004f0c:	f7ff fc6e 	bl	80047ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	481c      	ldr	r0, [pc, #112]	; (8004f90 <MX_TIM3_Init+0xe8>)
 8004f1e:	f00d f915 	bl	801214c <HAL_TIM_ConfigClockSource>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004f28:	f7ff fc60 	bl	80047ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004f2c:	4818      	ldr	r0, [pc, #96]	; (8004f90 <MX_TIM3_Init+0xe8>)
 8004f2e:	f00c fbc7 	bl	80116c0 <HAL_TIM_PWM_Init>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004f38:	f7ff fc58 	bl	80047ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f44:	f107 031c 	add.w	r3, r7, #28
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4811      	ldr	r0, [pc, #68]	; (8004f90 <MX_TIM3_Init+0xe8>)
 8004f4c:	f00d fe54 	bl	8012bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004f56:	f7ff fc49 	bl	80047ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f5a:	2360      	movs	r3, #96	; 0x60
 8004f5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f66:	2300      	movs	r3, #0
 8004f68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4807      	ldr	r0, [pc, #28]	; (8004f90 <MX_TIM3_Init+0xe8>)
 8004f72:	f00c ffd7 	bl	8011f24 <HAL_TIM_PWM_ConfigChannel>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004f7c:	f7ff fc36 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004f80:	4803      	ldr	r0, [pc, #12]	; (8004f90 <MX_TIM3_Init+0xe8>)
 8004f82:	f000 fead 	bl	8005ce0 <HAL_TIM_MspPostInit>

}
 8004f86:	bf00      	nop
 8004f88:	3738      	adds	r7, #56	; 0x38
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000a18 	.word	0x20000a18
 8004f94:	40000400 	.word	0x40000400

08004f98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08c      	sub	sp, #48	; 0x30
 8004f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004f9e:	f107 030c 	add.w	r3, r7, #12
 8004fa2:	2224      	movs	r2, #36	; 0x24
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f010 fdca 	bl	8015b40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fac:	463b      	mov	r3, r7
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	605a      	str	r2, [r3, #4]
 8004fb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004fb6:	4b21      	ldr	r3, [pc, #132]	; (800503c <MX_TIM4_Init+0xa4>)
 8004fb8:	4a21      	ldr	r2, [pc, #132]	; (8005040 <MX_TIM4_Init+0xa8>)
 8004fba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004fbc:	4b1f      	ldr	r3, [pc, #124]	; (800503c <MX_TIM4_Init+0xa4>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fc2:	4b1e      	ldr	r3, [pc, #120]	; (800503c <MX_TIM4_Init+0xa4>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8004fc8:	4b1c      	ldr	r3, [pc, #112]	; (800503c <MX_TIM4_Init+0xa4>)
 8004fca:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8004fce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fd0:	4b1a      	ldr	r3, [pc, #104]	; (800503c <MX_TIM4_Init+0xa4>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004fd6:	4b19      	ldr	r3, [pc, #100]	; (800503c <MX_TIM4_Init+0xa4>)
 8004fd8:	2280      	movs	r2, #128	; 0x80
 8004fda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005000:	f107 030c 	add.w	r3, r7, #12
 8005004:	4619      	mov	r1, r3
 8005006:	480d      	ldr	r0, [pc, #52]	; (800503c <MX_TIM4_Init+0xa4>)
 8005008:	f00c fdc6 	bl	8011b98 <HAL_TIM_Encoder_Init>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005012:	f7ff fbeb 	bl	80047ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005016:	2300      	movs	r3, #0
 8005018:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800501e:	463b      	mov	r3, r7
 8005020:	4619      	mov	r1, r3
 8005022:	4806      	ldr	r0, [pc, #24]	; (800503c <MX_TIM4_Init+0xa4>)
 8005024:	f00d fde8 	bl	8012bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800502e:	f7ff fbdd 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005032:	bf00      	nop
 8005034:	3730      	adds	r7, #48	; 0x30
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000a64 	.word	0x20000a64
 8005040:	40000800 	.word	0x40000800

08005044 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08e      	sub	sp, #56	; 0x38
 8005048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800504a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	605a      	str	r2, [r3, #4]
 8005054:	609a      	str	r2, [r3, #8]
 8005056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005058:	f107 031c 	add.w	r3, r7, #28
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005064:	463b      	mov	r3, r7
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	605a      	str	r2, [r3, #4]
 800506c:	609a      	str	r2, [r3, #8]
 800506e:	60da      	str	r2, [r3, #12]
 8005070:	611a      	str	r2, [r3, #16]
 8005072:	615a      	str	r2, [r3, #20]
 8005074:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005076:	4b33      	ldr	r3, [pc, #204]	; (8005144 <MX_TIM5_Init+0x100>)
 8005078:	4a33      	ldr	r2, [pc, #204]	; (8005148 <MX_TIM5_Init+0x104>)
 800507a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 800507c:	4b31      	ldr	r3, [pc, #196]	; (8005144 <MX_TIM5_Init+0x100>)
 800507e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005082:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005084:	4b2f      	ldr	r3, [pc, #188]	; (8005144 <MX_TIM5_Init+0x100>)
 8005086:	2200      	movs	r2, #0
 8005088:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 800508a:	4b2e      	ldr	r3, [pc, #184]	; (8005144 <MX_TIM5_Init+0x100>)
 800508c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005090:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005092:	4b2c      	ldr	r3, [pc, #176]	; (8005144 <MX_TIM5_Init+0x100>)
 8005094:	2200      	movs	r2, #0
 8005096:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005098:	4b2a      	ldr	r3, [pc, #168]	; (8005144 <MX_TIM5_Init+0x100>)
 800509a:	2200      	movs	r2, #0
 800509c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800509e:	4829      	ldr	r0, [pc, #164]	; (8005144 <MX_TIM5_Init+0x100>)
 80050a0:	f00c fa31 	bl	8011506 <HAL_TIM_Base_Init>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 80050aa:	f7ff fb9f 	bl	80047ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80050b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050b8:	4619      	mov	r1, r3
 80050ba:	4822      	ldr	r0, [pc, #136]	; (8005144 <MX_TIM5_Init+0x100>)
 80050bc:	f00d f846 	bl	801214c <HAL_TIM_ConfigClockSource>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 80050c6:	f7ff fb91 	bl	80047ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80050ca:	481e      	ldr	r0, [pc, #120]	; (8005144 <MX_TIM5_Init+0x100>)
 80050cc:	f00c faf8 	bl	80116c0 <HAL_TIM_PWM_Init>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80050d6:	f7ff fb89 	bl	80047ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050de:	2300      	movs	r3, #0
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80050e2:	f107 031c 	add.w	r3, r7, #28
 80050e6:	4619      	mov	r1, r3
 80050e8:	4816      	ldr	r0, [pc, #88]	; (8005144 <MX_TIM5_Init+0x100>)
 80050ea:	f00d fd85 	bl	8012bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 80050f4:	f7ff fb7a 	bl	80047ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050f8:	2360      	movs	r3, #96	; 0x60
 80050fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500-1;
 80050fc:	f240 53db 	movw	r3, #1499	; 0x5db
 8005100:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005106:	2300      	movs	r3, #0
 8005108:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800510a:	463b      	mov	r3, r7
 800510c:	2200      	movs	r2, #0
 800510e:	4619      	mov	r1, r3
 8005110:	480c      	ldr	r0, [pc, #48]	; (8005144 <MX_TIM5_Init+0x100>)
 8005112:	f00c ff07 	bl	8011f24 <HAL_TIM_PWM_ConfigChannel>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 800511c:	f7ff fb66 	bl	80047ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005120:	463b      	mov	r3, r7
 8005122:	2204      	movs	r2, #4
 8005124:	4619      	mov	r1, r3
 8005126:	4807      	ldr	r0, [pc, #28]	; (8005144 <MX_TIM5_Init+0x100>)
 8005128:	f00c fefc 	bl	8011f24 <HAL_TIM_PWM_ConfigChannel>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8005132:	f7ff fb5b 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005136:	4803      	ldr	r0, [pc, #12]	; (8005144 <MX_TIM5_Init+0x100>)
 8005138:	f000 fdd2 	bl	8005ce0 <HAL_TIM_MspPostInit>

}
 800513c:	bf00      	nop
 800513e:	3738      	adds	r7, #56	; 0x38
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	20000ab0 	.word	0x20000ab0
 8005148:	40000c00 	.word	0x40000c00

0800514c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005152:	1d3b      	adds	r3, r7, #4
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800515c:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <MX_TIM6_Init+0x68>)
 800515e:	4a16      	ldr	r2, [pc, #88]	; (80051b8 <MX_TIM6_Init+0x6c>)
 8005160:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 8005162:	4b14      	ldr	r3, [pc, #80]	; (80051b4 <MX_TIM6_Init+0x68>)
 8005164:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005168:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800516a:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <MX_TIM6_Init+0x68>)
 800516c:	2200      	movs	r2, #0
 800516e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8005170:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <MX_TIM6_Init+0x68>)
 8005172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005176:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005178:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <MX_TIM6_Init+0x68>)
 800517a:	2200      	movs	r2, #0
 800517c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800517e:	480d      	ldr	r0, [pc, #52]	; (80051b4 <MX_TIM6_Init+0x68>)
 8005180:	f00c f9c1 	bl	8011506 <HAL_TIM_Base_Init>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800518a:	f7ff fb2f 	bl	80047ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800518e:	2300      	movs	r3, #0
 8005190:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005196:	1d3b      	adds	r3, r7, #4
 8005198:	4619      	mov	r1, r3
 800519a:	4806      	ldr	r0, [pc, #24]	; (80051b4 <MX_TIM6_Init+0x68>)
 800519c:	f00d fd2c 	bl	8012bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80051a6:	f7ff fb21 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80051aa:	bf00      	nop
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000afc 	.word	0x20000afc
 80051b8:	40001000 	.word	0x40001000

080051bc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08c      	sub	sp, #48	; 0x30
 80051c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80051c2:	f107 030c 	add.w	r3, r7, #12
 80051c6:	2224      	movs	r2, #36	; 0x24
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f010 fcb8 	bl	8015b40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051d0:	463b      	mov	r3, r7
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	605a      	str	r2, [r3, #4]
 80051d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80051da:	4b23      	ldr	r3, [pc, #140]	; (8005268 <MX_TIM8_Init+0xac>)
 80051dc:	4a23      	ldr	r2, [pc, #140]	; (800526c <MX_TIM8_Init+0xb0>)
 80051de:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80051e0:	4b21      	ldr	r3, [pc, #132]	; (8005268 <MX_TIM8_Init+0xac>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051e6:	4b20      	ldr	r3, [pc, #128]	; (8005268 <MX_TIM8_Init+0xac>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 80051ec:	4b1e      	ldr	r3, [pc, #120]	; (8005268 <MX_TIM8_Init+0xac>)
 80051ee:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80051f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051f4:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <MX_TIM8_Init+0xac>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80051fa:	4b1b      	ldr	r3, [pc, #108]	; (8005268 <MX_TIM8_Init+0xac>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005200:	4b19      	ldr	r3, [pc, #100]	; (8005268 <MX_TIM8_Init+0xac>)
 8005202:	2280      	movs	r2, #128	; 0x80
 8005204:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005206:	2303      	movs	r3, #3
 8005208:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800520a:	2300      	movs	r3, #0
 800520c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800520e:	2301      	movs	r3, #1
 8005210:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800521a:	2300      	movs	r3, #0
 800521c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800521e:	2301      	movs	r3, #1
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005222:	2300      	movs	r3, #0
 8005224:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800522a:	f107 030c 	add.w	r3, r7, #12
 800522e:	4619      	mov	r1, r3
 8005230:	480d      	ldr	r0, [pc, #52]	; (8005268 <MX_TIM8_Init+0xac>)
 8005232:	f00c fcb1 	bl	8011b98 <HAL_TIM_Encoder_Init>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800523c:	f7ff fad6 	bl	80047ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005240:	2300      	movs	r3, #0
 8005242:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005244:	2300      	movs	r3, #0
 8005246:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005248:	2300      	movs	r3, #0
 800524a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800524c:	463b      	mov	r3, r7
 800524e:	4619      	mov	r1, r3
 8005250:	4805      	ldr	r0, [pc, #20]	; (8005268 <MX_TIM8_Init+0xac>)
 8005252:	f00d fcd1 	bl	8012bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800525c:	f7ff fac6 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005260:	bf00      	nop
 8005262:	3730      	adds	r7, #48	; 0x30
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20000b48 	.word	0x20000b48
 800526c:	40010400 	.word	0x40010400

08005270 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	609a      	str	r2, [r3, #8]
 8005280:	60da      	str	r2, [r3, #12]
 8005282:	611a      	str	r2, [r3, #16]
 8005284:	615a      	str	r2, [r3, #20]
 8005286:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005288:	4b1f      	ldr	r3, [pc, #124]	; (8005308 <MX_TIM13_Init+0x98>)
 800528a:	4a20      	ldr	r2, [pc, #128]	; (800530c <MX_TIM13_Init+0x9c>)
 800528c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550-1;
 800528e:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <MX_TIM13_Init+0x98>)
 8005290:	f240 2225 	movw	r2, #549	; 0x225
 8005294:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005296:	4b1c      	ldr	r3, [pc, #112]	; (8005308 <MX_TIM13_Init+0x98>)
 8005298:	2200      	movs	r2, #0
 800529a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 800529c:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <MX_TIM13_Init+0x98>)
 800529e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80052a2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052a4:	4b18      	ldr	r3, [pc, #96]	; (8005308 <MX_TIM13_Init+0x98>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80052aa:	4b17      	ldr	r3, [pc, #92]	; (8005308 <MX_TIM13_Init+0x98>)
 80052ac:	2280      	movs	r2, #128	; 0x80
 80052ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80052b0:	4815      	ldr	r0, [pc, #84]	; (8005308 <MX_TIM13_Init+0x98>)
 80052b2:	f00c f928 	bl	8011506 <HAL_TIM_Base_Init>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 80052bc:	f7ff fa96 	bl	80047ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80052c0:	4811      	ldr	r0, [pc, #68]	; (8005308 <MX_TIM13_Init+0x98>)
 80052c2:	f00c f9fd 	bl	80116c0 <HAL_TIM_PWM_Init>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 80052cc:	f7ff fa8e 	bl	80047ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052d0:	2360      	movs	r3, #96	; 0x60
 80052d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80052d4:	f240 13f3 	movw	r3, #499	; 0x1f3
 80052d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052de:	2300      	movs	r3, #0
 80052e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052e2:	1d3b      	adds	r3, r7, #4
 80052e4:	2200      	movs	r2, #0
 80052e6:	4619      	mov	r1, r3
 80052e8:	4807      	ldr	r0, [pc, #28]	; (8005308 <MX_TIM13_Init+0x98>)
 80052ea:	f00c fe1b 	bl	8011f24 <HAL_TIM_PWM_ConfigChannel>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 80052f4:	f7ff fa7a 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80052f8:	4803      	ldr	r0, [pc, #12]	; (8005308 <MX_TIM13_Init+0x98>)
 80052fa:	f000 fcf1 	bl	8005ce0 <HAL_TIM_MspPostInit>

}
 80052fe:	bf00      	nop
 8005300:	3720      	adds	r7, #32
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000b94 	.word	0x20000b94
 800530c:	40001c00 	.word	0x40001c00

08005310 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005316:	1d3b      	adds	r3, r7, #4
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	609a      	str	r2, [r3, #8]
 8005320:	60da      	str	r2, [r3, #12]
 8005322:	611a      	str	r2, [r3, #16]
 8005324:	615a      	str	r2, [r3, #20]
 8005326:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005328:	4b1f      	ldr	r3, [pc, #124]	; (80053a8 <MX_TIM14_Init+0x98>)
 800532a:	4a20      	ldr	r2, [pc, #128]	; (80053ac <MX_TIM14_Init+0x9c>)
 800532c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 800532e:	4b1e      	ldr	r3, [pc, #120]	; (80053a8 <MX_TIM14_Init+0x98>)
 8005330:	f240 2225 	movw	r2, #549	; 0x225
 8005334:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005336:	4b1c      	ldr	r3, [pc, #112]	; (80053a8 <MX_TIM14_Init+0x98>)
 8005338:	2200      	movs	r2, #0
 800533a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 800533c:	4b1a      	ldr	r3, [pc, #104]	; (80053a8 <MX_TIM14_Init+0x98>)
 800533e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005342:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005344:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <MX_TIM14_Init+0x98>)
 8005346:	2200      	movs	r2, #0
 8005348:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800534a:	4b17      	ldr	r3, [pc, #92]	; (80053a8 <MX_TIM14_Init+0x98>)
 800534c:	2280      	movs	r2, #128	; 0x80
 800534e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005350:	4815      	ldr	r0, [pc, #84]	; (80053a8 <MX_TIM14_Init+0x98>)
 8005352:	f00c f8d8 	bl	8011506 <HAL_TIM_Base_Init>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 800535c:	f7ff fa46 	bl	80047ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8005360:	4811      	ldr	r0, [pc, #68]	; (80053a8 <MX_TIM14_Init+0x98>)
 8005362:	f00c f9ad 	bl	80116c0 <HAL_TIM_PWM_Init>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 800536c:	f7ff fa3e 	bl	80047ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005370:	2360      	movs	r3, #96	; 0x60
 8005372:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8005374:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005378:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005382:	1d3b      	adds	r3, r7, #4
 8005384:	2200      	movs	r2, #0
 8005386:	4619      	mov	r1, r3
 8005388:	4807      	ldr	r0, [pc, #28]	; (80053a8 <MX_TIM14_Init+0x98>)
 800538a:	f00c fdcb 	bl	8011f24 <HAL_TIM_PWM_ConfigChannel>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8005394:	f7ff fa2a 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8005398:	4803      	ldr	r0, [pc, #12]	; (80053a8 <MX_TIM14_Init+0x98>)
 800539a:	f000 fca1 	bl	8005ce0 <HAL_TIM_MspPostInit>

}
 800539e:	bf00      	nop
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20000be0 	.word	0x20000be0
 80053ac:	40002000 	.word	0x40002000

080053b0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b098      	sub	sp, #96	; 0x60
 80053b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	605a      	str	r2, [r3, #4]
 80053c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	605a      	str	r2, [r3, #4]
 80053cc:	609a      	str	r2, [r3, #8]
 80053ce:	60da      	str	r2, [r3, #12]
 80053d0:	611a      	str	r2, [r3, #16]
 80053d2:	615a      	str	r2, [r3, #20]
 80053d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80053d6:	1d3b      	adds	r3, r7, #4
 80053d8:	2234      	movs	r2, #52	; 0x34
 80053da:	2100      	movs	r1, #0
 80053dc:	4618      	mov	r0, r3
 80053de:	f010 fbaf 	bl	8015b40 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80053e2:	4b35      	ldr	r3, [pc, #212]	; (80054b8 <MX_TIM15_Init+0x108>)
 80053e4:	4a35      	ldr	r2, [pc, #212]	; (80054bc <MX_TIM15_Init+0x10c>)
 80053e6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550-1;
 80053e8:	4b33      	ldr	r3, [pc, #204]	; (80054b8 <MX_TIM15_Init+0x108>)
 80053ea:	f240 2225 	movw	r2, #549	; 0x225
 80053ee:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053f0:	4b31      	ldr	r3, [pc, #196]	; (80054b8 <MX_TIM15_Init+0x108>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 80053f6:	4b30      	ldr	r3, [pc, #192]	; (80054b8 <MX_TIM15_Init+0x108>)
 80053f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80053fc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053fe:	4b2e      	ldr	r3, [pc, #184]	; (80054b8 <MX_TIM15_Init+0x108>)
 8005400:	2200      	movs	r2, #0
 8005402:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005404:	4b2c      	ldr	r3, [pc, #176]	; (80054b8 <MX_TIM15_Init+0x108>)
 8005406:	2200      	movs	r2, #0
 8005408:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800540a:	4b2b      	ldr	r3, [pc, #172]	; (80054b8 <MX_TIM15_Init+0x108>)
 800540c:	2280      	movs	r2, #128	; 0x80
 800540e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005410:	4829      	ldr	r0, [pc, #164]	; (80054b8 <MX_TIM15_Init+0x108>)
 8005412:	f00c f955 	bl	80116c0 <HAL_TIM_PWM_Init>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 800541c:	f7ff f9e6 	bl	80047ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005420:	2300      	movs	r3, #0
 8005422:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005424:	2300      	movs	r3, #0
 8005426:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005428:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800542c:	4619      	mov	r1, r3
 800542e:	4822      	ldr	r0, [pc, #136]	; (80054b8 <MX_TIM15_Init+0x108>)
 8005430:	f00d fbe2 	bl	8012bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 800543a:	f7ff f9d7 	bl	80047ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800543e:	2360      	movs	r3, #96	; 0x60
 8005440:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 8005442:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005446:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005448:	2300      	movs	r3, #0
 800544a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800544c:	2300      	movs	r3, #0
 800544e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005450:	2300      	movs	r3, #0
 8005452:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005454:	2300      	movs	r3, #0
 8005456:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005458:	2300      	movs	r3, #0
 800545a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800545c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005460:	2200      	movs	r2, #0
 8005462:	4619      	mov	r1, r3
 8005464:	4814      	ldr	r0, [pc, #80]	; (80054b8 <MX_TIM15_Init+0x108>)
 8005466:	f00c fd5d 	bl	8011f24 <HAL_TIM_PWM_ConfigChannel>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 8005470:	f7ff f9bc 	bl	80047ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005474:	2300      	movs	r3, #0
 8005476:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005478:	2300      	movs	r3, #0
 800547a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005480:	2300      	movs	r3, #0
 8005482:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800548c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005492:	2300      	movs	r3, #0
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005496:	1d3b      	adds	r3, r7, #4
 8005498:	4619      	mov	r1, r3
 800549a:	4807      	ldr	r0, [pc, #28]	; (80054b8 <MX_TIM15_Init+0x108>)
 800549c:	f00d fc48 	bl	8012d30 <HAL_TIMEx_ConfigBreakDeadTime>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80054a6:	f7ff f9a1 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80054aa:	4803      	ldr	r0, [pc, #12]	; (80054b8 <MX_TIM15_Init+0x108>)
 80054ac:	f000 fc18 	bl	8005ce0 <HAL_TIM_MspPostInit>

}
 80054b0:	bf00      	nop
 80054b2:	3760      	adds	r7, #96	; 0x60
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000c2c 	.word	0x20000c2c
 80054bc:	40014000 	.word	0x40014000

080054c0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b094      	sub	sp, #80	; 0x50
 80054c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80054c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	605a      	str	r2, [r3, #4]
 80054d0:	609a      	str	r2, [r3, #8]
 80054d2:	60da      	str	r2, [r3, #12]
 80054d4:	611a      	str	r2, [r3, #16]
 80054d6:	615a      	str	r2, [r3, #20]
 80054d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80054da:	463b      	mov	r3, r7
 80054dc:	2234      	movs	r2, #52	; 0x34
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f010 fb2d 	bl	8015b40 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80054e6:	4b32      	ldr	r3, [pc, #200]	; (80055b0 <MX_TIM16_Init+0xf0>)
 80054e8:	4a32      	ldr	r2, [pc, #200]	; (80055b4 <MX_TIM16_Init+0xf4>)
 80054ea:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 80054ec:	4b30      	ldr	r3, [pc, #192]	; (80055b0 <MX_TIM16_Init+0xf0>)
 80054ee:	f240 2225 	movw	r2, #549	; 0x225
 80054f2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054f4:	4b2e      	ldr	r3, [pc, #184]	; (80055b0 <MX_TIM16_Init+0xf0>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80054fa:	4b2d      	ldr	r3, [pc, #180]	; (80055b0 <MX_TIM16_Init+0xf0>)
 80054fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005500:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005502:	4b2b      	ldr	r3, [pc, #172]	; (80055b0 <MX_TIM16_Init+0xf0>)
 8005504:	2200      	movs	r2, #0
 8005506:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005508:	4b29      	ldr	r3, [pc, #164]	; (80055b0 <MX_TIM16_Init+0xf0>)
 800550a:	2200      	movs	r2, #0
 800550c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800550e:	4b28      	ldr	r3, [pc, #160]	; (80055b0 <MX_TIM16_Init+0xf0>)
 8005510:	2280      	movs	r2, #128	; 0x80
 8005512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005514:	4826      	ldr	r0, [pc, #152]	; (80055b0 <MX_TIM16_Init+0xf0>)
 8005516:	f00b fff6 	bl	8011506 <HAL_TIM_Base_Init>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8005520:	f7ff f964 	bl	80047ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8005524:	4822      	ldr	r0, [pc, #136]	; (80055b0 <MX_TIM16_Init+0xf0>)
 8005526:	f00c f8cb 	bl	80116c0 <HAL_TIM_PWM_Init>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8005530:	f7ff f95c 	bl	80047ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005534:	2360      	movs	r3, #96	; 0x60
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8005538:	f240 13f3 	movw	r3, #499	; 0x1f3
 800553c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800553e:	2300      	movs	r3, #0
 8005540:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005542:	2300      	movs	r3, #0
 8005544:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005546:	2300      	movs	r3, #0
 8005548:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800554a:	2300      	movs	r3, #0
 800554c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800554e:	2300      	movs	r3, #0
 8005550:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005552:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005556:	2200      	movs	r2, #0
 8005558:	4619      	mov	r1, r3
 800555a:	4815      	ldr	r0, [pc, #84]	; (80055b0 <MX_TIM16_Init+0xf0>)
 800555c:	f00c fce2 	bl	8011f24 <HAL_TIM_PWM_ConfigChannel>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 8005566:	f7ff f941 	bl	80047ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800556a:	2300      	movs	r3, #0
 800556c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800556e:	2300      	movs	r3, #0
 8005570:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800557a:	2300      	movs	r3, #0
 800557c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800557e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005582:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005588:	2300      	movs	r3, #0
 800558a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800558c:	463b      	mov	r3, r7
 800558e:	4619      	mov	r1, r3
 8005590:	4807      	ldr	r0, [pc, #28]	; (80055b0 <MX_TIM16_Init+0xf0>)
 8005592:	f00d fbcd 	bl	8012d30 <HAL_TIMEx_ConfigBreakDeadTime>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 800559c:	f7ff f926 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80055a0:	4803      	ldr	r0, [pc, #12]	; (80055b0 <MX_TIM16_Init+0xf0>)
 80055a2:	f000 fb9d 	bl	8005ce0 <HAL_TIM_MspPostInit>

}
 80055a6:	bf00      	nop
 80055a8:	3750      	adds	r7, #80	; 0x50
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000c78 	.word	0x20000c78
 80055b4:	40014400 	.word	0x40014400

080055b8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b094      	sub	sp, #80	; 0x50
 80055bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80055be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	605a      	str	r2, [r3, #4]
 80055c8:	609a      	str	r2, [r3, #8]
 80055ca:	60da      	str	r2, [r3, #12]
 80055cc:	611a      	str	r2, [r3, #16]
 80055ce:	615a      	str	r2, [r3, #20]
 80055d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80055d2:	463b      	mov	r3, r7
 80055d4:	2234      	movs	r2, #52	; 0x34
 80055d6:	2100      	movs	r1, #0
 80055d8:	4618      	mov	r0, r3
 80055da:	f010 fab1 	bl	8015b40 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80055de:	4b32      	ldr	r3, [pc, #200]	; (80056a8 <MX_TIM17_Init+0xf0>)
 80055e0:	4a32      	ldr	r2, [pc, #200]	; (80056ac <MX_TIM17_Init+0xf4>)
 80055e2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 80055e4:	4b30      	ldr	r3, [pc, #192]	; (80056a8 <MX_TIM17_Init+0xf0>)
 80055e6:	f240 2225 	movw	r2, #549	; 0x225
 80055ea:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055ec:	4b2e      	ldr	r3, [pc, #184]	; (80056a8 <MX_TIM17_Init+0xf0>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 80055f2:	4b2d      	ldr	r3, [pc, #180]	; (80056a8 <MX_TIM17_Init+0xf0>)
 80055f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80055f8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055fa:	4b2b      	ldr	r3, [pc, #172]	; (80056a8 <MX_TIM17_Init+0xf0>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005600:	4b29      	ldr	r3, [pc, #164]	; (80056a8 <MX_TIM17_Init+0xf0>)
 8005602:	2200      	movs	r2, #0
 8005604:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005606:	4b28      	ldr	r3, [pc, #160]	; (80056a8 <MX_TIM17_Init+0xf0>)
 8005608:	2280      	movs	r2, #128	; 0x80
 800560a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800560c:	4826      	ldr	r0, [pc, #152]	; (80056a8 <MX_TIM17_Init+0xf0>)
 800560e:	f00b ff7a 	bl	8011506 <HAL_TIM_Base_Init>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8005618:	f7ff f8e8 	bl	80047ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800561c:	4822      	ldr	r0, [pc, #136]	; (80056a8 <MX_TIM17_Init+0xf0>)
 800561e:	f00c f84f 	bl	80116c0 <HAL_TIM_PWM_Init>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8005628:	f7ff f8e0 	bl	80047ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800562c:	2360      	movs	r3, #96	; 0x60
 800562e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8005630:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005634:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005636:	2300      	movs	r3, #0
 8005638:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800563a:	2300      	movs	r3, #0
 800563c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800563e:	2300      	movs	r3, #0
 8005640:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005642:	2300      	movs	r3, #0
 8005644:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005646:	2300      	movs	r3, #0
 8005648:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800564a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800564e:	2200      	movs	r2, #0
 8005650:	4619      	mov	r1, r3
 8005652:	4815      	ldr	r0, [pc, #84]	; (80056a8 <MX_TIM17_Init+0xf0>)
 8005654:	f00c fc66 	bl	8011f24 <HAL_TIM_PWM_ConfigChannel>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 800565e:	f7ff f8c5 	bl	80047ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005662:	2300      	movs	r3, #0
 8005664:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005666:	2300      	movs	r3, #0
 8005668:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800566a:	2300      	movs	r3, #0
 800566c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005672:	2300      	movs	r3, #0
 8005674:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800567a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800567c:	2300      	movs	r3, #0
 800567e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005680:	2300      	movs	r3, #0
 8005682:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8005684:	463b      	mov	r3, r7
 8005686:	4619      	mov	r1, r3
 8005688:	4807      	ldr	r0, [pc, #28]	; (80056a8 <MX_TIM17_Init+0xf0>)
 800568a:	f00d fb51 	bl	8012d30 <HAL_TIMEx_ConfigBreakDeadTime>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8005694:	f7ff f8aa 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8005698:	4803      	ldr	r0, [pc, #12]	; (80056a8 <MX_TIM17_Init+0xf0>)
 800569a:	f000 fb21 	bl	8005ce0 <HAL_TIM_MspPostInit>

}
 800569e:	bf00      	nop
 80056a0:	3750      	adds	r7, #80	; 0x50
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000cc4 	.word	0x20000cc4
 80056ac:	40014800 	.word	0x40014800

080056b0 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056b6:	f107 0310 	add.w	r3, r7, #16
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	605a      	str	r2, [r3, #4]
 80056c0:	609a      	str	r2, [r3, #8]
 80056c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056c4:	1d3b      	adds	r3, r7, #4
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	605a      	str	r2, [r3, #4]
 80056cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80056ce:	4b1e      	ldr	r3, [pc, #120]	; (8005748 <MX_TIM23_Init+0x98>)
 80056d0:	4a1e      	ldr	r2, [pc, #120]	; (800574c <MX_TIM23_Init+0x9c>)
 80056d2:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 80056d4:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <MX_TIM23_Init+0x98>)
 80056d6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80056da:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056dc:	4b1a      	ldr	r3, [pc, #104]	; (8005748 <MX_TIM23_Init+0x98>)
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 1000-1;
 80056e2:	4b19      	ldr	r3, [pc, #100]	; (8005748 <MX_TIM23_Init+0x98>)
 80056e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80056e8:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056ea:	4b17      	ldr	r3, [pc, #92]	; (8005748 <MX_TIM23_Init+0x98>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80056f0:	4b15      	ldr	r3, [pc, #84]	; (8005748 <MX_TIM23_Init+0x98>)
 80056f2:	2280      	movs	r2, #128	; 0x80
 80056f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 80056f6:	4814      	ldr	r0, [pc, #80]	; (8005748 <MX_TIM23_Init+0x98>)
 80056f8:	f00b ff05 	bl	8011506 <HAL_TIM_Base_Init>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8005702:	f7ff f873 	bl	80047ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800570a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 800570c:	f107 0310 	add.w	r3, r7, #16
 8005710:	4619      	mov	r1, r3
 8005712:	480d      	ldr	r0, [pc, #52]	; (8005748 <MX_TIM23_Init+0x98>)
 8005714:	f00c fd1a 	bl	801214c <HAL_TIM_ConfigClockSource>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 800571e:	f7ff f865 	bl	80047ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005722:	2300      	movs	r3, #0
 8005724:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800572a:	1d3b      	adds	r3, r7, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4806      	ldr	r0, [pc, #24]	; (8005748 <MX_TIM23_Init+0x98>)
 8005730:	f00d fa62 	bl	8012bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 800573a:	f7ff f857 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800573e:	bf00      	nop
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20000d10 	.word	0x20000d10
 800574c:	4000e000 	.word	0x4000e000

08005750 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005756:	f107 0310 	add.w	r3, r7, #16
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	605a      	str	r2, [r3, #4]
 8005760:	609a      	str	r2, [r3, #8]
 8005762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005764:	1d3b      	adds	r3, r7, #4
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	605a      	str	r2, [r3, #4]
 800576c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800576e:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <MX_TIM24_Init+0x98>)
 8005770:	4a1e      	ldr	r2, [pc, #120]	; (80057ec <MX_TIM24_Init+0x9c>)
 8005772:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 8005774:	4b1c      	ldr	r3, [pc, #112]	; (80057e8 <MX_TIM24_Init+0x98>)
 8005776:	f44f 7289 	mov.w	r2, #274	; 0x112
 800577a:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800577c:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <MX_TIM24_Init+0x98>)
 800577e:	2200      	movs	r2, #0
 8005780:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8005782:	4b19      	ldr	r3, [pc, #100]	; (80057e8 <MX_TIM24_Init+0x98>)
 8005784:	f04f 32ff 	mov.w	r2, #4294967295
 8005788:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800578a:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <MX_TIM24_Init+0x98>)
 800578c:	2200      	movs	r2, #0
 800578e:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005790:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <MX_TIM24_Init+0x98>)
 8005792:	2200      	movs	r2, #0
 8005794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8005796:	4814      	ldr	r0, [pc, #80]	; (80057e8 <MX_TIM24_Init+0x98>)
 8005798:	f00b feb5 	bl	8011506 <HAL_TIM_Base_Init>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 80057a2:	f7ff f823 	bl	80047ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 80057ac:	f107 0310 	add.w	r3, r7, #16
 80057b0:	4619      	mov	r1, r3
 80057b2:	480d      	ldr	r0, [pc, #52]	; (80057e8 <MX_TIM24_Init+0x98>)
 80057b4:	f00c fcca 	bl	801214c <HAL_TIM_ConfigClockSource>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 80057be:	f7ff f815 	bl	80047ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057c2:	2300      	movs	r3, #0
 80057c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80057ca:	1d3b      	adds	r3, r7, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4806      	ldr	r0, [pc, #24]	; (80057e8 <MX_TIM24_Init+0x98>)
 80057d0:	f00d fa12 	bl	8012bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 80057da:	f7ff f807 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80057de:	bf00      	nop
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000d5c 	.word	0x20000d5c
 80057ec:	4000e400 	.word	0x4000e400

080057f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	; 0x28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057f8:	f107 0314 	add.w	r3, r7, #20
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	60da      	str	r2, [r3, #12]
 8005806:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a3c      	ldr	r2, [pc, #240]	; (8005900 <HAL_TIM_PWM_MspInit+0x110>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d15e      	bne.n	80058d0 <HAL_TIM_PWM_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005812:	4b3c      	ldr	r3, [pc, #240]	; (8005904 <HAL_TIM_PWM_MspInit+0x114>)
 8005814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005818:	4a3a      	ldr	r2, [pc, #232]	; (8005904 <HAL_TIM_PWM_MspInit+0x114>)
 800581a:	f043 0301 	orr.w	r3, r3, #1
 800581e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005822:	4b38      	ldr	r3, [pc, #224]	; (8005904 <HAL_TIM_PWM_MspInit+0x114>)
 8005824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005830:	4b34      	ldr	r3, [pc, #208]	; (8005904 <HAL_TIM_PWM_MspInit+0x114>)
 8005832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005836:	4a33      	ldr	r2, [pc, #204]	; (8005904 <HAL_TIM_PWM_MspInit+0x114>)
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005840:	4b30      	ldr	r3, [pc, #192]	; (8005904 <HAL_TIM_PWM_MspInit+0x114>)
 8005842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 800584e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005854:	2302      	movs	r3, #2
 8005856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005858:	2300      	movs	r3, #0
 800585a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800585c:	2300      	movs	r3, #0
 800585e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005860:	2301      	movs	r3, #1
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 8005864:	f107 0314 	add.w	r3, r7, #20
 8005868:	4619      	mov	r1, r3
 800586a:	4827      	ldr	r0, [pc, #156]	; (8005908 <HAL_TIM_PWM_MspInit+0x118>)
 800586c:	f005 fd14 	bl	800b298 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream2;
 8005870:	4b26      	ldr	r3, [pc, #152]	; (800590c <HAL_TIM_PWM_MspInit+0x11c>)
 8005872:	4a27      	ldr	r2, [pc, #156]	; (8005910 <HAL_TIM_PWM_MspInit+0x120>)
 8005874:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8005876:	4b25      	ldr	r3, [pc, #148]	; (800590c <HAL_TIM_PWM_MspInit+0x11c>)
 8005878:	220b      	movs	r2, #11
 800587a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800587c:	4b23      	ldr	r3, [pc, #140]	; (800590c <HAL_TIM_PWM_MspInit+0x11c>)
 800587e:	2240      	movs	r2, #64	; 0x40
 8005880:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005882:	4b22      	ldr	r3, [pc, #136]	; (800590c <HAL_TIM_PWM_MspInit+0x11c>)
 8005884:	2200      	movs	r2, #0
 8005886:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005888:	4b20      	ldr	r3, [pc, #128]	; (800590c <HAL_TIM_PWM_MspInit+0x11c>)
 800588a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800588e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005890:	4b1e      	ldr	r3, [pc, #120]	; (800590c <HAL_TIM_PWM_MspInit+0x11c>)
 8005892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005896:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005898:	4b1c      	ldr	r3, [pc, #112]	; (800590c <HAL_TIM_PWM_MspInit+0x11c>)
 800589a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800589e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80058a0:	4b1a      	ldr	r3, [pc, #104]	; (800590c <HAL_TIM_PWM_MspInit+0x11c>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80058a6:	4b19      	ldr	r3, [pc, #100]	; (800590c <HAL_TIM_PWM_MspInit+0x11c>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058ac:	4b17      	ldr	r3, [pc, #92]	; (800590c <HAL_TIM_PWM_MspInit+0x11c>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80058b2:	4816      	ldr	r0, [pc, #88]	; (800590c <HAL_TIM_PWM_MspInit+0x11c>)
 80058b4:	f003 fabe 	bl	8008e34 <HAL_DMA_Init>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_TIM_PWM_MspInit+0xd2>
    {
      Error_Handler();
 80058be:	f7fe ff95 	bl	80047ec <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a11      	ldr	r2, [pc, #68]	; (800590c <HAL_TIM_PWM_MspInit+0x11c>)
 80058c6:	625a      	str	r2, [r3, #36]	; 0x24
 80058c8:	4a10      	ldr	r2, [pc, #64]	; (800590c <HAL_TIM_PWM_MspInit+0x11c>)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80058ce:	e013      	b.n	80058f8 <HAL_TIM_PWM_MspInit+0x108>
  else if(tim_pwmHandle->Instance==TIM15)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a0f      	ldr	r2, [pc, #60]	; (8005914 <HAL_TIM_PWM_MspInit+0x124>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d10e      	bne.n	80058f8 <HAL_TIM_PWM_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80058da:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <HAL_TIM_PWM_MspInit+0x114>)
 80058dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058e0:	4a08      	ldr	r2, [pc, #32]	; (8005904 <HAL_TIM_PWM_MspInit+0x114>)
 80058e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <HAL_TIM_PWM_MspInit+0x114>)
 80058ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	68bb      	ldr	r3, [r7, #8]
}
 80058f8:	bf00      	nop
 80058fa:	3728      	adds	r7, #40	; 0x28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40010000 	.word	0x40010000
 8005904:	58024400 	.word	0x58024400
 8005908:	58020000 	.word	0x58020000
 800590c:	20000da8 	.word	0x20000da8
 8005910:	40020040 	.word	0x40020040
 8005914:	40014000 	.word	0x40014000

08005918 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08e      	sub	sp, #56	; 0x38
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	605a      	str	r2, [r3, #4]
 800592a:	609a      	str	r2, [r3, #8]
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005938:	d14e      	bne.n	80059d8 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800593a:	4b5d      	ldr	r3, [pc, #372]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 800593c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005940:	4a5b      	ldr	r2, [pc, #364]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 8005942:	f043 0301 	orr.w	r3, r3, #1
 8005946:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800594a:	4b59      	ldr	r3, [pc, #356]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 800594c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	623b      	str	r3, [r7, #32]
 8005956:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005958:	4b55      	ldr	r3, [pc, #340]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 800595a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800595e:	4a54      	ldr	r2, [pc, #336]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 8005960:	f043 0301 	orr.w	r3, r3, #1
 8005964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005968:	4b51      	ldr	r3, [pc, #324]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 800596a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005976:	4b4e      	ldr	r3, [pc, #312]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 8005978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800597c:	4a4c      	ldr	r2, [pc, #304]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 800597e:	f043 0302 	orr.w	r3, r3, #2
 8005982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005986:	4b4a      	ldr	r3, [pc, #296]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 8005988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC6A_Pin;
 8005994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800599a:	2302      	movs	r3, #2
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059a2:	2300      	movs	r3, #0
 80059a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80059a6:	2301      	movs	r3, #1
 80059a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 80059aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ae:	4619      	mov	r1, r3
 80059b0:	4840      	ldr	r0, [pc, #256]	; (8005ab4 <HAL_TIM_Encoder_MspInit+0x19c>)
 80059b2:	f005 fc71 	bl	800b298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC6B_Pin;
 80059b6:	2308      	movs	r3, #8
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ba:	2302      	movs	r3, #2
 80059bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c2:	2300      	movs	r3, #0
 80059c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80059c6:	2301      	movs	r3, #1
 80059c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 80059ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ce:	4619      	mov	r1, r3
 80059d0:	4839      	ldr	r0, [pc, #228]	; (8005ab8 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80059d2:	f005 fc61 	bl	800b298 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80059d6:	e067      	b.n	8005aa8 <HAL_TIM_Encoder_MspInit+0x190>
  else if(tim_encoderHandle->Instance==TIM4)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a37      	ldr	r2, [pc, #220]	; (8005abc <HAL_TIM_Encoder_MspInit+0x1a4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d12f      	bne.n	8005a42 <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80059e2:	4b33      	ldr	r3, [pc, #204]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 80059e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059e8:	4a31      	ldr	r2, [pc, #196]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 80059ea:	f043 0304 	orr.w	r3, r3, #4
 80059ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80059f2:	4b2f      	ldr	r3, [pc, #188]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 80059f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a00:	4b2b      	ldr	r3, [pc, #172]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 8005a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a06:	4a2a      	ldr	r2, [pc, #168]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 8005a08:	f043 0308 	orr.w	r3, r3, #8
 8005a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a10:	4b27      	ldr	r3, [pc, #156]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 8005a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	613b      	str	r3, [r7, #16]
 8005a1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 8005a1e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a24:	2302      	movs	r3, #2
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005a30:	2302      	movs	r3, #2
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4821      	ldr	r0, [pc, #132]	; (8005ac0 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8005a3c:	f005 fc2c 	bl	800b298 <HAL_GPIO_Init>
}
 8005a40:	e032      	b.n	8005aa8 <HAL_TIM_Encoder_MspInit+0x190>
  else if(tim_encoderHandle->Instance==TIM8)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1f      	ldr	r2, [pc, #124]	; (8005ac4 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d12d      	bne.n	8005aa8 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005a4c:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 8005a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a52:	4a17      	ldr	r2, [pc, #92]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 8005a54:	f043 0302 	orr.w	r3, r3, #2
 8005a58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005a5c:	4b14      	ldr	r3, [pc, #80]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 8005a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a6a:	4b11      	ldr	r3, [pc, #68]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 8005a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a70:	4a0f      	ldr	r2, [pc, #60]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 8005a72:	f043 0304 	orr.w	r3, r3, #4
 8005a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a7a:	4b0d      	ldr	r3, [pc, #52]	; (8005ab0 <HAL_TIM_Encoder_MspInit+0x198>)
 8005a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	60bb      	str	r3, [r7, #8]
 8005a86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 8005a88:	23c0      	movs	r3, #192	; 0xc0
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a94:	2300      	movs	r3, #0
 8005a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4809      	ldr	r0, [pc, #36]	; (8005ac8 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8005aa4:	f005 fbf8 	bl	800b298 <HAL_GPIO_Init>
}
 8005aa8:	bf00      	nop
 8005aaa:	3738      	adds	r7, #56	; 0x38
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	58024400 	.word	0x58024400
 8005ab4:	58020000 	.word	0x58020000
 8005ab8:	58020400 	.word	0x58020400
 8005abc:	40000800 	.word	0x40000800
 8005ac0:	58020c00 	.word	0x58020c00
 8005ac4:	40010400 	.word	0x40010400
 8005ac8:	58020800 	.word	0x58020800

08005acc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b092      	sub	sp, #72	; 0x48
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ad4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	605a      	str	r2, [r3, #4]
 8005ade:	609a      	str	r2, [r3, #8]
 8005ae0:	60da      	str	r2, [r3, #12]
 8005ae2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a72      	ldr	r2, [pc, #456]	; (8005cb4 <HAL_TIM_Base_MspInit+0x1e8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d12e      	bne.n	8005b4c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005aee:	4b72      	ldr	r3, [pc, #456]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005af4:	4a70      	ldr	r2, [pc, #448]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005af6:	f043 0302 	orr.w	r3, r3, #2
 8005afa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005afe:	4b6e      	ldr	r3, [pc, #440]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	633b      	str	r3, [r7, #48]	; 0x30
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b0c:	4b6a      	ldr	r3, [pc, #424]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b12:	4a69      	ldr	r2, [pc, #420]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005b14:	f043 0302 	orr.w	r3, r3, #2
 8005b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b1c:	4b66      	ldr	r3, [pc, #408]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC5B_DIR_Pin;
 8005b2a:	2320      	movs	r3, #32
 8005b2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b36:	2300      	movs	r3, #0
 8005b38:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ENC5B_DIR_GPIO_Port, &GPIO_InitStruct);
 8005b3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005b42:	4619      	mov	r1, r3
 8005b44:	485d      	ldr	r0, [pc, #372]	; (8005cbc <HAL_TIM_Base_MspInit+0x1f0>)
 8005b46:	f005 fba7 	bl	800b298 <HAL_GPIO_Init>
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8005b4a:	e0ae      	b.n	8005caa <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM5)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a5b      	ldr	r2, [pc, #364]	; (8005cc0 <HAL_TIM_Base_MspInit+0x1f4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d10f      	bne.n	8005b76 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005b56:	4b58      	ldr	r3, [pc, #352]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b5c:	4a56      	ldr	r2, [pc, #344]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005b5e:	f043 0308 	orr.w	r3, r3, #8
 8005b62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005b66:	4b54      	ldr	r3, [pc, #336]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b6c:	f003 0308 	and.w	r3, r3, #8
 8005b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005b74:	e099      	b.n	8005caa <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM6)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a52      	ldr	r2, [pc, #328]	; (8005cc4 <HAL_TIM_Base_MspInit+0x1f8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d10f      	bne.n	8005ba0 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005b80:	4b4d      	ldr	r3, [pc, #308]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b86:	4a4c      	ldr	r2, [pc, #304]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005b88:	f043 0310 	orr.w	r3, r3, #16
 8005b8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005b90:	4b49      	ldr	r3, [pc, #292]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005b92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b96:	f003 0310 	and.w	r3, r3, #16
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b9e:	e084      	b.n	8005caa <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM13)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a48      	ldr	r2, [pc, #288]	; (8005cc8 <HAL_TIM_Base_MspInit+0x1fc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d10f      	bne.n	8005bca <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005baa:	4b43      	ldr	r3, [pc, #268]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bb0:	4a41      	ldr	r2, [pc, #260]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005bba:	4b3f      	ldr	r3, [pc, #252]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc4:	623b      	str	r3, [r7, #32]
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
}
 8005bc8:	e06f      	b.n	8005caa <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM14)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a3f      	ldr	r2, [pc, #252]	; (8005ccc <HAL_TIM_Base_MspInit+0x200>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d10f      	bne.n	8005bf4 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005bd4:	4b38      	ldr	r3, [pc, #224]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005bd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bda:	4a37      	ldr	r2, [pc, #220]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005be4:	4b34      	ldr	r3, [pc, #208]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bee:	61fb      	str	r3, [r7, #28]
 8005bf0:	69fb      	ldr	r3, [r7, #28]
}
 8005bf2:	e05a      	b.n	8005caa <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM16)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a35      	ldr	r2, [pc, #212]	; (8005cd0 <HAL_TIM_Base_MspInit+0x204>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d10f      	bne.n	8005c1e <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005bfe:	4b2e      	ldr	r3, [pc, #184]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c04:	4a2c      	ldr	r2, [pc, #176]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005c0e:	4b2a      	ldr	r3, [pc, #168]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	69bb      	ldr	r3, [r7, #24]
}
 8005c1c:	e045      	b.n	8005caa <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM17)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a2c      	ldr	r2, [pc, #176]	; (8005cd4 <HAL_TIM_Base_MspInit+0x208>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d10f      	bne.n	8005c48 <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005c28:	4b23      	ldr	r3, [pc, #140]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c2e:	4a22      	ldr	r2, [pc, #136]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005c38:	4b1f      	ldr	r3, [pc, #124]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	697b      	ldr	r3, [r7, #20]
}
 8005c46:	e030      	b.n	8005caa <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM23)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a22      	ldr	r2, [pc, #136]	; (8005cd8 <HAL_TIM_Base_MspInit+0x20c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d117      	bne.n	8005c82 <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8005c52:	4b19      	ldr	r3, [pc, #100]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c54:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005c58:	4a17      	ldr	r2, [pc, #92]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c5e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005c62:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c64:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8005c70:	2200      	movs	r2, #0
 8005c72:	2100      	movs	r1, #0
 8005c74:	20a1      	movs	r0, #161	; 0xa1
 8005c76:	f002 feaa 	bl	80089ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8005c7a:	20a1      	movs	r0, #161	; 0xa1
 8005c7c:	f002 fec1 	bl	8008a02 <HAL_NVIC_EnableIRQ>
}
 8005c80:	e013      	b.n	8005caa <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM24)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <HAL_TIM_Base_MspInit+0x210>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d10e      	bne.n	8005caa <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8005c8c:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005c92:	4a09      	ldr	r2, [pc, #36]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c98:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005c9c:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005c9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
}
 8005caa:	bf00      	nop
 8005cac:	3748      	adds	r7, #72	; 0x48
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	58024400 	.word	0x58024400
 8005cbc:	58020400 	.word	0x58020400
 8005cc0:	40000c00 	.word	0x40000c00
 8005cc4:	40001000 	.word	0x40001000
 8005cc8:	40001c00 	.word	0x40001c00
 8005ccc:	40002000 	.word	0x40002000
 8005cd0:	40014400 	.word	0x40014400
 8005cd4:	40014800 	.word	0x40014800
 8005cd8:	4000e000 	.word	0x4000e000
 8005cdc:	4000e400 	.word	0x4000e400

08005ce0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b090      	sub	sp, #64	; 0x40
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	605a      	str	r2, [r3, #4]
 8005cf2:	609a      	str	r2, [r3, #8]
 8005cf4:	60da      	str	r2, [r3, #12]
 8005cf6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a95      	ldr	r2, [pc, #596]	; (8005f54 <HAL_TIM_MspPostInit+0x274>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d120      	bne.n	8005d44 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d02:	4b95      	ldr	r3, [pc, #596]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d08:	4a93      	ldr	r2, [pc, #588]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d12:	4b91      	ldr	r3, [pc, #580]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 8005d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d26:	2302      	movs	r3, #2
 8005d28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005d32:	2301      	movs	r3, #1
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 8005d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4887      	ldr	r0, [pc, #540]	; (8005f5c <HAL_TIM_MspPostInit+0x27c>)
 8005d3e:	f005 faab 	bl	800b298 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8005d42:	e103      	b.n	8005f4c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM3)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a85      	ldr	r2, [pc, #532]	; (8005f60 <HAL_TIM_MspPostInit+0x280>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d11f      	bne.n	8005d8e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d4e:	4b82      	ldr	r3, [pc, #520]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d54:	4a80      	ldr	r2, [pc, #512]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005d56:	f043 0302 	orr.w	r3, r3, #2
 8005d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d5e:	4b7e      	ldr	r3, [pc, #504]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = ENC5A_StepGriper_Pin;
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d70:	2302      	movs	r3, #2
 8005d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC5A_StepGriper_GPIO_Port, &GPIO_InitStruct);
 8005d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d84:	4619      	mov	r1, r3
 8005d86:	4877      	ldr	r0, [pc, #476]	; (8005f64 <HAL_TIM_MspPostInit+0x284>)
 8005d88:	f005 fa86 	bl	800b298 <HAL_GPIO_Init>
}
 8005d8c:	e0de      	b.n	8005f4c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM5)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a75      	ldr	r2, [pc, #468]	; (8005f68 <HAL_TIM_MspPostInit+0x288>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d11f      	bne.n	8005dd8 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d98:	4b6f      	ldr	r3, [pc, #444]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d9e:	4a6e      	ldr	r2, [pc, #440]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005da0:	f043 0301 	orr.w	r3, r3, #1
 8005da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005da8:	4b6b      	ldr	r3, [pc, #428]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	623b      	str	r3, [r7, #32]
 8005db4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005db6:	2303      	movs	r3, #3
 8005db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4862      	ldr	r0, [pc, #392]	; (8005f5c <HAL_TIM_MspPostInit+0x27c>)
 8005dd2:	f005 fa61 	bl	800b298 <HAL_GPIO_Init>
}
 8005dd6:	e0b9      	b.n	8005f4c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM13)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a63      	ldr	r2, [pc, #396]	; (8005f6c <HAL_TIM_MspPostInit+0x28c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d11f      	bne.n	8005e22 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005de2:	4b5d      	ldr	r3, [pc, #372]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005de8:	4a5b      	ldr	r2, [pc, #364]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005df2:	4b59      	ldr	r3, [pc, #356]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	61fb      	str	r3, [r7, #28]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 8005e00:	2340      	movs	r3, #64	; 0x40
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e04:	2302      	movs	r3, #2
 8005e06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8005e10:	2309      	movs	r3, #9
 8005e12:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8005e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4850      	ldr	r0, [pc, #320]	; (8005f5c <HAL_TIM_MspPostInit+0x27c>)
 8005e1c:	f005 fa3c 	bl	800b298 <HAL_GPIO_Init>
}
 8005e20:	e094      	b.n	8005f4c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM14)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a52      	ldr	r2, [pc, #328]	; (8005f70 <HAL_TIM_MspPostInit+0x290>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d11f      	bne.n	8005e6c <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e2c:	4b4a      	ldr	r3, [pc, #296]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e32:	4a49      	ldr	r2, [pc, #292]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005e34:	f043 0301 	orr.w	r3, r3, #1
 8005e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e3c:	4b46      	ldr	r3, [pc, #280]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8005e4a:	2380      	movs	r3, #128	; 0x80
 8005e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e4e:	2302      	movs	r3, #2
 8005e50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e56:	2300      	movs	r3, #0
 8005e58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8005e5a:	2309      	movs	r3, #9
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8005e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e62:	4619      	mov	r1, r3
 8005e64:	483d      	ldr	r0, [pc, #244]	; (8005f5c <HAL_TIM_MspPostInit+0x27c>)
 8005e66:	f005 fa17 	bl	800b298 <HAL_GPIO_Init>
}
 8005e6a:	e06f      	b.n	8005f4c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM15)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a40      	ldr	r2, [pc, #256]	; (8005f74 <HAL_TIM_MspPostInit+0x294>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d11f      	bne.n	8005eb6 <HAL_TIM_MspPostInit+0x1d6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e76:	4b38      	ldr	r3, [pc, #224]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e7c:	4a36      	ldr	r2, [pc, #216]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005e7e:	f043 0310 	orr.w	r3, r3, #16
 8005e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e86:	4b34      	ldr	r3, [pc, #208]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e8c:	f003 0310 	and.w	r3, r3, #16
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005e94:	2320      	movs	r3, #32
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005eac:	4619      	mov	r1, r3
 8005eae:	4832      	ldr	r0, [pc, #200]	; (8005f78 <HAL_TIM_MspPostInit+0x298>)
 8005eb0:	f005 f9f2 	bl	800b298 <HAL_GPIO_Init>
}
 8005eb4:	e04a      	b.n	8005f4c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM16)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a30      	ldr	r2, [pc, #192]	; (8005f7c <HAL_TIM_MspPostInit+0x29c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d120      	bne.n	8005f02 <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ec0:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ec6:	4a24      	ldr	r2, [pc, #144]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005ec8:	f043 0302 	orr.w	r3, r3, #2
 8005ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ed0:	4b21      	ldr	r3, [pc, #132]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP4_Pin;
 8005ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eec:	2300      	movs	r3, #0
 8005eee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 8005ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ef8:	4619      	mov	r1, r3
 8005efa:	481a      	ldr	r0, [pc, #104]	; (8005f64 <HAL_TIM_MspPostInit+0x284>)
 8005efc:	f005 f9cc 	bl	800b298 <HAL_GPIO_Init>
}
 8005f00:	e024      	b.n	8005f4c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM17)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1e      	ldr	r2, [pc, #120]	; (8005f80 <HAL_TIM_MspPostInit+0x2a0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d11f      	bne.n	8005f4c <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f0c:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f12:	4a11      	ldr	r2, [pc, #68]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005f14:	f043 0302 	orr.w	r3, r3, #2
 8005f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f1c:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <HAL_TIM_MspPostInit+0x278>)
 8005f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP5_Pin;
 8005f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f30:	2302      	movs	r3, #2
 8005f32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 8005f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f44:	4619      	mov	r1, r3
 8005f46:	4807      	ldr	r0, [pc, #28]	; (8005f64 <HAL_TIM_MspPostInit+0x284>)
 8005f48:	f005 f9a6 	bl	800b298 <HAL_GPIO_Init>
}
 8005f4c:	bf00      	nop
 8005f4e:	3740      	adds	r7, #64	; 0x40
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40010000 	.word	0x40010000
 8005f58:	58024400 	.word	0x58024400
 8005f5c:	58020000 	.word	0x58020000
 8005f60:	40000400 	.word	0x40000400
 8005f64:	58020400 	.word	0x58020400
 8005f68:	40000c00 	.word	0x40000c00
 8005f6c:	40001c00 	.word	0x40001c00
 8005f70:	40002000 	.word	0x40002000
 8005f74:	40014000 	.word	0x40014000
 8005f78:	58021000 	.word	0x58021000
 8005f7c:	40014400 	.word	0x40014400
 8005f80:	40014800 	.word	0x40014800

08005f84 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005f88:	4b24      	ldr	r3, [pc, #144]	; (800601c <MX_UART5_Init+0x98>)
 8005f8a:	4a25      	ldr	r2, [pc, #148]	; (8006020 <MX_UART5_Init+0x9c>)
 8005f8c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8005f8e:	4b23      	ldr	r3, [pc, #140]	; (800601c <MX_UART5_Init+0x98>)
 8005f90:	4a24      	ldr	r2, [pc, #144]	; (8006024 <MX_UART5_Init+0xa0>)
 8005f92:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005f94:	4b21      	ldr	r3, [pc, #132]	; (800601c <MX_UART5_Init+0x98>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005f9a:	4b20      	ldr	r3, [pc, #128]	; (800601c <MX_UART5_Init+0x98>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005fa0:	4b1e      	ldr	r3, [pc, #120]	; (800601c <MX_UART5_Init+0x98>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005fa6:	4b1d      	ldr	r3, [pc, #116]	; (800601c <MX_UART5_Init+0x98>)
 8005fa8:	220c      	movs	r2, #12
 8005faa:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fac:	4b1b      	ldr	r3, [pc, #108]	; (800601c <MX_UART5_Init+0x98>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fb2:	4b1a      	ldr	r3, [pc, #104]	; (800601c <MX_UART5_Init+0x98>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005fb8:	4b18      	ldr	r3, [pc, #96]	; (800601c <MX_UART5_Init+0x98>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005fbe:	4b17      	ldr	r3, [pc, #92]	; (800601c <MX_UART5_Init+0x98>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005fc4:	4b15      	ldr	r3, [pc, #84]	; (800601c <MX_UART5_Init+0x98>)
 8005fc6:	2208      	movs	r2, #8
 8005fc8:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005fca:	4b14      	ldr	r3, [pc, #80]	; (800601c <MX_UART5_Init+0x98>)
 8005fcc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005fd0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005fd2:	4812      	ldr	r0, [pc, #72]	; (800601c <MX_UART5_Init+0x98>)
 8005fd4:	f00c ff6a 	bl	8012eac <HAL_UART_Init>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <MX_UART5_Init+0x5e>
  {
    Error_Handler();
 8005fde:	f7fe fc05 	bl	80047ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	480d      	ldr	r0, [pc, #52]	; (800601c <MX_UART5_Init+0x98>)
 8005fe6:	f00f fcb6 	bl	8015956 <HAL_UARTEx_SetTxFifoThreshold>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <MX_UART5_Init+0x70>
  {
    Error_Handler();
 8005ff0:	f7fe fbfc 	bl	80047ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	4809      	ldr	r0, [pc, #36]	; (800601c <MX_UART5_Init+0x98>)
 8005ff8:	f00f fceb 	bl	80159d2 <HAL_UARTEx_SetRxFifoThreshold>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <MX_UART5_Init+0x82>
  {
    Error_Handler();
 8006002:	f7fe fbf3 	bl	80047ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8006006:	4805      	ldr	r0, [pc, #20]	; (800601c <MX_UART5_Init+0x98>)
 8006008:	f00f fc6c 	bl	80158e4 <HAL_UARTEx_DisableFifoMode>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <MX_UART5_Init+0x92>
  {
    Error_Handler();
 8006012:	f7fe fbeb 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006016:	bf00      	nop
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20000e20 	.word	0x20000e20
 8006020:	40005000 	.word	0x40005000
 8006024:	000f4240 	.word	0x000f4240

08006028 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800602c:	4b22      	ldr	r3, [pc, #136]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 800602e:	4a23      	ldr	r2, [pc, #140]	; (80060bc <MX_USART1_UART_Init+0x94>)
 8006030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8006032:	4b21      	ldr	r3, [pc, #132]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 8006034:	4a22      	ldr	r2, [pc, #136]	; (80060c0 <MX_USART1_UART_Init+0x98>)
 8006036:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006038:	4b1f      	ldr	r3, [pc, #124]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 800603a:	2200      	movs	r2, #0
 800603c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800603e:	4b1e      	ldr	r3, [pc, #120]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 8006040:	2200      	movs	r2, #0
 8006042:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006044:	4b1c      	ldr	r3, [pc, #112]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 8006046:	2200      	movs	r2, #0
 8006048:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800604a:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 800604c:	220c      	movs	r2, #12
 800604e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006050:	4b19      	ldr	r3, [pc, #100]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 8006052:	2200      	movs	r2, #0
 8006054:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006056:	4b18      	ldr	r3, [pc, #96]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 8006058:	2200      	movs	r2, #0
 800605a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800605c:	4b16      	ldr	r3, [pc, #88]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 800605e:	2200      	movs	r2, #0
 8006060:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006062:	4b15      	ldr	r3, [pc, #84]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 8006064:	2200      	movs	r2, #0
 8006066:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006068:	4b13      	ldr	r3, [pc, #76]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 800606a:	2200      	movs	r2, #0
 800606c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800606e:	4812      	ldr	r0, [pc, #72]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 8006070:	f00c ff1c 	bl	8012eac <HAL_UART_Init>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800607a:	f7fe fbb7 	bl	80047ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800607e:	2100      	movs	r1, #0
 8006080:	480d      	ldr	r0, [pc, #52]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 8006082:	f00f fc68 	bl	8015956 <HAL_UARTEx_SetTxFifoThreshold>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 800608c:	f7fe fbae 	bl	80047ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006090:	2100      	movs	r1, #0
 8006092:	4809      	ldr	r0, [pc, #36]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 8006094:	f00f fc9d 	bl	80159d2 <HAL_UARTEx_SetRxFifoThreshold>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800609e:	f7fe fba5 	bl	80047ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80060a2:	4805      	ldr	r0, [pc, #20]	; (80060b8 <MX_USART1_UART_Init+0x90>)
 80060a4:	f00f fc1e 	bl	80158e4 <HAL_UARTEx_DisableFifoMode>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80060ae:	f7fe fb9d 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80060b2:	bf00      	nop
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20000eb0 	.word	0x20000eb0
 80060bc:	40011000 	.word	0x40011000
 80060c0:	001e8480 	.word	0x001e8480

080060c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80060c8:	4b22      	ldr	r3, [pc, #136]	; (8006154 <MX_USART3_UART_Init+0x90>)
 80060ca:	4a23      	ldr	r2, [pc, #140]	; (8006158 <MX_USART3_UART_Init+0x94>)
 80060cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80060ce:	4b21      	ldr	r3, [pc, #132]	; (8006154 <MX_USART3_UART_Init+0x90>)
 80060d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80060d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80060d6:	4b1f      	ldr	r3, [pc, #124]	; (8006154 <MX_USART3_UART_Init+0x90>)
 80060d8:	2200      	movs	r2, #0
 80060da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80060dc:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <MX_USART3_UART_Init+0x90>)
 80060de:	2200      	movs	r2, #0
 80060e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80060e2:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <MX_USART3_UART_Init+0x90>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80060e8:	4b1a      	ldr	r3, [pc, #104]	; (8006154 <MX_USART3_UART_Init+0x90>)
 80060ea:	220c      	movs	r2, #12
 80060ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060ee:	4b19      	ldr	r3, [pc, #100]	; (8006154 <MX_USART3_UART_Init+0x90>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80060f4:	4b17      	ldr	r3, [pc, #92]	; (8006154 <MX_USART3_UART_Init+0x90>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80060fa:	4b16      	ldr	r3, [pc, #88]	; (8006154 <MX_USART3_UART_Init+0x90>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006100:	4b14      	ldr	r3, [pc, #80]	; (8006154 <MX_USART3_UART_Init+0x90>)
 8006102:	2200      	movs	r2, #0
 8006104:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006106:	4b13      	ldr	r3, [pc, #76]	; (8006154 <MX_USART3_UART_Init+0x90>)
 8006108:	2200      	movs	r2, #0
 800610a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800610c:	4811      	ldr	r0, [pc, #68]	; (8006154 <MX_USART3_UART_Init+0x90>)
 800610e:	f00c fecd 	bl	8012eac <HAL_UART_Init>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006118:	f7fe fb68 	bl	80047ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800611c:	2100      	movs	r1, #0
 800611e:	480d      	ldr	r0, [pc, #52]	; (8006154 <MX_USART3_UART_Init+0x90>)
 8006120:	f00f fc19 	bl	8015956 <HAL_UARTEx_SetTxFifoThreshold>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800612a:	f7fe fb5f 	bl	80047ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800612e:	2100      	movs	r1, #0
 8006130:	4808      	ldr	r0, [pc, #32]	; (8006154 <MX_USART3_UART_Init+0x90>)
 8006132:	f00f fc4e 	bl	80159d2 <HAL_UARTEx_SetRxFifoThreshold>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800613c:	f7fe fb56 	bl	80047ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006140:	4804      	ldr	r0, [pc, #16]	; (8006154 <MX_USART3_UART_Init+0x90>)
 8006142:	f00f fbcf 	bl	80158e4 <HAL_UARTEx_DisableFifoMode>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800614c:	f7fe fb4e 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006150:	bf00      	nop
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20000f40 	.word	0x20000f40
 8006158:	40004800 	.word	0x40004800

0800615c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08e      	sub	sp, #56	; 0x38
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	605a      	str	r2, [r3, #4]
 800616e:	609a      	str	r2, [r3, #8]
 8006170:	60da      	str	r2, [r3, #12]
 8006172:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a86      	ldr	r2, [pc, #536]	; (8006394 <HAL_UART_MspInit+0x238>)
 800617a:	4293      	cmp	r3, r2
 800617c:	f040 8094 	bne.w	80062a8 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8006180:	4b85      	ldr	r3, [pc, #532]	; (8006398 <HAL_UART_MspInit+0x23c>)
 8006182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006186:	4a84      	ldr	r2, [pc, #528]	; (8006398 <HAL_UART_MspInit+0x23c>)
 8006188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800618c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006190:	4b81      	ldr	r3, [pc, #516]	; (8006398 <HAL_UART_MspInit+0x23c>)
 8006192:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800619a:	623b      	str	r3, [r7, #32]
 800619c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800619e:	4b7e      	ldr	r3, [pc, #504]	; (8006398 <HAL_UART_MspInit+0x23c>)
 80061a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061a4:	4a7c      	ldr	r2, [pc, #496]	; (8006398 <HAL_UART_MspInit+0x23c>)
 80061a6:	f043 0302 	orr.w	r3, r3, #2
 80061aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061ae:	4b7a      	ldr	r3, [pc, #488]	; (8006398 <HAL_UART_MspInit+0x23c>)
 80061b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80061bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061c2:	2302      	movs	r3, #2
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ca:	2300      	movs	r3, #0
 80061cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80061ce:	230e      	movs	r3, #14
 80061d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061d6:	4619      	mov	r1, r3
 80061d8:	4870      	ldr	r0, [pc, #448]	; (800639c <HAL_UART_MspInit+0x240>)
 80061da:	f005 f85d 	bl	800b298 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80061de:	4b70      	ldr	r3, [pc, #448]	; (80063a0 <HAL_UART_MspInit+0x244>)
 80061e0:	4a70      	ldr	r2, [pc, #448]	; (80063a4 <HAL_UART_MspInit+0x248>)
 80061e2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80061e4:	4b6e      	ldr	r3, [pc, #440]	; (80063a0 <HAL_UART_MspInit+0x244>)
 80061e6:	2241      	movs	r2, #65	; 0x41
 80061e8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061ea:	4b6d      	ldr	r3, [pc, #436]	; (80063a0 <HAL_UART_MspInit+0x244>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061f0:	4b6b      	ldr	r3, [pc, #428]	; (80063a0 <HAL_UART_MspInit+0x244>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80061f6:	4b6a      	ldr	r3, [pc, #424]	; (80063a0 <HAL_UART_MspInit+0x244>)
 80061f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061fc:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061fe:	4b68      	ldr	r3, [pc, #416]	; (80063a0 <HAL_UART_MspInit+0x244>)
 8006200:	2200      	movs	r2, #0
 8006202:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006204:	4b66      	ldr	r3, [pc, #408]	; (80063a0 <HAL_UART_MspInit+0x244>)
 8006206:	2200      	movs	r2, #0
 8006208:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800620a:	4b65      	ldr	r3, [pc, #404]	; (80063a0 <HAL_UART_MspInit+0x244>)
 800620c:	2200      	movs	r2, #0
 800620e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006210:	4b63      	ldr	r3, [pc, #396]	; (80063a0 <HAL_UART_MspInit+0x244>)
 8006212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006216:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006218:	4b61      	ldr	r3, [pc, #388]	; (80063a0 <HAL_UART_MspInit+0x244>)
 800621a:	2200      	movs	r2, #0
 800621c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800621e:	4860      	ldr	r0, [pc, #384]	; (80063a0 <HAL_UART_MspInit+0x244>)
 8006220:	f002 fe08 	bl	8008e34 <HAL_DMA_Init>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800622a:	f7fe fadf 	bl	80047ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a5b      	ldr	r2, [pc, #364]	; (80063a0 <HAL_UART_MspInit+0x244>)
 8006232:	67da      	str	r2, [r3, #124]	; 0x7c
 8006234:	4a5a      	ldr	r2, [pc, #360]	; (80063a0 <HAL_UART_MspInit+0x244>)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream1;
 800623a:	4b5b      	ldr	r3, [pc, #364]	; (80063a8 <HAL_UART_MspInit+0x24c>)
 800623c:	4a5b      	ldr	r2, [pc, #364]	; (80063ac <HAL_UART_MspInit+0x250>)
 800623e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8006240:	4b59      	ldr	r3, [pc, #356]	; (80063a8 <HAL_UART_MspInit+0x24c>)
 8006242:	2242      	movs	r2, #66	; 0x42
 8006244:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006246:	4b58      	ldr	r3, [pc, #352]	; (80063a8 <HAL_UART_MspInit+0x24c>)
 8006248:	2240      	movs	r2, #64	; 0x40
 800624a:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800624c:	4b56      	ldr	r3, [pc, #344]	; (80063a8 <HAL_UART_MspInit+0x24c>)
 800624e:	2200      	movs	r2, #0
 8006250:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006252:	4b55      	ldr	r3, [pc, #340]	; (80063a8 <HAL_UART_MspInit+0x24c>)
 8006254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006258:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800625a:	4b53      	ldr	r3, [pc, #332]	; (80063a8 <HAL_UART_MspInit+0x24c>)
 800625c:	2200      	movs	r2, #0
 800625e:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006260:	4b51      	ldr	r3, [pc, #324]	; (80063a8 <HAL_UART_MspInit+0x24c>)
 8006262:	2200      	movs	r2, #0
 8006264:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8006266:	4b50      	ldr	r3, [pc, #320]	; (80063a8 <HAL_UART_MspInit+0x24c>)
 8006268:	2200      	movs	r2, #0
 800626a:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800626c:	4b4e      	ldr	r3, [pc, #312]	; (80063a8 <HAL_UART_MspInit+0x24c>)
 800626e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006272:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006274:	4b4c      	ldr	r3, [pc, #304]	; (80063a8 <HAL_UART_MspInit+0x24c>)
 8006276:	2200      	movs	r2, #0
 8006278:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800627a:	484b      	ldr	r0, [pc, #300]	; (80063a8 <HAL_UART_MspInit+0x24c>)
 800627c:	f002 fdda 	bl	8008e34 <HAL_DMA_Init>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8006286:	f7fe fab1 	bl	80047ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a46      	ldr	r2, [pc, #280]	; (80063a8 <HAL_UART_MspInit+0x24c>)
 800628e:	679a      	str	r2, [r3, #120]	; 0x78
 8006290:	4a45      	ldr	r2, [pc, #276]	; (80063a8 <HAL_UART_MspInit+0x24c>)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8006296:	2200      	movs	r2, #0
 8006298:	2100      	movs	r1, #0
 800629a:	2035      	movs	r0, #53	; 0x35
 800629c:	f002 fb97 	bl	80089ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80062a0:	2035      	movs	r0, #53	; 0x35
 80062a2:	f002 fbae 	bl	8008a02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80062a6:	e070      	b.n	800638a <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a40      	ldr	r2, [pc, #256]	; (80063b0 <HAL_UART_MspInit+0x254>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d12f      	bne.n	8006312 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80062b2:	4b39      	ldr	r3, [pc, #228]	; (8006398 <HAL_UART_MspInit+0x23c>)
 80062b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062b8:	4a37      	ldr	r2, [pc, #220]	; (8006398 <HAL_UART_MspInit+0x23c>)
 80062ba:	f043 0310 	orr.w	r3, r3, #16
 80062be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80062c2:	4b35      	ldr	r3, [pc, #212]	; (8006398 <HAL_UART_MspInit+0x23c>)
 80062c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062c8:	f003 0310 	and.w	r3, r3, #16
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062d0:	4b31      	ldr	r3, [pc, #196]	; (8006398 <HAL_UART_MspInit+0x23c>)
 80062d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062d6:	4a30      	ldr	r2, [pc, #192]	; (8006398 <HAL_UART_MspInit+0x23c>)
 80062d8:	f043 0302 	orr.w	r3, r3, #2
 80062dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80062e0:	4b2d      	ldr	r3, [pc, #180]	; (8006398 <HAL_UART_MspInit+0x23c>)
 80062e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80062ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062f4:	2302      	movs	r3, #2
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f8:	2300      	movs	r3, #0
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062fc:	2300      	movs	r3, #0
 80062fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006300:	2304      	movs	r3, #4
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006308:	4619      	mov	r1, r3
 800630a:	4824      	ldr	r0, [pc, #144]	; (800639c <HAL_UART_MspInit+0x240>)
 800630c:	f004 ffc4 	bl	800b298 <HAL_GPIO_Init>
}
 8006310:	e03b      	b.n	800638a <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART3)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a27      	ldr	r2, [pc, #156]	; (80063b4 <HAL_UART_MspInit+0x258>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d136      	bne.n	800638a <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800631c:	4b1e      	ldr	r3, [pc, #120]	; (8006398 <HAL_UART_MspInit+0x23c>)
 800631e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006322:	4a1d      	ldr	r2, [pc, #116]	; (8006398 <HAL_UART_MspInit+0x23c>)
 8006324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006328:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800632c:	4b1a      	ldr	r3, [pc, #104]	; (8006398 <HAL_UART_MspInit+0x23c>)
 800632e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800633a:	4b17      	ldr	r3, [pc, #92]	; (8006398 <HAL_UART_MspInit+0x23c>)
 800633c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006340:	4a15      	ldr	r2, [pc, #84]	; (8006398 <HAL_UART_MspInit+0x23c>)
 8006342:	f043 0308 	orr.w	r3, r3, #8
 8006346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800634a:	4b13      	ldr	r3, [pc, #76]	; (8006398 <HAL_UART_MspInit+0x23c>)
 800634c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006350:	f003 0308 	and.w	r3, r3, #8
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006358:	f44f 7340 	mov.w	r3, #768	; 0x300
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800635e:	2302      	movs	r3, #2
 8006360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006362:	2300      	movs	r3, #0
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006366:	2300      	movs	r3, #0
 8006368:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800636a:	2307      	movs	r3, #7
 800636c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800636e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006372:	4619      	mov	r1, r3
 8006374:	4810      	ldr	r0, [pc, #64]	; (80063b8 <HAL_UART_MspInit+0x25c>)
 8006376:	f004 ff8f 	bl	800b298 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800637a:	2200      	movs	r2, #0
 800637c:	2100      	movs	r1, #0
 800637e:	2027      	movs	r0, #39	; 0x27
 8006380:	f002 fb25 	bl	80089ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006384:	2027      	movs	r0, #39	; 0x27
 8006386:	f002 fb3c 	bl	8008a02 <HAL_NVIC_EnableIRQ>
}
 800638a:	bf00      	nop
 800638c:	3738      	adds	r7, #56	; 0x38
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	40005000 	.word	0x40005000
 8006398:	58024400 	.word	0x58024400
 800639c:	58020400 	.word	0x58020400
 80063a0:	20000fd0 	.word	0x20000fd0
 80063a4:	40020010 	.word	0x40020010
 80063a8:	20001048 	.word	0x20001048
 80063ac:	40020028 	.word	0x40020028
 80063b0:	40011000 	.word	0x40011000
 80063b4:	40004800 	.word	0x40004800
 80063b8:	58020c00 	.word	0x58020c00

080063bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80063bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80063f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80063c0:	f7fe fc12 	bl	8004be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80063c4:	480c      	ldr	r0, [pc, #48]	; (80063f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80063c6:	490d      	ldr	r1, [pc, #52]	; (80063fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80063c8:	4a0d      	ldr	r2, [pc, #52]	; (8006400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80063ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063cc:	e002      	b.n	80063d4 <LoopCopyDataInit>

080063ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80063d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80063d2:	3304      	adds	r3, #4

080063d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80063d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80063d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80063d8:	d3f9      	bcc.n	80063ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80063da:	4a0a      	ldr	r2, [pc, #40]	; (8006404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80063dc:	4c0a      	ldr	r4, [pc, #40]	; (8006408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80063de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80063e0:	e001      	b.n	80063e6 <LoopFillZerobss>

080063e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80063e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80063e4:	3204      	adds	r2, #4

080063e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80063e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80063e8:	d3fb      	bcc.n	80063e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80063ea:	f00f fb85 	bl	8015af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80063ee:	f7fc fbd3 	bl	8002b98 <main>
  bx  lr
 80063f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80063f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80063f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80063fc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8006400:	08016e70 	.word	0x08016e70
  ldr r2, =_sbss
 8006404:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8006408:	200010c4 	.word	0x200010c4

0800640c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800640c:	e7fe      	b.n	800640c <ADC_IRQHandler>
	...

08006410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006416:	2003      	movs	r0, #3
 8006418:	f002 face 	bl	80089b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800641c:	f007 fe64 	bl	800e0e8 <HAL_RCC_GetSysClockFreq>
 8006420:	4602      	mov	r2, r0
 8006422:	4b15      	ldr	r3, [pc, #84]	; (8006478 <HAL_Init+0x68>)
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	0a1b      	lsrs	r3, r3, #8
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	4913      	ldr	r1, [pc, #76]	; (800647c <HAL_Init+0x6c>)
 800642e:	5ccb      	ldrb	r3, [r1, r3]
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	fa22 f303 	lsr.w	r3, r2, r3
 8006438:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800643a:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <HAL_Init+0x68>)
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	4a0e      	ldr	r2, [pc, #56]	; (800647c <HAL_Init+0x6c>)
 8006444:	5cd3      	ldrb	r3, [r2, r3]
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	fa22 f303 	lsr.w	r3, r2, r3
 8006450:	4a0b      	ldr	r2, [pc, #44]	; (8006480 <HAL_Init+0x70>)
 8006452:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006454:	4a0b      	ldr	r2, [pc, #44]	; (8006484 <HAL_Init+0x74>)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800645a:	2000      	movs	r0, #0
 800645c:	f000 f814 	bl	8006488 <HAL_InitTick>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e002      	b.n	8006470 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800646a:	f7fe fb29 	bl	8004ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	58024400 	.word	0x58024400
 800647c:	08016bd4 	.word	0x08016bd4
 8006480:	20000014 	.word	0x20000014
 8006484:	20000010 	.word	0x20000010

08006488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006490:	4b15      	ldr	r3, [pc, #84]	; (80064e8 <HAL_InitTick+0x60>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e021      	b.n	80064e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800649c:	4b13      	ldr	r3, [pc, #76]	; (80064ec <HAL_InitTick+0x64>)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <HAL_InitTick+0x60>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	4619      	mov	r1, r3
 80064a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80064ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b2:	4618      	mov	r0, r3
 80064b4:	f002 fab3 	bl	8008a1e <HAL_SYSTICK_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e00e      	b.n	80064e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b0f      	cmp	r3, #15
 80064c6:	d80a      	bhi.n	80064de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064c8:	2200      	movs	r2, #0
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	f002 fa7d 	bl	80089ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064d4:	4a06      	ldr	r2, [pc, #24]	; (80064f0 <HAL_InitTick+0x68>)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	e000      	b.n	80064e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	2000001c 	.word	0x2000001c
 80064ec:	20000010 	.word	0x20000010
 80064f0:	20000018 	.word	0x20000018

080064f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80064f8:	4b06      	ldr	r3, [pc, #24]	; (8006514 <HAL_IncTick+0x20>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	4b06      	ldr	r3, [pc, #24]	; (8006518 <HAL_IncTick+0x24>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4413      	add	r3, r2
 8006504:	4a04      	ldr	r2, [pc, #16]	; (8006518 <HAL_IncTick+0x24>)
 8006506:	6013      	str	r3, [r2, #0]
}
 8006508:	bf00      	nop
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	2000001c 	.word	0x2000001c
 8006518:	200010c0 	.word	0x200010c0

0800651c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
  return uwTick;
 8006520:	4b03      	ldr	r3, [pc, #12]	; (8006530 <HAL_GetTick+0x14>)
 8006522:	681b      	ldr	r3, [r3, #0]
}
 8006524:	4618      	mov	r0, r3
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	200010c0 	.word	0x200010c0

08006534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800653c:	f7ff ffee 	bl	800651c <HAL_GetTick>
 8006540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654c:	d005      	beq.n	800655a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800654e:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <HAL_Delay+0x44>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800655a:	bf00      	nop
 800655c:	f7ff ffde 	bl	800651c <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	429a      	cmp	r2, r3
 800656a:	d8f7      	bhi.n	800655c <HAL_Delay+0x28>
  {
  }
}
 800656c:	bf00      	nop
 800656e:	bf00      	nop
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	2000001c 	.word	0x2000001c

0800657c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	609a      	str	r2, [r3, #8]
}
 8006596:	bf00      	nop
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	609a      	str	r2, [r3, #8]
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3360      	adds	r3, #96	; 0x60
 80065f6:	461a      	mov	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a10      	ldr	r2, [pc, #64]	; (8006644 <LL_ADC_SetOffset+0x60>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d10b      	bne.n	8006620 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	4313      	orrs	r3, r2
 8006616:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800661e:	e00b      	b.n	8006638 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	430b      	orrs	r3, r1
 8006632:	431a      	orrs	r2, r3
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	601a      	str	r2, [r3, #0]
}
 8006638:	bf00      	nop
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	58026000 	.word	0x58026000

08006648 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3360      	adds	r3, #96	; 0x60
 8006656:	461a      	mov	r2, r3
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f003 031f 	and.w	r3, r3, #31
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	fa01 f303 	lsl.w	r3, r1, r3
 8006694:	431a      	orrs	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	611a      	str	r2, [r3, #16]
}
 800669a:	bf00      	nop
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
	...

080066a8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4a0c      	ldr	r2, [pc, #48]	; (80066e8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00e      	beq.n	80066da <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3360      	adds	r3, #96	; 0x60
 80066c0:	461a      	mov	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	431a      	orrs	r2, r3
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	601a      	str	r2, [r3, #0]
  }
}
 80066da:	bf00      	nop
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	58026000 	.word	0x58026000

080066ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4a0c      	ldr	r2, [pc, #48]	; (800672c <LL_ADC_SetOffsetSaturation+0x40>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d10e      	bne.n	800671e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3360      	adds	r3, #96	; 0x60
 8006704:	461a      	mov	r2, r3
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	431a      	orrs	r2, r3
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	58026000 	.word	0x58026000

08006730 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4a0c      	ldr	r2, [pc, #48]	; (8006770 <LL_ADC_SetOffsetSign+0x40>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d10e      	bne.n	8006762 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3360      	adds	r3, #96	; 0x60
 8006748:	461a      	mov	r2, r3
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	431a      	orrs	r2, r3
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8006762:	bf00      	nop
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	58026000 	.word	0x58026000

08006774 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3360      	adds	r3, #96	; 0x60
 8006784:	461a      	mov	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4a0c      	ldr	r2, [pc, #48]	; (80067c4 <LL_ADC_SetOffsetState+0x50>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d108      	bne.n	80067a8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	431a      	orrs	r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80067a6:	e007      	b.n	80067b8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	431a      	orrs	r2, r3
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	601a      	str	r2, [r3, #0]
}
 80067b8:	bf00      	nop
 80067ba:	371c      	adds	r7, #28
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	58026000 	.word	0x58026000

080067c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80067dc:	2301      	movs	r3, #1
 80067de:	e000      	b.n	80067e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b087      	sub	sp, #28
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3330      	adds	r3, #48	; 0x30
 80067fe:	461a      	mov	r2, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	0a1b      	lsrs	r3, r3, #8
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	f003 030c 	and.w	r3, r3, #12
 800680a:	4413      	add	r3, r2
 800680c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	211f      	movs	r1, #31
 800681a:	fa01 f303 	lsl.w	r3, r1, r3
 800681e:	43db      	mvns	r3, r3
 8006820:	401a      	ands	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	0e9b      	lsrs	r3, r3, #26
 8006826:	f003 011f 	and.w	r1, r3, #31
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	fa01 f303 	lsl.w	r3, r1, r3
 8006834:	431a      	orrs	r2, r3
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800683a:	bf00      	nop
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006852:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800685a:	2301      	movs	r3, #1
 800685c:	e000      	b.n	8006860 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3314      	adds	r3, #20
 800687c:	461a      	mov	r2, r3
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	0e5b      	lsrs	r3, r3, #25
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	4413      	add	r3, r2
 800688a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	0d1b      	lsrs	r3, r3, #20
 8006894:	f003 031f 	and.w	r3, r3, #31
 8006898:	2107      	movs	r1, #7
 800689a:	fa01 f303 	lsl.w	r3, r1, r3
 800689e:	43db      	mvns	r3, r3
 80068a0:	401a      	ands	r2, r3
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	0d1b      	lsrs	r3, r3, #20
 80068a6:	f003 031f 	and.w	r3, r3, #31
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	fa01 f303 	lsl.w	r3, r1, r3
 80068b0:	431a      	orrs	r2, r3
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
	...

080068c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4a1a      	ldr	r2, [pc, #104]	; (800693c <LL_ADC_SetChannelSingleDiff+0x78>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d115      	bne.n	8006904 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068e4:	43db      	mvns	r3, r3
 80068e6:	401a      	ands	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f003 0318 	and.w	r3, r3, #24
 80068ee:	4914      	ldr	r1, [pc, #80]	; (8006940 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80068f0:	40d9      	lsrs	r1, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	400b      	ands	r3, r1
 80068f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068fa:	431a      	orrs	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8006902:	e014      	b.n	800692e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006910:	43db      	mvns	r3, r3
 8006912:	401a      	ands	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f003 0318 	and.w	r3, r3, #24
 800691a:	4909      	ldr	r1, [pc, #36]	; (8006940 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800691c:	40d9      	lsrs	r1, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	400b      	ands	r3, r1
 8006922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006926:	431a      	orrs	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800692e:	bf00      	nop
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	58026000 	.word	0x58026000
 8006940:	000fffff 	.word	0x000fffff

08006944 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f003 031f 	and.w	r3, r3, #31
}
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	4b04      	ldr	r3, [pc, #16]	; (800699c <LL_ADC_DisableDeepPowerDown+0x20>)
 800698a:	4013      	ands	r3, r2
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6093      	str	r3, [r2, #8]
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	5fffffc0 	.word	0x5fffffc0

080069a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069b4:	d101      	bne.n	80069ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80069b6:	2301      	movs	r3, #1
 80069b8:	e000      	b.n	80069bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <LL_ADC_EnableInternalRegulator+0x24>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	6fffffc0 	.word	0x6fffffc0

080069f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a04:	d101      	bne.n	8006a0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <LL_ADC_Enable+0x24>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	f043 0201 	orr.w	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	7fffffc0 	.word	0x7fffffc0

08006a40 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <LL_ADC_Disable+0x24>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	f043 0202 	orr.w	r2, r3, #2
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	7fffffc0 	.word	0x7fffffc0

08006a68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <LL_ADC_IsEnabled+0x18>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <LL_ADC_IsEnabled+0x1a>
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b083      	sub	sp, #12
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d101      	bne.n	8006aa6 <LL_ADC_IsDisableOngoing+0x18>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <LL_ADC_IsDisableOngoing+0x1a>
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <LL_ADC_REG_StartConversion+0x24>)
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	f043 0204 	orr.w	r2, r3, #4
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	7fffffc0 	.word	0x7fffffc0

08006adc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d101      	bne.n	8006af4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d101      	bne.n	8006b1a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006b28:	b590      	push	{r4, r7, lr}
 8006b2a:	b089      	sub	sp, #36	; 0x24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e1ee      	b.n	8006f20 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7fa f82d 	bl	8000bb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff ff19 	bl	80069a0 <LL_ADC_IsDeepPowerDownEnabled>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d004      	beq.n	8006b7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff feff 	bl	800697c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff ff34 	bl	80069f0 <LL_ADC_IsInternalRegulatorEnabled>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d114      	bne.n	8006bb8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff ff18 	bl	80069c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006b98:	4b8e      	ldr	r3, [pc, #568]	; (8006dd4 <HAL_ADC_Init+0x2ac>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	099b      	lsrs	r3, r3, #6
 8006b9e:	4a8e      	ldr	r2, [pc, #568]	; (8006dd8 <HAL_ADC_Init+0x2b0>)
 8006ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba4:	099b      	lsrs	r3, r3, #6
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006baa:	e002      	b.n	8006bb2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1f9      	bne.n	8006bac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7ff ff17 	bl	80069f0 <LL_ADC_IsInternalRegulatorEnabled>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10d      	bne.n	8006be4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bcc:	f043 0210 	orr.w	r2, r3, #16
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bd8:	f043 0201 	orr.w	r2, r3, #1
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff ff77 	bl	8006adc <LL_ADC_REG_IsConversionOngoing>
 8006bee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f040 8188 	bne.w	8006f0e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f040 8184 	bne.w	8006f0e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c0a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006c0e:	f043 0202 	orr.w	r2, r3, #2
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7ff ff24 	bl	8006a68 <LL_ADC_IsEnabled>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d136      	bne.n	8006c94 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a6c      	ldr	r2, [pc, #432]	; (8006ddc <HAL_ADC_Init+0x2b4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d004      	beq.n	8006c3a <HAL_ADC_Init+0x112>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a6a      	ldr	r2, [pc, #424]	; (8006de0 <HAL_ADC_Init+0x2b8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d10e      	bne.n	8006c58 <HAL_ADC_Init+0x130>
 8006c3a:	4868      	ldr	r0, [pc, #416]	; (8006ddc <HAL_ADC_Init+0x2b4>)
 8006c3c:	f7ff ff14 	bl	8006a68 <LL_ADC_IsEnabled>
 8006c40:	4604      	mov	r4, r0
 8006c42:	4867      	ldr	r0, [pc, #412]	; (8006de0 <HAL_ADC_Init+0x2b8>)
 8006c44:	f7ff ff10 	bl	8006a68 <LL_ADC_IsEnabled>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	4323      	orrs	r3, r4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	bf0c      	ite	eq
 8006c50:	2301      	moveq	r3, #1
 8006c52:	2300      	movne	r3, #0
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	e008      	b.n	8006c6a <HAL_ADC_Init+0x142>
 8006c58:	4862      	ldr	r0, [pc, #392]	; (8006de4 <HAL_ADC_Init+0x2bc>)
 8006c5a:	f7ff ff05 	bl	8006a68 <LL_ADC_IsEnabled>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	bf0c      	ite	eq
 8006c64:	2301      	moveq	r3, #1
 8006c66:	2300      	movne	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d012      	beq.n	8006c94 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a5a      	ldr	r2, [pc, #360]	; (8006ddc <HAL_ADC_Init+0x2b4>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d004      	beq.n	8006c82 <HAL_ADC_Init+0x15a>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a58      	ldr	r2, [pc, #352]	; (8006de0 <HAL_ADC_Init+0x2b8>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d101      	bne.n	8006c86 <HAL_ADC_Init+0x15e>
 8006c82:	4a59      	ldr	r2, [pc, #356]	; (8006de8 <HAL_ADC_Init+0x2c0>)
 8006c84:	e000      	b.n	8006c88 <HAL_ADC_Init+0x160>
 8006c86:	4a59      	ldr	r2, [pc, #356]	; (8006dec <HAL_ADC_Init+0x2c4>)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4610      	mov	r0, r2
 8006c90:	f7ff fc74 	bl	800657c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a52      	ldr	r2, [pc, #328]	; (8006de4 <HAL_ADC_Init+0x2bc>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d129      	bne.n	8006cf2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	7e5b      	ldrb	r3, [r3, #25]
 8006ca2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006ca8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8006cae:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d013      	beq.n	8006ce0 <HAL_ADC_Init+0x1b8>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	2b0c      	cmp	r3, #12
 8006cbe:	d00d      	beq.n	8006cdc <HAL_ADC_Init+0x1b4>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	2b1c      	cmp	r3, #28
 8006cc6:	d007      	beq.n	8006cd8 <HAL_ADC_Init+0x1b0>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b18      	cmp	r3, #24
 8006cce:	d101      	bne.n	8006cd4 <HAL_ADC_Init+0x1ac>
 8006cd0:	2318      	movs	r3, #24
 8006cd2:	e006      	b.n	8006ce2 <HAL_ADC_Init+0x1ba>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e004      	b.n	8006ce2 <HAL_ADC_Init+0x1ba>
 8006cd8:	2310      	movs	r3, #16
 8006cda:	e002      	b.n	8006ce2 <HAL_ADC_Init+0x1ba>
 8006cdc:	2308      	movs	r3, #8
 8006cde:	e000      	b.n	8006ce2 <HAL_ADC_Init+0x1ba>
 8006ce0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8006ce2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006cec:	4313      	orrs	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	e00e      	b.n	8006d10 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	7e5b      	ldrb	r3, [r3, #25]
 8006cf6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006cfc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006d02:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d0a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d106      	bne.n	8006d28 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	045b      	lsls	r3, r3, #17
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d009      	beq.n	8006d44 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a26      	ldr	r2, [pc, #152]	; (8006de4 <HAL_ADC_Init+0x2bc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d115      	bne.n	8006d7a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	4b26      	ldr	r3, [pc, #152]	; (8006df0 <HAL_ADC_Init+0x2c8>)
 8006d56:	4013      	ands	r3, r2
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6812      	ldr	r2, [r2, #0]
 8006d5c:	69b9      	ldr	r1, [r7, #24]
 8006d5e:	430b      	orrs	r3, r1
 8006d60:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	611a      	str	r2, [r3, #16]
 8006d78:	e009      	b.n	8006d8e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <HAL_ADC_Init+0x2cc>)
 8006d82:	4013      	ands	r3, r2
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6812      	ldr	r2, [r2, #0]
 8006d88:	69b9      	ldr	r1, [r7, #24]
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fea2 	bl	8006adc <LL_ADC_REG_IsConversionOngoing>
 8006d98:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff feaf 	bl	8006b02 <LL_ADC_INJ_IsConversionOngoing>
 8006da4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f040 808e 	bne.w	8006eca <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f040 808a 	bne.w	8006eca <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a0a      	ldr	r2, [pc, #40]	; (8006de4 <HAL_ADC_Init+0x2bc>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d11b      	bne.n	8006df8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	7e1b      	ldrb	r3, [r3, #24]
 8006dc4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006dcc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	e018      	b.n	8006e06 <HAL_ADC_Init+0x2de>
 8006dd4:	20000010 	.word	0x20000010
 8006dd8:	053e2d63 	.word	0x053e2d63
 8006ddc:	40022000 	.word	0x40022000
 8006de0:	40022100 	.word	0x40022100
 8006de4:	58026000 	.word	0x58026000
 8006de8:	40022300 	.word	0x40022300
 8006dec:	58026300 	.word	0x58026300
 8006df0:	fff04007 	.word	0xfff04007
 8006df4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	7e1b      	ldrb	r3, [r3, #24]
 8006dfc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8006e02:	4313      	orrs	r3, r2
 8006e04:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	4b46      	ldr	r3, [pc, #280]	; (8006f28 <HAL_ADC_Init+0x400>)
 8006e0e:	4013      	ands	r3, r2
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6812      	ldr	r2, [r2, #0]
 8006e14:	69b9      	ldr	r1, [r7, #24]
 8006e16:	430b      	orrs	r3, r1
 8006e18:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d137      	bne.n	8006e94 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a3f      	ldr	r2, [pc, #252]	; (8006f2c <HAL_ADC_Init+0x404>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d116      	bne.n	8006e62 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	691a      	ldr	r2, [r3, #16]
 8006e3a:	4b3d      	ldr	r3, [pc, #244]	; (8006f30 <HAL_ADC_Init+0x408>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006e46:	4311      	orrs	r1, r2
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006e4c:	4311      	orrs	r1, r2
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006e52:	430a      	orrs	r2, r1
 8006e54:	431a      	orrs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0201 	orr.w	r2, r2, #1
 8006e5e:	611a      	str	r2, [r3, #16]
 8006e60:	e020      	b.n	8006ea4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	4b32      	ldr	r3, [pc, #200]	; (8006f34 <HAL_ADC_Init+0x40c>)
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e70:	3a01      	subs	r2, #1
 8006e72:	0411      	lsls	r1, r2, #16
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006e78:	4311      	orrs	r1, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006e7e:	4311      	orrs	r1, r2
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006e84:	430a      	orrs	r2, r1
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0201 	orr.w	r2, r2, #1
 8006e90:	611a      	str	r2, [r3, #16]
 8006e92:	e007      	b.n	8006ea4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691a      	ldr	r2, [r3, #16]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0201 	bic.w	r2, r2, #1
 8006ea2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1b      	ldr	r2, [pc, #108]	; (8006f2c <HAL_ADC_Init+0x404>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d002      	beq.n	8006eca <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 f9e9 	bl	800829c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d10c      	bne.n	8006eec <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed8:	f023 010f 	bic.w	r1, r3, #15
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	1e5a      	subs	r2, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	631a      	str	r2, [r3, #48]	; 0x30
 8006eea:	e007      	b.n	8006efc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 020f 	bic.w	r2, r2, #15
 8006efa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f00:	f023 0303 	bic.w	r3, r3, #3
 8006f04:	f043 0201 	orr.w	r2, r3, #1
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	661a      	str	r2, [r3, #96]	; 0x60
 8006f0c:	e007      	b.n	8006f1e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f12:	f043 0210 	orr.w	r2, r3, #16
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006f1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3724      	adds	r7, #36	; 0x24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd90      	pop	{r4, r7, pc}
 8006f28:	ffffbffc 	.word	0xffffbffc
 8006f2c:	58026000 	.word	0x58026000
 8006f30:	fc00f81f 	.word	0xfc00f81f
 8006f34:	fc00f81e 	.word	0xfc00f81e

08006f38 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a90      	ldr	r2, [pc, #576]	; (8007188 <HAL_ADC_Start_IT+0x250>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d004      	beq.n	8006f54 <HAL_ADC_Start_IT+0x1c>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a8f      	ldr	r2, [pc, #572]	; (800718c <HAL_ADC_Start_IT+0x254>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d101      	bne.n	8006f58 <HAL_ADC_Start_IT+0x20>
 8006f54:	4b8e      	ldr	r3, [pc, #568]	; (8007190 <HAL_ADC_Start_IT+0x258>)
 8006f56:	e000      	b.n	8006f5a <HAL_ADC_Start_IT+0x22>
 8006f58:	4b8e      	ldr	r3, [pc, #568]	; (8007194 <HAL_ADC_Start_IT+0x25c>)
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff fcf2 	bl	8006944 <LL_ADC_GetMultimode>
 8006f60:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7ff fdb8 	bl	8006adc <LL_ADC_REG_IsConversionOngoing>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f040 8119 	bne.w	80071a6 <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_ADC_Start_IT+0x4a>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e116      	b.n	80071b0 <HAL_ADC_Start_IT+0x278>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 f89c 	bl	80080c8 <ADC_Enable>
 8006f90:	4603      	mov	r3, r0
 8006f92:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f040 8100 	bne.w	800719c <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006fa0:	4b7d      	ldr	r3, [pc, #500]	; (8007198 <HAL_ADC_Start_IT+0x260>)
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a76      	ldr	r2, [pc, #472]	; (800718c <HAL_ADC_Start_IT+0x254>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d002      	beq.n	8006fbc <HAL_ADC_Start_IT+0x84>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	e000      	b.n	8006fbe <HAL_ADC_Start_IT+0x86>
 8006fbc:	4b72      	ldr	r3, [pc, #456]	; (8007188 <HAL_ADC_Start_IT+0x250>)
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6812      	ldr	r2, [r2, #0]
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d002      	beq.n	8006fcc <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d105      	bne.n	8006fd8 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fd0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d006      	beq.n	8006ff2 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fe8:	f023 0206 	bic.w	r2, r3, #6
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	665a      	str	r2, [r3, #100]	; 0x64
 8006ff0:	e002      	b.n	8006ff8 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	221c      	movs	r2, #28
 8006ffe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 021c 	bic.w	r2, r2, #28
 8007016:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	2b08      	cmp	r3, #8
 800701e:	d108      	bne.n	8007032 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0208 	orr.w	r2, r2, #8
 800702e:	605a      	str	r2, [r3, #4]
          break;
 8007030:	e008      	b.n	8007044 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f042 0204 	orr.w	r2, r2, #4
 8007040:	605a      	str	r2, [r3, #4]
          break;
 8007042:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007048:	2b00      	cmp	r3, #0
 800704a:	d107      	bne.n	800705c <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0210 	orr.w	r2, r2, #16
 800705a:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a4a      	ldr	r2, [pc, #296]	; (800718c <HAL_ADC_Start_IT+0x254>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d002      	beq.n	800706c <HAL_ADC_Start_IT+0x134>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	e000      	b.n	800706e <HAL_ADC_Start_IT+0x136>
 800706c:	4b46      	ldr	r3, [pc, #280]	; (8007188 <HAL_ADC_Start_IT+0x250>)
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	6812      	ldr	r2, [r2, #0]
 8007072:	4293      	cmp	r3, r2
 8007074:	d008      	beq.n	8007088 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	2b05      	cmp	r3, #5
 8007080:	d002      	beq.n	8007088 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b09      	cmp	r3, #9
 8007086:	d13b      	bne.n	8007100 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d02d      	beq.n	80070f2 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800709a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800709e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	2b08      	cmp	r3, #8
 80070ac:	d110      	bne.n	80070d0 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0220 	bic.w	r2, r2, #32
 80070bc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070cc:	605a      	str	r2, [r3, #4]
              break;
 80070ce:	e011      	b.n	80070f4 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070de:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0220 	orr.w	r2, r2, #32
 80070ee:	605a      	str	r2, [r3, #4]
              break;
 80070f0:	e000      	b.n	80070f4 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 80070f2:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7ff fcdb 	bl	8006ab4 <LL_ADC_REG_StartConversion>
 80070fe:	e056      	b.n	80071ae <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007104:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1e      	ldr	r2, [pc, #120]	; (800718c <HAL_ADC_Start_IT+0x254>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d002      	beq.n	800711c <HAL_ADC_Start_IT+0x1e4>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	e000      	b.n	800711e <HAL_ADC_Start_IT+0x1e6>
 800711c:	4b1a      	ldr	r3, [pc, #104]	; (8007188 <HAL_ADC_Start_IT+0x250>)
 800711e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d03f      	beq.n	80071ac <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007130:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007134:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	2b08      	cmp	r3, #8
 8007142:	d110      	bne.n	8007166 <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0220 	bic.w	r2, r2, #32
 8007152:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007162:	605a      	str	r2, [r3, #4]
              break;
 8007164:	e023      	b.n	80071ae <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007174:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f042 0220 	orr.w	r2, r2, #32
 8007184:	605a      	str	r2, [r3, #4]
              break;
 8007186:	e012      	b.n	80071ae <HAL_ADC_Start_IT+0x276>
 8007188:	40022000 	.word	0x40022000
 800718c:	40022100 	.word	0x40022100
 8007190:	40022300 	.word	0x40022300
 8007194:	58026300 	.word	0x58026300
 8007198:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80071a4:	e003      	b.n	80071ae <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80071a6:	2302      	movs	r3, #2
 80071a8:	75fb      	strb	r3, [r7, #23]
 80071aa:	e000      	b.n	80071ae <HAL_ADC_Start_IT+0x276>
        }
 80071ac:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
	...

080071d4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08a      	sub	sp, #40	; 0x28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80071dc:	2300      	movs	r3, #0
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a87      	ldr	r2, [pc, #540]	; (8007414 <HAL_ADC_IRQHandler+0x240>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d004      	beq.n	8007204 <HAL_ADC_IRQHandler+0x30>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a86      	ldr	r2, [pc, #536]	; (8007418 <HAL_ADC_IRQHandler+0x244>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d101      	bne.n	8007208 <HAL_ADC_IRQHandler+0x34>
 8007204:	4b85      	ldr	r3, [pc, #532]	; (800741c <HAL_ADC_IRQHandler+0x248>)
 8007206:	e000      	b.n	800720a <HAL_ADC_IRQHandler+0x36>
 8007208:	4b85      	ldr	r3, [pc, #532]	; (8007420 <HAL_ADC_IRQHandler+0x24c>)
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff fb9a 	bl	8006944 <LL_ADC_GetMultimode>
 8007210:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d017      	beq.n	800724c <HAL_ADC_IRQHandler+0x78>
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d012      	beq.n	800724c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800722a:	f003 0310 	and.w	r3, r3, #16
 800722e:	2b00      	cmp	r3, #0
 8007230:	d105      	bne.n	800723e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007236:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 f9fe 	bl	8008640 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2202      	movs	r2, #2
 800724a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	f003 0304 	and.w	r3, r3, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	d004      	beq.n	8007260 <HAL_ADC_IRQHandler+0x8c>
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 8083 	beq.w	8007372 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d07d      	beq.n	8007372 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800727a:	f003 0310 	and.w	r3, r3, #16
 800727e:	2b00      	cmp	r3, #0
 8007280:	d105      	bne.n	800728e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007286:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4618      	mov	r0, r3
 8007294:	f7ff fa98 	bl	80067c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d062      	beq.n	8007364 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a5d      	ldr	r2, [pc, #372]	; (8007418 <HAL_ADC_IRQHandler+0x244>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d002      	beq.n	80072ae <HAL_ADC_IRQHandler+0xda>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	e000      	b.n	80072b0 <HAL_ADC_IRQHandler+0xdc>
 80072ae:	4b59      	ldr	r3, [pc, #356]	; (8007414 <HAL_ADC_IRQHandler+0x240>)
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6812      	ldr	r2, [r2, #0]
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d008      	beq.n	80072ca <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b05      	cmp	r3, #5
 80072c2:	d002      	beq.n	80072ca <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b09      	cmp	r3, #9
 80072c8:	d104      	bne.n	80072d4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	623b      	str	r3, [r7, #32]
 80072d2:	e00c      	b.n	80072ee <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a4f      	ldr	r2, [pc, #316]	; (8007418 <HAL_ADC_IRQHandler+0x244>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d002      	beq.n	80072e4 <HAL_ADC_IRQHandler+0x110>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	e000      	b.n	80072e6 <HAL_ADC_IRQHandler+0x112>
 80072e4:	4b4b      	ldr	r3, [pc, #300]	; (8007414 <HAL_ADC_IRQHandler+0x240>)
 80072e6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d135      	bne.n	8007364 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b08      	cmp	r3, #8
 8007304:	d12e      	bne.n	8007364 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4618      	mov	r0, r3
 800730c:	f7ff fbe6 	bl	8006adc <LL_ADC_REG_IsConversionOngoing>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d11a      	bne.n	800734c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 020c 	bic.w	r2, r2, #12
 8007324:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800732a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d112      	bne.n	8007364 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007342:	f043 0201 	orr.w	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	661a      	str	r2, [r3, #96]	; 0x60
 800734a:	e00b      	b.n	8007364 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007350:	f043 0210 	orr.w	r2, r3, #16
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800735c:	f043 0201 	orr.w	r2, r3, #1
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7fc f817 	bl	8003398 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	220c      	movs	r2, #12
 8007370:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	f003 0320 	and.w	r3, r3, #32
 8007378:	2b00      	cmp	r3, #0
 800737a:	d004      	beq.n	8007386 <HAL_ADC_IRQHandler+0x1b2>
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10b      	bne.n	800739e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 80a0 	beq.w	80074d2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 809a 	beq.w	80074d2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d105      	bne.n	80073b6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff fa43 	bl	8006846 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80073c0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff f9fe 	bl	80067c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80073cc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a11      	ldr	r2, [pc, #68]	; (8007418 <HAL_ADC_IRQHandler+0x244>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d002      	beq.n	80073de <HAL_ADC_IRQHandler+0x20a>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	e000      	b.n	80073e0 <HAL_ADC_IRQHandler+0x20c>
 80073de:	4b0d      	ldr	r3, [pc, #52]	; (8007414 <HAL_ADC_IRQHandler+0x240>)
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d008      	beq.n	80073fa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b06      	cmp	r3, #6
 80073f2:	d002      	beq.n	80073fa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	2b07      	cmp	r3, #7
 80073f8:	d104      	bne.n	8007404 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	623b      	str	r3, [r7, #32]
 8007402:	e014      	b.n	800742e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a03      	ldr	r2, [pc, #12]	; (8007418 <HAL_ADC_IRQHandler+0x244>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d00a      	beq.n	8007424 <HAL_ADC_IRQHandler+0x250>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	e008      	b.n	8007426 <HAL_ADC_IRQHandler+0x252>
 8007414:	40022000 	.word	0x40022000
 8007418:	40022100 	.word	0x40022100
 800741c:	40022300 	.word	0x40022300
 8007420:	58026300 	.word	0x58026300
 8007424:	4b84      	ldr	r3, [pc, #528]	; (8007638 <HAL_ADC_IRQHandler+0x464>)
 8007426:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d047      	beq.n	80074c4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d007      	beq.n	800744e <HAL_ADC_IRQHandler+0x27a>
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d03f      	beq.n	80074c4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800744a:	2b00      	cmp	r3, #0
 800744c:	d13a      	bne.n	80074c4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007458:	2b40      	cmp	r3, #64	; 0x40
 800745a:	d133      	bne.n	80074c4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d12e      	bne.n	80074c4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff fb49 	bl	8006b02 <LL_ADC_INJ_IsConversionOngoing>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d11a      	bne.n	80074ac <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007484:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800748a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800749a:	2b00      	cmp	r3, #0
 800749c:	d112      	bne.n	80074c4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074a2:	f043 0201 	orr.w	r2, r3, #1
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	661a      	str	r2, [r3, #96]	; 0x60
 80074aa:	e00b      	b.n	80074c4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b0:	f043 0210 	orr.w	r2, r3, #16
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074bc:	f043 0201 	orr.w	r2, r3, #1
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 f893 	bl	80085f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2260      	movs	r2, #96	; 0x60
 80074d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d011      	beq.n	8007500 <HAL_ADC_IRQHandler+0x32c>
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00c      	beq.n	8007500 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f8a8 	bl	8007648 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2280      	movs	r2, #128	; 0x80
 80074fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007506:	2b00      	cmp	r3, #0
 8007508:	d012      	beq.n	8007530 <HAL_ADC_IRQHandler+0x35c>
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00d      	beq.n	8007530 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007518:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 f879 	bl	8008618 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800752e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007536:	2b00      	cmp	r3, #0
 8007538:	d012      	beq.n	8007560 <HAL_ADC_IRQHandler+0x38c>
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00d      	beq.n	8007560 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007548:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 f86b 	bl	800862c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800755e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f003 0310 	and.w	r3, r3, #16
 8007566:	2b00      	cmp	r3, #0
 8007568:	d043      	beq.n	80075f2 <HAL_ADC_IRQHandler+0x41e>
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	f003 0310 	and.w	r3, r3, #16
 8007570:	2b00      	cmp	r3, #0
 8007572:	d03e      	beq.n	80075f2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007578:	2b00      	cmp	r3, #0
 800757a:	d102      	bne.n	8007582 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800757c:	2301      	movs	r3, #1
 800757e:	627b      	str	r3, [r7, #36]	; 0x24
 8007580:	e021      	b.n	80075c6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d015      	beq.n	80075b4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a2a      	ldr	r2, [pc, #168]	; (8007638 <HAL_ADC_IRQHandler+0x464>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d004      	beq.n	800759c <HAL_ADC_IRQHandler+0x3c8>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a29      	ldr	r2, [pc, #164]	; (800763c <HAL_ADC_IRQHandler+0x468>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d101      	bne.n	80075a0 <HAL_ADC_IRQHandler+0x3cc>
 800759c:	4b28      	ldr	r3, [pc, #160]	; (8007640 <HAL_ADC_IRQHandler+0x46c>)
 800759e:	e000      	b.n	80075a2 <HAL_ADC_IRQHandler+0x3ce>
 80075a0:	4b28      	ldr	r3, [pc, #160]	; (8007644 <HAL_ADC_IRQHandler+0x470>)
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff f9dc 	bl	8006960 <LL_ADC_GetMultiDMATransfer>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00b      	beq.n	80075c6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80075ae:	2301      	movs	r3, #1
 80075b0:	627b      	str	r3, [r7, #36]	; 0x24
 80075b2:	e008      	b.n	80075c6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80075c2:	2301      	movs	r3, #1
 80075c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d10e      	bne.n	80075ea <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075dc:	f043 0202 	orr.w	r2, r3, #2
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f839 	bl	800765c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2210      	movs	r2, #16
 80075f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d018      	beq.n	800762e <HAL_ADC_IRQHandler+0x45a>
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007602:	2b00      	cmp	r3, #0
 8007604:	d013      	beq.n	800762e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800760a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007616:	f043 0208 	orr.w	r2, r3, #8
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007626:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 ffeb 	bl	8008604 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800762e:	bf00      	nop
 8007630:	3728      	adds	r7, #40	; 0x28
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	40022000 	.word	0x40022000
 800763c:	40022100 	.word	0x40022100
 8007640:	40022300 	.word	0x40022300
 8007644:	58026300 	.word	0x58026300

08007648 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007670:	b590      	push	{r4, r7, lr}
 8007672:	b0b9      	sub	sp, #228	; 0xe4
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800768a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	4aa9      	ldr	r2, [pc, #676]	; (8007938 <HAL_ADC_ConfigChannel+0x2c8>)
 8007692:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800769a:	2b01      	cmp	r3, #1
 800769c:	d102      	bne.n	80076a4 <HAL_ADC_ConfigChannel+0x34>
 800769e:	2302      	movs	r3, #2
 80076a0:	f000 bcfa 	b.w	8008098 <HAL_ADC_ConfigChannel+0xa28>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7ff fa13 	bl	8006adc <LL_ADC_REG_IsConversionOngoing>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f040 84de 	bne.w	800807a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a9e      	ldr	r2, [pc, #632]	; (800793c <HAL_ADC_ConfigChannel+0x2cc>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d033      	beq.n	8007730 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d108      	bne.n	80076e6 <HAL_ADC_ConfigChannel+0x76>
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	0e9b      	lsrs	r3, r3, #26
 80076da:	f003 031f 	and.w	r3, r3, #31
 80076de:	2201      	movs	r2, #1
 80076e0:	fa02 f303 	lsl.w	r3, r2, r3
 80076e4:	e01d      	b.n	8007722 <HAL_ADC_ConfigChannel+0xb2>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076f2:	fa93 f3a3 	rbit	r3, r3
 80076f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80076fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007702:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800770a:	2320      	movs	r3, #32
 800770c:	e004      	b.n	8007718 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800770e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007712:	fab3 f383 	clz	r3, r3
 8007716:	b2db      	uxtb	r3, r3
 8007718:	f003 031f 	and.w	r3, r3, #31
 800771c:	2201      	movs	r2, #1
 800771e:	fa02 f303 	lsl.w	r3, r2, r3
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	6812      	ldr	r2, [r2, #0]
 8007726:	69d1      	ldr	r1, [r2, #28]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	430b      	orrs	r3, r1
 800772e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	6859      	ldr	r1, [r3, #4]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
 800773e:	f7ff f856 	bl	80067ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff f9c8 	bl	8006adc <LL_ADC_REG_IsConversionOngoing>
 800774c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4618      	mov	r0, r3
 8007756:	f7ff f9d4 	bl	8006b02 <LL_ADC_INJ_IsConversionOngoing>
 800775a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800775e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007762:	2b00      	cmp	r3, #0
 8007764:	f040 8270 	bne.w	8007c48 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007768:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800776c:	2b00      	cmp	r3, #0
 800776e:	f040 826b 	bne.w	8007c48 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6818      	ldr	r0, [r3, #0]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	6819      	ldr	r1, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	461a      	mov	r2, r3
 8007780:	f7ff f874 	bl	800686c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a6c      	ldr	r2, [pc, #432]	; (800793c <HAL_ADC_ConfigChannel+0x2cc>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d10d      	bne.n	80077aa <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	695a      	ldr	r2, [r3, #20]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	08db      	lsrs	r3, r3, #3
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	fa02 f303 	lsl.w	r3, r2, r3
 80077a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077a8:	e032      	b.n	8007810 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80077aa:	4b65      	ldr	r3, [pc, #404]	; (8007940 <HAL_ADC_ConfigChannel+0x2d0>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80077b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077b6:	d10b      	bne.n	80077d0 <HAL_ADC_ConfigChannel+0x160>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	695a      	ldr	r2, [r3, #20]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	089b      	lsrs	r3, r3, #2
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	fa02 f303 	lsl.w	r3, r2, r3
 80077ce:	e01d      	b.n	800780c <HAL_ADC_ConfigChannel+0x19c>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10b      	bne.n	80077f6 <HAL_ADC_ConfigChannel+0x186>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	695a      	ldr	r2, [r3, #20]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	089b      	lsrs	r3, r3, #2
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	fa02 f303 	lsl.w	r3, r2, r3
 80077f4:	e00a      	b.n	800780c <HAL_ADC_ConfigChannel+0x19c>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	695a      	ldr	r2, [r3, #20]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	089b      	lsrs	r3, r3, #2
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	fa02 f303 	lsl.w	r3, r2, r3
 800780c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	2b04      	cmp	r3, #4
 8007816:	d048      	beq.n	80078aa <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	6919      	ldr	r1, [r3, #16]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007828:	f7fe fedc 	bl	80065e4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a42      	ldr	r2, [pc, #264]	; (800793c <HAL_ADC_ConfigChannel+0x2cc>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d119      	bne.n	800786a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	6919      	ldr	r1, [r3, #16]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	461a      	mov	r2, r3
 8007844:	f7fe ff74 	bl	8006730 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6818      	ldr	r0, [r3, #0]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	6919      	ldr	r1, [r3, #16]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d102      	bne.n	8007860 <HAL_ADC_ConfigChannel+0x1f0>
 800785a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800785e:	e000      	b.n	8007862 <HAL_ADC_ConfigChannel+0x1f2>
 8007860:	2300      	movs	r3, #0
 8007862:	461a      	mov	r2, r3
 8007864:	f7fe ff42 	bl	80066ec <LL_ADC_SetOffsetSaturation>
 8007868:	e1ee      	b.n	8007c48 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6818      	ldr	r0, [r3, #0]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	6919      	ldr	r1, [r3, #16]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007878:	2b01      	cmp	r3, #1
 800787a:	d102      	bne.n	8007882 <HAL_ADC_ConfigChannel+0x212>
 800787c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007880:	e000      	b.n	8007884 <HAL_ADC_ConfigChannel+0x214>
 8007882:	2300      	movs	r3, #0
 8007884:	461a      	mov	r2, r3
 8007886:	f7fe ff0f 	bl	80066a8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6818      	ldr	r0, [r3, #0]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	6919      	ldr	r1, [r3, #16]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	7e1b      	ldrb	r3, [r3, #24]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d102      	bne.n	80078a0 <HAL_ADC_ConfigChannel+0x230>
 800789a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800789e:	e000      	b.n	80078a2 <HAL_ADC_ConfigChannel+0x232>
 80078a0:	2300      	movs	r3, #0
 80078a2:	461a      	mov	r2, r3
 80078a4:	f7fe fee6 	bl	8006674 <LL_ADC_SetDataRightShift>
 80078a8:	e1ce      	b.n	8007c48 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a23      	ldr	r2, [pc, #140]	; (800793c <HAL_ADC_ConfigChannel+0x2cc>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	f040 8181 	bne.w	8007bb8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe fec3 	bl	8006648 <LL_ADC_GetOffsetChannel>
 80078c2:	4603      	mov	r3, r0
 80078c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10a      	bne.n	80078e2 <HAL_ADC_ConfigChannel+0x272>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2100      	movs	r1, #0
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe feb8 	bl	8006648 <LL_ADC_GetOffsetChannel>
 80078d8:	4603      	mov	r3, r0
 80078da:	0e9b      	lsrs	r3, r3, #26
 80078dc:	f003 021f 	and.w	r2, r3, #31
 80078e0:	e01e      	b.n	8007920 <HAL_ADC_ConfigChannel+0x2b0>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2100      	movs	r1, #0
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fe fead 	bl	8006648 <LL_ADC_GetOffsetChannel>
 80078ee:	4603      	mov	r3, r0
 80078f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078f8:	fa93 f3a3 	rbit	r3, r3
 80078fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8007900:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8007908:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8007910:	2320      	movs	r3, #32
 8007912:	e004      	b.n	800791e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8007914:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007918:	fab3 f383 	clz	r3, r3
 800791c:	b2db      	uxtb	r3, r3
 800791e:	461a      	mov	r2, r3
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10b      	bne.n	8007944 <HAL_ADC_ConfigChannel+0x2d4>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	0e9b      	lsrs	r3, r3, #26
 8007932:	f003 031f 	and.w	r3, r3, #31
 8007936:	e01e      	b.n	8007976 <HAL_ADC_ConfigChannel+0x306>
 8007938:	47ff0000 	.word	0x47ff0000
 800793c:	58026000 	.word	0x58026000
 8007940:	5c001000 	.word	0x5c001000
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800794c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007950:	fa93 f3a3 	rbit	r3, r3
 8007954:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8007958:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800795c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8007960:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8007968:	2320      	movs	r3, #32
 800796a:	e004      	b.n	8007976 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800796c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007970:	fab3 f383 	clz	r3, r3
 8007974:	b2db      	uxtb	r3, r3
 8007976:	429a      	cmp	r2, r3
 8007978:	d106      	bne.n	8007988 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2200      	movs	r2, #0
 8007980:	2100      	movs	r1, #0
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fef6 	bl	8006774 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2101      	movs	r1, #1
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe fe5a 	bl	8006648 <LL_ADC_GetOffsetChannel>
 8007994:	4603      	mov	r3, r0
 8007996:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <HAL_ADC_ConfigChannel+0x344>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2101      	movs	r1, #1
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fe fe4f 	bl	8006648 <LL_ADC_GetOffsetChannel>
 80079aa:	4603      	mov	r3, r0
 80079ac:	0e9b      	lsrs	r3, r3, #26
 80079ae:	f003 021f 	and.w	r2, r3, #31
 80079b2:	e01e      	b.n	80079f2 <HAL_ADC_ConfigChannel+0x382>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2101      	movs	r1, #1
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fe44 	bl	8006648 <LL_ADC_GetOffsetChannel>
 80079c0:	4603      	mov	r3, r0
 80079c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079ca:	fa93 f3a3 	rbit	r3, r3
 80079ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80079d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80079da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80079e2:	2320      	movs	r3, #32
 80079e4:	e004      	b.n	80079f0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80079e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80079ea:	fab3 f383 	clz	r3, r3
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d105      	bne.n	8007a0a <HAL_ADC_ConfigChannel+0x39a>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	0e9b      	lsrs	r3, r3, #26
 8007a04:	f003 031f 	and.w	r3, r3, #31
 8007a08:	e018      	b.n	8007a3c <HAL_ADC_ConfigChannel+0x3cc>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a16:	fa93 f3a3 	rbit	r3, r3
 8007a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8007a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8007a26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8007a2e:	2320      	movs	r3, #32
 8007a30:	e004      	b.n	8007a3c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8007a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a36:	fab3 f383 	clz	r3, r3
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d106      	bne.n	8007a4e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2200      	movs	r2, #0
 8007a46:	2101      	movs	r1, #1
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fe fe93 	bl	8006774 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2102      	movs	r1, #2
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fe fdf7 	bl	8006648 <LL_ADC_GetOffsetChannel>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10a      	bne.n	8007a7a <HAL_ADC_ConfigChannel+0x40a>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2102      	movs	r1, #2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe fdec 	bl	8006648 <LL_ADC_GetOffsetChannel>
 8007a70:	4603      	mov	r3, r0
 8007a72:	0e9b      	lsrs	r3, r3, #26
 8007a74:	f003 021f 	and.w	r2, r3, #31
 8007a78:	e01e      	b.n	8007ab8 <HAL_ADC_ConfigChannel+0x448>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2102      	movs	r1, #2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7fe fde1 	bl	8006648 <LL_ADC_GetOffsetChannel>
 8007a86:	4603      	mov	r3, r0
 8007a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a90:	fa93 f3a3 	rbit	r3, r3
 8007a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8007a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8007aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8007aa8:	2320      	movs	r3, #32
 8007aaa:	e004      	b.n	8007ab6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8007aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ab0:	fab3 f383 	clz	r3, r3
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d105      	bne.n	8007ad0 <HAL_ADC_ConfigChannel+0x460>
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	0e9b      	lsrs	r3, r3, #26
 8007aca:	f003 031f 	and.w	r3, r3, #31
 8007ace:	e014      	b.n	8007afa <HAL_ADC_ConfigChannel+0x48a>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ad8:	fa93 f3a3 	rbit	r3, r3
 8007adc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8007ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8007ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8007aec:	2320      	movs	r3, #32
 8007aee:	e004      	b.n	8007afa <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8007af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007af4:	fab3 f383 	clz	r3, r3
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d106      	bne.n	8007b0c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2200      	movs	r2, #0
 8007b04:	2102      	movs	r1, #2
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe fe34 	bl	8006774 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2103      	movs	r1, #3
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fd98 	bl	8006648 <LL_ADC_GetOffsetChannel>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10a      	bne.n	8007b38 <HAL_ADC_ConfigChannel+0x4c8>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2103      	movs	r1, #3
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fe fd8d 	bl	8006648 <LL_ADC_GetOffsetChannel>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	0e9b      	lsrs	r3, r3, #26
 8007b32:	f003 021f 	and.w	r2, r3, #31
 8007b36:	e017      	b.n	8007b68 <HAL_ADC_ConfigChannel+0x4f8>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2103      	movs	r1, #3
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe fd82 	bl	8006648 <LL_ADC_GetOffsetChannel>
 8007b44:	4603      	mov	r3, r0
 8007b46:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b4a:	fa93 f3a3 	rbit	r3, r3
 8007b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b52:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8007b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8007b5a:	2320      	movs	r3, #32
 8007b5c:	e003      	b.n	8007b66 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8007b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b60:	fab3 f383 	clz	r3, r3
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	461a      	mov	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d105      	bne.n	8007b80 <HAL_ADC_ConfigChannel+0x510>
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	0e9b      	lsrs	r3, r3, #26
 8007b7a:	f003 031f 	and.w	r3, r3, #31
 8007b7e:	e011      	b.n	8007ba4 <HAL_ADC_ConfigChannel+0x534>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b88:	fa93 f3a3 	rbit	r3, r3
 8007b8c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8007b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b90:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8007b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8007b98:	2320      	movs	r3, #32
 8007b9a:	e003      	b.n	8007ba4 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8007b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b9e:	fab3 f383 	clz	r3, r3
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d14f      	bne.n	8007c48 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2200      	movs	r2, #0
 8007bae:	2103      	movs	r1, #3
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fe fddf 	bl	8006774 <LL_ADC_SetOffsetState>
 8007bb6:	e047      	b.n	8007c48 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	069b      	lsls	r3, r3, #26
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d107      	bne.n	8007bdc <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007bda:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	069b      	lsls	r3, r3, #26
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d107      	bne.n	8007c00 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007bfe:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	069b      	lsls	r3, r3, #26
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d107      	bne.n	8007c24 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007c22:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	069b      	lsls	r3, r3, #26
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d107      	bne.n	8007c48 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007c46:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fe ff0b 	bl	8006a68 <LL_ADC_IsEnabled>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f040 8219 	bne.w	800808c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6818      	ldr	r0, [r3, #0]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	6819      	ldr	r1, [r3, #0]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	461a      	mov	r2, r3
 8007c68:	f7fe fe2c 	bl	80068c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	4aa1      	ldr	r2, [pc, #644]	; (8007ef8 <HAL_ADC_ConfigChannel+0x888>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	f040 812e 	bne.w	8007ed4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10b      	bne.n	8007ca0 <HAL_ADC_ConfigChannel+0x630>
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	0e9b      	lsrs	r3, r3, #26
 8007c8e:	3301      	adds	r3, #1
 8007c90:	f003 031f 	and.w	r3, r3, #31
 8007c94:	2b09      	cmp	r3, #9
 8007c96:	bf94      	ite	ls
 8007c98:	2301      	movls	r3, #1
 8007c9a:	2300      	movhi	r3, #0
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	e019      	b.n	8007cd4 <HAL_ADC_ConfigChannel+0x664>
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ca8:	fa93 f3a3 	rbit	r3, r3
 8007cac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8007cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8007cb8:	2320      	movs	r3, #32
 8007cba:	e003      	b.n	8007cc4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8007cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cbe:	fab3 f383 	clz	r3, r3
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	f003 031f 	and.w	r3, r3, #31
 8007cca:	2b09      	cmp	r3, #9
 8007ccc:	bf94      	ite	ls
 8007cce:	2301      	movls	r3, #1
 8007cd0:	2300      	movhi	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d079      	beq.n	8007dcc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d107      	bne.n	8007cf4 <HAL_ADC_ConfigChannel+0x684>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	0e9b      	lsrs	r3, r3, #26
 8007cea:	3301      	adds	r3, #1
 8007cec:	069b      	lsls	r3, r3, #26
 8007cee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007cf2:	e015      	b.n	8007d20 <HAL_ADC_ConfigChannel+0x6b0>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cfc:	fa93 f3a3 	rbit	r3, r3
 8007d00:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8007d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d04:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8007d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8007d0c:	2320      	movs	r3, #32
 8007d0e:	e003      	b.n	8007d18 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8007d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d12:	fab3 f383 	clz	r3, r3
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	3301      	adds	r3, #1
 8007d1a:	069b      	lsls	r3, r3, #26
 8007d1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d109      	bne.n	8007d40 <HAL_ADC_ConfigChannel+0x6d0>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	0e9b      	lsrs	r3, r3, #26
 8007d32:	3301      	adds	r3, #1
 8007d34:	f003 031f 	and.w	r3, r3, #31
 8007d38:	2101      	movs	r1, #1
 8007d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3e:	e017      	b.n	8007d70 <HAL_ADC_ConfigChannel+0x700>
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d48:	fa93 f3a3 	rbit	r3, r3
 8007d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8007d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d50:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8007d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8007d58:	2320      	movs	r3, #32
 8007d5a:	e003      	b.n	8007d64 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8007d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d5e:	fab3 f383 	clz	r3, r3
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	3301      	adds	r3, #1
 8007d66:	f003 031f 	and.w	r3, r3, #31
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d70:	ea42 0103 	orr.w	r1, r2, r3
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10a      	bne.n	8007d96 <HAL_ADC_ConfigChannel+0x726>
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	0e9b      	lsrs	r3, r3, #26
 8007d86:	3301      	adds	r3, #1
 8007d88:	f003 021f 	and.w	r2, r3, #31
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	4413      	add	r3, r2
 8007d92:	051b      	lsls	r3, r3, #20
 8007d94:	e018      	b.n	8007dc8 <HAL_ADC_ConfigChannel+0x758>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9e:	fa93 f3a3 	rbit	r3, r3
 8007da2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8007dae:	2320      	movs	r3, #32
 8007db0:	e003      	b.n	8007dba <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	fab3 f383 	clz	r3, r3
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	3301      	adds	r3, #1
 8007dbc:	f003 021f 	and.w	r2, r3, #31
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	005b      	lsls	r3, r3, #1
 8007dc4:	4413      	add	r3, r2
 8007dc6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	e07e      	b.n	8007eca <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d107      	bne.n	8007de8 <HAL_ADC_ConfigChannel+0x778>
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	0e9b      	lsrs	r3, r3, #26
 8007dde:	3301      	adds	r3, #1
 8007de0:	069b      	lsls	r3, r3, #26
 8007de2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007de6:	e015      	b.n	8007e14 <HAL_ADC_ConfigChannel+0x7a4>
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	fa93 f3a3 	rbit	r3, r3
 8007df4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8007dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8007e00:	2320      	movs	r3, #32
 8007e02:	e003      	b.n	8007e0c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8007e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e06:	fab3 f383 	clz	r3, r3
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	069b      	lsls	r3, r3, #26
 8007e10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d109      	bne.n	8007e34 <HAL_ADC_ConfigChannel+0x7c4>
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	0e9b      	lsrs	r3, r3, #26
 8007e26:	3301      	adds	r3, #1
 8007e28:	f003 031f 	and.w	r3, r3, #31
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e32:	e017      	b.n	8007e64 <HAL_ADC_ConfigChannel+0x7f4>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	fa93 f3a3 	rbit	r3, r3
 8007e40:	61bb      	str	r3, [r7, #24]
  return result;
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8007e4c:	2320      	movs	r3, #32
 8007e4e:	e003      	b.n	8007e58 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	fab3 f383 	clz	r3, r3
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	3301      	adds	r3, #1
 8007e5a:	f003 031f 	and.w	r3, r3, #31
 8007e5e:	2101      	movs	r1, #1
 8007e60:	fa01 f303 	lsl.w	r3, r1, r3
 8007e64:	ea42 0103 	orr.w	r1, r2, r3
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10d      	bne.n	8007e90 <HAL_ADC_ConfigChannel+0x820>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	0e9b      	lsrs	r3, r3, #26
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	f003 021f 	and.w	r2, r3, #31
 8007e80:	4613      	mov	r3, r2
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	4413      	add	r3, r2
 8007e86:	3b1e      	subs	r3, #30
 8007e88:	051b      	lsls	r3, r3, #20
 8007e8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007e8e:	e01b      	b.n	8007ec8 <HAL_ADC_ConfigChannel+0x858>
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	fa93 f3a3 	rbit	r3, r3
 8007e9c:	60fb      	str	r3, [r7, #12]
  return result;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8007ea8:	2320      	movs	r3, #32
 8007eaa:	e003      	b.n	8007eb4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	fab3 f383 	clz	r3, r3
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	f003 021f 	and.w	r2, r3, #31
 8007eba:	4613      	mov	r3, r2
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	4413      	add	r3, r2
 8007ec0:	3b1e      	subs	r3, #30
 8007ec2:	051b      	lsls	r3, r3, #20
 8007ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	6892      	ldr	r2, [r2, #8]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	f7fe fccc 	bl	800686c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f280 80d7 	bge.w	800808c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a06      	ldr	r2, [pc, #24]	; (8007efc <HAL_ADC_ConfigChannel+0x88c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d004      	beq.n	8007ef2 <HAL_ADC_ConfigChannel+0x882>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a04      	ldr	r2, [pc, #16]	; (8007f00 <HAL_ADC_ConfigChannel+0x890>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d10a      	bne.n	8007f08 <HAL_ADC_ConfigChannel+0x898>
 8007ef2:	4b04      	ldr	r3, [pc, #16]	; (8007f04 <HAL_ADC_ConfigChannel+0x894>)
 8007ef4:	e009      	b.n	8007f0a <HAL_ADC_ConfigChannel+0x89a>
 8007ef6:	bf00      	nop
 8007ef8:	47ff0000 	.word	0x47ff0000
 8007efc:	40022000 	.word	0x40022000
 8007f00:	40022100 	.word	0x40022100
 8007f04:	40022300 	.word	0x40022300
 8007f08:	4b65      	ldr	r3, [pc, #404]	; (80080a0 <HAL_ADC_ConfigChannel+0xa30>)
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7fe fb5c 	bl	80065c8 <LL_ADC_GetCommonPathInternalCh>
 8007f10:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a62      	ldr	r2, [pc, #392]	; (80080a4 <HAL_ADC_ConfigChannel+0xa34>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d004      	beq.n	8007f28 <HAL_ADC_ConfigChannel+0x8b8>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a61      	ldr	r2, [pc, #388]	; (80080a8 <HAL_ADC_ConfigChannel+0xa38>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d10e      	bne.n	8007f46 <HAL_ADC_ConfigChannel+0x8d6>
 8007f28:	485e      	ldr	r0, [pc, #376]	; (80080a4 <HAL_ADC_ConfigChannel+0xa34>)
 8007f2a:	f7fe fd9d 	bl	8006a68 <LL_ADC_IsEnabled>
 8007f2e:	4604      	mov	r4, r0
 8007f30:	485d      	ldr	r0, [pc, #372]	; (80080a8 <HAL_ADC_ConfigChannel+0xa38>)
 8007f32:	f7fe fd99 	bl	8006a68 <LL_ADC_IsEnabled>
 8007f36:	4603      	mov	r3, r0
 8007f38:	4323      	orrs	r3, r4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	bf0c      	ite	eq
 8007f3e:	2301      	moveq	r3, #1
 8007f40:	2300      	movne	r3, #0
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	e008      	b.n	8007f58 <HAL_ADC_ConfigChannel+0x8e8>
 8007f46:	4859      	ldr	r0, [pc, #356]	; (80080ac <HAL_ADC_ConfigChannel+0xa3c>)
 8007f48:	f7fe fd8e 	bl	8006a68 <LL_ADC_IsEnabled>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	bf0c      	ite	eq
 8007f52:	2301      	moveq	r3, #1
 8007f54:	2300      	movne	r3, #0
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 8084 	beq.w	8008066 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a53      	ldr	r2, [pc, #332]	; (80080b0 <HAL_ADC_ConfigChannel+0xa40>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d132      	bne.n	8007fce <HAL_ADC_ConfigChannel+0x95e>
 8007f68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d12c      	bne.n	8007fce <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a4c      	ldr	r2, [pc, #304]	; (80080ac <HAL_ADC_ConfigChannel+0xa3c>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	f040 8086 	bne.w	800808c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a47      	ldr	r2, [pc, #284]	; (80080a4 <HAL_ADC_ConfigChannel+0xa34>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d004      	beq.n	8007f94 <HAL_ADC_ConfigChannel+0x924>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a46      	ldr	r2, [pc, #280]	; (80080a8 <HAL_ADC_ConfigChannel+0xa38>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d101      	bne.n	8007f98 <HAL_ADC_ConfigChannel+0x928>
 8007f94:	4a47      	ldr	r2, [pc, #284]	; (80080b4 <HAL_ADC_ConfigChannel+0xa44>)
 8007f96:	e000      	b.n	8007f9a <HAL_ADC_ConfigChannel+0x92a>
 8007f98:	4a41      	ldr	r2, [pc, #260]	; (80080a0 <HAL_ADC_ConfigChannel+0xa30>)
 8007f9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	f7fe fafc 	bl	80065a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007faa:	4b43      	ldr	r3, [pc, #268]	; (80080b8 <HAL_ADC_ConfigChannel+0xa48>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	099b      	lsrs	r3, r3, #6
 8007fb0:	4a42      	ldr	r2, [pc, #264]	; (80080bc <HAL_ADC_ConfigChannel+0xa4c>)
 8007fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb6:	099b      	lsrs	r3, r3, #6
 8007fb8:	3301      	adds	r3, #1
 8007fba:	005b      	lsls	r3, r3, #1
 8007fbc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007fbe:	e002      	b.n	8007fc6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1f9      	bne.n	8007fc0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007fcc:	e05e      	b.n	800808c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a3b      	ldr	r2, [pc, #236]	; (80080c0 <HAL_ADC_ConfigChannel+0xa50>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d120      	bne.n	800801a <HAL_ADC_ConfigChannel+0x9aa>
 8007fd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d11a      	bne.n	800801a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a30      	ldr	r2, [pc, #192]	; (80080ac <HAL_ADC_ConfigChannel+0xa3c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d14e      	bne.n	800808c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a2c      	ldr	r2, [pc, #176]	; (80080a4 <HAL_ADC_ConfigChannel+0xa34>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d004      	beq.n	8008002 <HAL_ADC_ConfigChannel+0x992>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a2a      	ldr	r2, [pc, #168]	; (80080a8 <HAL_ADC_ConfigChannel+0xa38>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d101      	bne.n	8008006 <HAL_ADC_ConfigChannel+0x996>
 8008002:	4a2c      	ldr	r2, [pc, #176]	; (80080b4 <HAL_ADC_ConfigChannel+0xa44>)
 8008004:	e000      	b.n	8008008 <HAL_ADC_ConfigChannel+0x998>
 8008006:	4a26      	ldr	r2, [pc, #152]	; (80080a0 <HAL_ADC_ConfigChannel+0xa30>)
 8008008:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800800c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008010:	4619      	mov	r1, r3
 8008012:	4610      	mov	r0, r2
 8008014:	f7fe fac5 	bl	80065a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008018:	e038      	b.n	800808c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a29      	ldr	r2, [pc, #164]	; (80080c4 <HAL_ADC_ConfigChannel+0xa54>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d133      	bne.n	800808c <HAL_ADC_ConfigChannel+0xa1c>
 8008024:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d12d      	bne.n	800808c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a1d      	ldr	r2, [pc, #116]	; (80080ac <HAL_ADC_ConfigChannel+0xa3c>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d128      	bne.n	800808c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a19      	ldr	r2, [pc, #100]	; (80080a4 <HAL_ADC_ConfigChannel+0xa34>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d004      	beq.n	800804e <HAL_ADC_ConfigChannel+0x9de>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a17      	ldr	r2, [pc, #92]	; (80080a8 <HAL_ADC_ConfigChannel+0xa38>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d101      	bne.n	8008052 <HAL_ADC_ConfigChannel+0x9e2>
 800804e:	4a19      	ldr	r2, [pc, #100]	; (80080b4 <HAL_ADC_ConfigChannel+0xa44>)
 8008050:	e000      	b.n	8008054 <HAL_ADC_ConfigChannel+0x9e4>
 8008052:	4a13      	ldr	r2, [pc, #76]	; (80080a0 <HAL_ADC_ConfigChannel+0xa30>)
 8008054:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800805c:	4619      	mov	r1, r3
 800805e:	4610      	mov	r0, r2
 8008060:	f7fe fa9f 	bl	80065a2 <LL_ADC_SetCommonPathInternalCh>
 8008064:	e012      	b.n	800808c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800806a:	f043 0220 	orr.w	r2, r3, #32
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8008078:	e008      	b.n	800808c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800807e:	f043 0220 	orr.w	r2, r3, #32
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008094:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8008098:	4618      	mov	r0, r3
 800809a:	37e4      	adds	r7, #228	; 0xe4
 800809c:	46bd      	mov	sp, r7
 800809e:	bd90      	pop	{r4, r7, pc}
 80080a0:	58026300 	.word	0x58026300
 80080a4:	40022000 	.word	0x40022000
 80080a8:	40022100 	.word	0x40022100
 80080ac:	58026000 	.word	0x58026000
 80080b0:	c7520000 	.word	0xc7520000
 80080b4:	40022300 	.word	0x40022300
 80080b8:	20000010 	.word	0x20000010
 80080bc:	053e2d63 	.word	0x053e2d63
 80080c0:	c3210000 	.word	0xc3210000
 80080c4:	cb840000 	.word	0xcb840000

080080c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fe fcc7 	bl	8006a68 <LL_ADC_IsEnabled>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d16e      	bne.n	80081be <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689a      	ldr	r2, [r3, #8]
 80080e6:	4b38      	ldr	r3, [pc, #224]	; (80081c8 <ADC_Enable+0x100>)
 80080e8:	4013      	ands	r3, r2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00d      	beq.n	800810a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080f2:	f043 0210 	orr.w	r2, r3, #16
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080fe:	f043 0201 	orr.w	r2, r3, #1
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e05a      	b.n	80081c0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4618      	mov	r0, r3
 8008110:	f7fe fc82 	bl	8006a18 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008114:	f7fe fa02 	bl	800651c <HAL_GetTick>
 8008118:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a2b      	ldr	r2, [pc, #172]	; (80081cc <ADC_Enable+0x104>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d004      	beq.n	800812e <ADC_Enable+0x66>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a29      	ldr	r2, [pc, #164]	; (80081d0 <ADC_Enable+0x108>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d101      	bne.n	8008132 <ADC_Enable+0x6a>
 800812e:	4b29      	ldr	r3, [pc, #164]	; (80081d4 <ADC_Enable+0x10c>)
 8008130:	e000      	b.n	8008134 <ADC_Enable+0x6c>
 8008132:	4b29      	ldr	r3, [pc, #164]	; (80081d8 <ADC_Enable+0x110>)
 8008134:	4618      	mov	r0, r3
 8008136:	f7fe fc05 	bl	8006944 <LL_ADC_GetMultimode>
 800813a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a23      	ldr	r2, [pc, #140]	; (80081d0 <ADC_Enable+0x108>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d002      	beq.n	800814c <ADC_Enable+0x84>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	e000      	b.n	800814e <ADC_Enable+0x86>
 800814c:	4b1f      	ldr	r3, [pc, #124]	; (80081cc <ADC_Enable+0x104>)
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	6812      	ldr	r2, [r2, #0]
 8008152:	4293      	cmp	r3, r2
 8008154:	d02c      	beq.n	80081b0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d130      	bne.n	80081be <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800815c:	e028      	b.n	80081b0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe fc80 	bl	8006a68 <LL_ADC_IsEnabled>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d104      	bne.n	8008178 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4618      	mov	r0, r3
 8008174:	f7fe fc50 	bl	8006a18 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008178:	f7fe f9d0 	bl	800651c <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d914      	bls.n	80081b0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b01      	cmp	r3, #1
 8008192:	d00d      	beq.n	80081b0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008198:	f043 0210 	orr.w	r2, r3, #16
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081a4:	f043 0201 	orr.w	r2, r3, #1
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e007      	b.n	80081c0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d1cf      	bne.n	800815e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	8000003f 	.word	0x8000003f
 80081cc:	40022000 	.word	0x40022000
 80081d0:	40022100 	.word	0x40022100
 80081d4:	40022300 	.word	0x40022300
 80081d8:	58026300 	.word	0x58026300

080081dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fe fc50 	bl	8006a8e <LL_ADC_IsDisableOngoing>
 80081ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fe fc37 	bl	8006a68 <LL_ADC_IsEnabled>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d047      	beq.n	8008290 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d144      	bne.n	8008290 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f003 030d 	and.w	r3, r3, #13
 8008210:	2b01      	cmp	r3, #1
 8008212:	d10c      	bne.n	800822e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4618      	mov	r0, r3
 800821a:	f7fe fc11 	bl	8006a40 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2203      	movs	r2, #3
 8008224:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008226:	f7fe f979 	bl	800651c <HAL_GetTick>
 800822a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800822c:	e029      	b.n	8008282 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008232:	f043 0210 	orr.w	r2, r3, #16
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800823e:	f043 0201 	orr.w	r2, r3, #1
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e023      	b.n	8008292 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800824a:	f7fe f967 	bl	800651c <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	2b02      	cmp	r3, #2
 8008256:	d914      	bls.n	8008282 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00d      	beq.n	8008282 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800826a:	f043 0210 	orr.w	r2, r3, #16
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008276:	f043 0201 	orr.w	r2, r3, #1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e007      	b.n	8008292 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1dc      	bne.n	800824a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
	...

0800829c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a6b      	ldr	r2, [pc, #428]	; (8008458 <ADC_ConfigureBoostMode+0x1bc>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d004      	beq.n	80082b8 <ADC_ConfigureBoostMode+0x1c>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a6a      	ldr	r2, [pc, #424]	; (800845c <ADC_ConfigureBoostMode+0x1c0>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d109      	bne.n	80082cc <ADC_ConfigureBoostMode+0x30>
 80082b8:	4b69      	ldr	r3, [pc, #420]	; (8008460 <ADC_ConfigureBoostMode+0x1c4>)
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	bf14      	ite	ne
 80082c4:	2301      	movne	r3, #1
 80082c6:	2300      	moveq	r3, #0
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	e008      	b.n	80082de <ADC_ConfigureBoostMode+0x42>
 80082cc:	4b65      	ldr	r3, [pc, #404]	; (8008464 <ADC_ConfigureBoostMode+0x1c8>)
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	bf14      	ite	ne
 80082d8:	2301      	movne	r3, #1
 80082da:	2300      	moveq	r3, #0
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d01c      	beq.n	800831c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80082e2:	f006 f87b 	bl	800e3dc <HAL_RCC_GetHCLKFreq>
 80082e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80082f0:	d010      	beq.n	8008314 <ADC_ConfigureBoostMode+0x78>
 80082f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80082f6:	d871      	bhi.n	80083dc <ADC_ConfigureBoostMode+0x140>
 80082f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082fc:	d002      	beq.n	8008304 <ADC_ConfigureBoostMode+0x68>
 80082fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008302:	d16b      	bne.n	80083dc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	0c1b      	lsrs	r3, r3, #16
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008310:	60fb      	str	r3, [r7, #12]
        break;
 8008312:	e066      	b.n	80083e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	089b      	lsrs	r3, r3, #2
 8008318:	60fb      	str	r3, [r7, #12]
        break;
 800831a:	e062      	b.n	80083e2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800831c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008320:	f006 ffb2 	bl	800f288 <HAL_RCCEx_GetPeriphCLKFreq>
 8008324:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800832e:	d051      	beq.n	80083d4 <ADC_ConfigureBoostMode+0x138>
 8008330:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008334:	d854      	bhi.n	80083e0 <ADC_ConfigureBoostMode+0x144>
 8008336:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800833a:	d047      	beq.n	80083cc <ADC_ConfigureBoostMode+0x130>
 800833c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008340:	d84e      	bhi.n	80083e0 <ADC_ConfigureBoostMode+0x144>
 8008342:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008346:	d03d      	beq.n	80083c4 <ADC_ConfigureBoostMode+0x128>
 8008348:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800834c:	d848      	bhi.n	80083e0 <ADC_ConfigureBoostMode+0x144>
 800834e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008352:	d033      	beq.n	80083bc <ADC_ConfigureBoostMode+0x120>
 8008354:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008358:	d842      	bhi.n	80083e0 <ADC_ConfigureBoostMode+0x144>
 800835a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800835e:	d029      	beq.n	80083b4 <ADC_ConfigureBoostMode+0x118>
 8008360:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008364:	d83c      	bhi.n	80083e0 <ADC_ConfigureBoostMode+0x144>
 8008366:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800836a:	d01a      	beq.n	80083a2 <ADC_ConfigureBoostMode+0x106>
 800836c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008370:	d836      	bhi.n	80083e0 <ADC_ConfigureBoostMode+0x144>
 8008372:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008376:	d014      	beq.n	80083a2 <ADC_ConfigureBoostMode+0x106>
 8008378:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800837c:	d830      	bhi.n	80083e0 <ADC_ConfigureBoostMode+0x144>
 800837e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008382:	d00e      	beq.n	80083a2 <ADC_ConfigureBoostMode+0x106>
 8008384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008388:	d82a      	bhi.n	80083e0 <ADC_ConfigureBoostMode+0x144>
 800838a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800838e:	d008      	beq.n	80083a2 <ADC_ConfigureBoostMode+0x106>
 8008390:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008394:	d824      	bhi.n	80083e0 <ADC_ConfigureBoostMode+0x144>
 8008396:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800839a:	d002      	beq.n	80083a2 <ADC_ConfigureBoostMode+0x106>
 800839c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80083a0:	d11e      	bne.n	80083e0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	0c9b      	lsrs	r3, r3, #18
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b0:	60fb      	str	r3, [r7, #12]
        break;
 80083b2:	e016      	b.n	80083e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	091b      	lsrs	r3, r3, #4
 80083b8:	60fb      	str	r3, [r7, #12]
        break;
 80083ba:	e012      	b.n	80083e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	095b      	lsrs	r3, r3, #5
 80083c0:	60fb      	str	r3, [r7, #12]
        break;
 80083c2:	e00e      	b.n	80083e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	099b      	lsrs	r3, r3, #6
 80083c8:	60fb      	str	r3, [r7, #12]
        break;
 80083ca:	e00a      	b.n	80083e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	09db      	lsrs	r3, r3, #7
 80083d0:	60fb      	str	r3, [r7, #12]
        break;
 80083d2:	e006      	b.n	80083e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	0a1b      	lsrs	r3, r3, #8
 80083d8:	60fb      	str	r3, [r7, #12]
        break;
 80083da:	e002      	b.n	80083e2 <ADC_ConfigureBoostMode+0x146>
        break;
 80083dc:	bf00      	nop
 80083de:	e000      	b.n	80083e2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80083e0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	085b      	lsrs	r3, r3, #1
 80083e6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4a1f      	ldr	r2, [pc, #124]	; (8008468 <ADC_ConfigureBoostMode+0x1cc>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d808      	bhi.n	8008402 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689a      	ldr	r2, [r3, #8]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80083fe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008400:	e025      	b.n	800844e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	4a19      	ldr	r2, [pc, #100]	; (800846c <ADC_ConfigureBoostMode+0x1d0>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d80a      	bhi.n	8008420 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800841c:	609a      	str	r2, [r3, #8]
}
 800841e:	e016      	b.n	800844e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4a13      	ldr	r2, [pc, #76]	; (8008470 <ADC_ConfigureBoostMode+0x1d4>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d80a      	bhi.n	800843e <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800843a:	609a      	str	r2, [r3, #8]
}
 800843c:	e007      	b.n	800844e <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800844c:	609a      	str	r2, [r3, #8]
}
 800844e:	bf00      	nop
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	40022000 	.word	0x40022000
 800845c:	40022100 	.word	0x40022100
 8008460:	40022300 	.word	0x40022300
 8008464:	58026300 	.word	0x58026300
 8008468:	005f5e10 	.word	0x005f5e10
 800846c:	00bebc20 	.word	0x00bebc20
 8008470:	017d7840 	.word	0x017d7840

08008474 <LL_ADC_IsEnabled>:
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b01      	cmp	r3, #1
 8008486:	d101      	bne.n	800848c <LL_ADC_IsEnabled+0x18>
 8008488:	2301      	movs	r3, #1
 800848a:	e000      	b.n	800848e <LL_ADC_IsEnabled+0x1a>
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
	...

0800849c <LL_ADC_StartCalibration>:
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <LL_ADC_StartCalibration+0x38>)
 80084ae:	4013      	ands	r3, r2
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80084bc:	430a      	orrs	r2, r1
 80084be:	4313      	orrs	r3, r2
 80084c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	609a      	str	r2, [r3, #8]
}
 80084c8:	bf00      	nop
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	3ffeffc0 	.word	0x3ffeffc0

080084d8 <LL_ADC_IsCalibrationOnGoing>:
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084ec:	d101      	bne.n	80084f2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80084ee:	2301      	movs	r3, #1
 80084f0:	e000      	b.n	80084f4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <LL_ADC_REG_IsConversionOngoing>:
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b04      	cmp	r3, #4
 8008512:	d101      	bne.n	8008518 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008514:	2301      	movs	r3, #1
 8008516:	e000      	b.n	800851a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
	...

08008528 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008534:	2300      	movs	r3, #0
 8008536:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800853e:	2b01      	cmp	r3, #1
 8008540:	d101      	bne.n	8008546 <HAL_ADCEx_Calibration_Start+0x1e>
 8008542:	2302      	movs	r3, #2
 8008544:	e04c      	b.n	80085e0 <HAL_ADCEx_Calibration_Start+0xb8>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7ff fe44 	bl	80081dc <ADC_Disable>
 8008554:	4603      	mov	r3, r0
 8008556:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d135      	bne.n	80085ca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008562:	4b21      	ldr	r3, [pc, #132]	; (80085e8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008564:	4013      	ands	r3, r2
 8008566:	f043 0202 	orr.w	r2, r3, #2
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	68b9      	ldr	r1, [r7, #8]
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff ff90 	bl	800849c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800857c:	e014      	b.n	80085a8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	3301      	adds	r3, #1
 8008582:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	4a19      	ldr	r2, [pc, #100]	; (80085ec <HAL_ADCEx_Calibration_Start+0xc4>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d30d      	bcc.n	80085a8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008590:	f023 0312 	bic.w	r3, r3, #18
 8008594:	f043 0210 	orr.w	r2, r3, #16
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e01b      	b.n	80085e0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7ff ff93 	bl	80084d8 <LL_ADC_IsCalibrationOnGoing>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e2      	bne.n	800857e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085bc:	f023 0303 	bic.w	r3, r3, #3
 80085c0:	f043 0201 	orr.w	r2, r3, #1
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	661a      	str	r2, [r3, #96]	; 0x60
 80085c8:	e005      	b.n	80085d6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ce:	f043 0210 	orr.w	r2, r3, #16
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80085de:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	ffffeefd 	.word	0xffffeefd
 80085ec:	25c3f800 	.word	0x25c3f800

080085f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008654:	b590      	push	{r4, r7, lr}
 8008656:	b0a3      	sub	sp, #140	; 0x8c
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800866a:	2b01      	cmp	r3, #1
 800866c:	d101      	bne.n	8008672 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800866e:	2302      	movs	r3, #2
 8008670:	e0c1      	b.n	80087f6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800867a:	2300      	movs	r3, #0
 800867c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800867e:	2300      	movs	r3, #0
 8008680:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a5e      	ldr	r2, [pc, #376]	; (8008800 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d102      	bne.n	8008692 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800868c:	4b5d      	ldr	r3, [pc, #372]	; (8008804 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	e001      	b.n	8008696 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008692:	2300      	movs	r3, #0
 8008694:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10b      	bne.n	80086b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086a0:	f043 0220 	orr.w	r2, r3, #32
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e0a0      	b.n	80087f6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff ff22 	bl	8008500 <LL_ADC_REG_IsConversionOngoing>
 80086bc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff ff1b 	bl	8008500 <LL_ADC_REG_IsConversionOngoing>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f040 8081 	bne.w	80087d4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80086d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d17c      	bne.n	80087d4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a48      	ldr	r2, [pc, #288]	; (8008800 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d004      	beq.n	80086ee <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a46      	ldr	r2, [pc, #280]	; (8008804 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d101      	bne.n	80086f2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80086ee:	4b46      	ldr	r3, [pc, #280]	; (8008808 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80086f0:	e000      	b.n	80086f4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80086f2:	4b46      	ldr	r3, [pc, #280]	; (800880c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80086f4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d039      	beq.n	8008772 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80086fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	431a      	orrs	r2, r3
 800870c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800870e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a3a      	ldr	r2, [pc, #232]	; (8008800 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d004      	beq.n	8008724 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a39      	ldr	r2, [pc, #228]	; (8008804 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d10e      	bne.n	8008742 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8008724:	4836      	ldr	r0, [pc, #216]	; (8008800 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008726:	f7ff fea5 	bl	8008474 <LL_ADC_IsEnabled>
 800872a:	4604      	mov	r4, r0
 800872c:	4835      	ldr	r0, [pc, #212]	; (8008804 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800872e:	f7ff fea1 	bl	8008474 <LL_ADC_IsEnabled>
 8008732:	4603      	mov	r3, r0
 8008734:	4323      	orrs	r3, r4
 8008736:	2b00      	cmp	r3, #0
 8008738:	bf0c      	ite	eq
 800873a:	2301      	moveq	r3, #1
 800873c:	2300      	movne	r3, #0
 800873e:	b2db      	uxtb	r3, r3
 8008740:	e008      	b.n	8008754 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8008742:	4833      	ldr	r0, [pc, #204]	; (8008810 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008744:	f7ff fe96 	bl	8008474 <LL_ADC_IsEnabled>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	bf0c      	ite	eq
 800874e:	2301      	moveq	r3, #1
 8008750:	2300      	movne	r3, #0
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d047      	beq.n	80087e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	4b2d      	ldr	r3, [pc, #180]	; (8008814 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800875e:	4013      	ands	r3, r2
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	6811      	ldr	r1, [r2, #0]
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	6892      	ldr	r2, [r2, #8]
 8008768:	430a      	orrs	r2, r1
 800876a:	431a      	orrs	r2, r3
 800876c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800876e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008770:	e03a      	b.n	80087e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008772:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800877a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800877c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a1f      	ldr	r2, [pc, #124]	; (8008800 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d004      	beq.n	8008792 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a1d      	ldr	r2, [pc, #116]	; (8008804 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d10e      	bne.n	80087b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8008792:	481b      	ldr	r0, [pc, #108]	; (8008800 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008794:	f7ff fe6e 	bl	8008474 <LL_ADC_IsEnabled>
 8008798:	4604      	mov	r4, r0
 800879a:	481a      	ldr	r0, [pc, #104]	; (8008804 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800879c:	f7ff fe6a 	bl	8008474 <LL_ADC_IsEnabled>
 80087a0:	4603      	mov	r3, r0
 80087a2:	4323      	orrs	r3, r4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	bf0c      	ite	eq
 80087a8:	2301      	moveq	r3, #1
 80087aa:	2300      	movne	r3, #0
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	e008      	b.n	80087c2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80087b0:	4817      	ldr	r0, [pc, #92]	; (8008810 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80087b2:	f7ff fe5f 	bl	8008474 <LL_ADC_IsEnabled>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	bf0c      	ite	eq
 80087bc:	2301      	moveq	r3, #1
 80087be:	2300      	movne	r3, #0
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d010      	beq.n	80087e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80087c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087c8:	689a      	ldr	r2, [r3, #8]
 80087ca:	4b12      	ldr	r3, [pc, #72]	; (8008814 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80087cc:	4013      	ands	r3, r2
 80087ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80087d0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80087d2:	e009      	b.n	80087e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087d8:	f043 0220 	orr.w	r2, r3, #32
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80087e6:	e000      	b.n	80087ea <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80087e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80087f2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	378c      	adds	r7, #140	; 0x8c
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd90      	pop	{r4, r7, pc}
 80087fe:	bf00      	nop
 8008800:	40022000 	.word	0x40022000
 8008804:	40022100 	.word	0x40022100
 8008808:	40022300 	.word	0x40022300
 800880c:	58026300 	.word	0x58026300
 8008810:	58026000 	.word	0x58026000
 8008814:	fffff0e0 	.word	0xfffff0e0

08008818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f003 0307 	and.w	r3, r3, #7
 8008826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008828:	4b0b      	ldr	r3, [pc, #44]	; (8008858 <__NVIC_SetPriorityGrouping+0x40>)
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008834:	4013      	ands	r3, r2
 8008836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008840:	4b06      	ldr	r3, [pc, #24]	; (800885c <__NVIC_SetPriorityGrouping+0x44>)
 8008842:	4313      	orrs	r3, r2
 8008844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008846:	4a04      	ldr	r2, [pc, #16]	; (8008858 <__NVIC_SetPriorityGrouping+0x40>)
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	60d3      	str	r3, [r2, #12]
}
 800884c:	bf00      	nop
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	e000ed00 	.word	0xe000ed00
 800885c:	05fa0000 	.word	0x05fa0000

08008860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008860:	b480      	push	{r7}
 8008862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008864:	4b04      	ldr	r3, [pc, #16]	; (8008878 <__NVIC_GetPriorityGrouping+0x18>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	0a1b      	lsrs	r3, r3, #8
 800886a:	f003 0307 	and.w	r3, r3, #7
}
 800886e:	4618      	mov	r0, r3
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	e000ed00 	.word	0xe000ed00

0800887c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	4603      	mov	r3, r0
 8008884:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800888a:	2b00      	cmp	r3, #0
 800888c:	db0b      	blt.n	80088a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800888e:	88fb      	ldrh	r3, [r7, #6]
 8008890:	f003 021f 	and.w	r2, r3, #31
 8008894:	4907      	ldr	r1, [pc, #28]	; (80088b4 <__NVIC_EnableIRQ+0x38>)
 8008896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800889a:	095b      	lsrs	r3, r3, #5
 800889c:	2001      	movs	r0, #1
 800889e:	fa00 f202 	lsl.w	r2, r0, r2
 80088a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80088a6:	bf00      	nop
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	e000e100 	.word	0xe000e100

080088b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4603      	mov	r3, r0
 80088c0:	6039      	str	r1, [r7, #0]
 80088c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80088c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	db0a      	blt.n	80088e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	490c      	ldr	r1, [pc, #48]	; (8008904 <__NVIC_SetPriority+0x4c>)
 80088d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088d6:	0112      	lsls	r2, r2, #4
 80088d8:	b2d2      	uxtb	r2, r2
 80088da:	440b      	add	r3, r1
 80088dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80088e0:	e00a      	b.n	80088f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	4908      	ldr	r1, [pc, #32]	; (8008908 <__NVIC_SetPriority+0x50>)
 80088e8:	88fb      	ldrh	r3, [r7, #6]
 80088ea:	f003 030f 	and.w	r3, r3, #15
 80088ee:	3b04      	subs	r3, #4
 80088f0:	0112      	lsls	r2, r2, #4
 80088f2:	b2d2      	uxtb	r2, r2
 80088f4:	440b      	add	r3, r1
 80088f6:	761a      	strb	r2, [r3, #24]
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	e000e100 	.word	0xe000e100
 8008908:	e000ed00 	.word	0xe000ed00

0800890c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800890c:	b480      	push	{r7}
 800890e:	b089      	sub	sp, #36	; 0x24
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f003 0307 	and.w	r3, r3, #7
 800891e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	f1c3 0307 	rsb	r3, r3, #7
 8008926:	2b04      	cmp	r3, #4
 8008928:	bf28      	it	cs
 800892a:	2304      	movcs	r3, #4
 800892c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	3304      	adds	r3, #4
 8008932:	2b06      	cmp	r3, #6
 8008934:	d902      	bls.n	800893c <NVIC_EncodePriority+0x30>
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	3b03      	subs	r3, #3
 800893a:	e000      	b.n	800893e <NVIC_EncodePriority+0x32>
 800893c:	2300      	movs	r3, #0
 800893e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008940:	f04f 32ff 	mov.w	r2, #4294967295
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	fa02 f303 	lsl.w	r3, r2, r3
 800894a:	43da      	mvns	r2, r3
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	401a      	ands	r2, r3
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008954:	f04f 31ff 	mov.w	r1, #4294967295
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	fa01 f303 	lsl.w	r3, r1, r3
 800895e:	43d9      	mvns	r1, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008964:	4313      	orrs	r3, r2
         );
}
 8008966:	4618      	mov	r0, r3
 8008968:	3724      	adds	r7, #36	; 0x24
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
	...

08008974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	3b01      	subs	r3, #1
 8008980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008984:	d301      	bcc.n	800898a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008986:	2301      	movs	r3, #1
 8008988:	e00f      	b.n	80089aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800898a:	4a0a      	ldr	r2, [pc, #40]	; (80089b4 <SysTick_Config+0x40>)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	3b01      	subs	r3, #1
 8008990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008992:	210f      	movs	r1, #15
 8008994:	f04f 30ff 	mov.w	r0, #4294967295
 8008998:	f7ff ff8e 	bl	80088b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800899c:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <SysTick_Config+0x40>)
 800899e:	2200      	movs	r2, #0
 80089a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80089a2:	4b04      	ldr	r3, [pc, #16]	; (80089b4 <SysTick_Config+0x40>)
 80089a4:	2207      	movs	r2, #7
 80089a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	e000e010 	.word	0xe000e010

080089b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7ff ff29 	bl	8008818 <__NVIC_SetPriorityGrouping>
}
 80089c6:	bf00      	nop
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b086      	sub	sp, #24
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	4603      	mov	r3, r0
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	607a      	str	r2, [r7, #4]
 80089da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80089dc:	f7ff ff40 	bl	8008860 <__NVIC_GetPriorityGrouping>
 80089e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	68b9      	ldr	r1, [r7, #8]
 80089e6:	6978      	ldr	r0, [r7, #20]
 80089e8:	f7ff ff90 	bl	800890c <NVIC_EncodePriority>
 80089ec:	4602      	mov	r2, r0
 80089ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80089f2:	4611      	mov	r1, r2
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7ff ff5f 	bl	80088b8 <__NVIC_SetPriority>
}
 80089fa:	bf00      	nop
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b082      	sub	sp, #8
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	4603      	mov	r3, r0
 8008a0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7ff ff33 	bl	800887c <__NVIC_EnableIRQ>
}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7ff ffa4 	bl	8008974 <SysTick_Config>
 8008a2c:	4603      	mov	r3, r0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
	...

08008a38 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d101      	bne.n	8008a4a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e054      	b.n	8008af4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	7f5b      	ldrb	r3, [r3, #29]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d105      	bne.n	8008a60 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7f8 feb8 	bl	80017d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	791b      	ldrb	r3, [r3, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10c      	bne.n	8008a88 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a22      	ldr	r2, [pc, #136]	; (8008afc <HAL_CRC_Init+0xc4>)
 8008a74:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689a      	ldr	r2, [r3, #8]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f022 0218 	bic.w	r2, r2, #24
 8008a84:	609a      	str	r2, [r3, #8]
 8008a86:	e00c      	b.n	8008aa2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6899      	ldr	r1, [r3, #8]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	461a      	mov	r2, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f948 	bl	8008d28 <HAL_CRCEx_Polynomial_Set>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e028      	b.n	8008af4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	795b      	ldrb	r3, [r3, #5]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d105      	bne.n	8008ab6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab2:	611a      	str	r2, [r3, #16]
 8008ab4:	e004      	b.n	8008ac0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	6912      	ldr	r2, [r2, #16]
 8008abe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	695a      	ldr	r2, [r3, #20]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	699a      	ldr	r2, [r3, #24]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	04c11db7 	.word	0x04c11db7

08008b00 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2202      	movs	r2, #2
 8008b14:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	689a      	ldr	r2, [r3, #8]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f042 0201 	orr.w	r2, r2, #1
 8008b24:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d006      	beq.n	8008b3c <HAL_CRC_Calculate+0x3c>
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d829      	bhi.n	8008b86 <HAL_CRC_Calculate+0x86>
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d019      	beq.n	8008b6a <HAL_CRC_Calculate+0x6a>
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d01e      	beq.n	8008b78 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8008b3a:	e024      	b.n	8008b86 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	617b      	str	r3, [r7, #20]
 8008b40:	e00a      	b.n	8008b58 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	441a      	add	r2, r3
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6812      	ldr	r2, [r2, #0]
 8008b50:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	3301      	adds	r3, #1
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d3f0      	bcc.n	8008b42 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	613b      	str	r3, [r7, #16]
      break;
 8008b68:	e00e      	b.n	8008b88 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	68b9      	ldr	r1, [r7, #8]
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f000 f812 	bl	8008b98 <CRC_Handle_8>
 8008b74:	6138      	str	r0, [r7, #16]
      break;
 8008b76:	e007      	b.n	8008b88 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	68b9      	ldr	r1, [r7, #8]
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 f899 	bl	8008cb4 <CRC_Handle_16>
 8008b82:	6138      	str	r0, [r7, #16]
      break;
 8008b84:	e000      	b.n	8008b88 <HAL_CRC_Calculate+0x88>
      break;
 8008b86:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8008b8e:	693b      	ldr	r3, [r7, #16]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b089      	sub	sp, #36	; 0x24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	61fb      	str	r3, [r7, #28]
 8008ba8:	e023      	b.n	8008bf2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	3301      	adds	r3, #1
 8008bbc:	68b9      	ldr	r1, [r7, #8]
 8008bbe:	440b      	add	r3, r1
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008bc4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	3302      	adds	r3, #2
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	440b      	add	r3, r1
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8008bd4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	3303      	adds	r3, #3
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	440b      	add	r3, r1
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8008be8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008bea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	61fb      	str	r3, [r7, #28]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	089b      	lsrs	r3, r3, #2
 8008bf6:	69fa      	ldr	r2, [r7, #28]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d3d6      	bcc.n	8008baa <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d04d      	beq.n	8008ca2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f003 0303 	and.w	r3, r3, #3
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d107      	bne.n	8008c20 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	4413      	add	r3, r2
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	6812      	ldr	r2, [r2, #0]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d116      	bne.n	8008c58 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	4413      	add	r3, r2
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	021b      	lsls	r3, r3, #8
 8008c36:	b21a      	sxth	r2, r3
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	68b9      	ldr	r1, [r7, #8]
 8008c40:	440b      	add	r3, r1
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	b21b      	sxth	r3, r3
 8008c46:	4313      	orrs	r3, r2
 8008c48:	b21b      	sxth	r3, r3
 8008c4a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	8b7a      	ldrh	r2, [r7, #26]
 8008c56:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d11f      	bne.n	8008ca2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	4413      	add	r3, r2
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	021b      	lsls	r3, r3, #8
 8008c6e:	b21a      	sxth	r2, r3
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	3301      	adds	r3, #1
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	440b      	add	r3, r1
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	b21b      	sxth	r3, r3
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	b21b      	sxth	r3, r3
 8008c82:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	8b7a      	ldrh	r2, [r7, #26]
 8008c8e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	3302      	adds	r3, #2
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	4413      	add	r3, r2
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	6812      	ldr	r2, [r2, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3724      	adds	r7, #36	; 0x24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	e013      	b.n	8008cee <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	4413      	add	r3, r2
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	041a      	lsls	r2, r3, #16
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	3302      	adds	r3, #2
 8008cd8:	68b9      	ldr	r1, [r7, #8]
 8008cda:	440b      	add	r3, r1
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	430a      	orrs	r2, r1
 8008ce6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	3301      	adds	r3, #1
 8008cec:	617b      	str	r3, [r7, #20]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	085b      	lsrs	r3, r3, #1
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d3e6      	bcc.n	8008cc6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d009      	beq.n	8008d16 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	4413      	add	r3, r2
 8008d10:	881a      	ldrh	r2, [r3, #0]
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	371c      	adds	r7, #28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008d38:	231f      	movs	r3, #31
 8008d3a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008d3c:	bf00      	nop
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	1e5a      	subs	r2, r3, #1
 8008d42:	613a      	str	r2, [r7, #16]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d009      	beq.n	8008d5c <HAL_CRCEx_Polynomial_Set+0x34>
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	f003 031f 	and.w	r3, r3, #31
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	fa22 f303 	lsr.w	r3, r2, r3
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d0f0      	beq.n	8008d3e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b18      	cmp	r3, #24
 8008d60:	d846      	bhi.n	8008df0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8008d62:	a201      	add	r2, pc, #4	; (adr r2, 8008d68 <HAL_CRCEx_Polynomial_Set+0x40>)
 8008d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d68:	08008df7 	.word	0x08008df7
 8008d6c:	08008df1 	.word	0x08008df1
 8008d70:	08008df1 	.word	0x08008df1
 8008d74:	08008df1 	.word	0x08008df1
 8008d78:	08008df1 	.word	0x08008df1
 8008d7c:	08008df1 	.word	0x08008df1
 8008d80:	08008df1 	.word	0x08008df1
 8008d84:	08008df1 	.word	0x08008df1
 8008d88:	08008de5 	.word	0x08008de5
 8008d8c:	08008df1 	.word	0x08008df1
 8008d90:	08008df1 	.word	0x08008df1
 8008d94:	08008df1 	.word	0x08008df1
 8008d98:	08008df1 	.word	0x08008df1
 8008d9c:	08008df1 	.word	0x08008df1
 8008da0:	08008df1 	.word	0x08008df1
 8008da4:	08008df1 	.word	0x08008df1
 8008da8:	08008dd9 	.word	0x08008dd9
 8008dac:	08008df1 	.word	0x08008df1
 8008db0:	08008df1 	.word	0x08008df1
 8008db4:	08008df1 	.word	0x08008df1
 8008db8:	08008df1 	.word	0x08008df1
 8008dbc:	08008df1 	.word	0x08008df1
 8008dc0:	08008df1 	.word	0x08008df1
 8008dc4:	08008df1 	.word	0x08008df1
 8008dc8:	08008dcd 	.word	0x08008dcd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	2b06      	cmp	r3, #6
 8008dd0:	d913      	bls.n	8008dfa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008dd6:	e010      	b.n	8008dfa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	2b07      	cmp	r3, #7
 8008ddc:	d90f      	bls.n	8008dfe <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008de2:	e00c      	b.n	8008dfe <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	2b0f      	cmp	r3, #15
 8008de8:	d90b      	bls.n	8008e02 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008dee:	e008      	b.n	8008e02 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	75fb      	strb	r3, [r7, #23]
      break;
 8008df4:	e006      	b.n	8008e04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008df6:	bf00      	nop
 8008df8:	e004      	b.n	8008e04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008dfa:	bf00      	nop
 8008dfc:	e002      	b.n	8008e04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008dfe:	bf00      	nop
 8008e00:	e000      	b.n	8008e04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008e02:	bf00      	nop
  }
  if (status == HAL_OK)
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10d      	bne.n	8008e26 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f023 0118 	bic.w	r1, r3, #24
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	430a      	orrs	r2, r1
 8008e24:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	371c      	adds	r7, #28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008e3c:	f7fd fb6e 	bl	800651c <HAL_GetTick>
 8008e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d101      	bne.n	8008e4c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e314      	b.n	8009476 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a66      	ldr	r2, [pc, #408]	; (8008fec <HAL_DMA_Init+0x1b8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d04a      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a65      	ldr	r2, [pc, #404]	; (8008ff0 <HAL_DMA_Init+0x1bc>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d045      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a63      	ldr	r2, [pc, #396]	; (8008ff4 <HAL_DMA_Init+0x1c0>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d040      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a62      	ldr	r2, [pc, #392]	; (8008ff8 <HAL_DMA_Init+0x1c4>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d03b      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a60      	ldr	r2, [pc, #384]	; (8008ffc <HAL_DMA_Init+0x1c8>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d036      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a5f      	ldr	r2, [pc, #380]	; (8009000 <HAL_DMA_Init+0x1cc>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d031      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a5d      	ldr	r2, [pc, #372]	; (8009004 <HAL_DMA_Init+0x1d0>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d02c      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a5c      	ldr	r2, [pc, #368]	; (8009008 <HAL_DMA_Init+0x1d4>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d027      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a5a      	ldr	r2, [pc, #360]	; (800900c <HAL_DMA_Init+0x1d8>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d022      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a59      	ldr	r2, [pc, #356]	; (8009010 <HAL_DMA_Init+0x1dc>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d01d      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a57      	ldr	r2, [pc, #348]	; (8009014 <HAL_DMA_Init+0x1e0>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d018      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a56      	ldr	r2, [pc, #344]	; (8009018 <HAL_DMA_Init+0x1e4>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d013      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a54      	ldr	r2, [pc, #336]	; (800901c <HAL_DMA_Init+0x1e8>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d00e      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a53      	ldr	r2, [pc, #332]	; (8009020 <HAL_DMA_Init+0x1ec>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d009      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a51      	ldr	r2, [pc, #324]	; (8009024 <HAL_DMA_Init+0x1f0>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d004      	beq.n	8008eec <HAL_DMA_Init+0xb8>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a50      	ldr	r2, [pc, #320]	; (8009028 <HAL_DMA_Init+0x1f4>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d101      	bne.n	8008ef0 <HAL_DMA_Init+0xbc>
 8008eec:	2301      	movs	r3, #1
 8008eee:	e000      	b.n	8008ef2 <HAL_DMA_Init+0xbe>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 813c 	beq.w	8009170 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a37      	ldr	r2, [pc, #220]	; (8008fec <HAL_DMA_Init+0x1b8>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d04a      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a36      	ldr	r2, [pc, #216]	; (8008ff0 <HAL_DMA_Init+0x1bc>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d045      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a34      	ldr	r2, [pc, #208]	; (8008ff4 <HAL_DMA_Init+0x1c0>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d040      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a33      	ldr	r2, [pc, #204]	; (8008ff8 <HAL_DMA_Init+0x1c4>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d03b      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a31      	ldr	r2, [pc, #196]	; (8008ffc <HAL_DMA_Init+0x1c8>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d036      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a30      	ldr	r2, [pc, #192]	; (8009000 <HAL_DMA_Init+0x1cc>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d031      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a2e      	ldr	r2, [pc, #184]	; (8009004 <HAL_DMA_Init+0x1d0>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d02c      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a2d      	ldr	r2, [pc, #180]	; (8009008 <HAL_DMA_Init+0x1d4>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d027      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a2b      	ldr	r2, [pc, #172]	; (800900c <HAL_DMA_Init+0x1d8>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d022      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a2a      	ldr	r2, [pc, #168]	; (8009010 <HAL_DMA_Init+0x1dc>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d01d      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a28      	ldr	r2, [pc, #160]	; (8009014 <HAL_DMA_Init+0x1e0>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d018      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a27      	ldr	r2, [pc, #156]	; (8009018 <HAL_DMA_Init+0x1e4>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d013      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a25      	ldr	r2, [pc, #148]	; (800901c <HAL_DMA_Init+0x1e8>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d00e      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a24      	ldr	r2, [pc, #144]	; (8009020 <HAL_DMA_Init+0x1ec>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d009      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a22      	ldr	r2, [pc, #136]	; (8009024 <HAL_DMA_Init+0x1f0>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d004      	beq.n	8008fa8 <HAL_DMA_Init+0x174>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a21      	ldr	r2, [pc, #132]	; (8009028 <HAL_DMA_Init+0x1f4>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d108      	bne.n	8008fba <HAL_DMA_Init+0x186>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f022 0201 	bic.w	r2, r2, #1
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	e007      	b.n	8008fca <HAL_DMA_Init+0x196>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f022 0201 	bic.w	r2, r2, #1
 8008fc8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008fca:	e02f      	b.n	800902c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008fcc:	f7fd faa6 	bl	800651c <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b05      	cmp	r3, #5
 8008fd8:	d928      	bls.n	800902c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2203      	movs	r2, #3
 8008fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e244      	b.n	8009476 <HAL_DMA_Init+0x642>
 8008fec:	40020010 	.word	0x40020010
 8008ff0:	40020028 	.word	0x40020028
 8008ff4:	40020040 	.word	0x40020040
 8008ff8:	40020058 	.word	0x40020058
 8008ffc:	40020070 	.word	0x40020070
 8009000:	40020088 	.word	0x40020088
 8009004:	400200a0 	.word	0x400200a0
 8009008:	400200b8 	.word	0x400200b8
 800900c:	40020410 	.word	0x40020410
 8009010:	40020428 	.word	0x40020428
 8009014:	40020440 	.word	0x40020440
 8009018:	40020458 	.word	0x40020458
 800901c:	40020470 	.word	0x40020470
 8009020:	40020488 	.word	0x40020488
 8009024:	400204a0 	.word	0x400204a0
 8009028:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1c8      	bne.n	8008fcc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	4b84      	ldr	r3, [pc, #528]	; (8009258 <HAL_DMA_Init+0x424>)
 8009046:	4013      	ands	r3, r2
 8009048:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8009052:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800905e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800906a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a1b      	ldr	r3, [r3, #32]
 8009070:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	4313      	orrs	r3, r2
 8009076:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	2b04      	cmp	r3, #4
 800907e:	d107      	bne.n	8009090 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009088:	4313      	orrs	r3, r2
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	4313      	orrs	r3, r2
 800908e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	2b28      	cmp	r3, #40	; 0x28
 8009096:	d903      	bls.n	80090a0 <HAL_DMA_Init+0x26c>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	2b2e      	cmp	r3, #46	; 0x2e
 800909e:	d91f      	bls.n	80090e0 <HAL_DMA_Init+0x2ac>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	2b3e      	cmp	r3, #62	; 0x3e
 80090a6:	d903      	bls.n	80090b0 <HAL_DMA_Init+0x27c>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	2b42      	cmp	r3, #66	; 0x42
 80090ae:	d917      	bls.n	80090e0 <HAL_DMA_Init+0x2ac>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	2b46      	cmp	r3, #70	; 0x46
 80090b6:	d903      	bls.n	80090c0 <HAL_DMA_Init+0x28c>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	2b48      	cmp	r3, #72	; 0x48
 80090be:	d90f      	bls.n	80090e0 <HAL_DMA_Init+0x2ac>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	2b4e      	cmp	r3, #78	; 0x4e
 80090c6:	d903      	bls.n	80090d0 <HAL_DMA_Init+0x29c>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	2b52      	cmp	r3, #82	; 0x52
 80090ce:	d907      	bls.n	80090e0 <HAL_DMA_Init+0x2ac>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	2b73      	cmp	r3, #115	; 0x73
 80090d6:	d905      	bls.n	80090e4 <HAL_DMA_Init+0x2b0>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	2b77      	cmp	r3, #119	; 0x77
 80090de:	d801      	bhi.n	80090e4 <HAL_DMA_Init+0x2b0>
 80090e0:	2301      	movs	r3, #1
 80090e2:	e000      	b.n	80090e6 <HAL_DMA_Init+0x2b2>
 80090e4:	2300      	movs	r3, #0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090f0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f023 0307 	bic.w	r3, r3, #7
 8009108:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	4313      	orrs	r3, r2
 8009112:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	2b04      	cmp	r3, #4
 800911a:	d117      	bne.n	800914c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	4313      	orrs	r3, r2
 8009124:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00e      	beq.n	800914c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 ff28 	bl	800af84 <DMA_CheckFifoParam>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d008      	beq.n	800914c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2240      	movs	r2, #64	; 0x40
 800913e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e194      	b.n	8009476 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 fe63 	bl	800ae20 <DMA_CalcBaseAndBitshift>
 800915a:	4603      	mov	r3, r0
 800915c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009162:	f003 031f 	and.w	r3, r3, #31
 8009166:	223f      	movs	r2, #63	; 0x3f
 8009168:	409a      	lsls	r2, r3
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	609a      	str	r2, [r3, #8]
 800916e:	e0ca      	b.n	8009306 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a39      	ldr	r2, [pc, #228]	; (800925c <HAL_DMA_Init+0x428>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d022      	beq.n	80091c0 <HAL_DMA_Init+0x38c>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a38      	ldr	r2, [pc, #224]	; (8009260 <HAL_DMA_Init+0x42c>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d01d      	beq.n	80091c0 <HAL_DMA_Init+0x38c>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a36      	ldr	r2, [pc, #216]	; (8009264 <HAL_DMA_Init+0x430>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d018      	beq.n	80091c0 <HAL_DMA_Init+0x38c>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a35      	ldr	r2, [pc, #212]	; (8009268 <HAL_DMA_Init+0x434>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d013      	beq.n	80091c0 <HAL_DMA_Init+0x38c>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a33      	ldr	r2, [pc, #204]	; (800926c <HAL_DMA_Init+0x438>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d00e      	beq.n	80091c0 <HAL_DMA_Init+0x38c>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a32      	ldr	r2, [pc, #200]	; (8009270 <HAL_DMA_Init+0x43c>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d009      	beq.n	80091c0 <HAL_DMA_Init+0x38c>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a30      	ldr	r2, [pc, #192]	; (8009274 <HAL_DMA_Init+0x440>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d004      	beq.n	80091c0 <HAL_DMA_Init+0x38c>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a2f      	ldr	r2, [pc, #188]	; (8009278 <HAL_DMA_Init+0x444>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d101      	bne.n	80091c4 <HAL_DMA_Init+0x390>
 80091c0:	2301      	movs	r3, #1
 80091c2:	e000      	b.n	80091c6 <HAL_DMA_Init+0x392>
 80091c4:	2300      	movs	r3, #0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 8094 	beq.w	80092f4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a22      	ldr	r2, [pc, #136]	; (800925c <HAL_DMA_Init+0x428>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d021      	beq.n	800921a <HAL_DMA_Init+0x3e6>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a21      	ldr	r2, [pc, #132]	; (8009260 <HAL_DMA_Init+0x42c>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d01c      	beq.n	800921a <HAL_DMA_Init+0x3e6>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a1f      	ldr	r2, [pc, #124]	; (8009264 <HAL_DMA_Init+0x430>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d017      	beq.n	800921a <HAL_DMA_Init+0x3e6>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a1e      	ldr	r2, [pc, #120]	; (8009268 <HAL_DMA_Init+0x434>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d012      	beq.n	800921a <HAL_DMA_Init+0x3e6>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a1c      	ldr	r2, [pc, #112]	; (800926c <HAL_DMA_Init+0x438>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d00d      	beq.n	800921a <HAL_DMA_Init+0x3e6>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a1b      	ldr	r2, [pc, #108]	; (8009270 <HAL_DMA_Init+0x43c>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d008      	beq.n	800921a <HAL_DMA_Init+0x3e6>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a19      	ldr	r2, [pc, #100]	; (8009274 <HAL_DMA_Init+0x440>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d003      	beq.n	800921a <HAL_DMA_Init+0x3e6>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a18      	ldr	r2, [pc, #96]	; (8009278 <HAL_DMA_Init+0x444>)
 8009218:	4293      	cmp	r3, r2
 800921a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2202      	movs	r2, #2
 8009220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	4b11      	ldr	r3, [pc, #68]	; (800927c <HAL_DMA_Init+0x448>)
 8009238:	4013      	ands	r3, r2
 800923a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	2b40      	cmp	r3, #64	; 0x40
 8009242:	d01d      	beq.n	8009280 <HAL_DMA_Init+0x44c>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	2b80      	cmp	r3, #128	; 0x80
 800924a:	d102      	bne.n	8009252 <HAL_DMA_Init+0x41e>
 800924c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009250:	e017      	b.n	8009282 <HAL_DMA_Init+0x44e>
 8009252:	2300      	movs	r3, #0
 8009254:	e015      	b.n	8009282 <HAL_DMA_Init+0x44e>
 8009256:	bf00      	nop
 8009258:	fe10803f 	.word	0xfe10803f
 800925c:	58025408 	.word	0x58025408
 8009260:	5802541c 	.word	0x5802541c
 8009264:	58025430 	.word	0x58025430
 8009268:	58025444 	.word	0x58025444
 800926c:	58025458 	.word	0x58025458
 8009270:	5802546c 	.word	0x5802546c
 8009274:	58025480 	.word	0x58025480
 8009278:	58025494 	.word	0x58025494
 800927c:	fffe000f 	.word	0xfffe000f
 8009280:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	68d2      	ldr	r2, [r2, #12]
 8009286:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009288:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009290:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009298:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80092a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	69db      	ldr	r3, [r3, #28]
 80092a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80092a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80092b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	461a      	mov	r2, r3
 80092c6:	4b6e      	ldr	r3, [pc, #440]	; (8009480 <HAL_DMA_Init+0x64c>)
 80092c8:	4413      	add	r3, r2
 80092ca:	4a6e      	ldr	r2, [pc, #440]	; (8009484 <HAL_DMA_Init+0x650>)
 80092cc:	fba2 2303 	umull	r2, r3, r2, r3
 80092d0:	091b      	lsrs	r3, r3, #4
 80092d2:	009a      	lsls	r2, r3, #2
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 fda1 	bl	800ae20 <DMA_CalcBaseAndBitshift>
 80092de:	4603      	mov	r3, r0
 80092e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092e6:	f003 031f 	and.w	r3, r3, #31
 80092ea:	2201      	movs	r2, #1
 80092ec:	409a      	lsls	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	605a      	str	r2, [r3, #4]
 80092f2:	e008      	b.n	8009306 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2240      	movs	r2, #64	; 0x40
 80092f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2203      	movs	r2, #3
 80092fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e0b7      	b.n	8009476 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a5f      	ldr	r2, [pc, #380]	; (8009488 <HAL_DMA_Init+0x654>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d072      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a5d      	ldr	r2, [pc, #372]	; (800948c <HAL_DMA_Init+0x658>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d06d      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a5c      	ldr	r2, [pc, #368]	; (8009490 <HAL_DMA_Init+0x65c>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d068      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a5a      	ldr	r2, [pc, #360]	; (8009494 <HAL_DMA_Init+0x660>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d063      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a59      	ldr	r2, [pc, #356]	; (8009498 <HAL_DMA_Init+0x664>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d05e      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a57      	ldr	r2, [pc, #348]	; (800949c <HAL_DMA_Init+0x668>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d059      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a56      	ldr	r2, [pc, #344]	; (80094a0 <HAL_DMA_Init+0x66c>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d054      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a54      	ldr	r2, [pc, #336]	; (80094a4 <HAL_DMA_Init+0x670>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d04f      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a53      	ldr	r2, [pc, #332]	; (80094a8 <HAL_DMA_Init+0x674>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d04a      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a51      	ldr	r2, [pc, #324]	; (80094ac <HAL_DMA_Init+0x678>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d045      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a50      	ldr	r2, [pc, #320]	; (80094b0 <HAL_DMA_Init+0x67c>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d040      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a4e      	ldr	r2, [pc, #312]	; (80094b4 <HAL_DMA_Init+0x680>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d03b      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a4d      	ldr	r2, [pc, #308]	; (80094b8 <HAL_DMA_Init+0x684>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d036      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a4b      	ldr	r2, [pc, #300]	; (80094bc <HAL_DMA_Init+0x688>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d031      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a4a      	ldr	r2, [pc, #296]	; (80094c0 <HAL_DMA_Init+0x68c>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d02c      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a48      	ldr	r2, [pc, #288]	; (80094c4 <HAL_DMA_Init+0x690>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d027      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a47      	ldr	r2, [pc, #284]	; (80094c8 <HAL_DMA_Init+0x694>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d022      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a45      	ldr	r2, [pc, #276]	; (80094cc <HAL_DMA_Init+0x698>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d01d      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a44      	ldr	r2, [pc, #272]	; (80094d0 <HAL_DMA_Init+0x69c>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d018      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a42      	ldr	r2, [pc, #264]	; (80094d4 <HAL_DMA_Init+0x6a0>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d013      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a41      	ldr	r2, [pc, #260]	; (80094d8 <HAL_DMA_Init+0x6a4>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d00e      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a3f      	ldr	r2, [pc, #252]	; (80094dc <HAL_DMA_Init+0x6a8>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d009      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a3e      	ldr	r2, [pc, #248]	; (80094e0 <HAL_DMA_Init+0x6ac>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d004      	beq.n	80093f6 <HAL_DMA_Init+0x5c2>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a3c      	ldr	r2, [pc, #240]	; (80094e4 <HAL_DMA_Init+0x6b0>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d101      	bne.n	80093fa <HAL_DMA_Init+0x5c6>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e000      	b.n	80093fc <HAL_DMA_Init+0x5c8>
 80093fa:	2300      	movs	r3, #0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d032      	beq.n	8009466 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f001 fe3b 	bl	800b07c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	2b80      	cmp	r3, #128	; 0x80
 800940c:	d102      	bne.n	8009414 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800941c:	b2d2      	uxtb	r2, r2
 800941e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009428:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d010      	beq.n	8009454 <HAL_DMA_Init+0x620>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	2b08      	cmp	r3, #8
 8009438:	d80c      	bhi.n	8009454 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 feb8 	bl	800b1b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009444:	2200      	movs	r2, #0
 8009446:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009450:	605a      	str	r2, [r3, #4]
 8009452:	e008      	b.n	8009466 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	a7fdabf8 	.word	0xa7fdabf8
 8009484:	cccccccd 	.word	0xcccccccd
 8009488:	40020010 	.word	0x40020010
 800948c:	40020028 	.word	0x40020028
 8009490:	40020040 	.word	0x40020040
 8009494:	40020058 	.word	0x40020058
 8009498:	40020070 	.word	0x40020070
 800949c:	40020088 	.word	0x40020088
 80094a0:	400200a0 	.word	0x400200a0
 80094a4:	400200b8 	.word	0x400200b8
 80094a8:	40020410 	.word	0x40020410
 80094ac:	40020428 	.word	0x40020428
 80094b0:	40020440 	.word	0x40020440
 80094b4:	40020458 	.word	0x40020458
 80094b8:	40020470 	.word	0x40020470
 80094bc:	40020488 	.word	0x40020488
 80094c0:	400204a0 	.word	0x400204a0
 80094c4:	400204b8 	.word	0x400204b8
 80094c8:	58025408 	.word	0x58025408
 80094cc:	5802541c 	.word	0x5802541c
 80094d0:	58025430 	.word	0x58025430
 80094d4:	58025444 	.word	0x58025444
 80094d8:	58025458 	.word	0x58025458
 80094dc:	5802546c 	.word	0x5802546c
 80094e0:	58025480 	.word	0x58025480
 80094e4:	58025494 	.word	0x58025494

080094e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80094f0:	f7fd f814 	bl	800651c <HAL_GetTick>
 80094f4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e2dc      	b.n	8009aba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b02      	cmp	r3, #2
 800950a:	d008      	beq.n	800951e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2280      	movs	r2, #128	; 0x80
 8009510:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e2cd      	b.n	8009aba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a76      	ldr	r2, [pc, #472]	; (80096fc <HAL_DMA_Abort+0x214>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d04a      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a74      	ldr	r2, [pc, #464]	; (8009700 <HAL_DMA_Abort+0x218>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d045      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a73      	ldr	r2, [pc, #460]	; (8009704 <HAL_DMA_Abort+0x21c>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d040      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a71      	ldr	r2, [pc, #452]	; (8009708 <HAL_DMA_Abort+0x220>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d03b      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a70      	ldr	r2, [pc, #448]	; (800970c <HAL_DMA_Abort+0x224>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d036      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a6e      	ldr	r2, [pc, #440]	; (8009710 <HAL_DMA_Abort+0x228>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d031      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a6d      	ldr	r2, [pc, #436]	; (8009714 <HAL_DMA_Abort+0x22c>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d02c      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a6b      	ldr	r2, [pc, #428]	; (8009718 <HAL_DMA_Abort+0x230>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d027      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a6a      	ldr	r2, [pc, #424]	; (800971c <HAL_DMA_Abort+0x234>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d022      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a68      	ldr	r2, [pc, #416]	; (8009720 <HAL_DMA_Abort+0x238>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d01d      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a67      	ldr	r2, [pc, #412]	; (8009724 <HAL_DMA_Abort+0x23c>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d018      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a65      	ldr	r2, [pc, #404]	; (8009728 <HAL_DMA_Abort+0x240>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d013      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a64      	ldr	r2, [pc, #400]	; (800972c <HAL_DMA_Abort+0x244>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d00e      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a62      	ldr	r2, [pc, #392]	; (8009730 <HAL_DMA_Abort+0x248>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d009      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a61      	ldr	r2, [pc, #388]	; (8009734 <HAL_DMA_Abort+0x24c>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d004      	beq.n	80095be <HAL_DMA_Abort+0xd6>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a5f      	ldr	r2, [pc, #380]	; (8009738 <HAL_DMA_Abort+0x250>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d101      	bne.n	80095c2 <HAL_DMA_Abort+0xda>
 80095be:	2301      	movs	r3, #1
 80095c0:	e000      	b.n	80095c4 <HAL_DMA_Abort+0xdc>
 80095c2:	2300      	movs	r3, #0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d013      	beq.n	80095f0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f022 021e 	bic.w	r2, r2, #30
 80095d6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	695a      	ldr	r2, [r3, #20]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095e6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	617b      	str	r3, [r7, #20]
 80095ee:	e00a      	b.n	8009606 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f022 020e 	bic.w	r2, r2, #14
 80095fe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a3c      	ldr	r2, [pc, #240]	; (80096fc <HAL_DMA_Abort+0x214>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d072      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a3a      	ldr	r2, [pc, #232]	; (8009700 <HAL_DMA_Abort+0x218>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d06d      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a39      	ldr	r2, [pc, #228]	; (8009704 <HAL_DMA_Abort+0x21c>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d068      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a37      	ldr	r2, [pc, #220]	; (8009708 <HAL_DMA_Abort+0x220>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d063      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a36      	ldr	r2, [pc, #216]	; (800970c <HAL_DMA_Abort+0x224>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d05e      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a34      	ldr	r2, [pc, #208]	; (8009710 <HAL_DMA_Abort+0x228>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d059      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a33      	ldr	r2, [pc, #204]	; (8009714 <HAL_DMA_Abort+0x22c>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d054      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a31      	ldr	r2, [pc, #196]	; (8009718 <HAL_DMA_Abort+0x230>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d04f      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a30      	ldr	r2, [pc, #192]	; (800971c <HAL_DMA_Abort+0x234>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d04a      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a2e      	ldr	r2, [pc, #184]	; (8009720 <HAL_DMA_Abort+0x238>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d045      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a2d      	ldr	r2, [pc, #180]	; (8009724 <HAL_DMA_Abort+0x23c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d040      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a2b      	ldr	r2, [pc, #172]	; (8009728 <HAL_DMA_Abort+0x240>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d03b      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a2a      	ldr	r2, [pc, #168]	; (800972c <HAL_DMA_Abort+0x244>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d036      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a28      	ldr	r2, [pc, #160]	; (8009730 <HAL_DMA_Abort+0x248>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d031      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a27      	ldr	r2, [pc, #156]	; (8009734 <HAL_DMA_Abort+0x24c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d02c      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a25      	ldr	r2, [pc, #148]	; (8009738 <HAL_DMA_Abort+0x250>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d027      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a24      	ldr	r2, [pc, #144]	; (800973c <HAL_DMA_Abort+0x254>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d022      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a22      	ldr	r2, [pc, #136]	; (8009740 <HAL_DMA_Abort+0x258>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d01d      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a21      	ldr	r2, [pc, #132]	; (8009744 <HAL_DMA_Abort+0x25c>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d018      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <HAL_DMA_Abort+0x260>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d013      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a1e      	ldr	r2, [pc, #120]	; (800974c <HAL_DMA_Abort+0x264>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d00e      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a1c      	ldr	r2, [pc, #112]	; (8009750 <HAL_DMA_Abort+0x268>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d009      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a1b      	ldr	r2, [pc, #108]	; (8009754 <HAL_DMA_Abort+0x26c>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d004      	beq.n	80096f6 <HAL_DMA_Abort+0x20e>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a19      	ldr	r2, [pc, #100]	; (8009758 <HAL_DMA_Abort+0x270>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d132      	bne.n	800975c <HAL_DMA_Abort+0x274>
 80096f6:	2301      	movs	r3, #1
 80096f8:	e031      	b.n	800975e <HAL_DMA_Abort+0x276>
 80096fa:	bf00      	nop
 80096fc:	40020010 	.word	0x40020010
 8009700:	40020028 	.word	0x40020028
 8009704:	40020040 	.word	0x40020040
 8009708:	40020058 	.word	0x40020058
 800970c:	40020070 	.word	0x40020070
 8009710:	40020088 	.word	0x40020088
 8009714:	400200a0 	.word	0x400200a0
 8009718:	400200b8 	.word	0x400200b8
 800971c:	40020410 	.word	0x40020410
 8009720:	40020428 	.word	0x40020428
 8009724:	40020440 	.word	0x40020440
 8009728:	40020458 	.word	0x40020458
 800972c:	40020470 	.word	0x40020470
 8009730:	40020488 	.word	0x40020488
 8009734:	400204a0 	.word	0x400204a0
 8009738:	400204b8 	.word	0x400204b8
 800973c:	58025408 	.word	0x58025408
 8009740:	5802541c 	.word	0x5802541c
 8009744:	58025430 	.word	0x58025430
 8009748:	58025444 	.word	0x58025444
 800974c:	58025458 	.word	0x58025458
 8009750:	5802546c 	.word	0x5802546c
 8009754:	58025480 	.word	0x58025480
 8009758:	58025494 	.word	0x58025494
 800975c:	2300      	movs	r3, #0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d007      	beq.n	8009772 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800976c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009770:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a6d      	ldr	r2, [pc, #436]	; (800992c <HAL_DMA_Abort+0x444>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d04a      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a6b      	ldr	r2, [pc, #428]	; (8009930 <HAL_DMA_Abort+0x448>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d045      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a6a      	ldr	r2, [pc, #424]	; (8009934 <HAL_DMA_Abort+0x44c>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d040      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a68      	ldr	r2, [pc, #416]	; (8009938 <HAL_DMA_Abort+0x450>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d03b      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a67      	ldr	r2, [pc, #412]	; (800993c <HAL_DMA_Abort+0x454>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d036      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a65      	ldr	r2, [pc, #404]	; (8009940 <HAL_DMA_Abort+0x458>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d031      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a64      	ldr	r2, [pc, #400]	; (8009944 <HAL_DMA_Abort+0x45c>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d02c      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a62      	ldr	r2, [pc, #392]	; (8009948 <HAL_DMA_Abort+0x460>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d027      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a61      	ldr	r2, [pc, #388]	; (800994c <HAL_DMA_Abort+0x464>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d022      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a5f      	ldr	r2, [pc, #380]	; (8009950 <HAL_DMA_Abort+0x468>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d01d      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a5e      	ldr	r2, [pc, #376]	; (8009954 <HAL_DMA_Abort+0x46c>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d018      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a5c      	ldr	r2, [pc, #368]	; (8009958 <HAL_DMA_Abort+0x470>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d013      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a5b      	ldr	r2, [pc, #364]	; (800995c <HAL_DMA_Abort+0x474>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d00e      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a59      	ldr	r2, [pc, #356]	; (8009960 <HAL_DMA_Abort+0x478>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d009      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a58      	ldr	r2, [pc, #352]	; (8009964 <HAL_DMA_Abort+0x47c>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d004      	beq.n	8009812 <HAL_DMA_Abort+0x32a>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a56      	ldr	r2, [pc, #344]	; (8009968 <HAL_DMA_Abort+0x480>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d108      	bne.n	8009824 <HAL_DMA_Abort+0x33c>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f022 0201 	bic.w	r2, r2, #1
 8009820:	601a      	str	r2, [r3, #0]
 8009822:	e007      	b.n	8009834 <HAL_DMA_Abort+0x34c>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f022 0201 	bic.w	r2, r2, #1
 8009832:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009834:	e013      	b.n	800985e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009836:	f7fc fe71 	bl	800651c <HAL_GetTick>
 800983a:	4602      	mov	r2, r0
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	2b05      	cmp	r3, #5
 8009842:	d90c      	bls.n	800985e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2220      	movs	r2, #32
 8009848:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2203      	movs	r2, #3
 800984e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e12d      	b.n	8009aba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1e5      	bne.n	8009836 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a2f      	ldr	r2, [pc, #188]	; (800992c <HAL_DMA_Abort+0x444>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d04a      	beq.n	800990a <HAL_DMA_Abort+0x422>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a2d      	ldr	r2, [pc, #180]	; (8009930 <HAL_DMA_Abort+0x448>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d045      	beq.n	800990a <HAL_DMA_Abort+0x422>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a2c      	ldr	r2, [pc, #176]	; (8009934 <HAL_DMA_Abort+0x44c>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d040      	beq.n	800990a <HAL_DMA_Abort+0x422>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a2a      	ldr	r2, [pc, #168]	; (8009938 <HAL_DMA_Abort+0x450>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d03b      	beq.n	800990a <HAL_DMA_Abort+0x422>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a29      	ldr	r2, [pc, #164]	; (800993c <HAL_DMA_Abort+0x454>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d036      	beq.n	800990a <HAL_DMA_Abort+0x422>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a27      	ldr	r2, [pc, #156]	; (8009940 <HAL_DMA_Abort+0x458>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d031      	beq.n	800990a <HAL_DMA_Abort+0x422>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a26      	ldr	r2, [pc, #152]	; (8009944 <HAL_DMA_Abort+0x45c>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d02c      	beq.n	800990a <HAL_DMA_Abort+0x422>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a24      	ldr	r2, [pc, #144]	; (8009948 <HAL_DMA_Abort+0x460>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d027      	beq.n	800990a <HAL_DMA_Abort+0x422>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a23      	ldr	r2, [pc, #140]	; (800994c <HAL_DMA_Abort+0x464>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d022      	beq.n	800990a <HAL_DMA_Abort+0x422>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a21      	ldr	r2, [pc, #132]	; (8009950 <HAL_DMA_Abort+0x468>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d01d      	beq.n	800990a <HAL_DMA_Abort+0x422>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a20      	ldr	r2, [pc, #128]	; (8009954 <HAL_DMA_Abort+0x46c>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d018      	beq.n	800990a <HAL_DMA_Abort+0x422>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a1e      	ldr	r2, [pc, #120]	; (8009958 <HAL_DMA_Abort+0x470>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d013      	beq.n	800990a <HAL_DMA_Abort+0x422>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a1d      	ldr	r2, [pc, #116]	; (800995c <HAL_DMA_Abort+0x474>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d00e      	beq.n	800990a <HAL_DMA_Abort+0x422>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a1b      	ldr	r2, [pc, #108]	; (8009960 <HAL_DMA_Abort+0x478>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d009      	beq.n	800990a <HAL_DMA_Abort+0x422>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a1a      	ldr	r2, [pc, #104]	; (8009964 <HAL_DMA_Abort+0x47c>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d004      	beq.n	800990a <HAL_DMA_Abort+0x422>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a18      	ldr	r2, [pc, #96]	; (8009968 <HAL_DMA_Abort+0x480>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d101      	bne.n	800990e <HAL_DMA_Abort+0x426>
 800990a:	2301      	movs	r3, #1
 800990c:	e000      	b.n	8009910 <HAL_DMA_Abort+0x428>
 800990e:	2300      	movs	r3, #0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d02b      	beq.n	800996c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009918:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800991e:	f003 031f 	and.w	r3, r3, #31
 8009922:	223f      	movs	r2, #63	; 0x3f
 8009924:	409a      	lsls	r2, r3
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	609a      	str	r2, [r3, #8]
 800992a:	e02a      	b.n	8009982 <HAL_DMA_Abort+0x49a>
 800992c:	40020010 	.word	0x40020010
 8009930:	40020028 	.word	0x40020028
 8009934:	40020040 	.word	0x40020040
 8009938:	40020058 	.word	0x40020058
 800993c:	40020070 	.word	0x40020070
 8009940:	40020088 	.word	0x40020088
 8009944:	400200a0 	.word	0x400200a0
 8009948:	400200b8 	.word	0x400200b8
 800994c:	40020410 	.word	0x40020410
 8009950:	40020428 	.word	0x40020428
 8009954:	40020440 	.word	0x40020440
 8009958:	40020458 	.word	0x40020458
 800995c:	40020470 	.word	0x40020470
 8009960:	40020488 	.word	0x40020488
 8009964:	400204a0 	.word	0x400204a0
 8009968:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009970:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009976:	f003 031f 	and.w	r3, r3, #31
 800997a:	2201      	movs	r2, #1
 800997c:	409a      	lsls	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a4f      	ldr	r2, [pc, #316]	; (8009ac4 <HAL_DMA_Abort+0x5dc>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d072      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a4d      	ldr	r2, [pc, #308]	; (8009ac8 <HAL_DMA_Abort+0x5e0>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d06d      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a4c      	ldr	r2, [pc, #304]	; (8009acc <HAL_DMA_Abort+0x5e4>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d068      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a4a      	ldr	r2, [pc, #296]	; (8009ad0 <HAL_DMA_Abort+0x5e8>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d063      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a49      	ldr	r2, [pc, #292]	; (8009ad4 <HAL_DMA_Abort+0x5ec>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d05e      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a47      	ldr	r2, [pc, #284]	; (8009ad8 <HAL_DMA_Abort+0x5f0>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d059      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a46      	ldr	r2, [pc, #280]	; (8009adc <HAL_DMA_Abort+0x5f4>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d054      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a44      	ldr	r2, [pc, #272]	; (8009ae0 <HAL_DMA_Abort+0x5f8>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d04f      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a43      	ldr	r2, [pc, #268]	; (8009ae4 <HAL_DMA_Abort+0x5fc>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d04a      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a41      	ldr	r2, [pc, #260]	; (8009ae8 <HAL_DMA_Abort+0x600>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d045      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a40      	ldr	r2, [pc, #256]	; (8009aec <HAL_DMA_Abort+0x604>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d040      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a3e      	ldr	r2, [pc, #248]	; (8009af0 <HAL_DMA_Abort+0x608>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d03b      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a3d      	ldr	r2, [pc, #244]	; (8009af4 <HAL_DMA_Abort+0x60c>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d036      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a3b      	ldr	r2, [pc, #236]	; (8009af8 <HAL_DMA_Abort+0x610>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d031      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a3a      	ldr	r2, [pc, #232]	; (8009afc <HAL_DMA_Abort+0x614>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d02c      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a38      	ldr	r2, [pc, #224]	; (8009b00 <HAL_DMA_Abort+0x618>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d027      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a37      	ldr	r2, [pc, #220]	; (8009b04 <HAL_DMA_Abort+0x61c>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d022      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a35      	ldr	r2, [pc, #212]	; (8009b08 <HAL_DMA_Abort+0x620>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d01d      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a34      	ldr	r2, [pc, #208]	; (8009b0c <HAL_DMA_Abort+0x624>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d018      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a32      	ldr	r2, [pc, #200]	; (8009b10 <HAL_DMA_Abort+0x628>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d013      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a31      	ldr	r2, [pc, #196]	; (8009b14 <HAL_DMA_Abort+0x62c>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d00e      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a2f      	ldr	r2, [pc, #188]	; (8009b18 <HAL_DMA_Abort+0x630>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d009      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a2e      	ldr	r2, [pc, #184]	; (8009b1c <HAL_DMA_Abort+0x634>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d004      	beq.n	8009a72 <HAL_DMA_Abort+0x58a>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a2c      	ldr	r2, [pc, #176]	; (8009b20 <HAL_DMA_Abort+0x638>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d101      	bne.n	8009a76 <HAL_DMA_Abort+0x58e>
 8009a72:	2301      	movs	r3, #1
 8009a74:	e000      	b.n	8009a78 <HAL_DMA_Abort+0x590>
 8009a76:	2300      	movs	r3, #0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d015      	beq.n	8009aa8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009a84:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00c      	beq.n	8009aa8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a9c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009aa6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3718      	adds	r7, #24
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	40020010 	.word	0x40020010
 8009ac8:	40020028 	.word	0x40020028
 8009acc:	40020040 	.word	0x40020040
 8009ad0:	40020058 	.word	0x40020058
 8009ad4:	40020070 	.word	0x40020070
 8009ad8:	40020088 	.word	0x40020088
 8009adc:	400200a0 	.word	0x400200a0
 8009ae0:	400200b8 	.word	0x400200b8
 8009ae4:	40020410 	.word	0x40020410
 8009ae8:	40020428 	.word	0x40020428
 8009aec:	40020440 	.word	0x40020440
 8009af0:	40020458 	.word	0x40020458
 8009af4:	40020470 	.word	0x40020470
 8009af8:	40020488 	.word	0x40020488
 8009afc:	400204a0 	.word	0x400204a0
 8009b00:	400204b8 	.word	0x400204b8
 8009b04:	58025408 	.word	0x58025408
 8009b08:	5802541c 	.word	0x5802541c
 8009b0c:	58025430 	.word	0x58025430
 8009b10:	58025444 	.word	0x58025444
 8009b14:	58025458 	.word	0x58025458
 8009b18:	5802546c 	.word	0x5802546c
 8009b1c:	58025480 	.word	0x58025480
 8009b20:	58025494 	.word	0x58025494

08009b24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e237      	b.n	8009fa6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d004      	beq.n	8009b4c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2280      	movs	r2, #128	; 0x80
 8009b46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e22c      	b.n	8009fa6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a5c      	ldr	r2, [pc, #368]	; (8009cc4 <HAL_DMA_Abort_IT+0x1a0>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d04a      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a5b      	ldr	r2, [pc, #364]	; (8009cc8 <HAL_DMA_Abort_IT+0x1a4>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d045      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a59      	ldr	r2, [pc, #356]	; (8009ccc <HAL_DMA_Abort_IT+0x1a8>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d040      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a58      	ldr	r2, [pc, #352]	; (8009cd0 <HAL_DMA_Abort_IT+0x1ac>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d03b      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a56      	ldr	r2, [pc, #344]	; (8009cd4 <HAL_DMA_Abort_IT+0x1b0>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d036      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a55      	ldr	r2, [pc, #340]	; (8009cd8 <HAL_DMA_Abort_IT+0x1b4>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d031      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a53      	ldr	r2, [pc, #332]	; (8009cdc <HAL_DMA_Abort_IT+0x1b8>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d02c      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a52      	ldr	r2, [pc, #328]	; (8009ce0 <HAL_DMA_Abort_IT+0x1bc>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d027      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a50      	ldr	r2, [pc, #320]	; (8009ce4 <HAL_DMA_Abort_IT+0x1c0>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d022      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a4f      	ldr	r2, [pc, #316]	; (8009ce8 <HAL_DMA_Abort_IT+0x1c4>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d01d      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a4d      	ldr	r2, [pc, #308]	; (8009cec <HAL_DMA_Abort_IT+0x1c8>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d018      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a4c      	ldr	r2, [pc, #304]	; (8009cf0 <HAL_DMA_Abort_IT+0x1cc>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d013      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a4a      	ldr	r2, [pc, #296]	; (8009cf4 <HAL_DMA_Abort_IT+0x1d0>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d00e      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a49      	ldr	r2, [pc, #292]	; (8009cf8 <HAL_DMA_Abort_IT+0x1d4>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d009      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a47      	ldr	r2, [pc, #284]	; (8009cfc <HAL_DMA_Abort_IT+0x1d8>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d004      	beq.n	8009bec <HAL_DMA_Abort_IT+0xc8>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a46      	ldr	r2, [pc, #280]	; (8009d00 <HAL_DMA_Abort_IT+0x1dc>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d101      	bne.n	8009bf0 <HAL_DMA_Abort_IT+0xcc>
 8009bec:	2301      	movs	r3, #1
 8009bee:	e000      	b.n	8009bf2 <HAL_DMA_Abort_IT+0xce>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 8086 	beq.w	8009d04 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2204      	movs	r2, #4
 8009bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a2f      	ldr	r2, [pc, #188]	; (8009cc4 <HAL_DMA_Abort_IT+0x1a0>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d04a      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a2e      	ldr	r2, [pc, #184]	; (8009cc8 <HAL_DMA_Abort_IT+0x1a4>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d045      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a2c      	ldr	r2, [pc, #176]	; (8009ccc <HAL_DMA_Abort_IT+0x1a8>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d040      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a2b      	ldr	r2, [pc, #172]	; (8009cd0 <HAL_DMA_Abort_IT+0x1ac>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d03b      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a29      	ldr	r2, [pc, #164]	; (8009cd4 <HAL_DMA_Abort_IT+0x1b0>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d036      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a28      	ldr	r2, [pc, #160]	; (8009cd8 <HAL_DMA_Abort_IT+0x1b4>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d031      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a26      	ldr	r2, [pc, #152]	; (8009cdc <HAL_DMA_Abort_IT+0x1b8>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d02c      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a25      	ldr	r2, [pc, #148]	; (8009ce0 <HAL_DMA_Abort_IT+0x1bc>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d027      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a23      	ldr	r2, [pc, #140]	; (8009ce4 <HAL_DMA_Abort_IT+0x1c0>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d022      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a22      	ldr	r2, [pc, #136]	; (8009ce8 <HAL_DMA_Abort_IT+0x1c4>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d01d      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a20      	ldr	r2, [pc, #128]	; (8009cec <HAL_DMA_Abort_IT+0x1c8>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d018      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a1f      	ldr	r2, [pc, #124]	; (8009cf0 <HAL_DMA_Abort_IT+0x1cc>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d013      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a1d      	ldr	r2, [pc, #116]	; (8009cf4 <HAL_DMA_Abort_IT+0x1d0>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d00e      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a1c      	ldr	r2, [pc, #112]	; (8009cf8 <HAL_DMA_Abort_IT+0x1d4>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d009      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a1a      	ldr	r2, [pc, #104]	; (8009cfc <HAL_DMA_Abort_IT+0x1d8>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d004      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0x17c>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a19      	ldr	r2, [pc, #100]	; (8009d00 <HAL_DMA_Abort_IT+0x1dc>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d108      	bne.n	8009cb2 <HAL_DMA_Abort_IT+0x18e>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 0201 	bic.w	r2, r2, #1
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	e178      	b.n	8009fa4 <HAL_DMA_Abort_IT+0x480>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f022 0201 	bic.w	r2, r2, #1
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	e16f      	b.n	8009fa4 <HAL_DMA_Abort_IT+0x480>
 8009cc4:	40020010 	.word	0x40020010
 8009cc8:	40020028 	.word	0x40020028
 8009ccc:	40020040 	.word	0x40020040
 8009cd0:	40020058 	.word	0x40020058
 8009cd4:	40020070 	.word	0x40020070
 8009cd8:	40020088 	.word	0x40020088
 8009cdc:	400200a0 	.word	0x400200a0
 8009ce0:	400200b8 	.word	0x400200b8
 8009ce4:	40020410 	.word	0x40020410
 8009ce8:	40020428 	.word	0x40020428
 8009cec:	40020440 	.word	0x40020440
 8009cf0:	40020458 	.word	0x40020458
 8009cf4:	40020470 	.word	0x40020470
 8009cf8:	40020488 	.word	0x40020488
 8009cfc:	400204a0 	.word	0x400204a0
 8009d00:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f022 020e 	bic.w	r2, r2, #14
 8009d12:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a6c      	ldr	r2, [pc, #432]	; (8009ecc <HAL_DMA_Abort_IT+0x3a8>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d04a      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a6b      	ldr	r2, [pc, #428]	; (8009ed0 <HAL_DMA_Abort_IT+0x3ac>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d045      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a69      	ldr	r2, [pc, #420]	; (8009ed4 <HAL_DMA_Abort_IT+0x3b0>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d040      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a68      	ldr	r2, [pc, #416]	; (8009ed8 <HAL_DMA_Abort_IT+0x3b4>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d03b      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a66      	ldr	r2, [pc, #408]	; (8009edc <HAL_DMA_Abort_IT+0x3b8>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d036      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a65      	ldr	r2, [pc, #404]	; (8009ee0 <HAL_DMA_Abort_IT+0x3bc>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d031      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a63      	ldr	r2, [pc, #396]	; (8009ee4 <HAL_DMA_Abort_IT+0x3c0>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d02c      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a62      	ldr	r2, [pc, #392]	; (8009ee8 <HAL_DMA_Abort_IT+0x3c4>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d027      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a60      	ldr	r2, [pc, #384]	; (8009eec <HAL_DMA_Abort_IT+0x3c8>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d022      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a5f      	ldr	r2, [pc, #380]	; (8009ef0 <HAL_DMA_Abort_IT+0x3cc>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d01d      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a5d      	ldr	r2, [pc, #372]	; (8009ef4 <HAL_DMA_Abort_IT+0x3d0>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d018      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a5c      	ldr	r2, [pc, #368]	; (8009ef8 <HAL_DMA_Abort_IT+0x3d4>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d013      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a5a      	ldr	r2, [pc, #360]	; (8009efc <HAL_DMA_Abort_IT+0x3d8>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d00e      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a59      	ldr	r2, [pc, #356]	; (8009f00 <HAL_DMA_Abort_IT+0x3dc>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d009      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a57      	ldr	r2, [pc, #348]	; (8009f04 <HAL_DMA_Abort_IT+0x3e0>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d004      	beq.n	8009db4 <HAL_DMA_Abort_IT+0x290>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a56      	ldr	r2, [pc, #344]	; (8009f08 <HAL_DMA_Abort_IT+0x3e4>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d108      	bne.n	8009dc6 <HAL_DMA_Abort_IT+0x2a2>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f022 0201 	bic.w	r2, r2, #1
 8009dc2:	601a      	str	r2, [r3, #0]
 8009dc4:	e007      	b.n	8009dd6 <HAL_DMA_Abort_IT+0x2b2>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f022 0201 	bic.w	r2, r2, #1
 8009dd4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a3c      	ldr	r2, [pc, #240]	; (8009ecc <HAL_DMA_Abort_IT+0x3a8>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d072      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a3a      	ldr	r2, [pc, #232]	; (8009ed0 <HAL_DMA_Abort_IT+0x3ac>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d06d      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a39      	ldr	r2, [pc, #228]	; (8009ed4 <HAL_DMA_Abort_IT+0x3b0>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d068      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a37      	ldr	r2, [pc, #220]	; (8009ed8 <HAL_DMA_Abort_IT+0x3b4>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d063      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a36      	ldr	r2, [pc, #216]	; (8009edc <HAL_DMA_Abort_IT+0x3b8>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d05e      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a34      	ldr	r2, [pc, #208]	; (8009ee0 <HAL_DMA_Abort_IT+0x3bc>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d059      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a33      	ldr	r2, [pc, #204]	; (8009ee4 <HAL_DMA_Abort_IT+0x3c0>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d054      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a31      	ldr	r2, [pc, #196]	; (8009ee8 <HAL_DMA_Abort_IT+0x3c4>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d04f      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a30      	ldr	r2, [pc, #192]	; (8009eec <HAL_DMA_Abort_IT+0x3c8>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d04a      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a2e      	ldr	r2, [pc, #184]	; (8009ef0 <HAL_DMA_Abort_IT+0x3cc>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d045      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a2d      	ldr	r2, [pc, #180]	; (8009ef4 <HAL_DMA_Abort_IT+0x3d0>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d040      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a2b      	ldr	r2, [pc, #172]	; (8009ef8 <HAL_DMA_Abort_IT+0x3d4>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d03b      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a2a      	ldr	r2, [pc, #168]	; (8009efc <HAL_DMA_Abort_IT+0x3d8>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d036      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a28      	ldr	r2, [pc, #160]	; (8009f00 <HAL_DMA_Abort_IT+0x3dc>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d031      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a27      	ldr	r2, [pc, #156]	; (8009f04 <HAL_DMA_Abort_IT+0x3e0>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d02c      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a25      	ldr	r2, [pc, #148]	; (8009f08 <HAL_DMA_Abort_IT+0x3e4>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d027      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a24      	ldr	r2, [pc, #144]	; (8009f0c <HAL_DMA_Abort_IT+0x3e8>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d022      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a22      	ldr	r2, [pc, #136]	; (8009f10 <HAL_DMA_Abort_IT+0x3ec>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d01d      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a21      	ldr	r2, [pc, #132]	; (8009f14 <HAL_DMA_Abort_IT+0x3f0>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d018      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a1f      	ldr	r2, [pc, #124]	; (8009f18 <HAL_DMA_Abort_IT+0x3f4>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d013      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a1e      	ldr	r2, [pc, #120]	; (8009f1c <HAL_DMA_Abort_IT+0x3f8>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d00e      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a1c      	ldr	r2, [pc, #112]	; (8009f20 <HAL_DMA_Abort_IT+0x3fc>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d009      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a1b      	ldr	r2, [pc, #108]	; (8009f24 <HAL_DMA_Abort_IT+0x400>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d004      	beq.n	8009ec6 <HAL_DMA_Abort_IT+0x3a2>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a19      	ldr	r2, [pc, #100]	; (8009f28 <HAL_DMA_Abort_IT+0x404>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d132      	bne.n	8009f2c <HAL_DMA_Abort_IT+0x408>
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e031      	b.n	8009f2e <HAL_DMA_Abort_IT+0x40a>
 8009eca:	bf00      	nop
 8009ecc:	40020010 	.word	0x40020010
 8009ed0:	40020028 	.word	0x40020028
 8009ed4:	40020040 	.word	0x40020040
 8009ed8:	40020058 	.word	0x40020058
 8009edc:	40020070 	.word	0x40020070
 8009ee0:	40020088 	.word	0x40020088
 8009ee4:	400200a0 	.word	0x400200a0
 8009ee8:	400200b8 	.word	0x400200b8
 8009eec:	40020410 	.word	0x40020410
 8009ef0:	40020428 	.word	0x40020428
 8009ef4:	40020440 	.word	0x40020440
 8009ef8:	40020458 	.word	0x40020458
 8009efc:	40020470 	.word	0x40020470
 8009f00:	40020488 	.word	0x40020488
 8009f04:	400204a0 	.word	0x400204a0
 8009f08:	400204b8 	.word	0x400204b8
 8009f0c:	58025408 	.word	0x58025408
 8009f10:	5802541c 	.word	0x5802541c
 8009f14:	58025430 	.word	0x58025430
 8009f18:	58025444 	.word	0x58025444
 8009f1c:	58025458 	.word	0x58025458
 8009f20:	5802546c 	.word	0x5802546c
 8009f24:	58025480 	.word	0x58025480
 8009f28:	58025494 	.word	0x58025494
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d028      	beq.n	8009f84 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f40:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f46:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f4c:	f003 031f 	and.w	r3, r3, #31
 8009f50:	2201      	movs	r2, #1
 8009f52:	409a      	lsls	r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009f60:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00c      	beq.n	8009f84 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f78:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009f82:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop

08009fb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08a      	sub	sp, #40	; 0x28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009fbc:	4b67      	ldr	r3, [pc, #412]	; (800a15c <HAL_DMA_IRQHandler+0x1ac>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a67      	ldr	r2, [pc, #412]	; (800a160 <HAL_DMA_IRQHandler+0x1b0>)
 8009fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc6:	0a9b      	lsrs	r3, r3, #10
 8009fc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fd4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a5f      	ldr	r2, [pc, #380]	; (800a164 <HAL_DMA_IRQHandler+0x1b4>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d04a      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a5d      	ldr	r2, [pc, #372]	; (800a168 <HAL_DMA_IRQHandler+0x1b8>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d045      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a5c      	ldr	r2, [pc, #368]	; (800a16c <HAL_DMA_IRQHandler+0x1bc>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d040      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a5a      	ldr	r2, [pc, #360]	; (800a170 <HAL_DMA_IRQHandler+0x1c0>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d03b      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a59      	ldr	r2, [pc, #356]	; (800a174 <HAL_DMA_IRQHandler+0x1c4>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d036      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a57      	ldr	r2, [pc, #348]	; (800a178 <HAL_DMA_IRQHandler+0x1c8>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d031      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a56      	ldr	r2, [pc, #344]	; (800a17c <HAL_DMA_IRQHandler+0x1cc>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d02c      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a54      	ldr	r2, [pc, #336]	; (800a180 <HAL_DMA_IRQHandler+0x1d0>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d027      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a53      	ldr	r2, [pc, #332]	; (800a184 <HAL_DMA_IRQHandler+0x1d4>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d022      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a51      	ldr	r2, [pc, #324]	; (800a188 <HAL_DMA_IRQHandler+0x1d8>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d01d      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a50      	ldr	r2, [pc, #320]	; (800a18c <HAL_DMA_IRQHandler+0x1dc>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d018      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a4e      	ldr	r2, [pc, #312]	; (800a190 <HAL_DMA_IRQHandler+0x1e0>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d013      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a4d      	ldr	r2, [pc, #308]	; (800a194 <HAL_DMA_IRQHandler+0x1e4>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d00e      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a4b      	ldr	r2, [pc, #300]	; (800a198 <HAL_DMA_IRQHandler+0x1e8>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d009      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a4a      	ldr	r2, [pc, #296]	; (800a19c <HAL_DMA_IRQHandler+0x1ec>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d004      	beq.n	800a082 <HAL_DMA_IRQHandler+0xd2>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a48      	ldr	r2, [pc, #288]	; (800a1a0 <HAL_DMA_IRQHandler+0x1f0>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d101      	bne.n	800a086 <HAL_DMA_IRQHandler+0xd6>
 800a082:	2301      	movs	r3, #1
 800a084:	e000      	b.n	800a088 <HAL_DMA_IRQHandler+0xd8>
 800a086:	2300      	movs	r3, #0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 842b 	beq.w	800a8e4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a092:	f003 031f 	and.w	r3, r3, #31
 800a096:	2208      	movs	r2, #8
 800a098:	409a      	lsls	r2, r3
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	4013      	ands	r3, r2
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 80a2 	beq.w	800a1e8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a2e      	ldr	r2, [pc, #184]	; (800a164 <HAL_DMA_IRQHandler+0x1b4>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d04a      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a2d      	ldr	r2, [pc, #180]	; (800a168 <HAL_DMA_IRQHandler+0x1b8>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d045      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a2b      	ldr	r2, [pc, #172]	; (800a16c <HAL_DMA_IRQHandler+0x1bc>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d040      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a2a      	ldr	r2, [pc, #168]	; (800a170 <HAL_DMA_IRQHandler+0x1c0>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d03b      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a28      	ldr	r2, [pc, #160]	; (800a174 <HAL_DMA_IRQHandler+0x1c4>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d036      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a27      	ldr	r2, [pc, #156]	; (800a178 <HAL_DMA_IRQHandler+0x1c8>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d031      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a25      	ldr	r2, [pc, #148]	; (800a17c <HAL_DMA_IRQHandler+0x1cc>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d02c      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a24      	ldr	r2, [pc, #144]	; (800a180 <HAL_DMA_IRQHandler+0x1d0>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d027      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a22      	ldr	r2, [pc, #136]	; (800a184 <HAL_DMA_IRQHandler+0x1d4>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d022      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a21      	ldr	r2, [pc, #132]	; (800a188 <HAL_DMA_IRQHandler+0x1d8>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d01d      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a1f      	ldr	r2, [pc, #124]	; (800a18c <HAL_DMA_IRQHandler+0x1dc>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d018      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a1e      	ldr	r2, [pc, #120]	; (800a190 <HAL_DMA_IRQHandler+0x1e0>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d013      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a1c      	ldr	r2, [pc, #112]	; (800a194 <HAL_DMA_IRQHandler+0x1e4>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d00e      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a1b      	ldr	r2, [pc, #108]	; (800a198 <HAL_DMA_IRQHandler+0x1e8>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d009      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a19      	ldr	r2, [pc, #100]	; (800a19c <HAL_DMA_IRQHandler+0x1ec>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d004      	beq.n	800a144 <HAL_DMA_IRQHandler+0x194>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a18      	ldr	r2, [pc, #96]	; (800a1a0 <HAL_DMA_IRQHandler+0x1f0>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d12f      	bne.n	800a1a4 <HAL_DMA_IRQHandler+0x1f4>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0304 	and.w	r3, r3, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	bf14      	ite	ne
 800a152:	2301      	movne	r3, #1
 800a154:	2300      	moveq	r3, #0
 800a156:	b2db      	uxtb	r3, r3
 800a158:	e02e      	b.n	800a1b8 <HAL_DMA_IRQHandler+0x208>
 800a15a:	bf00      	nop
 800a15c:	20000010 	.word	0x20000010
 800a160:	1b4e81b5 	.word	0x1b4e81b5
 800a164:	40020010 	.word	0x40020010
 800a168:	40020028 	.word	0x40020028
 800a16c:	40020040 	.word	0x40020040
 800a170:	40020058 	.word	0x40020058
 800a174:	40020070 	.word	0x40020070
 800a178:	40020088 	.word	0x40020088
 800a17c:	400200a0 	.word	0x400200a0
 800a180:	400200b8 	.word	0x400200b8
 800a184:	40020410 	.word	0x40020410
 800a188:	40020428 	.word	0x40020428
 800a18c:	40020440 	.word	0x40020440
 800a190:	40020458 	.word	0x40020458
 800a194:	40020470 	.word	0x40020470
 800a198:	40020488 	.word	0x40020488
 800a19c:	400204a0 	.word	0x400204a0
 800a1a0:	400204b8 	.word	0x400204b8
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0308 	and.w	r3, r3, #8
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	bf14      	ite	ne
 800a1b2:	2301      	movne	r3, #1
 800a1b4:	2300      	moveq	r3, #0
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d015      	beq.n	800a1e8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f022 0204 	bic.w	r2, r2, #4
 800a1ca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1d0:	f003 031f 	and.w	r3, r3, #31
 800a1d4:	2208      	movs	r2, #8
 800a1d6:	409a      	lsls	r2, r3
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e0:	f043 0201 	orr.w	r2, r3, #1
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ec:	f003 031f 	and.w	r3, r3, #31
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f6:	f003 0301 	and.w	r3, r3, #1
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d06e      	beq.n	800a2dc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a69      	ldr	r2, [pc, #420]	; (800a3a8 <HAL_DMA_IRQHandler+0x3f8>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d04a      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a67      	ldr	r2, [pc, #412]	; (800a3ac <HAL_DMA_IRQHandler+0x3fc>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d045      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a66      	ldr	r2, [pc, #408]	; (800a3b0 <HAL_DMA_IRQHandler+0x400>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d040      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a64      	ldr	r2, [pc, #400]	; (800a3b4 <HAL_DMA_IRQHandler+0x404>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d03b      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a63      	ldr	r2, [pc, #396]	; (800a3b8 <HAL_DMA_IRQHandler+0x408>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d036      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a61      	ldr	r2, [pc, #388]	; (800a3bc <HAL_DMA_IRQHandler+0x40c>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d031      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a60      	ldr	r2, [pc, #384]	; (800a3c0 <HAL_DMA_IRQHandler+0x410>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d02c      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a5e      	ldr	r2, [pc, #376]	; (800a3c4 <HAL_DMA_IRQHandler+0x414>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d027      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a5d      	ldr	r2, [pc, #372]	; (800a3c8 <HAL_DMA_IRQHandler+0x418>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d022      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a5b      	ldr	r2, [pc, #364]	; (800a3cc <HAL_DMA_IRQHandler+0x41c>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d01d      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a5a      	ldr	r2, [pc, #360]	; (800a3d0 <HAL_DMA_IRQHandler+0x420>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d018      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a58      	ldr	r2, [pc, #352]	; (800a3d4 <HAL_DMA_IRQHandler+0x424>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d013      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a57      	ldr	r2, [pc, #348]	; (800a3d8 <HAL_DMA_IRQHandler+0x428>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d00e      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a55      	ldr	r2, [pc, #340]	; (800a3dc <HAL_DMA_IRQHandler+0x42c>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d009      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a54      	ldr	r2, [pc, #336]	; (800a3e0 <HAL_DMA_IRQHandler+0x430>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d004      	beq.n	800a29e <HAL_DMA_IRQHandler+0x2ee>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a52      	ldr	r2, [pc, #328]	; (800a3e4 <HAL_DMA_IRQHandler+0x434>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d10a      	bne.n	800a2b4 <HAL_DMA_IRQHandler+0x304>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	bf14      	ite	ne
 800a2ac:	2301      	movne	r3, #1
 800a2ae:	2300      	moveq	r3, #0
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	e003      	b.n	800a2bc <HAL_DMA_IRQHandler+0x30c>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00d      	beq.n	800a2dc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2c4:	f003 031f 	and.w	r3, r3, #31
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	409a      	lsls	r2, r3
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d4:	f043 0202 	orr.w	r2, r3, #2
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2e0:	f003 031f 	and.w	r3, r3, #31
 800a2e4:	2204      	movs	r2, #4
 800a2e6:	409a      	lsls	r2, r3
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 808f 	beq.w	800a410 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a2c      	ldr	r2, [pc, #176]	; (800a3a8 <HAL_DMA_IRQHandler+0x3f8>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d04a      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a2a      	ldr	r2, [pc, #168]	; (800a3ac <HAL_DMA_IRQHandler+0x3fc>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d045      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a29      	ldr	r2, [pc, #164]	; (800a3b0 <HAL_DMA_IRQHandler+0x400>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d040      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a27      	ldr	r2, [pc, #156]	; (800a3b4 <HAL_DMA_IRQHandler+0x404>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d03b      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a26      	ldr	r2, [pc, #152]	; (800a3b8 <HAL_DMA_IRQHandler+0x408>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d036      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a24      	ldr	r2, [pc, #144]	; (800a3bc <HAL_DMA_IRQHandler+0x40c>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d031      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a23      	ldr	r2, [pc, #140]	; (800a3c0 <HAL_DMA_IRQHandler+0x410>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d02c      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a21      	ldr	r2, [pc, #132]	; (800a3c4 <HAL_DMA_IRQHandler+0x414>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d027      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a20      	ldr	r2, [pc, #128]	; (800a3c8 <HAL_DMA_IRQHandler+0x418>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d022      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a1e      	ldr	r2, [pc, #120]	; (800a3cc <HAL_DMA_IRQHandler+0x41c>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d01d      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a1d      	ldr	r2, [pc, #116]	; (800a3d0 <HAL_DMA_IRQHandler+0x420>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d018      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a1b      	ldr	r2, [pc, #108]	; (800a3d4 <HAL_DMA_IRQHandler+0x424>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d013      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a1a      	ldr	r2, [pc, #104]	; (800a3d8 <HAL_DMA_IRQHandler+0x428>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d00e      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a18      	ldr	r2, [pc, #96]	; (800a3dc <HAL_DMA_IRQHandler+0x42c>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d009      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a17      	ldr	r2, [pc, #92]	; (800a3e0 <HAL_DMA_IRQHandler+0x430>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d004      	beq.n	800a392 <HAL_DMA_IRQHandler+0x3e2>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a15      	ldr	r2, [pc, #84]	; (800a3e4 <HAL_DMA_IRQHandler+0x434>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d12a      	bne.n	800a3e8 <HAL_DMA_IRQHandler+0x438>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0302 	and.w	r3, r3, #2
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bf14      	ite	ne
 800a3a0:	2301      	movne	r3, #1
 800a3a2:	2300      	moveq	r3, #0
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	e023      	b.n	800a3f0 <HAL_DMA_IRQHandler+0x440>
 800a3a8:	40020010 	.word	0x40020010
 800a3ac:	40020028 	.word	0x40020028
 800a3b0:	40020040 	.word	0x40020040
 800a3b4:	40020058 	.word	0x40020058
 800a3b8:	40020070 	.word	0x40020070
 800a3bc:	40020088 	.word	0x40020088
 800a3c0:	400200a0 	.word	0x400200a0
 800a3c4:	400200b8 	.word	0x400200b8
 800a3c8:	40020410 	.word	0x40020410
 800a3cc:	40020428 	.word	0x40020428
 800a3d0:	40020440 	.word	0x40020440
 800a3d4:	40020458 	.word	0x40020458
 800a3d8:	40020470 	.word	0x40020470
 800a3dc:	40020488 	.word	0x40020488
 800a3e0:	400204a0 	.word	0x400204a0
 800a3e4:	400204b8 	.word	0x400204b8
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00d      	beq.n	800a410 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3f8:	f003 031f 	and.w	r3, r3, #31
 800a3fc:	2204      	movs	r2, #4
 800a3fe:	409a      	lsls	r2, r3
 800a400:	6a3b      	ldr	r3, [r7, #32]
 800a402:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a408:	f043 0204 	orr.w	r2, r3, #4
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a414:	f003 031f 	and.w	r3, r3, #31
 800a418:	2210      	movs	r2, #16
 800a41a:	409a      	lsls	r2, r3
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	4013      	ands	r3, r2
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 80a6 	beq.w	800a572 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a85      	ldr	r2, [pc, #532]	; (800a640 <HAL_DMA_IRQHandler+0x690>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d04a      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a83      	ldr	r2, [pc, #524]	; (800a644 <HAL_DMA_IRQHandler+0x694>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d045      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a82      	ldr	r2, [pc, #520]	; (800a648 <HAL_DMA_IRQHandler+0x698>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d040      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a80      	ldr	r2, [pc, #512]	; (800a64c <HAL_DMA_IRQHandler+0x69c>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d03b      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a7f      	ldr	r2, [pc, #508]	; (800a650 <HAL_DMA_IRQHandler+0x6a0>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d036      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a7d      	ldr	r2, [pc, #500]	; (800a654 <HAL_DMA_IRQHandler+0x6a4>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d031      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a7c      	ldr	r2, [pc, #496]	; (800a658 <HAL_DMA_IRQHandler+0x6a8>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d02c      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a7a      	ldr	r2, [pc, #488]	; (800a65c <HAL_DMA_IRQHandler+0x6ac>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d027      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a79      	ldr	r2, [pc, #484]	; (800a660 <HAL_DMA_IRQHandler+0x6b0>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d022      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a77      	ldr	r2, [pc, #476]	; (800a664 <HAL_DMA_IRQHandler+0x6b4>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d01d      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a76      	ldr	r2, [pc, #472]	; (800a668 <HAL_DMA_IRQHandler+0x6b8>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d018      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a74      	ldr	r2, [pc, #464]	; (800a66c <HAL_DMA_IRQHandler+0x6bc>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d013      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a73      	ldr	r2, [pc, #460]	; (800a670 <HAL_DMA_IRQHandler+0x6c0>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d00e      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a71      	ldr	r2, [pc, #452]	; (800a674 <HAL_DMA_IRQHandler+0x6c4>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d009      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a70      	ldr	r2, [pc, #448]	; (800a678 <HAL_DMA_IRQHandler+0x6c8>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d004      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0x516>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a6e      	ldr	r2, [pc, #440]	; (800a67c <HAL_DMA_IRQHandler+0x6cc>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d10a      	bne.n	800a4dc <HAL_DMA_IRQHandler+0x52c>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0308 	and.w	r3, r3, #8
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	bf14      	ite	ne
 800a4d4:	2301      	movne	r3, #1
 800a4d6:	2300      	moveq	r3, #0
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	e009      	b.n	800a4f0 <HAL_DMA_IRQHandler+0x540>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 0304 	and.w	r3, r3, #4
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	bf14      	ite	ne
 800a4ea:	2301      	movne	r3, #1
 800a4ec:	2300      	moveq	r3, #0
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d03e      	beq.n	800a572 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4f8:	f003 031f 	and.w	r3, r3, #31
 800a4fc:	2210      	movs	r2, #16
 800a4fe:	409a      	lsls	r2, r3
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d018      	beq.n	800a544 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d108      	bne.n	800a532 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a524:	2b00      	cmp	r3, #0
 800a526:	d024      	beq.n	800a572 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	4798      	blx	r3
 800a530:	e01f      	b.n	800a572 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a536:	2b00      	cmp	r3, #0
 800a538:	d01b      	beq.n	800a572 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	4798      	blx	r3
 800a542:	e016      	b.n	800a572 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d107      	bne.n	800a562 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f022 0208 	bic.w	r2, r2, #8
 800a560:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a576:	f003 031f 	and.w	r3, r3, #31
 800a57a:	2220      	movs	r2, #32
 800a57c:	409a      	lsls	r2, r3
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	4013      	ands	r3, r2
 800a582:	2b00      	cmp	r3, #0
 800a584:	f000 8110 	beq.w	800a7a8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a2c      	ldr	r2, [pc, #176]	; (800a640 <HAL_DMA_IRQHandler+0x690>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d04a      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a2b      	ldr	r2, [pc, #172]	; (800a644 <HAL_DMA_IRQHandler+0x694>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d045      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a29      	ldr	r2, [pc, #164]	; (800a648 <HAL_DMA_IRQHandler+0x698>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d040      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a28      	ldr	r2, [pc, #160]	; (800a64c <HAL_DMA_IRQHandler+0x69c>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d03b      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a26      	ldr	r2, [pc, #152]	; (800a650 <HAL_DMA_IRQHandler+0x6a0>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d036      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a25      	ldr	r2, [pc, #148]	; (800a654 <HAL_DMA_IRQHandler+0x6a4>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d031      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a23      	ldr	r2, [pc, #140]	; (800a658 <HAL_DMA_IRQHandler+0x6a8>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d02c      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a22      	ldr	r2, [pc, #136]	; (800a65c <HAL_DMA_IRQHandler+0x6ac>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d027      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a20      	ldr	r2, [pc, #128]	; (800a660 <HAL_DMA_IRQHandler+0x6b0>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d022      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a1f      	ldr	r2, [pc, #124]	; (800a664 <HAL_DMA_IRQHandler+0x6b4>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d01d      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a1d      	ldr	r2, [pc, #116]	; (800a668 <HAL_DMA_IRQHandler+0x6b8>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d018      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a1c      	ldr	r2, [pc, #112]	; (800a66c <HAL_DMA_IRQHandler+0x6bc>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d013      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a1a      	ldr	r2, [pc, #104]	; (800a670 <HAL_DMA_IRQHandler+0x6c0>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d00e      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a19      	ldr	r2, [pc, #100]	; (800a674 <HAL_DMA_IRQHandler+0x6c4>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d009      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a17      	ldr	r2, [pc, #92]	; (800a678 <HAL_DMA_IRQHandler+0x6c8>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d004      	beq.n	800a628 <HAL_DMA_IRQHandler+0x678>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a16      	ldr	r2, [pc, #88]	; (800a67c <HAL_DMA_IRQHandler+0x6cc>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d12b      	bne.n	800a680 <HAL_DMA_IRQHandler+0x6d0>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 0310 	and.w	r3, r3, #16
 800a632:	2b00      	cmp	r3, #0
 800a634:	bf14      	ite	ne
 800a636:	2301      	movne	r3, #1
 800a638:	2300      	moveq	r3, #0
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	e02a      	b.n	800a694 <HAL_DMA_IRQHandler+0x6e4>
 800a63e:	bf00      	nop
 800a640:	40020010 	.word	0x40020010
 800a644:	40020028 	.word	0x40020028
 800a648:	40020040 	.word	0x40020040
 800a64c:	40020058 	.word	0x40020058
 800a650:	40020070 	.word	0x40020070
 800a654:	40020088 	.word	0x40020088
 800a658:	400200a0 	.word	0x400200a0
 800a65c:	400200b8 	.word	0x400200b8
 800a660:	40020410 	.word	0x40020410
 800a664:	40020428 	.word	0x40020428
 800a668:	40020440 	.word	0x40020440
 800a66c:	40020458 	.word	0x40020458
 800a670:	40020470 	.word	0x40020470
 800a674:	40020488 	.word	0x40020488
 800a678:	400204a0 	.word	0x400204a0
 800a67c:	400204b8 	.word	0x400204b8
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0302 	and.w	r3, r3, #2
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	bf14      	ite	ne
 800a68e:	2301      	movne	r3, #1
 800a690:	2300      	moveq	r3, #0
 800a692:	b2db      	uxtb	r3, r3
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 8087 	beq.w	800a7a8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a69e:	f003 031f 	and.w	r3, r3, #31
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	409a      	lsls	r2, r3
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	2b04      	cmp	r3, #4
 800a6b4:	d139      	bne.n	800a72a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f022 0216 	bic.w	r2, r2, #22
 800a6c4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	695a      	ldr	r2, [r3, #20]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6d4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d103      	bne.n	800a6e6 <HAL_DMA_IRQHandler+0x736>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d007      	beq.n	800a6f6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f022 0208 	bic.w	r2, r2, #8
 800a6f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6fa:	f003 031f 	and.w	r3, r3, #31
 800a6fe:	223f      	movs	r2, #63	; 0x3f
 800a700:	409a      	lsls	r2, r3
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	f000 834a 	beq.w	800adb4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	4798      	blx	r3
          }
          return;
 800a728:	e344      	b.n	800adb4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a734:	2b00      	cmp	r3, #0
 800a736:	d018      	beq.n	800a76a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a742:	2b00      	cmp	r3, #0
 800a744:	d108      	bne.n	800a758 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d02c      	beq.n	800a7a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	4798      	blx	r3
 800a756:	e027      	b.n	800a7a8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d023      	beq.n	800a7a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	4798      	blx	r3
 800a768:	e01e      	b.n	800a7a8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10f      	bne.n	800a798 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f022 0210 	bic.w	r2, r2, #16
 800a786:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d003      	beq.n	800a7a8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 8306 	beq.w	800adbe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f000 8088 	beq.w	800a8d0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2204      	movs	r2, #4
 800a7c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a7a      	ldr	r2, [pc, #488]	; (800a9b8 <HAL_DMA_IRQHandler+0xa08>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d04a      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a79      	ldr	r2, [pc, #484]	; (800a9bc <HAL_DMA_IRQHandler+0xa0c>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d045      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a77      	ldr	r2, [pc, #476]	; (800a9c0 <HAL_DMA_IRQHandler+0xa10>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d040      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a76      	ldr	r2, [pc, #472]	; (800a9c4 <HAL_DMA_IRQHandler+0xa14>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d03b      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a74      	ldr	r2, [pc, #464]	; (800a9c8 <HAL_DMA_IRQHandler+0xa18>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d036      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a73      	ldr	r2, [pc, #460]	; (800a9cc <HAL_DMA_IRQHandler+0xa1c>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d031      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a71      	ldr	r2, [pc, #452]	; (800a9d0 <HAL_DMA_IRQHandler+0xa20>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d02c      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a70      	ldr	r2, [pc, #448]	; (800a9d4 <HAL_DMA_IRQHandler+0xa24>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d027      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a6e      	ldr	r2, [pc, #440]	; (800a9d8 <HAL_DMA_IRQHandler+0xa28>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d022      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a6d      	ldr	r2, [pc, #436]	; (800a9dc <HAL_DMA_IRQHandler+0xa2c>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d01d      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a6b      	ldr	r2, [pc, #428]	; (800a9e0 <HAL_DMA_IRQHandler+0xa30>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d018      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a6a      	ldr	r2, [pc, #424]	; (800a9e4 <HAL_DMA_IRQHandler+0xa34>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d013      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a68      	ldr	r2, [pc, #416]	; (800a9e8 <HAL_DMA_IRQHandler+0xa38>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d00e      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a67      	ldr	r2, [pc, #412]	; (800a9ec <HAL_DMA_IRQHandler+0xa3c>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d009      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a65      	ldr	r2, [pc, #404]	; (800a9f0 <HAL_DMA_IRQHandler+0xa40>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d004      	beq.n	800a868 <HAL_DMA_IRQHandler+0x8b8>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a64      	ldr	r2, [pc, #400]	; (800a9f4 <HAL_DMA_IRQHandler+0xa44>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d108      	bne.n	800a87a <HAL_DMA_IRQHandler+0x8ca>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f022 0201 	bic.w	r2, r2, #1
 800a876:	601a      	str	r2, [r3, #0]
 800a878:	e007      	b.n	800a88a <HAL_DMA_IRQHandler+0x8da>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f022 0201 	bic.w	r2, r2, #1
 800a888:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3301      	adds	r3, #1
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a892:	429a      	cmp	r2, r3
 800a894:	d307      	bcc.n	800a8a6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 0301 	and.w	r3, r3, #1
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d1f2      	bne.n	800a88a <HAL_DMA_IRQHandler+0x8da>
 800a8a4:	e000      	b.n	800a8a8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a8a6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d004      	beq.n	800a8c0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2203      	movs	r2, #3
 800a8ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800a8be:	e003      	b.n	800a8c8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f000 8272 	beq.w	800adbe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	4798      	blx	r3
 800a8e2:	e26c      	b.n	800adbe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a43      	ldr	r2, [pc, #268]	; (800a9f8 <HAL_DMA_IRQHandler+0xa48>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d022      	beq.n	800a934 <HAL_DMA_IRQHandler+0x984>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a42      	ldr	r2, [pc, #264]	; (800a9fc <HAL_DMA_IRQHandler+0xa4c>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d01d      	beq.n	800a934 <HAL_DMA_IRQHandler+0x984>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a40      	ldr	r2, [pc, #256]	; (800aa00 <HAL_DMA_IRQHandler+0xa50>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d018      	beq.n	800a934 <HAL_DMA_IRQHandler+0x984>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a3f      	ldr	r2, [pc, #252]	; (800aa04 <HAL_DMA_IRQHandler+0xa54>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d013      	beq.n	800a934 <HAL_DMA_IRQHandler+0x984>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a3d      	ldr	r2, [pc, #244]	; (800aa08 <HAL_DMA_IRQHandler+0xa58>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d00e      	beq.n	800a934 <HAL_DMA_IRQHandler+0x984>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a3c      	ldr	r2, [pc, #240]	; (800aa0c <HAL_DMA_IRQHandler+0xa5c>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d009      	beq.n	800a934 <HAL_DMA_IRQHandler+0x984>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a3a      	ldr	r2, [pc, #232]	; (800aa10 <HAL_DMA_IRQHandler+0xa60>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d004      	beq.n	800a934 <HAL_DMA_IRQHandler+0x984>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a39      	ldr	r2, [pc, #228]	; (800aa14 <HAL_DMA_IRQHandler+0xa64>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d101      	bne.n	800a938 <HAL_DMA_IRQHandler+0x988>
 800a934:	2301      	movs	r3, #1
 800a936:	e000      	b.n	800a93a <HAL_DMA_IRQHandler+0x98a>
 800a938:	2300      	movs	r3, #0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 823f 	beq.w	800adbe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a94c:	f003 031f 	and.w	r3, r3, #31
 800a950:	2204      	movs	r2, #4
 800a952:	409a      	lsls	r2, r3
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	4013      	ands	r3, r2
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 80cd 	beq.w	800aaf8 <HAL_DMA_IRQHandler+0xb48>
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f003 0304 	and.w	r3, r3, #4
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 80c7 	beq.w	800aaf8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a96e:	f003 031f 	and.w	r3, r3, #31
 800a972:	2204      	movs	r2, #4
 800a974:	409a      	lsls	r2, r3
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a980:	2b00      	cmp	r3, #0
 800a982:	d049      	beq.n	800aa18 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d109      	bne.n	800a9a2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a992:	2b00      	cmp	r3, #0
 800a994:	f000 8210 	beq.w	800adb8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9a0:	e20a      	b.n	800adb8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 8206 	beq.w	800adb8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9b4:	e200      	b.n	800adb8 <HAL_DMA_IRQHandler+0xe08>
 800a9b6:	bf00      	nop
 800a9b8:	40020010 	.word	0x40020010
 800a9bc:	40020028 	.word	0x40020028
 800a9c0:	40020040 	.word	0x40020040
 800a9c4:	40020058 	.word	0x40020058
 800a9c8:	40020070 	.word	0x40020070
 800a9cc:	40020088 	.word	0x40020088
 800a9d0:	400200a0 	.word	0x400200a0
 800a9d4:	400200b8 	.word	0x400200b8
 800a9d8:	40020410 	.word	0x40020410
 800a9dc:	40020428 	.word	0x40020428
 800a9e0:	40020440 	.word	0x40020440
 800a9e4:	40020458 	.word	0x40020458
 800a9e8:	40020470 	.word	0x40020470
 800a9ec:	40020488 	.word	0x40020488
 800a9f0:	400204a0 	.word	0x400204a0
 800a9f4:	400204b8 	.word	0x400204b8
 800a9f8:	58025408 	.word	0x58025408
 800a9fc:	5802541c 	.word	0x5802541c
 800aa00:	58025430 	.word	0x58025430
 800aa04:	58025444 	.word	0x58025444
 800aa08:	58025458 	.word	0x58025458
 800aa0c:	5802546c 	.word	0x5802546c
 800aa10:	58025480 	.word	0x58025480
 800aa14:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	f003 0320 	and.w	r3, r3, #32
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d160      	bne.n	800aae4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a7f      	ldr	r2, [pc, #508]	; (800ac24 <HAL_DMA_IRQHandler+0xc74>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d04a      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a7d      	ldr	r2, [pc, #500]	; (800ac28 <HAL_DMA_IRQHandler+0xc78>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d045      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a7c      	ldr	r2, [pc, #496]	; (800ac2c <HAL_DMA_IRQHandler+0xc7c>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d040      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a7a      	ldr	r2, [pc, #488]	; (800ac30 <HAL_DMA_IRQHandler+0xc80>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d03b      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a79      	ldr	r2, [pc, #484]	; (800ac34 <HAL_DMA_IRQHandler+0xc84>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d036      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a77      	ldr	r2, [pc, #476]	; (800ac38 <HAL_DMA_IRQHandler+0xc88>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d031      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a76      	ldr	r2, [pc, #472]	; (800ac3c <HAL_DMA_IRQHandler+0xc8c>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d02c      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a74      	ldr	r2, [pc, #464]	; (800ac40 <HAL_DMA_IRQHandler+0xc90>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d027      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a73      	ldr	r2, [pc, #460]	; (800ac44 <HAL_DMA_IRQHandler+0xc94>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d022      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a71      	ldr	r2, [pc, #452]	; (800ac48 <HAL_DMA_IRQHandler+0xc98>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d01d      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a70      	ldr	r2, [pc, #448]	; (800ac4c <HAL_DMA_IRQHandler+0xc9c>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d018      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a6e      	ldr	r2, [pc, #440]	; (800ac50 <HAL_DMA_IRQHandler+0xca0>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d013      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a6d      	ldr	r2, [pc, #436]	; (800ac54 <HAL_DMA_IRQHandler+0xca4>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d00e      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a6b      	ldr	r2, [pc, #428]	; (800ac58 <HAL_DMA_IRQHandler+0xca8>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d009      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a6a      	ldr	r2, [pc, #424]	; (800ac5c <HAL_DMA_IRQHandler+0xcac>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d004      	beq.n	800aac2 <HAL_DMA_IRQHandler+0xb12>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a68      	ldr	r2, [pc, #416]	; (800ac60 <HAL_DMA_IRQHandler+0xcb0>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d108      	bne.n	800aad4 <HAL_DMA_IRQHandler+0xb24>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f022 0208 	bic.w	r2, r2, #8
 800aad0:	601a      	str	r2, [r3, #0]
 800aad2:	e007      	b.n	800aae4 <HAL_DMA_IRQHandler+0xb34>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 0204 	bic.w	r2, r2, #4
 800aae2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 8165 	beq.w	800adb8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aaf6:	e15f      	b.n	800adb8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aafc:	f003 031f 	and.w	r3, r3, #31
 800ab00:	2202      	movs	r2, #2
 800ab02:	409a      	lsls	r2, r3
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	4013      	ands	r3, r2
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f000 80c5 	beq.w	800ac98 <HAL_DMA_IRQHandler+0xce8>
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	f003 0302 	and.w	r3, r3, #2
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f000 80bf 	beq.w	800ac98 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab1e:	f003 031f 	and.w	r3, r3, #31
 800ab22:	2202      	movs	r2, #2
 800ab24:	409a      	lsls	r2, r3
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d018      	beq.n	800ab66 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d109      	bne.n	800ab52 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f000 813a 	beq.w	800adbc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab50:	e134      	b.n	800adbc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f000 8130 	beq.w	800adbc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab64:	e12a      	b.n	800adbc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	f003 0320 	and.w	r3, r3, #32
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f040 8089 	bne.w	800ac84 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a2b      	ldr	r2, [pc, #172]	; (800ac24 <HAL_DMA_IRQHandler+0xc74>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d04a      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a29      	ldr	r2, [pc, #164]	; (800ac28 <HAL_DMA_IRQHandler+0xc78>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d045      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a28      	ldr	r2, [pc, #160]	; (800ac2c <HAL_DMA_IRQHandler+0xc7c>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d040      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a26      	ldr	r2, [pc, #152]	; (800ac30 <HAL_DMA_IRQHandler+0xc80>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d03b      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a25      	ldr	r2, [pc, #148]	; (800ac34 <HAL_DMA_IRQHandler+0xc84>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d036      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a23      	ldr	r2, [pc, #140]	; (800ac38 <HAL_DMA_IRQHandler+0xc88>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d031      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a22      	ldr	r2, [pc, #136]	; (800ac3c <HAL_DMA_IRQHandler+0xc8c>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d02c      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a20      	ldr	r2, [pc, #128]	; (800ac40 <HAL_DMA_IRQHandler+0xc90>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d027      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a1f      	ldr	r2, [pc, #124]	; (800ac44 <HAL_DMA_IRQHandler+0xc94>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d022      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a1d      	ldr	r2, [pc, #116]	; (800ac48 <HAL_DMA_IRQHandler+0xc98>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d01d      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a1c      	ldr	r2, [pc, #112]	; (800ac4c <HAL_DMA_IRQHandler+0xc9c>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d018      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a1a      	ldr	r2, [pc, #104]	; (800ac50 <HAL_DMA_IRQHandler+0xca0>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d013      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a19      	ldr	r2, [pc, #100]	; (800ac54 <HAL_DMA_IRQHandler+0xca4>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d00e      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a17      	ldr	r2, [pc, #92]	; (800ac58 <HAL_DMA_IRQHandler+0xca8>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d009      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a16      	ldr	r2, [pc, #88]	; (800ac5c <HAL_DMA_IRQHandler+0xcac>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d004      	beq.n	800ac12 <HAL_DMA_IRQHandler+0xc62>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a14      	ldr	r2, [pc, #80]	; (800ac60 <HAL_DMA_IRQHandler+0xcb0>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d128      	bne.n	800ac64 <HAL_DMA_IRQHandler+0xcb4>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f022 0214 	bic.w	r2, r2, #20
 800ac20:	601a      	str	r2, [r3, #0]
 800ac22:	e027      	b.n	800ac74 <HAL_DMA_IRQHandler+0xcc4>
 800ac24:	40020010 	.word	0x40020010
 800ac28:	40020028 	.word	0x40020028
 800ac2c:	40020040 	.word	0x40020040
 800ac30:	40020058 	.word	0x40020058
 800ac34:	40020070 	.word	0x40020070
 800ac38:	40020088 	.word	0x40020088
 800ac3c:	400200a0 	.word	0x400200a0
 800ac40:	400200b8 	.word	0x400200b8
 800ac44:	40020410 	.word	0x40020410
 800ac48:	40020428 	.word	0x40020428
 800ac4c:	40020440 	.word	0x40020440
 800ac50:	40020458 	.word	0x40020458
 800ac54:	40020470 	.word	0x40020470
 800ac58:	40020488 	.word	0x40020488
 800ac5c:	400204a0 	.word	0x400204a0
 800ac60:	400204b8 	.word	0x400204b8
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f022 020a 	bic.w	r2, r2, #10
 800ac72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f000 8097 	beq.w	800adbc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ac96:	e091      	b.n	800adbc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac9c:	f003 031f 	and.w	r3, r3, #31
 800aca0:	2208      	movs	r2, #8
 800aca2:	409a      	lsls	r2, r3
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	4013      	ands	r3, r2
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 8088 	beq.w	800adbe <HAL_DMA_IRQHandler+0xe0e>
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	f003 0308 	and.w	r3, r3, #8
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f000 8082 	beq.w	800adbe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a41      	ldr	r2, [pc, #260]	; (800adc4 <HAL_DMA_IRQHandler+0xe14>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d04a      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a3f      	ldr	r2, [pc, #252]	; (800adc8 <HAL_DMA_IRQHandler+0xe18>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d045      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a3e      	ldr	r2, [pc, #248]	; (800adcc <HAL_DMA_IRQHandler+0xe1c>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d040      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a3c      	ldr	r2, [pc, #240]	; (800add0 <HAL_DMA_IRQHandler+0xe20>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d03b      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a3b      	ldr	r2, [pc, #236]	; (800add4 <HAL_DMA_IRQHandler+0xe24>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d036      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a39      	ldr	r2, [pc, #228]	; (800add8 <HAL_DMA_IRQHandler+0xe28>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d031      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a38      	ldr	r2, [pc, #224]	; (800addc <HAL_DMA_IRQHandler+0xe2c>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d02c      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a36      	ldr	r2, [pc, #216]	; (800ade0 <HAL_DMA_IRQHandler+0xe30>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d027      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a35      	ldr	r2, [pc, #212]	; (800ade4 <HAL_DMA_IRQHandler+0xe34>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d022      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a33      	ldr	r2, [pc, #204]	; (800ade8 <HAL_DMA_IRQHandler+0xe38>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d01d      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a32      	ldr	r2, [pc, #200]	; (800adec <HAL_DMA_IRQHandler+0xe3c>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d018      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a30      	ldr	r2, [pc, #192]	; (800adf0 <HAL_DMA_IRQHandler+0xe40>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d013      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a2f      	ldr	r2, [pc, #188]	; (800adf4 <HAL_DMA_IRQHandler+0xe44>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d00e      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a2d      	ldr	r2, [pc, #180]	; (800adf8 <HAL_DMA_IRQHandler+0xe48>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d009      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a2c      	ldr	r2, [pc, #176]	; (800adfc <HAL_DMA_IRQHandler+0xe4c>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d004      	beq.n	800ad5a <HAL_DMA_IRQHandler+0xdaa>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a2a      	ldr	r2, [pc, #168]	; (800ae00 <HAL_DMA_IRQHandler+0xe50>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d108      	bne.n	800ad6c <HAL_DMA_IRQHandler+0xdbc>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f022 021c 	bic.w	r2, r2, #28
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	e007      	b.n	800ad7c <HAL_DMA_IRQHandler+0xdcc>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f022 020e 	bic.w	r2, r2, #14
 800ad7a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad80:	f003 031f 	and.w	r3, r3, #31
 800ad84:	2201      	movs	r2, #1
 800ad86:	409a      	lsls	r2, r3
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2201      	movs	r2, #1
 800ad96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d009      	beq.n	800adbe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	4798      	blx	r3
 800adb2:	e004      	b.n	800adbe <HAL_DMA_IRQHandler+0xe0e>
          return;
 800adb4:	bf00      	nop
 800adb6:	e002      	b.n	800adbe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800adb8:	bf00      	nop
 800adba:	e000      	b.n	800adbe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800adbc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800adbe:	3728      	adds	r7, #40	; 0x28
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	40020010 	.word	0x40020010
 800adc8:	40020028 	.word	0x40020028
 800adcc:	40020040 	.word	0x40020040
 800add0:	40020058 	.word	0x40020058
 800add4:	40020070 	.word	0x40020070
 800add8:	40020088 	.word	0x40020088
 800addc:	400200a0 	.word	0x400200a0
 800ade0:	400200b8 	.word	0x400200b8
 800ade4:	40020410 	.word	0x40020410
 800ade8:	40020428 	.word	0x40020428
 800adec:	40020440 	.word	0x40020440
 800adf0:	40020458 	.word	0x40020458
 800adf4:	40020470 	.word	0x40020470
 800adf8:	40020488 	.word	0x40020488
 800adfc:	400204a0 	.word	0x400204a0
 800ae00:	400204b8 	.word	0x400204b8

0800ae04 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae12:	b2db      	uxtb	r3, r3
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a42      	ldr	r2, [pc, #264]	; (800af38 <DMA_CalcBaseAndBitshift+0x118>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d04a      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a41      	ldr	r2, [pc, #260]	; (800af3c <DMA_CalcBaseAndBitshift+0x11c>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d045      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a3f      	ldr	r2, [pc, #252]	; (800af40 <DMA_CalcBaseAndBitshift+0x120>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d040      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a3e      	ldr	r2, [pc, #248]	; (800af44 <DMA_CalcBaseAndBitshift+0x124>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d03b      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a3c      	ldr	r2, [pc, #240]	; (800af48 <DMA_CalcBaseAndBitshift+0x128>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d036      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a3b      	ldr	r2, [pc, #236]	; (800af4c <DMA_CalcBaseAndBitshift+0x12c>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d031      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a39      	ldr	r2, [pc, #228]	; (800af50 <DMA_CalcBaseAndBitshift+0x130>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d02c      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a38      	ldr	r2, [pc, #224]	; (800af54 <DMA_CalcBaseAndBitshift+0x134>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d027      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a36      	ldr	r2, [pc, #216]	; (800af58 <DMA_CalcBaseAndBitshift+0x138>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d022      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a35      	ldr	r2, [pc, #212]	; (800af5c <DMA_CalcBaseAndBitshift+0x13c>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d01d      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a33      	ldr	r2, [pc, #204]	; (800af60 <DMA_CalcBaseAndBitshift+0x140>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d018      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a32      	ldr	r2, [pc, #200]	; (800af64 <DMA_CalcBaseAndBitshift+0x144>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d013      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a30      	ldr	r2, [pc, #192]	; (800af68 <DMA_CalcBaseAndBitshift+0x148>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d00e      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a2f      	ldr	r2, [pc, #188]	; (800af6c <DMA_CalcBaseAndBitshift+0x14c>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d009      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a2d      	ldr	r2, [pc, #180]	; (800af70 <DMA_CalcBaseAndBitshift+0x150>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d004      	beq.n	800aec8 <DMA_CalcBaseAndBitshift+0xa8>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a2c      	ldr	r2, [pc, #176]	; (800af74 <DMA_CalcBaseAndBitshift+0x154>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d101      	bne.n	800aecc <DMA_CalcBaseAndBitshift+0xac>
 800aec8:	2301      	movs	r3, #1
 800aeca:	e000      	b.n	800aece <DMA_CalcBaseAndBitshift+0xae>
 800aecc:	2300      	movs	r3, #0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d024      	beq.n	800af1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	3b10      	subs	r3, #16
 800aeda:	4a27      	ldr	r2, [pc, #156]	; (800af78 <DMA_CalcBaseAndBitshift+0x158>)
 800aedc:	fba2 2303 	umull	r2, r3, r2, r3
 800aee0:	091b      	lsrs	r3, r3, #4
 800aee2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f003 0307 	and.w	r3, r3, #7
 800aeea:	4a24      	ldr	r2, [pc, #144]	; (800af7c <DMA_CalcBaseAndBitshift+0x15c>)
 800aeec:	5cd3      	ldrb	r3, [r2, r3]
 800aeee:	461a      	mov	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	d908      	bls.n	800af0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	461a      	mov	r2, r3
 800af00:	4b1f      	ldr	r3, [pc, #124]	; (800af80 <DMA_CalcBaseAndBitshift+0x160>)
 800af02:	4013      	ands	r3, r2
 800af04:	1d1a      	adds	r2, r3, #4
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	659a      	str	r2, [r3, #88]	; 0x58
 800af0a:	e00d      	b.n	800af28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	461a      	mov	r2, r3
 800af12:	4b1b      	ldr	r3, [pc, #108]	; (800af80 <DMA_CalcBaseAndBitshift+0x160>)
 800af14:	4013      	ands	r3, r2
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	6593      	str	r3, [r2, #88]	; 0x58
 800af1a:	e005      	b.n	800af28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	40020010 	.word	0x40020010
 800af3c:	40020028 	.word	0x40020028
 800af40:	40020040 	.word	0x40020040
 800af44:	40020058 	.word	0x40020058
 800af48:	40020070 	.word	0x40020070
 800af4c:	40020088 	.word	0x40020088
 800af50:	400200a0 	.word	0x400200a0
 800af54:	400200b8 	.word	0x400200b8
 800af58:	40020410 	.word	0x40020410
 800af5c:	40020428 	.word	0x40020428
 800af60:	40020440 	.word	0x40020440
 800af64:	40020458 	.word	0x40020458
 800af68:	40020470 	.word	0x40020470
 800af6c:	40020488 	.word	0x40020488
 800af70:	400204a0 	.word	0x400204a0
 800af74:	400204b8 	.word	0x400204b8
 800af78:	aaaaaaab 	.word	0xaaaaaaab
 800af7c:	08016be4 	.word	0x08016be4
 800af80:	fffffc00 	.word	0xfffffc00

0800af84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af8c:	2300      	movs	r3, #0
 800af8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d120      	bne.n	800afda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af9c:	2b03      	cmp	r3, #3
 800af9e:	d858      	bhi.n	800b052 <DMA_CheckFifoParam+0xce>
 800afa0:	a201      	add	r2, pc, #4	; (adr r2, 800afa8 <DMA_CheckFifoParam+0x24>)
 800afa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa6:	bf00      	nop
 800afa8:	0800afb9 	.word	0x0800afb9
 800afac:	0800afcb 	.word	0x0800afcb
 800afb0:	0800afb9 	.word	0x0800afb9
 800afb4:	0800b053 	.word	0x0800b053
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d048      	beq.n	800b056 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800afc4:	2301      	movs	r3, #1
 800afc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800afc8:	e045      	b.n	800b056 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800afd2:	d142      	bne.n	800b05a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800afd8:	e03f      	b.n	800b05a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afe2:	d123      	bne.n	800b02c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe8:	2b03      	cmp	r3, #3
 800afea:	d838      	bhi.n	800b05e <DMA_CheckFifoParam+0xda>
 800afec:	a201      	add	r2, pc, #4	; (adr r2, 800aff4 <DMA_CheckFifoParam+0x70>)
 800afee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff2:	bf00      	nop
 800aff4:	0800b005 	.word	0x0800b005
 800aff8:	0800b00b 	.word	0x0800b00b
 800affc:	0800b005 	.word	0x0800b005
 800b000:	0800b01d 	.word	0x0800b01d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	73fb      	strb	r3, [r7, #15]
        break;
 800b008:	e030      	b.n	800b06c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d025      	beq.n	800b062 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b01a:	e022      	b.n	800b062 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b020:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b024:	d11f      	bne.n	800b066 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b02a:	e01c      	b.n	800b066 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b030:	2b02      	cmp	r3, #2
 800b032:	d902      	bls.n	800b03a <DMA_CheckFifoParam+0xb6>
 800b034:	2b03      	cmp	r3, #3
 800b036:	d003      	beq.n	800b040 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b038:	e018      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	73fb      	strb	r3, [r7, #15]
        break;
 800b03e:	e015      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00e      	beq.n	800b06a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	73fb      	strb	r3, [r7, #15]
    break;
 800b050:	e00b      	b.n	800b06a <DMA_CheckFifoParam+0xe6>
        break;
 800b052:	bf00      	nop
 800b054:	e00a      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
        break;
 800b056:	bf00      	nop
 800b058:	e008      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
        break;
 800b05a:	bf00      	nop
 800b05c:	e006      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
        break;
 800b05e:	bf00      	nop
 800b060:	e004      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
        break;
 800b062:	bf00      	nop
 800b064:	e002      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
        break;
 800b066:	bf00      	nop
 800b068:	e000      	b.n	800b06c <DMA_CheckFifoParam+0xe8>
    break;
 800b06a:	bf00      	nop
    }
  }

  return status;
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop

0800b07c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a38      	ldr	r2, [pc, #224]	; (800b170 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d022      	beq.n	800b0da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a36      	ldr	r2, [pc, #216]	; (800b174 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d01d      	beq.n	800b0da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a35      	ldr	r2, [pc, #212]	; (800b178 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d018      	beq.n	800b0da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a33      	ldr	r2, [pc, #204]	; (800b17c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d013      	beq.n	800b0da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a32      	ldr	r2, [pc, #200]	; (800b180 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d00e      	beq.n	800b0da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a30      	ldr	r2, [pc, #192]	; (800b184 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d009      	beq.n	800b0da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a2f      	ldr	r2, [pc, #188]	; (800b188 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d004      	beq.n	800b0da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a2d      	ldr	r2, [pc, #180]	; (800b18c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d101      	bne.n	800b0de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e000      	b.n	800b0e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d01a      	beq.n	800b11a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	3b08      	subs	r3, #8
 800b0ec:	4a28      	ldr	r2, [pc, #160]	; (800b190 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f2:	091b      	lsrs	r3, r3, #4
 800b0f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	4b26      	ldr	r3, [pc, #152]	; (800b194 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b0fa:	4413      	add	r3, r2
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	461a      	mov	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a24      	ldr	r2, [pc, #144]	; (800b198 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b108:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f003 031f 	and.w	r3, r3, #31
 800b110:	2201      	movs	r2, #1
 800b112:	409a      	lsls	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b118:	e024      	b.n	800b164 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	3b10      	subs	r3, #16
 800b122:	4a1e      	ldr	r2, [pc, #120]	; (800b19c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b124:	fba2 2303 	umull	r2, r3, r2, r3
 800b128:	091b      	lsrs	r3, r3, #4
 800b12a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	4a1c      	ldr	r2, [pc, #112]	; (800b1a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d806      	bhi.n	800b142 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	4a1b      	ldr	r2, [pc, #108]	; (800b1a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d902      	bls.n	800b142 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	3308      	adds	r3, #8
 800b140:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	4b18      	ldr	r3, [pc, #96]	; (800b1a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b146:	4413      	add	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	461a      	mov	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a16      	ldr	r2, [pc, #88]	; (800b1ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b154:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f003 031f 	and.w	r3, r3, #31
 800b15c:	2201      	movs	r2, #1
 800b15e:	409a      	lsls	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b164:	bf00      	nop
 800b166:	3714      	adds	r7, #20
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	58025408 	.word	0x58025408
 800b174:	5802541c 	.word	0x5802541c
 800b178:	58025430 	.word	0x58025430
 800b17c:	58025444 	.word	0x58025444
 800b180:	58025458 	.word	0x58025458
 800b184:	5802546c 	.word	0x5802546c
 800b188:	58025480 	.word	0x58025480
 800b18c:	58025494 	.word	0x58025494
 800b190:	cccccccd 	.word	0xcccccccd
 800b194:	16009600 	.word	0x16009600
 800b198:	58025880 	.word	0x58025880
 800b19c:	aaaaaaab 	.word	0xaaaaaaab
 800b1a0:	400204b8 	.word	0x400204b8
 800b1a4:	4002040f 	.word	0x4002040f
 800b1a8:	10008200 	.word	0x10008200
 800b1ac:	40020880 	.word	0x40020880

0800b1b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d04a      	beq.n	800b25c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2b08      	cmp	r3, #8
 800b1ca:	d847      	bhi.n	800b25c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a25      	ldr	r2, [pc, #148]	; (800b268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d022      	beq.n	800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a24      	ldr	r2, [pc, #144]	; (800b26c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d01d      	beq.n	800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a22      	ldr	r2, [pc, #136]	; (800b270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d018      	beq.n	800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a21      	ldr	r2, [pc, #132]	; (800b274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d013      	beq.n	800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a1f      	ldr	r2, [pc, #124]	; (800b278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d00e      	beq.n	800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a1e      	ldr	r2, [pc, #120]	; (800b27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d009      	beq.n	800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a1c      	ldr	r2, [pc, #112]	; (800b280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d004      	beq.n	800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a1b      	ldr	r2, [pc, #108]	; (800b284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d101      	bne.n	800b220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b21c:	2301      	movs	r3, #1
 800b21e:	e000      	b.n	800b222 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b220:	2300      	movs	r3, #0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00a      	beq.n	800b23c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	4b17      	ldr	r3, [pc, #92]	; (800b288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b22a:	4413      	add	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	461a      	mov	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a15      	ldr	r2, [pc, #84]	; (800b28c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b238:	671a      	str	r2, [r3, #112]	; 0x70
 800b23a:	e009      	b.n	800b250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	4b14      	ldr	r3, [pc, #80]	; (800b290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b240:	4413      	add	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	461a      	mov	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a11      	ldr	r2, [pc, #68]	; (800b294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b24e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	3b01      	subs	r3, #1
 800b254:	2201      	movs	r2, #1
 800b256:	409a      	lsls	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800b25c:	bf00      	nop
 800b25e:	3714      	adds	r7, #20
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr
 800b268:	58025408 	.word	0x58025408
 800b26c:	5802541c 	.word	0x5802541c
 800b270:	58025430 	.word	0x58025430
 800b274:	58025444 	.word	0x58025444
 800b278:	58025458 	.word	0x58025458
 800b27c:	5802546c 	.word	0x5802546c
 800b280:	58025480 	.word	0x58025480
 800b284:	58025494 	.word	0x58025494
 800b288:	1600963f 	.word	0x1600963f
 800b28c:	58025940 	.word	0x58025940
 800b290:	1000823f 	.word	0x1000823f
 800b294:	40020940 	.word	0x40020940

0800b298 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b298:	b480      	push	{r7}
 800b29a:	b089      	sub	sp, #36	; 0x24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b2a6:	4b86      	ldr	r3, [pc, #536]	; (800b4c0 <HAL_GPIO_Init+0x228>)
 800b2a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b2aa:	e18c      	b.n	800b5c6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	2101      	movs	r1, #1
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	fa01 f303 	lsl.w	r3, r1, r3
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f000 817e 	beq.w	800b5c0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	f003 0303 	and.w	r3, r3, #3
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d005      	beq.n	800b2dc <HAL_GPIO_Init+0x44>
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	f003 0303 	and.w	r3, r3, #3
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d130      	bne.n	800b33e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	005b      	lsls	r3, r3, #1
 800b2e6:	2203      	movs	r2, #3
 800b2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ec:	43db      	mvns	r3, r3
 800b2ee:	69ba      	ldr	r2, [r7, #24]
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	68da      	ldr	r2, [r3, #12]
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	005b      	lsls	r3, r3, #1
 800b2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b300:	69ba      	ldr	r2, [r7, #24]
 800b302:	4313      	orrs	r3, r2
 800b304:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	69ba      	ldr	r2, [r7, #24]
 800b30a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b312:	2201      	movs	r2, #1
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	fa02 f303 	lsl.w	r3, r2, r3
 800b31a:	43db      	mvns	r3, r3
 800b31c:	69ba      	ldr	r2, [r7, #24]
 800b31e:	4013      	ands	r3, r2
 800b320:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	091b      	lsrs	r3, r3, #4
 800b328:	f003 0201 	and.w	r2, r3, #1
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	fa02 f303 	lsl.w	r3, r2, r3
 800b332:	69ba      	ldr	r2, [r7, #24]
 800b334:	4313      	orrs	r3, r2
 800b336:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	69ba      	ldr	r2, [r7, #24]
 800b33c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f003 0303 	and.w	r3, r3, #3
 800b346:	2b03      	cmp	r3, #3
 800b348:	d017      	beq.n	800b37a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	005b      	lsls	r3, r3, #1
 800b354:	2203      	movs	r2, #3
 800b356:	fa02 f303 	lsl.w	r3, r2, r3
 800b35a:	43db      	mvns	r3, r3
 800b35c:	69ba      	ldr	r2, [r7, #24]
 800b35e:	4013      	ands	r3, r2
 800b360:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	689a      	ldr	r2, [r3, #8]
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	005b      	lsls	r3, r3, #1
 800b36a:	fa02 f303 	lsl.w	r3, r2, r3
 800b36e:	69ba      	ldr	r2, [r7, #24]
 800b370:	4313      	orrs	r3, r2
 800b372:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	69ba      	ldr	r2, [r7, #24]
 800b378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	f003 0303 	and.w	r3, r3, #3
 800b382:	2b02      	cmp	r3, #2
 800b384:	d123      	bne.n	800b3ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	08da      	lsrs	r2, r3, #3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	3208      	adds	r2, #8
 800b38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	f003 0307 	and.w	r3, r3, #7
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	220f      	movs	r2, #15
 800b39e:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a2:	43db      	mvns	r3, r3
 800b3a4:	69ba      	ldr	r2, [r7, #24]
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	691a      	ldr	r2, [r3, #16]
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	f003 0307 	and.w	r3, r3, #7
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ba:	69ba      	ldr	r2, [r7, #24]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	08da      	lsrs	r2, r3, #3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	3208      	adds	r2, #8
 800b3c8:	69b9      	ldr	r1, [r7, #24]
 800b3ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	005b      	lsls	r3, r3, #1
 800b3d8:	2203      	movs	r2, #3
 800b3da:	fa02 f303 	lsl.w	r3, r2, r3
 800b3de:	43db      	mvns	r3, r3
 800b3e0:	69ba      	ldr	r2, [r7, #24]
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	f003 0203 	and.w	r2, r3, #3
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	005b      	lsls	r3, r3, #1
 800b3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f6:	69ba      	ldr	r2, [r7, #24]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	69ba      	ldr	r2, [r7, #24]
 800b400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f000 80d8 	beq.w	800b5c0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b410:	4b2c      	ldr	r3, [pc, #176]	; (800b4c4 <HAL_GPIO_Init+0x22c>)
 800b412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b416:	4a2b      	ldr	r2, [pc, #172]	; (800b4c4 <HAL_GPIO_Init+0x22c>)
 800b418:	f043 0302 	orr.w	r3, r3, #2
 800b41c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b420:	4b28      	ldr	r3, [pc, #160]	; (800b4c4 <HAL_GPIO_Init+0x22c>)
 800b422:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b426:	f003 0302 	and.w	r3, r3, #2
 800b42a:	60fb      	str	r3, [r7, #12]
 800b42c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b42e:	4a26      	ldr	r2, [pc, #152]	; (800b4c8 <HAL_GPIO_Init+0x230>)
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	089b      	lsrs	r3, r3, #2
 800b434:	3302      	adds	r3, #2
 800b436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b43a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	f003 0303 	and.w	r3, r3, #3
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	220f      	movs	r2, #15
 800b446:	fa02 f303 	lsl.w	r3, r2, r3
 800b44a:	43db      	mvns	r3, r3
 800b44c:	69ba      	ldr	r2, [r7, #24]
 800b44e:	4013      	ands	r3, r2
 800b450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a1d      	ldr	r2, [pc, #116]	; (800b4cc <HAL_GPIO_Init+0x234>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d04a      	beq.n	800b4f0 <HAL_GPIO_Init+0x258>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a1c      	ldr	r2, [pc, #112]	; (800b4d0 <HAL_GPIO_Init+0x238>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d02b      	beq.n	800b4ba <HAL_GPIO_Init+0x222>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a1b      	ldr	r2, [pc, #108]	; (800b4d4 <HAL_GPIO_Init+0x23c>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d025      	beq.n	800b4b6 <HAL_GPIO_Init+0x21e>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a1a      	ldr	r2, [pc, #104]	; (800b4d8 <HAL_GPIO_Init+0x240>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d01f      	beq.n	800b4b2 <HAL_GPIO_Init+0x21a>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a19      	ldr	r2, [pc, #100]	; (800b4dc <HAL_GPIO_Init+0x244>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d019      	beq.n	800b4ae <HAL_GPIO_Init+0x216>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a18      	ldr	r2, [pc, #96]	; (800b4e0 <HAL_GPIO_Init+0x248>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d013      	beq.n	800b4aa <HAL_GPIO_Init+0x212>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a17      	ldr	r2, [pc, #92]	; (800b4e4 <HAL_GPIO_Init+0x24c>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d00d      	beq.n	800b4a6 <HAL_GPIO_Init+0x20e>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a16      	ldr	r2, [pc, #88]	; (800b4e8 <HAL_GPIO_Init+0x250>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d007      	beq.n	800b4a2 <HAL_GPIO_Init+0x20a>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a15      	ldr	r2, [pc, #84]	; (800b4ec <HAL_GPIO_Init+0x254>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d101      	bne.n	800b49e <HAL_GPIO_Init+0x206>
 800b49a:	2309      	movs	r3, #9
 800b49c:	e029      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b49e:	230a      	movs	r3, #10
 800b4a0:	e027      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4a2:	2307      	movs	r3, #7
 800b4a4:	e025      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4a6:	2306      	movs	r3, #6
 800b4a8:	e023      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4aa:	2305      	movs	r3, #5
 800b4ac:	e021      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4ae:	2304      	movs	r3, #4
 800b4b0:	e01f      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4b2:	2303      	movs	r3, #3
 800b4b4:	e01d      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4b6:	2302      	movs	r3, #2
 800b4b8:	e01b      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e019      	b.n	800b4f2 <HAL_GPIO_Init+0x25a>
 800b4be:	bf00      	nop
 800b4c0:	58000080 	.word	0x58000080
 800b4c4:	58024400 	.word	0x58024400
 800b4c8:	58000400 	.word	0x58000400
 800b4cc:	58020000 	.word	0x58020000
 800b4d0:	58020400 	.word	0x58020400
 800b4d4:	58020800 	.word	0x58020800
 800b4d8:	58020c00 	.word	0x58020c00
 800b4dc:	58021000 	.word	0x58021000
 800b4e0:	58021400 	.word	0x58021400
 800b4e4:	58021800 	.word	0x58021800
 800b4e8:	58021c00 	.word	0x58021c00
 800b4ec:	58022400 	.word	0x58022400
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	69fa      	ldr	r2, [r7, #28]
 800b4f4:	f002 0203 	and.w	r2, r2, #3
 800b4f8:	0092      	lsls	r2, r2, #2
 800b4fa:	4093      	lsls	r3, r2
 800b4fc:	69ba      	ldr	r2, [r7, #24]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b502:	4938      	ldr	r1, [pc, #224]	; (800b5e4 <HAL_GPIO_Init+0x34c>)
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	089b      	lsrs	r3, r3, #2
 800b508:	3302      	adds	r3, #2
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	43db      	mvns	r3, r3
 800b51c:	69ba      	ldr	r2, [r7, #24]
 800b51e:	4013      	ands	r3, r2
 800b520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b52e:	69ba      	ldr	r2, [r7, #24]
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	4313      	orrs	r3, r2
 800b534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b536:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b53e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	43db      	mvns	r3, r3
 800b54a:	69ba      	ldr	r2, [r7, #24]
 800b54c:	4013      	ands	r3, r2
 800b54e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d003      	beq.n	800b564 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b55c:	69ba      	ldr	r2, [r7, #24]
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	4313      	orrs	r3, r2
 800b562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	43db      	mvns	r3, r3
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	4013      	ands	r3, r2
 800b57a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b584:	2b00      	cmp	r3, #0
 800b586:	d003      	beq.n	800b590 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b588:	69ba      	ldr	r2, [r7, #24]
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	69ba      	ldr	r2, [r7, #24]
 800b594:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	43db      	mvns	r3, r3
 800b5a0:	69ba      	ldr	r2, [r7, #24]
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d003      	beq.n	800b5ba <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b5b2:	69ba      	ldr	r2, [r7, #24]
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	69ba      	ldr	r2, [r7, #24]
 800b5be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f47f ae6b 	bne.w	800b2ac <HAL_GPIO_Init+0x14>
  }
}
 800b5d6:	bf00      	nop
 800b5d8:	bf00      	nop
 800b5da:	3724      	adds	r7, #36	; 0x24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	58000400 	.word	0x58000400

0800b5e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	807b      	strh	r3, [r7, #2]
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b5f8:	787b      	ldrb	r3, [r7, #1]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d003      	beq.n	800b606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b5fe:	887a      	ldrh	r2, [r7, #2]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b604:	e003      	b.n	800b60e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b606:	887b      	ldrh	r3, [r7, #2]
 800b608:	041a      	lsls	r2, r3, #16
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	619a      	str	r2, [r3, #24]
}
 800b60e:	bf00      	nop
 800b610:	370c      	adds	r7, #12
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b61a:	b480      	push	{r7}
 800b61c:	b085      	sub	sp, #20
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	460b      	mov	r3, r1
 800b624:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b62c:	887a      	ldrh	r2, [r7, #2]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	4013      	ands	r3, r2
 800b632:	041a      	lsls	r2, r3, #16
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	43d9      	mvns	r1, r3
 800b638:	887b      	ldrh	r3, [r7, #2]
 800b63a:	400b      	ands	r3, r1
 800b63c:	431a      	orrs	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	619a      	str	r2, [r3, #24]
}
 800b642:	bf00      	nop
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
	...

0800b650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d101      	bne.n	800b662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e07f      	b.n	800b762 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d106      	bne.n	800b67c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f7f6 fa76 	bl	8001b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2224      	movs	r2, #36	; 0x24
 800b680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f022 0201 	bic.w	r2, r2, #1
 800b692:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	685a      	ldr	r2, [r3, #4]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b6a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	689a      	ldr	r2, [r3, #8]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b6b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d107      	bne.n	800b6ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	689a      	ldr	r2, [r3, #8]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b6c6:	609a      	str	r2, [r3, #8]
 800b6c8:	e006      	b.n	800b6d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	689a      	ldr	r2, [r3, #8]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b6d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	d104      	bne.n	800b6ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	6859      	ldr	r1, [r3, #4]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	4b1d      	ldr	r3, [pc, #116]	; (800b76c <HAL_I2C_Init+0x11c>)
 800b6f6:	430b      	orrs	r3, r1
 800b6f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68da      	ldr	r2, [r3, #12]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b708:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	691a      	ldr	r2, [r3, #16]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	695b      	ldr	r3, [r3, #20]
 800b712:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	699b      	ldr	r3, [r3, #24]
 800b71a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	430a      	orrs	r2, r1
 800b722:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	69d9      	ldr	r1, [r3, #28]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a1a      	ldr	r2, [r3, #32]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	430a      	orrs	r2, r1
 800b732:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f042 0201 	orr.w	r2, r2, #1
 800b742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2220      	movs	r2, #32
 800b74e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b760:	2300      	movs	r3, #0
}
 800b762:	4618      	mov	r0, r3
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	02008000 	.word	0x02008000

0800b770 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b088      	sub	sp, #32
 800b774:	af02      	add	r7, sp, #8
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	4608      	mov	r0, r1
 800b77a:	4611      	mov	r1, r2
 800b77c:	461a      	mov	r2, r3
 800b77e:	4603      	mov	r3, r0
 800b780:	817b      	strh	r3, [r7, #10]
 800b782:	460b      	mov	r3, r1
 800b784:	813b      	strh	r3, [r7, #8]
 800b786:	4613      	mov	r3, r2
 800b788:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b790:	b2db      	uxtb	r3, r3
 800b792:	2b20      	cmp	r3, #32
 800b794:	d176      	bne.n	800b884 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800b796:	6a3b      	ldr	r3, [r7, #32]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <HAL_I2C_Mem_Read_IT+0x32>
 800b79c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d105      	bne.n	800b7ae <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7a8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e06b      	b.n	800b886 <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7bc:	d101      	bne.n	800b7c2 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800b7be:	2302      	movs	r3, #2
 800b7c0:	e061      	b.n	800b886 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d101      	bne.n	800b7d0 <HAL_I2C_Mem_Read_IT+0x60>
 800b7cc:	2302      	movs	r3, #2
 800b7ce:	e05a      	b.n	800b886 <HAL_I2C_Mem_Read_IT+0x116>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b7d8:	f7fa fea0 	bl	800651c <HAL_GetTick>
 800b7dc:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2222      	movs	r2, #34	; 0x22
 800b7e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2240      	movs	r2, #64	; 0x40
 800b7ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6a3a      	ldr	r2, [r7, #32]
 800b7f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b7fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	4a23      	ldr	r2, [pc, #140]	; (800b890 <HAL_I2C_Mem_Read_IT+0x120>)
 800b804:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	4a22      	ldr	r2, [pc, #136]	; (800b894 <HAL_I2C_Mem_Read_IT+0x124>)
 800b80a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b810:	b29b      	uxth	r3, r3
 800b812:	2bff      	cmp	r3, #255	; 0xff
 800b814:	d906      	bls.n	800b824 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	22ff      	movs	r2, #255	; 0xff
 800b81a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b81c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b820:	617b      	str	r3, [r7, #20]
 800b822:	e007      	b.n	800b834 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b828:	b29a      	uxth	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b82e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b832:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800b834:	88f8      	ldrh	r0, [r7, #6]
 800b836:	893a      	ldrh	r2, [r7, #8]
 800b838:	8979      	ldrh	r1, [r7, #10]
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	2319      	movs	r3, #25
 800b840:	9300      	str	r3, [sp, #0]
 800b842:	4603      	mov	r3, r0
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f000 fdf3 	bl	800c430 <I2C_RequestMemoryRead>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d005      	beq.n	800b85c <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b858:	2301      	movs	r3, #1
 800b85a:	e014      	b.n	800b886 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b860:	b2da      	uxtb	r2, r3
 800b862:	8979      	ldrh	r1, [r7, #10]
 800b864:	4b0c      	ldr	r3, [pc, #48]	; (800b898 <HAL_I2C_Mem_Read_IT+0x128>)
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f001 fd12 	bl	800d294 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b878:	2102      	movs	r1, #2
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f001 fd3c 	bl	800d2f8 <I2C_Enable_IRQ>

    return HAL_OK;
 800b880:	2300      	movs	r3, #0
 800b882:	e000      	b.n	800b886 <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 800b884:	2302      	movs	r3, #2
  }
}
 800b886:	4618      	mov	r0, r3
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	ffff0000 	.word	0xffff0000
 800b894:	0800ba2f 	.word	0x0800ba2f
 800b898:	80002400 	.word	0x80002400

0800b89c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	699b      	ldr	r3, [r3, #24]
 800b8aa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	0a1b      	lsrs	r3, r3, #8
 800b8b8:	f003 0301 	and.w	r3, r3, #1
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d010      	beq.n	800b8e2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	09db      	lsrs	r3, r3, #7
 800b8c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00a      	beq.n	800b8e2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8d0:	f043 0201 	orr.w	r2, r3, #1
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	0a9b      	lsrs	r3, r3, #10
 800b8e6:	f003 0301 	and.w	r3, r3, #1
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d010      	beq.n	800b910 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	09db      	lsrs	r3, r3, #7
 800b8f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00a      	beq.n	800b910 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fe:	f043 0208 	orr.w	r2, r3, #8
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b90e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	0a5b      	lsrs	r3, r3, #9
 800b914:	f003 0301 	and.w	r3, r3, #1
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d010      	beq.n	800b93e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	09db      	lsrs	r3, r3, #7
 800b920:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00a      	beq.n	800b93e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b92c:	f043 0202 	orr.w	r2, r3, #2
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b93c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b942:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f003 030b 	and.w	r3, r3, #11
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d003      	beq.n	800b956 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b94e:	68f9      	ldr	r1, [r7, #12]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f001 f9f9 	bl	800cd48 <I2C_ITError>
  }
}
 800b956:	bf00      	nop
 800b958:	3718      	adds	r7, #24
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b95e:	b480      	push	{r7}
 800b960:	b083      	sub	sp, #12
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b966:	bf00      	nop
 800b968:	370c      	adds	r7, #12
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr

0800b972 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b972:	b480      	push	{r7}
 800b974:	b083      	sub	sp, #12
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b97a:	bf00      	nop
 800b97c:	370c      	adds	r7, #12
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b986:	b480      	push	{r7}
 800b988:	b083      	sub	sp, #12
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b98e:	bf00      	nop
 800b990:	370c      	adds	r7, #12
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr

0800b99a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b083      	sub	sp, #12
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b9a2:	bf00      	nop
 800b9a4:	370c      	adds	r7, #12
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	b083      	sub	sp, #12
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	70fb      	strb	r3, [r7, #3]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b9be:	bf00      	nop
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	b083      	sub	sp, #12
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b9d2:	bf00      	nop
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b083      	sub	sp, #12
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b9e6:	bf00      	nop
 800b9e8:	370c      	adds	r7, #12
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b083      	sub	sp, #12
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800b9fa:	bf00      	nop
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr

0800ba06 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ba06:	b480      	push	{r7}
 800ba08:	b083      	sub	sp, #12
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ba0e:	bf00      	nop
 800ba10:	370c      	adds	r7, #12
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr

0800ba1a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba1a:	b480      	push	{r7}
 800ba1c:	b083      	sub	sp, #12
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ba22:	bf00      	nop
 800ba24:	370c      	adds	r7, #12
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b088      	sub	sp, #32
 800ba32:	af02      	add	r7, sp, #8
 800ba34:	60f8      	str	r0, [r7, #12]
 800ba36:	60b9      	str	r1, [r7, #8]
 800ba38:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d101      	bne.n	800ba4c <I2C_Master_ISR_IT+0x1e>
 800ba48:	2302      	movs	r3, #2
 800ba4a:	e114      	b.n	800bc76 <I2C_Master_ISR_IT+0x248>
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	091b      	lsrs	r3, r3, #4
 800ba58:	f003 0301 	and.w	r3, r3, #1
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d013      	beq.n	800ba88 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	091b      	lsrs	r3, r3, #4
 800ba64:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00d      	beq.n	800ba88 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2210      	movs	r2, #16
 800ba72:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba78:	f043 0204 	orr.w	r2, r3, #4
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f001 fa58 	bl	800cf36 <I2C_Flush_TXDR>
 800ba86:	e0e1      	b.n	800bc4c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	089b      	lsrs	r3, r3, #2
 800ba8c:	f003 0301 	and.w	r3, r3, #1
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d023      	beq.n	800badc <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	089b      	lsrs	r3, r3, #2
 800ba98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d01d      	beq.n	800badc <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	f023 0304 	bic.w	r3, r3, #4
 800baa6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab2:	b2d2      	uxtb	r2, r2
 800bab4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baba:	1c5a      	adds	r2, r3, #1
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bac4:	3b01      	subs	r3, #1
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	3b01      	subs	r3, #1
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bada:	e0b7      	b.n	800bc4c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	085b      	lsrs	r3, r3, #1
 800bae0:	f003 0301 	and.w	r3, r3, #1
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d01e      	beq.n	800bb26 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	085b      	lsrs	r3, r3, #1
 800baec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d018      	beq.n	800bb26 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf8:	781a      	ldrb	r2, [r3, #0]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb04:	1c5a      	adds	r2, r3, #1
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb24:	e092      	b.n	800bc4c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	09db      	lsrs	r3, r3, #7
 800bb2a:	f003 0301 	and.w	r3, r3, #1
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d05d      	beq.n	800bbee <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	099b      	lsrs	r3, r3, #6
 800bb36:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d057      	beq.n	800bbee <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d040      	beq.n	800bbca <I2C_Master_ISR_IT+0x19c>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d13c      	bne.n	800bbca <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb5c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	2bff      	cmp	r3, #255	; 0xff
 800bb66:	d90e      	bls.n	800bb86 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	22ff      	movs	r2, #255	; 0xff
 800bb6c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	8a79      	ldrh	r1, [r7, #18]
 800bb76:	2300      	movs	r3, #0
 800bb78:	9300      	str	r3, [sp, #0]
 800bb7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f001 fb88 	bl	800d294 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb84:	e032      	b.n	800bbec <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb98:	d00b      	beq.n	800bbb2 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba4:	8a79      	ldrh	r1, [r7, #18]
 800bba6:	2000      	movs	r0, #0
 800bba8:	9000      	str	r0, [sp, #0]
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f001 fb72 	bl	800d294 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbb0:	e01c      	b.n	800bbec <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	8a79      	ldrh	r1, [r7, #18]
 800bbba:	2300      	movs	r3, #0
 800bbbc:	9300      	str	r3, [sp, #0]
 800bbbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f001 fb66 	bl	800d294 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbc8:	e010      	b.n	800bbec <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbd8:	d003      	beq.n	800bbe2 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f000 fd00 	bl	800c5e0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bbe0:	e034      	b.n	800bc4c <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bbe2:	2140      	movs	r1, #64	; 0x40
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f001 f8af 	bl	800cd48 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bbea:	e02f      	b.n	800bc4c <I2C_Master_ISR_IT+0x21e>
 800bbec:	e02e      	b.n	800bc4c <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	099b      	lsrs	r3, r3, #6
 800bbf2:	f003 0301 	and.w	r3, r3, #1
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d028      	beq.n	800bc4c <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	099b      	lsrs	r3, r3, #6
 800bbfe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d022      	beq.n	800bc4c <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d119      	bne.n	800bc44 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc1e:	d015      	beq.n	800bc4c <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc28:	d108      	bne.n	800bc3c <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	685a      	ldr	r2, [r3, #4]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc38:	605a      	str	r2, [r3, #4]
 800bc3a:	e007      	b.n	800bc4c <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f000 fccf 	bl	800c5e0 <I2C_ITMasterSeqCplt>
 800bc42:	e003      	b.n	800bc4c <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bc44:	2140      	movs	r1, #64	; 0x40
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f001 f87e 	bl	800cd48 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	095b      	lsrs	r3, r3, #5
 800bc50:	f003 0301 	and.w	r3, r3, #1
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d009      	beq.n	800bc6c <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	095b      	lsrs	r3, r3, #5
 800bc5c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d003      	beq.n	800bc6c <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800bc64:	6979      	ldr	r1, [r7, #20]
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	f000 fd56 	bl	800c718 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3718      	adds	r7, #24
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b086      	sub	sp, #24
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	60f8      	str	r0, [r7, #12]
 800bc86:	60b9      	str	r1, [r7, #8]
 800bc88:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d101      	bne.n	800bca2 <I2C_Slave_ISR_IT+0x24>
 800bc9e:	2302      	movs	r3, #2
 800bca0:	e0ec      	b.n	800be7c <I2C_Slave_ISR_IT+0x1fe>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2201      	movs	r2, #1
 800bca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	095b      	lsrs	r3, r3, #5
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d009      	beq.n	800bcca <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	095b      	lsrs	r3, r3, #5
 800bcba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bcc2:	6939      	ldr	r1, [r7, #16]
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f000 fdf1 	bl	800c8ac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	091b      	lsrs	r3, r3, #4
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d04d      	beq.n	800bd72 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	091b      	lsrs	r3, r3, #4
 800bcda:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d047      	beq.n	800bd72 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d128      	bne.n	800bd3e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	2b28      	cmp	r3, #40	; 0x28
 800bcf6:	d108      	bne.n	800bd0a <I2C_Slave_ISR_IT+0x8c>
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcfe:	d104      	bne.n	800bd0a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bd00:	6939      	ldr	r1, [r7, #16]
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f000 ffca 	bl	800cc9c <I2C_ITListenCplt>
 800bd08:	e032      	b.n	800bd70 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b29      	cmp	r3, #41	; 0x29
 800bd14:	d10e      	bne.n	800bd34 <I2C_Slave_ISR_IT+0xb6>
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd1c:	d00a      	beq.n	800bd34 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2210      	movs	r2, #16
 800bd24:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f001 f905 	bl	800cf36 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f000 fc94 	bl	800c65a <I2C_ITSlaveSeqCplt>
 800bd32:	e01d      	b.n	800bd70 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2210      	movs	r2, #16
 800bd3a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800bd3c:	e096      	b.n	800be6c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2210      	movs	r2, #16
 800bd44:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd4a:	f043 0204 	orr.w	r2, r3, #4
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d004      	beq.n	800bd62 <I2C_Slave_ISR_IT+0xe4>
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd5e:	f040 8085 	bne.w	800be6c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd66:	4619      	mov	r1, r3
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f000 ffed 	bl	800cd48 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bd6e:	e07d      	b.n	800be6c <I2C_Slave_ISR_IT+0x1ee>
 800bd70:	e07c      	b.n	800be6c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	089b      	lsrs	r3, r3, #2
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d030      	beq.n	800bde0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	089b      	lsrs	r3, r3, #2
 800bd82:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d02a      	beq.n	800bde0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d018      	beq.n	800bdc6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9e:	b2d2      	uxtb	r2, r2
 800bda0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda6:	1c5a      	adds	r2, r3, #1
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdb0:	3b01      	subs	r3, #1
 800bdb2:	b29a      	uxth	r2, r3
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d14f      	bne.n	800be70 <I2C_Slave_ISR_IT+0x1f2>
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bdd6:	d04b      	beq.n	800be70 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bdd8:	68f8      	ldr	r0, [r7, #12]
 800bdda:	f000 fc3e 	bl	800c65a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bdde:	e047      	b.n	800be70 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	08db      	lsrs	r3, r3, #3
 800bde4:	f003 0301 	and.w	r3, r3, #1
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00a      	beq.n	800be02 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	08db      	lsrs	r3, r3, #3
 800bdf0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d004      	beq.n	800be02 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bdf8:	6939      	ldr	r1, [r7, #16]
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 fb6c 	bl	800c4d8 <I2C_ITAddrCplt>
 800be00:	e037      	b.n	800be72 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	085b      	lsrs	r3, r3, #1
 800be06:	f003 0301 	and.w	r3, r3, #1
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d031      	beq.n	800be72 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	085b      	lsrs	r3, r3, #1
 800be12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be16:	2b00      	cmp	r3, #0
 800be18:	d02b      	beq.n	800be72 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be1e:	b29b      	uxth	r3, r3
 800be20:	2b00      	cmp	r3, #0
 800be22:	d018      	beq.n	800be56 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be28:	781a      	ldrb	r2, [r3, #0]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be34:	1c5a      	adds	r2, r3, #1
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be3e:	b29b      	uxth	r3, r3
 800be40:	3b01      	subs	r3, #1
 800be42:	b29a      	uxth	r2, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be4c:	3b01      	subs	r3, #1
 800be4e:	b29a      	uxth	r2, r3
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	851a      	strh	r2, [r3, #40]	; 0x28
 800be54:	e00d      	b.n	800be72 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be5c:	d002      	beq.n	800be64 <I2C_Slave_ISR_IT+0x1e6>
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d106      	bne.n	800be72 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f000 fbf8 	bl	800c65a <I2C_ITSlaveSeqCplt>
 800be6a:	e002      	b.n	800be72 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800be6c:	bf00      	nop
 800be6e:	e000      	b.n	800be72 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800be70:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3718      	adds	r7, #24
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b088      	sub	sp, #32
 800be88:	af02      	add	r7, sp, #8
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be96:	2b01      	cmp	r3, #1
 800be98:	d101      	bne.n	800be9e <I2C_Master_ISR_DMA+0x1a>
 800be9a:	2302      	movs	r3, #2
 800be9c:	e0e1      	b.n	800c062 <I2C_Master_ISR_DMA+0x1de>
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	091b      	lsrs	r3, r3, #4
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d017      	beq.n	800bee2 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	091b      	lsrs	r3, r3, #4
 800beb6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d011      	beq.n	800bee2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2210      	movs	r2, #16
 800bec4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beca:	f043 0204 	orr.w	r2, r3, #4
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bed2:	2120      	movs	r1, #32
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f001 fa0f 	bl	800d2f8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f001 f82b 	bl	800cf36 <I2C_Flush_TXDR>
 800bee0:	e0ba      	b.n	800c058 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	09db      	lsrs	r3, r3, #7
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	2b00      	cmp	r3, #0
 800beec:	d072      	beq.n	800bfd4 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	099b      	lsrs	r3, r3, #6
 800bef2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d06c      	beq.n	800bfd4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf08:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d04e      	beq.n	800bfb2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf20:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	2bff      	cmp	r3, #255	; 0xff
 800bf2a:	d906      	bls.n	800bf3a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	22ff      	movs	r2, #255	; 0xff
 800bf30:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800bf32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf36:	617b      	str	r3, [r7, #20]
 800bf38:	e010      	b.n	800bf5c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf3e:	b29a      	uxth	r2, r3
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bf4c:	d003      	beq.n	800bf56 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf52:	617b      	str	r3, [r7, #20]
 800bf54:	e002      	b.n	800bf5c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800bf56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bf5a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	8a79      	ldrh	r1, [r7, #18]
 800bf64:	2300      	movs	r3, #0
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f001 f992 	bl	800d294 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf7a:	1ad3      	subs	r3, r2, r3
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b22      	cmp	r3, #34	; 0x22
 800bf8c:	d108      	bne.n	800bfa0 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf9c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bf9e:	e05b      	b.n	800c058 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bfb0:	e052      	b.n	800c058 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfc0:	d003      	beq.n	800bfca <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	f000 fb0c 	bl	800c5e0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800bfc8:	e046      	b.n	800c058 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bfca:	2140      	movs	r1, #64	; 0x40
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f000 febb 	bl	800cd48 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800bfd2:	e041      	b.n	800c058 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	099b      	lsrs	r3, r3, #6
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d029      	beq.n	800c034 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	099b      	lsrs	r3, r3, #6
 800bfe4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d023      	beq.n	800c034 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d119      	bne.n	800c02a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c000:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c004:	d027      	beq.n	800c056 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c00e:	d108      	bne.n	800c022 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	685a      	ldr	r2, [r3, #4]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c01e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c020:	e019      	b.n	800c056 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f000 fadc 	bl	800c5e0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c028:	e015      	b.n	800c056 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c02a:	2140      	movs	r1, #64	; 0x40
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	f000 fe8b 	bl	800cd48 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c032:	e010      	b.n	800c056 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	095b      	lsrs	r3, r3, #5
 800c038:	f003 0301 	and.w	r3, r3, #1
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00b      	beq.n	800c058 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	095b      	lsrs	r3, r3, #5
 800c044:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d005      	beq.n	800c058 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c04c:	68b9      	ldr	r1, [r7, #8]
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	f000 fb62 	bl	800c718 <I2C_ITMasterCplt>
 800c054:	e000      	b.n	800c058 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800c056:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c060:	2300      	movs	r3, #0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3718      	adds	r7, #24
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
	...

0800c06c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b088      	sub	sp, #32
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c07e:	2300      	movs	r3, #0
 800c080:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d101      	bne.n	800c090 <I2C_Slave_ISR_DMA+0x24>
 800c08c:	2302      	movs	r3, #2
 800c08e:	e1ca      	b.n	800c426 <I2C_Slave_ISR_DMA+0x3ba>
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	095b      	lsrs	r3, r3, #5
 800c09c:	f003 0301 	and.w	r3, r3, #1
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d009      	beq.n	800c0b8 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	095b      	lsrs	r3, r3, #5
 800c0a8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d003      	beq.n	800c0b8 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c0b0:	68b9      	ldr	r1, [r7, #8]
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f000 fbfa 	bl	800c8ac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	091b      	lsrs	r3, r3, #4
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f000 819b 	beq.w	800c3fc <I2C_Slave_ISR_DMA+0x390>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	091b      	lsrs	r3, r3, #4
 800c0ca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f000 8194 	beq.w	800c3fc <I2C_Slave_ISR_DMA+0x390>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	0b9b      	lsrs	r3, r3, #14
 800c0d8:	f003 0301 	and.w	r3, r3, #1
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d106      	bne.n	800c0ee <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	0bdb      	lsrs	r3, r3, #15
 800c0e4:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f000 8180 	beq.w	800c3ee <I2C_Slave_ISR_DMA+0x382>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d07c      	beq.n	800c1f0 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	0bdb      	lsrs	r3, r3, #15
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d076      	beq.n	800c1f0 <I2C_Slave_ISR_DMA+0x184>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a74      	ldr	r2, [pc, #464]	; (800c2dc <I2C_Slave_ISR_DMA+0x270>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d059      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a72      	ldr	r2, [pc, #456]	; (800c2e0 <I2C_Slave_ISR_DMA+0x274>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d053      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a70      	ldr	r2, [pc, #448]	; (800c2e4 <I2C_Slave_ISR_DMA+0x278>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d04d      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a6e      	ldr	r2, [pc, #440]	; (800c2e8 <I2C_Slave_ISR_DMA+0x27c>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d047      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a6c      	ldr	r2, [pc, #432]	; (800c2ec <I2C_Slave_ISR_DMA+0x280>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d041      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a6a      	ldr	r2, [pc, #424]	; (800c2f0 <I2C_Slave_ISR_DMA+0x284>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d03b      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a68      	ldr	r2, [pc, #416]	; (800c2f4 <I2C_Slave_ISR_DMA+0x288>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d035      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a66      	ldr	r2, [pc, #408]	; (800c2f8 <I2C_Slave_ISR_DMA+0x28c>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d02f      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a64      	ldr	r2, [pc, #400]	; (800c2fc <I2C_Slave_ISR_DMA+0x290>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d029      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a62      	ldr	r2, [pc, #392]	; (800c300 <I2C_Slave_ISR_DMA+0x294>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d023      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a60      	ldr	r2, [pc, #384]	; (800c304 <I2C_Slave_ISR_DMA+0x298>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d01d      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a5e      	ldr	r2, [pc, #376]	; (800c308 <I2C_Slave_ISR_DMA+0x29c>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d017      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a5c      	ldr	r2, [pc, #368]	; (800c30c <I2C_Slave_ISR_DMA+0x2a0>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d011      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a5a      	ldr	r2, [pc, #360]	; (800c310 <I2C_Slave_ISR_DMA+0x2a4>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d00b      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a58      	ldr	r2, [pc, #352]	; (800c314 <I2C_Slave_ISR_DMA+0x2a8>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d005      	beq.n	800c1c2 <I2C_Slave_ISR_DMA+0x156>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a56      	ldr	r2, [pc, #344]	; (800c318 <I2C_Slave_ISR_DMA+0x2ac>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d109      	bne.n	800c1d6 <I2C_Slave_ISR_DMA+0x16a>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	bf0c      	ite	eq
 800c1ce:	2301      	moveq	r3, #1
 800c1d0:	2300      	movne	r3, #0
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	e008      	b.n	800c1e8 <I2C_Slave_ISR_DMA+0x17c>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	bf0c      	ite	eq
 800c1e2:	2301      	moveq	r3, #1
 800c1e4:	2300      	movne	r3, #0
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d001      	beq.n	800c1f0 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f000 809e 	beq.w	800c336 <I2C_Slave_ISR_DMA+0x2ca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	0b9b      	lsrs	r3, r3, #14
 800c1fe:	f003 0301 	and.w	r3, r3, #1
 800c202:	2b00      	cmp	r3, #0
 800c204:	f000 8097 	beq.w	800c336 <I2C_Slave_ISR_DMA+0x2ca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a33      	ldr	r2, [pc, #204]	; (800c2dc <I2C_Slave_ISR_DMA+0x270>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d059      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a31      	ldr	r2, [pc, #196]	; (800c2e0 <I2C_Slave_ISR_DMA+0x274>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d053      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a2f      	ldr	r2, [pc, #188]	; (800c2e4 <I2C_Slave_ISR_DMA+0x278>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d04d      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a2d      	ldr	r2, [pc, #180]	; (800c2e8 <I2C_Slave_ISR_DMA+0x27c>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d047      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a2b      	ldr	r2, [pc, #172]	; (800c2ec <I2C_Slave_ISR_DMA+0x280>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d041      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a29      	ldr	r2, [pc, #164]	; (800c2f0 <I2C_Slave_ISR_DMA+0x284>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d03b      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a27      	ldr	r2, [pc, #156]	; (800c2f4 <I2C_Slave_ISR_DMA+0x288>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d035      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a25      	ldr	r2, [pc, #148]	; (800c2f8 <I2C_Slave_ISR_DMA+0x28c>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d02f      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a23      	ldr	r2, [pc, #140]	; (800c2fc <I2C_Slave_ISR_DMA+0x290>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d029      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a21      	ldr	r2, [pc, #132]	; (800c300 <I2C_Slave_ISR_DMA+0x294>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d023      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a1f      	ldr	r2, [pc, #124]	; (800c304 <I2C_Slave_ISR_DMA+0x298>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d01d      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4a1d      	ldr	r2, [pc, #116]	; (800c308 <I2C_Slave_ISR_DMA+0x29c>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d017      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a1b      	ldr	r2, [pc, #108]	; (800c30c <I2C_Slave_ISR_DMA+0x2a0>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d011      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a19      	ldr	r2, [pc, #100]	; (800c310 <I2C_Slave_ISR_DMA+0x2a4>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d00b      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4a17      	ldr	r2, [pc, #92]	; (800c314 <I2C_Slave_ISR_DMA+0x2a8>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d005      	beq.n	800c2c8 <I2C_Slave_ISR_DMA+0x25c>
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4a15      	ldr	r2, [pc, #84]	; (800c318 <I2C_Slave_ISR_DMA+0x2ac>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d129      	bne.n	800c31c <I2C_Slave_ISR_DMA+0x2b0>
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	bf0c      	ite	eq
 800c2d4:	2301      	moveq	r3, #1
 800c2d6:	2300      	movne	r3, #0
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	e028      	b.n	800c32e <I2C_Slave_ISR_DMA+0x2c2>
 800c2dc:	40020010 	.word	0x40020010
 800c2e0:	40020028 	.word	0x40020028
 800c2e4:	40020040 	.word	0x40020040
 800c2e8:	40020058 	.word	0x40020058
 800c2ec:	40020070 	.word	0x40020070
 800c2f0:	40020088 	.word	0x40020088
 800c2f4:	400200a0 	.word	0x400200a0
 800c2f8:	400200b8 	.word	0x400200b8
 800c2fc:	40020410 	.word	0x40020410
 800c300:	40020428 	.word	0x40020428
 800c304:	40020440 	.word	0x40020440
 800c308:	40020458 	.word	0x40020458
 800c30c:	40020470 	.word	0x40020470
 800c310:	40020488 	.word	0x40020488
 800c314:	400204a0 	.word	0x400204a0
 800c318:	400204b8 	.word	0x400204b8
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	bf0c      	ite	eq
 800c328:	2301      	moveq	r3, #1
 800c32a:	2300      	movne	r3, #0
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <I2C_Slave_ISR_DMA+0x2ca>
          {
            treatdmanack = 1U;
 800c332:	2301      	movs	r3, #1
 800c334:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d128      	bne.n	800c38e <I2C_Slave_ISR_DMA+0x322>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2b28      	cmp	r3, #40	; 0x28
 800c346:	d108      	bne.n	800c35a <I2C_Slave_ISR_DMA+0x2ee>
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c34e:	d104      	bne.n	800c35a <I2C_Slave_ISR_DMA+0x2ee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c350:	68b9      	ldr	r1, [r7, #8]
 800c352:	68f8      	ldr	r0, [r7, #12]
 800c354:	f000 fca2 	bl	800cc9c <I2C_ITListenCplt>
 800c358:	e048      	b.n	800c3ec <I2C_Slave_ISR_DMA+0x380>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c360:	b2db      	uxtb	r3, r3
 800c362:	2b29      	cmp	r3, #41	; 0x29
 800c364:	d10e      	bne.n	800c384 <I2C_Slave_ISR_DMA+0x318>
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c36c:	d00a      	beq.n	800c384 <I2C_Slave_ISR_DMA+0x318>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2210      	movs	r2, #16
 800c374:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f000 fddd 	bl	800cf36 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c37c:	68f8      	ldr	r0, [r7, #12]
 800c37e:	f000 f96c 	bl	800c65a <I2C_ITSlaveSeqCplt>
 800c382:	e033      	b.n	800c3ec <I2C_Slave_ISR_DMA+0x380>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2210      	movs	r2, #16
 800c38a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c38c:	e034      	b.n	800c3f8 <I2C_Slave_ISR_DMA+0x38c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2210      	movs	r2, #16
 800c394:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c39a:	f043 0204 	orr.w	r2, r3, #4
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3a8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d003      	beq.n	800c3b8 <I2C_Slave_ISR_DMA+0x34c>
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c3b6:	d11f      	bne.n	800c3f8 <I2C_Slave_ISR_DMA+0x38c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c3b8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ba:	2b21      	cmp	r3, #33	; 0x21
 800c3bc:	d002      	beq.n	800c3c4 <I2C_Slave_ISR_DMA+0x358>
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
 800c3c0:	2b29      	cmp	r3, #41	; 0x29
 800c3c2:	d103      	bne.n	800c3cc <I2C_Slave_ISR_DMA+0x360>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2221      	movs	r2, #33	; 0x21
 800c3c8:	631a      	str	r2, [r3, #48]	; 0x30
 800c3ca:	e008      	b.n	800c3de <I2C_Slave_ISR_DMA+0x372>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c3cc:	7dfb      	ldrb	r3, [r7, #23]
 800c3ce:	2b22      	cmp	r3, #34	; 0x22
 800c3d0:	d002      	beq.n	800c3d8 <I2C_Slave_ISR_DMA+0x36c>
 800c3d2:	7dfb      	ldrb	r3, [r7, #23]
 800c3d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c3d6:	d102      	bne.n	800c3de <I2C_Slave_ISR_DMA+0x372>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2222      	movs	r2, #34	; 0x22
 800c3dc:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f000 fcaf 	bl	800cd48 <I2C_ITError>
      if (treatdmanack == 1U)
 800c3ea:	e005      	b.n	800c3f8 <I2C_Slave_ISR_DMA+0x38c>
 800c3ec:	e004      	b.n	800c3f8 <I2C_Slave_ISR_DMA+0x38c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2210      	movs	r2, #16
 800c3f4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c3f6:	e011      	b.n	800c41c <I2C_Slave_ISR_DMA+0x3b0>
      if (treatdmanack == 1U)
 800c3f8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c3fa:	e00f      	b.n	800c41c <I2C_Slave_ISR_DMA+0x3b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	08db      	lsrs	r3, r3, #3
 800c400:	f003 0301 	and.w	r3, r3, #1
 800c404:	2b00      	cmp	r3, #0
 800c406:	d009      	beq.n	800c41c <I2C_Slave_ISR_DMA+0x3b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	08db      	lsrs	r3, r3, #3
 800c40c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c410:	2b00      	cmp	r3, #0
 800c412:	d003      	beq.n	800c41c <I2C_Slave_ISR_DMA+0x3b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c414:	68b9      	ldr	r1, [r7, #8]
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f000 f85e 	bl	800c4d8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2200      	movs	r2, #0
 800c420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3720      	adds	r7, #32
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop

0800c430 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af02      	add	r7, sp, #8
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	4608      	mov	r0, r1
 800c43a:	4611      	mov	r1, r2
 800c43c:	461a      	mov	r2, r3
 800c43e:	4603      	mov	r3, r0
 800c440:	817b      	strh	r3, [r7, #10]
 800c442:	460b      	mov	r3, r1
 800c444:	813b      	strh	r3, [r7, #8]
 800c446:	4613      	mov	r3, r2
 800c448:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c44a:	88fb      	ldrh	r3, [r7, #6]
 800c44c:	b2da      	uxtb	r2, r3
 800c44e:	8979      	ldrh	r1, [r7, #10]
 800c450:	4b20      	ldr	r3, [pc, #128]	; (800c4d4 <I2C_RequestMemoryRead+0xa4>)
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	2300      	movs	r3, #0
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f000 ff1c 	bl	800d294 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c45c:	69fa      	ldr	r2, [r7, #28]
 800c45e:	69b9      	ldr	r1, [r7, #24]
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f000 fdea 	bl	800d03a <I2C_WaitOnTXISFlagUntilTimeout>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	e02c      	b.n	800c4ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c470:	88fb      	ldrh	r3, [r7, #6]
 800c472:	2b01      	cmp	r3, #1
 800c474:	d105      	bne.n	800c482 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c476:	893b      	ldrh	r3, [r7, #8]
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	629a      	str	r2, [r3, #40]	; 0x28
 800c480:	e015      	b.n	800c4ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c482:	893b      	ldrh	r3, [r7, #8]
 800c484:	0a1b      	lsrs	r3, r3, #8
 800c486:	b29b      	uxth	r3, r3
 800c488:	b2da      	uxtb	r2, r3
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c490:	69fa      	ldr	r2, [r7, #28]
 800c492:	69b9      	ldr	r1, [r7, #24]
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f000 fdd0 	bl	800d03a <I2C_WaitOnTXISFlagUntilTimeout>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d001      	beq.n	800c4a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	e012      	b.n	800c4ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c4a4:	893b      	ldrh	r3, [r7, #8]
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	9300      	str	r3, [sp, #0]
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	2140      	movs	r1, #64	; 0x40
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f000 fd7e 	bl	800cfba <I2C_WaitOnFlagUntilTimeout>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d001      	beq.n	800c4c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	e000      	b.n	800c4ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c4c8:	2300      	movs	r3, #0
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	80002000 	.word	0x80002000

0800c4d8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c4ee:	2b28      	cmp	r3, #40	; 0x28
 800c4f0:	d16a      	bne.n	800c5c8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	0c1b      	lsrs	r3, r3, #16
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	f003 0301 	and.w	r3, r3, #1
 800c500:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	699b      	ldr	r3, [r3, #24]
 800c508:	0c1b      	lsrs	r3, r3, #16
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c510:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	b29b      	uxth	r3, r3
 800c51a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c51e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	b29b      	uxth	r3, r3
 800c528:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c52c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	2b02      	cmp	r3, #2
 800c534:	d138      	bne.n	800c5a8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c536:	897b      	ldrh	r3, [r7, #10]
 800c538:	09db      	lsrs	r3, r3, #7
 800c53a:	b29a      	uxth	r2, r3
 800c53c:	89bb      	ldrh	r3, [r7, #12]
 800c53e:	4053      	eors	r3, r2
 800c540:	b29b      	uxth	r3, r3
 800c542:	f003 0306 	and.w	r3, r3, #6
 800c546:	2b00      	cmp	r3, #0
 800c548:	d11c      	bne.n	800c584 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c54a:	897b      	ldrh	r3, [r7, #10]
 800c54c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c552:	1c5a      	adds	r2, r3, #1
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c55c:	2b02      	cmp	r3, #2
 800c55e:	d13b      	bne.n	800c5d8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2208      	movs	r2, #8
 800c56c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c576:	89ba      	ldrh	r2, [r7, #12]
 800c578:	7bfb      	ldrb	r3, [r7, #15]
 800c57a:	4619      	mov	r1, r3
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff fa16 	bl	800b9ae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c582:	e029      	b.n	800c5d8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c584:	893b      	ldrh	r3, [r7, #8]
 800c586:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 ff17 	bl	800d3c0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c59a:	89ba      	ldrh	r2, [r7, #12]
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7ff fa04 	bl	800b9ae <HAL_I2C_AddrCallback>
}
 800c5a6:	e017      	b.n	800c5d8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c5a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 ff07 	bl	800d3c0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c5ba:	89ba      	ldrh	r2, [r7, #12]
 800c5bc:	7bfb      	ldrb	r3, [r7, #15]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7ff f9f4 	bl	800b9ae <HAL_I2C_AddrCallback>
}
 800c5c6:	e007      	b.n	800c5d8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2208      	movs	r2, #8
 800c5ce:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c5d8:	bf00      	nop
 800c5da:	3710      	adds	r7, #16
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	2b21      	cmp	r3, #33	; 0x21
 800c5fa:	d115      	bne.n	800c628 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2220      	movs	r2, #32
 800c600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2211      	movs	r2, #17
 800c608:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2200      	movs	r2, #0
 800c60e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c610:	2101      	movs	r1, #1
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 fed4 	bl	800d3c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7ff f99c 	bl	800b95e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c626:	e014      	b.n	800c652 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2220      	movs	r2, #32
 800c62c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2212      	movs	r2, #18
 800c634:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c63c:	2102      	movs	r1, #2
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 febe 	bl	800d3c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f7ff f990 	bl	800b972 <HAL_I2C_MasterRxCpltCallback>
}
 800c652:	bf00      	nop
 800c654:	3708      	adds	r7, #8
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}

0800c65a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b084      	sub	sp, #16
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	0b9b      	lsrs	r3, r3, #14
 800c676:	f003 0301 	and.w	r3, r3, #1
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d008      	beq.n	800c690 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c68c:	601a      	str	r2, [r3, #0]
 800c68e:	e00d      	b.n	800c6ac <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	0bdb      	lsrs	r3, r3, #15
 800c694:	f003 0301 	and.w	r3, r3, #1
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d007      	beq.n	800c6ac <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c6aa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	2b29      	cmp	r3, #41	; 0x29
 800c6b6:	d112      	bne.n	800c6de <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2228      	movs	r2, #40	; 0x28
 800c6bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2221      	movs	r2, #33	; 0x21
 800c6c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c6c6:	2101      	movs	r1, #1
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 fe79 	bl	800d3c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f7ff f955 	bl	800b986 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c6dc:	e017      	b.n	800c70e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c6e8:	d111      	bne.n	800c70e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2228      	movs	r2, #40	; 0x28
 800c6ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2222      	movs	r2, #34	; 0x22
 800c6f6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c6f8:	2102      	movs	r1, #2
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fe60 	bl	800d3c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7ff f946 	bl	800b99a <HAL_I2C_SlaveRxCpltCallback>
}
 800c70e:	bf00      	nop
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
	...

0800c718 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b086      	sub	sp, #24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2220      	movs	r2, #32
 800c72c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c734:	b2db      	uxtb	r3, r3
 800c736:	2b21      	cmp	r3, #33	; 0x21
 800c738:	d107      	bne.n	800c74a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c73a:	2101      	movs	r1, #1
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 fe3f 	bl	800d3c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2211      	movs	r2, #17
 800c746:	631a      	str	r2, [r3, #48]	; 0x30
 800c748:	e00c      	b.n	800c764 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c750:	b2db      	uxtb	r3, r3
 800c752:	2b22      	cmp	r3, #34	; 0x22
 800c754:	d106      	bne.n	800c764 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c756:	2102      	movs	r1, #2
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 fe31 	bl	800d3c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2212      	movs	r2, #18
 800c762:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	6859      	ldr	r1, [r3, #4]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	4b4d      	ldr	r3, [pc, #308]	; (800c8a4 <I2C_ITMasterCplt+0x18c>)
 800c770:	400b      	ands	r3, r1
 800c772:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	4a4a      	ldr	r2, [pc, #296]	; (800c8a8 <I2C_ITMasterCplt+0x190>)
 800c77e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	091b      	lsrs	r3, r3, #4
 800c784:	f003 0301 	and.w	r3, r3, #1
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d009      	beq.n	800c7a0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2210      	movs	r2, #16
 800c792:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c798:	f043 0204 	orr.w	r2, r3, #4
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	2b60      	cmp	r3, #96	; 0x60
 800c7aa:	d10b      	bne.n	800c7c4 <I2C_ITMasterCplt+0xac>
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	089b      	lsrs	r3, r3, #2
 800c7b0:	f003 0301 	and.w	r3, r3, #1
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d005      	beq.n	800c7c4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 fbb6 	bl	800cf36 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ce:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	2b60      	cmp	r3, #96	; 0x60
 800c7da:	d002      	beq.n	800c7e2 <I2C_ITMasterCplt+0xca>
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d006      	beq.n	800c7f0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 faad 	bl	800cd48 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c7ee:	e054      	b.n	800c89a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	2b21      	cmp	r3, #33	; 0x21
 800c7fa:	d124      	bne.n	800c846 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2220      	movs	r2, #32
 800c800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c810:	b2db      	uxtb	r3, r3
 800c812:	2b40      	cmp	r3, #64	; 0x40
 800c814:	d10b      	bne.n	800c82e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f7ff f8d9 	bl	800b9de <HAL_I2C_MemTxCpltCallback>
}
 800c82c:	e035      	b.n	800c89a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7ff f88d 	bl	800b95e <HAL_I2C_MasterTxCpltCallback>
}
 800c844:	e029      	b.n	800c89a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	2b22      	cmp	r3, #34	; 0x22
 800c850:	d123      	bne.n	800c89a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2220      	movs	r2, #32
 800c856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c866:	b2db      	uxtb	r3, r3
 800c868:	2b40      	cmp	r3, #64	; 0x40
 800c86a:	d10b      	bne.n	800c884 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7ff f8b8 	bl	800b9f2 <HAL_I2C_MemRxCpltCallback>
}
 800c882:	e00a      	b.n	800c89a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7ff f86c 	bl	800b972 <HAL_I2C_MasterRxCpltCallback>
}
 800c89a:	bf00      	nop
 800c89c:	3718      	adds	r7, #24
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	fe00e800 	.word	0xfe00e800
 800c8a8:	ffff0000 	.word	0xffff0000

0800c8ac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b086      	sub	sp, #24
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8c8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2220      	movs	r2, #32
 800c8d0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c8d2:	7bfb      	ldrb	r3, [r7, #15]
 800c8d4:	2b21      	cmp	r3, #33	; 0x21
 800c8d6:	d002      	beq.n	800c8de <I2C_ITSlaveCplt+0x32>
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
 800c8da:	2b29      	cmp	r3, #41	; 0x29
 800c8dc:	d108      	bne.n	800c8f0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c8de:	f248 0101 	movw	r1, #32769	; 0x8001
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fd6c 	bl	800d3c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2221      	movs	r2, #33	; 0x21
 800c8ec:	631a      	str	r2, [r3, #48]	; 0x30
 800c8ee:	e00d      	b.n	800c90c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c8f0:	7bfb      	ldrb	r3, [r7, #15]
 800c8f2:	2b22      	cmp	r3, #34	; 0x22
 800c8f4:	d002      	beq.n	800c8fc <I2C_ITSlaveCplt+0x50>
 800c8f6:	7bfb      	ldrb	r3, [r7, #15]
 800c8f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8fa:	d107      	bne.n	800c90c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c8fc:	f248 0102 	movw	r1, #32770	; 0x8002
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 fd5d 	bl	800d3c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2222      	movs	r2, #34	; 0x22
 800c90a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	685a      	ldr	r2, [r3, #4]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c91a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	6859      	ldr	r1, [r3, #4]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	4b80      	ldr	r3, [pc, #512]	; (800cb28 <I2C_ITSlaveCplt+0x27c>)
 800c928:	400b      	ands	r3, r1
 800c92a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 fb02 	bl	800cf36 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	0b9b      	lsrs	r3, r3, #14
 800c936:	f003 0301 	and.w	r3, r3, #1
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d07a      	beq.n	800ca34 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c94c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c952:	2b00      	cmp	r3, #0
 800c954:	f000 8111 	beq.w	800cb7a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a73      	ldr	r2, [pc, #460]	; (800cb2c <I2C_ITSlaveCplt+0x280>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d059      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a71      	ldr	r2, [pc, #452]	; (800cb30 <I2C_ITSlaveCplt+0x284>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d053      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a6f      	ldr	r2, [pc, #444]	; (800cb34 <I2C_ITSlaveCplt+0x288>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d04d      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a6d      	ldr	r2, [pc, #436]	; (800cb38 <I2C_ITSlaveCplt+0x28c>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d047      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a6b      	ldr	r2, [pc, #428]	; (800cb3c <I2C_ITSlaveCplt+0x290>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d041      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a69      	ldr	r2, [pc, #420]	; (800cb40 <I2C_ITSlaveCplt+0x294>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d03b      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a67      	ldr	r2, [pc, #412]	; (800cb44 <I2C_ITSlaveCplt+0x298>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d035      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a65      	ldr	r2, [pc, #404]	; (800cb48 <I2C_ITSlaveCplt+0x29c>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d02f      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a63      	ldr	r2, [pc, #396]	; (800cb4c <I2C_ITSlaveCplt+0x2a0>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d029      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a61      	ldr	r2, [pc, #388]	; (800cb50 <I2C_ITSlaveCplt+0x2a4>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d023      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a5f      	ldr	r2, [pc, #380]	; (800cb54 <I2C_ITSlaveCplt+0x2a8>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d01d      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a5d      	ldr	r2, [pc, #372]	; (800cb58 <I2C_ITSlaveCplt+0x2ac>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d017      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a5b      	ldr	r2, [pc, #364]	; (800cb5c <I2C_ITSlaveCplt+0x2b0>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d011      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a59      	ldr	r2, [pc, #356]	; (800cb60 <I2C_ITSlaveCplt+0x2b4>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d00b      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a57      	ldr	r2, [pc, #348]	; (800cb64 <I2C_ITSlaveCplt+0x2b8>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d005      	beq.n	800ca18 <I2C_ITSlaveCplt+0x16c>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a55      	ldr	r2, [pc, #340]	; (800cb68 <I2C_ITSlaveCplt+0x2bc>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d105      	bne.n	800ca24 <I2C_ITSlaveCplt+0x178>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	e004      	b.n	800ca2e <I2C_ITSlaveCplt+0x182>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	8553      	strh	r3, [r2, #42]	; 0x2a
 800ca32:	e0a2      	b.n	800cb7a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	0bdb      	lsrs	r3, r3, #15
 800ca38:	f003 0301 	and.w	r3, r3, #1
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f000 809c 	beq.w	800cb7a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ca50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	f000 808f 	beq.w	800cb7a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a32      	ldr	r2, [pc, #200]	; (800cb2c <I2C_ITSlaveCplt+0x280>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d059      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a30      	ldr	r2, [pc, #192]	; (800cb30 <I2C_ITSlaveCplt+0x284>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d053      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a2e      	ldr	r2, [pc, #184]	; (800cb34 <I2C_ITSlaveCplt+0x288>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d04d      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a2c      	ldr	r2, [pc, #176]	; (800cb38 <I2C_ITSlaveCplt+0x28c>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d047      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a2a      	ldr	r2, [pc, #168]	; (800cb3c <I2C_ITSlaveCplt+0x290>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d041      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a28      	ldr	r2, [pc, #160]	; (800cb40 <I2C_ITSlaveCplt+0x294>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d03b      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a26      	ldr	r2, [pc, #152]	; (800cb44 <I2C_ITSlaveCplt+0x298>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d035      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a24      	ldr	r2, [pc, #144]	; (800cb48 <I2C_ITSlaveCplt+0x29c>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d02f      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a22      	ldr	r2, [pc, #136]	; (800cb4c <I2C_ITSlaveCplt+0x2a0>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d029      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a20      	ldr	r2, [pc, #128]	; (800cb50 <I2C_ITSlaveCplt+0x2a4>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d023      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a1e      	ldr	r2, [pc, #120]	; (800cb54 <I2C_ITSlaveCplt+0x2a8>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d01d      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4a1c      	ldr	r2, [pc, #112]	; (800cb58 <I2C_ITSlaveCplt+0x2ac>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d017      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a1a      	ldr	r2, [pc, #104]	; (800cb5c <I2C_ITSlaveCplt+0x2b0>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d011      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a18      	ldr	r2, [pc, #96]	; (800cb60 <I2C_ITSlaveCplt+0x2b4>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d00b      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a16      	ldr	r2, [pc, #88]	; (800cb64 <I2C_ITSlaveCplt+0x2b8>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d005      	beq.n	800cb1c <I2C_ITSlaveCplt+0x270>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a14      	ldr	r2, [pc, #80]	; (800cb68 <I2C_ITSlaveCplt+0x2bc>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d127      	bne.n	800cb6c <I2C_ITSlaveCplt+0x2c0>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	e026      	b.n	800cb76 <I2C_ITSlaveCplt+0x2ca>
 800cb28:	fe00e800 	.word	0xfe00e800
 800cb2c:	40020010 	.word	0x40020010
 800cb30:	40020028 	.word	0x40020028
 800cb34:	40020040 	.word	0x40020040
 800cb38:	40020058 	.word	0x40020058
 800cb3c:	40020070 	.word	0x40020070
 800cb40:	40020088 	.word	0x40020088
 800cb44:	400200a0 	.word	0x400200a0
 800cb48:	400200b8 	.word	0x400200b8
 800cb4c:	40020410 	.word	0x40020410
 800cb50:	40020428 	.word	0x40020428
 800cb54:	40020440 	.word	0x40020440
 800cb58:	40020458 	.word	0x40020458
 800cb5c:	40020470 	.word	0x40020470
 800cb60:	40020488 	.word	0x40020488
 800cb64:	400204a0 	.word	0x400204a0
 800cb68:	400204b8 	.word	0x400204b8
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	089b      	lsrs	r3, r3, #2
 800cb7e:	f003 0301 	and.w	r3, r3, #1
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d020      	beq.n	800cbc8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	f023 0304 	bic.w	r3, r3, #4
 800cb8c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb98:	b2d2      	uxtb	r2, r2
 800cb9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba0:	1c5a      	adds	r2, r3, #1
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00c      	beq.n	800cbc8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	3b01      	subs	r3, #1
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d005      	beq.n	800cbde <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbd6:	f043 0204 	orr.w	r2, r3, #4
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d010      	beq.n	800cc16 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 f8a4 	bl	800cd48 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	2b28      	cmp	r3, #40	; 0x28
 800cc0a:	d141      	bne.n	800cc90 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cc0c:	6979      	ldr	r1, [r7, #20]
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f844 	bl	800cc9c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cc14:	e03c      	b.n	800cc90 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cc1e:	d014      	beq.n	800cc4a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7ff fd1a 	bl	800c65a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	4a1b      	ldr	r2, [pc, #108]	; (800cc98 <I2C_ITSlaveCplt+0x3ec>)
 800cc2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2220      	movs	r2, #32
 800cc30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7fe fec1 	bl	800b9ca <HAL_I2C_ListenCpltCallback>
}
 800cc48:	e022      	b.n	800cc90 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	2b22      	cmp	r3, #34	; 0x22
 800cc54:	d10e      	bne.n	800cc74 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2220      	movs	r2, #32
 800cc5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7fe fe94 	bl	800b99a <HAL_I2C_SlaveRxCpltCallback>
}
 800cc72:	e00d      	b.n	800cc90 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2220      	movs	r2, #32
 800cc78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7fe fe7b 	bl	800b986 <HAL_I2C_SlaveTxCpltCallback>
}
 800cc90:	bf00      	nop
 800cc92:	3718      	adds	r7, #24
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	ffff0000 	.word	0xffff0000

0800cc9c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	4a26      	ldr	r2, [pc, #152]	; (800cd44 <I2C_ITListenCplt+0xa8>)
 800ccaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2220      	movs	r2, #32
 800ccb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	089b      	lsrs	r3, r3, #2
 800cccc:	f003 0301 	and.w	r3, r3, #1
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d022      	beq.n	800cd1a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccde:	b2d2      	uxtb	r2, r2
 800cce0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce6:	1c5a      	adds	r2, r3, #1
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d012      	beq.n	800cd1a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	3b01      	subs	r3, #1
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd12:	f043 0204 	orr.w	r2, r3, #4
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd1a:	f248 0103 	movw	r1, #32771	; 0x8003
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fb4e 	bl	800d3c0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2210      	movs	r2, #16
 800cd2a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f7fe fe48 	bl	800b9ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cd3a:	bf00      	nop
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	ffff0000 	.word	0xffff0000

0800cd48 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	4a5d      	ldr	r2, [pc, #372]	; (800cedc <I2C_ITError+0x194>)
 800cd66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	431a      	orrs	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cd7a:	7bfb      	ldrb	r3, [r7, #15]
 800cd7c:	2b28      	cmp	r3, #40	; 0x28
 800cd7e:	d005      	beq.n	800cd8c <I2C_ITError+0x44>
 800cd80:	7bfb      	ldrb	r3, [r7, #15]
 800cd82:	2b29      	cmp	r3, #41	; 0x29
 800cd84:	d002      	beq.n	800cd8c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
 800cd88:	2b2a      	cmp	r3, #42	; 0x2a
 800cd8a:	d10b      	bne.n	800cda4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd8c:	2103      	movs	r1, #3
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 fb16 	bl	800d3c0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2228      	movs	r2, #40	; 0x28
 800cd98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4a50      	ldr	r2, [pc, #320]	; (800cee0 <I2C_ITError+0x198>)
 800cda0:	635a      	str	r2, [r3, #52]	; 0x34
 800cda2:	e011      	b.n	800cdc8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cda4:	f248 0103 	movw	r1, #32771	; 0x8003
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 fb09 	bl	800d3c0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	2b60      	cmp	r3, #96	; 0x60
 800cdb8:	d003      	beq.n	800cdc2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2220      	movs	r2, #32
 800cdbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdcc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d039      	beq.n	800ce4a <I2C_ITError+0x102>
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2b11      	cmp	r3, #17
 800cdda:	d002      	beq.n	800cde2 <I2C_ITError+0x9a>
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	2b21      	cmp	r3, #33	; 0x21
 800cde0:	d133      	bne.n	800ce4a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdf0:	d107      	bne.n	800ce02 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ce00:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fd fffc 	bl	800ae04 <HAL_DMA_GetState>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d017      	beq.n	800ce42 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce16:	4a33      	ldr	r2, [pc, #204]	; (800cee4 <I2C_ITError+0x19c>)
 800ce18:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fc fe7c 	bl	8009b24 <HAL_DMA_Abort_IT>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d04d      	beq.n	800cece <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce40:	e045      	b.n	800cece <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 f850 	bl	800cee8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce48:	e041      	b.n	800cece <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d039      	beq.n	800cec6 <I2C_ITError+0x17e>
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	2b12      	cmp	r3, #18
 800ce56:	d002      	beq.n	800ce5e <I2C_ITError+0x116>
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	2b22      	cmp	r3, #34	; 0x22
 800ce5c:	d133      	bne.n	800cec6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce6c:	d107      	bne.n	800ce7e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ce7c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fd ffbe 	bl	800ae04 <HAL_DMA_GetState>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d017      	beq.n	800cebe <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce92:	4a14      	ldr	r2, [pc, #80]	; (800cee4 <I2C_ITError+0x19c>)
 800ce94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7fc fe3e 	bl	8009b24 <HAL_DMA_Abort_IT>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d011      	beq.n	800ced2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ceb8:	4610      	mov	r0, r2
 800ceba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cebc:	e009      	b.n	800ced2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 f812 	bl	800cee8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cec4:	e005      	b.n	800ced2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 f80e 	bl	800cee8 <I2C_TreatErrorCallback>
  }
}
 800cecc:	e002      	b.n	800ced4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cece:	bf00      	nop
 800ced0:	e000      	b.n	800ced4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ced2:	bf00      	nop
}
 800ced4:	bf00      	nop
 800ced6:	3710      	adds	r7, #16
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	ffff0000 	.word	0xffff0000
 800cee0:	0800bc7f 	.word	0x0800bc7f
 800cee4:	0800cf7f 	.word	0x0800cf7f

0800cee8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	2b60      	cmp	r3, #96	; 0x60
 800cefa:	d10e      	bne.n	800cf1a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2220      	movs	r2, #32
 800cf00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7fe fd81 	bl	800ba1a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cf18:	e009      	b.n	800cf2e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f7fe fd6c 	bl	800ba06 <HAL_I2C_ErrorCallback>
}
 800cf2e:	bf00      	nop
 800cf30:	3708      	adds	r7, #8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cf36:	b480      	push	{r7}
 800cf38:	b083      	sub	sp, #12
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	699b      	ldr	r3, [r3, #24]
 800cf44:	f003 0302 	and.w	r3, r3, #2
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	d103      	bne.n	800cf54 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2200      	movs	r2, #0
 800cf52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	f003 0301 	and.w	r3, r3, #1
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d007      	beq.n	800cf72 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	699a      	ldr	r2, [r3, #24]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f042 0201 	orr.w	r2, r2, #1
 800cf70:	619a      	str	r2, [r3, #24]
  }
}
 800cf72:	bf00      	nop
 800cf74:	370c      	adds	r7, #12
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr

0800cf7e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b084      	sub	sp, #16
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d003      	beq.n	800cf9c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf98:	2200      	movs	r2, #0
 800cf9a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d003      	beq.n	800cfac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	f7ff ff9b 	bl	800cee8 <I2C_TreatErrorCallback>
}
 800cfb2:	bf00      	nop
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b084      	sub	sp, #16
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	60f8      	str	r0, [r7, #12]
 800cfc2:	60b9      	str	r1, [r7, #8]
 800cfc4:	603b      	str	r3, [r7, #0]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cfca:	e022      	b.n	800d012 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd2:	d01e      	beq.n	800d012 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfd4:	f7f9 faa2 	bl	800651c <HAL_GetTick>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	683a      	ldr	r2, [r7, #0]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d302      	bcc.n	800cfea <I2C_WaitOnFlagUntilTimeout+0x30>
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d113      	bne.n	800d012 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfee:	f043 0220 	orr.w	r2, r3, #32
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2220      	movs	r2, #32
 800cffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2200      	movs	r2, #0
 800d00a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800d00e:	2301      	movs	r3, #1
 800d010:	e00f      	b.n	800d032 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	699a      	ldr	r2, [r3, #24]
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	4013      	ands	r3, r2
 800d01c:	68ba      	ldr	r2, [r7, #8]
 800d01e:	429a      	cmp	r2, r3
 800d020:	bf0c      	ite	eq
 800d022:	2301      	moveq	r3, #1
 800d024:	2300      	movne	r3, #0
 800d026:	b2db      	uxtb	r3, r3
 800d028:	461a      	mov	r2, r3
 800d02a:	79fb      	ldrb	r3, [r7, #7]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d0cd      	beq.n	800cfcc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3710      	adds	r7, #16
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b084      	sub	sp, #16
 800d03e:	af00      	add	r7, sp, #0
 800d040:	60f8      	str	r0, [r7, #12]
 800d042:	60b9      	str	r1, [r7, #8]
 800d044:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d046:	e02c      	b.n	800d0a2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	68b9      	ldr	r1, [r7, #8]
 800d04c:	68f8      	ldr	r0, [r7, #12]
 800d04e:	f000 f835 	bl	800d0bc <I2C_IsErrorOccurred>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d001      	beq.n	800d05c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d058:	2301      	movs	r3, #1
 800d05a:	e02a      	b.n	800d0b2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d062:	d01e      	beq.n	800d0a2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d064:	f7f9 fa5a 	bl	800651c <HAL_GetTick>
 800d068:	4602      	mov	r2, r0
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	1ad3      	subs	r3, r2, r3
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	429a      	cmp	r2, r3
 800d072:	d302      	bcc.n	800d07a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d113      	bne.n	800d0a2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d07e:	f043 0220 	orr.w	r2, r3, #32
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2220      	movs	r2, #32
 800d08a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2200      	movs	r2, #0
 800d092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2200      	movs	r2, #0
 800d09a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e007      	b.n	800d0b2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	699b      	ldr	r3, [r3, #24]
 800d0a8:	f003 0302 	and.w	r3, r3, #2
 800d0ac:	2b02      	cmp	r3, #2
 800d0ae:	d1cb      	bne.n	800d048 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d0b0:	2300      	movs	r3, #0
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
	...

0800d0bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b08a      	sub	sp, #40	; 0x28
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	699b      	ldr	r3, [r3, #24]
 800d0d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	f003 0310 	and.w	r3, r3, #16
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d075      	beq.n	800d1d4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2210      	movs	r2, #16
 800d0ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d0f0:	e056      	b.n	800d1a0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0f8:	d052      	beq.n	800d1a0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d0fa:	f7f9 fa0f 	bl	800651c <HAL_GetTick>
 800d0fe:	4602      	mov	r2, r0
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	1ad3      	subs	r3, r2, r3
 800d104:	68ba      	ldr	r2, [r7, #8]
 800d106:	429a      	cmp	r2, r3
 800d108:	d302      	bcc.n	800d110 <I2C_IsErrorOccurred+0x54>
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d147      	bne.n	800d1a0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d11a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d122:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	699b      	ldr	r3, [r3, #24]
 800d12a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d12e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d132:	d12e      	bne.n	800d192 <I2C_IsErrorOccurred+0xd6>
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d13a:	d02a      	beq.n	800d192 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800d13c:	7cfb      	ldrb	r3, [r7, #19]
 800d13e:	2b20      	cmp	r3, #32
 800d140:	d027      	beq.n	800d192 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	685a      	ldr	r2, [r3, #4]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d150:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d152:	f7f9 f9e3 	bl	800651c <HAL_GetTick>
 800d156:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d158:	e01b      	b.n	800d192 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d15a:	f7f9 f9df 	bl	800651c <HAL_GetTick>
 800d15e:	4602      	mov	r2, r0
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	2b19      	cmp	r3, #25
 800d166:	d914      	bls.n	800d192 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d16c:	f043 0220 	orr.w	r2, r3, #32
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2220      	movs	r2, #32
 800d178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2200      	movs	r2, #0
 800d180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2200      	movs	r2, #0
 800d188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800d18c:	2301      	movs	r3, #1
 800d18e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	699b      	ldr	r3, [r3, #24]
 800d198:	f003 0320 	and.w	r3, r3, #32
 800d19c:	2b20      	cmp	r3, #32
 800d19e:	d1dc      	bne.n	800d15a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	699b      	ldr	r3, [r3, #24]
 800d1a6:	f003 0320 	and.w	r3, r3, #32
 800d1aa:	2b20      	cmp	r3, #32
 800d1ac:	d003      	beq.n	800d1b6 <I2C_IsErrorOccurred+0xfa>
 800d1ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d09d      	beq.n	800d0f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d1b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d103      	bne.n	800d1c6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2220      	movs	r2, #32
 800d1c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d1c6:	6a3b      	ldr	r3, [r7, #32]
 800d1c8:	f043 0304 	orr.w	r3, r3, #4
 800d1cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00b      	beq.n	800d1fe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d1e6:	6a3b      	ldr	r3, [r7, #32]
 800d1e8:	f043 0301 	orr.w	r3, r3, #1
 800d1ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00b      	beq.n	800d220 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d208:	6a3b      	ldr	r3, [r7, #32]
 800d20a:	f043 0308 	orr.w	r3, r3, #8
 800d20e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d218:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d21a:	2301      	movs	r3, #1
 800d21c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d226:	2b00      	cmp	r3, #0
 800d228:	d00b      	beq.n	800d242 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d22a:	6a3b      	ldr	r3, [r7, #32]
 800d22c:	f043 0302 	orr.w	r3, r3, #2
 800d230:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d23a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d23c:	2301      	movs	r3, #1
 800d23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800d242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d246:	2b00      	cmp	r3, #0
 800d248:	d01c      	beq.n	800d284 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f7ff fe73 	bl	800cf36 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	6859      	ldr	r1, [r3, #4]
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	4b0d      	ldr	r3, [pc, #52]	; (800d290 <I2C_IsErrorOccurred+0x1d4>)
 800d25c:	400b      	ands	r3, r1
 800d25e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	431a      	orrs	r2, r3
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2220      	movs	r2, #32
 800d270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2200      	movs	r2, #0
 800d278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2200      	movs	r2, #0
 800d280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800d284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3728      	adds	r7, #40	; 0x28
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	fe00e800 	.word	0xfe00e800

0800d294 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d294:	b480      	push	{r7}
 800d296:	b087      	sub	sp, #28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	607b      	str	r3, [r7, #4]
 800d29e:	460b      	mov	r3, r1
 800d2a0:	817b      	strh	r3, [r7, #10]
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d2a6:	897b      	ldrh	r3, [r7, #10]
 800d2a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d2ac:	7a7b      	ldrb	r3, [r7, #9]
 800d2ae:	041b      	lsls	r3, r3, #16
 800d2b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d2b4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d2ba:	6a3b      	ldr	r3, [r7, #32]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2c2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	685a      	ldr	r2, [r3, #4]
 800d2ca:	6a3b      	ldr	r3, [r7, #32]
 800d2cc:	0d5b      	lsrs	r3, r3, #21
 800d2ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d2d2:	4b08      	ldr	r3, [pc, #32]	; (800d2f4 <I2C_TransferConfig+0x60>)
 800d2d4:	430b      	orrs	r3, r1
 800d2d6:	43db      	mvns	r3, r3
 800d2d8:	ea02 0103 	and.w	r1, r2, r3
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	697a      	ldr	r2, [r7, #20]
 800d2e2:	430a      	orrs	r2, r1
 800d2e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d2e6:	bf00      	nop
 800d2e8:	371c      	adds	r7, #28
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
 800d2f2:	bf00      	nop
 800d2f4:	03ff63ff 	.word	0x03ff63ff

0800d2f8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	460b      	mov	r3, r1
 800d302:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d304:	2300      	movs	r3, #0
 800d306:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d30c:	4a2a      	ldr	r2, [pc, #168]	; (800d3b8 <I2C_Enable_IRQ+0xc0>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d004      	beq.n	800d31c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800d316:	4a29      	ldr	r2, [pc, #164]	; (800d3bc <I2C_Enable_IRQ+0xc4>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d11d      	bne.n	800d358 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d31c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d320:	2b00      	cmp	r3, #0
 800d322:	da03      	bge.n	800d32c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d32a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d32c:	887b      	ldrh	r3, [r7, #2]
 800d32e:	2b10      	cmp	r3, #16
 800d330:	d103      	bne.n	800d33a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d338:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d33a:	887b      	ldrh	r3, [r7, #2]
 800d33c:	2b20      	cmp	r3, #32
 800d33e:	d103      	bne.n	800d348 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d346:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d348:	887b      	ldrh	r3, [r7, #2]
 800d34a:	2b40      	cmp	r3, #64	; 0x40
 800d34c:	d125      	bne.n	800d39a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d354:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d356:	e020      	b.n	800d39a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d358:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	da03      	bge.n	800d368 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d366:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d368:	887b      	ldrh	r3, [r7, #2]
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d003      	beq.n	800d37a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d378:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d37a:	887b      	ldrh	r3, [r7, #2]
 800d37c:	f003 0302 	and.w	r3, r3, #2
 800d380:	2b00      	cmp	r3, #0
 800d382:	d003      	beq.n	800d38c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d38a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d38c:	887b      	ldrh	r3, [r7, #2]
 800d38e:	2b20      	cmp	r3, #32
 800d390:	d103      	bne.n	800d39a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f043 0320 	orr.w	r3, r3, #32
 800d398:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	6819      	ldr	r1, [r3, #0]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	430a      	orrs	r2, r1
 800d3a8:	601a      	str	r2, [r3, #0]
}
 800d3aa:	bf00      	nop
 800d3ac:	3714      	adds	r7, #20
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop
 800d3b8:	0800be85 	.word	0x0800be85
 800d3bc:	0800c06d 	.word	0x0800c06d

0800d3c0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d3d0:	887b      	ldrh	r3, [r7, #2]
 800d3d2:	f003 0301 	and.w	r3, r3, #1
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00f      	beq.n	800d3fa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d3e0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d3ee:	2b28      	cmp	r3, #40	; 0x28
 800d3f0:	d003      	beq.n	800d3fa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d3f8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d3fa:	887b      	ldrh	r3, [r7, #2]
 800d3fc:	f003 0302 	and.w	r3, r3, #2
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00f      	beq.n	800d424 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d40a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d412:	b2db      	uxtb	r3, r3
 800d414:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d418:	2b28      	cmp	r3, #40	; 0x28
 800d41a:	d003      	beq.n	800d424 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d422:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d424:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	da03      	bge.n	800d434 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d432:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d434:	887b      	ldrh	r3, [r7, #2]
 800d436:	2b10      	cmp	r3, #16
 800d438:	d103      	bne.n	800d442 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d440:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d442:	887b      	ldrh	r3, [r7, #2]
 800d444:	2b20      	cmp	r3, #32
 800d446:	d103      	bne.n	800d450 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f043 0320 	orr.w	r3, r3, #32
 800d44e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d450:	887b      	ldrh	r3, [r7, #2]
 800d452:	2b40      	cmp	r3, #64	; 0x40
 800d454:	d103      	bne.n	800d45e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d45c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	6819      	ldr	r1, [r3, #0]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	43da      	mvns	r2, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	400a      	ands	r2, r1
 800d46e:	601a      	str	r2, [r3, #0]
}
 800d470:	bf00      	nop
 800d472:	3714      	adds	r7, #20
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	2b20      	cmp	r3, #32
 800d490:	d138      	bne.n	800d504 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d101      	bne.n	800d4a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d49c:	2302      	movs	r3, #2
 800d49e:	e032      	b.n	800d506 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2224      	movs	r2, #36	; 0x24
 800d4ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	681a      	ldr	r2, [r3, #0]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f022 0201 	bic.w	r2, r2, #1
 800d4be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d4ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	6819      	ldr	r1, [r3, #0]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	683a      	ldr	r2, [r7, #0]
 800d4dc:	430a      	orrs	r2, r1
 800d4de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f042 0201 	orr.w	r2, r2, #1
 800d4ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2220      	movs	r2, #32
 800d4f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	e000      	b.n	800d506 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d504:	2302      	movs	r3, #2
  }
}
 800d506:	4618      	mov	r0, r3
 800d508:	370c      	adds	r7, #12
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr

0800d512 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d512:	b480      	push	{r7}
 800d514:	b085      	sub	sp, #20
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
 800d51a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d522:	b2db      	uxtb	r3, r3
 800d524:	2b20      	cmp	r3, #32
 800d526:	d139      	bne.n	800d59c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d101      	bne.n	800d536 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d532:	2302      	movs	r3, #2
 800d534:	e033      	b.n	800d59e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2201      	movs	r2, #1
 800d53a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2224      	movs	r2, #36	; 0x24
 800d542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f022 0201 	bic.w	r2, r2, #1
 800d554:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d564:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	021b      	lsls	r3, r3, #8
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	4313      	orrs	r3, r2
 800d56e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	68fa      	ldr	r2, [r7, #12]
 800d576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f042 0201 	orr.w	r2, r2, #1
 800d586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2220      	movs	r2, #32
 800d58c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d598:	2300      	movs	r3, #0
 800d59a:	e000      	b.n	800d59e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d59c:	2302      	movs	r3, #2
  }
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3714      	adds	r7, #20
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr
	...

0800d5ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d5b4:	4b19      	ldr	r3, [pc, #100]	; (800d61c <HAL_PWREx_ConfigSupply+0x70>)
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	f003 0304 	and.w	r3, r3, #4
 800d5bc:	2b04      	cmp	r3, #4
 800d5be:	d00a      	beq.n	800d5d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d5c0:	4b16      	ldr	r3, [pc, #88]	; (800d61c <HAL_PWREx_ConfigSupply+0x70>)
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	f003 0307 	and.w	r3, r3, #7
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d001      	beq.n	800d5d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e01f      	b.n	800d612 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	e01d      	b.n	800d612 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d5d6:	4b11      	ldr	r3, [pc, #68]	; (800d61c <HAL_PWREx_ConfigSupply+0x70>)
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	f023 0207 	bic.w	r2, r3, #7
 800d5de:	490f      	ldr	r1, [pc, #60]	; (800d61c <HAL_PWREx_ConfigSupply+0x70>)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d5e6:	f7f8 ff99 	bl	800651c <HAL_GetTick>
 800d5ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d5ec:	e009      	b.n	800d602 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d5ee:	f7f8 ff95 	bl	800651c <HAL_GetTick>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	1ad3      	subs	r3, r2, r3
 800d5f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5fc:	d901      	bls.n	800d602 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d5fe:	2301      	movs	r3, #1
 800d600:	e007      	b.n	800d612 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d602:	4b06      	ldr	r3, [pc, #24]	; (800d61c <HAL_PWREx_ConfigSupply+0x70>)
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d60a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d60e:	d1ee      	bne.n	800d5ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	58024800 	.word	0x58024800

0800d620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b08c      	sub	sp, #48	; 0x30
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d101      	bne.n	800d632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d62e:	2301      	movs	r3, #1
 800d630:	e39d      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f003 0301 	and.w	r3, r3, #1
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f000 8087 	beq.w	800d74e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d640:	4b88      	ldr	r3, [pc, #544]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d642:	691b      	ldr	r3, [r3, #16]
 800d644:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d648:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d64a:	4b86      	ldr	r3, [pc, #536]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d64e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d652:	2b10      	cmp	r3, #16
 800d654:	d007      	beq.n	800d666 <HAL_RCC_OscConfig+0x46>
 800d656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d658:	2b18      	cmp	r3, #24
 800d65a:	d110      	bne.n	800d67e <HAL_RCC_OscConfig+0x5e>
 800d65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65e:	f003 0303 	and.w	r3, r3, #3
 800d662:	2b02      	cmp	r3, #2
 800d664:	d10b      	bne.n	800d67e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d666:	4b7f      	ldr	r3, [pc, #508]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d06c      	beq.n	800d74c <HAL_RCC_OscConfig+0x12c>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d168      	bne.n	800d74c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800d67a:	2301      	movs	r3, #1
 800d67c:	e377      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d686:	d106      	bne.n	800d696 <HAL_RCC_OscConfig+0x76>
 800d688:	4b76      	ldr	r3, [pc, #472]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a75      	ldr	r2, [pc, #468]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d68e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d692:	6013      	str	r3, [r2, #0]
 800d694:	e02e      	b.n	800d6f4 <HAL_RCC_OscConfig+0xd4>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d10c      	bne.n	800d6b8 <HAL_RCC_OscConfig+0x98>
 800d69e:	4b71      	ldr	r3, [pc, #452]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4a70      	ldr	r2, [pc, #448]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d6a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6a8:	6013      	str	r3, [r2, #0]
 800d6aa:	4b6e      	ldr	r3, [pc, #440]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a6d      	ldr	r2, [pc, #436]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d6b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d6b4:	6013      	str	r3, [r2, #0]
 800d6b6:	e01d      	b.n	800d6f4 <HAL_RCC_OscConfig+0xd4>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d6c0:	d10c      	bne.n	800d6dc <HAL_RCC_OscConfig+0xbc>
 800d6c2:	4b68      	ldr	r3, [pc, #416]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	4a67      	ldr	r2, [pc, #412]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d6c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d6cc:	6013      	str	r3, [r2, #0]
 800d6ce:	4b65      	ldr	r3, [pc, #404]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a64      	ldr	r2, [pc, #400]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d6d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6d8:	6013      	str	r3, [r2, #0]
 800d6da:	e00b      	b.n	800d6f4 <HAL_RCC_OscConfig+0xd4>
 800d6dc:	4b61      	ldr	r3, [pc, #388]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a60      	ldr	r2, [pc, #384]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d6e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6e6:	6013      	str	r3, [r2, #0]
 800d6e8:	4b5e      	ldr	r3, [pc, #376]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a5d      	ldr	r2, [pc, #372]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d6ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d6f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d013      	beq.n	800d724 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6fc:	f7f8 ff0e 	bl	800651c <HAL_GetTick>
 800d700:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d702:	e008      	b.n	800d716 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d704:	f7f8 ff0a 	bl	800651c <HAL_GetTick>
 800d708:	4602      	mov	r2, r0
 800d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70c:	1ad3      	subs	r3, r2, r3
 800d70e:	2b64      	cmp	r3, #100	; 0x64
 800d710:	d901      	bls.n	800d716 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800d712:	2303      	movs	r3, #3
 800d714:	e32b      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d716:	4b53      	ldr	r3, [pc, #332]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d0f0      	beq.n	800d704 <HAL_RCC_OscConfig+0xe4>
 800d722:	e014      	b.n	800d74e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d724:	f7f8 fefa 	bl	800651c <HAL_GetTick>
 800d728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d72a:	e008      	b.n	800d73e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d72c:	f7f8 fef6 	bl	800651c <HAL_GetTick>
 800d730:	4602      	mov	r2, r0
 800d732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d734:	1ad3      	subs	r3, r2, r3
 800d736:	2b64      	cmp	r3, #100	; 0x64
 800d738:	d901      	bls.n	800d73e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800d73a:	2303      	movs	r3, #3
 800d73c:	e317      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d73e:	4b49      	ldr	r3, [pc, #292]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1f0      	bne.n	800d72c <HAL_RCC_OscConfig+0x10c>
 800d74a:	e000      	b.n	800d74e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d74c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f003 0302 	and.w	r3, r3, #2
 800d756:	2b00      	cmp	r3, #0
 800d758:	f000 808c 	beq.w	800d874 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d75c:	4b41      	ldr	r3, [pc, #260]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d75e:	691b      	ldr	r3, [r3, #16]
 800d760:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d764:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d766:	4b3f      	ldr	r3, [pc, #252]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d76a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d76c:	6a3b      	ldr	r3, [r7, #32]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d007      	beq.n	800d782 <HAL_RCC_OscConfig+0x162>
 800d772:	6a3b      	ldr	r3, [r7, #32]
 800d774:	2b18      	cmp	r3, #24
 800d776:	d137      	bne.n	800d7e8 <HAL_RCC_OscConfig+0x1c8>
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	f003 0303 	and.w	r3, r3, #3
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d132      	bne.n	800d7e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d782:	4b38      	ldr	r3, [pc, #224]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f003 0304 	and.w	r3, r3, #4
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d005      	beq.n	800d79a <HAL_RCC_OscConfig+0x17a>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d101      	bne.n	800d79a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d796:	2301      	movs	r3, #1
 800d798:	e2e9      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d79a:	4b32      	ldr	r3, [pc, #200]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f023 0219 	bic.w	r2, r3, #25
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	492f      	ldr	r1, [pc, #188]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d7ac:	f7f8 feb6 	bl	800651c <HAL_GetTick>
 800d7b0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d7b2:	e008      	b.n	800d7c6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d7b4:	f7f8 feb2 	bl	800651c <HAL_GetTick>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7bc:	1ad3      	subs	r3, r2, r3
 800d7be:	2b02      	cmp	r3, #2
 800d7c0:	d901      	bls.n	800d7c6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800d7c2:	2303      	movs	r3, #3
 800d7c4:	e2d3      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d7c6:	4b27      	ldr	r3, [pc, #156]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f003 0304 	and.w	r3, r3, #4
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d0f0      	beq.n	800d7b4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7d2:	4b24      	ldr	r3, [pc, #144]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	691b      	ldr	r3, [r3, #16]
 800d7de:	061b      	lsls	r3, r3, #24
 800d7e0:	4920      	ldr	r1, [pc, #128]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d7e6:	e045      	b.n	800d874 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d026      	beq.n	800d83e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d7f0:	4b1c      	ldr	r3, [pc, #112]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f023 0219 	bic.w	r2, r3, #25
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	4919      	ldr	r1, [pc, #100]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d7fe:	4313      	orrs	r3, r2
 800d800:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d802:	f7f8 fe8b 	bl	800651c <HAL_GetTick>
 800d806:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d808:	e008      	b.n	800d81c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d80a:	f7f8 fe87 	bl	800651c <HAL_GetTick>
 800d80e:	4602      	mov	r2, r0
 800d810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	2b02      	cmp	r3, #2
 800d816:	d901      	bls.n	800d81c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800d818:	2303      	movs	r3, #3
 800d81a:	e2a8      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d81c:	4b11      	ldr	r3, [pc, #68]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f003 0304 	and.w	r3, r3, #4
 800d824:	2b00      	cmp	r3, #0
 800d826:	d0f0      	beq.n	800d80a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d828:	4b0e      	ldr	r3, [pc, #56]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	691b      	ldr	r3, [r3, #16]
 800d834:	061b      	lsls	r3, r3, #24
 800d836:	490b      	ldr	r1, [pc, #44]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d838:	4313      	orrs	r3, r2
 800d83a:	604b      	str	r3, [r1, #4]
 800d83c:	e01a      	b.n	800d874 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d83e:	4b09      	ldr	r3, [pc, #36]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4a08      	ldr	r2, [pc, #32]	; (800d864 <HAL_RCC_OscConfig+0x244>)
 800d844:	f023 0301 	bic.w	r3, r3, #1
 800d848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d84a:	f7f8 fe67 	bl	800651c <HAL_GetTick>
 800d84e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d850:	e00a      	b.n	800d868 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d852:	f7f8 fe63 	bl	800651c <HAL_GetTick>
 800d856:	4602      	mov	r2, r0
 800d858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85a:	1ad3      	subs	r3, r2, r3
 800d85c:	2b02      	cmp	r3, #2
 800d85e:	d903      	bls.n	800d868 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d860:	2303      	movs	r3, #3
 800d862:	e284      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
 800d864:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d868:	4b96      	ldr	r3, [pc, #600]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f003 0304 	and.w	r3, r3, #4
 800d870:	2b00      	cmp	r3, #0
 800d872:	d1ee      	bne.n	800d852 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f003 0310 	and.w	r3, r3, #16
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d06a      	beq.n	800d956 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d880:	4b90      	ldr	r3, [pc, #576]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d882:	691b      	ldr	r3, [r3, #16]
 800d884:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d888:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d88a:	4b8e      	ldr	r3, [pc, #568]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d88e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d890:	69bb      	ldr	r3, [r7, #24]
 800d892:	2b08      	cmp	r3, #8
 800d894:	d007      	beq.n	800d8a6 <HAL_RCC_OscConfig+0x286>
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	2b18      	cmp	r3, #24
 800d89a:	d11b      	bne.n	800d8d4 <HAL_RCC_OscConfig+0x2b4>
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	f003 0303 	and.w	r3, r3, #3
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d116      	bne.n	800d8d4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d8a6:	4b87      	ldr	r3, [pc, #540]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d005      	beq.n	800d8be <HAL_RCC_OscConfig+0x29e>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	69db      	ldr	r3, [r3, #28]
 800d8b6:	2b80      	cmp	r3, #128	; 0x80
 800d8b8:	d001      	beq.n	800d8be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e257      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d8be:	4b81      	ldr	r3, [pc, #516]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6a1b      	ldr	r3, [r3, #32]
 800d8ca:	061b      	lsls	r3, r3, #24
 800d8cc:	497d      	ldr	r1, [pc, #500]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d8d2:	e040      	b.n	800d956 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	69db      	ldr	r3, [r3, #28]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d023      	beq.n	800d924 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d8dc:	4b79      	ldr	r3, [pc, #484]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a78      	ldr	r2, [pc, #480]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d8e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8e8:	f7f8 fe18 	bl	800651c <HAL_GetTick>
 800d8ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d8ee:	e008      	b.n	800d902 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d8f0:	f7f8 fe14 	bl	800651c <HAL_GetTick>
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f8:	1ad3      	subs	r3, r2, r3
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d901      	bls.n	800d902 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d8fe:	2303      	movs	r3, #3
 800d900:	e235      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d902:	4b70      	ldr	r3, [pc, #448]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d0f0      	beq.n	800d8f0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d90e:	4b6d      	ldr	r3, [pc, #436]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6a1b      	ldr	r3, [r3, #32]
 800d91a:	061b      	lsls	r3, r3, #24
 800d91c:	4969      	ldr	r1, [pc, #420]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d91e:	4313      	orrs	r3, r2
 800d920:	60cb      	str	r3, [r1, #12]
 800d922:	e018      	b.n	800d956 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d924:	4b67      	ldr	r3, [pc, #412]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4a66      	ldr	r2, [pc, #408]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d92a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d92e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d930:	f7f8 fdf4 	bl	800651c <HAL_GetTick>
 800d934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d936:	e008      	b.n	800d94a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d938:	f7f8 fdf0 	bl	800651c <HAL_GetTick>
 800d93c:	4602      	mov	r2, r0
 800d93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	2b02      	cmp	r3, #2
 800d944:	d901      	bls.n	800d94a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800d946:	2303      	movs	r3, #3
 800d948:	e211      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d94a:	4b5e      	ldr	r3, [pc, #376]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d952:	2b00      	cmp	r3, #0
 800d954:	d1f0      	bne.n	800d938 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f003 0308 	and.w	r3, r3, #8
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d036      	beq.n	800d9d0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	695b      	ldr	r3, [r3, #20]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d019      	beq.n	800d99e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d96a:	4b56      	ldr	r3, [pc, #344]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d96c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d96e:	4a55      	ldr	r2, [pc, #340]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d970:	f043 0301 	orr.w	r3, r3, #1
 800d974:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d976:	f7f8 fdd1 	bl	800651c <HAL_GetTick>
 800d97a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d97c:	e008      	b.n	800d990 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d97e:	f7f8 fdcd 	bl	800651c <HAL_GetTick>
 800d982:	4602      	mov	r2, r0
 800d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d986:	1ad3      	subs	r3, r2, r3
 800d988:	2b02      	cmp	r3, #2
 800d98a:	d901      	bls.n	800d990 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800d98c:	2303      	movs	r3, #3
 800d98e:	e1ee      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d990:	4b4c      	ldr	r3, [pc, #304]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d994:	f003 0302 	and.w	r3, r3, #2
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d0f0      	beq.n	800d97e <HAL_RCC_OscConfig+0x35e>
 800d99c:	e018      	b.n	800d9d0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d99e:	4b49      	ldr	r3, [pc, #292]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d9a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9a2:	4a48      	ldr	r2, [pc, #288]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d9a4:	f023 0301 	bic.w	r3, r3, #1
 800d9a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9aa:	f7f8 fdb7 	bl	800651c <HAL_GetTick>
 800d9ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d9b0:	e008      	b.n	800d9c4 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d9b2:	f7f8 fdb3 	bl	800651c <HAL_GetTick>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ba:	1ad3      	subs	r3, r2, r3
 800d9bc:	2b02      	cmp	r3, #2
 800d9be:	d901      	bls.n	800d9c4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800d9c0:	2303      	movs	r3, #3
 800d9c2:	e1d4      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d9c4:	4b3f      	ldr	r3, [pc, #252]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d9c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9c8:	f003 0302 	and.w	r3, r3, #2
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d1f0      	bne.n	800d9b2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f003 0320 	and.w	r3, r3, #32
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d036      	beq.n	800da4a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	699b      	ldr	r3, [r3, #24]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d019      	beq.n	800da18 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d9e4:	4b37      	ldr	r3, [pc, #220]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a36      	ldr	r2, [pc, #216]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800d9ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d9ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d9f0:	f7f8 fd94 	bl	800651c <HAL_GetTick>
 800d9f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d9f6:	e008      	b.n	800da0a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d9f8:	f7f8 fd90 	bl	800651c <HAL_GetTick>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	2b02      	cmp	r3, #2
 800da04:	d901      	bls.n	800da0a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800da06:	2303      	movs	r3, #3
 800da08:	e1b1      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800da0a:	4b2e      	ldr	r3, [pc, #184]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da12:	2b00      	cmp	r3, #0
 800da14:	d0f0      	beq.n	800d9f8 <HAL_RCC_OscConfig+0x3d8>
 800da16:	e018      	b.n	800da4a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800da18:	4b2a      	ldr	r3, [pc, #168]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a29      	ldr	r2, [pc, #164]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800da1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800da24:	f7f8 fd7a 	bl	800651c <HAL_GetTick>
 800da28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800da2a:	e008      	b.n	800da3e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800da2c:	f7f8 fd76 	bl	800651c <HAL_GetTick>
 800da30:	4602      	mov	r2, r0
 800da32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da34:	1ad3      	subs	r3, r2, r3
 800da36:	2b02      	cmp	r3, #2
 800da38:	d901      	bls.n	800da3e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800da3a:	2303      	movs	r3, #3
 800da3c:	e197      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800da3e:	4b21      	ldr	r3, [pc, #132]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1f0      	bne.n	800da2c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f003 0304 	and.w	r3, r3, #4
 800da52:	2b00      	cmp	r3, #0
 800da54:	f000 8086 	beq.w	800db64 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800da58:	4b1b      	ldr	r3, [pc, #108]	; (800dac8 <HAL_RCC_OscConfig+0x4a8>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a1a      	ldr	r2, [pc, #104]	; (800dac8 <HAL_RCC_OscConfig+0x4a8>)
 800da5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800da64:	f7f8 fd5a 	bl	800651c <HAL_GetTick>
 800da68:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800da6a:	e008      	b.n	800da7e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800da6c:	f7f8 fd56 	bl	800651c <HAL_GetTick>
 800da70:	4602      	mov	r2, r0
 800da72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da74:	1ad3      	subs	r3, r2, r3
 800da76:	2b64      	cmp	r3, #100	; 0x64
 800da78:	d901      	bls.n	800da7e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800da7a:	2303      	movs	r3, #3
 800da7c:	e177      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800da7e:	4b12      	ldr	r3, [pc, #72]	; (800dac8 <HAL_RCC_OscConfig+0x4a8>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da86:	2b00      	cmp	r3, #0
 800da88:	d0f0      	beq.n	800da6c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d106      	bne.n	800daa0 <HAL_RCC_OscConfig+0x480>
 800da92:	4b0c      	ldr	r3, [pc, #48]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800da94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da96:	4a0b      	ldr	r2, [pc, #44]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800da98:	f043 0301 	orr.w	r3, r3, #1
 800da9c:	6713      	str	r3, [r2, #112]	; 0x70
 800da9e:	e032      	b.n	800db06 <HAL_RCC_OscConfig+0x4e6>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d111      	bne.n	800dacc <HAL_RCC_OscConfig+0x4ac>
 800daa8:	4b06      	ldr	r3, [pc, #24]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800daaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daac:	4a05      	ldr	r2, [pc, #20]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800daae:	f023 0301 	bic.w	r3, r3, #1
 800dab2:	6713      	str	r3, [r2, #112]	; 0x70
 800dab4:	4b03      	ldr	r3, [pc, #12]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800dab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dab8:	4a02      	ldr	r2, [pc, #8]	; (800dac4 <HAL_RCC_OscConfig+0x4a4>)
 800daba:	f023 0304 	bic.w	r3, r3, #4
 800dabe:	6713      	str	r3, [r2, #112]	; 0x70
 800dac0:	e021      	b.n	800db06 <HAL_RCC_OscConfig+0x4e6>
 800dac2:	bf00      	nop
 800dac4:	58024400 	.word	0x58024400
 800dac8:	58024800 	.word	0x58024800
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	2b05      	cmp	r3, #5
 800dad2:	d10c      	bne.n	800daee <HAL_RCC_OscConfig+0x4ce>
 800dad4:	4b83      	ldr	r3, [pc, #524]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dad8:	4a82      	ldr	r2, [pc, #520]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dada:	f043 0304 	orr.w	r3, r3, #4
 800dade:	6713      	str	r3, [r2, #112]	; 0x70
 800dae0:	4b80      	ldr	r3, [pc, #512]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dae4:	4a7f      	ldr	r2, [pc, #508]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dae6:	f043 0301 	orr.w	r3, r3, #1
 800daea:	6713      	str	r3, [r2, #112]	; 0x70
 800daec:	e00b      	b.n	800db06 <HAL_RCC_OscConfig+0x4e6>
 800daee:	4b7d      	ldr	r3, [pc, #500]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800daf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daf2:	4a7c      	ldr	r2, [pc, #496]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800daf4:	f023 0301 	bic.w	r3, r3, #1
 800daf8:	6713      	str	r3, [r2, #112]	; 0x70
 800dafa:	4b7a      	ldr	r3, [pc, #488]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dafe:	4a79      	ldr	r2, [pc, #484]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800db00:	f023 0304 	bic.w	r3, r3, #4
 800db04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d015      	beq.n	800db3a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db0e:	f7f8 fd05 	bl	800651c <HAL_GetTick>
 800db12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800db14:	e00a      	b.n	800db2c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800db16:	f7f8 fd01 	bl	800651c <HAL_GetTick>
 800db1a:	4602      	mov	r2, r0
 800db1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1e:	1ad3      	subs	r3, r2, r3
 800db20:	f241 3288 	movw	r2, #5000	; 0x1388
 800db24:	4293      	cmp	r3, r2
 800db26:	d901      	bls.n	800db2c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800db28:	2303      	movs	r3, #3
 800db2a:	e120      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800db2c:	4b6d      	ldr	r3, [pc, #436]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800db2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db30:	f003 0302 	and.w	r3, r3, #2
 800db34:	2b00      	cmp	r3, #0
 800db36:	d0ee      	beq.n	800db16 <HAL_RCC_OscConfig+0x4f6>
 800db38:	e014      	b.n	800db64 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db3a:	f7f8 fcef 	bl	800651c <HAL_GetTick>
 800db3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800db40:	e00a      	b.n	800db58 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800db42:	f7f8 fceb 	bl	800651c <HAL_GetTick>
 800db46:	4602      	mov	r2, r0
 800db48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800db50:	4293      	cmp	r3, r2
 800db52:	d901      	bls.n	800db58 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800db54:	2303      	movs	r3, #3
 800db56:	e10a      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800db58:	4b62      	ldr	r3, [pc, #392]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800db5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db5c:	f003 0302 	and.w	r3, r3, #2
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1ee      	bne.n	800db42 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f000 80ff 	beq.w	800dd6c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800db6e:	4b5d      	ldr	r3, [pc, #372]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db76:	2b18      	cmp	r3, #24
 800db78:	f000 80ba 	beq.w	800dcf0 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db80:	2b02      	cmp	r3, #2
 800db82:	f040 8095 	bne.w	800dcb0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db86:	4b57      	ldr	r3, [pc, #348]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a56      	ldr	r2, [pc, #344]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800db8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db92:	f7f8 fcc3 	bl	800651c <HAL_GetTick>
 800db96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800db98:	e008      	b.n	800dbac <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800db9a:	f7f8 fcbf 	bl	800651c <HAL_GetTick>
 800db9e:	4602      	mov	r2, r0
 800dba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba2:	1ad3      	subs	r3, r2, r3
 800dba4:	2b02      	cmp	r3, #2
 800dba6:	d901      	bls.n	800dbac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	e0e0      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dbac:	4b4d      	ldr	r3, [pc, #308]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d1f0      	bne.n	800db9a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dbb8:	4b4a      	ldr	r3, [pc, #296]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dbba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbbc:	4b4a      	ldr	r3, [pc, #296]	; (800dce8 <HAL_RCC_OscConfig+0x6c8>)
 800dbbe:	4013      	ands	r3, r2
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800dbc8:	0112      	lsls	r2, r2, #4
 800dbca:	430a      	orrs	r2, r1
 800dbcc:	4945      	ldr	r1, [pc, #276]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	628b      	str	r3, [r1, #40]	; 0x28
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbd6:	3b01      	subs	r3, #1
 800dbd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbe0:	3b01      	subs	r3, #1
 800dbe2:	025b      	lsls	r3, r3, #9
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	431a      	orrs	r2, r3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbec:	3b01      	subs	r3, #1
 800dbee:	041b      	lsls	r3, r3, #16
 800dbf0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dbf4:	431a      	orrs	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	061b      	lsls	r3, r3, #24
 800dbfe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dc02:	4938      	ldr	r1, [pc, #224]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc04:	4313      	orrs	r3, r2
 800dc06:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800dc08:	4b36      	ldr	r3, [pc, #216]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc0c:	4a35      	ldr	r2, [pc, #212]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc0e:	f023 0301 	bic.w	r3, r3, #1
 800dc12:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800dc14:	4b33      	ldr	r3, [pc, #204]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc18:	4b34      	ldr	r3, [pc, #208]	; (800dcec <HAL_RCC_OscConfig+0x6cc>)
 800dc1a:	4013      	ands	r3, r2
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800dc20:	00d2      	lsls	r2, r2, #3
 800dc22:	4930      	ldr	r1, [pc, #192]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc24:	4313      	orrs	r3, r2
 800dc26:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800dc28:	4b2e      	ldr	r3, [pc, #184]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc2c:	f023 020c 	bic.w	r2, r3, #12
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc34:	492b      	ldr	r1, [pc, #172]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc36:	4313      	orrs	r3, r2
 800dc38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800dc3a:	4b2a      	ldr	r3, [pc, #168]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc3e:	f023 0202 	bic.w	r2, r3, #2
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc46:	4927      	ldr	r1, [pc, #156]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dc4c:	4b25      	ldr	r3, [pc, #148]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc50:	4a24      	ldr	r2, [pc, #144]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dc56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc58:	4b22      	ldr	r3, [pc, #136]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc5c:	4a21      	ldr	r2, [pc, #132]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800dc64:	4b1f      	ldr	r3, [pc, #124]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc68:	4a1e      	ldr	r2, [pc, #120]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dc6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800dc70:	4b1c      	ldr	r3, [pc, #112]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc74:	4a1b      	ldr	r2, [pc, #108]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc76:	f043 0301 	orr.w	r3, r3, #1
 800dc7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dc7c:	4b19      	ldr	r3, [pc, #100]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a18      	ldr	r2, [pc, #96]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dc82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dc86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc88:	f7f8 fc48 	bl	800651c <HAL_GetTick>
 800dc8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dc8e:	e008      	b.n	800dca2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dc90:	f7f8 fc44 	bl	800651c <HAL_GetTick>
 800dc94:	4602      	mov	r2, r0
 800dc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc98:	1ad3      	subs	r3, r2, r3
 800dc9a:	2b02      	cmp	r3, #2
 800dc9c:	d901      	bls.n	800dca2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800dc9e:	2303      	movs	r3, #3
 800dca0:	e065      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dca2:	4b10      	ldr	r3, [pc, #64]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d0f0      	beq.n	800dc90 <HAL_RCC_OscConfig+0x670>
 800dcae:	e05d      	b.n	800dd6c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dcb0:	4b0c      	ldr	r3, [pc, #48]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a0b      	ldr	r2, [pc, #44]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dcb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dcba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcbc:	f7f8 fc2e 	bl	800651c <HAL_GetTick>
 800dcc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dcc2:	e008      	b.n	800dcd6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dcc4:	f7f8 fc2a 	bl	800651c <HAL_GetTick>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dccc:	1ad3      	subs	r3, r2, r3
 800dcce:	2b02      	cmp	r3, #2
 800dcd0:	d901      	bls.n	800dcd6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800dcd2:	2303      	movs	r3, #3
 800dcd4:	e04b      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dcd6:	4b03      	ldr	r3, [pc, #12]	; (800dce4 <HAL_RCC_OscConfig+0x6c4>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1f0      	bne.n	800dcc4 <HAL_RCC_OscConfig+0x6a4>
 800dce2:	e043      	b.n	800dd6c <HAL_RCC_OscConfig+0x74c>
 800dce4:	58024400 	.word	0x58024400
 800dce8:	fffffc0c 	.word	0xfffffc0c
 800dcec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800dcf0:	4b21      	ldr	r3, [pc, #132]	; (800dd78 <HAL_RCC_OscConfig+0x758>)
 800dcf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcf4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800dcf6:	4b20      	ldr	r3, [pc, #128]	; (800dd78 <HAL_RCC_OscConfig+0x758>)
 800dcf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcfa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d031      	beq.n	800dd68 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	f003 0203 	and.w	r2, r3, #3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d12a      	bne.n	800dd68 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	091b      	lsrs	r3, r3, #4
 800dd16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d122      	bne.n	800dd68 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d11a      	bne.n	800dd68 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	0a5b      	lsrs	r3, r3, #9
 800dd36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd3e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d111      	bne.n	800dd68 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	0c1b      	lsrs	r3, r3, #16
 800dd48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd50:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d108      	bne.n	800dd68 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	0e1b      	lsrs	r3, r3, #24
 800dd5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd62:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d001      	beq.n	800dd6c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	e000      	b.n	800dd6e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3730      	adds	r7, #48	; 0x30
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	58024400 	.word	0x58024400

0800dd7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b086      	sub	sp, #24
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d101      	bne.n	800dd90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e19c      	b.n	800e0ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dd90:	4b8a      	ldr	r3, [pc, #552]	; (800dfbc <HAL_RCC_ClockConfig+0x240>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f003 030f 	and.w	r3, r3, #15
 800dd98:	683a      	ldr	r2, [r7, #0]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d910      	bls.n	800ddc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd9e:	4b87      	ldr	r3, [pc, #540]	; (800dfbc <HAL_RCC_ClockConfig+0x240>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f023 020f 	bic.w	r2, r3, #15
 800dda6:	4985      	ldr	r1, [pc, #532]	; (800dfbc <HAL_RCC_ClockConfig+0x240>)
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ddae:	4b83      	ldr	r3, [pc, #524]	; (800dfbc <HAL_RCC_ClockConfig+0x240>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f003 030f 	and.w	r3, r3, #15
 800ddb6:	683a      	ldr	r2, [r7, #0]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d001      	beq.n	800ddc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e184      	b.n	800e0ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f003 0304 	and.w	r3, r3, #4
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d010      	beq.n	800ddee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	691a      	ldr	r2, [r3, #16]
 800ddd0:	4b7b      	ldr	r3, [pc, #492]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800ddd2:	699b      	ldr	r3, [r3, #24]
 800ddd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d908      	bls.n	800ddee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dddc:	4b78      	ldr	r3, [pc, #480]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800ddde:	699b      	ldr	r3, [r3, #24]
 800dde0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	691b      	ldr	r3, [r3, #16]
 800dde8:	4975      	ldr	r1, [pc, #468]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800ddea:	4313      	orrs	r3, r2
 800ddec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f003 0308 	and.w	r3, r3, #8
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d010      	beq.n	800de1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	695a      	ldr	r2, [r3, #20]
 800ddfe:	4b70      	ldr	r3, [pc, #448]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800de00:	69db      	ldr	r3, [r3, #28]
 800de02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800de06:	429a      	cmp	r2, r3
 800de08:	d908      	bls.n	800de1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800de0a:	4b6d      	ldr	r3, [pc, #436]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800de0c:	69db      	ldr	r3, [r3, #28]
 800de0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	695b      	ldr	r3, [r3, #20]
 800de16:	496a      	ldr	r1, [pc, #424]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800de18:	4313      	orrs	r3, r2
 800de1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f003 0310 	and.w	r3, r3, #16
 800de24:	2b00      	cmp	r3, #0
 800de26:	d010      	beq.n	800de4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	699a      	ldr	r2, [r3, #24]
 800de2c:	4b64      	ldr	r3, [pc, #400]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800de2e:	69db      	ldr	r3, [r3, #28]
 800de30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de34:	429a      	cmp	r2, r3
 800de36:	d908      	bls.n	800de4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800de38:	4b61      	ldr	r3, [pc, #388]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800de3a:	69db      	ldr	r3, [r3, #28]
 800de3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	699b      	ldr	r3, [r3, #24]
 800de44:	495e      	ldr	r1, [pc, #376]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800de46:	4313      	orrs	r3, r2
 800de48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f003 0320 	and.w	r3, r3, #32
 800de52:	2b00      	cmp	r3, #0
 800de54:	d010      	beq.n	800de78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	69da      	ldr	r2, [r3, #28]
 800de5a:	4b59      	ldr	r3, [pc, #356]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800de5c:	6a1b      	ldr	r3, [r3, #32]
 800de5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800de62:	429a      	cmp	r2, r3
 800de64:	d908      	bls.n	800de78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800de66:	4b56      	ldr	r3, [pc, #344]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800de68:	6a1b      	ldr	r3, [r3, #32]
 800de6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	69db      	ldr	r3, [r3, #28]
 800de72:	4953      	ldr	r1, [pc, #332]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800de74:	4313      	orrs	r3, r2
 800de76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f003 0302 	and.w	r3, r3, #2
 800de80:	2b00      	cmp	r3, #0
 800de82:	d010      	beq.n	800dea6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	68da      	ldr	r2, [r3, #12]
 800de88:	4b4d      	ldr	r3, [pc, #308]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800de8a:	699b      	ldr	r3, [r3, #24]
 800de8c:	f003 030f 	and.w	r3, r3, #15
 800de90:	429a      	cmp	r2, r3
 800de92:	d908      	bls.n	800dea6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800de94:	4b4a      	ldr	r3, [pc, #296]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800de96:	699b      	ldr	r3, [r3, #24]
 800de98:	f023 020f 	bic.w	r2, r3, #15
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	4947      	ldr	r1, [pc, #284]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800dea2:	4313      	orrs	r3, r2
 800dea4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f003 0301 	and.w	r3, r3, #1
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d055      	beq.n	800df5e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800deb2:	4b43      	ldr	r3, [pc, #268]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800deb4:	699b      	ldr	r3, [r3, #24]
 800deb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	4940      	ldr	r1, [pc, #256]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800dec0:	4313      	orrs	r3, r2
 800dec2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	2b02      	cmp	r3, #2
 800deca:	d107      	bne.n	800dedc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800decc:	4b3c      	ldr	r3, [pc, #240]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d121      	bne.n	800df1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ded8:	2301      	movs	r3, #1
 800deda:	e0f6      	b.n	800e0ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	2b03      	cmp	r3, #3
 800dee2:	d107      	bne.n	800def4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dee4:	4b36      	ldr	r3, [pc, #216]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800deec:	2b00      	cmp	r3, #0
 800deee:	d115      	bne.n	800df1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800def0:	2301      	movs	r3, #1
 800def2:	e0ea      	b.n	800e0ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	2b01      	cmp	r3, #1
 800defa:	d107      	bne.n	800df0c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800defc:	4b30      	ldr	r3, [pc, #192]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df04:	2b00      	cmp	r3, #0
 800df06:	d109      	bne.n	800df1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800df08:	2301      	movs	r3, #1
 800df0a:	e0de      	b.n	800e0ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800df0c:	4b2c      	ldr	r3, [pc, #176]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f003 0304 	and.w	r3, r3, #4
 800df14:	2b00      	cmp	r3, #0
 800df16:	d101      	bne.n	800df1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800df18:	2301      	movs	r3, #1
 800df1a:	e0d6      	b.n	800e0ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800df1c:	4b28      	ldr	r3, [pc, #160]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800df1e:	691b      	ldr	r3, [r3, #16]
 800df20:	f023 0207 	bic.w	r2, r3, #7
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	4925      	ldr	r1, [pc, #148]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800df2a:	4313      	orrs	r3, r2
 800df2c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df2e:	f7f8 faf5 	bl	800651c <HAL_GetTick>
 800df32:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800df34:	e00a      	b.n	800df4c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800df36:	f7f8 faf1 	bl	800651c <HAL_GetTick>
 800df3a:	4602      	mov	r2, r0
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	1ad3      	subs	r3, r2, r3
 800df40:	f241 3288 	movw	r2, #5000	; 0x1388
 800df44:	4293      	cmp	r3, r2
 800df46:	d901      	bls.n	800df4c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800df48:	2303      	movs	r3, #3
 800df4a:	e0be      	b.n	800e0ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800df4c:	4b1c      	ldr	r3, [pc, #112]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800df4e:	691b      	ldr	r3, [r3, #16]
 800df50:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	00db      	lsls	r3, r3, #3
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d1eb      	bne.n	800df36 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f003 0302 	and.w	r3, r3, #2
 800df66:	2b00      	cmp	r3, #0
 800df68:	d010      	beq.n	800df8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	68da      	ldr	r2, [r3, #12]
 800df6e:	4b14      	ldr	r3, [pc, #80]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800df70:	699b      	ldr	r3, [r3, #24]
 800df72:	f003 030f 	and.w	r3, r3, #15
 800df76:	429a      	cmp	r2, r3
 800df78:	d208      	bcs.n	800df8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800df7a:	4b11      	ldr	r3, [pc, #68]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800df7c:	699b      	ldr	r3, [r3, #24]
 800df7e:	f023 020f 	bic.w	r2, r3, #15
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	490e      	ldr	r1, [pc, #56]	; (800dfc0 <HAL_RCC_ClockConfig+0x244>)
 800df88:	4313      	orrs	r3, r2
 800df8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800df8c:	4b0b      	ldr	r3, [pc, #44]	; (800dfbc <HAL_RCC_ClockConfig+0x240>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f003 030f 	and.w	r3, r3, #15
 800df94:	683a      	ldr	r2, [r7, #0]
 800df96:	429a      	cmp	r2, r3
 800df98:	d214      	bcs.n	800dfc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df9a:	4b08      	ldr	r3, [pc, #32]	; (800dfbc <HAL_RCC_ClockConfig+0x240>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f023 020f 	bic.w	r2, r3, #15
 800dfa2:	4906      	ldr	r1, [pc, #24]	; (800dfbc <HAL_RCC_ClockConfig+0x240>)
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dfaa:	4b04      	ldr	r3, [pc, #16]	; (800dfbc <HAL_RCC_ClockConfig+0x240>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f003 030f 	and.w	r3, r3, #15
 800dfb2:	683a      	ldr	r2, [r7, #0]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d005      	beq.n	800dfc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e086      	b.n	800e0ca <HAL_RCC_ClockConfig+0x34e>
 800dfbc:	52002000 	.word	0x52002000
 800dfc0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f003 0304 	and.w	r3, r3, #4
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d010      	beq.n	800dff2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	691a      	ldr	r2, [r3, #16]
 800dfd4:	4b3f      	ldr	r3, [pc, #252]	; (800e0d4 <HAL_RCC_ClockConfig+0x358>)
 800dfd6:	699b      	ldr	r3, [r3, #24]
 800dfd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d208      	bcs.n	800dff2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dfe0:	4b3c      	ldr	r3, [pc, #240]	; (800e0d4 <HAL_RCC_ClockConfig+0x358>)
 800dfe2:	699b      	ldr	r3, [r3, #24]
 800dfe4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	4939      	ldr	r1, [pc, #228]	; (800e0d4 <HAL_RCC_ClockConfig+0x358>)
 800dfee:	4313      	orrs	r3, r2
 800dff0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f003 0308 	and.w	r3, r3, #8
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d010      	beq.n	800e020 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	695a      	ldr	r2, [r3, #20]
 800e002:	4b34      	ldr	r3, [pc, #208]	; (800e0d4 <HAL_RCC_ClockConfig+0x358>)
 800e004:	69db      	ldr	r3, [r3, #28]
 800e006:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d208      	bcs.n	800e020 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e00e:	4b31      	ldr	r3, [pc, #196]	; (800e0d4 <HAL_RCC_ClockConfig+0x358>)
 800e010:	69db      	ldr	r3, [r3, #28]
 800e012:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	695b      	ldr	r3, [r3, #20]
 800e01a:	492e      	ldr	r1, [pc, #184]	; (800e0d4 <HAL_RCC_ClockConfig+0x358>)
 800e01c:	4313      	orrs	r3, r2
 800e01e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f003 0310 	and.w	r3, r3, #16
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d010      	beq.n	800e04e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	699a      	ldr	r2, [r3, #24]
 800e030:	4b28      	ldr	r3, [pc, #160]	; (800e0d4 <HAL_RCC_ClockConfig+0x358>)
 800e032:	69db      	ldr	r3, [r3, #28]
 800e034:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e038:	429a      	cmp	r2, r3
 800e03a:	d208      	bcs.n	800e04e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e03c:	4b25      	ldr	r3, [pc, #148]	; (800e0d4 <HAL_RCC_ClockConfig+0x358>)
 800e03e:	69db      	ldr	r3, [r3, #28]
 800e040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	699b      	ldr	r3, [r3, #24]
 800e048:	4922      	ldr	r1, [pc, #136]	; (800e0d4 <HAL_RCC_ClockConfig+0x358>)
 800e04a:	4313      	orrs	r3, r2
 800e04c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f003 0320 	and.w	r3, r3, #32
 800e056:	2b00      	cmp	r3, #0
 800e058:	d010      	beq.n	800e07c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	69da      	ldr	r2, [r3, #28]
 800e05e:	4b1d      	ldr	r3, [pc, #116]	; (800e0d4 <HAL_RCC_ClockConfig+0x358>)
 800e060:	6a1b      	ldr	r3, [r3, #32]
 800e062:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e066:	429a      	cmp	r2, r3
 800e068:	d208      	bcs.n	800e07c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800e06a:	4b1a      	ldr	r3, [pc, #104]	; (800e0d4 <HAL_RCC_ClockConfig+0x358>)
 800e06c:	6a1b      	ldr	r3, [r3, #32]
 800e06e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	69db      	ldr	r3, [r3, #28]
 800e076:	4917      	ldr	r1, [pc, #92]	; (800e0d4 <HAL_RCC_ClockConfig+0x358>)
 800e078:	4313      	orrs	r3, r2
 800e07a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e07c:	f000 f834 	bl	800e0e8 <HAL_RCC_GetSysClockFreq>
 800e080:	4602      	mov	r2, r0
 800e082:	4b14      	ldr	r3, [pc, #80]	; (800e0d4 <HAL_RCC_ClockConfig+0x358>)
 800e084:	699b      	ldr	r3, [r3, #24]
 800e086:	0a1b      	lsrs	r3, r3, #8
 800e088:	f003 030f 	and.w	r3, r3, #15
 800e08c:	4912      	ldr	r1, [pc, #72]	; (800e0d8 <HAL_RCC_ClockConfig+0x35c>)
 800e08e:	5ccb      	ldrb	r3, [r1, r3]
 800e090:	f003 031f 	and.w	r3, r3, #31
 800e094:	fa22 f303 	lsr.w	r3, r2, r3
 800e098:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e09a:	4b0e      	ldr	r3, [pc, #56]	; (800e0d4 <HAL_RCC_ClockConfig+0x358>)
 800e09c:	699b      	ldr	r3, [r3, #24]
 800e09e:	f003 030f 	and.w	r3, r3, #15
 800e0a2:	4a0d      	ldr	r2, [pc, #52]	; (800e0d8 <HAL_RCC_ClockConfig+0x35c>)
 800e0a4:	5cd3      	ldrb	r3, [r2, r3]
 800e0a6:	f003 031f 	and.w	r3, r3, #31
 800e0aa:	693a      	ldr	r2, [r7, #16]
 800e0ac:	fa22 f303 	lsr.w	r3, r2, r3
 800e0b0:	4a0a      	ldr	r2, [pc, #40]	; (800e0dc <HAL_RCC_ClockConfig+0x360>)
 800e0b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e0b4:	4a0a      	ldr	r2, [pc, #40]	; (800e0e0 <HAL_RCC_ClockConfig+0x364>)
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800e0ba:	4b0a      	ldr	r3, [pc, #40]	; (800e0e4 <HAL_RCC_ClockConfig+0x368>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7f8 f9e2 	bl	8006488 <HAL_InitTick>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3718      	adds	r7, #24
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	58024400 	.word	0x58024400
 800e0d8:	08016bd4 	.word	0x08016bd4
 800e0dc:	20000014 	.word	0x20000014
 800e0e0:	20000010 	.word	0x20000010
 800e0e4:	20000018 	.word	0x20000018

0800e0e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b089      	sub	sp, #36	; 0x24
 800e0ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e0ee:	4bb3      	ldr	r3, [pc, #716]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e0f0:	691b      	ldr	r3, [r3, #16]
 800e0f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0f6:	2b18      	cmp	r3, #24
 800e0f8:	f200 8155 	bhi.w	800e3a6 <HAL_RCC_GetSysClockFreq+0x2be>
 800e0fc:	a201      	add	r2, pc, #4	; (adr r2, 800e104 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e102:	bf00      	nop
 800e104:	0800e169 	.word	0x0800e169
 800e108:	0800e3a7 	.word	0x0800e3a7
 800e10c:	0800e3a7 	.word	0x0800e3a7
 800e110:	0800e3a7 	.word	0x0800e3a7
 800e114:	0800e3a7 	.word	0x0800e3a7
 800e118:	0800e3a7 	.word	0x0800e3a7
 800e11c:	0800e3a7 	.word	0x0800e3a7
 800e120:	0800e3a7 	.word	0x0800e3a7
 800e124:	0800e18f 	.word	0x0800e18f
 800e128:	0800e3a7 	.word	0x0800e3a7
 800e12c:	0800e3a7 	.word	0x0800e3a7
 800e130:	0800e3a7 	.word	0x0800e3a7
 800e134:	0800e3a7 	.word	0x0800e3a7
 800e138:	0800e3a7 	.word	0x0800e3a7
 800e13c:	0800e3a7 	.word	0x0800e3a7
 800e140:	0800e3a7 	.word	0x0800e3a7
 800e144:	0800e195 	.word	0x0800e195
 800e148:	0800e3a7 	.word	0x0800e3a7
 800e14c:	0800e3a7 	.word	0x0800e3a7
 800e150:	0800e3a7 	.word	0x0800e3a7
 800e154:	0800e3a7 	.word	0x0800e3a7
 800e158:	0800e3a7 	.word	0x0800e3a7
 800e15c:	0800e3a7 	.word	0x0800e3a7
 800e160:	0800e3a7 	.word	0x0800e3a7
 800e164:	0800e19b 	.word	0x0800e19b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e168:	4b94      	ldr	r3, [pc, #592]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f003 0320 	and.w	r3, r3, #32
 800e170:	2b00      	cmp	r3, #0
 800e172:	d009      	beq.n	800e188 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e174:	4b91      	ldr	r3, [pc, #580]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	08db      	lsrs	r3, r3, #3
 800e17a:	f003 0303 	and.w	r3, r3, #3
 800e17e:	4a90      	ldr	r2, [pc, #576]	; (800e3c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e180:	fa22 f303 	lsr.w	r3, r2, r3
 800e184:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800e186:	e111      	b.n	800e3ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e188:	4b8d      	ldr	r3, [pc, #564]	; (800e3c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e18a:	61bb      	str	r3, [r7, #24]
    break;
 800e18c:	e10e      	b.n	800e3ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800e18e:	4b8d      	ldr	r3, [pc, #564]	; (800e3c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e190:	61bb      	str	r3, [r7, #24]
    break;
 800e192:	e10b      	b.n	800e3ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800e194:	4b8c      	ldr	r3, [pc, #560]	; (800e3c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e196:	61bb      	str	r3, [r7, #24]
    break;
 800e198:	e108      	b.n	800e3ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e19a:	4b88      	ldr	r3, [pc, #544]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e19e:	f003 0303 	and.w	r3, r3, #3
 800e1a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800e1a4:	4b85      	ldr	r3, [pc, #532]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1a8:	091b      	lsrs	r3, r3, #4
 800e1aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e1b0:	4b82      	ldr	r3, [pc, #520]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b4:	f003 0301 	and.w	r3, r3, #1
 800e1b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e1ba:	4b80      	ldr	r3, [pc, #512]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1be:	08db      	lsrs	r3, r3, #3
 800e1c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1c4:	68fa      	ldr	r2, [r7, #12]
 800e1c6:	fb02 f303 	mul.w	r3, r2, r3
 800e1ca:	ee07 3a90 	vmov	s15, r3
 800e1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	f000 80e1 	beq.w	800e3a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	f000 8083 	beq.w	800e2ec <HAL_RCC_GetSysClockFreq+0x204>
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	2b02      	cmp	r3, #2
 800e1ea:	f200 80a1 	bhi.w	800e330 <HAL_RCC_GetSysClockFreq+0x248>
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d003      	beq.n	800e1fc <HAL_RCC_GetSysClockFreq+0x114>
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	2b01      	cmp	r3, #1
 800e1f8:	d056      	beq.n	800e2a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e1fa:	e099      	b.n	800e330 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1fc:	4b6f      	ldr	r3, [pc, #444]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f003 0320 	and.w	r3, r3, #32
 800e204:	2b00      	cmp	r3, #0
 800e206:	d02d      	beq.n	800e264 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e208:	4b6c      	ldr	r3, [pc, #432]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	08db      	lsrs	r3, r3, #3
 800e20e:	f003 0303 	and.w	r3, r3, #3
 800e212:	4a6b      	ldr	r2, [pc, #428]	; (800e3c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e214:	fa22 f303 	lsr.w	r3, r2, r3
 800e218:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	ee07 3a90 	vmov	s15, r3
 800e220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	ee07 3a90 	vmov	s15, r3
 800e22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e232:	4b62      	ldr	r3, [pc, #392]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e23a:	ee07 3a90 	vmov	s15, r3
 800e23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e242:	ed97 6a02 	vldr	s12, [r7, #8]
 800e246:	eddf 5a61 	vldr	s11, [pc, #388]	; 800e3cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800e24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e25e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800e262:	e087      	b.n	800e374 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	ee07 3a90 	vmov	s15, r3
 800e26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e26e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800e3d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800e272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e276:	4b51      	ldr	r3, [pc, #324]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e27e:	ee07 3a90 	vmov	s15, r3
 800e282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e286:	ed97 6a02 	vldr	s12, [r7, #8]
 800e28a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800e3cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800e28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2a6:	e065      	b.n	800e374 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	ee07 3a90 	vmov	s15, r3
 800e2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e3d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2ba:	4b40      	ldr	r3, [pc, #256]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2c2:	ee07 3a90 	vmov	s15, r3
 800e2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800e2ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e3cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800e2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2ea:	e043      	b.n	800e374 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	ee07 3a90 	vmov	s15, r3
 800e2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800e3d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800e2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2fe:	4b2f      	ldr	r3, [pc, #188]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e306:	ee07 3a90 	vmov	s15, r3
 800e30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e30e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e312:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e3cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800e316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e31e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e32a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e32e:	e021      	b.n	800e374 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	ee07 3a90 	vmov	s15, r3
 800e336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e33a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e3d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e342:	4b1e      	ldr	r3, [pc, #120]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e34a:	ee07 3a90 	vmov	s15, r3
 800e34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e352:	ed97 6a02 	vldr	s12, [r7, #8]
 800e356:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800e3cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800e35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e36e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e372:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800e374:	4b11      	ldr	r3, [pc, #68]	; (800e3bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e378:	0a5b      	lsrs	r3, r3, #9
 800e37a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e37e:	3301      	adds	r3, #1
 800e380:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	ee07 3a90 	vmov	s15, r3
 800e388:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e38c:	edd7 6a07 	vldr	s13, [r7, #28]
 800e390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e398:	ee17 3a90 	vmov	r3, s15
 800e39c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800e39e:	e005      	b.n	800e3ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	61bb      	str	r3, [r7, #24]
    break;
 800e3a4:	e002      	b.n	800e3ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800e3a6:	4b07      	ldr	r3, [pc, #28]	; (800e3c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e3a8:	61bb      	str	r3, [r7, #24]
    break;
 800e3aa:	bf00      	nop
  }

  return sysclockfreq;
 800e3ac:	69bb      	ldr	r3, [r7, #24]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3724      	adds	r7, #36	; 0x24
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b8:	4770      	bx	lr
 800e3ba:	bf00      	nop
 800e3bc:	58024400 	.word	0x58024400
 800e3c0:	03d09000 	.word	0x03d09000
 800e3c4:	003d0900 	.word	0x003d0900
 800e3c8:	017d7840 	.word	0x017d7840
 800e3cc:	46000000 	.word	0x46000000
 800e3d0:	4c742400 	.word	0x4c742400
 800e3d4:	4a742400 	.word	0x4a742400
 800e3d8:	4bbebc20 	.word	0x4bbebc20

0800e3dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e3e2:	f7ff fe81 	bl	800e0e8 <HAL_RCC_GetSysClockFreq>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	4b10      	ldr	r3, [pc, #64]	; (800e42c <HAL_RCC_GetHCLKFreq+0x50>)
 800e3ea:	699b      	ldr	r3, [r3, #24]
 800e3ec:	0a1b      	lsrs	r3, r3, #8
 800e3ee:	f003 030f 	and.w	r3, r3, #15
 800e3f2:	490f      	ldr	r1, [pc, #60]	; (800e430 <HAL_RCC_GetHCLKFreq+0x54>)
 800e3f4:	5ccb      	ldrb	r3, [r1, r3]
 800e3f6:	f003 031f 	and.w	r3, r3, #31
 800e3fa:	fa22 f303 	lsr.w	r3, r2, r3
 800e3fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e400:	4b0a      	ldr	r3, [pc, #40]	; (800e42c <HAL_RCC_GetHCLKFreq+0x50>)
 800e402:	699b      	ldr	r3, [r3, #24]
 800e404:	f003 030f 	and.w	r3, r3, #15
 800e408:	4a09      	ldr	r2, [pc, #36]	; (800e430 <HAL_RCC_GetHCLKFreq+0x54>)
 800e40a:	5cd3      	ldrb	r3, [r2, r3]
 800e40c:	f003 031f 	and.w	r3, r3, #31
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	fa22 f303 	lsr.w	r3, r2, r3
 800e416:	4a07      	ldr	r2, [pc, #28]	; (800e434 <HAL_RCC_GetHCLKFreq+0x58>)
 800e418:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e41a:	4a07      	ldr	r2, [pc, #28]	; (800e438 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e420:	4b04      	ldr	r3, [pc, #16]	; (800e434 <HAL_RCC_GetHCLKFreq+0x58>)
 800e422:	681b      	ldr	r3, [r3, #0]
}
 800e424:	4618      	mov	r0, r3
 800e426:	3708      	adds	r7, #8
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	58024400 	.word	0x58024400
 800e430:	08016bd4 	.word	0x08016bd4
 800e434:	20000014 	.word	0x20000014
 800e438:	20000010 	.word	0x20000010

0800e43c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e440:	f7ff ffcc 	bl	800e3dc <HAL_RCC_GetHCLKFreq>
 800e444:	4602      	mov	r2, r0
 800e446:	4b06      	ldr	r3, [pc, #24]	; (800e460 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e448:	69db      	ldr	r3, [r3, #28]
 800e44a:	091b      	lsrs	r3, r3, #4
 800e44c:	f003 0307 	and.w	r3, r3, #7
 800e450:	4904      	ldr	r1, [pc, #16]	; (800e464 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e452:	5ccb      	ldrb	r3, [r1, r3]
 800e454:	f003 031f 	and.w	r3, r3, #31
 800e458:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	58024400 	.word	0x58024400
 800e464:	08016bd4 	.word	0x08016bd4

0800e468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e46c:	f7ff ffb6 	bl	800e3dc <HAL_RCC_GetHCLKFreq>
 800e470:	4602      	mov	r2, r0
 800e472:	4b06      	ldr	r3, [pc, #24]	; (800e48c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e474:	69db      	ldr	r3, [r3, #28]
 800e476:	0a1b      	lsrs	r3, r3, #8
 800e478:	f003 0307 	and.w	r3, r3, #7
 800e47c:	4904      	ldr	r1, [pc, #16]	; (800e490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e47e:	5ccb      	ldrb	r3, [r1, r3]
 800e480:	f003 031f 	and.w	r3, r3, #31
 800e484:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e488:	4618      	mov	r0, r3
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	58024400 	.word	0x58024400
 800e490:	08016bd4 	.word	0x08016bd4

0800e494 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b086      	sub	sp, #24
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e49c:	2300      	movs	r3, #0
 800e49e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d03f      	beq.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e4b8:	d02a      	beq.n	800e510 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800e4ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e4be:	d824      	bhi.n	800e50a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e4c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e4c4:	d018      	beq.n	800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e4c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e4ca:	d81e      	bhi.n	800e50a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d003      	beq.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800e4d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e4d4:	d007      	beq.n	800e4e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800e4d6:	e018      	b.n	800e50a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4d8:	4ba4      	ldr	r3, [pc, #656]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4dc:	4aa3      	ldr	r2, [pc, #652]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e4de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e4e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e4e4:	e015      	b.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	3304      	adds	r3, #4
 800e4ea:	2102      	movs	r1, #2
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f001 ff01 	bl	80102f4 <RCCEx_PLL2_Config>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e4f6:	e00c      	b.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	3324      	adds	r3, #36	; 0x24
 800e4fc:	2102      	movs	r1, #2
 800e4fe:	4618      	mov	r0, r3
 800e500:	f001 ffaa 	bl	8010458 <RCCEx_PLL3_Config>
 800e504:	4603      	mov	r3, r0
 800e506:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e508:	e003      	b.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e50a:	2301      	movs	r3, #1
 800e50c:	75fb      	strb	r3, [r7, #23]
      break;
 800e50e:	e000      	b.n	800e512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800e510:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e512:	7dfb      	ldrb	r3, [r7, #23]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d109      	bne.n	800e52c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e518:	4b94      	ldr	r3, [pc, #592]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e51a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e51c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e524:	4991      	ldr	r1, [pc, #580]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e526:	4313      	orrs	r3, r2
 800e528:	650b      	str	r3, [r1, #80]	; 0x50
 800e52a:	e001      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e52c:	7dfb      	ldrb	r3, [r7, #23]
 800e52e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d03d      	beq.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e540:	2b04      	cmp	r3, #4
 800e542:	d826      	bhi.n	800e592 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800e544:	a201      	add	r2, pc, #4	; (adr r2, 800e54c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800e546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e54a:	bf00      	nop
 800e54c:	0800e561 	.word	0x0800e561
 800e550:	0800e56f 	.word	0x0800e56f
 800e554:	0800e581 	.word	0x0800e581
 800e558:	0800e599 	.word	0x0800e599
 800e55c:	0800e599 	.word	0x0800e599
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e560:	4b82      	ldr	r3, [pc, #520]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e564:	4a81      	ldr	r2, [pc, #516]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e56a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e56c:	e015      	b.n	800e59a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	3304      	adds	r3, #4
 800e572:	2100      	movs	r1, #0
 800e574:	4618      	mov	r0, r3
 800e576:	f001 febd 	bl	80102f4 <RCCEx_PLL2_Config>
 800e57a:	4603      	mov	r3, r0
 800e57c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e57e:	e00c      	b.n	800e59a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	3324      	adds	r3, #36	; 0x24
 800e584:	2100      	movs	r1, #0
 800e586:	4618      	mov	r0, r3
 800e588:	f001 ff66 	bl	8010458 <RCCEx_PLL3_Config>
 800e58c:	4603      	mov	r3, r0
 800e58e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e590:	e003      	b.n	800e59a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	75fb      	strb	r3, [r7, #23]
      break;
 800e596:	e000      	b.n	800e59a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800e598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e59a:	7dfb      	ldrb	r3, [r7, #23]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d109      	bne.n	800e5b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e5a0:	4b72      	ldr	r3, [pc, #456]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5a4:	f023 0207 	bic.w	r2, r3, #7
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5ac:	496f      	ldr	r1, [pc, #444]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	650b      	str	r3, [r1, #80]	; 0x50
 800e5b2:	e001      	b.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5b4:	7dfb      	ldrb	r3, [r7, #23]
 800e5b6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d051      	beq.n	800e668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e5ca:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800e5ce:	d036      	beq.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e5d0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800e5d4:	d830      	bhi.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e5d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e5da:	d032      	beq.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800e5dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e5e0:	d82a      	bhi.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e5e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e5e6:	d02e      	beq.n	800e646 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800e5e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e5ec:	d824      	bhi.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e5ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e5f2:	d018      	beq.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800e5f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e5f8:	d81e      	bhi.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d003      	beq.n	800e606 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800e5fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e602:	d007      	beq.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800e604:	e018      	b.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e606:	4b59      	ldr	r3, [pc, #356]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e60a:	4a58      	ldr	r2, [pc, #352]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e60c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e610:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e612:	e019      	b.n	800e648 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	3304      	adds	r3, #4
 800e618:	2100      	movs	r1, #0
 800e61a:	4618      	mov	r0, r3
 800e61c:	f001 fe6a 	bl	80102f4 <RCCEx_PLL2_Config>
 800e620:	4603      	mov	r3, r0
 800e622:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800e624:	e010      	b.n	800e648 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	3324      	adds	r3, #36	; 0x24
 800e62a:	2100      	movs	r1, #0
 800e62c:	4618      	mov	r0, r3
 800e62e:	f001 ff13 	bl	8010458 <RCCEx_PLL3_Config>
 800e632:	4603      	mov	r3, r0
 800e634:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e636:	e007      	b.n	800e648 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800e638:	2301      	movs	r3, #1
 800e63a:	75fb      	strb	r3, [r7, #23]
      break;
 800e63c:	e004      	b.n	800e648 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e63e:	bf00      	nop
 800e640:	e002      	b.n	800e648 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e642:	bf00      	nop
 800e644:	e000      	b.n	800e648 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e646:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e648:	7dfb      	ldrb	r3, [r7, #23]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d10a      	bne.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e64e:	4b47      	ldr	r3, [pc, #284]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e652:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e65c:	4943      	ldr	r1, [pc, #268]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e65e:	4313      	orrs	r3, r2
 800e660:	658b      	str	r3, [r1, #88]	; 0x58
 800e662:	e001      	b.n	800e668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e664:	7dfb      	ldrb	r3, [r7, #23]
 800e666:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e670:	2b00      	cmp	r3, #0
 800e672:	d051      	beq.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e67a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800e67e:	d036      	beq.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800e680:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800e684:	d830      	bhi.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e686:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e68a:	d032      	beq.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800e68c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e690:	d82a      	bhi.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e692:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e696:	d02e      	beq.n	800e6f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800e698:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e69c:	d824      	bhi.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e69e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e6a2:	d018      	beq.n	800e6d6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800e6a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e6a8:	d81e      	bhi.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d003      	beq.n	800e6b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800e6ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e6b2:	d007      	beq.n	800e6c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800e6b4:	e018      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6b6:	4b2d      	ldr	r3, [pc, #180]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ba:	4a2c      	ldr	r2, [pc, #176]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e6bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e6c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e6c2:	e019      	b.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	3304      	adds	r3, #4
 800e6c8:	2100      	movs	r1, #0
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f001 fe12 	bl	80102f4 <RCCEx_PLL2_Config>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800e6d4:	e010      	b.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	3324      	adds	r3, #36	; 0x24
 800e6da:	2100      	movs	r1, #0
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f001 febb 	bl	8010458 <RCCEx_PLL3_Config>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e6e6:	e007      	b.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	75fb      	strb	r3, [r7, #23]
      break;
 800e6ec:	e004      	b.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e6ee:	bf00      	nop
 800e6f0:	e002      	b.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e6f2:	bf00      	nop
 800e6f4:	e000      	b.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e6f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e6f8:	7dfb      	ldrb	r3, [r7, #23]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d10a      	bne.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e6fe:	4b1b      	ldr	r3, [pc, #108]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e702:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e70c:	4917      	ldr	r1, [pc, #92]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e70e:	4313      	orrs	r3, r2
 800e710:	658b      	str	r3, [r1, #88]	; 0x58
 800e712:	e001      	b.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e714:	7dfb      	ldrb	r3, [r7, #23]
 800e716:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e720:	2b00      	cmp	r3, #0
 800e722:	d035      	beq.n	800e790 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e728:	2b30      	cmp	r3, #48	; 0x30
 800e72a:	d01c      	beq.n	800e766 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e72c:	2b30      	cmp	r3, #48	; 0x30
 800e72e:	d817      	bhi.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800e730:	2b20      	cmp	r3, #32
 800e732:	d00c      	beq.n	800e74e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800e734:	2b20      	cmp	r3, #32
 800e736:	d813      	bhi.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d019      	beq.n	800e770 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800e73c:	2b10      	cmp	r3, #16
 800e73e:	d10f      	bne.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e740:	4b0a      	ldr	r3, [pc, #40]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e744:	4a09      	ldr	r2, [pc, #36]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e74a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800e74c:	e011      	b.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	3304      	adds	r3, #4
 800e752:	2102      	movs	r1, #2
 800e754:	4618      	mov	r0, r3
 800e756:	f001 fdcd 	bl	80102f4 <RCCEx_PLL2_Config>
 800e75a:	4603      	mov	r3, r0
 800e75c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800e75e:	e008      	b.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800e760:	2301      	movs	r3, #1
 800e762:	75fb      	strb	r3, [r7, #23]
      break;
 800e764:	e005      	b.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800e766:	bf00      	nop
 800e768:	e003      	b.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800e76a:	bf00      	nop
 800e76c:	58024400 	.word	0x58024400
      break;
 800e770:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e772:	7dfb      	ldrb	r3, [r7, #23]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d109      	bne.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e778:	4ba3      	ldr	r3, [pc, #652]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e77a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e77c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e784:	49a0      	ldr	r1, [pc, #640]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e786:	4313      	orrs	r3, r2
 800e788:	64cb      	str	r3, [r1, #76]	; 0x4c
 800e78a:	e001      	b.n	800e790 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e78c:	7dfb      	ldrb	r3, [r7, #23]
 800e78e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d047      	beq.n	800e82c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e7a4:	d030      	beq.n	800e808 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800e7a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e7aa:	d82a      	bhi.n	800e802 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e7ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e7b0:	d02c      	beq.n	800e80c <HAL_RCCEx_PeriphCLKConfig+0x378>
 800e7b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e7b6:	d824      	bhi.n	800e802 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e7b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7bc:	d018      	beq.n	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800e7be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7c2:	d81e      	bhi.n	800e802 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d003      	beq.n	800e7d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e7c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7cc:	d007      	beq.n	800e7de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e7ce:	e018      	b.n	800e802 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7d0:	4b8d      	ldr	r3, [pc, #564]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d4:	4a8c      	ldr	r2, [pc, #560]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e7d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e7da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e7dc:	e017      	b.n	800e80e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	2100      	movs	r1, #0
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f001 fd85 	bl	80102f4 <RCCEx_PLL2_Config>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e7ee:	e00e      	b.n	800e80e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	3324      	adds	r3, #36	; 0x24
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f001 fe2e 	bl	8010458 <RCCEx_PLL3_Config>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e800:	e005      	b.n	800e80e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e802:	2301      	movs	r3, #1
 800e804:	75fb      	strb	r3, [r7, #23]
      break;
 800e806:	e002      	b.n	800e80e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800e808:	bf00      	nop
 800e80a:	e000      	b.n	800e80e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800e80c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e80e:	7dfb      	ldrb	r3, [r7, #23]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d109      	bne.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e814:	4b7c      	ldr	r3, [pc, #496]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e818:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e820:	4979      	ldr	r1, [pc, #484]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e822:	4313      	orrs	r3, r2
 800e824:	650b      	str	r3, [r1, #80]	; 0x50
 800e826:	e001      	b.n	800e82c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e828:	7dfb      	ldrb	r3, [r7, #23]
 800e82a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e834:	2b00      	cmp	r3, #0
 800e836:	d049      	beq.n	800e8cc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e83c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e840:	d02e      	beq.n	800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800e842:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e846:	d828      	bhi.n	800e89a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e848:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e84c:	d02a      	beq.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800e84e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e852:	d822      	bhi.n	800e89a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e854:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e858:	d026      	beq.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800e85a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e85e:	d81c      	bhi.n	800e89a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e860:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e864:	d010      	beq.n	800e888 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800e866:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e86a:	d816      	bhi.n	800e89a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d01d      	beq.n	800e8ac <HAL_RCCEx_PeriphCLKConfig+0x418>
 800e870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e874:	d111      	bne.n	800e89a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	3304      	adds	r3, #4
 800e87a:	2101      	movs	r1, #1
 800e87c:	4618      	mov	r0, r3
 800e87e:	f001 fd39 	bl	80102f4 <RCCEx_PLL2_Config>
 800e882:	4603      	mov	r3, r0
 800e884:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800e886:	e012      	b.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	3324      	adds	r3, #36	; 0x24
 800e88c:	2101      	movs	r1, #1
 800e88e:	4618      	mov	r0, r3
 800e890:	f001 fde2 	bl	8010458 <RCCEx_PLL3_Config>
 800e894:	4603      	mov	r3, r0
 800e896:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800e898:	e009      	b.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e89a:	2301      	movs	r3, #1
 800e89c:	75fb      	strb	r3, [r7, #23]
      break;
 800e89e:	e006      	b.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e8a0:	bf00      	nop
 800e8a2:	e004      	b.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e8a4:	bf00      	nop
 800e8a6:	e002      	b.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e8a8:	bf00      	nop
 800e8aa:	e000      	b.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e8ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e8ae:	7dfb      	ldrb	r3, [r7, #23]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d109      	bne.n	800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e8b4:	4b54      	ldr	r3, [pc, #336]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e8b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8c0:	4951      	ldr	r1, [pc, #324]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	650b      	str	r3, [r1, #80]	; 0x50
 800e8c6:	e001      	b.n	800e8cc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8c8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d04b      	beq.n	800e970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e8de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8e2:	d02e      	beq.n	800e942 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800e8e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8e8:	d828      	bhi.n	800e93c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8ee:	d02a      	beq.n	800e946 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800e8f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8f4:	d822      	bhi.n	800e93c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e8f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e8fa:	d026      	beq.n	800e94a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800e8fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e900:	d81c      	bhi.n	800e93c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e906:	d010      	beq.n	800e92a <HAL_RCCEx_PeriphCLKConfig+0x496>
 800e908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e90c:	d816      	bhi.n	800e93c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d01d      	beq.n	800e94e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800e912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e916:	d111      	bne.n	800e93c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	3304      	adds	r3, #4
 800e91c:	2101      	movs	r1, #1
 800e91e:	4618      	mov	r0, r3
 800e920:	f001 fce8 	bl	80102f4 <RCCEx_PLL2_Config>
 800e924:	4603      	mov	r3, r0
 800e926:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800e928:	e012      	b.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	3324      	adds	r3, #36	; 0x24
 800e92e:	2101      	movs	r1, #1
 800e930:	4618      	mov	r0, r3
 800e932:	f001 fd91 	bl	8010458 <RCCEx_PLL3_Config>
 800e936:	4603      	mov	r3, r0
 800e938:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800e93a:	e009      	b.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800e93c:	2301      	movs	r3, #1
 800e93e:	75fb      	strb	r3, [r7, #23]
      break;
 800e940:	e006      	b.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e942:	bf00      	nop
 800e944:	e004      	b.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e946:	bf00      	nop
 800e948:	e002      	b.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e94a:	bf00      	nop
 800e94c:	e000      	b.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e94e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e950:	7dfb      	ldrb	r3, [r7, #23]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d10a      	bne.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e956:	4b2c      	ldr	r3, [pc, #176]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e95a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e964:	4928      	ldr	r1, [pc, #160]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e966:	4313      	orrs	r3, r2
 800e968:	658b      	str	r3, [r1, #88]	; 0x58
 800e96a:	e001      	b.n	800e970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e96c:	7dfb      	ldrb	r3, [r7, #23]
 800e96e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d02f      	beq.n	800e9dc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e984:	d00e      	beq.n	800e9a4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800e986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e98a:	d814      	bhi.n	800e9b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d015      	beq.n	800e9bc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800e990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e994:	d10f      	bne.n	800e9b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e996:	4b1c      	ldr	r3, [pc, #112]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e99a:	4a1b      	ldr	r2, [pc, #108]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e99c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e9a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800e9a2:	e00c      	b.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	3304      	adds	r3, #4
 800e9a8:	2101      	movs	r1, #1
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f001 fca2 	bl	80102f4 <RCCEx_PLL2_Config>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800e9b4:	e003      	b.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	75fb      	strb	r3, [r7, #23]
      break;
 800e9ba:	e000      	b.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800e9bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e9be:	7dfb      	ldrb	r3, [r7, #23]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d109      	bne.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e9c4:	4b10      	ldr	r3, [pc, #64]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e9c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9d0:	490d      	ldr	r1, [pc, #52]	; (800ea08 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	650b      	str	r3, [r1, #80]	; 0x50
 800e9d6:	e001      	b.n	800e9dc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9d8:	7dfb      	ldrb	r3, [r7, #23]
 800e9da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d034      	beq.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ec:	2b03      	cmp	r3, #3
 800e9ee:	d81d      	bhi.n	800ea2c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800e9f0:	a201      	add	r2, pc, #4	; (adr r2, 800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800e9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f6:	bf00      	nop
 800e9f8:	0800ea33 	.word	0x0800ea33
 800e9fc:	0800ea0d 	.word	0x0800ea0d
 800ea00:	0800ea1b 	.word	0x0800ea1b
 800ea04:	0800ea33 	.word	0x0800ea33
 800ea08:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea0c:	4bb1      	ldr	r3, [pc, #708]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ea0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea10:	4ab0      	ldr	r2, [pc, #704]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ea12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ea16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ea18:	e00c      	b.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	3304      	adds	r3, #4
 800ea1e:	2102      	movs	r1, #2
 800ea20:	4618      	mov	r0, r3
 800ea22:	f001 fc67 	bl	80102f4 <RCCEx_PLL2_Config>
 800ea26:	4603      	mov	r3, r0
 800ea28:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ea2a:	e003      	b.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	75fb      	strb	r3, [r7, #23]
      break;
 800ea30:	e000      	b.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800ea32:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ea34:	7dfb      	ldrb	r3, [r7, #23]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d109      	bne.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ea3a:	4ba6      	ldr	r3, [pc, #664]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ea3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea3e:	f023 0203 	bic.w	r2, r3, #3
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea46:	49a3      	ldr	r1, [pc, #652]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ea4c:	e001      	b.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea4e:	7dfb      	ldrb	r3, [r7, #23]
 800ea50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	f000 8086 	beq.w	800eb6c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ea60:	4b9d      	ldr	r3, [pc, #628]	; (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4a9c      	ldr	r2, [pc, #624]	; (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800ea66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ea6c:	f7f7 fd56 	bl	800651c <HAL_GetTick>
 800ea70:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ea72:	e009      	b.n	800ea88 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ea74:	f7f7 fd52 	bl	800651c <HAL_GetTick>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	1ad3      	subs	r3, r2, r3
 800ea7e:	2b64      	cmp	r3, #100	; 0x64
 800ea80:	d902      	bls.n	800ea88 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800ea82:	2303      	movs	r3, #3
 800ea84:	75fb      	strb	r3, [r7, #23]
        break;
 800ea86:	e005      	b.n	800ea94 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ea88:	4b93      	ldr	r3, [pc, #588]	; (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d0ef      	beq.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800ea94:	7dfb      	ldrb	r3, [r7, #23]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d166      	bne.n	800eb68 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ea9a:	4b8e      	ldr	r3, [pc, #568]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ea9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eaa4:	4053      	eors	r3, r2
 800eaa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d013      	beq.n	800ead6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800eaae:	4b89      	ldr	r3, [pc, #548]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eab6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800eab8:	4b86      	ldr	r3, [pc, #536]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eaba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eabc:	4a85      	ldr	r2, [pc, #532]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eabe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eac2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800eac4:	4b83      	ldr	r3, [pc, #524]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eac8:	4a82      	ldr	r2, [pc, #520]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eaca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eace:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ead0:	4a80      	ldr	r2, [pc, #512]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eadc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eae0:	d115      	bne.n	800eb0e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eae2:	f7f7 fd1b 	bl	800651c <HAL_GetTick>
 800eae6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eae8:	e00b      	b.n	800eb02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eaea:	f7f7 fd17 	bl	800651c <HAL_GetTick>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	1ad3      	subs	r3, r2, r3
 800eaf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d902      	bls.n	800eb02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800eafc:	2303      	movs	r3, #3
 800eafe:	75fb      	strb	r3, [r7, #23]
            break;
 800eb00:	e005      	b.n	800eb0e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eb02:	4b74      	ldr	r3, [pc, #464]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eb04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb06:	f003 0302 	and.w	r3, r3, #2
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d0ed      	beq.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800eb0e:	7dfb      	ldrb	r3, [r7, #23]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d126      	bne.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb22:	d10d      	bne.n	800eb40 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800eb24:	4b6b      	ldr	r3, [pc, #428]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eb26:	691b      	ldr	r3, [r3, #16]
 800eb28:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb32:	0919      	lsrs	r1, r3, #4
 800eb34:	4b69      	ldr	r3, [pc, #420]	; (800ecdc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800eb36:	400b      	ands	r3, r1
 800eb38:	4966      	ldr	r1, [pc, #408]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eb3a:	4313      	orrs	r3, r2
 800eb3c:	610b      	str	r3, [r1, #16]
 800eb3e:	e005      	b.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800eb40:	4b64      	ldr	r3, [pc, #400]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eb42:	691b      	ldr	r3, [r3, #16]
 800eb44:	4a63      	ldr	r2, [pc, #396]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eb46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eb4a:	6113      	str	r3, [r2, #16]
 800eb4c:	4b61      	ldr	r3, [pc, #388]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eb4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eb5a:	495e      	ldr	r1, [pc, #376]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	670b      	str	r3, [r1, #112]	; 0x70
 800eb60:	e004      	b.n	800eb6c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800eb62:	7dfb      	ldrb	r3, [r7, #23]
 800eb64:	75bb      	strb	r3, [r7, #22]
 800eb66:	e001      	b.n	800eb6c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb68:	7dfb      	ldrb	r3, [r7, #23]
 800eb6a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f003 0301 	and.w	r3, r3, #1
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d07e      	beq.n	800ec76 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb7c:	2b28      	cmp	r3, #40	; 0x28
 800eb7e:	d867      	bhi.n	800ec50 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800eb80:	a201      	add	r2, pc, #4	; (adr r2, 800eb88 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800eb82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb86:	bf00      	nop
 800eb88:	0800ec57 	.word	0x0800ec57
 800eb8c:	0800ec51 	.word	0x0800ec51
 800eb90:	0800ec51 	.word	0x0800ec51
 800eb94:	0800ec51 	.word	0x0800ec51
 800eb98:	0800ec51 	.word	0x0800ec51
 800eb9c:	0800ec51 	.word	0x0800ec51
 800eba0:	0800ec51 	.word	0x0800ec51
 800eba4:	0800ec51 	.word	0x0800ec51
 800eba8:	0800ec2d 	.word	0x0800ec2d
 800ebac:	0800ec51 	.word	0x0800ec51
 800ebb0:	0800ec51 	.word	0x0800ec51
 800ebb4:	0800ec51 	.word	0x0800ec51
 800ebb8:	0800ec51 	.word	0x0800ec51
 800ebbc:	0800ec51 	.word	0x0800ec51
 800ebc0:	0800ec51 	.word	0x0800ec51
 800ebc4:	0800ec51 	.word	0x0800ec51
 800ebc8:	0800ec3f 	.word	0x0800ec3f
 800ebcc:	0800ec51 	.word	0x0800ec51
 800ebd0:	0800ec51 	.word	0x0800ec51
 800ebd4:	0800ec51 	.word	0x0800ec51
 800ebd8:	0800ec51 	.word	0x0800ec51
 800ebdc:	0800ec51 	.word	0x0800ec51
 800ebe0:	0800ec51 	.word	0x0800ec51
 800ebe4:	0800ec51 	.word	0x0800ec51
 800ebe8:	0800ec57 	.word	0x0800ec57
 800ebec:	0800ec51 	.word	0x0800ec51
 800ebf0:	0800ec51 	.word	0x0800ec51
 800ebf4:	0800ec51 	.word	0x0800ec51
 800ebf8:	0800ec51 	.word	0x0800ec51
 800ebfc:	0800ec51 	.word	0x0800ec51
 800ec00:	0800ec51 	.word	0x0800ec51
 800ec04:	0800ec51 	.word	0x0800ec51
 800ec08:	0800ec57 	.word	0x0800ec57
 800ec0c:	0800ec51 	.word	0x0800ec51
 800ec10:	0800ec51 	.word	0x0800ec51
 800ec14:	0800ec51 	.word	0x0800ec51
 800ec18:	0800ec51 	.word	0x0800ec51
 800ec1c:	0800ec51 	.word	0x0800ec51
 800ec20:	0800ec51 	.word	0x0800ec51
 800ec24:	0800ec51 	.word	0x0800ec51
 800ec28:	0800ec57 	.word	0x0800ec57
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	3304      	adds	r3, #4
 800ec30:	2101      	movs	r1, #1
 800ec32:	4618      	mov	r0, r3
 800ec34:	f001 fb5e 	bl	80102f4 <RCCEx_PLL2_Config>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ec3c:	e00c      	b.n	800ec58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	3324      	adds	r3, #36	; 0x24
 800ec42:	2101      	movs	r1, #1
 800ec44:	4618      	mov	r0, r3
 800ec46:	f001 fc07 	bl	8010458 <RCCEx_PLL3_Config>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ec4e:	e003      	b.n	800ec58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ec50:	2301      	movs	r3, #1
 800ec52:	75fb      	strb	r3, [r7, #23]
      break;
 800ec54:	e000      	b.n	800ec58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800ec56:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ec58:	7dfb      	ldrb	r3, [r7, #23]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d109      	bne.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ec5e:	4b1d      	ldr	r3, [pc, #116]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ec60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec62:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec6a:	491a      	ldr	r1, [pc, #104]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ec6c:	4313      	orrs	r3, r2
 800ec6e:	654b      	str	r3, [r1, #84]	; 0x54
 800ec70:	e001      	b.n	800ec76 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec72:	7dfb      	ldrb	r3, [r7, #23]
 800ec74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f003 0302 	and.w	r3, r3, #2
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d03e      	beq.n	800ed00 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec86:	2b05      	cmp	r3, #5
 800ec88:	d820      	bhi.n	800eccc <HAL_RCCEx_PeriphCLKConfig+0x838>
 800ec8a:	a201      	add	r2, pc, #4	; (adr r2, 800ec90 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800ec8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec90:	0800ece1 	.word	0x0800ece1
 800ec94:	0800eca9 	.word	0x0800eca9
 800ec98:	0800ecbb 	.word	0x0800ecbb
 800ec9c:	0800ece1 	.word	0x0800ece1
 800eca0:	0800ece1 	.word	0x0800ece1
 800eca4:	0800ece1 	.word	0x0800ece1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	3304      	adds	r3, #4
 800ecac:	2101      	movs	r1, #1
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f001 fb20 	bl	80102f4 <RCCEx_PLL2_Config>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ecb8:	e013      	b.n	800ece2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	3324      	adds	r3, #36	; 0x24
 800ecbe:	2101      	movs	r1, #1
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f001 fbc9 	bl	8010458 <RCCEx_PLL3_Config>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ecca:	e00a      	b.n	800ece2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800eccc:	2301      	movs	r3, #1
 800ecce:	75fb      	strb	r3, [r7, #23]
      break;
 800ecd0:	e007      	b.n	800ece2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800ecd2:	bf00      	nop
 800ecd4:	58024400 	.word	0x58024400
 800ecd8:	58024800 	.word	0x58024800
 800ecdc:	00ffffcf 	.word	0x00ffffcf
      break;
 800ece0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ece2:	7dfb      	ldrb	r3, [r7, #23]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d109      	bne.n	800ecfc <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ece8:	4b9f      	ldr	r3, [pc, #636]	; (800ef68 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ecea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecec:	f023 0207 	bic.w	r2, r3, #7
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecf4:	499c      	ldr	r1, [pc, #624]	; (800ef68 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	654b      	str	r3, [r1, #84]	; 0x54
 800ecfa:	e001      	b.n	800ed00 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecfc:	7dfb      	ldrb	r3, [r7, #23]
 800ecfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f003 0304 	and.w	r3, r3, #4
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d039      	beq.n	800ed80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed12:	2b05      	cmp	r3, #5
 800ed14:	d820      	bhi.n	800ed58 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800ed16:	a201      	add	r2, pc, #4	; (adr r2, 800ed1c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800ed18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed1c:	0800ed5f 	.word	0x0800ed5f
 800ed20:	0800ed35 	.word	0x0800ed35
 800ed24:	0800ed47 	.word	0x0800ed47
 800ed28:	0800ed5f 	.word	0x0800ed5f
 800ed2c:	0800ed5f 	.word	0x0800ed5f
 800ed30:	0800ed5f 	.word	0x0800ed5f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	3304      	adds	r3, #4
 800ed38:	2101      	movs	r1, #1
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f001 fada 	bl	80102f4 <RCCEx_PLL2_Config>
 800ed40:	4603      	mov	r3, r0
 800ed42:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ed44:	e00c      	b.n	800ed60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	3324      	adds	r3, #36	; 0x24
 800ed4a:	2101      	movs	r1, #1
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f001 fb83 	bl	8010458 <RCCEx_PLL3_Config>
 800ed52:	4603      	mov	r3, r0
 800ed54:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ed56:	e003      	b.n	800ed60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	75fb      	strb	r3, [r7, #23]
      break;
 800ed5c:	e000      	b.n	800ed60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800ed5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ed60:	7dfb      	ldrb	r3, [r7, #23]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d10a      	bne.n	800ed7c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ed66:	4b80      	ldr	r3, [pc, #512]	; (800ef68 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ed68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed6a:	f023 0207 	bic.w	r2, r3, #7
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed74:	497c      	ldr	r1, [pc, #496]	; (800ef68 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ed76:	4313      	orrs	r3, r2
 800ed78:	658b      	str	r3, [r1, #88]	; 0x58
 800ed7a:	e001      	b.n	800ed80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed7c:	7dfb      	ldrb	r3, [r7, #23]
 800ed7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f003 0320 	and.w	r3, r3, #32
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d04b      	beq.n	800ee24 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ed96:	d02e      	beq.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800ed98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ed9c:	d828      	bhi.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800ed9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eda2:	d02a      	beq.n	800edfa <HAL_RCCEx_PeriphCLKConfig+0x966>
 800eda4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eda8:	d822      	bhi.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800edaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800edae:	d026      	beq.n	800edfe <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800edb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800edb4:	d81c      	bhi.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800edb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800edba:	d010      	beq.n	800edde <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800edbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800edc0:	d816      	bhi.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d01d      	beq.n	800ee02 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800edc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800edca:	d111      	bne.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	3304      	adds	r3, #4
 800edd0:	2100      	movs	r1, #0
 800edd2:	4618      	mov	r0, r3
 800edd4:	f001 fa8e 	bl	80102f4 <RCCEx_PLL2_Config>
 800edd8:	4603      	mov	r3, r0
 800edda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800eddc:	e012      	b.n	800ee04 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	3324      	adds	r3, #36	; 0x24
 800ede2:	2102      	movs	r1, #2
 800ede4:	4618      	mov	r0, r3
 800ede6:	f001 fb37 	bl	8010458 <RCCEx_PLL3_Config>
 800edea:	4603      	mov	r3, r0
 800edec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800edee:	e009      	b.n	800ee04 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800edf0:	2301      	movs	r3, #1
 800edf2:	75fb      	strb	r3, [r7, #23]
      break;
 800edf4:	e006      	b.n	800ee04 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800edf6:	bf00      	nop
 800edf8:	e004      	b.n	800ee04 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800edfa:	bf00      	nop
 800edfc:	e002      	b.n	800ee04 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800edfe:	bf00      	nop
 800ee00:	e000      	b.n	800ee04 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800ee02:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ee04:	7dfb      	ldrb	r3, [r7, #23]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d10a      	bne.n	800ee20 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ee0a:	4b57      	ldr	r3, [pc, #348]	; (800ef68 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ee0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee18:	4953      	ldr	r1, [pc, #332]	; (800ef68 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	654b      	str	r3, [r1, #84]	; 0x54
 800ee1e:	e001      	b.n	800ee24 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee20:	7dfb      	ldrb	r3, [r7, #23]
 800ee22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d04b      	beq.n	800eec8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ee36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ee3a:	d02e      	beq.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800ee3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ee40:	d828      	bhi.n	800ee94 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ee42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee46:	d02a      	beq.n	800ee9e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800ee48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee4c:	d822      	bhi.n	800ee94 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ee4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ee52:	d026      	beq.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800ee54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ee58:	d81c      	bhi.n	800ee94 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ee5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee5e:	d010      	beq.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800ee60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee64:	d816      	bhi.n	800ee94 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d01d      	beq.n	800eea6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800ee6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee6e:	d111      	bne.n	800ee94 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	3304      	adds	r3, #4
 800ee74:	2100      	movs	r1, #0
 800ee76:	4618      	mov	r0, r3
 800ee78:	f001 fa3c 	bl	80102f4 <RCCEx_PLL2_Config>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ee80:	e012      	b.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	3324      	adds	r3, #36	; 0x24
 800ee86:	2102      	movs	r1, #2
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f001 fae5 	bl	8010458 <RCCEx_PLL3_Config>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ee92:	e009      	b.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ee94:	2301      	movs	r3, #1
 800ee96:	75fb      	strb	r3, [r7, #23]
      break;
 800ee98:	e006      	b.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800ee9a:	bf00      	nop
 800ee9c:	e004      	b.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800ee9e:	bf00      	nop
 800eea0:	e002      	b.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800eea2:	bf00      	nop
 800eea4:	e000      	b.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800eea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800eea8:	7dfb      	ldrb	r3, [r7, #23]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d10a      	bne.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800eeae:	4b2e      	ldr	r3, [pc, #184]	; (800ef68 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800eeb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eeb2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eebc:	492a      	ldr	r1, [pc, #168]	; (800ef68 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800eebe:	4313      	orrs	r3, r2
 800eec0:	658b      	str	r3, [r1, #88]	; 0x58
 800eec2:	e001      	b.n	800eec8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eec4:	7dfb      	ldrb	r3, [r7, #23]
 800eec6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d04d      	beq.n	800ef70 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eeda:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800eede:	d02e      	beq.n	800ef3e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800eee0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800eee4:	d828      	bhi.n	800ef38 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800eee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eeea:	d02a      	beq.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800eeec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eef0:	d822      	bhi.n	800ef38 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800eef2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800eef6:	d026      	beq.n	800ef46 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800eef8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800eefc:	d81c      	bhi.n	800ef38 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800eefe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef02:	d010      	beq.n	800ef26 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800ef04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef08:	d816      	bhi.n	800ef38 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d01d      	beq.n	800ef4a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800ef0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef12:	d111      	bne.n	800ef38 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	3304      	adds	r3, #4
 800ef18:	2100      	movs	r1, #0
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f001 f9ea 	bl	80102f4 <RCCEx_PLL2_Config>
 800ef20:	4603      	mov	r3, r0
 800ef22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ef24:	e012      	b.n	800ef4c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	3324      	adds	r3, #36	; 0x24
 800ef2a:	2102      	movs	r1, #2
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f001 fa93 	bl	8010458 <RCCEx_PLL3_Config>
 800ef32:	4603      	mov	r3, r0
 800ef34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ef36:	e009      	b.n	800ef4c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ef38:	2301      	movs	r3, #1
 800ef3a:	75fb      	strb	r3, [r7, #23]
      break;
 800ef3c:	e006      	b.n	800ef4c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ef3e:	bf00      	nop
 800ef40:	e004      	b.n	800ef4c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ef42:	bf00      	nop
 800ef44:	e002      	b.n	800ef4c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ef46:	bf00      	nop
 800ef48:	e000      	b.n	800ef4c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ef4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ef4c:	7dfb      	ldrb	r3, [r7, #23]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d10c      	bne.n	800ef6c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ef52:	4b05      	ldr	r3, [pc, #20]	; (800ef68 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ef54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ef60:	4901      	ldr	r1, [pc, #4]	; (800ef68 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ef62:	4313      	orrs	r3, r2
 800ef64:	658b      	str	r3, [r1, #88]	; 0x58
 800ef66:	e003      	b.n	800ef70 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800ef68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef6c:	7dfb      	ldrb	r3, [r7, #23]
 800ef6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f003 0308 	and.w	r3, r3, #8
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d018      	beq.n	800efae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef84:	d10a      	bne.n	800ef9c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	3324      	adds	r3, #36	; 0x24
 800ef8a:	2102      	movs	r1, #2
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f001 fa63 	bl	8010458 <RCCEx_PLL3_Config>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d001      	beq.n	800ef9c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800ef98:	2301      	movs	r3, #1
 800ef9a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ef9c:	4b8a      	ldr	r3, [pc, #552]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ef9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efa0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efa8:	4987      	ldr	r1, [pc, #540]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800efaa:	4313      	orrs	r3, r2
 800efac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f003 0310 	and.w	r3, r3, #16
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d01a      	beq.n	800eff0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efc4:	d10a      	bne.n	800efdc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	3324      	adds	r3, #36	; 0x24
 800efca:	2102      	movs	r1, #2
 800efcc:	4618      	mov	r0, r3
 800efce:	f001 fa43 	bl	8010458 <RCCEx_PLL3_Config>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d001      	beq.n	800efdc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800efd8:	2301      	movs	r3, #1
 800efda:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800efdc:	4b7a      	ldr	r3, [pc, #488]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800efde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800efe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efea:	4977      	ldr	r1, [pc, #476]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800efec:	4313      	orrs	r3, r2
 800efee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d034      	beq.n	800f066 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f006:	d01d      	beq.n	800f044 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800f008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f00c:	d817      	bhi.n	800f03e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d003      	beq.n	800f01a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800f012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f016:	d009      	beq.n	800f02c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800f018:	e011      	b.n	800f03e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	3304      	adds	r3, #4
 800f01e:	2100      	movs	r1, #0
 800f020:	4618      	mov	r0, r3
 800f022:	f001 f967 	bl	80102f4 <RCCEx_PLL2_Config>
 800f026:	4603      	mov	r3, r0
 800f028:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800f02a:	e00c      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	3324      	adds	r3, #36	; 0x24
 800f030:	2102      	movs	r1, #2
 800f032:	4618      	mov	r0, r3
 800f034:	f001 fa10 	bl	8010458 <RCCEx_PLL3_Config>
 800f038:	4603      	mov	r3, r0
 800f03a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800f03c:	e003      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f03e:	2301      	movs	r3, #1
 800f040:	75fb      	strb	r3, [r7, #23]
      break;
 800f042:	e000      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800f044:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f046:	7dfb      	ldrb	r3, [r7, #23]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d10a      	bne.n	800f062 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f04c:	4b5e      	ldr	r3, [pc, #376]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f04e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f050:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f05a:	495b      	ldr	r1, [pc, #364]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f05c:	4313      	orrs	r3, r2
 800f05e:	658b      	str	r3, [r1, #88]	; 0x58
 800f060:	e001      	b.n	800f066 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f062:	7dfb      	ldrb	r3, [r7, #23]
 800f064:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d033      	beq.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f078:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f07c:	d01c      	beq.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800f07e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f082:	d816      	bhi.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f088:	d003      	beq.n	800f092 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800f08a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f08e:	d007      	beq.n	800f0a0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800f090:	e00f      	b.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f092:	4b4d      	ldr	r3, [pc, #308]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f096:	4a4c      	ldr	r2, [pc, #304]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f09c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800f09e:	e00c      	b.n	800f0ba <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	3324      	adds	r3, #36	; 0x24
 800f0a4:	2101      	movs	r1, #1
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f001 f9d6 	bl	8010458 <RCCEx_PLL3_Config>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800f0b0:	e003      	b.n	800f0ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	75fb      	strb	r3, [r7, #23]
      break;
 800f0b6:	e000      	b.n	800f0ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800f0b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f0ba:	7dfb      	ldrb	r3, [r7, #23]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d10a      	bne.n	800f0d6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f0c0:	4b41      	ldr	r3, [pc, #260]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f0c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0ce:	493e      	ldr	r1, [pc, #248]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	654b      	str	r3, [r1, #84]	; 0x54
 800f0d4:	e001      	b.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0d6:	7dfb      	ldrb	r3, [r7, #23]
 800f0d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d029      	beq.n	800f13a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d003      	beq.n	800f0f6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800f0ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0f2:	d007      	beq.n	800f104 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800f0f4:	e00f      	b.n	800f116 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f0f6:	4b34      	ldr	r3, [pc, #208]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0fa:	4a33      	ldr	r2, [pc, #204]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f0fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f100:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800f102:	e00b      	b.n	800f11c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	3304      	adds	r3, #4
 800f108:	2102      	movs	r1, #2
 800f10a:	4618      	mov	r0, r3
 800f10c:	f001 f8f2 	bl	80102f4 <RCCEx_PLL2_Config>
 800f110:	4603      	mov	r3, r0
 800f112:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800f114:	e002      	b.n	800f11c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800f116:	2301      	movs	r3, #1
 800f118:	75fb      	strb	r3, [r7, #23]
      break;
 800f11a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f11c:	7dfb      	ldrb	r3, [r7, #23]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d109      	bne.n	800f136 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f122:	4b29      	ldr	r3, [pc, #164]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f126:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f12e:	4926      	ldr	r1, [pc, #152]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f130:	4313      	orrs	r3, r2
 800f132:	64cb      	str	r3, [r1, #76]	; 0x4c
 800f134:	e001      	b.n	800f13a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f136:	7dfb      	ldrb	r3, [r7, #23]
 800f138:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00a      	beq.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	3324      	adds	r3, #36	; 0x24
 800f14a:	2102      	movs	r1, #2
 800f14c:	4618      	mov	r0, r3
 800f14e:	f001 f983 	bl	8010458 <RCCEx_PLL3_Config>
 800f152:	4603      	mov	r3, r0
 800f154:	2b00      	cmp	r3, #0
 800f156:	d001      	beq.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800f158:	2301      	movs	r3, #1
 800f15a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f164:	2b00      	cmp	r3, #0
 800f166:	d033      	beq.n	800f1d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f16c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f170:	d017      	beq.n	800f1a2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800f172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f176:	d811      	bhi.n	800f19c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f17c:	d013      	beq.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800f17e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f182:	d80b      	bhi.n	800f19c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f184:	2b00      	cmp	r3, #0
 800f186:	d010      	beq.n	800f1aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800f188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f18c:	d106      	bne.n	800f19c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f18e:	4b0e      	ldr	r3, [pc, #56]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f192:	4a0d      	ldr	r2, [pc, #52]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f198:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800f19a:	e007      	b.n	800f1ac <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f19c:	2301      	movs	r3, #1
 800f19e:	75fb      	strb	r3, [r7, #23]
      break;
 800f1a0:	e004      	b.n	800f1ac <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800f1a2:	bf00      	nop
 800f1a4:	e002      	b.n	800f1ac <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800f1a6:	bf00      	nop
 800f1a8:	e000      	b.n	800f1ac <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800f1aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f1ac:	7dfb      	ldrb	r3, [r7, #23]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d10c      	bne.n	800f1cc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f1b2:	4b05      	ldr	r3, [pc, #20]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1be:	4902      	ldr	r1, [pc, #8]	; (800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	654b      	str	r3, [r1, #84]	; 0x54
 800f1c4:	e004      	b.n	800f1d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800f1c6:	bf00      	nop
 800f1c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1cc:	7dfb      	ldrb	r3, [r7, #23]
 800f1ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d008      	beq.n	800f1ee <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f1dc:	4b29      	ldr	r3, [pc, #164]	; (800f284 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1e8:	4926      	ldr	r1, [pc, #152]	; (800f284 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d008      	beq.n	800f20c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f1fa:	4b22      	ldr	r3, [pc, #136]	; (800f284 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f1fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f206:	491f      	ldr	r1, [pc, #124]	; (800f284 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f208:	4313      	orrs	r3, r2
 800f20a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f214:	2b00      	cmp	r3, #0
 800f216:	d00d      	beq.n	800f234 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f218:	4b1a      	ldr	r3, [pc, #104]	; (800f284 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f21a:	691b      	ldr	r3, [r3, #16]
 800f21c:	4a19      	ldr	r2, [pc, #100]	; (800f284 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f21e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f222:	6113      	str	r3, [r2, #16]
 800f224:	4b17      	ldr	r3, [pc, #92]	; (800f284 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f226:	691a      	ldr	r2, [r3, #16]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f22e:	4915      	ldr	r1, [pc, #84]	; (800f284 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f230:	4313      	orrs	r3, r2
 800f232:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	da08      	bge.n	800f24e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f23c:	4b11      	ldr	r3, [pc, #68]	; (800f284 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f23e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f240:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f248:	490e      	ldr	r1, [pc, #56]	; (800f284 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f24a:	4313      	orrs	r3, r2
 800f24c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f256:	2b00      	cmp	r3, #0
 800f258:	d009      	beq.n	800f26e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f25a:	4b0a      	ldr	r3, [pc, #40]	; (800f284 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f25c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f25e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f268:	4906      	ldr	r1, [pc, #24]	; (800f284 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f26a:	4313      	orrs	r3, r2
 800f26c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800f26e:	7dbb      	ldrb	r3, [r7, #22]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d101      	bne.n	800f278 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800f274:	2300      	movs	r3, #0
 800f276:	e000      	b.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800f278:	2301      	movs	r3, #1
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3718      	adds	r7, #24
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	58024400 	.word	0x58024400

0800f288 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b090      	sub	sp, #64	; 0x40
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f296:	f040 8089 	bne.w	800f3ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800f29a:	4b95      	ldr	r3, [pc, #596]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f29e:	f003 0307 	and.w	r3, r3, #7
 800f2a2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800f2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a6:	2b04      	cmp	r3, #4
 800f2a8:	d87d      	bhi.n	800f3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800f2aa:	a201      	add	r2, pc, #4	; (adr r2, 800f2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800f2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b0:	0800f2c5 	.word	0x0800f2c5
 800f2b4:	0800f2e9 	.word	0x0800f2e9
 800f2b8:	0800f30d 	.word	0x0800f30d
 800f2bc:	0800f3a1 	.word	0x0800f3a1
 800f2c0:	0800f331 	.word	0x0800f331
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f2c4:	4b8a      	ldr	r3, [pc, #552]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f2d0:	d107      	bne.n	800f2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f2d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f000 feba 	bl	8010050 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800f2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f2e0:	e3ef      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f2e6:	e3ec      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f2e8:	4b81      	ldr	r3, [pc, #516]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f2f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f2f4:	d107      	bne.n	800f306 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2f6:	f107 0318 	add.w	r3, r7, #24
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f000 fc00 	bl	800fb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f304:	e3dd      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f306:	2300      	movs	r3, #0
 800f308:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f30a:	e3da      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f30c:	4b78      	ldr	r3, [pc, #480]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f318:	d107      	bne.n	800f32a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f31a:	f107 030c 	add.w	r3, r7, #12
 800f31e:	4618      	mov	r0, r3
 800f320:	f000 fd42 	bl	800fda8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f328:	e3cb      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f32a:	2300      	movs	r3, #0
 800f32c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f32e:	e3c8      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f330:	4b6f      	ldr	r3, [pc, #444]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f334:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f338:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f33a:	4b6d      	ldr	r3, [pc, #436]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f003 0304 	and.w	r3, r3, #4
 800f342:	2b04      	cmp	r3, #4
 800f344:	d10c      	bne.n	800f360 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800f346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d109      	bne.n	800f360 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f34c:	4b68      	ldr	r3, [pc, #416]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	08db      	lsrs	r3, r3, #3
 800f352:	f003 0303 	and.w	r3, r3, #3
 800f356:	4a67      	ldr	r2, [pc, #412]	; (800f4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800f358:	fa22 f303 	lsr.w	r3, r2, r3
 800f35c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f35e:	e01e      	b.n	800f39e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f360:	4b63      	ldr	r3, [pc, #396]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f36c:	d106      	bne.n	800f37c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800f36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f370:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f374:	d102      	bne.n	800f37c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f376:	4b60      	ldr	r3, [pc, #384]	; (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800f378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f37a:	e010      	b.n	800f39e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f37c:	4b5c      	ldr	r3, [pc, #368]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f388:	d106      	bne.n	800f398 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800f38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f38c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f390:	d102      	bne.n	800f398 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f392:	4b5a      	ldr	r3, [pc, #360]	; (800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800f394:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f396:	e002      	b.n	800f39e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f398:	2300      	movs	r3, #0
 800f39a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f39c:	e391      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f39e:	e390      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f3a0:	4b57      	ldr	r3, [pc, #348]	; (800f500 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800f3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f3a4:	e38d      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f3aa:	e38a      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3b2:	f040 80a7 	bne.w	800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800f3b6:	4b4e      	ldr	r3, [pc, #312]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3ba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800f3be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800f3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f3c6:	d054      	beq.n	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800f3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f3ce:	f200 808b 	bhi.w	800f4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800f3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f3d8:	f000 8083 	beq.w	800f4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800f3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f3e2:	f200 8081 	bhi.w	800f4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800f3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f3ec:	d02f      	beq.n	800f44e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800f3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f3f4:	d878      	bhi.n	800f4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800f3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d004      	beq.n	800f406 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800f3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f402:	d012      	beq.n	800f42a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800f404:	e070      	b.n	800f4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f406:	4b3a      	ldr	r3, [pc, #232]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f40e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f412:	d107      	bne.n	800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f418:	4618      	mov	r0, r3
 800f41a:	f000 fe19 	bl	8010050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f420:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f422:	e34e      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f424:	2300      	movs	r3, #0
 800f426:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f428:	e34b      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f42a:	4b31      	ldr	r3, [pc, #196]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f436:	d107      	bne.n	800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f438:	f107 0318 	add.w	r3, r7, #24
 800f43c:	4618      	mov	r0, r3
 800f43e:	f000 fb5f 	bl	800fb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f442:	69bb      	ldr	r3, [r7, #24]
 800f444:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f446:	e33c      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f448:	2300      	movs	r3, #0
 800f44a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f44c:	e339      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f44e:	4b28      	ldr	r3, [pc, #160]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f45a:	d107      	bne.n	800f46c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f45c:	f107 030c 	add.w	r3, r7, #12
 800f460:	4618      	mov	r0, r3
 800f462:	f000 fca1 	bl	800fda8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f46a:	e32a      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f46c:	2300      	movs	r3, #0
 800f46e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f470:	e327      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f472:	4b1f      	ldr	r3, [pc, #124]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f476:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f47a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f47c:	4b1c      	ldr	r3, [pc, #112]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f003 0304 	and.w	r3, r3, #4
 800f484:	2b04      	cmp	r3, #4
 800f486:	d10c      	bne.n	800f4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800f488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d109      	bne.n	800f4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f48e:	4b18      	ldr	r3, [pc, #96]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	08db      	lsrs	r3, r3, #3
 800f494:	f003 0303 	and.w	r3, r3, #3
 800f498:	4a16      	ldr	r2, [pc, #88]	; (800f4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800f49a:	fa22 f303 	lsr.w	r3, r2, r3
 800f49e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4a0:	e01e      	b.n	800f4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f4a2:	4b13      	ldr	r3, [pc, #76]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4ae:	d106      	bne.n	800f4be <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800f4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f4b6:	d102      	bne.n	800f4be <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f4b8:	4b0f      	ldr	r3, [pc, #60]	; (800f4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800f4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4bc:	e010      	b.n	800f4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f4be:	4b0c      	ldr	r3, [pc, #48]	; (800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f4ca:	d106      	bne.n	800f4da <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800f4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4d2:	d102      	bne.n	800f4da <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f4d4:	4b09      	ldr	r3, [pc, #36]	; (800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800f4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4d8:	e002      	b.n	800f4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f4de:	e2f0      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f4e0:	e2ef      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f4e2:	4b07      	ldr	r3, [pc, #28]	; (800f500 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800f4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f4e6:	e2ec      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f4ec:	e2e9      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f4ee:	bf00      	nop
 800f4f0:	58024400 	.word	0x58024400
 800f4f4:	03d09000 	.word	0x03d09000
 800f4f8:	003d0900 	.word	0x003d0900
 800f4fc:	017d7840 	.word	0x017d7840
 800f500:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f50a:	f040 809c 	bne.w	800f646 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800f50e:	4b9d      	ldr	r3, [pc, #628]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f512:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800f516:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800f518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f51e:	d054      	beq.n	800f5ca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800f520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f522:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f526:	f200 808b 	bhi.w	800f640 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f52c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f530:	f000 8083 	beq.w	800f63a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f536:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f53a:	f200 8081 	bhi.w	800f640 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f544:	d02f      	beq.n	800f5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800f546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f548:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f54c:	d878      	bhi.n	800f640 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f550:	2b00      	cmp	r3, #0
 800f552:	d004      	beq.n	800f55e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800f554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f556:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f55a:	d012      	beq.n	800f582 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800f55c:	e070      	b.n	800f640 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f55e:	4b89      	ldr	r3, [pc, #548]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f56a:	d107      	bne.n	800f57c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f56c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f570:	4618      	mov	r0, r3
 800f572:	f000 fd6d 	bl	8010050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f578:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f57a:	e2a2      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f57c:	2300      	movs	r3, #0
 800f57e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f580:	e29f      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f582:	4b80      	ldr	r3, [pc, #512]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f58a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f58e:	d107      	bne.n	800f5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f590:	f107 0318 	add.w	r3, r7, #24
 800f594:	4618      	mov	r0, r3
 800f596:	f000 fab3 	bl	800fb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800f59e:	e290      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f5a4:	e28d      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f5a6:	4b77      	ldr	r3, [pc, #476]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f5ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f5b2:	d107      	bne.n	800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5b4:	f107 030c 	add.w	r3, r7, #12
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f000 fbf5 	bl	800fda8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f5c2:	e27e      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f5c8:	e27b      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f5ca:	4b6e      	ldr	r3, [pc, #440]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f5cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f5d2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f5d4:	4b6b      	ldr	r3, [pc, #428]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	f003 0304 	and.w	r3, r3, #4
 800f5dc:	2b04      	cmp	r3, #4
 800f5de:	d10c      	bne.n	800f5fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d109      	bne.n	800f5fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f5e6:	4b67      	ldr	r3, [pc, #412]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	08db      	lsrs	r3, r3, #3
 800f5ec:	f003 0303 	and.w	r3, r3, #3
 800f5f0:	4a65      	ldr	r2, [pc, #404]	; (800f788 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f5f2:	fa22 f303 	lsr.w	r3, r2, r3
 800f5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5f8:	e01e      	b.n	800f638 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f5fa:	4b62      	ldr	r3, [pc, #392]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f606:	d106      	bne.n	800f616 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800f608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f60a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f60e:	d102      	bne.n	800f616 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f610:	4b5e      	ldr	r3, [pc, #376]	; (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800f612:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f614:	e010      	b.n	800f638 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f616:	4b5b      	ldr	r3, [pc, #364]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f61e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f622:	d106      	bne.n	800f632 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800f624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f62a:	d102      	bne.n	800f632 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f62c:	4b58      	ldr	r3, [pc, #352]	; (800f790 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800f62e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f630:	e002      	b.n	800f638 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f632:	2300      	movs	r3, #0
 800f634:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f636:	e244      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f638:	e243      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f63a:	4b56      	ldr	r3, [pc, #344]	; (800f794 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800f63c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f63e:	e240      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800f640:	2300      	movs	r3, #0
 800f642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f644:	e23d      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f64c:	f040 80a7 	bne.w	800f79e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800f650:	4b4c      	ldr	r3, [pc, #304]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f654:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f658:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f660:	d055      	beq.n	800f70e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800f662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f668:	f200 8096 	bhi.w	800f798 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800f66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f672:	f000 8084 	beq.w	800f77e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800f676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f678:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f67c:	f200 808c 	bhi.w	800f798 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800f680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f686:	d030      	beq.n	800f6ea <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800f688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f68e:	f200 8083 	bhi.w	800f798 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800f692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f694:	2b00      	cmp	r3, #0
 800f696:	d004      	beq.n	800f6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800f698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f69e:	d012      	beq.n	800f6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800f6a0:	e07a      	b.n	800f798 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f6a2:	4b38      	ldr	r3, [pc, #224]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f6aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f6ae:	d107      	bne.n	800f6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f6b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f000 fccb 	bl	8010050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f6be:	e200      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f6c4:	e1fd      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f6c6:	4b2f      	ldr	r3, [pc, #188]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f6ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f6d2:	d107      	bne.n	800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6d4:	f107 0318 	add.w	r3, r7, #24
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f000 fa11 	bl	800fb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f6de:	69bb      	ldr	r3, [r7, #24]
 800f6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f6e2:	e1ee      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f6e8:	e1eb      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f6ea:	4b26      	ldr	r3, [pc, #152]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f6f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6f6:	d107      	bne.n	800f708 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6f8:	f107 030c 	add.w	r3, r7, #12
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f000 fb53 	bl	800fda8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f706:	e1dc      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f708:	2300      	movs	r3, #0
 800f70a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f70c:	e1d9      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f70e:	4b1d      	ldr	r3, [pc, #116]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f712:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f716:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f718:	4b1a      	ldr	r3, [pc, #104]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f003 0304 	and.w	r3, r3, #4
 800f720:	2b04      	cmp	r3, #4
 800f722:	d10c      	bne.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800f724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f726:	2b00      	cmp	r3, #0
 800f728:	d109      	bne.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f72a:	4b16      	ldr	r3, [pc, #88]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	08db      	lsrs	r3, r3, #3
 800f730:	f003 0303 	and.w	r3, r3, #3
 800f734:	4a14      	ldr	r2, [pc, #80]	; (800f788 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f736:	fa22 f303 	lsr.w	r3, r2, r3
 800f73a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f73c:	e01e      	b.n	800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f73e:	4b11      	ldr	r3, [pc, #68]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f74a:	d106      	bne.n	800f75a <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800f74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f74e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f752:	d102      	bne.n	800f75a <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f754:	4b0d      	ldr	r3, [pc, #52]	; (800f78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800f756:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f758:	e010      	b.n	800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f75a:	4b0a      	ldr	r3, [pc, #40]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f762:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f766:	d106      	bne.n	800f776 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800f768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f76a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f76e:	d102      	bne.n	800f776 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f770:	4b07      	ldr	r3, [pc, #28]	; (800f790 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800f772:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f774:	e002      	b.n	800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f776:	2300      	movs	r3, #0
 800f778:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f77a:	e1a2      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f77c:	e1a1      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f77e:	4b05      	ldr	r3, [pc, #20]	; (800f794 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800f780:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f782:	e19e      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f784:	58024400 	.word	0x58024400
 800f788:	03d09000 	.word	0x03d09000
 800f78c:	003d0900 	.word	0x003d0900
 800f790:	017d7840 	.word	0x017d7840
 800f794:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800f798:	2300      	movs	r3, #0
 800f79a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f79c:	e191      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f7a4:	d173      	bne.n	800f88e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800f7a6:	4b9b      	ldr	r3, [pc, #620]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f7a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f7ae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f7b6:	d02f      	beq.n	800f818 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800f7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f7be:	d863      	bhi.n	800f888 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800f7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d004      	beq.n	800f7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800f7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7cc:	d012      	beq.n	800f7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800f7ce:	e05b      	b.n	800f888 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f7d0:	4b90      	ldr	r3, [pc, #576]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f7d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f7dc:	d107      	bne.n	800f7ee <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f7de:	f107 0318 	add.w	r3, r7, #24
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f000 f98c 	bl	800fb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f7e8:	69bb      	ldr	r3, [r7, #24]
 800f7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f7ec:	e169      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f7f2:	e166      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f7f4:	4b87      	ldr	r3, [pc, #540]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f800:	d107      	bne.n	800f812 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f802:	f107 030c 	add.w	r3, r7, #12
 800f806:	4618      	mov	r0, r3
 800f808:	f000 face 	bl	800fda8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f810:	e157      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f812:	2300      	movs	r3, #0
 800f814:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f816:	e154      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f818:	4b7e      	ldr	r3, [pc, #504]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f81a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f81c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f820:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f822:	4b7c      	ldr	r3, [pc, #496]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f003 0304 	and.w	r3, r3, #4
 800f82a:	2b04      	cmp	r3, #4
 800f82c:	d10c      	bne.n	800f848 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800f82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f830:	2b00      	cmp	r3, #0
 800f832:	d109      	bne.n	800f848 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f834:	4b77      	ldr	r3, [pc, #476]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	08db      	lsrs	r3, r3, #3
 800f83a:	f003 0303 	and.w	r3, r3, #3
 800f83e:	4a76      	ldr	r2, [pc, #472]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800f840:	fa22 f303 	lsr.w	r3, r2, r3
 800f844:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f846:	e01e      	b.n	800f886 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f848:	4b72      	ldr	r3, [pc, #456]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f854:	d106      	bne.n	800f864 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800f856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f858:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f85c:	d102      	bne.n	800f864 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f85e:	4b6f      	ldr	r3, [pc, #444]	; (800fa1c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800f860:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f862:	e010      	b.n	800f886 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f864:	4b6b      	ldr	r3, [pc, #428]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f86c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f870:	d106      	bne.n	800f880 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800f872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f878:	d102      	bne.n	800f880 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f87a:	4b69      	ldr	r3, [pc, #420]	; (800fa20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800f87c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f87e:	e002      	b.n	800f886 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f880:	2300      	movs	r3, #0
 800f882:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f884:	e11d      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f886:	e11c      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800f888:	2300      	movs	r3, #0
 800f88a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f88c:	e119      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f894:	d133      	bne.n	800f8fe <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800f896:	4b5f      	ldr	r3, [pc, #380]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f89a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f89e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d004      	beq.n	800f8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800f8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8ac:	d012      	beq.n	800f8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800f8ae:	e023      	b.n	800f8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f8b0:	4b58      	ldr	r3, [pc, #352]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f8bc:	d107      	bne.n	800f8ce <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f8be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f000 fbc4 	bl	8010050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f8cc:	e0f9      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f8d2:	e0f6      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f8d4:	4b4f      	ldr	r3, [pc, #316]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f8dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f8e0:	d107      	bne.n	800f8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8e2:	f107 0318 	add.w	r3, r7, #24
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f000 f90a 	bl	800fb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f8ec:	6a3b      	ldr	r3, [r7, #32]
 800f8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f8f0:	e0e7      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f8f6:	e0e4      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f8fc:	e0e1      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f904:	f040 808e 	bne.w	800fa24 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800f908:	4b42      	ldr	r3, [pc, #264]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f90a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f90c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f910:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f918:	d06b      	beq.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800f91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f920:	d874      	bhi.n	800fa0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800f922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f928:	d056      	beq.n	800f9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800f92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f930:	d86c      	bhi.n	800fa0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800f932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f934:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f938:	d03b      	beq.n	800f9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800f93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f940:	d864      	bhi.n	800fa0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800f942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f948:	d021      	beq.n	800f98e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800f94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f950:	d85c      	bhi.n	800fa0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800f952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f954:	2b00      	cmp	r3, #0
 800f956:	d004      	beq.n	800f962 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800f958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f95e:	d004      	beq.n	800f96a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800f960:	e054      	b.n	800fa0c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f962:	f000 f8b7 	bl	800fad4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f966:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800f968:	e0ab      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f96a:	4b2a      	ldr	r3, [pc, #168]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f976:	d107      	bne.n	800f988 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f978:	f107 0318 	add.w	r3, r7, #24
 800f97c:	4618      	mov	r0, r3
 800f97e:	f000 f8bf 	bl	800fb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f982:	69fb      	ldr	r3, [r7, #28]
 800f984:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f986:	e09c      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f988:	2300      	movs	r3, #0
 800f98a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f98c:	e099      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f98e:	4b21      	ldr	r3, [pc, #132]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f99a:	d107      	bne.n	800f9ac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f99c:	f107 030c 	add.w	r3, r7, #12
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f000 fa01 	bl	800fda8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f9aa:	e08a      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f9b0:	e087      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f9b2:	4b18      	ldr	r3, [pc, #96]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f003 0304 	and.w	r3, r3, #4
 800f9ba:	2b04      	cmp	r3, #4
 800f9bc:	d109      	bne.n	800f9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f9be:	4b15      	ldr	r3, [pc, #84]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	08db      	lsrs	r3, r3, #3
 800f9c4:	f003 0303 	and.w	r3, r3, #3
 800f9c8:	4a13      	ldr	r2, [pc, #76]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800f9ca:	fa22 f303 	lsr.w	r3, r2, r3
 800f9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f9d0:	e077      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f9d6:	e074      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f9d8:	4b0e      	ldr	r3, [pc, #56]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9e4:	d102      	bne.n	800f9ec <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800f9e6:	4b0d      	ldr	r3, [pc, #52]	; (800fa1c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800f9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f9ea:	e06a      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f9f0:	e067      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f9f2:	4b08      	ldr	r3, [pc, #32]	; (800fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f9fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9fe:	d102      	bne.n	800fa06 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800fa00:	4b07      	ldr	r3, [pc, #28]	; (800fa20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800fa02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fa04:	e05d      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fa06:	2300      	movs	r3, #0
 800fa08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fa0a:	e05a      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fa10:	e057      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800fa12:	bf00      	nop
 800fa14:	58024400 	.word	0x58024400
 800fa18:	03d09000 	.word	0x03d09000
 800fa1c:	003d0900 	.word	0x003d0900
 800fa20:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa2a:	d148      	bne.n	800fabe <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800fa2c:	4b27      	ldr	r3, [pc, #156]	; (800facc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800fa2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fa34:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800fa36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa3c:	d02a      	beq.n	800fa94 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800fa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa44:	d838      	bhi.n	800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800fa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d004      	beq.n	800fa56 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 800fa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa52:	d00d      	beq.n	800fa70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800fa54:	e030      	b.n	800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fa56:	4b1d      	ldr	r3, [pc, #116]	; (800facc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa62:	d102      	bne.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800fa64:	4b1a      	ldr	r3, [pc, #104]	; (800fad0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800fa66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fa68:	e02b      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fa6e:	e028      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fa70:	4b16      	ldr	r3, [pc, #88]	; (800facc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fa7c:	d107      	bne.n	800fa8e <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fa7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa82:	4618      	mov	r0, r3
 800fa84:	f000 fae4 	bl	8010050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fa8c:	e019      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fa92:	e016      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fa94:	4b0d      	ldr	r3, [pc, #52]	; (800facc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fa9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800faa0:	d107      	bne.n	800fab2 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800faa2:	f107 0318 	add.w	r3, r7, #24
 800faa6:	4618      	mov	r0, r3
 800faa8:	f000 f82a 	bl	800fb00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fab0:	e007      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fab2:	2300      	movs	r3, #0
 800fab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fab6:	e004      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800fab8:	2300      	movs	r3, #0
 800faba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fabc:	e001      	b.n	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 800fabe:	2300      	movs	r3, #0
 800fac0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800fac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3740      	adds	r7, #64	; 0x40
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	58024400 	.word	0x58024400
 800fad0:	017d7840 	.word	0x017d7840

0800fad4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fad8:	f7fe fc80 	bl	800e3dc <HAL_RCC_GetHCLKFreq>
 800fadc:	4602      	mov	r2, r0
 800fade:	4b06      	ldr	r3, [pc, #24]	; (800faf8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fae0:	6a1b      	ldr	r3, [r3, #32]
 800fae2:	091b      	lsrs	r3, r3, #4
 800fae4:	f003 0307 	and.w	r3, r3, #7
 800fae8:	4904      	ldr	r1, [pc, #16]	; (800fafc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800faea:	5ccb      	ldrb	r3, [r1, r3]
 800faec:	f003 031f 	and.w	r3, r3, #31
 800faf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	58024400 	.word	0x58024400
 800fafc:	08016bd4 	.word	0x08016bd4

0800fb00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b089      	sub	sp, #36	; 0x24
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fb08:	4ba1      	ldr	r3, [pc, #644]	; (800fd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb0c:	f003 0303 	and.w	r3, r3, #3
 800fb10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800fb12:	4b9f      	ldr	r3, [pc, #636]	; (800fd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb16:	0b1b      	lsrs	r3, r3, #12
 800fb18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fb1e:	4b9c      	ldr	r3, [pc, #624]	; (800fd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb22:	091b      	lsrs	r3, r3, #4
 800fb24:	f003 0301 	and.w	r3, r3, #1
 800fb28:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800fb2a:	4b99      	ldr	r3, [pc, #612]	; (800fd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb2e:	08db      	lsrs	r3, r3, #3
 800fb30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb34:	693a      	ldr	r2, [r7, #16]
 800fb36:	fb02 f303 	mul.w	r3, r2, r3
 800fb3a:	ee07 3a90 	vmov	s15, r3
 800fb3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	f000 8111 	beq.w	800fd70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800fb4e:	69bb      	ldr	r3, [r7, #24]
 800fb50:	2b02      	cmp	r3, #2
 800fb52:	f000 8083 	beq.w	800fc5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	2b02      	cmp	r3, #2
 800fb5a:	f200 80a1 	bhi.w	800fca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d003      	beq.n	800fb6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fb64:	69bb      	ldr	r3, [r7, #24]
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d056      	beq.n	800fc18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fb6a:	e099      	b.n	800fca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb6c:	4b88      	ldr	r3, [pc, #544]	; (800fd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f003 0320 	and.w	r3, r3, #32
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d02d      	beq.n	800fbd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fb78:	4b85      	ldr	r3, [pc, #532]	; (800fd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	08db      	lsrs	r3, r3, #3
 800fb7e:	f003 0303 	and.w	r3, r3, #3
 800fb82:	4a84      	ldr	r2, [pc, #528]	; (800fd94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800fb84:	fa22 f303 	lsr.w	r3, r2, r3
 800fb88:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	ee07 3a90 	vmov	s15, r3
 800fb90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	ee07 3a90 	vmov	s15, r3
 800fb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fba2:	4b7b      	ldr	r3, [pc, #492]	; (800fd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbaa:	ee07 3a90 	vmov	s15, r3
 800fbae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800fd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fbba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800fbd2:	e087      	b.n	800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	ee07 3a90 	vmov	s15, r3
 800fbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800fd9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fbe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbe6:	4b6a      	ldr	r3, [pc, #424]	; (800fd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbee:	ee07 3a90 	vmov	s15, r3
 800fbf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbfa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800fd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fbfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fc16:	e065      	b.n	800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	ee07 3a90 	vmov	s15, r3
 800fc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fda0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fc26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc2a:	4b59      	ldr	r3, [pc, #356]	; (800fd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc32:	ee07 3a90 	vmov	s15, r3
 800fc36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800fd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fc42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fc5a:	e043      	b.n	800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	ee07 3a90 	vmov	s15, r3
 800fc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fda4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800fc6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc6e:	4b48      	ldr	r3, [pc, #288]	; (800fd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc76:	ee07 3a90 	vmov	s15, r3
 800fc7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc82:	eddf 5a45 	vldr	s11, [pc, #276]	; 800fd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fc86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fc9e:	e021      	b.n	800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	ee07 3a90 	vmov	s15, r3
 800fca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fda0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fcae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fcb2:	4b37      	ldr	r3, [pc, #220]	; (800fd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fcb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcba:	ee07 3a90 	vmov	s15, r3
 800fcbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fcc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fcc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800fd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fcca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fcd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fcd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fcda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fce2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800fce4:	4b2a      	ldr	r3, [pc, #168]	; (800fd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fce8:	0a5b      	lsrs	r3, r3, #9
 800fcea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcee:	ee07 3a90 	vmov	s15, r3
 800fcf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fcfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800fd02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd0a:	ee17 2a90 	vmov	r2, s15
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800fd12:	4b1f      	ldr	r3, [pc, #124]	; (800fd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd16:	0c1b      	lsrs	r3, r3, #16
 800fd18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd1c:	ee07 3a90 	vmov	s15, r3
 800fd20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fd2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800fd30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd38:	ee17 2a90 	vmov	r2, s15
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800fd40:	4b13      	ldr	r3, [pc, #76]	; (800fd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fd42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd44:	0e1b      	lsrs	r3, r3, #24
 800fd46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd4a:	ee07 3a90 	vmov	s15, r3
 800fd4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fd5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800fd5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd66:	ee17 2a90 	vmov	r2, s15
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800fd6e:	e008      	b.n	800fd82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2200      	movs	r2, #0
 800fd74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2200      	movs	r2, #0
 800fd7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	609a      	str	r2, [r3, #8]
}
 800fd82:	bf00      	nop
 800fd84:	3724      	adds	r7, #36	; 0x24
 800fd86:	46bd      	mov	sp, r7
 800fd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8c:	4770      	bx	lr
 800fd8e:	bf00      	nop
 800fd90:	58024400 	.word	0x58024400
 800fd94:	03d09000 	.word	0x03d09000
 800fd98:	46000000 	.word	0x46000000
 800fd9c:	4c742400 	.word	0x4c742400
 800fda0:	4a742400 	.word	0x4a742400
 800fda4:	4bbebc20 	.word	0x4bbebc20

0800fda8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b089      	sub	sp, #36	; 0x24
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fdb0:	4ba1      	ldr	r3, [pc, #644]	; (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdb4:	f003 0303 	and.w	r3, r3, #3
 800fdb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800fdba:	4b9f      	ldr	r3, [pc, #636]	; (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdbe:	0d1b      	lsrs	r3, r3, #20
 800fdc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fdc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800fdc6:	4b9c      	ldr	r3, [pc, #624]	; (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdca:	0a1b      	lsrs	r3, r3, #8
 800fdcc:	f003 0301 	and.w	r3, r3, #1
 800fdd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800fdd2:	4b99      	ldr	r3, [pc, #612]	; (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdd6:	08db      	lsrs	r3, r3, #3
 800fdd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fddc:	693a      	ldr	r2, [r7, #16]
 800fdde:	fb02 f303 	mul.w	r3, r2, r3
 800fde2:	ee07 3a90 	vmov	s15, r3
 800fde6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	f000 8111 	beq.w	8010018 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	2b02      	cmp	r3, #2
 800fdfa:	f000 8083 	beq.w	800ff04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800fdfe:	69bb      	ldr	r3, [r7, #24]
 800fe00:	2b02      	cmp	r3, #2
 800fe02:	f200 80a1 	bhi.w	800ff48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d003      	beq.n	800fe14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800fe0c:	69bb      	ldr	r3, [r7, #24]
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	d056      	beq.n	800fec0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800fe12:	e099      	b.n	800ff48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe14:	4b88      	ldr	r3, [pc, #544]	; (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	f003 0320 	and.w	r3, r3, #32
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d02d      	beq.n	800fe7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fe20:	4b85      	ldr	r3, [pc, #532]	; (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	08db      	lsrs	r3, r3, #3
 800fe26:	f003 0303 	and.w	r3, r3, #3
 800fe2a:	4a84      	ldr	r2, [pc, #528]	; (801003c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800fe2c:	fa22 f303 	lsr.w	r3, r2, r3
 800fe30:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	ee07 3a90 	vmov	s15, r3
 800fe38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	ee07 3a90 	vmov	s15, r3
 800fe42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe4a:	4b7b      	ldr	r3, [pc, #492]	; (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe52:	ee07 3a90 	vmov	s15, r3
 800fe56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800fe7a:	e087      	b.n	800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	ee07 3a90 	vmov	s15, r3
 800fe82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010044 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fe8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe8e:	4b6a      	ldr	r3, [pc, #424]	; (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe96:	ee07 3a90 	vmov	s15, r3
 800fe9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fea2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800feaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800feae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800feb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800feb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800febe:	e065      	b.n	800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	ee07 3a90 	vmov	s15, r3
 800fec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800feca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010048 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fed2:	4b59      	ldr	r3, [pc, #356]	; (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feda:	ee07 3a90 	vmov	s15, r3
 800fede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fee2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fee6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800feea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800feee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fefa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fefe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ff02:	e043      	b.n	800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	ee07 3a90 	vmov	s15, r3
 800ff0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801004c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ff12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff16:	4b48      	ldr	r3, [pc, #288]	; (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff1e:	ee07 3a90 	vmov	s15, r3
 800ff22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ff2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ff46:	e021      	b.n	800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	ee07 3a90 	vmov	s15, r3
 800ff4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010048 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ff56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff5a:	4b37      	ldr	r3, [pc, #220]	; (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff62:	ee07 3a90 	vmov	s15, r3
 800ff66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ff72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ff8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ff8c:	4b2a      	ldr	r3, [pc, #168]	; (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff90:	0a5b      	lsrs	r3, r3, #9
 800ff92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff96:	ee07 3a90 	vmov	s15, r3
 800ff9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ffa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ffa6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ffaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffb2:	ee17 2a90 	vmov	r2, s15
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ffba:	4b1f      	ldr	r3, [pc, #124]	; (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ffbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffbe:	0c1b      	lsrs	r3, r3, #16
 800ffc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffc4:	ee07 3a90 	vmov	s15, r3
 800ffc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ffd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ffd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ffd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffe0:	ee17 2a90 	vmov	r2, s15
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ffe8:	4b13      	ldr	r3, [pc, #76]	; (8010038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ffea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffec:	0e1b      	lsrs	r3, r3, #24
 800ffee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fff2:	ee07 3a90 	vmov	s15, r3
 800fff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010002:	edd7 6a07 	vldr	s13, [r7, #28]
 8010006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801000a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801000e:	ee17 2a90 	vmov	r2, s15
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010016:	e008      	b.n	801002a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2200      	movs	r2, #0
 801001c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	609a      	str	r2, [r3, #8]
}
 801002a:	bf00      	nop
 801002c:	3724      	adds	r7, #36	; 0x24
 801002e:	46bd      	mov	sp, r7
 8010030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010034:	4770      	bx	lr
 8010036:	bf00      	nop
 8010038:	58024400 	.word	0x58024400
 801003c:	03d09000 	.word	0x03d09000
 8010040:	46000000 	.word	0x46000000
 8010044:	4c742400 	.word	0x4c742400
 8010048:	4a742400 	.word	0x4a742400
 801004c:	4bbebc20 	.word	0x4bbebc20

08010050 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8010050:	b480      	push	{r7}
 8010052:	b089      	sub	sp, #36	; 0x24
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010058:	4ba0      	ldr	r3, [pc, #640]	; (80102dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801005a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801005c:	f003 0303 	and.w	r3, r3, #3
 8010060:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8010062:	4b9e      	ldr	r3, [pc, #632]	; (80102dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010066:	091b      	lsrs	r3, r3, #4
 8010068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801006c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801006e:	4b9b      	ldr	r3, [pc, #620]	; (80102dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010072:	f003 0301 	and.w	r3, r3, #1
 8010076:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010078:	4b98      	ldr	r3, [pc, #608]	; (80102dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801007a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801007c:	08db      	lsrs	r3, r3, #3
 801007e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010082:	693a      	ldr	r2, [r7, #16]
 8010084:	fb02 f303 	mul.w	r3, r2, r3
 8010088:	ee07 3a90 	vmov	s15, r3
 801008c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010090:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	2b00      	cmp	r3, #0
 8010098:	f000 8111 	beq.w	80102be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801009c:	69bb      	ldr	r3, [r7, #24]
 801009e:	2b02      	cmp	r3, #2
 80100a0:	f000 8083 	beq.w	80101aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	2b02      	cmp	r3, #2
 80100a8:	f200 80a1 	bhi.w	80101ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80100ac:	69bb      	ldr	r3, [r7, #24]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d003      	beq.n	80100ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80100b2:	69bb      	ldr	r3, [r7, #24]
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d056      	beq.n	8010166 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80100b8:	e099      	b.n	80101ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100ba:	4b88      	ldr	r3, [pc, #544]	; (80102dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f003 0320 	and.w	r3, r3, #32
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d02d      	beq.n	8010122 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80100c6:	4b85      	ldr	r3, [pc, #532]	; (80102dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	08db      	lsrs	r3, r3, #3
 80100cc:	f003 0303 	and.w	r3, r3, #3
 80100d0:	4a83      	ldr	r2, [pc, #524]	; (80102e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80100d2:	fa22 f303 	lsr.w	r3, r2, r3
 80100d6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	ee07 3a90 	vmov	s15, r3
 80100de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	ee07 3a90 	vmov	s15, r3
 80100e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100f0:	4b7a      	ldr	r3, [pc, #488]	; (80102dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100f8:	ee07 3a90 	vmov	s15, r3
 80100fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010100:	ed97 6a03 	vldr	s12, [r7, #12]
 8010104:	eddf 5a77 	vldr	s11, [pc, #476]	; 80102e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801010c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010118:	ee67 7a27 	vmul.f32	s15, s14, s15
 801011c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8010120:	e087      	b.n	8010232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	ee07 3a90 	vmov	s15, r3
 8010128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801012c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80102e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010134:	4b69      	ldr	r3, [pc, #420]	; (80102dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801013c:	ee07 3a90 	vmov	s15, r3
 8010140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010144:	ed97 6a03 	vldr	s12, [r7, #12]
 8010148:	eddf 5a66 	vldr	s11, [pc, #408]	; 80102e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801014c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801015c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010160:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010164:	e065      	b.n	8010232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	ee07 3a90 	vmov	s15, r3
 801016c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010170:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80102ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010178:	4b58      	ldr	r3, [pc, #352]	; (80102dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801017a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801017c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010180:	ee07 3a90 	vmov	s15, r3
 8010184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010188:	ed97 6a03 	vldr	s12, [r7, #12]
 801018c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80102e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801019c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80101a8:	e043      	b.n	8010232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	ee07 3a90 	vmov	s15, r3
 80101b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80102f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80101b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101bc:	4b47      	ldr	r3, [pc, #284]	; (80102dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80101be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101c4:	ee07 3a90 	vmov	s15, r3
 80101c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80101d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80102e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80101d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80101ec:	e021      	b.n	8010232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	ee07 3a90 	vmov	s15, r3
 80101f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101f8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80102e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80101fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010200:	4b36      	ldr	r3, [pc, #216]	; (80102dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010208:	ee07 3a90 	vmov	s15, r3
 801020c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010210:	ed97 6a03 	vldr	s12, [r7, #12]
 8010214:	eddf 5a33 	vldr	s11, [pc, #204]	; 80102e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801021c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010228:	ee67 7a27 	vmul.f32	s15, s14, s15
 801022c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010230:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8010232:	4b2a      	ldr	r3, [pc, #168]	; (80102dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010236:	0a5b      	lsrs	r3, r3, #9
 8010238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801023c:	ee07 3a90 	vmov	s15, r3
 8010240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010248:	ee37 7a87 	vadd.f32	s14, s15, s14
 801024c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010258:	ee17 2a90 	vmov	r2, s15
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8010260:	4b1e      	ldr	r3, [pc, #120]	; (80102dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010264:	0c1b      	lsrs	r3, r3, #16
 8010266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801026a:	ee07 3a90 	vmov	s15, r3
 801026e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010276:	ee37 7a87 	vadd.f32	s14, s15, s14
 801027a:	edd7 6a07 	vldr	s13, [r7, #28]
 801027e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010286:	ee17 2a90 	vmov	r2, s15
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 801028e:	4b13      	ldr	r3, [pc, #76]	; (80102dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010292:	0e1b      	lsrs	r3, r3, #24
 8010294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010298:	ee07 3a90 	vmov	s15, r3
 801029c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80102a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80102ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102b4:	ee17 2a90 	vmov	r2, s15
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80102bc:	e008      	b.n	80102d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2200      	movs	r2, #0
 80102c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2200      	movs	r2, #0
 80102c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2200      	movs	r2, #0
 80102ce:	609a      	str	r2, [r3, #8]
}
 80102d0:	bf00      	nop
 80102d2:	3724      	adds	r7, #36	; 0x24
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr
 80102dc:	58024400 	.word	0x58024400
 80102e0:	03d09000 	.word	0x03d09000
 80102e4:	46000000 	.word	0x46000000
 80102e8:	4c742400 	.word	0x4c742400
 80102ec:	4a742400 	.word	0x4a742400
 80102f0:	4bbebc20 	.word	0x4bbebc20

080102f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80102fe:	2300      	movs	r3, #0
 8010300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010302:	4b53      	ldr	r3, [pc, #332]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 8010304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010306:	f003 0303 	and.w	r3, r3, #3
 801030a:	2b03      	cmp	r3, #3
 801030c:	d101      	bne.n	8010312 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801030e:	2301      	movs	r3, #1
 8010310:	e099      	b.n	8010446 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010312:	4b4f      	ldr	r3, [pc, #316]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	4a4e      	ldr	r2, [pc, #312]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 8010318:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801031c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801031e:	f7f6 f8fd 	bl	800651c <HAL_GetTick>
 8010322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010324:	e008      	b.n	8010338 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8010326:	f7f6 f8f9 	bl	800651c <HAL_GetTick>
 801032a:	4602      	mov	r2, r0
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	1ad3      	subs	r3, r2, r3
 8010330:	2b02      	cmp	r3, #2
 8010332:	d901      	bls.n	8010338 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010334:	2303      	movs	r3, #3
 8010336:	e086      	b.n	8010446 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010338:	4b45      	ldr	r3, [pc, #276]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010340:	2b00      	cmp	r3, #0
 8010342:	d1f0      	bne.n	8010326 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010344:	4b42      	ldr	r3, [pc, #264]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 8010346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010348:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	031b      	lsls	r3, r3, #12
 8010352:	493f      	ldr	r1, [pc, #252]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 8010354:	4313      	orrs	r3, r2
 8010356:	628b      	str	r3, [r1, #40]	; 0x28
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	3b01      	subs	r3, #1
 801035e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	689b      	ldr	r3, [r3, #8]
 8010366:	3b01      	subs	r3, #1
 8010368:	025b      	lsls	r3, r3, #9
 801036a:	b29b      	uxth	r3, r3
 801036c:	431a      	orrs	r2, r3
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	68db      	ldr	r3, [r3, #12]
 8010372:	3b01      	subs	r3, #1
 8010374:	041b      	lsls	r3, r3, #16
 8010376:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801037a:	431a      	orrs	r2, r3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	691b      	ldr	r3, [r3, #16]
 8010380:	3b01      	subs	r3, #1
 8010382:	061b      	lsls	r3, r3, #24
 8010384:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010388:	4931      	ldr	r1, [pc, #196]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 801038a:	4313      	orrs	r3, r2
 801038c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801038e:	4b30      	ldr	r3, [pc, #192]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 8010390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010392:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	695b      	ldr	r3, [r3, #20]
 801039a:	492d      	ldr	r1, [pc, #180]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 801039c:	4313      	orrs	r3, r2
 801039e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80103a0:	4b2b      	ldr	r3, [pc, #172]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 80103a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a4:	f023 0220 	bic.w	r2, r3, #32
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	699b      	ldr	r3, [r3, #24]
 80103ac:	4928      	ldr	r1, [pc, #160]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 80103ae:	4313      	orrs	r3, r2
 80103b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80103b2:	4b27      	ldr	r3, [pc, #156]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 80103b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103b6:	4a26      	ldr	r2, [pc, #152]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 80103b8:	f023 0310 	bic.w	r3, r3, #16
 80103bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80103be:	4b24      	ldr	r3, [pc, #144]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 80103c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80103c2:	4b24      	ldr	r3, [pc, #144]	; (8010454 <RCCEx_PLL2_Config+0x160>)
 80103c4:	4013      	ands	r3, r2
 80103c6:	687a      	ldr	r2, [r7, #4]
 80103c8:	69d2      	ldr	r2, [r2, #28]
 80103ca:	00d2      	lsls	r2, r2, #3
 80103cc:	4920      	ldr	r1, [pc, #128]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 80103ce:	4313      	orrs	r3, r2
 80103d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80103d2:	4b1f      	ldr	r3, [pc, #124]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 80103d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103d6:	4a1e      	ldr	r2, [pc, #120]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 80103d8:	f043 0310 	orr.w	r3, r3, #16
 80103dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d106      	bne.n	80103f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80103e4:	4b1a      	ldr	r3, [pc, #104]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 80103e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103e8:	4a19      	ldr	r2, [pc, #100]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 80103ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80103ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80103f0:	e00f      	b.n	8010412 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d106      	bne.n	8010406 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80103f8:	4b15      	ldr	r3, [pc, #84]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 80103fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103fc:	4a14      	ldr	r2, [pc, #80]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 80103fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010402:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010404:	e005      	b.n	8010412 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010406:	4b12      	ldr	r3, [pc, #72]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 8010408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801040a:	4a11      	ldr	r2, [pc, #68]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 801040c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010410:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8010412:	4b0f      	ldr	r3, [pc, #60]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	4a0e      	ldr	r2, [pc, #56]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 8010418:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801041c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801041e:	f7f6 f87d 	bl	800651c <HAL_GetTick>
 8010422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010424:	e008      	b.n	8010438 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8010426:	f7f6 f879 	bl	800651c <HAL_GetTick>
 801042a:	4602      	mov	r2, r0
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	1ad3      	subs	r3, r2, r3
 8010430:	2b02      	cmp	r3, #2
 8010432:	d901      	bls.n	8010438 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010434:	2303      	movs	r3, #3
 8010436:	e006      	b.n	8010446 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010438:	4b05      	ldr	r3, [pc, #20]	; (8010450 <RCCEx_PLL2_Config+0x15c>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010440:	2b00      	cmp	r3, #0
 8010442:	d0f0      	beq.n	8010426 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010444:	7bfb      	ldrb	r3, [r7, #15]
}
 8010446:	4618      	mov	r0, r3
 8010448:	3710      	adds	r7, #16
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	58024400 	.word	0x58024400
 8010454:	ffff0007 	.word	0xffff0007

08010458 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010462:	2300      	movs	r3, #0
 8010464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010466:	4b53      	ldr	r3, [pc, #332]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 8010468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801046a:	f003 0303 	and.w	r3, r3, #3
 801046e:	2b03      	cmp	r3, #3
 8010470:	d101      	bne.n	8010476 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8010472:	2301      	movs	r3, #1
 8010474:	e099      	b.n	80105aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010476:	4b4f      	ldr	r3, [pc, #316]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4a4e      	ldr	r2, [pc, #312]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 801047c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010482:	f7f6 f84b 	bl	800651c <HAL_GetTick>
 8010486:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010488:	e008      	b.n	801049c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801048a:	f7f6 f847 	bl	800651c <HAL_GetTick>
 801048e:	4602      	mov	r2, r0
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	1ad3      	subs	r3, r2, r3
 8010494:	2b02      	cmp	r3, #2
 8010496:	d901      	bls.n	801049c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010498:	2303      	movs	r3, #3
 801049a:	e086      	b.n	80105aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801049c:	4b45      	ldr	r3, [pc, #276]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d1f0      	bne.n	801048a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80104a8:	4b42      	ldr	r3, [pc, #264]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 80104aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	051b      	lsls	r3, r3, #20
 80104b6:	493f      	ldr	r1, [pc, #252]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 80104b8:	4313      	orrs	r3, r2
 80104ba:	628b      	str	r3, [r1, #40]	; 0x28
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	3b01      	subs	r3, #1
 80104c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	689b      	ldr	r3, [r3, #8]
 80104ca:	3b01      	subs	r3, #1
 80104cc:	025b      	lsls	r3, r3, #9
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	431a      	orrs	r2, r3
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	68db      	ldr	r3, [r3, #12]
 80104d6:	3b01      	subs	r3, #1
 80104d8:	041b      	lsls	r3, r3, #16
 80104da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80104de:	431a      	orrs	r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	691b      	ldr	r3, [r3, #16]
 80104e4:	3b01      	subs	r3, #1
 80104e6:	061b      	lsls	r3, r3, #24
 80104e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80104ec:	4931      	ldr	r1, [pc, #196]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 80104ee:	4313      	orrs	r3, r2
 80104f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80104f2:	4b30      	ldr	r3, [pc, #192]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 80104f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	695b      	ldr	r3, [r3, #20]
 80104fe:	492d      	ldr	r1, [pc, #180]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 8010500:	4313      	orrs	r3, r2
 8010502:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010504:	4b2b      	ldr	r3, [pc, #172]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 8010506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010508:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	699b      	ldr	r3, [r3, #24]
 8010510:	4928      	ldr	r1, [pc, #160]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 8010512:	4313      	orrs	r3, r2
 8010514:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010516:	4b27      	ldr	r3, [pc, #156]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 8010518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801051a:	4a26      	ldr	r2, [pc, #152]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 801051c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010520:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010522:	4b24      	ldr	r3, [pc, #144]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 8010524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010526:	4b24      	ldr	r3, [pc, #144]	; (80105b8 <RCCEx_PLL3_Config+0x160>)
 8010528:	4013      	ands	r3, r2
 801052a:	687a      	ldr	r2, [r7, #4]
 801052c:	69d2      	ldr	r2, [r2, #28]
 801052e:	00d2      	lsls	r2, r2, #3
 8010530:	4920      	ldr	r1, [pc, #128]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 8010532:	4313      	orrs	r3, r2
 8010534:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010536:	4b1f      	ldr	r3, [pc, #124]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 8010538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801053a:	4a1e      	ldr	r2, [pc, #120]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 801053c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010540:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d106      	bne.n	8010556 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010548:	4b1a      	ldr	r3, [pc, #104]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 801054a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801054c:	4a19      	ldr	r2, [pc, #100]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 801054e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010552:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010554:	e00f      	b.n	8010576 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	2b01      	cmp	r3, #1
 801055a:	d106      	bne.n	801056a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801055c:	4b15      	ldr	r3, [pc, #84]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 801055e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010560:	4a14      	ldr	r2, [pc, #80]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 8010562:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010566:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010568:	e005      	b.n	8010576 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801056a:	4b12      	ldr	r3, [pc, #72]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 801056c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801056e:	4a11      	ldr	r2, [pc, #68]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 8010570:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010574:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010576:	4b0f      	ldr	r3, [pc, #60]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	4a0e      	ldr	r2, [pc, #56]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 801057c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010582:	f7f5 ffcb 	bl	800651c <HAL_GetTick>
 8010586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010588:	e008      	b.n	801059c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801058a:	f7f5 ffc7 	bl	800651c <HAL_GetTick>
 801058e:	4602      	mov	r2, r0
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	1ad3      	subs	r3, r2, r3
 8010594:	2b02      	cmp	r3, #2
 8010596:	d901      	bls.n	801059c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010598:	2303      	movs	r3, #3
 801059a:	e006      	b.n	80105aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801059c:	4b05      	ldr	r3, [pc, #20]	; (80105b4 <RCCEx_PLL3_Config+0x15c>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d0f0      	beq.n	801058a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80105a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3710      	adds	r7, #16
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}
 80105b2:	bf00      	nop
 80105b4:	58024400 	.word	0x58024400
 80105b8:	ffff0007 	.word	0xffff0007

080105bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d101      	bne.n	80105ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80105ca:	2301      	movs	r3, #1
 80105cc:	e0f1      	b.n	80107b2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2200      	movs	r2, #0
 80105d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4a78      	ldr	r2, [pc, #480]	; (80107bc <HAL_SPI_Init+0x200>)
 80105da:	4293      	cmp	r3, r2
 80105dc:	d00f      	beq.n	80105fe <HAL_SPI_Init+0x42>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	4a77      	ldr	r2, [pc, #476]	; (80107c0 <HAL_SPI_Init+0x204>)
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d00a      	beq.n	80105fe <HAL_SPI_Init+0x42>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4a75      	ldr	r2, [pc, #468]	; (80107c4 <HAL_SPI_Init+0x208>)
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d005      	beq.n	80105fe <HAL_SPI_Init+0x42>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	2b0f      	cmp	r3, #15
 80105f8:	d901      	bls.n	80105fe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80105fa:	2301      	movs	r3, #1
 80105fc:	e0d9      	b.n	80107b2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f000 ff66 	bl	80114d0 <SPI_GetPacketSize>
 8010604:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	4a6c      	ldr	r2, [pc, #432]	; (80107bc <HAL_SPI_Init+0x200>)
 801060c:	4293      	cmp	r3, r2
 801060e:	d00c      	beq.n	801062a <HAL_SPI_Init+0x6e>
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	4a6a      	ldr	r2, [pc, #424]	; (80107c0 <HAL_SPI_Init+0x204>)
 8010616:	4293      	cmp	r3, r2
 8010618:	d007      	beq.n	801062a <HAL_SPI_Init+0x6e>
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	4a69      	ldr	r2, [pc, #420]	; (80107c4 <HAL_SPI_Init+0x208>)
 8010620:	4293      	cmp	r3, r2
 8010622:	d002      	beq.n	801062a <HAL_SPI_Init+0x6e>
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2b08      	cmp	r3, #8
 8010628:	d811      	bhi.n	801064e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801062e:	4a63      	ldr	r2, [pc, #396]	; (80107bc <HAL_SPI_Init+0x200>)
 8010630:	4293      	cmp	r3, r2
 8010632:	d009      	beq.n	8010648 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4a61      	ldr	r2, [pc, #388]	; (80107c0 <HAL_SPI_Init+0x204>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d004      	beq.n	8010648 <HAL_SPI_Init+0x8c>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4a60      	ldr	r2, [pc, #384]	; (80107c4 <HAL_SPI_Init+0x208>)
 8010644:	4293      	cmp	r3, r2
 8010646:	d104      	bne.n	8010652 <HAL_SPI_Init+0x96>
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2b10      	cmp	r3, #16
 801064c:	d901      	bls.n	8010652 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801064e:	2301      	movs	r3, #1
 8010650:	e0af      	b.n	80107b2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010658:	b2db      	uxtb	r3, r3
 801065a:	2b00      	cmp	r3, #0
 801065c:	d106      	bne.n	801066c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2200      	movs	r2, #0
 8010662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7f4 f974 	bl	8004954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2202      	movs	r2, #2
 8010670:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	681a      	ldr	r2, [r3, #0]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	f022 0201 	bic.w	r2, r2, #1
 8010682:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	689b      	ldr	r3, [r3, #8]
 801068a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801068e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	699b      	ldr	r3, [r3, #24]
 8010694:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010698:	d119      	bne.n	80106ce <HAL_SPI_Init+0x112>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80106a2:	d103      	bne.n	80106ac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d008      	beq.n	80106be <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d10c      	bne.n	80106ce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80106b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106bc:	d107      	bne.n	80106ce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	681a      	ldr	r2, [r3, #0]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80106cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	69da      	ldr	r2, [r3, #28]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106d6:	431a      	orrs	r2, r3
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	431a      	orrs	r2, r3
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106e0:	ea42 0103 	orr.w	r1, r2, r3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	68da      	ldr	r2, [r3, #12]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	430a      	orrs	r2, r1
 80106ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f8:	431a      	orrs	r2, r3
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106fe:	431a      	orrs	r2, r3
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	699b      	ldr	r3, [r3, #24]
 8010704:	431a      	orrs	r2, r3
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	691b      	ldr	r3, [r3, #16]
 801070a:	431a      	orrs	r2, r3
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	695b      	ldr	r3, [r3, #20]
 8010710:	431a      	orrs	r2, r3
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6a1b      	ldr	r3, [r3, #32]
 8010716:	431a      	orrs	r2, r3
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	431a      	orrs	r2, r3
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010722:	431a      	orrs	r2, r3
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	689b      	ldr	r3, [r3, #8]
 8010728:	431a      	orrs	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801072e:	ea42 0103 	orr.w	r1, r2, r3
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	430a      	orrs	r2, r1
 801073c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	685b      	ldr	r3, [r3, #4]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d113      	bne.n	801076e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	689b      	ldr	r3, [r3, #8]
 801074c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010758:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	689b      	ldr	r3, [r3, #8]
 8010760:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801076c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	f022 0201 	bic.w	r2, r2, #1
 801077c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010786:	2b00      	cmp	r3, #0
 8010788:	d00a      	beq.n	80107a0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	68db      	ldr	r3, [r3, #12]
 8010790:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	430a      	orrs	r2, r1
 801079e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2200      	movs	r2, #0
 80107a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2201      	movs	r2, #1
 80107ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80107b0:	2300      	movs	r3, #0
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3710      	adds	r7, #16
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}
 80107ba:	bf00      	nop
 80107bc:	40013000 	.word	0x40013000
 80107c0:	40003800 	.word	0x40003800
 80107c4:	40003c00 	.word	0x40003c00

080107c8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b08a      	sub	sp, #40	; 0x28
 80107cc:	af02      	add	r7, sp, #8
 80107ce:	60f8      	str	r0, [r7, #12]
 80107d0:	60b9      	str	r1, [r7, #8]
 80107d2:	603b      	str	r3, [r7, #0]
 80107d4:	4613      	mov	r3, r2
 80107d6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	3320      	adds	r3, #32
 80107de:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80107e0:	2300      	movs	r3, #0
 80107e2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d101      	bne.n	80107f2 <HAL_SPI_Transmit+0x2a>
 80107ee:	2302      	movs	r3, #2
 80107f0:	e1d7      	b.n	8010ba2 <HAL_SPI_Transmit+0x3da>
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	2201      	movs	r2, #1
 80107f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80107fa:	f7f5 fe8f 	bl	800651c <HAL_GetTick>
 80107fe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010806:	b2db      	uxtb	r3, r3
 8010808:	2b01      	cmp	r3, #1
 801080a:	d007      	beq.n	801081c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 801080c:	2302      	movs	r3, #2
 801080e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	2200      	movs	r2, #0
 8010814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010818:	7efb      	ldrb	r3, [r7, #27]
 801081a:	e1c2      	b.n	8010ba2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d002      	beq.n	8010828 <HAL_SPI_Transmit+0x60>
 8010822:	88fb      	ldrh	r3, [r7, #6]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d107      	bne.n	8010838 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8010828:	2301      	movs	r3, #1
 801082a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2200      	movs	r2, #0
 8010830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010834:	7efb      	ldrb	r3, [r7, #27]
 8010836:	e1b4      	b.n	8010ba2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2203      	movs	r2, #3
 801083c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	2200      	movs	r2, #0
 8010844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	68ba      	ldr	r2, [r7, #8]
 801084c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	88fa      	ldrh	r2, [r7, #6]
 8010852:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	88fa      	ldrh	r2, [r7, #6]
 801085a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2200      	movs	r2, #0
 8010862:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	2200      	movs	r2, #0
 8010868:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	2200      	movs	r2, #0
 8010870:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	2200      	movs	r2, #0
 8010878:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2200      	movs	r2, #0
 801087e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	689b      	ldr	r3, [r3, #8]
 8010884:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010888:	d107      	bne.n	801089a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010898:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	685a      	ldr	r2, [r3, #4]
 80108a0:	4b96      	ldr	r3, [pc, #600]	; (8010afc <HAL_SPI_Transmit+0x334>)
 80108a2:	4013      	ands	r3, r2
 80108a4:	88f9      	ldrh	r1, [r7, #6]
 80108a6:	68fa      	ldr	r2, [r7, #12]
 80108a8:	6812      	ldr	r2, [r2, #0]
 80108aa:	430b      	orrs	r3, r1
 80108ac:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	681a      	ldr	r2, [r3, #0]
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	f042 0201 	orr.w	r2, r2, #1
 80108bc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	685b      	ldr	r3, [r3, #4]
 80108c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80108c6:	d107      	bne.n	80108d8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	681a      	ldr	r2, [r3, #0]
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80108d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	68db      	ldr	r3, [r3, #12]
 80108dc:	2b0f      	cmp	r3, #15
 80108de:	d947      	bls.n	8010970 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80108e0:	e03f      	b.n	8010962 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	695b      	ldr	r3, [r3, #20]
 80108e8:	f003 0302 	and.w	r3, r3, #2
 80108ec:	2b02      	cmp	r3, #2
 80108ee:	d114      	bne.n	801091a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	6812      	ldr	r2, [r2, #0]
 80108fa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010900:	1d1a      	adds	r2, r3, #4
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801090c:	b29b      	uxth	r3, r3
 801090e:	3b01      	subs	r3, #1
 8010910:	b29a      	uxth	r2, r3
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010918:	e023      	b.n	8010962 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801091a:	f7f5 fdff 	bl	800651c <HAL_GetTick>
 801091e:	4602      	mov	r2, r0
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	1ad3      	subs	r3, r2, r3
 8010924:	683a      	ldr	r2, [r7, #0]
 8010926:	429a      	cmp	r2, r3
 8010928:	d803      	bhi.n	8010932 <HAL_SPI_Transmit+0x16a>
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010930:	d102      	bne.n	8010938 <HAL_SPI_Transmit+0x170>
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d114      	bne.n	8010962 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010938:	68f8      	ldr	r0, [r7, #12]
 801093a:	f000 fcfb 	bl	8011334 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	2200      	movs	r2, #0
 8010942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801094c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	2201      	movs	r2, #1
 801095a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801095e:	2303      	movs	r3, #3
 8010960:	e11f      	b.n	8010ba2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010968:	b29b      	uxth	r3, r3
 801096a:	2b00      	cmp	r3, #0
 801096c:	d1b9      	bne.n	80108e2 <HAL_SPI_Transmit+0x11a>
 801096e:	e0f2      	b.n	8010b56 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	2b07      	cmp	r3, #7
 8010976:	f240 80e7 	bls.w	8010b48 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801097a:	e05d      	b.n	8010a38 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	695b      	ldr	r3, [r3, #20]
 8010982:	f003 0302 	and.w	r3, r3, #2
 8010986:	2b02      	cmp	r3, #2
 8010988:	d132      	bne.n	80109f0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010990:	b29b      	uxth	r3, r3
 8010992:	2b01      	cmp	r3, #1
 8010994:	d918      	bls.n	80109c8 <HAL_SPI_Transmit+0x200>
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801099a:	2b00      	cmp	r3, #0
 801099c:	d014      	beq.n	80109c8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	6812      	ldr	r2, [r2, #0]
 80109a8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109ae:	1d1a      	adds	r2, r3, #4
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	3b02      	subs	r3, #2
 80109be:	b29a      	uxth	r2, r3
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80109c6:	e037      	b.n	8010a38 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109cc:	881a      	ldrh	r2, [r3, #0]
 80109ce:	69fb      	ldr	r3, [r7, #28]
 80109d0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109d6:	1c9a      	adds	r2, r3, #2
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	3b01      	subs	r3, #1
 80109e6:	b29a      	uxth	r2, r3
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80109ee:	e023      	b.n	8010a38 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80109f0:	f7f5 fd94 	bl	800651c <HAL_GetTick>
 80109f4:	4602      	mov	r2, r0
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	1ad3      	subs	r3, r2, r3
 80109fa:	683a      	ldr	r2, [r7, #0]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d803      	bhi.n	8010a08 <HAL_SPI_Transmit+0x240>
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a06:	d102      	bne.n	8010a0e <HAL_SPI_Transmit+0x246>
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d114      	bne.n	8010a38 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010a0e:	68f8      	ldr	r0, [r7, #12]
 8010a10:	f000 fc90 	bl	8011334 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	2200      	movs	r2, #0
 8010a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010a22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	2201      	movs	r2, #1
 8010a30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010a34:	2303      	movs	r3, #3
 8010a36:	e0b4      	b.n	8010ba2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d19b      	bne.n	801097c <HAL_SPI_Transmit+0x1b4>
 8010a44:	e087      	b.n	8010b56 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	695b      	ldr	r3, [r3, #20]
 8010a4c:	f003 0302 	and.w	r3, r3, #2
 8010a50:	2b02      	cmp	r3, #2
 8010a52:	d155      	bne.n	8010b00 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a5a:	b29b      	uxth	r3, r3
 8010a5c:	2b03      	cmp	r3, #3
 8010a5e:	d918      	bls.n	8010a92 <HAL_SPI_Transmit+0x2ca>
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a64:	2b40      	cmp	r3, #64	; 0x40
 8010a66:	d914      	bls.n	8010a92 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	6812      	ldr	r2, [r2, #0]
 8010a72:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a78:	1d1a      	adds	r2, r3, #4
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	3b04      	subs	r3, #4
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010a90:	e05a      	b.n	8010b48 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a98:	b29b      	uxth	r3, r3
 8010a9a:	2b01      	cmp	r3, #1
 8010a9c:	d917      	bls.n	8010ace <HAL_SPI_Transmit+0x306>
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d013      	beq.n	8010ace <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010aaa:	881a      	ldrh	r2, [r3, #0]
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ab4:	1c9a      	adds	r2, r3, #2
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	3b02      	subs	r3, #2
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010acc:	e03c      	b.n	8010b48 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	3320      	adds	r3, #32
 8010ad8:	7812      	ldrb	r2, [r2, #0]
 8010ada:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ae0:	1c5a      	adds	r2, r3, #1
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	3b01      	subs	r3, #1
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010af8:	e026      	b.n	8010b48 <HAL_SPI_Transmit+0x380>
 8010afa:	bf00      	nop
 8010afc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010b00:	f7f5 fd0c 	bl	800651c <HAL_GetTick>
 8010b04:	4602      	mov	r2, r0
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	1ad3      	subs	r3, r2, r3
 8010b0a:	683a      	ldr	r2, [r7, #0]
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d803      	bhi.n	8010b18 <HAL_SPI_Transmit+0x350>
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b16:	d102      	bne.n	8010b1e <HAL_SPI_Transmit+0x356>
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d114      	bne.n	8010b48 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010b1e:	68f8      	ldr	r0, [r7, #12]
 8010b20:	f000 fc08 	bl	8011334 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	2200      	movs	r2, #0
 8010b28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2201      	movs	r2, #1
 8010b40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010b44:	2303      	movs	r3, #3
 8010b46:	e02c      	b.n	8010ba2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f47f af78 	bne.w	8010a46 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	9300      	str	r3, [sp, #0]
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	2108      	movs	r1, #8
 8010b60:	68f8      	ldr	r0, [r7, #12]
 8010b62:	f000 fc87 	bl	8011474 <SPI_WaitOnFlagUntilTimeout>
 8010b66:	4603      	mov	r3, r0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d007      	beq.n	8010b7c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b72:	f043 0220 	orr.w	r2, r3, #32
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010b7c:	68f8      	ldr	r0, [r7, #12]
 8010b7e:	f000 fbd9 	bl	8011334 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2200      	movs	r2, #0
 8010b86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d001      	beq.n	8010ba0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	e000      	b.n	8010ba2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8010ba0:	7efb      	ldrb	r3, [r7, #27]
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3720      	adds	r7, #32
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop

08010bac <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b08a      	sub	sp, #40	; 0x28
 8010bb0:	af02      	add	r7, sp, #8
 8010bb2:	60f8      	str	r0, [r7, #12]
 8010bb4:	60b9      	str	r1, [r7, #8]
 8010bb6:	603b      	str	r3, [r7, #0]
 8010bb8:	4613      	mov	r3, r2
 8010bba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	3330      	adds	r3, #48	; 0x30
 8010bc6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	685b      	ldr	r3, [r3, #4]
 8010bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010bd0:	d112      	bne.n	8010bf8 <HAL_SPI_Receive+0x4c>
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	689b      	ldr	r3, [r3, #8]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d10e      	bne.n	8010bf8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2204      	movs	r2, #4
 8010bde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010be2:	88fa      	ldrh	r2, [r7, #6]
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	9300      	str	r3, [sp, #0]
 8010be8:	4613      	mov	r3, r2
 8010bea:	68ba      	ldr	r2, [r7, #8]
 8010bec:	68b9      	ldr	r1, [r7, #8]
 8010bee:	68f8      	ldr	r0, [r7, #12]
 8010bf0:	f000 f978 	bl	8010ee4 <HAL_SPI_TransmitReceive>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	e16f      	b.n	8010ed8 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010bfe:	2b01      	cmp	r3, #1
 8010c00:	d101      	bne.n	8010c06 <HAL_SPI_Receive+0x5a>
 8010c02:	2302      	movs	r3, #2
 8010c04:	e168      	b.n	8010ed8 <HAL_SPI_Receive+0x32c>
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	2201      	movs	r2, #1
 8010c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010c0e:	f7f5 fc85 	bl	800651c <HAL_GetTick>
 8010c12:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010c1a:	b2db      	uxtb	r3, r3
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d007      	beq.n	8010c30 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8010c20:	2302      	movs	r3, #2
 8010c22:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	2200      	movs	r2, #0
 8010c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010c2c:	7ffb      	ldrb	r3, [r7, #31]
 8010c2e:	e153      	b.n	8010ed8 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d002      	beq.n	8010c3c <HAL_SPI_Receive+0x90>
 8010c36:	88fb      	ldrh	r3, [r7, #6]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d107      	bne.n	8010c4c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	2200      	movs	r2, #0
 8010c44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010c48:	7ffb      	ldrb	r3, [r7, #31]
 8010c4a:	e145      	b.n	8010ed8 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	2204      	movs	r2, #4
 8010c50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	2200      	movs	r2, #0
 8010c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	68ba      	ldr	r2, [r7, #8]
 8010c60:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	88fa      	ldrh	r2, [r7, #6]
 8010c66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	88fa      	ldrh	r2, [r7, #6]
 8010c6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	2200      	movs	r2, #0
 8010c76:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2200      	movs	r2, #0
 8010c84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	2200      	movs	r2, #0
 8010c92:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	689b      	ldr	r3, [r3, #8]
 8010c98:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010c9c:	d107      	bne.n	8010cae <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	681a      	ldr	r2, [r3, #0]
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010cac:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	685a      	ldr	r2, [r3, #4]
 8010cb4:	4b8a      	ldr	r3, [pc, #552]	; (8010ee0 <HAL_SPI_Receive+0x334>)
 8010cb6:	4013      	ands	r3, r2
 8010cb8:	88f9      	ldrh	r1, [r7, #6]
 8010cba:	68fa      	ldr	r2, [r7, #12]
 8010cbc:	6812      	ldr	r2, [r2, #0]
 8010cbe:	430b      	orrs	r3, r1
 8010cc0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	681a      	ldr	r2, [r3, #0]
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	f042 0201 	orr.w	r2, r2, #1
 8010cd0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010cda:	d107      	bne.n	8010cec <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	681a      	ldr	r2, [r3, #0]
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010cea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	2b0f      	cmp	r3, #15
 8010cf2:	d948      	bls.n	8010d86 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010cf4:	e040      	b.n	8010d78 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	695a      	ldr	r2, [r3, #20]
 8010cfc:	f248 0308 	movw	r3, #32776	; 0x8008
 8010d00:	4013      	ands	r3, r2
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d014      	beq.n	8010d30 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681a      	ldr	r2, [r3, #0]
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010d10:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d16:	1d1a      	adds	r2, r3, #4
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d22:	b29b      	uxth	r3, r3
 8010d24:	3b01      	subs	r3, #1
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010d2e:	e023      	b.n	8010d78 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010d30:	f7f5 fbf4 	bl	800651c <HAL_GetTick>
 8010d34:	4602      	mov	r2, r0
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	1ad3      	subs	r3, r2, r3
 8010d3a:	683a      	ldr	r2, [r7, #0]
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d803      	bhi.n	8010d48 <HAL_SPI_Receive+0x19c>
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d46:	d102      	bne.n	8010d4e <HAL_SPI_Receive+0x1a2>
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d114      	bne.n	8010d78 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	f000 faf0 	bl	8011334 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	2200      	movs	r2, #0
 8010d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	2201      	movs	r2, #1
 8010d70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010d74:	2303      	movs	r3, #3
 8010d76:	e0af      	b.n	8010ed8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d1b8      	bne.n	8010cf6 <HAL_SPI_Receive+0x14a>
 8010d84:	e095      	b.n	8010eb2 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	2b07      	cmp	r3, #7
 8010d8c:	f240 808b 	bls.w	8010ea6 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010d90:	e03f      	b.n	8010e12 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	695b      	ldr	r3, [r3, #20]
 8010d98:	f003 0301 	and.w	r3, r3, #1
 8010d9c:	2b01      	cmp	r3, #1
 8010d9e:	d114      	bne.n	8010dca <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010da4:	69ba      	ldr	r2, [r7, #24]
 8010da6:	8812      	ldrh	r2, [r2, #0]
 8010da8:	b292      	uxth	r2, r2
 8010daa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010db0:	1c9a      	adds	r2, r3, #2
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	3b01      	subs	r3, #1
 8010dc0:	b29a      	uxth	r2, r3
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010dc8:	e023      	b.n	8010e12 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010dca:	f7f5 fba7 	bl	800651c <HAL_GetTick>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	1ad3      	subs	r3, r2, r3
 8010dd4:	683a      	ldr	r2, [r7, #0]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d803      	bhi.n	8010de2 <HAL_SPI_Receive+0x236>
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010de0:	d102      	bne.n	8010de8 <HAL_SPI_Receive+0x23c>
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d114      	bne.n	8010e12 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010de8:	68f8      	ldr	r0, [r7, #12]
 8010dea:	f000 faa3 	bl	8011334 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	2200      	movs	r2, #0
 8010df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010dfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	2201      	movs	r2, #1
 8010e0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010e0e:	2303      	movs	r3, #3
 8010e10:	e062      	b.n	8010ed8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d1b9      	bne.n	8010d92 <HAL_SPI_Receive+0x1e6>
 8010e1e:	e048      	b.n	8010eb2 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	695b      	ldr	r3, [r3, #20]
 8010e26:	f003 0301 	and.w	r3, r3, #1
 8010e2a:	2b01      	cmp	r3, #1
 8010e2c:	d117      	bne.n	8010e5e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e3a:	7812      	ldrb	r2, [r2, #0]
 8010e3c:	b2d2      	uxtb	r2, r2
 8010e3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e44:	1c5a      	adds	r2, r3, #1
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	3b01      	subs	r3, #1
 8010e54:	b29a      	uxth	r2, r3
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010e5c:	e023      	b.n	8010ea6 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e5e:	f7f5 fb5d 	bl	800651c <HAL_GetTick>
 8010e62:	4602      	mov	r2, r0
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	1ad3      	subs	r3, r2, r3
 8010e68:	683a      	ldr	r2, [r7, #0]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d803      	bhi.n	8010e76 <HAL_SPI_Receive+0x2ca>
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e74:	d102      	bne.n	8010e7c <HAL_SPI_Receive+0x2d0>
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d114      	bne.n	8010ea6 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010e7c:	68f8      	ldr	r0, [r7, #12]
 8010e7e:	f000 fa59 	bl	8011334 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	2200      	movs	r2, #0
 8010e86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	2201      	movs	r2, #1
 8010e9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010ea2:	2303      	movs	r3, #3
 8010ea4:	e018      	b.n	8010ed8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d1b6      	bne.n	8010e20 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010eb2:	68f8      	ldr	r0, [r7, #12]
 8010eb4:	f000 fa3e 	bl	8011334 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	2200      	movs	r2, #0
 8010ebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d001      	beq.n	8010ed6 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	e000      	b.n	8010ed8 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8010ed6:	7ffb      	ldrb	r3, [r7, #31]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3720      	adds	r7, #32
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	ffff0000 	.word	0xffff0000

08010ee4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b08e      	sub	sp, #56	; 0x38
 8010ee8:	af02      	add	r7, sp, #8
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	607a      	str	r2, [r7, #4]
 8010ef0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	3320      	adds	r3, #32
 8010efe:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	3330      	adds	r3, #48	; 0x30
 8010f06:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	d101      	bne.n	8010f16 <HAL_SPI_TransmitReceive+0x32>
 8010f12:	2302      	movs	r3, #2
 8010f14:	e209      	b.n	801132a <HAL_SPI_TransmitReceive+0x446>
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	2201      	movs	r2, #1
 8010f1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010f1e:	f7f5 fafd 	bl	800651c <HAL_GetTick>
 8010f22:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8010f24:	887b      	ldrh	r3, [r7, #2]
 8010f26:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8010f28:	887b      	ldrh	r3, [r7, #2]
 8010f2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010f32:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010f3a:	7efb      	ldrb	r3, [r7, #27]
 8010f3c:	2b01      	cmp	r3, #1
 8010f3e:	d014      	beq.n	8010f6a <HAL_SPI_TransmitReceive+0x86>
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010f46:	d106      	bne.n	8010f56 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d102      	bne.n	8010f56 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8010f50:	7efb      	ldrb	r3, [r7, #27]
 8010f52:	2b04      	cmp	r3, #4
 8010f54:	d009      	beq.n	8010f6a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8010f56:	2302      	movs	r3, #2
 8010f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010f64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010f68:	e1df      	b.n	801132a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d005      	beq.n	8010f7c <HAL_SPI_TransmitReceive+0x98>
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d002      	beq.n	8010f7c <HAL_SPI_TransmitReceive+0x98>
 8010f76:	887b      	ldrh	r3, [r7, #2]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d109      	bne.n	8010f90 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	2200      	movs	r2, #0
 8010f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010f8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010f8e:	e1cc      	b.n	801132a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010f96:	b2db      	uxtb	r3, r3
 8010f98:	2b04      	cmp	r3, #4
 8010f9a:	d003      	beq.n	8010fa4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	2205      	movs	r2, #5
 8010fa0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	887a      	ldrh	r2, [r7, #2]
 8010fb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	887a      	ldrh	r2, [r7, #2]
 8010fbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	68ba      	ldr	r2, [r7, #8]
 8010fc6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	887a      	ldrh	r2, [r7, #2]
 8010fcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	887a      	ldrh	r2, [r7, #2]
 8010fd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	685a      	ldr	r2, [r3, #4]
 8010fea:	4b82      	ldr	r3, [pc, #520]	; (80111f4 <HAL_SPI_TransmitReceive+0x310>)
 8010fec:	4013      	ands	r3, r2
 8010fee:	8879      	ldrh	r1, [r7, #2]
 8010ff0:	68fa      	ldr	r2, [r7, #12]
 8010ff2:	6812      	ldr	r2, [r2, #0]
 8010ff4:	430b      	orrs	r3, r1
 8010ff6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	681a      	ldr	r2, [r3, #0]
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	f042 0201 	orr.w	r2, r2, #1
 8011006:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011010:	d107      	bne.n	8011022 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	681a      	ldr	r2, [r3, #0]
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011020:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	68db      	ldr	r3, [r3, #12]
 8011026:	2b0f      	cmp	r3, #15
 8011028:	d970      	bls.n	801110c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801102a:	e068      	b.n	80110fe <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	695b      	ldr	r3, [r3, #20]
 8011032:	f003 0302 	and.w	r3, r3, #2
 8011036:	2b02      	cmp	r3, #2
 8011038:	d11a      	bne.n	8011070 <HAL_SPI_TransmitReceive+0x18c>
 801103a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801103c:	2b00      	cmp	r3, #0
 801103e:	d017      	beq.n	8011070 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	6812      	ldr	r2, [r2, #0]
 801104a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011050:	1d1a      	adds	r2, r3, #4
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801105c:	b29b      	uxth	r3, r3
 801105e:	3b01      	subs	r3, #1
 8011060:	b29a      	uxth	r2, r3
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801106e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	695a      	ldr	r2, [r3, #20]
 8011076:	f248 0308 	movw	r3, #32776	; 0x8008
 801107a:	4013      	ands	r3, r2
 801107c:	2b00      	cmp	r3, #0
 801107e:	d01a      	beq.n	80110b6 <HAL_SPI_TransmitReceive+0x1d2>
 8011080:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011082:	2b00      	cmp	r3, #0
 8011084:	d017      	beq.n	80110b6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801108e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011090:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011096:	1d1a      	adds	r2, r3, #4
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	3b01      	subs	r3, #1
 80110a6:	b29a      	uxth	r2, r3
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80110b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80110b6:	f7f5 fa31 	bl	800651c <HAL_GetTick>
 80110ba:	4602      	mov	r2, r0
 80110bc:	69fb      	ldr	r3, [r7, #28]
 80110be:	1ad3      	subs	r3, r2, r3
 80110c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d803      	bhi.n	80110ce <HAL_SPI_TransmitReceive+0x1ea>
 80110c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110cc:	d102      	bne.n	80110d4 <HAL_SPI_TransmitReceive+0x1f0>
 80110ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d114      	bne.n	80110fe <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80110d4:	68f8      	ldr	r0, [r7, #12]
 80110d6:	f000 f92d 	bl	8011334 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	2200      	movs	r2, #0
 80110de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	2201      	movs	r2, #1
 80110f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80110fa:	2303      	movs	r3, #3
 80110fc:	e115      	b.n	801132a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80110fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011100:	2b00      	cmp	r3, #0
 8011102:	d193      	bne.n	801102c <HAL_SPI_TransmitReceive+0x148>
 8011104:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011106:	2b00      	cmp	r3, #0
 8011108:	d190      	bne.n	801102c <HAL_SPI_TransmitReceive+0x148>
 801110a:	e0e7      	b.n	80112dc <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	2b07      	cmp	r3, #7
 8011112:	f240 80dd 	bls.w	80112d0 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011116:	e066      	b.n	80111e6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	695b      	ldr	r3, [r3, #20]
 801111e:	f003 0302 	and.w	r3, r3, #2
 8011122:	2b02      	cmp	r3, #2
 8011124:	d119      	bne.n	801115a <HAL_SPI_TransmitReceive+0x276>
 8011126:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011128:	2b00      	cmp	r3, #0
 801112a:	d016      	beq.n	801115a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011130:	881a      	ldrh	r2, [r3, #0]
 8011132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011134:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801113a:	1c9a      	adds	r2, r3, #2
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011146:	b29b      	uxth	r3, r3
 8011148:	3b01      	subs	r3, #1
 801114a:	b29a      	uxth	r2, r3
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011158:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	695b      	ldr	r3, [r3, #20]
 8011160:	f003 0301 	and.w	r3, r3, #1
 8011164:	2b01      	cmp	r3, #1
 8011166:	d11a      	bne.n	801119e <HAL_SPI_TransmitReceive+0x2ba>
 8011168:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801116a:	2b00      	cmp	r3, #0
 801116c:	d017      	beq.n	801119e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011172:	6a3a      	ldr	r2, [r7, #32]
 8011174:	8812      	ldrh	r2, [r2, #0]
 8011176:	b292      	uxth	r2, r2
 8011178:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801117e:	1c9a      	adds	r2, r3, #2
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801118a:	b29b      	uxth	r3, r3
 801118c:	3b01      	subs	r3, #1
 801118e:	b29a      	uxth	r2, r3
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801119c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801119e:	f7f5 f9bd 	bl	800651c <HAL_GetTick>
 80111a2:	4602      	mov	r2, r0
 80111a4:	69fb      	ldr	r3, [r7, #28]
 80111a6:	1ad3      	subs	r3, r2, r3
 80111a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d803      	bhi.n	80111b6 <HAL_SPI_TransmitReceive+0x2d2>
 80111ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b4:	d102      	bne.n	80111bc <HAL_SPI_TransmitReceive+0x2d8>
 80111b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d114      	bne.n	80111e6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80111bc:	68f8      	ldr	r0, [r7, #12]
 80111be:	f000 f8b9 	bl	8011334 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	2200      	movs	r2, #0
 80111c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80111d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	2201      	movs	r2, #1
 80111de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80111e2:	2303      	movs	r3, #3
 80111e4:	e0a1      	b.n	801132a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80111e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d195      	bne.n	8011118 <HAL_SPI_TransmitReceive+0x234>
 80111ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d192      	bne.n	8011118 <HAL_SPI_TransmitReceive+0x234>
 80111f2:	e073      	b.n	80112dc <HAL_SPI_TransmitReceive+0x3f8>
 80111f4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	695b      	ldr	r3, [r3, #20]
 80111fe:	f003 0302 	and.w	r3, r3, #2
 8011202:	2b02      	cmp	r3, #2
 8011204:	d11b      	bne.n	801123e <HAL_SPI_TransmitReceive+0x35a>
 8011206:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011208:	2b00      	cmp	r3, #0
 801120a:	d018      	beq.n	801123e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	3320      	adds	r3, #32
 8011216:	7812      	ldrb	r2, [r2, #0]
 8011218:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801121e:	1c5a      	adds	r2, r3, #1
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801122a:	b29b      	uxth	r3, r3
 801122c:	3b01      	subs	r3, #1
 801122e:	b29a      	uxth	r2, r3
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801123c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	695b      	ldr	r3, [r3, #20]
 8011244:	f003 0301 	and.w	r3, r3, #1
 8011248:	2b01      	cmp	r3, #1
 801124a:	d11d      	bne.n	8011288 <HAL_SPI_TransmitReceive+0x3a4>
 801124c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801124e:	2b00      	cmp	r3, #0
 8011250:	d01a      	beq.n	8011288 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801125e:	7812      	ldrb	r2, [r2, #0]
 8011260:	b2d2      	uxtb	r2, r2
 8011262:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011268:	1c5a      	adds	r2, r3, #1
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011274:	b29b      	uxth	r3, r3
 8011276:	3b01      	subs	r3, #1
 8011278:	b29a      	uxth	r2, r3
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011286:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011288:	f7f5 f948 	bl	800651c <HAL_GetTick>
 801128c:	4602      	mov	r2, r0
 801128e:	69fb      	ldr	r3, [r7, #28]
 8011290:	1ad3      	subs	r3, r2, r3
 8011292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011294:	429a      	cmp	r2, r3
 8011296:	d803      	bhi.n	80112a0 <HAL_SPI_TransmitReceive+0x3bc>
 8011298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801129e:	d102      	bne.n	80112a6 <HAL_SPI_TransmitReceive+0x3c2>
 80112a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d114      	bne.n	80112d0 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80112a6:	68f8      	ldr	r0, [r7, #12]
 80112a8:	f000 f844 	bl	8011334 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	2200      	movs	r2, #0
 80112b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80112ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2201      	movs	r2, #1
 80112c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80112cc:	2303      	movs	r3, #3
 80112ce:	e02c      	b.n	801132a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80112d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d190      	bne.n	80111f8 <HAL_SPI_TransmitReceive+0x314>
 80112d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d18d      	bne.n	80111f8 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80112dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112de:	9300      	str	r3, [sp, #0]
 80112e0:	69fb      	ldr	r3, [r7, #28]
 80112e2:	2200      	movs	r2, #0
 80112e4:	2108      	movs	r1, #8
 80112e6:	68f8      	ldr	r0, [r7, #12]
 80112e8:	f000 f8c4 	bl	8011474 <SPI_WaitOnFlagUntilTimeout>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d007      	beq.n	8011302 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80112f8:	f043 0220 	orr.w	r2, r3, #32
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011302:	68f8      	ldr	r0, [r7, #12]
 8011304:	f000 f816 	bl	8011334 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	2200      	movs	r2, #0
 801130c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	2201      	movs	r2, #1
 8011314:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801131e:	2b00      	cmp	r3, #0
 8011320:	d001      	beq.n	8011326 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8011322:	2301      	movs	r3, #1
 8011324:	e001      	b.n	801132a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8011326:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801132a:	4618      	mov	r0, r3
 801132c:	3730      	adds	r7, #48	; 0x30
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
 8011332:	bf00      	nop

08011334 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011334:	b480      	push	{r7}
 8011336:	b085      	sub	sp, #20
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	695b      	ldr	r3, [r3, #20]
 8011342:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	699a      	ldr	r2, [r3, #24]
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	f042 0208 	orr.w	r2, r2, #8
 8011352:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	699a      	ldr	r2, [r3, #24]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f042 0210 	orr.w	r2, r2, #16
 8011362:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f022 0201 	bic.w	r2, r2, #1
 8011372:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	6919      	ldr	r1, [r3, #16]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681a      	ldr	r2, [r3, #0]
 801137e:	4b3c      	ldr	r3, [pc, #240]	; (8011470 <SPI_CloseTransfer+0x13c>)
 8011380:	400b      	ands	r3, r1
 8011382:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	689a      	ldr	r2, [r3, #8]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011392:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801139a:	b2db      	uxtb	r3, r3
 801139c:	2b04      	cmp	r3, #4
 801139e:	d014      	beq.n	80113ca <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	f003 0320 	and.w	r3, r3, #32
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00f      	beq.n	80113ca <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80113b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	699a      	ldr	r2, [r3, #24]
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	f042 0220 	orr.w	r2, r2, #32
 80113c8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80113d0:	b2db      	uxtb	r3, r3
 80113d2:	2b03      	cmp	r3, #3
 80113d4:	d014      	beq.n	8011400 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d00f      	beq.n	8011400 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80113e6:	f043 0204 	orr.w	r2, r3, #4
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	699a      	ldr	r2, [r3, #24]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80113fe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00f      	beq.n	801142a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011410:	f043 0201 	orr.w	r2, r3, #1
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	699a      	ldr	r2, [r3, #24]
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011428:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011430:	2b00      	cmp	r3, #0
 8011432:	d00f      	beq.n	8011454 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801143a:	f043 0208 	orr.w	r2, r3, #8
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	699a      	ldr	r2, [r3, #24]
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011452:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2200      	movs	r2, #0
 8011458:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2200      	movs	r2, #0
 8011460:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8011464:	bf00      	nop
 8011466:	3714      	adds	r7, #20
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr
 8011470:	fffffc90 	.word	0xfffffc90

08011474 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b084      	sub	sp, #16
 8011478:	af00      	add	r7, sp, #0
 801147a:	60f8      	str	r0, [r7, #12]
 801147c:	60b9      	str	r1, [r7, #8]
 801147e:	603b      	str	r3, [r7, #0]
 8011480:	4613      	mov	r3, r2
 8011482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011484:	e010      	b.n	80114a8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011486:	f7f5 f849 	bl	800651c <HAL_GetTick>
 801148a:	4602      	mov	r2, r0
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	1ad3      	subs	r3, r2, r3
 8011490:	69ba      	ldr	r2, [r7, #24]
 8011492:	429a      	cmp	r2, r3
 8011494:	d803      	bhi.n	801149e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8011496:	69bb      	ldr	r3, [r7, #24]
 8011498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801149c:	d102      	bne.n	80114a4 <SPI_WaitOnFlagUntilTimeout+0x30>
 801149e:	69bb      	ldr	r3, [r7, #24]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d101      	bne.n	80114a8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80114a4:	2303      	movs	r3, #3
 80114a6:	e00f      	b.n	80114c8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	695a      	ldr	r2, [r3, #20]
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	4013      	ands	r3, r2
 80114b2:	68ba      	ldr	r2, [r7, #8]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	bf0c      	ite	eq
 80114b8:	2301      	moveq	r3, #1
 80114ba:	2300      	movne	r3, #0
 80114bc:	b2db      	uxtb	r3, r3
 80114be:	461a      	mov	r2, r3
 80114c0:	79fb      	ldrb	r3, [r7, #7]
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d0df      	beq.n	8011486 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80114c6:	2300      	movs	r3, #0
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3710      	adds	r7, #16
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}

080114d0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b085      	sub	sp, #20
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114dc:	095b      	lsrs	r3, r3, #5
 80114de:	3301      	adds	r3, #1
 80114e0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	3301      	adds	r3, #1
 80114e8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	3307      	adds	r3, #7
 80114ee:	08db      	lsrs	r3, r3, #3
 80114f0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	68fa      	ldr	r2, [r7, #12]
 80114f6:	fb02 f303 	mul.w	r3, r2, r3
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3714      	adds	r7, #20
 80114fe:	46bd      	mov	sp, r7
 8011500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011504:	4770      	bx	lr

08011506 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011506:	b580      	push	{r7, lr}
 8011508:	b082      	sub	sp, #8
 801150a:	af00      	add	r7, sp, #0
 801150c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d101      	bne.n	8011518 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011514:	2301      	movs	r3, #1
 8011516:	e049      	b.n	80115ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801151e:	b2db      	uxtb	r3, r3
 8011520:	2b00      	cmp	r3, #0
 8011522:	d106      	bne.n	8011532 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2200      	movs	r2, #0
 8011528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f7f4 facd 	bl	8005acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2202      	movs	r2, #2
 8011536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	3304      	adds	r3, #4
 8011542:	4619      	mov	r1, r3
 8011544:	4610      	mov	r0, r2
 8011546:	f000 ff17 	bl	8012378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2201      	movs	r2, #1
 801154e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2201      	movs	r2, #1
 8011556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	2201      	movs	r2, #1
 801155e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	2201      	movs	r2, #1
 8011566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2201      	movs	r2, #1
 801156e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2201      	movs	r2, #1
 8011576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	2201      	movs	r2, #1
 801157e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	2201      	movs	r2, #1
 8011586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2201      	movs	r2, #1
 801158e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2201      	movs	r2, #1
 8011596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2201      	movs	r2, #1
 801159e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2201      	movs	r2, #1
 80115a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80115aa:	2300      	movs	r3, #0
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3708      	adds	r7, #8
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}

080115b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80115b4:	b480      	push	{r7}
 80115b6:	b085      	sub	sp, #20
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80115c2:	b2db      	uxtb	r3, r3
 80115c4:	2b01      	cmp	r3, #1
 80115c6:	d001      	beq.n	80115cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80115c8:	2301      	movs	r3, #1
 80115ca:	e05e      	b.n	801168a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2202      	movs	r2, #2
 80115d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	68da      	ldr	r2, [r3, #12]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	f042 0201 	orr.w	r2, r2, #1
 80115e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	4a2b      	ldr	r2, [pc, #172]	; (8011698 <HAL_TIM_Base_Start_IT+0xe4>)
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d02c      	beq.n	8011648 <HAL_TIM_Base_Start_IT+0x94>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115f6:	d027      	beq.n	8011648 <HAL_TIM_Base_Start_IT+0x94>
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	4a27      	ldr	r2, [pc, #156]	; (801169c <HAL_TIM_Base_Start_IT+0xe8>)
 80115fe:	4293      	cmp	r3, r2
 8011600:	d022      	beq.n	8011648 <HAL_TIM_Base_Start_IT+0x94>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	4a26      	ldr	r2, [pc, #152]	; (80116a0 <HAL_TIM_Base_Start_IT+0xec>)
 8011608:	4293      	cmp	r3, r2
 801160a:	d01d      	beq.n	8011648 <HAL_TIM_Base_Start_IT+0x94>
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	4a24      	ldr	r2, [pc, #144]	; (80116a4 <HAL_TIM_Base_Start_IT+0xf0>)
 8011612:	4293      	cmp	r3, r2
 8011614:	d018      	beq.n	8011648 <HAL_TIM_Base_Start_IT+0x94>
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	4a23      	ldr	r2, [pc, #140]	; (80116a8 <HAL_TIM_Base_Start_IT+0xf4>)
 801161c:	4293      	cmp	r3, r2
 801161e:	d013      	beq.n	8011648 <HAL_TIM_Base_Start_IT+0x94>
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	4a21      	ldr	r2, [pc, #132]	; (80116ac <HAL_TIM_Base_Start_IT+0xf8>)
 8011626:	4293      	cmp	r3, r2
 8011628:	d00e      	beq.n	8011648 <HAL_TIM_Base_Start_IT+0x94>
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	4a20      	ldr	r2, [pc, #128]	; (80116b0 <HAL_TIM_Base_Start_IT+0xfc>)
 8011630:	4293      	cmp	r3, r2
 8011632:	d009      	beq.n	8011648 <HAL_TIM_Base_Start_IT+0x94>
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	4a1e      	ldr	r2, [pc, #120]	; (80116b4 <HAL_TIM_Base_Start_IT+0x100>)
 801163a:	4293      	cmp	r3, r2
 801163c:	d004      	beq.n	8011648 <HAL_TIM_Base_Start_IT+0x94>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	4a1d      	ldr	r2, [pc, #116]	; (80116b8 <HAL_TIM_Base_Start_IT+0x104>)
 8011644:	4293      	cmp	r3, r2
 8011646:	d115      	bne.n	8011674 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	689a      	ldr	r2, [r3, #8]
 801164e:	4b1b      	ldr	r3, [pc, #108]	; (80116bc <HAL_TIM_Base_Start_IT+0x108>)
 8011650:	4013      	ands	r3, r2
 8011652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2b06      	cmp	r3, #6
 8011658:	d015      	beq.n	8011686 <HAL_TIM_Base_Start_IT+0xd2>
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011660:	d011      	beq.n	8011686 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f042 0201 	orr.w	r2, r2, #1
 8011670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011672:	e008      	b.n	8011686 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	f042 0201 	orr.w	r2, r2, #1
 8011682:	601a      	str	r2, [r3, #0]
 8011684:	e000      	b.n	8011688 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011686:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011688:	2300      	movs	r3, #0
}
 801168a:	4618      	mov	r0, r3
 801168c:	3714      	adds	r7, #20
 801168e:	46bd      	mov	sp, r7
 8011690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011694:	4770      	bx	lr
 8011696:	bf00      	nop
 8011698:	40010000 	.word	0x40010000
 801169c:	40000400 	.word	0x40000400
 80116a0:	40000800 	.word	0x40000800
 80116a4:	40000c00 	.word	0x40000c00
 80116a8:	40010400 	.word	0x40010400
 80116ac:	40001800 	.word	0x40001800
 80116b0:	40014000 	.word	0x40014000
 80116b4:	4000e000 	.word	0x4000e000
 80116b8:	4000e400 	.word	0x4000e400
 80116bc:	00010007 	.word	0x00010007

080116c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d101      	bne.n	80116d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80116ce:	2301      	movs	r3, #1
 80116d0:	e049      	b.n	8011766 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d106      	bne.n	80116ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2200      	movs	r2, #0
 80116e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f7f4 f882 	bl	80057f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2202      	movs	r2, #2
 80116f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	3304      	adds	r3, #4
 80116fc:	4619      	mov	r1, r3
 80116fe:	4610      	mov	r0, r2
 8011700:	f000 fe3a 	bl	8012378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2201      	movs	r2, #1
 8011708:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2201      	movs	r2, #1
 8011710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2201      	movs	r2, #1
 8011718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2201      	movs	r2, #1
 8011720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2201      	movs	r2, #1
 8011728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2201      	movs	r2, #1
 8011730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2201      	movs	r2, #1
 8011738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2201      	movs	r2, #1
 8011740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2201      	movs	r2, #1
 8011748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2201      	movs	r2, #1
 8011750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2201      	movs	r2, #1
 8011758:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2201      	movs	r2, #1
 8011760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011764:	2300      	movs	r3, #0
}
 8011766:	4618      	mov	r0, r3
 8011768:	3708      	adds	r7, #8
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}
	...

08011770 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b084      	sub	sp, #16
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d109      	bne.n	8011794 <HAL_TIM_PWM_Start+0x24>
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011786:	b2db      	uxtb	r3, r3
 8011788:	2b01      	cmp	r3, #1
 801178a:	bf14      	ite	ne
 801178c:	2301      	movne	r3, #1
 801178e:	2300      	moveq	r3, #0
 8011790:	b2db      	uxtb	r3, r3
 8011792:	e03c      	b.n	801180e <HAL_TIM_PWM_Start+0x9e>
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	2b04      	cmp	r3, #4
 8011798:	d109      	bne.n	80117ae <HAL_TIM_PWM_Start+0x3e>
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80117a0:	b2db      	uxtb	r3, r3
 80117a2:	2b01      	cmp	r3, #1
 80117a4:	bf14      	ite	ne
 80117a6:	2301      	movne	r3, #1
 80117a8:	2300      	moveq	r3, #0
 80117aa:	b2db      	uxtb	r3, r3
 80117ac:	e02f      	b.n	801180e <HAL_TIM_PWM_Start+0x9e>
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	2b08      	cmp	r3, #8
 80117b2:	d109      	bne.n	80117c8 <HAL_TIM_PWM_Start+0x58>
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	2b01      	cmp	r3, #1
 80117be:	bf14      	ite	ne
 80117c0:	2301      	movne	r3, #1
 80117c2:	2300      	moveq	r3, #0
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	e022      	b.n	801180e <HAL_TIM_PWM_Start+0x9e>
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	2b0c      	cmp	r3, #12
 80117cc:	d109      	bne.n	80117e2 <HAL_TIM_PWM_Start+0x72>
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80117d4:	b2db      	uxtb	r3, r3
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	bf14      	ite	ne
 80117da:	2301      	movne	r3, #1
 80117dc:	2300      	moveq	r3, #0
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	e015      	b.n	801180e <HAL_TIM_PWM_Start+0x9e>
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	2b10      	cmp	r3, #16
 80117e6:	d109      	bne.n	80117fc <HAL_TIM_PWM_Start+0x8c>
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117ee:	b2db      	uxtb	r3, r3
 80117f0:	2b01      	cmp	r3, #1
 80117f2:	bf14      	ite	ne
 80117f4:	2301      	movne	r3, #1
 80117f6:	2300      	moveq	r3, #0
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	e008      	b.n	801180e <HAL_TIM_PWM_Start+0x9e>
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011802:	b2db      	uxtb	r3, r3
 8011804:	2b01      	cmp	r3, #1
 8011806:	bf14      	ite	ne
 8011808:	2301      	movne	r3, #1
 801180a:	2300      	moveq	r3, #0
 801180c:	b2db      	uxtb	r3, r3
 801180e:	2b00      	cmp	r3, #0
 8011810:	d001      	beq.n	8011816 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8011812:	2301      	movs	r3, #1
 8011814:	e0ab      	b.n	801196e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d104      	bne.n	8011826 <HAL_TIM_PWM_Start+0xb6>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2202      	movs	r2, #2
 8011820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011824:	e023      	b.n	801186e <HAL_TIM_PWM_Start+0xfe>
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	2b04      	cmp	r3, #4
 801182a:	d104      	bne.n	8011836 <HAL_TIM_PWM_Start+0xc6>
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2202      	movs	r2, #2
 8011830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011834:	e01b      	b.n	801186e <HAL_TIM_PWM_Start+0xfe>
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	2b08      	cmp	r3, #8
 801183a:	d104      	bne.n	8011846 <HAL_TIM_PWM_Start+0xd6>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2202      	movs	r2, #2
 8011840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011844:	e013      	b.n	801186e <HAL_TIM_PWM_Start+0xfe>
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	2b0c      	cmp	r3, #12
 801184a:	d104      	bne.n	8011856 <HAL_TIM_PWM_Start+0xe6>
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2202      	movs	r2, #2
 8011850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011854:	e00b      	b.n	801186e <HAL_TIM_PWM_Start+0xfe>
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	2b10      	cmp	r3, #16
 801185a:	d104      	bne.n	8011866 <HAL_TIM_PWM_Start+0xf6>
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	2202      	movs	r2, #2
 8011860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011864:	e003      	b.n	801186e <HAL_TIM_PWM_Start+0xfe>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	2202      	movs	r2, #2
 801186a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	2201      	movs	r2, #1
 8011874:	6839      	ldr	r1, [r7, #0]
 8011876:	4618      	mov	r0, r3
 8011878:	f001 f998 	bl	8012bac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	4a3d      	ldr	r2, [pc, #244]	; (8011978 <HAL_TIM_PWM_Start+0x208>)
 8011882:	4293      	cmp	r3, r2
 8011884:	d013      	beq.n	80118ae <HAL_TIM_PWM_Start+0x13e>
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	4a3c      	ldr	r2, [pc, #240]	; (801197c <HAL_TIM_PWM_Start+0x20c>)
 801188c:	4293      	cmp	r3, r2
 801188e:	d00e      	beq.n	80118ae <HAL_TIM_PWM_Start+0x13e>
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	4a3a      	ldr	r2, [pc, #232]	; (8011980 <HAL_TIM_PWM_Start+0x210>)
 8011896:	4293      	cmp	r3, r2
 8011898:	d009      	beq.n	80118ae <HAL_TIM_PWM_Start+0x13e>
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	4a39      	ldr	r2, [pc, #228]	; (8011984 <HAL_TIM_PWM_Start+0x214>)
 80118a0:	4293      	cmp	r3, r2
 80118a2:	d004      	beq.n	80118ae <HAL_TIM_PWM_Start+0x13e>
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	4a37      	ldr	r2, [pc, #220]	; (8011988 <HAL_TIM_PWM_Start+0x218>)
 80118aa:	4293      	cmp	r3, r2
 80118ac:	d101      	bne.n	80118b2 <HAL_TIM_PWM_Start+0x142>
 80118ae:	2301      	movs	r3, #1
 80118b0:	e000      	b.n	80118b4 <HAL_TIM_PWM_Start+0x144>
 80118b2:	2300      	movs	r3, #0
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d007      	beq.n	80118c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80118c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	4a2a      	ldr	r2, [pc, #168]	; (8011978 <HAL_TIM_PWM_Start+0x208>)
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d02c      	beq.n	801192c <HAL_TIM_PWM_Start+0x1bc>
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80118da:	d027      	beq.n	801192c <HAL_TIM_PWM_Start+0x1bc>
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4a2a      	ldr	r2, [pc, #168]	; (801198c <HAL_TIM_PWM_Start+0x21c>)
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d022      	beq.n	801192c <HAL_TIM_PWM_Start+0x1bc>
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	4a29      	ldr	r2, [pc, #164]	; (8011990 <HAL_TIM_PWM_Start+0x220>)
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d01d      	beq.n	801192c <HAL_TIM_PWM_Start+0x1bc>
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	4a27      	ldr	r2, [pc, #156]	; (8011994 <HAL_TIM_PWM_Start+0x224>)
 80118f6:	4293      	cmp	r3, r2
 80118f8:	d018      	beq.n	801192c <HAL_TIM_PWM_Start+0x1bc>
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	4a1f      	ldr	r2, [pc, #124]	; (801197c <HAL_TIM_PWM_Start+0x20c>)
 8011900:	4293      	cmp	r3, r2
 8011902:	d013      	beq.n	801192c <HAL_TIM_PWM_Start+0x1bc>
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	4a23      	ldr	r2, [pc, #140]	; (8011998 <HAL_TIM_PWM_Start+0x228>)
 801190a:	4293      	cmp	r3, r2
 801190c:	d00e      	beq.n	801192c <HAL_TIM_PWM_Start+0x1bc>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	4a1b      	ldr	r2, [pc, #108]	; (8011980 <HAL_TIM_PWM_Start+0x210>)
 8011914:	4293      	cmp	r3, r2
 8011916:	d009      	beq.n	801192c <HAL_TIM_PWM_Start+0x1bc>
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	4a1f      	ldr	r2, [pc, #124]	; (801199c <HAL_TIM_PWM_Start+0x22c>)
 801191e:	4293      	cmp	r3, r2
 8011920:	d004      	beq.n	801192c <HAL_TIM_PWM_Start+0x1bc>
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	4a1e      	ldr	r2, [pc, #120]	; (80119a0 <HAL_TIM_PWM_Start+0x230>)
 8011928:	4293      	cmp	r3, r2
 801192a:	d115      	bne.n	8011958 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	689a      	ldr	r2, [r3, #8]
 8011932:	4b1c      	ldr	r3, [pc, #112]	; (80119a4 <HAL_TIM_PWM_Start+0x234>)
 8011934:	4013      	ands	r3, r2
 8011936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	2b06      	cmp	r3, #6
 801193c:	d015      	beq.n	801196a <HAL_TIM_PWM_Start+0x1fa>
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011944:	d011      	beq.n	801196a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	681a      	ldr	r2, [r3, #0]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	f042 0201 	orr.w	r2, r2, #1
 8011954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011956:	e008      	b.n	801196a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	681a      	ldr	r2, [r3, #0]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	f042 0201 	orr.w	r2, r2, #1
 8011966:	601a      	str	r2, [r3, #0]
 8011968:	e000      	b.n	801196c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801196a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801196c:	2300      	movs	r3, #0
}
 801196e:	4618      	mov	r0, r3
 8011970:	3710      	adds	r7, #16
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}
 8011976:	bf00      	nop
 8011978:	40010000 	.word	0x40010000
 801197c:	40010400 	.word	0x40010400
 8011980:	40014000 	.word	0x40014000
 8011984:	40014400 	.word	0x40014400
 8011988:	40014800 	.word	0x40014800
 801198c:	40000400 	.word	0x40000400
 8011990:	40000800 	.word	0x40000800
 8011994:	40000c00 	.word	0x40000c00
 8011998:	40001800 	.word	0x40001800
 801199c:	4000e000 	.word	0x4000e000
 80119a0:	4000e400 	.word	0x4000e400
 80119a4:	00010007 	.word	0x00010007

080119a8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b084      	sub	sp, #16
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80119b2:	2300      	movs	r3, #0
 80119b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	2b0c      	cmp	r3, #12
 80119ba:	d855      	bhi.n	8011a68 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80119bc:	a201      	add	r2, pc, #4	; (adr r2, 80119c4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80119be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119c2:	bf00      	nop
 80119c4:	080119f9 	.word	0x080119f9
 80119c8:	08011a69 	.word	0x08011a69
 80119cc:	08011a69 	.word	0x08011a69
 80119d0:	08011a69 	.word	0x08011a69
 80119d4:	08011a15 	.word	0x08011a15
 80119d8:	08011a69 	.word	0x08011a69
 80119dc:	08011a69 	.word	0x08011a69
 80119e0:	08011a69 	.word	0x08011a69
 80119e4:	08011a31 	.word	0x08011a31
 80119e8:	08011a69 	.word	0x08011a69
 80119ec:	08011a69 	.word	0x08011a69
 80119f0:	08011a69 	.word	0x08011a69
 80119f4:	08011a4d 	.word	0x08011a4d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	68da      	ldr	r2, [r3, #12]
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8011a06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7f8 f889 	bl	8009b24 <HAL_DMA_Abort_IT>
      break;
 8011a12:	e02c      	b.n	8011a6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	68da      	ldr	r2, [r3, #12]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011a22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7f8 f87b 	bl	8009b24 <HAL_DMA_Abort_IT>
      break;
 8011a2e:	e01e      	b.n	8011a6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	68da      	ldr	r2, [r3, #12]
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011a3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7f8 f86d 	bl	8009b24 <HAL_DMA_Abort_IT>
      break;
 8011a4a:	e010      	b.n	8011a6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	68da      	ldr	r2, [r3, #12]
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011a5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7f8 f85f 	bl	8009b24 <HAL_DMA_Abort_IT>
      break;
 8011a66:	e002      	b.n	8011a6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8011a68:	2301      	movs	r3, #1
 8011a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8011a6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8011a6e:	7bfb      	ldrb	r3, [r7, #15]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	f040 8081 	bne.w	8011b78 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	6839      	ldr	r1, [r7, #0]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f001 f894 	bl	8012bac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	4a3e      	ldr	r2, [pc, #248]	; (8011b84 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8011a8a:	4293      	cmp	r3, r2
 8011a8c:	d013      	beq.n	8011ab6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	4a3d      	ldr	r2, [pc, #244]	; (8011b88 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8011a94:	4293      	cmp	r3, r2
 8011a96:	d00e      	beq.n	8011ab6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	4a3b      	ldr	r2, [pc, #236]	; (8011b8c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8011a9e:	4293      	cmp	r3, r2
 8011aa0:	d009      	beq.n	8011ab6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	4a3a      	ldr	r2, [pc, #232]	; (8011b90 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8011aa8:	4293      	cmp	r3, r2
 8011aaa:	d004      	beq.n	8011ab6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	4a38      	ldr	r2, [pc, #224]	; (8011b94 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	d101      	bne.n	8011aba <HAL_TIM_PWM_Stop_DMA+0x112>
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	e000      	b.n	8011abc <HAL_TIM_PWM_Stop_DMA+0x114>
 8011aba:	2300      	movs	r3, #0
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d017      	beq.n	8011af0 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	6a1a      	ldr	r2, [r3, #32]
 8011ac6:	f241 1311 	movw	r3, #4369	; 0x1111
 8011aca:	4013      	ands	r3, r2
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d10f      	bne.n	8011af0 <HAL_TIM_PWM_Stop_DMA+0x148>
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	6a1a      	ldr	r2, [r3, #32]
 8011ad6:	f240 4344 	movw	r3, #1092	; 0x444
 8011ada:	4013      	ands	r3, r2
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d107      	bne.n	8011af0 <HAL_TIM_PWM_Stop_DMA+0x148>
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011aee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	6a1a      	ldr	r2, [r3, #32]
 8011af6:	f241 1311 	movw	r3, #4369	; 0x1111
 8011afa:	4013      	ands	r3, r2
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d10f      	bne.n	8011b20 <HAL_TIM_PWM_Stop_DMA+0x178>
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	6a1a      	ldr	r2, [r3, #32]
 8011b06:	f240 4344 	movw	r3, #1092	; 0x444
 8011b0a:	4013      	ands	r3, r2
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d107      	bne.n	8011b20 <HAL_TIM_PWM_Stop_DMA+0x178>
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	681a      	ldr	r2, [r3, #0]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	f022 0201 	bic.w	r2, r2, #1
 8011b1e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d104      	bne.n	8011b30 <HAL_TIM_PWM_Stop_DMA+0x188>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	2201      	movs	r2, #1
 8011b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011b2e:	e023      	b.n	8011b78 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	2b04      	cmp	r3, #4
 8011b34:	d104      	bne.n	8011b40 <HAL_TIM_PWM_Stop_DMA+0x198>
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2201      	movs	r2, #1
 8011b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011b3e:	e01b      	b.n	8011b78 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	2b08      	cmp	r3, #8
 8011b44:	d104      	bne.n	8011b50 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2201      	movs	r2, #1
 8011b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011b4e:	e013      	b.n	8011b78 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	2b0c      	cmp	r3, #12
 8011b54:	d104      	bne.n	8011b60 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2201      	movs	r2, #1
 8011b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011b5e:	e00b      	b.n	8011b78 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	2b10      	cmp	r3, #16
 8011b64:	d104      	bne.n	8011b70 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	2201      	movs	r2, #1
 8011b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011b6e:	e003      	b.n	8011b78 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2201      	movs	r2, #1
 8011b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8011b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3710      	adds	r7, #16
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}
 8011b82:	bf00      	nop
 8011b84:	40010000 	.word	0x40010000
 8011b88:	40010400 	.word	0x40010400
 8011b8c:	40014000 	.word	0x40014000
 8011b90:	40014400 	.word	0x40014400
 8011b94:	40014800 	.word	0x40014800

08011b98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b086      	sub	sp, #24
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d101      	bne.n	8011bac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8011ba8:	2301      	movs	r3, #1
 8011baa:	e08f      	b.n	8011ccc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011bb2:	b2db      	uxtb	r3, r3
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d106      	bne.n	8011bc6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f7f3 fea9 	bl	8005918 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2202      	movs	r2, #2
 8011bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	6899      	ldr	r1, [r3, #8]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681a      	ldr	r2, [r3, #0]
 8011bd8:	4b3e      	ldr	r3, [pc, #248]	; (8011cd4 <HAL_TIM_Encoder_Init+0x13c>)
 8011bda:	400b      	ands	r3, r1
 8011bdc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681a      	ldr	r2, [r3, #0]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	3304      	adds	r3, #4
 8011be6:	4619      	mov	r1, r3
 8011be8:	4610      	mov	r0, r2
 8011bea:	f000 fbc5 	bl	8012378 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	689b      	ldr	r3, [r3, #8]
 8011bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	699b      	ldr	r3, [r3, #24]
 8011bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	6a1b      	ldr	r3, [r3, #32]
 8011c04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	697a      	ldr	r2, [r7, #20]
 8011c0c:	4313      	orrs	r3, r2
 8011c0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011c10:	693a      	ldr	r2, [r7, #16]
 8011c12:	4b31      	ldr	r3, [pc, #196]	; (8011cd8 <HAL_TIM_Encoder_Init+0x140>)
 8011c14:	4013      	ands	r3, r2
 8011c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	689a      	ldr	r2, [r3, #8]
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	699b      	ldr	r3, [r3, #24]
 8011c20:	021b      	lsls	r3, r3, #8
 8011c22:	4313      	orrs	r3, r2
 8011c24:	693a      	ldr	r2, [r7, #16]
 8011c26:	4313      	orrs	r3, r2
 8011c28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8011c2a:	693a      	ldr	r2, [r7, #16]
 8011c2c:	4b2b      	ldr	r3, [pc, #172]	; (8011cdc <HAL_TIM_Encoder_Init+0x144>)
 8011c2e:	4013      	ands	r3, r2
 8011c30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8011c32:	693a      	ldr	r2, [r7, #16]
 8011c34:	4b2a      	ldr	r3, [pc, #168]	; (8011ce0 <HAL_TIM_Encoder_Init+0x148>)
 8011c36:	4013      	ands	r3, r2
 8011c38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	68da      	ldr	r2, [r3, #12]
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	69db      	ldr	r3, [r3, #28]
 8011c42:	021b      	lsls	r3, r3, #8
 8011c44:	4313      	orrs	r3, r2
 8011c46:	693a      	ldr	r2, [r7, #16]
 8011c48:	4313      	orrs	r3, r2
 8011c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	691b      	ldr	r3, [r3, #16]
 8011c50:	011a      	lsls	r2, r3, #4
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	6a1b      	ldr	r3, [r3, #32]
 8011c56:	031b      	lsls	r3, r3, #12
 8011c58:	4313      	orrs	r3, r2
 8011c5a:	693a      	ldr	r2, [r7, #16]
 8011c5c:	4313      	orrs	r3, r2
 8011c5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8011c66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8011c6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	685a      	ldr	r2, [r3, #4]
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	695b      	ldr	r3, [r3, #20]
 8011c78:	011b      	lsls	r3, r3, #4
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	68fa      	ldr	r2, [r7, #12]
 8011c7e:	4313      	orrs	r3, r2
 8011c80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	697a      	ldr	r2, [r7, #20]
 8011c88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	693a      	ldr	r2, [r7, #16]
 8011c90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	68fa      	ldr	r2, [r7, #12]
 8011c98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2201      	movs	r2, #1
 8011c9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2201      	movs	r2, #1
 8011ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2201      	movs	r2, #1
 8011cae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2201      	movs	r2, #1
 8011cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2201      	movs	r2, #1
 8011cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011cca:	2300      	movs	r3, #0
}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3718      	adds	r7, #24
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}
 8011cd4:	fffebff8 	.word	0xfffebff8
 8011cd8:	fffffcfc 	.word	0xfffffcfc
 8011cdc:	fffff3f3 	.word	0xfffff3f3
 8011ce0:	ffff0f0f 	.word	0xffff0f0f

08011ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	691b      	ldr	r3, [r3, #16]
 8011cf2:	f003 0302 	and.w	r3, r3, #2
 8011cf6:	2b02      	cmp	r3, #2
 8011cf8:	d122      	bne.n	8011d40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	68db      	ldr	r3, [r3, #12]
 8011d00:	f003 0302 	and.w	r3, r3, #2
 8011d04:	2b02      	cmp	r3, #2
 8011d06:	d11b      	bne.n	8011d40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	f06f 0202 	mvn.w	r2, #2
 8011d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2201      	movs	r2, #1
 8011d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	699b      	ldr	r3, [r3, #24]
 8011d1e:	f003 0303 	and.w	r3, r3, #3
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d003      	beq.n	8011d2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f000 fb12 	bl	8012350 <HAL_TIM_IC_CaptureCallback>
 8011d2c:	e005      	b.n	8011d3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f000 fb04 	bl	801233c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f7f1 fb1d 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	691b      	ldr	r3, [r3, #16]
 8011d46:	f003 0304 	and.w	r3, r3, #4
 8011d4a:	2b04      	cmp	r3, #4
 8011d4c:	d122      	bne.n	8011d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	f003 0304 	and.w	r3, r3, #4
 8011d58:	2b04      	cmp	r3, #4
 8011d5a:	d11b      	bne.n	8011d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f06f 0204 	mvn.w	r2, #4
 8011d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2202      	movs	r2, #2
 8011d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	699b      	ldr	r3, [r3, #24]
 8011d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d003      	beq.n	8011d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f000 fae8 	bl	8012350 <HAL_TIM_IC_CaptureCallback>
 8011d80:	e005      	b.n	8011d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	f000 fada 	bl	801233c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011d88:	6878      	ldr	r0, [r7, #4]
 8011d8a:	f7f1 faf3 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2200      	movs	r2, #0
 8011d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	691b      	ldr	r3, [r3, #16]
 8011d9a:	f003 0308 	and.w	r3, r3, #8
 8011d9e:	2b08      	cmp	r3, #8
 8011da0:	d122      	bne.n	8011de8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	68db      	ldr	r3, [r3, #12]
 8011da8:	f003 0308 	and.w	r3, r3, #8
 8011dac:	2b08      	cmp	r3, #8
 8011dae:	d11b      	bne.n	8011de8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	f06f 0208 	mvn.w	r2, #8
 8011db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2204      	movs	r2, #4
 8011dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	69db      	ldr	r3, [r3, #28]
 8011dc6:	f003 0303 	and.w	r3, r3, #3
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d003      	beq.n	8011dd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f000 fabe 	bl	8012350 <HAL_TIM_IC_CaptureCallback>
 8011dd4:	e005      	b.n	8011de2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f000 fab0 	bl	801233c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f7f1 fac9 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2200      	movs	r2, #0
 8011de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	691b      	ldr	r3, [r3, #16]
 8011dee:	f003 0310 	and.w	r3, r3, #16
 8011df2:	2b10      	cmp	r3, #16
 8011df4:	d122      	bne.n	8011e3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	68db      	ldr	r3, [r3, #12]
 8011dfc:	f003 0310 	and.w	r3, r3, #16
 8011e00:	2b10      	cmp	r3, #16
 8011e02:	d11b      	bne.n	8011e3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f06f 0210 	mvn.w	r2, #16
 8011e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2208      	movs	r2, #8
 8011e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	69db      	ldr	r3, [r3, #28]
 8011e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d003      	beq.n	8011e2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f000 fa94 	bl	8012350 <HAL_TIM_IC_CaptureCallback>
 8011e28:	e005      	b.n	8011e36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f000 fa86 	bl	801233c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f7f1 fa9f 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2200      	movs	r2, #0
 8011e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	691b      	ldr	r3, [r3, #16]
 8011e42:	f003 0301 	and.w	r3, r3, #1
 8011e46:	2b01      	cmp	r3, #1
 8011e48:	d10e      	bne.n	8011e68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	f003 0301 	and.w	r3, r3, #1
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	d107      	bne.n	8011e68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	f06f 0201 	mvn.w	r2, #1
 8011e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f7f1 fad6 	bl	8003414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	691b      	ldr	r3, [r3, #16]
 8011e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e72:	2b80      	cmp	r3, #128	; 0x80
 8011e74:	d10e      	bne.n	8011e94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e80:	2b80      	cmp	r3, #128	; 0x80
 8011e82:	d107      	bne.n	8011e94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f000 fff8 	bl	8012e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	691b      	ldr	r3, [r3, #16]
 8011e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ea2:	d10e      	bne.n	8011ec2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	68db      	ldr	r3, [r3, #12]
 8011eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011eae:	2b80      	cmp	r3, #128	; 0x80
 8011eb0:	d107      	bne.n	8011ec2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8011eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f000 ffeb 	bl	8012e98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	691b      	ldr	r3, [r3, #16]
 8011ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ecc:	2b40      	cmp	r3, #64	; 0x40
 8011ece:	d10e      	bne.n	8011eee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	68db      	ldr	r3, [r3, #12]
 8011ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011eda:	2b40      	cmp	r3, #64	; 0x40
 8011edc:	d107      	bne.n	8011eee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f000 fa3b 	bl	8012364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	691b      	ldr	r3, [r3, #16]
 8011ef4:	f003 0320 	and.w	r3, r3, #32
 8011ef8:	2b20      	cmp	r3, #32
 8011efa:	d10e      	bne.n	8011f1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	f003 0320 	and.w	r3, r3, #32
 8011f06:	2b20      	cmp	r3, #32
 8011f08:	d107      	bne.n	8011f1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	f06f 0220 	mvn.w	r2, #32
 8011f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f000 ffab 	bl	8012e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011f1a:	bf00      	nop
 8011f1c:	3708      	adds	r7, #8
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
	...

08011f24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b086      	sub	sp, #24
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011f30:	2300      	movs	r3, #0
 8011f32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	d101      	bne.n	8011f42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011f3e:	2302      	movs	r3, #2
 8011f40:	e0ff      	b.n	8012142 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	2201      	movs	r2, #1
 8011f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2b14      	cmp	r3, #20
 8011f4e:	f200 80f0 	bhi.w	8012132 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011f52:	a201      	add	r2, pc, #4	; (adr r2, 8011f58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f58:	08011fad 	.word	0x08011fad
 8011f5c:	08012133 	.word	0x08012133
 8011f60:	08012133 	.word	0x08012133
 8011f64:	08012133 	.word	0x08012133
 8011f68:	08011fed 	.word	0x08011fed
 8011f6c:	08012133 	.word	0x08012133
 8011f70:	08012133 	.word	0x08012133
 8011f74:	08012133 	.word	0x08012133
 8011f78:	0801202f 	.word	0x0801202f
 8011f7c:	08012133 	.word	0x08012133
 8011f80:	08012133 	.word	0x08012133
 8011f84:	08012133 	.word	0x08012133
 8011f88:	0801206f 	.word	0x0801206f
 8011f8c:	08012133 	.word	0x08012133
 8011f90:	08012133 	.word	0x08012133
 8011f94:	08012133 	.word	0x08012133
 8011f98:	080120b1 	.word	0x080120b1
 8011f9c:	08012133 	.word	0x08012133
 8011fa0:	08012133 	.word	0x08012133
 8011fa4:	08012133 	.word	0x08012133
 8011fa8:	080120f1 	.word	0x080120f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	68b9      	ldr	r1, [r7, #8]
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f000 fa86 	bl	80124c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	699a      	ldr	r2, [r3, #24]
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	f042 0208 	orr.w	r2, r2, #8
 8011fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	699a      	ldr	r2, [r3, #24]
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	f022 0204 	bic.w	r2, r2, #4
 8011fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	6999      	ldr	r1, [r3, #24]
 8011fde:	68bb      	ldr	r3, [r7, #8]
 8011fe0:	691a      	ldr	r2, [r3, #16]
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	430a      	orrs	r2, r1
 8011fe8:	619a      	str	r2, [r3, #24]
      break;
 8011fea:	e0a5      	b.n	8012138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	68b9      	ldr	r1, [r7, #8]
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f000 faf6 	bl	80125e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	699a      	ldr	r2, [r3, #24]
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	699a      	ldr	r2, [r3, #24]
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	6999      	ldr	r1, [r3, #24]
 801201e:	68bb      	ldr	r3, [r7, #8]
 8012020:	691b      	ldr	r3, [r3, #16]
 8012022:	021a      	lsls	r2, r3, #8
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	430a      	orrs	r2, r1
 801202a:	619a      	str	r2, [r3, #24]
      break;
 801202c:	e084      	b.n	8012138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	68b9      	ldr	r1, [r7, #8]
 8012034:	4618      	mov	r0, r3
 8012036:	f000 fb5f 	bl	80126f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	69da      	ldr	r2, [r3, #28]
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	f042 0208 	orr.w	r2, r2, #8
 8012048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	69da      	ldr	r2, [r3, #28]
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	f022 0204 	bic.w	r2, r2, #4
 8012058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	69d9      	ldr	r1, [r3, #28]
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	691a      	ldr	r2, [r3, #16]
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	430a      	orrs	r2, r1
 801206a:	61da      	str	r2, [r3, #28]
      break;
 801206c:	e064      	b.n	8012138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	68b9      	ldr	r1, [r7, #8]
 8012074:	4618      	mov	r0, r3
 8012076:	f000 fbc7 	bl	8012808 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	69da      	ldr	r2, [r3, #28]
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	69da      	ldr	r2, [r3, #28]
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	69d9      	ldr	r1, [r3, #28]
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	691b      	ldr	r3, [r3, #16]
 80120a4:	021a      	lsls	r2, r3, #8
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	430a      	orrs	r2, r1
 80120ac:	61da      	str	r2, [r3, #28]
      break;
 80120ae:	e043      	b.n	8012138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	68b9      	ldr	r1, [r7, #8]
 80120b6:	4618      	mov	r0, r3
 80120b8:	f000 fc10 	bl	80128dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f042 0208 	orr.w	r2, r2, #8
 80120ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	f022 0204 	bic.w	r2, r2, #4
 80120da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	691a      	ldr	r2, [r3, #16]
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	430a      	orrs	r2, r1
 80120ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80120ee:	e023      	b.n	8012138 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	68b9      	ldr	r1, [r7, #8]
 80120f6:	4618      	mov	r0, r3
 80120f8:	f000 fc54 	bl	80129a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801210a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801211a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	691b      	ldr	r3, [r3, #16]
 8012126:	021a      	lsls	r2, r3, #8
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	430a      	orrs	r2, r1
 801212e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012130:	e002      	b.n	8012138 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012132:	2301      	movs	r3, #1
 8012134:	75fb      	strb	r3, [r7, #23]
      break;
 8012136:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2200      	movs	r2, #0
 801213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012140:	7dfb      	ldrb	r3, [r7, #23]
}
 8012142:	4618      	mov	r0, r3
 8012144:	3718      	adds	r7, #24
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
 801214a:	bf00      	nop

0801214c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b084      	sub	sp, #16
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
 8012154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012156:	2300      	movs	r3, #0
 8012158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012160:	2b01      	cmp	r3, #1
 8012162:	d101      	bne.n	8012168 <HAL_TIM_ConfigClockSource+0x1c>
 8012164:	2302      	movs	r3, #2
 8012166:	e0dc      	b.n	8012322 <HAL_TIM_ConfigClockSource+0x1d6>
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2201      	movs	r2, #1
 801216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2202      	movs	r2, #2
 8012174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	689b      	ldr	r3, [r3, #8]
 801217e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012180:	68ba      	ldr	r2, [r7, #8]
 8012182:	4b6a      	ldr	r3, [pc, #424]	; (801232c <HAL_TIM_ConfigClockSource+0x1e0>)
 8012184:	4013      	ands	r3, r2
 8012186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801218e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	68ba      	ldr	r2, [r7, #8]
 8012196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	4a64      	ldr	r2, [pc, #400]	; (8012330 <HAL_TIM_ConfigClockSource+0x1e4>)
 801219e:	4293      	cmp	r3, r2
 80121a0:	f000 80a9 	beq.w	80122f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80121a4:	4a62      	ldr	r2, [pc, #392]	; (8012330 <HAL_TIM_ConfigClockSource+0x1e4>)
 80121a6:	4293      	cmp	r3, r2
 80121a8:	f200 80ae 	bhi.w	8012308 <HAL_TIM_ConfigClockSource+0x1bc>
 80121ac:	4a61      	ldr	r2, [pc, #388]	; (8012334 <HAL_TIM_ConfigClockSource+0x1e8>)
 80121ae:	4293      	cmp	r3, r2
 80121b0:	f000 80a1 	beq.w	80122f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80121b4:	4a5f      	ldr	r2, [pc, #380]	; (8012334 <HAL_TIM_ConfigClockSource+0x1e8>)
 80121b6:	4293      	cmp	r3, r2
 80121b8:	f200 80a6 	bhi.w	8012308 <HAL_TIM_ConfigClockSource+0x1bc>
 80121bc:	4a5e      	ldr	r2, [pc, #376]	; (8012338 <HAL_TIM_ConfigClockSource+0x1ec>)
 80121be:	4293      	cmp	r3, r2
 80121c0:	f000 8099 	beq.w	80122f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80121c4:	4a5c      	ldr	r2, [pc, #368]	; (8012338 <HAL_TIM_ConfigClockSource+0x1ec>)
 80121c6:	4293      	cmp	r3, r2
 80121c8:	f200 809e 	bhi.w	8012308 <HAL_TIM_ConfigClockSource+0x1bc>
 80121cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80121d0:	f000 8091 	beq.w	80122f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80121d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80121d8:	f200 8096 	bhi.w	8012308 <HAL_TIM_ConfigClockSource+0x1bc>
 80121dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80121e0:	f000 8089 	beq.w	80122f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80121e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80121e8:	f200 808e 	bhi.w	8012308 <HAL_TIM_ConfigClockSource+0x1bc>
 80121ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80121f0:	d03e      	beq.n	8012270 <HAL_TIM_ConfigClockSource+0x124>
 80121f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80121f6:	f200 8087 	bhi.w	8012308 <HAL_TIM_ConfigClockSource+0x1bc>
 80121fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80121fe:	f000 8086 	beq.w	801230e <HAL_TIM_ConfigClockSource+0x1c2>
 8012202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012206:	d87f      	bhi.n	8012308 <HAL_TIM_ConfigClockSource+0x1bc>
 8012208:	2b70      	cmp	r3, #112	; 0x70
 801220a:	d01a      	beq.n	8012242 <HAL_TIM_ConfigClockSource+0xf6>
 801220c:	2b70      	cmp	r3, #112	; 0x70
 801220e:	d87b      	bhi.n	8012308 <HAL_TIM_ConfigClockSource+0x1bc>
 8012210:	2b60      	cmp	r3, #96	; 0x60
 8012212:	d050      	beq.n	80122b6 <HAL_TIM_ConfigClockSource+0x16a>
 8012214:	2b60      	cmp	r3, #96	; 0x60
 8012216:	d877      	bhi.n	8012308 <HAL_TIM_ConfigClockSource+0x1bc>
 8012218:	2b50      	cmp	r3, #80	; 0x50
 801221a:	d03c      	beq.n	8012296 <HAL_TIM_ConfigClockSource+0x14a>
 801221c:	2b50      	cmp	r3, #80	; 0x50
 801221e:	d873      	bhi.n	8012308 <HAL_TIM_ConfigClockSource+0x1bc>
 8012220:	2b40      	cmp	r3, #64	; 0x40
 8012222:	d058      	beq.n	80122d6 <HAL_TIM_ConfigClockSource+0x18a>
 8012224:	2b40      	cmp	r3, #64	; 0x40
 8012226:	d86f      	bhi.n	8012308 <HAL_TIM_ConfigClockSource+0x1bc>
 8012228:	2b30      	cmp	r3, #48	; 0x30
 801222a:	d064      	beq.n	80122f6 <HAL_TIM_ConfigClockSource+0x1aa>
 801222c:	2b30      	cmp	r3, #48	; 0x30
 801222e:	d86b      	bhi.n	8012308 <HAL_TIM_ConfigClockSource+0x1bc>
 8012230:	2b20      	cmp	r3, #32
 8012232:	d060      	beq.n	80122f6 <HAL_TIM_ConfigClockSource+0x1aa>
 8012234:	2b20      	cmp	r3, #32
 8012236:	d867      	bhi.n	8012308 <HAL_TIM_ConfigClockSource+0x1bc>
 8012238:	2b00      	cmp	r3, #0
 801223a:	d05c      	beq.n	80122f6 <HAL_TIM_ConfigClockSource+0x1aa>
 801223c:	2b10      	cmp	r3, #16
 801223e:	d05a      	beq.n	80122f6 <HAL_TIM_ConfigClockSource+0x1aa>
 8012240:	e062      	b.n	8012308 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6818      	ldr	r0, [r3, #0]
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	6899      	ldr	r1, [r3, #8]
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	685a      	ldr	r2, [r3, #4]
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	68db      	ldr	r3, [r3, #12]
 8012252:	f000 fc8b 	bl	8012b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	689b      	ldr	r3, [r3, #8]
 801225c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012264:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	68ba      	ldr	r2, [r7, #8]
 801226c:	609a      	str	r2, [r3, #8]
      break;
 801226e:	e04f      	b.n	8012310 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6818      	ldr	r0, [r3, #0]
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	6899      	ldr	r1, [r3, #8]
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	685a      	ldr	r2, [r3, #4]
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	f000 fc74 	bl	8012b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	689a      	ldr	r2, [r3, #8]
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012292:	609a      	str	r2, [r3, #8]
      break;
 8012294:	e03c      	b.n	8012310 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	6818      	ldr	r0, [r3, #0]
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	6859      	ldr	r1, [r3, #4]
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	68db      	ldr	r3, [r3, #12]
 80122a2:	461a      	mov	r2, r3
 80122a4:	f000 fbe4 	bl	8012a70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	2150      	movs	r1, #80	; 0x50
 80122ae:	4618      	mov	r0, r3
 80122b0:	f000 fc3e 	bl	8012b30 <TIM_ITRx_SetConfig>
      break;
 80122b4:	e02c      	b.n	8012310 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6818      	ldr	r0, [r3, #0]
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	6859      	ldr	r1, [r3, #4]
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	68db      	ldr	r3, [r3, #12]
 80122c2:	461a      	mov	r2, r3
 80122c4:	f000 fc03 	bl	8012ace <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	2160      	movs	r1, #96	; 0x60
 80122ce:	4618      	mov	r0, r3
 80122d0:	f000 fc2e 	bl	8012b30 <TIM_ITRx_SetConfig>
      break;
 80122d4:	e01c      	b.n	8012310 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6818      	ldr	r0, [r3, #0]
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	6859      	ldr	r1, [r3, #4]
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	68db      	ldr	r3, [r3, #12]
 80122e2:	461a      	mov	r2, r3
 80122e4:	f000 fbc4 	bl	8012a70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	2140      	movs	r1, #64	; 0x40
 80122ee:	4618      	mov	r0, r3
 80122f0:	f000 fc1e 	bl	8012b30 <TIM_ITRx_SetConfig>
      break;
 80122f4:	e00c      	b.n	8012310 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681a      	ldr	r2, [r3, #0]
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	4619      	mov	r1, r3
 8012300:	4610      	mov	r0, r2
 8012302:	f000 fc15 	bl	8012b30 <TIM_ITRx_SetConfig>
      break;
 8012306:	e003      	b.n	8012310 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8012308:	2301      	movs	r3, #1
 801230a:	73fb      	strb	r3, [r7, #15]
      break;
 801230c:	e000      	b.n	8012310 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801230e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2201      	movs	r2, #1
 8012314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2200      	movs	r2, #0
 801231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012320:	7bfb      	ldrb	r3, [r7, #15]
}
 8012322:	4618      	mov	r0, r3
 8012324:	3710      	adds	r7, #16
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	ffceff88 	.word	0xffceff88
 8012330:	00100040 	.word	0x00100040
 8012334:	00100030 	.word	0x00100030
 8012338:	00100020 	.word	0x00100020

0801233c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801233c:	b480      	push	{r7}
 801233e:	b083      	sub	sp, #12
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012344:	bf00      	nop
 8012346:	370c      	adds	r7, #12
 8012348:	46bd      	mov	sp, r7
 801234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234e:	4770      	bx	lr

08012350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012350:	b480      	push	{r7}
 8012352:	b083      	sub	sp, #12
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012358:	bf00      	nop
 801235a:	370c      	adds	r7, #12
 801235c:	46bd      	mov	sp, r7
 801235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012362:	4770      	bx	lr

08012364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012364:	b480      	push	{r7}
 8012366:	b083      	sub	sp, #12
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801236c:	bf00      	nop
 801236e:	370c      	adds	r7, #12
 8012370:	46bd      	mov	sp, r7
 8012372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012376:	4770      	bx	lr

08012378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012378:	b480      	push	{r7}
 801237a:	b085      	sub	sp, #20
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	4a44      	ldr	r2, [pc, #272]	; (801249c <TIM_Base_SetConfig+0x124>)
 801238c:	4293      	cmp	r3, r2
 801238e:	d013      	beq.n	80123b8 <TIM_Base_SetConfig+0x40>
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012396:	d00f      	beq.n	80123b8 <TIM_Base_SetConfig+0x40>
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	4a41      	ldr	r2, [pc, #260]	; (80124a0 <TIM_Base_SetConfig+0x128>)
 801239c:	4293      	cmp	r3, r2
 801239e:	d00b      	beq.n	80123b8 <TIM_Base_SetConfig+0x40>
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	4a40      	ldr	r2, [pc, #256]	; (80124a4 <TIM_Base_SetConfig+0x12c>)
 80123a4:	4293      	cmp	r3, r2
 80123a6:	d007      	beq.n	80123b8 <TIM_Base_SetConfig+0x40>
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	4a3f      	ldr	r2, [pc, #252]	; (80124a8 <TIM_Base_SetConfig+0x130>)
 80123ac:	4293      	cmp	r3, r2
 80123ae:	d003      	beq.n	80123b8 <TIM_Base_SetConfig+0x40>
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	4a3e      	ldr	r2, [pc, #248]	; (80124ac <TIM_Base_SetConfig+0x134>)
 80123b4:	4293      	cmp	r3, r2
 80123b6:	d108      	bne.n	80123ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80123be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	685b      	ldr	r3, [r3, #4]
 80123c4:	68fa      	ldr	r2, [r7, #12]
 80123c6:	4313      	orrs	r3, r2
 80123c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	4a33      	ldr	r2, [pc, #204]	; (801249c <TIM_Base_SetConfig+0x124>)
 80123ce:	4293      	cmp	r3, r2
 80123d0:	d027      	beq.n	8012422 <TIM_Base_SetConfig+0xaa>
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80123d8:	d023      	beq.n	8012422 <TIM_Base_SetConfig+0xaa>
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	4a30      	ldr	r2, [pc, #192]	; (80124a0 <TIM_Base_SetConfig+0x128>)
 80123de:	4293      	cmp	r3, r2
 80123e0:	d01f      	beq.n	8012422 <TIM_Base_SetConfig+0xaa>
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	4a2f      	ldr	r2, [pc, #188]	; (80124a4 <TIM_Base_SetConfig+0x12c>)
 80123e6:	4293      	cmp	r3, r2
 80123e8:	d01b      	beq.n	8012422 <TIM_Base_SetConfig+0xaa>
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	4a2e      	ldr	r2, [pc, #184]	; (80124a8 <TIM_Base_SetConfig+0x130>)
 80123ee:	4293      	cmp	r3, r2
 80123f0:	d017      	beq.n	8012422 <TIM_Base_SetConfig+0xaa>
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	4a2d      	ldr	r2, [pc, #180]	; (80124ac <TIM_Base_SetConfig+0x134>)
 80123f6:	4293      	cmp	r3, r2
 80123f8:	d013      	beq.n	8012422 <TIM_Base_SetConfig+0xaa>
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	4a2c      	ldr	r2, [pc, #176]	; (80124b0 <TIM_Base_SetConfig+0x138>)
 80123fe:	4293      	cmp	r3, r2
 8012400:	d00f      	beq.n	8012422 <TIM_Base_SetConfig+0xaa>
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	4a2b      	ldr	r2, [pc, #172]	; (80124b4 <TIM_Base_SetConfig+0x13c>)
 8012406:	4293      	cmp	r3, r2
 8012408:	d00b      	beq.n	8012422 <TIM_Base_SetConfig+0xaa>
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	4a2a      	ldr	r2, [pc, #168]	; (80124b8 <TIM_Base_SetConfig+0x140>)
 801240e:	4293      	cmp	r3, r2
 8012410:	d007      	beq.n	8012422 <TIM_Base_SetConfig+0xaa>
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	4a29      	ldr	r2, [pc, #164]	; (80124bc <TIM_Base_SetConfig+0x144>)
 8012416:	4293      	cmp	r3, r2
 8012418:	d003      	beq.n	8012422 <TIM_Base_SetConfig+0xaa>
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	4a28      	ldr	r2, [pc, #160]	; (80124c0 <TIM_Base_SetConfig+0x148>)
 801241e:	4293      	cmp	r3, r2
 8012420:	d108      	bne.n	8012434 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	68db      	ldr	r3, [r3, #12]
 801242e:	68fa      	ldr	r2, [r7, #12]
 8012430:	4313      	orrs	r3, r2
 8012432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	695b      	ldr	r3, [r3, #20]
 801243e:	4313      	orrs	r3, r2
 8012440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	68fa      	ldr	r2, [r7, #12]
 8012446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	689a      	ldr	r2, [r3, #8]
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	681a      	ldr	r2, [r3, #0]
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	4a10      	ldr	r2, [pc, #64]	; (801249c <TIM_Base_SetConfig+0x124>)
 801245c:	4293      	cmp	r3, r2
 801245e:	d00f      	beq.n	8012480 <TIM_Base_SetConfig+0x108>
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	4a12      	ldr	r2, [pc, #72]	; (80124ac <TIM_Base_SetConfig+0x134>)
 8012464:	4293      	cmp	r3, r2
 8012466:	d00b      	beq.n	8012480 <TIM_Base_SetConfig+0x108>
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	4a11      	ldr	r2, [pc, #68]	; (80124b0 <TIM_Base_SetConfig+0x138>)
 801246c:	4293      	cmp	r3, r2
 801246e:	d007      	beq.n	8012480 <TIM_Base_SetConfig+0x108>
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	4a10      	ldr	r2, [pc, #64]	; (80124b4 <TIM_Base_SetConfig+0x13c>)
 8012474:	4293      	cmp	r3, r2
 8012476:	d003      	beq.n	8012480 <TIM_Base_SetConfig+0x108>
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	4a0f      	ldr	r2, [pc, #60]	; (80124b8 <TIM_Base_SetConfig+0x140>)
 801247c:	4293      	cmp	r3, r2
 801247e:	d103      	bne.n	8012488 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	691a      	ldr	r2, [r3, #16]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2201      	movs	r2, #1
 801248c:	615a      	str	r2, [r3, #20]
}
 801248e:	bf00      	nop
 8012490:	3714      	adds	r7, #20
 8012492:	46bd      	mov	sp, r7
 8012494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012498:	4770      	bx	lr
 801249a:	bf00      	nop
 801249c:	40010000 	.word	0x40010000
 80124a0:	40000400 	.word	0x40000400
 80124a4:	40000800 	.word	0x40000800
 80124a8:	40000c00 	.word	0x40000c00
 80124ac:	40010400 	.word	0x40010400
 80124b0:	40014000 	.word	0x40014000
 80124b4:	40014400 	.word	0x40014400
 80124b8:	40014800 	.word	0x40014800
 80124bc:	4000e000 	.word	0x4000e000
 80124c0:	4000e400 	.word	0x4000e400

080124c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80124c4:	b480      	push	{r7}
 80124c6:	b087      	sub	sp, #28
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6a1b      	ldr	r3, [r3, #32]
 80124d2:	f023 0201 	bic.w	r2, r3, #1
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	6a1b      	ldr	r3, [r3, #32]
 80124de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	699b      	ldr	r3, [r3, #24]
 80124ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80124ec:	68fa      	ldr	r2, [r7, #12]
 80124ee:	4b37      	ldr	r3, [pc, #220]	; (80125cc <TIM_OC1_SetConfig+0x108>)
 80124f0:	4013      	ands	r3, r2
 80124f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	f023 0303 	bic.w	r3, r3, #3
 80124fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	68fa      	ldr	r2, [r7, #12]
 8012502:	4313      	orrs	r3, r2
 8012504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	f023 0302 	bic.w	r3, r3, #2
 801250c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	689b      	ldr	r3, [r3, #8]
 8012512:	697a      	ldr	r2, [r7, #20]
 8012514:	4313      	orrs	r3, r2
 8012516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	4a2d      	ldr	r2, [pc, #180]	; (80125d0 <TIM_OC1_SetConfig+0x10c>)
 801251c:	4293      	cmp	r3, r2
 801251e:	d00f      	beq.n	8012540 <TIM_OC1_SetConfig+0x7c>
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	4a2c      	ldr	r2, [pc, #176]	; (80125d4 <TIM_OC1_SetConfig+0x110>)
 8012524:	4293      	cmp	r3, r2
 8012526:	d00b      	beq.n	8012540 <TIM_OC1_SetConfig+0x7c>
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	4a2b      	ldr	r2, [pc, #172]	; (80125d8 <TIM_OC1_SetConfig+0x114>)
 801252c:	4293      	cmp	r3, r2
 801252e:	d007      	beq.n	8012540 <TIM_OC1_SetConfig+0x7c>
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	4a2a      	ldr	r2, [pc, #168]	; (80125dc <TIM_OC1_SetConfig+0x118>)
 8012534:	4293      	cmp	r3, r2
 8012536:	d003      	beq.n	8012540 <TIM_OC1_SetConfig+0x7c>
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	4a29      	ldr	r2, [pc, #164]	; (80125e0 <TIM_OC1_SetConfig+0x11c>)
 801253c:	4293      	cmp	r3, r2
 801253e:	d10c      	bne.n	801255a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012540:	697b      	ldr	r3, [r7, #20]
 8012542:	f023 0308 	bic.w	r3, r3, #8
 8012546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	697a      	ldr	r2, [r7, #20]
 801254e:	4313      	orrs	r3, r2
 8012550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	f023 0304 	bic.w	r3, r3, #4
 8012558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4a1c      	ldr	r2, [pc, #112]	; (80125d0 <TIM_OC1_SetConfig+0x10c>)
 801255e:	4293      	cmp	r3, r2
 8012560:	d00f      	beq.n	8012582 <TIM_OC1_SetConfig+0xbe>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	4a1b      	ldr	r2, [pc, #108]	; (80125d4 <TIM_OC1_SetConfig+0x110>)
 8012566:	4293      	cmp	r3, r2
 8012568:	d00b      	beq.n	8012582 <TIM_OC1_SetConfig+0xbe>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4a1a      	ldr	r2, [pc, #104]	; (80125d8 <TIM_OC1_SetConfig+0x114>)
 801256e:	4293      	cmp	r3, r2
 8012570:	d007      	beq.n	8012582 <TIM_OC1_SetConfig+0xbe>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	4a19      	ldr	r2, [pc, #100]	; (80125dc <TIM_OC1_SetConfig+0x118>)
 8012576:	4293      	cmp	r3, r2
 8012578:	d003      	beq.n	8012582 <TIM_OC1_SetConfig+0xbe>
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	4a18      	ldr	r2, [pc, #96]	; (80125e0 <TIM_OC1_SetConfig+0x11c>)
 801257e:	4293      	cmp	r3, r2
 8012580:	d111      	bne.n	80125a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	695b      	ldr	r3, [r3, #20]
 8012596:	693a      	ldr	r2, [r7, #16]
 8012598:	4313      	orrs	r3, r2
 801259a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	699b      	ldr	r3, [r3, #24]
 80125a0:	693a      	ldr	r2, [r7, #16]
 80125a2:	4313      	orrs	r3, r2
 80125a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	693a      	ldr	r2, [r7, #16]
 80125aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	68fa      	ldr	r2, [r7, #12]
 80125b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	685a      	ldr	r2, [r3, #4]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	697a      	ldr	r2, [r7, #20]
 80125be:	621a      	str	r2, [r3, #32]
}
 80125c0:	bf00      	nop
 80125c2:	371c      	adds	r7, #28
 80125c4:	46bd      	mov	sp, r7
 80125c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ca:	4770      	bx	lr
 80125cc:	fffeff8f 	.word	0xfffeff8f
 80125d0:	40010000 	.word	0x40010000
 80125d4:	40010400 	.word	0x40010400
 80125d8:	40014000 	.word	0x40014000
 80125dc:	40014400 	.word	0x40014400
 80125e0:	40014800 	.word	0x40014800

080125e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80125e4:	b480      	push	{r7}
 80125e6:	b087      	sub	sp, #28
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	6a1b      	ldr	r3, [r3, #32]
 80125f2:	f023 0210 	bic.w	r2, r3, #16
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	6a1b      	ldr	r3, [r3, #32]
 80125fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	685b      	ldr	r3, [r3, #4]
 8012604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	699b      	ldr	r3, [r3, #24]
 801260a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801260c:	68fa      	ldr	r2, [r7, #12]
 801260e:	4b34      	ldr	r3, [pc, #208]	; (80126e0 <TIM_OC2_SetConfig+0xfc>)
 8012610:	4013      	ands	r3, r2
 8012612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801261a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	021b      	lsls	r3, r3, #8
 8012622:	68fa      	ldr	r2, [r7, #12]
 8012624:	4313      	orrs	r3, r2
 8012626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	f023 0320 	bic.w	r3, r3, #32
 801262e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	689b      	ldr	r3, [r3, #8]
 8012634:	011b      	lsls	r3, r3, #4
 8012636:	697a      	ldr	r2, [r7, #20]
 8012638:	4313      	orrs	r3, r2
 801263a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	4a29      	ldr	r2, [pc, #164]	; (80126e4 <TIM_OC2_SetConfig+0x100>)
 8012640:	4293      	cmp	r3, r2
 8012642:	d003      	beq.n	801264c <TIM_OC2_SetConfig+0x68>
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	4a28      	ldr	r2, [pc, #160]	; (80126e8 <TIM_OC2_SetConfig+0x104>)
 8012648:	4293      	cmp	r3, r2
 801264a:	d10d      	bne.n	8012668 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801264c:	697b      	ldr	r3, [r7, #20]
 801264e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	011b      	lsls	r3, r3, #4
 801265a:	697a      	ldr	r2, [r7, #20]
 801265c:	4313      	orrs	r3, r2
 801265e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012666:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	4a1e      	ldr	r2, [pc, #120]	; (80126e4 <TIM_OC2_SetConfig+0x100>)
 801266c:	4293      	cmp	r3, r2
 801266e:	d00f      	beq.n	8012690 <TIM_OC2_SetConfig+0xac>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	4a1d      	ldr	r2, [pc, #116]	; (80126e8 <TIM_OC2_SetConfig+0x104>)
 8012674:	4293      	cmp	r3, r2
 8012676:	d00b      	beq.n	8012690 <TIM_OC2_SetConfig+0xac>
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	4a1c      	ldr	r2, [pc, #112]	; (80126ec <TIM_OC2_SetConfig+0x108>)
 801267c:	4293      	cmp	r3, r2
 801267e:	d007      	beq.n	8012690 <TIM_OC2_SetConfig+0xac>
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	4a1b      	ldr	r2, [pc, #108]	; (80126f0 <TIM_OC2_SetConfig+0x10c>)
 8012684:	4293      	cmp	r3, r2
 8012686:	d003      	beq.n	8012690 <TIM_OC2_SetConfig+0xac>
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	4a1a      	ldr	r2, [pc, #104]	; (80126f4 <TIM_OC2_SetConfig+0x110>)
 801268c:	4293      	cmp	r3, r2
 801268e:	d113      	bne.n	80126b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012690:	693b      	ldr	r3, [r7, #16]
 8012692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012698:	693b      	ldr	r3, [r7, #16]
 801269a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801269e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	695b      	ldr	r3, [r3, #20]
 80126a4:	009b      	lsls	r3, r3, #2
 80126a6:	693a      	ldr	r2, [r7, #16]
 80126a8:	4313      	orrs	r3, r2
 80126aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	699b      	ldr	r3, [r3, #24]
 80126b0:	009b      	lsls	r3, r3, #2
 80126b2:	693a      	ldr	r2, [r7, #16]
 80126b4:	4313      	orrs	r3, r2
 80126b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	693a      	ldr	r2, [r7, #16]
 80126bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	68fa      	ldr	r2, [r7, #12]
 80126c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	685a      	ldr	r2, [r3, #4]
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	697a      	ldr	r2, [r7, #20]
 80126d0:	621a      	str	r2, [r3, #32]
}
 80126d2:	bf00      	nop
 80126d4:	371c      	adds	r7, #28
 80126d6:	46bd      	mov	sp, r7
 80126d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126dc:	4770      	bx	lr
 80126de:	bf00      	nop
 80126e0:	feff8fff 	.word	0xfeff8fff
 80126e4:	40010000 	.word	0x40010000
 80126e8:	40010400 	.word	0x40010400
 80126ec:	40014000 	.word	0x40014000
 80126f0:	40014400 	.word	0x40014400
 80126f4:	40014800 	.word	0x40014800

080126f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80126f8:	b480      	push	{r7}
 80126fa:	b087      	sub	sp, #28
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6a1b      	ldr	r3, [r3, #32]
 8012706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	6a1b      	ldr	r3, [r3, #32]
 8012712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	685b      	ldr	r3, [r3, #4]
 8012718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	69db      	ldr	r3, [r3, #28]
 801271e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012720:	68fa      	ldr	r2, [r7, #12]
 8012722:	4b33      	ldr	r3, [pc, #204]	; (80127f0 <TIM_OC3_SetConfig+0xf8>)
 8012724:	4013      	ands	r3, r2
 8012726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	f023 0303 	bic.w	r3, r3, #3
 801272e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	68fa      	ldr	r2, [r7, #12]
 8012736:	4313      	orrs	r3, r2
 8012738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	689b      	ldr	r3, [r3, #8]
 8012746:	021b      	lsls	r3, r3, #8
 8012748:	697a      	ldr	r2, [r7, #20]
 801274a:	4313      	orrs	r3, r2
 801274c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	4a28      	ldr	r2, [pc, #160]	; (80127f4 <TIM_OC3_SetConfig+0xfc>)
 8012752:	4293      	cmp	r3, r2
 8012754:	d003      	beq.n	801275e <TIM_OC3_SetConfig+0x66>
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	4a27      	ldr	r2, [pc, #156]	; (80127f8 <TIM_OC3_SetConfig+0x100>)
 801275a:	4293      	cmp	r3, r2
 801275c:	d10d      	bne.n	801277a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	68db      	ldr	r3, [r3, #12]
 801276a:	021b      	lsls	r3, r3, #8
 801276c:	697a      	ldr	r2, [r7, #20]
 801276e:	4313      	orrs	r3, r2
 8012770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	4a1d      	ldr	r2, [pc, #116]	; (80127f4 <TIM_OC3_SetConfig+0xfc>)
 801277e:	4293      	cmp	r3, r2
 8012780:	d00f      	beq.n	80127a2 <TIM_OC3_SetConfig+0xaa>
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	4a1c      	ldr	r2, [pc, #112]	; (80127f8 <TIM_OC3_SetConfig+0x100>)
 8012786:	4293      	cmp	r3, r2
 8012788:	d00b      	beq.n	80127a2 <TIM_OC3_SetConfig+0xaa>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	4a1b      	ldr	r2, [pc, #108]	; (80127fc <TIM_OC3_SetConfig+0x104>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d007      	beq.n	80127a2 <TIM_OC3_SetConfig+0xaa>
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	4a1a      	ldr	r2, [pc, #104]	; (8012800 <TIM_OC3_SetConfig+0x108>)
 8012796:	4293      	cmp	r3, r2
 8012798:	d003      	beq.n	80127a2 <TIM_OC3_SetConfig+0xaa>
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	4a19      	ldr	r2, [pc, #100]	; (8012804 <TIM_OC3_SetConfig+0x10c>)
 801279e:	4293      	cmp	r3, r2
 80127a0:	d113      	bne.n	80127ca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80127a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80127aa:	693b      	ldr	r3, [r7, #16]
 80127ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80127b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	695b      	ldr	r3, [r3, #20]
 80127b6:	011b      	lsls	r3, r3, #4
 80127b8:	693a      	ldr	r2, [r7, #16]
 80127ba:	4313      	orrs	r3, r2
 80127bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80127be:	683b      	ldr	r3, [r7, #0]
 80127c0:	699b      	ldr	r3, [r3, #24]
 80127c2:	011b      	lsls	r3, r3, #4
 80127c4:	693a      	ldr	r2, [r7, #16]
 80127c6:	4313      	orrs	r3, r2
 80127c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	693a      	ldr	r2, [r7, #16]
 80127ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	68fa      	ldr	r2, [r7, #12]
 80127d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	685a      	ldr	r2, [r3, #4]
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	697a      	ldr	r2, [r7, #20]
 80127e2:	621a      	str	r2, [r3, #32]
}
 80127e4:	bf00      	nop
 80127e6:	371c      	adds	r7, #28
 80127e8:	46bd      	mov	sp, r7
 80127ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ee:	4770      	bx	lr
 80127f0:	fffeff8f 	.word	0xfffeff8f
 80127f4:	40010000 	.word	0x40010000
 80127f8:	40010400 	.word	0x40010400
 80127fc:	40014000 	.word	0x40014000
 8012800:	40014400 	.word	0x40014400
 8012804:	40014800 	.word	0x40014800

08012808 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012808:	b480      	push	{r7}
 801280a:	b087      	sub	sp, #28
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	6a1b      	ldr	r3, [r3, #32]
 8012816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	6a1b      	ldr	r3, [r3, #32]
 8012822:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	69db      	ldr	r3, [r3, #28]
 801282e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012830:	68fa      	ldr	r2, [r7, #12]
 8012832:	4b24      	ldr	r3, [pc, #144]	; (80128c4 <TIM_OC4_SetConfig+0xbc>)
 8012834:	4013      	ands	r3, r2
 8012836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801283e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	021b      	lsls	r3, r3, #8
 8012846:	68fa      	ldr	r2, [r7, #12]
 8012848:	4313      	orrs	r3, r2
 801284a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	689b      	ldr	r3, [r3, #8]
 8012858:	031b      	lsls	r3, r3, #12
 801285a:	693a      	ldr	r2, [r7, #16]
 801285c:	4313      	orrs	r3, r2
 801285e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	4a19      	ldr	r2, [pc, #100]	; (80128c8 <TIM_OC4_SetConfig+0xc0>)
 8012864:	4293      	cmp	r3, r2
 8012866:	d00f      	beq.n	8012888 <TIM_OC4_SetConfig+0x80>
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	4a18      	ldr	r2, [pc, #96]	; (80128cc <TIM_OC4_SetConfig+0xc4>)
 801286c:	4293      	cmp	r3, r2
 801286e:	d00b      	beq.n	8012888 <TIM_OC4_SetConfig+0x80>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	4a17      	ldr	r2, [pc, #92]	; (80128d0 <TIM_OC4_SetConfig+0xc8>)
 8012874:	4293      	cmp	r3, r2
 8012876:	d007      	beq.n	8012888 <TIM_OC4_SetConfig+0x80>
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	4a16      	ldr	r2, [pc, #88]	; (80128d4 <TIM_OC4_SetConfig+0xcc>)
 801287c:	4293      	cmp	r3, r2
 801287e:	d003      	beq.n	8012888 <TIM_OC4_SetConfig+0x80>
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	4a15      	ldr	r2, [pc, #84]	; (80128d8 <TIM_OC4_SetConfig+0xd0>)
 8012884:	4293      	cmp	r3, r2
 8012886:	d109      	bne.n	801289c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801288e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	695b      	ldr	r3, [r3, #20]
 8012894:	019b      	lsls	r3, r3, #6
 8012896:	697a      	ldr	r2, [r7, #20]
 8012898:	4313      	orrs	r3, r2
 801289a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	697a      	ldr	r2, [r7, #20]
 80128a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	68fa      	ldr	r2, [r7, #12]
 80128a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	685a      	ldr	r2, [r3, #4]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	693a      	ldr	r2, [r7, #16]
 80128b4:	621a      	str	r2, [r3, #32]
}
 80128b6:	bf00      	nop
 80128b8:	371c      	adds	r7, #28
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr
 80128c2:	bf00      	nop
 80128c4:	feff8fff 	.word	0xfeff8fff
 80128c8:	40010000 	.word	0x40010000
 80128cc:	40010400 	.word	0x40010400
 80128d0:	40014000 	.word	0x40014000
 80128d4:	40014400 	.word	0x40014400
 80128d8:	40014800 	.word	0x40014800

080128dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80128dc:	b480      	push	{r7}
 80128de:	b087      	sub	sp, #28
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	6a1b      	ldr	r3, [r3, #32]
 80128ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6a1b      	ldr	r3, [r3, #32]
 80128f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012904:	68fa      	ldr	r2, [r7, #12]
 8012906:	4b21      	ldr	r3, [pc, #132]	; (801298c <TIM_OC5_SetConfig+0xb0>)
 8012908:	4013      	ands	r3, r2
 801290a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	68fa      	ldr	r2, [r7, #12]
 8012912:	4313      	orrs	r3, r2
 8012914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801291c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	689b      	ldr	r3, [r3, #8]
 8012922:	041b      	lsls	r3, r3, #16
 8012924:	693a      	ldr	r2, [r7, #16]
 8012926:	4313      	orrs	r3, r2
 8012928:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	4a18      	ldr	r2, [pc, #96]	; (8012990 <TIM_OC5_SetConfig+0xb4>)
 801292e:	4293      	cmp	r3, r2
 8012930:	d00f      	beq.n	8012952 <TIM_OC5_SetConfig+0x76>
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	4a17      	ldr	r2, [pc, #92]	; (8012994 <TIM_OC5_SetConfig+0xb8>)
 8012936:	4293      	cmp	r3, r2
 8012938:	d00b      	beq.n	8012952 <TIM_OC5_SetConfig+0x76>
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	4a16      	ldr	r2, [pc, #88]	; (8012998 <TIM_OC5_SetConfig+0xbc>)
 801293e:	4293      	cmp	r3, r2
 8012940:	d007      	beq.n	8012952 <TIM_OC5_SetConfig+0x76>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	4a15      	ldr	r2, [pc, #84]	; (801299c <TIM_OC5_SetConfig+0xc0>)
 8012946:	4293      	cmp	r3, r2
 8012948:	d003      	beq.n	8012952 <TIM_OC5_SetConfig+0x76>
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	4a14      	ldr	r2, [pc, #80]	; (80129a0 <TIM_OC5_SetConfig+0xc4>)
 801294e:	4293      	cmp	r3, r2
 8012950:	d109      	bne.n	8012966 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012958:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	695b      	ldr	r3, [r3, #20]
 801295e:	021b      	lsls	r3, r3, #8
 8012960:	697a      	ldr	r2, [r7, #20]
 8012962:	4313      	orrs	r3, r2
 8012964:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	697a      	ldr	r2, [r7, #20]
 801296a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	68fa      	ldr	r2, [r7, #12]
 8012970:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	685a      	ldr	r2, [r3, #4]
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	693a      	ldr	r2, [r7, #16]
 801297e:	621a      	str	r2, [r3, #32]
}
 8012980:	bf00      	nop
 8012982:	371c      	adds	r7, #28
 8012984:	46bd      	mov	sp, r7
 8012986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298a:	4770      	bx	lr
 801298c:	fffeff8f 	.word	0xfffeff8f
 8012990:	40010000 	.word	0x40010000
 8012994:	40010400 	.word	0x40010400
 8012998:	40014000 	.word	0x40014000
 801299c:	40014400 	.word	0x40014400
 80129a0:	40014800 	.word	0x40014800

080129a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80129a4:	b480      	push	{r7}
 80129a6:	b087      	sub	sp, #28
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
 80129ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	6a1b      	ldr	r3, [r3, #32]
 80129b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6a1b      	ldr	r3, [r3, #32]
 80129be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80129cc:	68fa      	ldr	r2, [r7, #12]
 80129ce:	4b22      	ldr	r3, [pc, #136]	; (8012a58 <TIM_OC6_SetConfig+0xb4>)
 80129d0:	4013      	ands	r3, r2
 80129d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	021b      	lsls	r3, r3, #8
 80129da:	68fa      	ldr	r2, [r7, #12]
 80129dc:	4313      	orrs	r3, r2
 80129de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80129e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	689b      	ldr	r3, [r3, #8]
 80129ec:	051b      	lsls	r3, r3, #20
 80129ee:	693a      	ldr	r2, [r7, #16]
 80129f0:	4313      	orrs	r3, r2
 80129f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	4a19      	ldr	r2, [pc, #100]	; (8012a5c <TIM_OC6_SetConfig+0xb8>)
 80129f8:	4293      	cmp	r3, r2
 80129fa:	d00f      	beq.n	8012a1c <TIM_OC6_SetConfig+0x78>
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	4a18      	ldr	r2, [pc, #96]	; (8012a60 <TIM_OC6_SetConfig+0xbc>)
 8012a00:	4293      	cmp	r3, r2
 8012a02:	d00b      	beq.n	8012a1c <TIM_OC6_SetConfig+0x78>
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	4a17      	ldr	r2, [pc, #92]	; (8012a64 <TIM_OC6_SetConfig+0xc0>)
 8012a08:	4293      	cmp	r3, r2
 8012a0a:	d007      	beq.n	8012a1c <TIM_OC6_SetConfig+0x78>
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	4a16      	ldr	r2, [pc, #88]	; (8012a68 <TIM_OC6_SetConfig+0xc4>)
 8012a10:	4293      	cmp	r3, r2
 8012a12:	d003      	beq.n	8012a1c <TIM_OC6_SetConfig+0x78>
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	4a15      	ldr	r2, [pc, #84]	; (8012a6c <TIM_OC6_SetConfig+0xc8>)
 8012a18:	4293      	cmp	r3, r2
 8012a1a:	d109      	bne.n	8012a30 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012a22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	695b      	ldr	r3, [r3, #20]
 8012a28:	029b      	lsls	r3, r3, #10
 8012a2a:	697a      	ldr	r2, [r7, #20]
 8012a2c:	4313      	orrs	r3, r2
 8012a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	697a      	ldr	r2, [r7, #20]
 8012a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	68fa      	ldr	r2, [r7, #12]
 8012a3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012a3c:	683b      	ldr	r3, [r7, #0]
 8012a3e:	685a      	ldr	r2, [r3, #4]
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	693a      	ldr	r2, [r7, #16]
 8012a48:	621a      	str	r2, [r3, #32]
}
 8012a4a:	bf00      	nop
 8012a4c:	371c      	adds	r7, #28
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a54:	4770      	bx	lr
 8012a56:	bf00      	nop
 8012a58:	feff8fff 	.word	0xfeff8fff
 8012a5c:	40010000 	.word	0x40010000
 8012a60:	40010400 	.word	0x40010400
 8012a64:	40014000 	.word	0x40014000
 8012a68:	40014400 	.word	0x40014400
 8012a6c:	40014800 	.word	0x40014800

08012a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012a70:	b480      	push	{r7}
 8012a72:	b087      	sub	sp, #28
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	60f8      	str	r0, [r7, #12]
 8012a78:	60b9      	str	r1, [r7, #8]
 8012a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	6a1b      	ldr	r3, [r3, #32]
 8012a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	6a1b      	ldr	r3, [r3, #32]
 8012a86:	f023 0201 	bic.w	r2, r3, #1
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	699b      	ldr	r3, [r3, #24]
 8012a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	011b      	lsls	r3, r3, #4
 8012aa0:	693a      	ldr	r2, [r7, #16]
 8012aa2:	4313      	orrs	r3, r2
 8012aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	f023 030a 	bic.w	r3, r3, #10
 8012aac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012aae:	697a      	ldr	r2, [r7, #20]
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	4313      	orrs	r3, r2
 8012ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	693a      	ldr	r2, [r7, #16]
 8012aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	697a      	ldr	r2, [r7, #20]
 8012ac0:	621a      	str	r2, [r3, #32]
}
 8012ac2:	bf00      	nop
 8012ac4:	371c      	adds	r7, #28
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012acc:	4770      	bx	lr

08012ace <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012ace:	b480      	push	{r7}
 8012ad0:	b087      	sub	sp, #28
 8012ad2:	af00      	add	r7, sp, #0
 8012ad4:	60f8      	str	r0, [r7, #12]
 8012ad6:	60b9      	str	r1, [r7, #8]
 8012ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	6a1b      	ldr	r3, [r3, #32]
 8012ade:	f023 0210 	bic.w	r2, r3, #16
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	699b      	ldr	r3, [r3, #24]
 8012aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	6a1b      	ldr	r3, [r3, #32]
 8012af0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	031b      	lsls	r3, r3, #12
 8012afe:	697a      	ldr	r2, [r7, #20]
 8012b00:	4313      	orrs	r3, r2
 8012b02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012b04:	693b      	ldr	r3, [r7, #16]
 8012b06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012b0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	011b      	lsls	r3, r3, #4
 8012b10:	693a      	ldr	r2, [r7, #16]
 8012b12:	4313      	orrs	r3, r2
 8012b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	697a      	ldr	r2, [r7, #20]
 8012b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	693a      	ldr	r2, [r7, #16]
 8012b20:	621a      	str	r2, [r3, #32]
}
 8012b22:	bf00      	nop
 8012b24:	371c      	adds	r7, #28
 8012b26:	46bd      	mov	sp, r7
 8012b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2c:	4770      	bx	lr
	...

08012b30 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012b30:	b480      	push	{r7}
 8012b32:	b085      	sub	sp, #20
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	689b      	ldr	r3, [r3, #8]
 8012b3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012b40:	68fa      	ldr	r2, [r7, #12]
 8012b42:	4b09      	ldr	r3, [pc, #36]	; (8012b68 <TIM_ITRx_SetConfig+0x38>)
 8012b44:	4013      	ands	r3, r2
 8012b46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012b48:	683a      	ldr	r2, [r7, #0]
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	4313      	orrs	r3, r2
 8012b4e:	f043 0307 	orr.w	r3, r3, #7
 8012b52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	68fa      	ldr	r2, [r7, #12]
 8012b58:	609a      	str	r2, [r3, #8]
}
 8012b5a:	bf00      	nop
 8012b5c:	3714      	adds	r7, #20
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b64:	4770      	bx	lr
 8012b66:	bf00      	nop
 8012b68:	ffcfff8f 	.word	0xffcfff8f

08012b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	b087      	sub	sp, #28
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	60f8      	str	r0, [r7, #12]
 8012b74:	60b9      	str	r1, [r7, #8]
 8012b76:	607a      	str	r2, [r7, #4]
 8012b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	689b      	ldr	r3, [r3, #8]
 8012b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012b80:	697b      	ldr	r3, [r7, #20]
 8012b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012b88:	683b      	ldr	r3, [r7, #0]
 8012b8a:	021a      	lsls	r2, r3, #8
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	431a      	orrs	r2, r3
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	4313      	orrs	r3, r2
 8012b94:	697a      	ldr	r2, [r7, #20]
 8012b96:	4313      	orrs	r3, r2
 8012b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	697a      	ldr	r2, [r7, #20]
 8012b9e:	609a      	str	r2, [r3, #8]
}
 8012ba0:	bf00      	nop
 8012ba2:	371c      	adds	r7, #28
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr

08012bac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012bac:	b480      	push	{r7}
 8012bae:	b087      	sub	sp, #28
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	60f8      	str	r0, [r7, #12]
 8012bb4:	60b9      	str	r1, [r7, #8]
 8012bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	f003 031f 	and.w	r3, r3, #31
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8012bc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	6a1a      	ldr	r2, [r3, #32]
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	43db      	mvns	r3, r3
 8012bce:	401a      	ands	r2, r3
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	6a1a      	ldr	r2, [r3, #32]
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	f003 031f 	and.w	r3, r3, #31
 8012bde:	6879      	ldr	r1, [r7, #4]
 8012be0:	fa01 f303 	lsl.w	r3, r1, r3
 8012be4:	431a      	orrs	r2, r3
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	621a      	str	r2, [r3, #32]
}
 8012bea:	bf00      	nop
 8012bec:	371c      	adds	r7, #28
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf4:	4770      	bx	lr
	...

08012bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012bf8:	b480      	push	{r7}
 8012bfa:	b085      	sub	sp, #20
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012c08:	2b01      	cmp	r3, #1
 8012c0a:	d101      	bne.n	8012c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012c0c:	2302      	movs	r3, #2
 8012c0e:	e077      	b.n	8012d00 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2201      	movs	r2, #1
 8012c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2202      	movs	r2, #2
 8012c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	685b      	ldr	r3, [r3, #4]
 8012c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	689b      	ldr	r3, [r3, #8]
 8012c2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	4a35      	ldr	r2, [pc, #212]	; (8012d0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012c36:	4293      	cmp	r3, r2
 8012c38:	d004      	beq.n	8012c44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	4a34      	ldr	r2, [pc, #208]	; (8012d10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012c40:	4293      	cmp	r3, r2
 8012c42:	d108      	bne.n	8012c56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8012c4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	685b      	ldr	r3, [r3, #4]
 8012c50:	68fa      	ldr	r2, [r7, #12]
 8012c52:	4313      	orrs	r3, r2
 8012c54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012c5e:	683b      	ldr	r3, [r7, #0]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	68fa      	ldr	r2, [r7, #12]
 8012c64:	4313      	orrs	r3, r2
 8012c66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	68fa      	ldr	r2, [r7, #12]
 8012c6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	4a25      	ldr	r2, [pc, #148]	; (8012d0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012c76:	4293      	cmp	r3, r2
 8012c78:	d02c      	beq.n	8012cd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012c82:	d027      	beq.n	8012cd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	4a22      	ldr	r2, [pc, #136]	; (8012d14 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8012c8a:	4293      	cmp	r3, r2
 8012c8c:	d022      	beq.n	8012cd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	4a21      	ldr	r2, [pc, #132]	; (8012d18 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8012c94:	4293      	cmp	r3, r2
 8012c96:	d01d      	beq.n	8012cd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	4a1f      	ldr	r2, [pc, #124]	; (8012d1c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8012c9e:	4293      	cmp	r3, r2
 8012ca0:	d018      	beq.n	8012cd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	4a1a      	ldr	r2, [pc, #104]	; (8012d10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	d013      	beq.n	8012cd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	4a1b      	ldr	r2, [pc, #108]	; (8012d20 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8012cb2:	4293      	cmp	r3, r2
 8012cb4:	d00e      	beq.n	8012cd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	4a1a      	ldr	r2, [pc, #104]	; (8012d24 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8012cbc:	4293      	cmp	r3, r2
 8012cbe:	d009      	beq.n	8012cd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	4a18      	ldr	r2, [pc, #96]	; (8012d28 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	d004      	beq.n	8012cd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	4a17      	ldr	r2, [pc, #92]	; (8012d2c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8012cd0:	4293      	cmp	r3, r2
 8012cd2:	d10c      	bne.n	8012cee <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012cd4:	68bb      	ldr	r3, [r7, #8]
 8012cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012cda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	689b      	ldr	r3, [r3, #8]
 8012ce0:	68ba      	ldr	r2, [r7, #8]
 8012ce2:	4313      	orrs	r3, r2
 8012ce4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	68ba      	ldr	r2, [r7, #8]
 8012cec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2201      	movs	r2, #1
 8012cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012cfe:	2300      	movs	r3, #0
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3714      	adds	r7, #20
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr
 8012d0c:	40010000 	.word	0x40010000
 8012d10:	40010400 	.word	0x40010400
 8012d14:	40000400 	.word	0x40000400
 8012d18:	40000800 	.word	0x40000800
 8012d1c:	40000c00 	.word	0x40000c00
 8012d20:	40001800 	.word	0x40001800
 8012d24:	40014000 	.word	0x40014000
 8012d28:	4000e000 	.word	0x4000e000
 8012d2c:	4000e400 	.word	0x4000e400

08012d30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012d30:	b480      	push	{r7}
 8012d32:	b085      	sub	sp, #20
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
 8012d38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012d44:	2b01      	cmp	r3, #1
 8012d46:	d101      	bne.n	8012d4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012d48:	2302      	movs	r3, #2
 8012d4a:	e087      	b.n	8012e5c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2201      	movs	r2, #1
 8012d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	68db      	ldr	r3, [r3, #12]
 8012d5e:	4313      	orrs	r3, r2
 8012d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	689b      	ldr	r3, [r3, #8]
 8012d6c:	4313      	orrs	r3, r2
 8012d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	685b      	ldr	r3, [r3, #4]
 8012d7a:	4313      	orrs	r3, r2
 8012d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	4313      	orrs	r3, r2
 8012d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	691b      	ldr	r3, [r3, #16]
 8012d96:	4313      	orrs	r3, r2
 8012d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	695b      	ldr	r3, [r3, #20]
 8012da4:	4313      	orrs	r3, r2
 8012da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012db2:	4313      	orrs	r3, r2
 8012db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	699b      	ldr	r3, [r3, #24]
 8012dc0:	041b      	lsls	r3, r3, #16
 8012dc2:	4313      	orrs	r3, r2
 8012dc4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	4a27      	ldr	r2, [pc, #156]	; (8012e68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	d004      	beq.n	8012dda <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	4a25      	ldr	r2, [pc, #148]	; (8012e6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8012dd6:	4293      	cmp	r3, r2
 8012dd8:	d106      	bne.n	8012de8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	69db      	ldr	r3, [r3, #28]
 8012de4:	4313      	orrs	r3, r2
 8012de6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	4a1e      	ldr	r2, [pc, #120]	; (8012e68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8012dee:	4293      	cmp	r3, r2
 8012df0:	d004      	beq.n	8012dfc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	4a1d      	ldr	r2, [pc, #116]	; (8012e6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8012df8:	4293      	cmp	r3, r2
 8012dfa:	d126      	bne.n	8012e4a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e06:	051b      	lsls	r3, r3, #20
 8012e08:	4313      	orrs	r3, r2
 8012e0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	6a1b      	ldr	r3, [r3, #32]
 8012e16:	4313      	orrs	r3, r2
 8012e18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e24:	4313      	orrs	r3, r2
 8012e26:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	4a0e      	ldr	r2, [pc, #56]	; (8012e68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8012e2e:	4293      	cmp	r3, r2
 8012e30:	d004      	beq.n	8012e3c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	4a0d      	ldr	r2, [pc, #52]	; (8012e6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	d106      	bne.n	8012e4a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e46:	4313      	orrs	r3, r2
 8012e48:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	68fa      	ldr	r2, [r7, #12]
 8012e50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2200      	movs	r2, #0
 8012e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012e5a:	2300      	movs	r3, #0
}
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3714      	adds	r7, #20
 8012e60:	46bd      	mov	sp, r7
 8012e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e66:	4770      	bx	lr
 8012e68:	40010000 	.word	0x40010000
 8012e6c:	40010400 	.word	0x40010400

08012e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012e70:	b480      	push	{r7}
 8012e72:	b083      	sub	sp, #12
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012e78:	bf00      	nop
 8012e7a:	370c      	adds	r7, #12
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e82:	4770      	bx	lr

08012e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012e84:	b480      	push	{r7}
 8012e86:	b083      	sub	sp, #12
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012e8c:	bf00      	nop
 8012e8e:	370c      	adds	r7, #12
 8012e90:	46bd      	mov	sp, r7
 8012e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e96:	4770      	bx	lr

08012e98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012e98:	b480      	push	{r7}
 8012e9a:	b083      	sub	sp, #12
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012ea0:	bf00      	nop
 8012ea2:	370c      	adds	r7, #12
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eaa:	4770      	bx	lr

08012eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d101      	bne.n	8012ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012eba:	2301      	movs	r3, #1
 8012ebc:	e042      	b.n	8012f44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d106      	bne.n	8012ed6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012ed0:	6878      	ldr	r0, [r7, #4]
 8012ed2:	f7f3 f943 	bl	800615c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2224      	movs	r2, #36	; 0x24
 8012eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	681a      	ldr	r2, [r3, #0]
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	f022 0201 	bic.w	r2, r2, #1
 8012eec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012eee:	6878      	ldr	r0, [r7, #4]
 8012ef0:	f000 fce8 	bl	80138c4 <UART_SetConfig>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	2b01      	cmp	r3, #1
 8012ef8:	d101      	bne.n	8012efe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012efa:	2301      	movs	r3, #1
 8012efc:	e022      	b.n	8012f44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d002      	beq.n	8012f0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012f06:	6878      	ldr	r0, [r7, #4]
 8012f08:	f001 fb48 	bl	801459c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	685a      	ldr	r2, [r3, #4]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012f1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	689a      	ldr	r2, [r3, #8]
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012f2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	681a      	ldr	r2, [r3, #0]
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	f042 0201 	orr.w	r2, r2, #1
 8012f3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f001 fbcf 	bl	80146e0 <UART_CheckIdleState>
 8012f42:	4603      	mov	r3, r0
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	3708      	adds	r7, #8
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}

08012f4c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b091      	sub	sp, #68	; 0x44
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	60f8      	str	r0, [r7, #12]
 8012f54:	60b9      	str	r1, [r7, #8]
 8012f56:	4613      	mov	r3, r2
 8012f58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f60:	2b20      	cmp	r3, #32
 8012f62:	f040 808c 	bne.w	801307e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d002      	beq.n	8012f72 <HAL_UART_Transmit_IT+0x26>
 8012f6c:	88fb      	ldrh	r3, [r7, #6]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d101      	bne.n	8012f76 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8012f72:	2301      	movs	r3, #1
 8012f74:	e084      	b.n	8013080 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d101      	bne.n	8012f84 <HAL_UART_Transmit_IT+0x38>
 8012f80:	2302      	movs	r3, #2
 8012f82:	e07d      	b.n	8013080 <HAL_UART_Transmit_IT+0x134>
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	2201      	movs	r2, #1
 8012f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	68ba      	ldr	r2, [r7, #8]
 8012f90:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	88fa      	ldrh	r2, [r7, #6]
 8012f96:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	88fa      	ldrh	r2, [r7, #6]
 8012f9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	2200      	movs	r2, #0
 8012fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2221      	movs	r2, #33	; 0x21
 8012fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012fc0:	d12e      	bne.n	8013020 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	689b      	ldr	r3, [r3, #8]
 8012fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012fca:	d107      	bne.n	8012fdc <HAL_UART_Transmit_IT+0x90>
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	691b      	ldr	r3, [r3, #16]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d103      	bne.n	8012fdc <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	4a2d      	ldr	r2, [pc, #180]	; (801308c <HAL_UART_Transmit_IT+0x140>)
 8012fd8:	675a      	str	r2, [r3, #116]	; 0x74
 8012fda:	e002      	b.n	8012fe2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	4a2c      	ldr	r2, [pc, #176]	; (8013090 <HAL_UART_Transmit_IT+0x144>)
 8012fe0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	3308      	adds	r3, #8
 8012ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ff4:	e853 3f00 	ldrex	r3, [r3]
 8012ff8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ffc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013000:	63bb      	str	r3, [r7, #56]	; 0x38
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	3308      	adds	r3, #8
 8013008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801300a:	637a      	str	r2, [r7, #52]	; 0x34
 801300c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801300e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013012:	e841 2300 	strex	r3, r2, [r1]
 8013016:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801301a:	2b00      	cmp	r3, #0
 801301c:	d1e5      	bne.n	8012fea <HAL_UART_Transmit_IT+0x9e>
 801301e:	e02c      	b.n	801307a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	689b      	ldr	r3, [r3, #8]
 8013024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013028:	d107      	bne.n	801303a <HAL_UART_Transmit_IT+0xee>
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	691b      	ldr	r3, [r3, #16]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d103      	bne.n	801303a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	4a17      	ldr	r2, [pc, #92]	; (8013094 <HAL_UART_Transmit_IT+0x148>)
 8013036:	675a      	str	r2, [r3, #116]	; 0x74
 8013038:	e002      	b.n	8013040 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	4a16      	ldr	r2, [pc, #88]	; (8013098 <HAL_UART_Transmit_IT+0x14c>)
 801303e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	2200      	movs	r2, #0
 8013044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	e853 3f00 	ldrex	r3, [r3]
 8013054:	613b      	str	r3, [r7, #16]
   return(result);
 8013056:	693b      	ldr	r3, [r7, #16]
 8013058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801305c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	461a      	mov	r2, r3
 8013064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013066:	623b      	str	r3, [r7, #32]
 8013068:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801306a:	69f9      	ldr	r1, [r7, #28]
 801306c:	6a3a      	ldr	r2, [r7, #32]
 801306e:	e841 2300 	strex	r3, r2, [r1]
 8013072:	61bb      	str	r3, [r7, #24]
   return(result);
 8013074:	69bb      	ldr	r3, [r7, #24]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d1e6      	bne.n	8013048 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 801307a:	2300      	movs	r3, #0
 801307c:	e000      	b.n	8013080 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 801307e:	2302      	movs	r3, #2
  }
}
 8013080:	4618      	mov	r0, r3
 8013082:	3744      	adds	r7, #68	; 0x44
 8013084:	46bd      	mov	sp, r7
 8013086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308a:	4770      	bx	lr
 801308c:	08014eaf 	.word	0x08014eaf
 8013090:	08014dcf 	.word	0x08014dcf
 8013094:	08014d0d 	.word	0x08014d0d
 8013098:	08014c55 	.word	0x08014c55

0801309c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b08a      	sub	sp, #40	; 0x28
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	60f8      	str	r0, [r7, #12]
 80130a4:	60b9      	str	r1, [r7, #8]
 80130a6:	4613      	mov	r3, r2
 80130a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80130b0:	2b20      	cmp	r3, #32
 80130b2:	d142      	bne.n	801313a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80130b4:	68bb      	ldr	r3, [r7, #8]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d002      	beq.n	80130c0 <HAL_UART_Receive_IT+0x24>
 80130ba:	88fb      	ldrh	r3, [r7, #6]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d101      	bne.n	80130c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80130c0:	2301      	movs	r3, #1
 80130c2:	e03b      	b.n	801313c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80130ca:	2b01      	cmp	r3, #1
 80130cc:	d101      	bne.n	80130d2 <HAL_UART_Receive_IT+0x36>
 80130ce:	2302      	movs	r3, #2
 80130d0:	e034      	b.n	801313c <HAL_UART_Receive_IT+0xa0>
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	2201      	movs	r2, #1
 80130d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	2200      	movs	r2, #0
 80130de:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	4a17      	ldr	r2, [pc, #92]	; (8013144 <HAL_UART_Receive_IT+0xa8>)
 80130e6:	4293      	cmp	r3, r2
 80130e8:	d01f      	beq.n	801312a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d018      	beq.n	801312a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130fe:	697b      	ldr	r3, [r7, #20]
 8013100:	e853 3f00 	ldrex	r3, [r3]
 8013104:	613b      	str	r3, [r7, #16]
   return(result);
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801310c:	627b      	str	r3, [r7, #36]	; 0x24
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	461a      	mov	r2, r3
 8013114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013116:	623b      	str	r3, [r7, #32]
 8013118:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801311a:	69f9      	ldr	r1, [r7, #28]
 801311c:	6a3a      	ldr	r2, [r7, #32]
 801311e:	e841 2300 	strex	r3, r2, [r1]
 8013122:	61bb      	str	r3, [r7, #24]
   return(result);
 8013124:	69bb      	ldr	r3, [r7, #24]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d1e6      	bne.n	80130f8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801312a:	88fb      	ldrh	r3, [r7, #6]
 801312c:	461a      	mov	r2, r3
 801312e:	68b9      	ldr	r1, [r7, #8]
 8013130:	68f8      	ldr	r0, [r7, #12]
 8013132:	f001 fbe9 	bl	8014908 <UART_Start_Receive_IT>
 8013136:	4603      	mov	r3, r0
 8013138:	e000      	b.n	801313c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801313a:	2302      	movs	r3, #2
  }
}
 801313c:	4618      	mov	r0, r3
 801313e:	3728      	adds	r7, #40	; 0x28
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}
 8013144:	58000c00 	.word	0x58000c00

08013148 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b0ba      	sub	sp, #232	; 0xe8
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	69db      	ldr	r3, [r3, #28]
 8013156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	689b      	ldr	r3, [r3, #8]
 801316a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801316e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013172:	f640 030f 	movw	r3, #2063	; 0x80f
 8013176:	4013      	ands	r3, r2
 8013178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801317c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013180:	2b00      	cmp	r3, #0
 8013182:	d11b      	bne.n	80131bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013188:	f003 0320 	and.w	r3, r3, #32
 801318c:	2b00      	cmp	r3, #0
 801318e:	d015      	beq.n	80131bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013194:	f003 0320 	and.w	r3, r3, #32
 8013198:	2b00      	cmp	r3, #0
 801319a:	d105      	bne.n	80131a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801319c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80131a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d009      	beq.n	80131bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	f000 835a 	beq.w	8013866 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	4798      	blx	r3
      }
      return;
 80131ba:	e354      	b.n	8013866 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80131bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	f000 811f 	beq.w	8013404 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80131c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80131ca:	4b8b      	ldr	r3, [pc, #556]	; (80133f8 <HAL_UART_IRQHandler+0x2b0>)
 80131cc:	4013      	ands	r3, r2
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d106      	bne.n	80131e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80131d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80131d6:	4b89      	ldr	r3, [pc, #548]	; (80133fc <HAL_UART_IRQHandler+0x2b4>)
 80131d8:	4013      	ands	r3, r2
 80131da:	2b00      	cmp	r3, #0
 80131dc:	f000 8112 	beq.w	8013404 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80131e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80131e4:	f003 0301 	and.w	r3, r3, #1
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d011      	beq.n	8013210 <HAL_UART_IRQHandler+0xc8>
 80131ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80131f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d00b      	beq.n	8013210 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	2201      	movs	r2, #1
 80131fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013206:	f043 0201 	orr.w	r2, r3, #1
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013214:	f003 0302 	and.w	r3, r3, #2
 8013218:	2b00      	cmp	r3, #0
 801321a:	d011      	beq.n	8013240 <HAL_UART_IRQHandler+0xf8>
 801321c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013220:	f003 0301 	and.w	r3, r3, #1
 8013224:	2b00      	cmp	r3, #0
 8013226:	d00b      	beq.n	8013240 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	2202      	movs	r2, #2
 801322e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013236:	f043 0204 	orr.w	r2, r3, #4
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013244:	f003 0304 	and.w	r3, r3, #4
 8013248:	2b00      	cmp	r3, #0
 801324a:	d011      	beq.n	8013270 <HAL_UART_IRQHandler+0x128>
 801324c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013250:	f003 0301 	and.w	r3, r3, #1
 8013254:	2b00      	cmp	r3, #0
 8013256:	d00b      	beq.n	8013270 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	2204      	movs	r2, #4
 801325e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013266:	f043 0202 	orr.w	r2, r3, #2
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013274:	f003 0308 	and.w	r3, r3, #8
 8013278:	2b00      	cmp	r3, #0
 801327a:	d017      	beq.n	80132ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801327c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013280:	f003 0320 	and.w	r3, r3, #32
 8013284:	2b00      	cmp	r3, #0
 8013286:	d105      	bne.n	8013294 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013288:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801328c:	4b5a      	ldr	r3, [pc, #360]	; (80133f8 <HAL_UART_IRQHandler+0x2b0>)
 801328e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013290:	2b00      	cmp	r3, #0
 8013292:	d00b      	beq.n	80132ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	2208      	movs	r2, #8
 801329a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80132a2:	f043 0208 	orr.w	r2, r3, #8
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80132ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80132b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d012      	beq.n	80132de <HAL_UART_IRQHandler+0x196>
 80132b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80132bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d00c      	beq.n	80132de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80132cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80132d4:	f043 0220 	orr.w	r2, r3, #32
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	f000 82c0 	beq.w	801386a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80132ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80132ee:	f003 0320 	and.w	r3, r3, #32
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d013      	beq.n	801331e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80132f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80132fa:	f003 0320 	and.w	r3, r3, #32
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d105      	bne.n	801330e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801330a:	2b00      	cmp	r3, #0
 801330c:	d007      	beq.n	801331e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013312:	2b00      	cmp	r3, #0
 8013314:	d003      	beq.n	801331e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013324:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	689b      	ldr	r3, [r3, #8]
 801332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013332:	2b40      	cmp	r3, #64	; 0x40
 8013334:	d005      	beq.n	8013342 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801333a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801333e:	2b00      	cmp	r3, #0
 8013340:	d04f      	beq.n	80133e2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	f001 fc0a 	bl	8014b5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	689b      	ldr	r3, [r3, #8]
 801334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013352:	2b40      	cmp	r3, #64	; 0x40
 8013354:	d141      	bne.n	80133da <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	3308      	adds	r3, #8
 801335c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013364:	e853 3f00 	ldrex	r3, [r3]
 8013368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801336c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	3308      	adds	r3, #8
 801337e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8013382:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801338a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801338e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013392:	e841 2300 	strex	r3, r2, [r1]
 8013396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801339a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d1d9      	bne.n	8013356 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d013      	beq.n	80133d2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80133ae:	4a14      	ldr	r2, [pc, #80]	; (8013400 <HAL_UART_IRQHandler+0x2b8>)
 80133b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7f6 fbb4 	bl	8009b24 <HAL_DMA_Abort_IT>
 80133bc:	4603      	mov	r3, r0
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d017      	beq.n	80133f2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80133c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80133cc:	4610      	mov	r0, r2
 80133ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133d0:	e00f      	b.n	80133f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f000 fa60 	bl	8013898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133d8:	e00b      	b.n	80133f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80133da:	6878      	ldr	r0, [r7, #4]
 80133dc:	f000 fa5c 	bl	8013898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133e0:	e007      	b.n	80133f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f000 fa58 	bl	8013898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2200      	movs	r2, #0
 80133ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80133f0:	e23b      	b.n	801386a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133f2:	bf00      	nop
    return;
 80133f4:	e239      	b.n	801386a <HAL_UART_IRQHandler+0x722>
 80133f6:	bf00      	nop
 80133f8:	10000001 	.word	0x10000001
 80133fc:	04000120 	.word	0x04000120
 8013400:	08014c29 	.word	0x08014c29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013408:	2b01      	cmp	r3, #1
 801340a:	f040 81ce 	bne.w	80137aa <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801340e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013412:	f003 0310 	and.w	r3, r3, #16
 8013416:	2b00      	cmp	r3, #0
 8013418:	f000 81c7 	beq.w	80137aa <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801341c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013420:	f003 0310 	and.w	r3, r3, #16
 8013424:	2b00      	cmp	r3, #0
 8013426:	f000 81c0 	beq.w	80137aa <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	2210      	movs	r2, #16
 8013430:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	689b      	ldr	r3, [r3, #8]
 8013438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801343c:	2b40      	cmp	r3, #64	; 0x40
 801343e:	f040 813b 	bne.w	80136b8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	4a8b      	ldr	r2, [pc, #556]	; (8013678 <HAL_UART_IRQHandler+0x530>)
 801344a:	4293      	cmp	r3, r2
 801344c:	d059      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	4a89      	ldr	r2, [pc, #548]	; (801367c <HAL_UART_IRQHandler+0x534>)
 8013456:	4293      	cmp	r3, r2
 8013458:	d053      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	4a87      	ldr	r2, [pc, #540]	; (8013680 <HAL_UART_IRQHandler+0x538>)
 8013462:	4293      	cmp	r3, r2
 8013464:	d04d      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	4a85      	ldr	r2, [pc, #532]	; (8013684 <HAL_UART_IRQHandler+0x53c>)
 801346e:	4293      	cmp	r3, r2
 8013470:	d047      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	4a83      	ldr	r2, [pc, #524]	; (8013688 <HAL_UART_IRQHandler+0x540>)
 801347a:	4293      	cmp	r3, r2
 801347c:	d041      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	4a81      	ldr	r2, [pc, #516]	; (801368c <HAL_UART_IRQHandler+0x544>)
 8013486:	4293      	cmp	r3, r2
 8013488:	d03b      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	4a7f      	ldr	r2, [pc, #508]	; (8013690 <HAL_UART_IRQHandler+0x548>)
 8013492:	4293      	cmp	r3, r2
 8013494:	d035      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	4a7d      	ldr	r2, [pc, #500]	; (8013694 <HAL_UART_IRQHandler+0x54c>)
 801349e:	4293      	cmp	r3, r2
 80134a0:	d02f      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	4a7b      	ldr	r2, [pc, #492]	; (8013698 <HAL_UART_IRQHandler+0x550>)
 80134aa:	4293      	cmp	r3, r2
 80134ac:	d029      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	4a79      	ldr	r2, [pc, #484]	; (801369c <HAL_UART_IRQHandler+0x554>)
 80134b6:	4293      	cmp	r3, r2
 80134b8:	d023      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	4a77      	ldr	r2, [pc, #476]	; (80136a0 <HAL_UART_IRQHandler+0x558>)
 80134c2:	4293      	cmp	r3, r2
 80134c4:	d01d      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	4a75      	ldr	r2, [pc, #468]	; (80136a4 <HAL_UART_IRQHandler+0x55c>)
 80134ce:	4293      	cmp	r3, r2
 80134d0:	d017      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	4a73      	ldr	r2, [pc, #460]	; (80136a8 <HAL_UART_IRQHandler+0x560>)
 80134da:	4293      	cmp	r3, r2
 80134dc:	d011      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	4a71      	ldr	r2, [pc, #452]	; (80136ac <HAL_UART_IRQHandler+0x564>)
 80134e6:	4293      	cmp	r3, r2
 80134e8:	d00b      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	4a6f      	ldr	r2, [pc, #444]	; (80136b0 <HAL_UART_IRQHandler+0x568>)
 80134f2:	4293      	cmp	r3, r2
 80134f4:	d005      	beq.n	8013502 <HAL_UART_IRQHandler+0x3ba>
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	4a6d      	ldr	r2, [pc, #436]	; (80136b4 <HAL_UART_IRQHandler+0x56c>)
 80134fe:	4293      	cmp	r3, r2
 8013500:	d105      	bne.n	801350e <HAL_UART_IRQHandler+0x3c6>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	b29b      	uxth	r3, r3
 801350c:	e004      	b.n	8013518 <HAL_UART_IRQHandler+0x3d0>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	685b      	ldr	r3, [r3, #4]
 8013516:	b29b      	uxth	r3, r3
 8013518:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801351c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8013520:	2b00      	cmp	r3, #0
 8013522:	f000 81a4 	beq.w	801386e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801352c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013530:	429a      	cmp	r2, r3
 8013532:	f080 819c 	bcs.w	801386e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801353c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013544:	69db      	ldr	r3, [r3, #28]
 8013546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801354a:	f000 8086 	beq.w	801365a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013556:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801355a:	e853 3f00 	ldrex	r3, [r3]
 801355e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8013562:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801356a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	461a      	mov	r2, r3
 8013574:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013578:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801357c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013580:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8013584:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013588:	e841 2300 	strex	r3, r2, [r1]
 801358c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8013590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013594:	2b00      	cmp	r3, #0
 8013596:	d1da      	bne.n	801354e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	3308      	adds	r3, #8
 801359e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80135a2:	e853 3f00 	ldrex	r3, [r3]
 80135a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80135a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80135aa:	f023 0301 	bic.w	r3, r3, #1
 80135ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	3308      	adds	r3, #8
 80135b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80135bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80135c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80135c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80135c8:	e841 2300 	strex	r3, r2, [r1]
 80135cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80135ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d1e1      	bne.n	8013598 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	3308      	adds	r3, #8
 80135da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80135de:	e853 3f00 	ldrex	r3, [r3]
 80135e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80135e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80135e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80135ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	3308      	adds	r3, #8
 80135f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80135f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80135fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80135fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013600:	e841 2300 	strex	r3, r2, [r1]
 8013604:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8013606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013608:	2b00      	cmp	r3, #0
 801360a:	d1e3      	bne.n	80135d4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	2220      	movs	r2, #32
 8013610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2200      	movs	r2, #0
 8013618:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013622:	e853 3f00 	ldrex	r3, [r3]
 8013626:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801362a:	f023 0310 	bic.w	r3, r3, #16
 801362e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	461a      	mov	r2, r3
 8013638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801363c:	65bb      	str	r3, [r7, #88]	; 0x58
 801363e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013640:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013642:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013644:	e841 2300 	strex	r3, r2, [r1]
 8013648:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801364a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801364c:	2b00      	cmp	r3, #0
 801364e:	d1e4      	bne.n	801361a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013654:	4618      	mov	r0, r3
 8013656:	f7f5 ff47 	bl	80094e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013666:	b29b      	uxth	r3, r3
 8013668:	1ad3      	subs	r3, r2, r3
 801366a:	b29b      	uxth	r3, r3
 801366c:	4619      	mov	r1, r3
 801366e:	6878      	ldr	r0, [r7, #4]
 8013670:	f000 f91c 	bl	80138ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013674:	e0fb      	b.n	801386e <HAL_UART_IRQHandler+0x726>
 8013676:	bf00      	nop
 8013678:	40020010 	.word	0x40020010
 801367c:	40020028 	.word	0x40020028
 8013680:	40020040 	.word	0x40020040
 8013684:	40020058 	.word	0x40020058
 8013688:	40020070 	.word	0x40020070
 801368c:	40020088 	.word	0x40020088
 8013690:	400200a0 	.word	0x400200a0
 8013694:	400200b8 	.word	0x400200b8
 8013698:	40020410 	.word	0x40020410
 801369c:	40020428 	.word	0x40020428
 80136a0:	40020440 	.word	0x40020440
 80136a4:	40020458 	.word	0x40020458
 80136a8:	40020470 	.word	0x40020470
 80136ac:	40020488 	.word	0x40020488
 80136b0:	400204a0 	.word	0x400204a0
 80136b4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80136c4:	b29b      	uxth	r3, r3
 80136c6:	1ad3      	subs	r3, r2, r3
 80136c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	f000 80cc 	beq.w	8013872 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80136da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80136de:	2b00      	cmp	r3, #0
 80136e0:	f000 80c7 	beq.w	8013872 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ec:	e853 3f00 	ldrex	r3, [r3]
 80136f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80136f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80136f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	461a      	mov	r2, r3
 8013702:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013706:	647b      	str	r3, [r7, #68]	; 0x44
 8013708:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801370a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801370c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801370e:	e841 2300 	strex	r3, r2, [r1]
 8013712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013716:	2b00      	cmp	r3, #0
 8013718:	d1e4      	bne.n	80136e4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	3308      	adds	r3, #8
 8013720:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013724:	e853 3f00 	ldrex	r3, [r3]
 8013728:	623b      	str	r3, [r7, #32]
   return(result);
 801372a:	6a3a      	ldr	r2, [r7, #32]
 801372c:	4b54      	ldr	r3, [pc, #336]	; (8013880 <HAL_UART_IRQHandler+0x738>)
 801372e:	4013      	ands	r3, r2
 8013730:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	3308      	adds	r3, #8
 801373a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801373e:	633a      	str	r2, [r7, #48]	; 0x30
 8013740:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013746:	e841 2300 	strex	r3, r2, [r1]
 801374a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801374e:	2b00      	cmp	r3, #0
 8013750:	d1e3      	bne.n	801371a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2220      	movs	r2, #32
 8013756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2200      	movs	r2, #0
 801375e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2200      	movs	r2, #0
 8013764:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	e853 3f00 	ldrex	r3, [r3]
 8013772:	60fb      	str	r3, [r7, #12]
   return(result);
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	f023 0310 	bic.w	r3, r3, #16
 801377a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	461a      	mov	r2, r3
 8013784:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013788:	61fb      	str	r3, [r7, #28]
 801378a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801378c:	69b9      	ldr	r1, [r7, #24]
 801378e:	69fa      	ldr	r2, [r7, #28]
 8013790:	e841 2300 	strex	r3, r2, [r1]
 8013794:	617b      	str	r3, [r7, #20]
   return(result);
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d1e4      	bne.n	8013766 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801379c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80137a0:	4619      	mov	r1, r3
 80137a2:	6878      	ldr	r0, [r7, #4]
 80137a4:	f000 f882 	bl	80138ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80137a8:	e063      	b.n	8013872 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80137aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80137ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d00e      	beq.n	80137d4 <HAL_UART_IRQHandler+0x68c>
 80137b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80137ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d008      	beq.n	80137d4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80137ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f002 f86b 	bl	80158a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80137d2:	e051      	b.n	8013878 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80137d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80137d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d014      	beq.n	801380a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80137e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80137e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d105      	bne.n	80137f8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80137ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80137f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d008      	beq.n	801380a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d03a      	beq.n	8013876 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	4798      	blx	r3
    }
    return;
 8013808:	e035      	b.n	8013876 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801380a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013812:	2b00      	cmp	r3, #0
 8013814:	d009      	beq.n	801382a <HAL_UART_IRQHandler+0x6e2>
 8013816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801381e:	2b00      	cmp	r3, #0
 8013820:	d003      	beq.n	801382a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f001 fbb8 	bl	8014f98 <UART_EndTransmit_IT>
    return;
 8013828:	e026      	b.n	8013878 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801382e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013832:	2b00      	cmp	r3, #0
 8013834:	d009      	beq.n	801384a <HAL_UART_IRQHandler+0x702>
 8013836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801383a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801383e:	2b00      	cmp	r3, #0
 8013840:	d003      	beq.n	801384a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f002 f844 	bl	80158d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013848:	e016      	b.n	8013878 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801384e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013852:	2b00      	cmp	r3, #0
 8013854:	d010      	beq.n	8013878 <HAL_UART_IRQHandler+0x730>
 8013856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801385a:	2b00      	cmp	r3, #0
 801385c:	da0c      	bge.n	8013878 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801385e:	6878      	ldr	r0, [r7, #4]
 8013860:	f002 f82c 	bl	80158bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013864:	e008      	b.n	8013878 <HAL_UART_IRQHandler+0x730>
      return;
 8013866:	bf00      	nop
 8013868:	e006      	b.n	8013878 <HAL_UART_IRQHandler+0x730>
    return;
 801386a:	bf00      	nop
 801386c:	e004      	b.n	8013878 <HAL_UART_IRQHandler+0x730>
      return;
 801386e:	bf00      	nop
 8013870:	e002      	b.n	8013878 <HAL_UART_IRQHandler+0x730>
      return;
 8013872:	bf00      	nop
 8013874:	e000      	b.n	8013878 <HAL_UART_IRQHandler+0x730>
    return;
 8013876:	bf00      	nop
  }
}
 8013878:	37e8      	adds	r7, #232	; 0xe8
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}
 801387e:	bf00      	nop
 8013880:	effffffe 	.word	0xeffffffe

08013884 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013884:	b480      	push	{r7}
 8013886:	b083      	sub	sp, #12
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801388c:	bf00      	nop
 801388e:	370c      	adds	r7, #12
 8013890:	46bd      	mov	sp, r7
 8013892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013896:	4770      	bx	lr

08013898 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013898:	b480      	push	{r7}
 801389a:	b083      	sub	sp, #12
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80138a0:	bf00      	nop
 80138a2:	370c      	adds	r7, #12
 80138a4:	46bd      	mov	sp, r7
 80138a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138aa:	4770      	bx	lr

080138ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80138ac:	b480      	push	{r7}
 80138ae:	b083      	sub	sp, #12
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	460b      	mov	r3, r1
 80138b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80138b8:	bf00      	nop
 80138ba:	370c      	adds	r7, #12
 80138bc:	46bd      	mov	sp, r7
 80138be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c2:	4770      	bx	lr

080138c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80138c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80138c8:	b092      	sub	sp, #72	; 0x48
 80138ca:	af00      	add	r7, sp, #0
 80138cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80138ce:	2300      	movs	r3, #0
 80138d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80138d4:	697b      	ldr	r3, [r7, #20]
 80138d6:	689a      	ldr	r2, [r3, #8]
 80138d8:	697b      	ldr	r3, [r7, #20]
 80138da:	691b      	ldr	r3, [r3, #16]
 80138dc:	431a      	orrs	r2, r3
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	695b      	ldr	r3, [r3, #20]
 80138e2:	431a      	orrs	r2, r3
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	69db      	ldr	r3, [r3, #28]
 80138e8:	4313      	orrs	r3, r2
 80138ea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	681a      	ldr	r2, [r3, #0]
 80138f2:	4bbe      	ldr	r3, [pc, #760]	; (8013bec <UART_SetConfig+0x328>)
 80138f4:	4013      	ands	r3, r2
 80138f6:	697a      	ldr	r2, [r7, #20]
 80138f8:	6812      	ldr	r2, [r2, #0]
 80138fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80138fc:	430b      	orrs	r3, r1
 80138fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013900:	697b      	ldr	r3, [r7, #20]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	685b      	ldr	r3, [r3, #4]
 8013906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	68da      	ldr	r2, [r3, #12]
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	430a      	orrs	r2, r1
 8013914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	699b      	ldr	r3, [r3, #24]
 801391a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801391c:	697b      	ldr	r3, [r7, #20]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	4ab3      	ldr	r2, [pc, #716]	; (8013bf0 <UART_SetConfig+0x32c>)
 8013922:	4293      	cmp	r3, r2
 8013924:	d004      	beq.n	8013930 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	6a1b      	ldr	r3, [r3, #32]
 801392a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801392c:	4313      	orrs	r3, r2
 801392e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	689a      	ldr	r2, [r3, #8]
 8013936:	4baf      	ldr	r3, [pc, #700]	; (8013bf4 <UART_SetConfig+0x330>)
 8013938:	4013      	ands	r3, r2
 801393a:	697a      	ldr	r2, [r7, #20]
 801393c:	6812      	ldr	r2, [r2, #0]
 801393e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013940:	430b      	orrs	r3, r1
 8013942:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013944:	697b      	ldr	r3, [r7, #20]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801394a:	f023 010f 	bic.w	r1, r3, #15
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	430a      	orrs	r2, r1
 8013958:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801395a:	697b      	ldr	r3, [r7, #20]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	4aa6      	ldr	r2, [pc, #664]	; (8013bf8 <UART_SetConfig+0x334>)
 8013960:	4293      	cmp	r3, r2
 8013962:	d177      	bne.n	8013a54 <UART_SetConfig+0x190>
 8013964:	4ba5      	ldr	r3, [pc, #660]	; (8013bfc <UART_SetConfig+0x338>)
 8013966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013968:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801396c:	2b28      	cmp	r3, #40	; 0x28
 801396e:	d86d      	bhi.n	8013a4c <UART_SetConfig+0x188>
 8013970:	a201      	add	r2, pc, #4	; (adr r2, 8013978 <UART_SetConfig+0xb4>)
 8013972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013976:	bf00      	nop
 8013978:	08013a1d 	.word	0x08013a1d
 801397c:	08013a4d 	.word	0x08013a4d
 8013980:	08013a4d 	.word	0x08013a4d
 8013984:	08013a4d 	.word	0x08013a4d
 8013988:	08013a4d 	.word	0x08013a4d
 801398c:	08013a4d 	.word	0x08013a4d
 8013990:	08013a4d 	.word	0x08013a4d
 8013994:	08013a4d 	.word	0x08013a4d
 8013998:	08013a25 	.word	0x08013a25
 801399c:	08013a4d 	.word	0x08013a4d
 80139a0:	08013a4d 	.word	0x08013a4d
 80139a4:	08013a4d 	.word	0x08013a4d
 80139a8:	08013a4d 	.word	0x08013a4d
 80139ac:	08013a4d 	.word	0x08013a4d
 80139b0:	08013a4d 	.word	0x08013a4d
 80139b4:	08013a4d 	.word	0x08013a4d
 80139b8:	08013a2d 	.word	0x08013a2d
 80139bc:	08013a4d 	.word	0x08013a4d
 80139c0:	08013a4d 	.word	0x08013a4d
 80139c4:	08013a4d 	.word	0x08013a4d
 80139c8:	08013a4d 	.word	0x08013a4d
 80139cc:	08013a4d 	.word	0x08013a4d
 80139d0:	08013a4d 	.word	0x08013a4d
 80139d4:	08013a4d 	.word	0x08013a4d
 80139d8:	08013a35 	.word	0x08013a35
 80139dc:	08013a4d 	.word	0x08013a4d
 80139e0:	08013a4d 	.word	0x08013a4d
 80139e4:	08013a4d 	.word	0x08013a4d
 80139e8:	08013a4d 	.word	0x08013a4d
 80139ec:	08013a4d 	.word	0x08013a4d
 80139f0:	08013a4d 	.word	0x08013a4d
 80139f4:	08013a4d 	.word	0x08013a4d
 80139f8:	08013a3d 	.word	0x08013a3d
 80139fc:	08013a4d 	.word	0x08013a4d
 8013a00:	08013a4d 	.word	0x08013a4d
 8013a04:	08013a4d 	.word	0x08013a4d
 8013a08:	08013a4d 	.word	0x08013a4d
 8013a0c:	08013a4d 	.word	0x08013a4d
 8013a10:	08013a4d 	.word	0x08013a4d
 8013a14:	08013a4d 	.word	0x08013a4d
 8013a18:	08013a45 	.word	0x08013a45
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a22:	e326      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013a24:	2304      	movs	r3, #4
 8013a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a2a:	e322      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013a2c:	2308      	movs	r3, #8
 8013a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a32:	e31e      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013a34:	2310      	movs	r3, #16
 8013a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a3a:	e31a      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013a3c:	2320      	movs	r3, #32
 8013a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a42:	e316      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013a44:	2340      	movs	r3, #64	; 0x40
 8013a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a4a:	e312      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013a4c:	2380      	movs	r3, #128	; 0x80
 8013a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a52:	e30e      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	4a69      	ldr	r2, [pc, #420]	; (8013c00 <UART_SetConfig+0x33c>)
 8013a5a:	4293      	cmp	r3, r2
 8013a5c:	d130      	bne.n	8013ac0 <UART_SetConfig+0x1fc>
 8013a5e:	4b67      	ldr	r3, [pc, #412]	; (8013bfc <UART_SetConfig+0x338>)
 8013a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a62:	f003 0307 	and.w	r3, r3, #7
 8013a66:	2b05      	cmp	r3, #5
 8013a68:	d826      	bhi.n	8013ab8 <UART_SetConfig+0x1f4>
 8013a6a:	a201      	add	r2, pc, #4	; (adr r2, 8013a70 <UART_SetConfig+0x1ac>)
 8013a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a70:	08013a89 	.word	0x08013a89
 8013a74:	08013a91 	.word	0x08013a91
 8013a78:	08013a99 	.word	0x08013a99
 8013a7c:	08013aa1 	.word	0x08013aa1
 8013a80:	08013aa9 	.word	0x08013aa9
 8013a84:	08013ab1 	.word	0x08013ab1
 8013a88:	2300      	movs	r3, #0
 8013a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a8e:	e2f0      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013a90:	2304      	movs	r3, #4
 8013a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a96:	e2ec      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013a98:	2308      	movs	r3, #8
 8013a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a9e:	e2e8      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013aa0:	2310      	movs	r3, #16
 8013aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013aa6:	e2e4      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013aa8:	2320      	movs	r3, #32
 8013aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013aae:	e2e0      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013ab0:	2340      	movs	r3, #64	; 0x40
 8013ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ab6:	e2dc      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013ab8:	2380      	movs	r3, #128	; 0x80
 8013aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013abe:	e2d8      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	4a4f      	ldr	r2, [pc, #316]	; (8013c04 <UART_SetConfig+0x340>)
 8013ac6:	4293      	cmp	r3, r2
 8013ac8:	d130      	bne.n	8013b2c <UART_SetConfig+0x268>
 8013aca:	4b4c      	ldr	r3, [pc, #304]	; (8013bfc <UART_SetConfig+0x338>)
 8013acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ace:	f003 0307 	and.w	r3, r3, #7
 8013ad2:	2b05      	cmp	r3, #5
 8013ad4:	d826      	bhi.n	8013b24 <UART_SetConfig+0x260>
 8013ad6:	a201      	add	r2, pc, #4	; (adr r2, 8013adc <UART_SetConfig+0x218>)
 8013ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013adc:	08013af5 	.word	0x08013af5
 8013ae0:	08013afd 	.word	0x08013afd
 8013ae4:	08013b05 	.word	0x08013b05
 8013ae8:	08013b0d 	.word	0x08013b0d
 8013aec:	08013b15 	.word	0x08013b15
 8013af0:	08013b1d 	.word	0x08013b1d
 8013af4:	2300      	movs	r3, #0
 8013af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013afa:	e2ba      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013afc:	2304      	movs	r3, #4
 8013afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b02:	e2b6      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013b04:	2308      	movs	r3, #8
 8013b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b0a:	e2b2      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013b0c:	2310      	movs	r3, #16
 8013b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b12:	e2ae      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013b14:	2320      	movs	r3, #32
 8013b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b1a:	e2aa      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013b1c:	2340      	movs	r3, #64	; 0x40
 8013b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b22:	e2a6      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013b24:	2380      	movs	r3, #128	; 0x80
 8013b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b2a:	e2a2      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013b2c:	697b      	ldr	r3, [r7, #20]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	4a35      	ldr	r2, [pc, #212]	; (8013c08 <UART_SetConfig+0x344>)
 8013b32:	4293      	cmp	r3, r2
 8013b34:	d130      	bne.n	8013b98 <UART_SetConfig+0x2d4>
 8013b36:	4b31      	ldr	r3, [pc, #196]	; (8013bfc <UART_SetConfig+0x338>)
 8013b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b3a:	f003 0307 	and.w	r3, r3, #7
 8013b3e:	2b05      	cmp	r3, #5
 8013b40:	d826      	bhi.n	8013b90 <UART_SetConfig+0x2cc>
 8013b42:	a201      	add	r2, pc, #4	; (adr r2, 8013b48 <UART_SetConfig+0x284>)
 8013b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b48:	08013b61 	.word	0x08013b61
 8013b4c:	08013b69 	.word	0x08013b69
 8013b50:	08013b71 	.word	0x08013b71
 8013b54:	08013b79 	.word	0x08013b79
 8013b58:	08013b81 	.word	0x08013b81
 8013b5c:	08013b89 	.word	0x08013b89
 8013b60:	2300      	movs	r3, #0
 8013b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b66:	e284      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013b68:	2304      	movs	r3, #4
 8013b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b6e:	e280      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013b70:	2308      	movs	r3, #8
 8013b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b76:	e27c      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013b78:	2310      	movs	r3, #16
 8013b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b7e:	e278      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013b80:	2320      	movs	r3, #32
 8013b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b86:	e274      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013b88:	2340      	movs	r3, #64	; 0x40
 8013b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b8e:	e270      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013b90:	2380      	movs	r3, #128	; 0x80
 8013b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b96:	e26c      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013b98:	697b      	ldr	r3, [r7, #20]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	4a1b      	ldr	r2, [pc, #108]	; (8013c0c <UART_SetConfig+0x348>)
 8013b9e:	4293      	cmp	r3, r2
 8013ba0:	d142      	bne.n	8013c28 <UART_SetConfig+0x364>
 8013ba2:	4b16      	ldr	r3, [pc, #88]	; (8013bfc <UART_SetConfig+0x338>)
 8013ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ba6:	f003 0307 	and.w	r3, r3, #7
 8013baa:	2b05      	cmp	r3, #5
 8013bac:	d838      	bhi.n	8013c20 <UART_SetConfig+0x35c>
 8013bae:	a201      	add	r2, pc, #4	; (adr r2, 8013bb4 <UART_SetConfig+0x2f0>)
 8013bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bb4:	08013bcd 	.word	0x08013bcd
 8013bb8:	08013bd5 	.word	0x08013bd5
 8013bbc:	08013bdd 	.word	0x08013bdd
 8013bc0:	08013be5 	.word	0x08013be5
 8013bc4:	08013c11 	.word	0x08013c11
 8013bc8:	08013c19 	.word	0x08013c19
 8013bcc:	2300      	movs	r3, #0
 8013bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013bd2:	e24e      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013bd4:	2304      	movs	r3, #4
 8013bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013bda:	e24a      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013bdc:	2308      	movs	r3, #8
 8013bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013be2:	e246      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013be4:	2310      	movs	r3, #16
 8013be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013bea:	e242      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013bec:	cfff69f3 	.word	0xcfff69f3
 8013bf0:	58000c00 	.word	0x58000c00
 8013bf4:	11fff4ff 	.word	0x11fff4ff
 8013bf8:	40011000 	.word	0x40011000
 8013bfc:	58024400 	.word	0x58024400
 8013c00:	40004400 	.word	0x40004400
 8013c04:	40004800 	.word	0x40004800
 8013c08:	40004c00 	.word	0x40004c00
 8013c0c:	40005000 	.word	0x40005000
 8013c10:	2320      	movs	r3, #32
 8013c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013c16:	e22c      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013c18:	2340      	movs	r3, #64	; 0x40
 8013c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013c1e:	e228      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013c20:	2380      	movs	r3, #128	; 0x80
 8013c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013c26:	e224      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	4ab1      	ldr	r2, [pc, #708]	; (8013ef4 <UART_SetConfig+0x630>)
 8013c2e:	4293      	cmp	r3, r2
 8013c30:	d176      	bne.n	8013d20 <UART_SetConfig+0x45c>
 8013c32:	4bb1      	ldr	r3, [pc, #708]	; (8013ef8 <UART_SetConfig+0x634>)
 8013c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013c3a:	2b28      	cmp	r3, #40	; 0x28
 8013c3c:	d86c      	bhi.n	8013d18 <UART_SetConfig+0x454>
 8013c3e:	a201      	add	r2, pc, #4	; (adr r2, 8013c44 <UART_SetConfig+0x380>)
 8013c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c44:	08013ce9 	.word	0x08013ce9
 8013c48:	08013d19 	.word	0x08013d19
 8013c4c:	08013d19 	.word	0x08013d19
 8013c50:	08013d19 	.word	0x08013d19
 8013c54:	08013d19 	.word	0x08013d19
 8013c58:	08013d19 	.word	0x08013d19
 8013c5c:	08013d19 	.word	0x08013d19
 8013c60:	08013d19 	.word	0x08013d19
 8013c64:	08013cf1 	.word	0x08013cf1
 8013c68:	08013d19 	.word	0x08013d19
 8013c6c:	08013d19 	.word	0x08013d19
 8013c70:	08013d19 	.word	0x08013d19
 8013c74:	08013d19 	.word	0x08013d19
 8013c78:	08013d19 	.word	0x08013d19
 8013c7c:	08013d19 	.word	0x08013d19
 8013c80:	08013d19 	.word	0x08013d19
 8013c84:	08013cf9 	.word	0x08013cf9
 8013c88:	08013d19 	.word	0x08013d19
 8013c8c:	08013d19 	.word	0x08013d19
 8013c90:	08013d19 	.word	0x08013d19
 8013c94:	08013d19 	.word	0x08013d19
 8013c98:	08013d19 	.word	0x08013d19
 8013c9c:	08013d19 	.word	0x08013d19
 8013ca0:	08013d19 	.word	0x08013d19
 8013ca4:	08013d01 	.word	0x08013d01
 8013ca8:	08013d19 	.word	0x08013d19
 8013cac:	08013d19 	.word	0x08013d19
 8013cb0:	08013d19 	.word	0x08013d19
 8013cb4:	08013d19 	.word	0x08013d19
 8013cb8:	08013d19 	.word	0x08013d19
 8013cbc:	08013d19 	.word	0x08013d19
 8013cc0:	08013d19 	.word	0x08013d19
 8013cc4:	08013d09 	.word	0x08013d09
 8013cc8:	08013d19 	.word	0x08013d19
 8013ccc:	08013d19 	.word	0x08013d19
 8013cd0:	08013d19 	.word	0x08013d19
 8013cd4:	08013d19 	.word	0x08013d19
 8013cd8:	08013d19 	.word	0x08013d19
 8013cdc:	08013d19 	.word	0x08013d19
 8013ce0:	08013d19 	.word	0x08013d19
 8013ce4:	08013d11 	.word	0x08013d11
 8013ce8:	2301      	movs	r3, #1
 8013cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013cee:	e1c0      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013cf0:	2304      	movs	r3, #4
 8013cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013cf6:	e1bc      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013cf8:	2308      	movs	r3, #8
 8013cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013cfe:	e1b8      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013d00:	2310      	movs	r3, #16
 8013d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d06:	e1b4      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013d08:	2320      	movs	r3, #32
 8013d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d0e:	e1b0      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013d10:	2340      	movs	r3, #64	; 0x40
 8013d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d16:	e1ac      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013d18:	2380      	movs	r3, #128	; 0x80
 8013d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d1e:	e1a8      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	4a75      	ldr	r2, [pc, #468]	; (8013efc <UART_SetConfig+0x638>)
 8013d26:	4293      	cmp	r3, r2
 8013d28:	d130      	bne.n	8013d8c <UART_SetConfig+0x4c8>
 8013d2a:	4b73      	ldr	r3, [pc, #460]	; (8013ef8 <UART_SetConfig+0x634>)
 8013d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d2e:	f003 0307 	and.w	r3, r3, #7
 8013d32:	2b05      	cmp	r3, #5
 8013d34:	d826      	bhi.n	8013d84 <UART_SetConfig+0x4c0>
 8013d36:	a201      	add	r2, pc, #4	; (adr r2, 8013d3c <UART_SetConfig+0x478>)
 8013d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d3c:	08013d55 	.word	0x08013d55
 8013d40:	08013d5d 	.word	0x08013d5d
 8013d44:	08013d65 	.word	0x08013d65
 8013d48:	08013d6d 	.word	0x08013d6d
 8013d4c:	08013d75 	.word	0x08013d75
 8013d50:	08013d7d 	.word	0x08013d7d
 8013d54:	2300      	movs	r3, #0
 8013d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d5a:	e18a      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013d5c:	2304      	movs	r3, #4
 8013d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d62:	e186      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013d64:	2308      	movs	r3, #8
 8013d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d6a:	e182      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013d6c:	2310      	movs	r3, #16
 8013d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d72:	e17e      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013d74:	2320      	movs	r3, #32
 8013d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d7a:	e17a      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013d7c:	2340      	movs	r3, #64	; 0x40
 8013d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d82:	e176      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013d84:	2380      	movs	r3, #128	; 0x80
 8013d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d8a:	e172      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	4a5b      	ldr	r2, [pc, #364]	; (8013f00 <UART_SetConfig+0x63c>)
 8013d92:	4293      	cmp	r3, r2
 8013d94:	d130      	bne.n	8013df8 <UART_SetConfig+0x534>
 8013d96:	4b58      	ldr	r3, [pc, #352]	; (8013ef8 <UART_SetConfig+0x634>)
 8013d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d9a:	f003 0307 	and.w	r3, r3, #7
 8013d9e:	2b05      	cmp	r3, #5
 8013da0:	d826      	bhi.n	8013df0 <UART_SetConfig+0x52c>
 8013da2:	a201      	add	r2, pc, #4	; (adr r2, 8013da8 <UART_SetConfig+0x4e4>)
 8013da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013da8:	08013dc1 	.word	0x08013dc1
 8013dac:	08013dc9 	.word	0x08013dc9
 8013db0:	08013dd1 	.word	0x08013dd1
 8013db4:	08013dd9 	.word	0x08013dd9
 8013db8:	08013de1 	.word	0x08013de1
 8013dbc:	08013de9 	.word	0x08013de9
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013dc6:	e154      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013dc8:	2304      	movs	r3, #4
 8013dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013dce:	e150      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013dd0:	2308      	movs	r3, #8
 8013dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013dd6:	e14c      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013dd8:	2310      	movs	r3, #16
 8013dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013dde:	e148      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013de0:	2320      	movs	r3, #32
 8013de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013de6:	e144      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013de8:	2340      	movs	r3, #64	; 0x40
 8013dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013dee:	e140      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013df0:	2380      	movs	r3, #128	; 0x80
 8013df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013df6:	e13c      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013df8:	697b      	ldr	r3, [r7, #20]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	4a41      	ldr	r2, [pc, #260]	; (8013f04 <UART_SetConfig+0x640>)
 8013dfe:	4293      	cmp	r3, r2
 8013e00:	f040 8082 	bne.w	8013f08 <UART_SetConfig+0x644>
 8013e04:	4b3c      	ldr	r3, [pc, #240]	; (8013ef8 <UART_SetConfig+0x634>)
 8013e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013e0c:	2b28      	cmp	r3, #40	; 0x28
 8013e0e:	d86d      	bhi.n	8013eec <UART_SetConfig+0x628>
 8013e10:	a201      	add	r2, pc, #4	; (adr r2, 8013e18 <UART_SetConfig+0x554>)
 8013e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e16:	bf00      	nop
 8013e18:	08013ebd 	.word	0x08013ebd
 8013e1c:	08013eed 	.word	0x08013eed
 8013e20:	08013eed 	.word	0x08013eed
 8013e24:	08013eed 	.word	0x08013eed
 8013e28:	08013eed 	.word	0x08013eed
 8013e2c:	08013eed 	.word	0x08013eed
 8013e30:	08013eed 	.word	0x08013eed
 8013e34:	08013eed 	.word	0x08013eed
 8013e38:	08013ec5 	.word	0x08013ec5
 8013e3c:	08013eed 	.word	0x08013eed
 8013e40:	08013eed 	.word	0x08013eed
 8013e44:	08013eed 	.word	0x08013eed
 8013e48:	08013eed 	.word	0x08013eed
 8013e4c:	08013eed 	.word	0x08013eed
 8013e50:	08013eed 	.word	0x08013eed
 8013e54:	08013eed 	.word	0x08013eed
 8013e58:	08013ecd 	.word	0x08013ecd
 8013e5c:	08013eed 	.word	0x08013eed
 8013e60:	08013eed 	.word	0x08013eed
 8013e64:	08013eed 	.word	0x08013eed
 8013e68:	08013eed 	.word	0x08013eed
 8013e6c:	08013eed 	.word	0x08013eed
 8013e70:	08013eed 	.word	0x08013eed
 8013e74:	08013eed 	.word	0x08013eed
 8013e78:	08013ed5 	.word	0x08013ed5
 8013e7c:	08013eed 	.word	0x08013eed
 8013e80:	08013eed 	.word	0x08013eed
 8013e84:	08013eed 	.word	0x08013eed
 8013e88:	08013eed 	.word	0x08013eed
 8013e8c:	08013eed 	.word	0x08013eed
 8013e90:	08013eed 	.word	0x08013eed
 8013e94:	08013eed 	.word	0x08013eed
 8013e98:	08013edd 	.word	0x08013edd
 8013e9c:	08013eed 	.word	0x08013eed
 8013ea0:	08013eed 	.word	0x08013eed
 8013ea4:	08013eed 	.word	0x08013eed
 8013ea8:	08013eed 	.word	0x08013eed
 8013eac:	08013eed 	.word	0x08013eed
 8013eb0:	08013eed 	.word	0x08013eed
 8013eb4:	08013eed 	.word	0x08013eed
 8013eb8:	08013ee5 	.word	0x08013ee5
 8013ebc:	2301      	movs	r3, #1
 8013ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ec2:	e0d6      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013ec4:	2304      	movs	r3, #4
 8013ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013eca:	e0d2      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013ecc:	2308      	movs	r3, #8
 8013ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ed2:	e0ce      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013ed4:	2310      	movs	r3, #16
 8013ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013eda:	e0ca      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013edc:	2320      	movs	r3, #32
 8013ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ee2:	e0c6      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013ee4:	2340      	movs	r3, #64	; 0x40
 8013ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013eea:	e0c2      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013eec:	2380      	movs	r3, #128	; 0x80
 8013eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ef2:	e0be      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013ef4:	40011400 	.word	0x40011400
 8013ef8:	58024400 	.word	0x58024400
 8013efc:	40007800 	.word	0x40007800
 8013f00:	40007c00 	.word	0x40007c00
 8013f04:	40011800 	.word	0x40011800
 8013f08:	697b      	ldr	r3, [r7, #20]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	4aad      	ldr	r2, [pc, #692]	; (80141c4 <UART_SetConfig+0x900>)
 8013f0e:	4293      	cmp	r3, r2
 8013f10:	d176      	bne.n	8014000 <UART_SetConfig+0x73c>
 8013f12:	4bad      	ldr	r3, [pc, #692]	; (80141c8 <UART_SetConfig+0x904>)
 8013f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013f1a:	2b28      	cmp	r3, #40	; 0x28
 8013f1c:	d86c      	bhi.n	8013ff8 <UART_SetConfig+0x734>
 8013f1e:	a201      	add	r2, pc, #4	; (adr r2, 8013f24 <UART_SetConfig+0x660>)
 8013f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f24:	08013fc9 	.word	0x08013fc9
 8013f28:	08013ff9 	.word	0x08013ff9
 8013f2c:	08013ff9 	.word	0x08013ff9
 8013f30:	08013ff9 	.word	0x08013ff9
 8013f34:	08013ff9 	.word	0x08013ff9
 8013f38:	08013ff9 	.word	0x08013ff9
 8013f3c:	08013ff9 	.word	0x08013ff9
 8013f40:	08013ff9 	.word	0x08013ff9
 8013f44:	08013fd1 	.word	0x08013fd1
 8013f48:	08013ff9 	.word	0x08013ff9
 8013f4c:	08013ff9 	.word	0x08013ff9
 8013f50:	08013ff9 	.word	0x08013ff9
 8013f54:	08013ff9 	.word	0x08013ff9
 8013f58:	08013ff9 	.word	0x08013ff9
 8013f5c:	08013ff9 	.word	0x08013ff9
 8013f60:	08013ff9 	.word	0x08013ff9
 8013f64:	08013fd9 	.word	0x08013fd9
 8013f68:	08013ff9 	.word	0x08013ff9
 8013f6c:	08013ff9 	.word	0x08013ff9
 8013f70:	08013ff9 	.word	0x08013ff9
 8013f74:	08013ff9 	.word	0x08013ff9
 8013f78:	08013ff9 	.word	0x08013ff9
 8013f7c:	08013ff9 	.word	0x08013ff9
 8013f80:	08013ff9 	.word	0x08013ff9
 8013f84:	08013fe1 	.word	0x08013fe1
 8013f88:	08013ff9 	.word	0x08013ff9
 8013f8c:	08013ff9 	.word	0x08013ff9
 8013f90:	08013ff9 	.word	0x08013ff9
 8013f94:	08013ff9 	.word	0x08013ff9
 8013f98:	08013ff9 	.word	0x08013ff9
 8013f9c:	08013ff9 	.word	0x08013ff9
 8013fa0:	08013ff9 	.word	0x08013ff9
 8013fa4:	08013fe9 	.word	0x08013fe9
 8013fa8:	08013ff9 	.word	0x08013ff9
 8013fac:	08013ff9 	.word	0x08013ff9
 8013fb0:	08013ff9 	.word	0x08013ff9
 8013fb4:	08013ff9 	.word	0x08013ff9
 8013fb8:	08013ff9 	.word	0x08013ff9
 8013fbc:	08013ff9 	.word	0x08013ff9
 8013fc0:	08013ff9 	.word	0x08013ff9
 8013fc4:	08013ff1 	.word	0x08013ff1
 8013fc8:	2301      	movs	r3, #1
 8013fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fce:	e050      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013fd0:	2304      	movs	r3, #4
 8013fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fd6:	e04c      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013fd8:	2308      	movs	r3, #8
 8013fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fde:	e048      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013fe0:	2310      	movs	r3, #16
 8013fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fe6:	e044      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013fe8:	2320      	movs	r3, #32
 8013fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fee:	e040      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013ff0:	2340      	movs	r3, #64	; 0x40
 8013ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ff6:	e03c      	b.n	8014072 <UART_SetConfig+0x7ae>
 8013ff8:	2380      	movs	r3, #128	; 0x80
 8013ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ffe:	e038      	b.n	8014072 <UART_SetConfig+0x7ae>
 8014000:	697b      	ldr	r3, [r7, #20]
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	4a71      	ldr	r2, [pc, #452]	; (80141cc <UART_SetConfig+0x908>)
 8014006:	4293      	cmp	r3, r2
 8014008:	d130      	bne.n	801406c <UART_SetConfig+0x7a8>
 801400a:	4b6f      	ldr	r3, [pc, #444]	; (80141c8 <UART_SetConfig+0x904>)
 801400c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801400e:	f003 0307 	and.w	r3, r3, #7
 8014012:	2b05      	cmp	r3, #5
 8014014:	d826      	bhi.n	8014064 <UART_SetConfig+0x7a0>
 8014016:	a201      	add	r2, pc, #4	; (adr r2, 801401c <UART_SetConfig+0x758>)
 8014018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801401c:	08014035 	.word	0x08014035
 8014020:	0801403d 	.word	0x0801403d
 8014024:	08014045 	.word	0x08014045
 8014028:	0801404d 	.word	0x0801404d
 801402c:	08014055 	.word	0x08014055
 8014030:	0801405d 	.word	0x0801405d
 8014034:	2302      	movs	r3, #2
 8014036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801403a:	e01a      	b.n	8014072 <UART_SetConfig+0x7ae>
 801403c:	2304      	movs	r3, #4
 801403e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014042:	e016      	b.n	8014072 <UART_SetConfig+0x7ae>
 8014044:	2308      	movs	r3, #8
 8014046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801404a:	e012      	b.n	8014072 <UART_SetConfig+0x7ae>
 801404c:	2310      	movs	r3, #16
 801404e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014052:	e00e      	b.n	8014072 <UART_SetConfig+0x7ae>
 8014054:	2320      	movs	r3, #32
 8014056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801405a:	e00a      	b.n	8014072 <UART_SetConfig+0x7ae>
 801405c:	2340      	movs	r3, #64	; 0x40
 801405e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014062:	e006      	b.n	8014072 <UART_SetConfig+0x7ae>
 8014064:	2380      	movs	r3, #128	; 0x80
 8014066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801406a:	e002      	b.n	8014072 <UART_SetConfig+0x7ae>
 801406c:	2380      	movs	r3, #128	; 0x80
 801406e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	4a55      	ldr	r2, [pc, #340]	; (80141cc <UART_SetConfig+0x908>)
 8014078:	4293      	cmp	r3, r2
 801407a:	f040 80f8 	bne.w	801426e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801407e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014082:	2b20      	cmp	r3, #32
 8014084:	dc46      	bgt.n	8014114 <UART_SetConfig+0x850>
 8014086:	2b02      	cmp	r3, #2
 8014088:	db75      	blt.n	8014176 <UART_SetConfig+0x8b2>
 801408a:	3b02      	subs	r3, #2
 801408c:	2b1e      	cmp	r3, #30
 801408e:	d872      	bhi.n	8014176 <UART_SetConfig+0x8b2>
 8014090:	a201      	add	r2, pc, #4	; (adr r2, 8014098 <UART_SetConfig+0x7d4>)
 8014092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014096:	bf00      	nop
 8014098:	0801411b 	.word	0x0801411b
 801409c:	08014177 	.word	0x08014177
 80140a0:	08014123 	.word	0x08014123
 80140a4:	08014177 	.word	0x08014177
 80140a8:	08014177 	.word	0x08014177
 80140ac:	08014177 	.word	0x08014177
 80140b0:	08014133 	.word	0x08014133
 80140b4:	08014177 	.word	0x08014177
 80140b8:	08014177 	.word	0x08014177
 80140bc:	08014177 	.word	0x08014177
 80140c0:	08014177 	.word	0x08014177
 80140c4:	08014177 	.word	0x08014177
 80140c8:	08014177 	.word	0x08014177
 80140cc:	08014177 	.word	0x08014177
 80140d0:	08014143 	.word	0x08014143
 80140d4:	08014177 	.word	0x08014177
 80140d8:	08014177 	.word	0x08014177
 80140dc:	08014177 	.word	0x08014177
 80140e0:	08014177 	.word	0x08014177
 80140e4:	08014177 	.word	0x08014177
 80140e8:	08014177 	.word	0x08014177
 80140ec:	08014177 	.word	0x08014177
 80140f0:	08014177 	.word	0x08014177
 80140f4:	08014177 	.word	0x08014177
 80140f8:	08014177 	.word	0x08014177
 80140fc:	08014177 	.word	0x08014177
 8014100:	08014177 	.word	0x08014177
 8014104:	08014177 	.word	0x08014177
 8014108:	08014177 	.word	0x08014177
 801410c:	08014177 	.word	0x08014177
 8014110:	08014169 	.word	0x08014169
 8014114:	2b40      	cmp	r3, #64	; 0x40
 8014116:	d02a      	beq.n	801416e <UART_SetConfig+0x8aa>
 8014118:	e02d      	b.n	8014176 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801411a:	f7fb fcdb 	bl	800fad4 <HAL_RCCEx_GetD3PCLK1Freq>
 801411e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014120:	e02f      	b.n	8014182 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014126:	4618      	mov	r0, r3
 8014128:	f7fb fcea 	bl	800fb00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801412e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014130:	e027      	b.n	8014182 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014132:	f107 0318 	add.w	r3, r7, #24
 8014136:	4618      	mov	r0, r3
 8014138:	f7fb fe36 	bl	800fda8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014140:	e01f      	b.n	8014182 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014142:	4b21      	ldr	r3, [pc, #132]	; (80141c8 <UART_SetConfig+0x904>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	f003 0320 	and.w	r3, r3, #32
 801414a:	2b00      	cmp	r3, #0
 801414c:	d009      	beq.n	8014162 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801414e:	4b1e      	ldr	r3, [pc, #120]	; (80141c8 <UART_SetConfig+0x904>)
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	08db      	lsrs	r3, r3, #3
 8014154:	f003 0303 	and.w	r3, r3, #3
 8014158:	4a1d      	ldr	r2, [pc, #116]	; (80141d0 <UART_SetConfig+0x90c>)
 801415a:	fa22 f303 	lsr.w	r3, r2, r3
 801415e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014160:	e00f      	b.n	8014182 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8014162:	4b1b      	ldr	r3, [pc, #108]	; (80141d0 <UART_SetConfig+0x90c>)
 8014164:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014166:	e00c      	b.n	8014182 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014168:	4b1a      	ldr	r3, [pc, #104]	; (80141d4 <UART_SetConfig+0x910>)
 801416a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801416c:	e009      	b.n	8014182 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801416e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014174:	e005      	b.n	8014182 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8014176:	2300      	movs	r3, #0
 8014178:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801417a:	2301      	movs	r3, #1
 801417c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014180:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014184:	2b00      	cmp	r3, #0
 8014186:	f000 81ee 	beq.w	8014566 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801418a:	697b      	ldr	r3, [r7, #20]
 801418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801418e:	4a12      	ldr	r2, [pc, #72]	; (80141d8 <UART_SetConfig+0x914>)
 8014190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014194:	461a      	mov	r2, r3
 8014196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014198:	fbb3 f3f2 	udiv	r3, r3, r2
 801419c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801419e:	697b      	ldr	r3, [r7, #20]
 80141a0:	685a      	ldr	r2, [r3, #4]
 80141a2:	4613      	mov	r3, r2
 80141a4:	005b      	lsls	r3, r3, #1
 80141a6:	4413      	add	r3, r2
 80141a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141aa:	429a      	cmp	r2, r3
 80141ac:	d305      	bcc.n	80141ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80141ae:	697b      	ldr	r3, [r7, #20]
 80141b0:	685b      	ldr	r3, [r3, #4]
 80141b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80141b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141b6:	429a      	cmp	r2, r3
 80141b8:	d910      	bls.n	80141dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80141ba:	2301      	movs	r3, #1
 80141bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80141c0:	e1d1      	b.n	8014566 <UART_SetConfig+0xca2>
 80141c2:	bf00      	nop
 80141c4:	40011c00 	.word	0x40011c00
 80141c8:	58024400 	.word	0x58024400
 80141cc:	58000c00 	.word	0x58000c00
 80141d0:	03d09000 	.word	0x03d09000
 80141d4:	003d0900 	.word	0x003d0900
 80141d8:	08016bec 	.word	0x08016bec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80141dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141de:	2200      	movs	r2, #0
 80141e0:	60bb      	str	r3, [r7, #8]
 80141e2:	60fa      	str	r2, [r7, #12]
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141e8:	4ac0      	ldr	r2, [pc, #768]	; (80144ec <UART_SetConfig+0xc28>)
 80141ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80141ee:	b29b      	uxth	r3, r3
 80141f0:	2200      	movs	r2, #0
 80141f2:	603b      	str	r3, [r7, #0]
 80141f4:	607a      	str	r2, [r7, #4]
 80141f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80141fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80141fe:	f7ec f887 	bl	8000310 <__aeabi_uldivmod>
 8014202:	4602      	mov	r2, r0
 8014204:	460b      	mov	r3, r1
 8014206:	4610      	mov	r0, r2
 8014208:	4619      	mov	r1, r3
 801420a:	f04f 0200 	mov.w	r2, #0
 801420e:	f04f 0300 	mov.w	r3, #0
 8014212:	020b      	lsls	r3, r1, #8
 8014214:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014218:	0202      	lsls	r2, r0, #8
 801421a:	6979      	ldr	r1, [r7, #20]
 801421c:	6849      	ldr	r1, [r1, #4]
 801421e:	0849      	lsrs	r1, r1, #1
 8014220:	2000      	movs	r0, #0
 8014222:	460c      	mov	r4, r1
 8014224:	4605      	mov	r5, r0
 8014226:	eb12 0804 	adds.w	r8, r2, r4
 801422a:	eb43 0905 	adc.w	r9, r3, r5
 801422e:	697b      	ldr	r3, [r7, #20]
 8014230:	685b      	ldr	r3, [r3, #4]
 8014232:	2200      	movs	r2, #0
 8014234:	469a      	mov	sl, r3
 8014236:	4693      	mov	fp, r2
 8014238:	4652      	mov	r2, sl
 801423a:	465b      	mov	r3, fp
 801423c:	4640      	mov	r0, r8
 801423e:	4649      	mov	r1, r9
 8014240:	f7ec f866 	bl	8000310 <__aeabi_uldivmod>
 8014244:	4602      	mov	r2, r0
 8014246:	460b      	mov	r3, r1
 8014248:	4613      	mov	r3, r2
 801424a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801424e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014252:	d308      	bcc.n	8014266 <UART_SetConfig+0x9a2>
 8014254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801425a:	d204      	bcs.n	8014266 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801425c:	697b      	ldr	r3, [r7, #20]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014262:	60da      	str	r2, [r3, #12]
 8014264:	e17f      	b.n	8014566 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8014266:	2301      	movs	r3, #1
 8014268:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801426c:	e17b      	b.n	8014566 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	69db      	ldr	r3, [r3, #28]
 8014272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014276:	f040 80bd 	bne.w	80143f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801427a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801427e:	2b20      	cmp	r3, #32
 8014280:	dc48      	bgt.n	8014314 <UART_SetConfig+0xa50>
 8014282:	2b00      	cmp	r3, #0
 8014284:	db7b      	blt.n	801437e <UART_SetConfig+0xaba>
 8014286:	2b20      	cmp	r3, #32
 8014288:	d879      	bhi.n	801437e <UART_SetConfig+0xaba>
 801428a:	a201      	add	r2, pc, #4	; (adr r2, 8014290 <UART_SetConfig+0x9cc>)
 801428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014290:	0801431b 	.word	0x0801431b
 8014294:	08014323 	.word	0x08014323
 8014298:	0801437f 	.word	0x0801437f
 801429c:	0801437f 	.word	0x0801437f
 80142a0:	0801432b 	.word	0x0801432b
 80142a4:	0801437f 	.word	0x0801437f
 80142a8:	0801437f 	.word	0x0801437f
 80142ac:	0801437f 	.word	0x0801437f
 80142b0:	0801433b 	.word	0x0801433b
 80142b4:	0801437f 	.word	0x0801437f
 80142b8:	0801437f 	.word	0x0801437f
 80142bc:	0801437f 	.word	0x0801437f
 80142c0:	0801437f 	.word	0x0801437f
 80142c4:	0801437f 	.word	0x0801437f
 80142c8:	0801437f 	.word	0x0801437f
 80142cc:	0801437f 	.word	0x0801437f
 80142d0:	0801434b 	.word	0x0801434b
 80142d4:	0801437f 	.word	0x0801437f
 80142d8:	0801437f 	.word	0x0801437f
 80142dc:	0801437f 	.word	0x0801437f
 80142e0:	0801437f 	.word	0x0801437f
 80142e4:	0801437f 	.word	0x0801437f
 80142e8:	0801437f 	.word	0x0801437f
 80142ec:	0801437f 	.word	0x0801437f
 80142f0:	0801437f 	.word	0x0801437f
 80142f4:	0801437f 	.word	0x0801437f
 80142f8:	0801437f 	.word	0x0801437f
 80142fc:	0801437f 	.word	0x0801437f
 8014300:	0801437f 	.word	0x0801437f
 8014304:	0801437f 	.word	0x0801437f
 8014308:	0801437f 	.word	0x0801437f
 801430c:	0801437f 	.word	0x0801437f
 8014310:	08014371 	.word	0x08014371
 8014314:	2b40      	cmp	r3, #64	; 0x40
 8014316:	d02e      	beq.n	8014376 <UART_SetConfig+0xab2>
 8014318:	e031      	b.n	801437e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801431a:	f7fa f88f 	bl	800e43c <HAL_RCC_GetPCLK1Freq>
 801431e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014320:	e033      	b.n	801438a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014322:	f7fa f8a1 	bl	800e468 <HAL_RCC_GetPCLK2Freq>
 8014326:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014328:	e02f      	b.n	801438a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801432a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801432e:	4618      	mov	r0, r3
 8014330:	f7fb fbe6 	bl	800fb00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014338:	e027      	b.n	801438a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801433a:	f107 0318 	add.w	r3, r7, #24
 801433e:	4618      	mov	r0, r3
 8014340:	f7fb fd32 	bl	800fda8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014344:	69fb      	ldr	r3, [r7, #28]
 8014346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014348:	e01f      	b.n	801438a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801434a:	4b69      	ldr	r3, [pc, #420]	; (80144f0 <UART_SetConfig+0xc2c>)
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	f003 0320 	and.w	r3, r3, #32
 8014352:	2b00      	cmp	r3, #0
 8014354:	d009      	beq.n	801436a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014356:	4b66      	ldr	r3, [pc, #408]	; (80144f0 <UART_SetConfig+0xc2c>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	08db      	lsrs	r3, r3, #3
 801435c:	f003 0303 	and.w	r3, r3, #3
 8014360:	4a64      	ldr	r2, [pc, #400]	; (80144f4 <UART_SetConfig+0xc30>)
 8014362:	fa22 f303 	lsr.w	r3, r2, r3
 8014366:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014368:	e00f      	b.n	801438a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801436a:	4b62      	ldr	r3, [pc, #392]	; (80144f4 <UART_SetConfig+0xc30>)
 801436c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801436e:	e00c      	b.n	801438a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014370:	4b61      	ldr	r3, [pc, #388]	; (80144f8 <UART_SetConfig+0xc34>)
 8014372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014374:	e009      	b.n	801438a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801437a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801437c:	e005      	b.n	801438a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801437e:	2300      	movs	r3, #0
 8014380:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014382:	2301      	movs	r3, #1
 8014384:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801438a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801438c:	2b00      	cmp	r3, #0
 801438e:	f000 80ea 	beq.w	8014566 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014392:	697b      	ldr	r3, [r7, #20]
 8014394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014396:	4a55      	ldr	r2, [pc, #340]	; (80144ec <UART_SetConfig+0xc28>)
 8014398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801439c:	461a      	mov	r2, r3
 801439e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80143a4:	005a      	lsls	r2, r3, #1
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	685b      	ldr	r3, [r3, #4]
 80143aa:	085b      	lsrs	r3, r3, #1
 80143ac:	441a      	add	r2, r3
 80143ae:	697b      	ldr	r3, [r7, #20]
 80143b0:	685b      	ldr	r3, [r3, #4]
 80143b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80143b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80143b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ba:	2b0f      	cmp	r3, #15
 80143bc:	d916      	bls.n	80143ec <UART_SetConfig+0xb28>
 80143be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80143c4:	d212      	bcs.n	80143ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80143c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c8:	b29b      	uxth	r3, r3
 80143ca:	f023 030f 	bic.w	r3, r3, #15
 80143ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80143d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143d2:	085b      	lsrs	r3, r3, #1
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	f003 0307 	and.w	r3, r3, #7
 80143da:	b29a      	uxth	r2, r3
 80143dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80143de:	4313      	orrs	r3, r2
 80143e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80143e8:	60da      	str	r2, [r3, #12]
 80143ea:	e0bc      	b.n	8014566 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80143ec:	2301      	movs	r3, #1
 80143ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80143f2:	e0b8      	b.n	8014566 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80143f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80143f8:	2b20      	cmp	r3, #32
 80143fa:	dc4b      	bgt.n	8014494 <UART_SetConfig+0xbd0>
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	f2c0 8087 	blt.w	8014510 <UART_SetConfig+0xc4c>
 8014402:	2b20      	cmp	r3, #32
 8014404:	f200 8084 	bhi.w	8014510 <UART_SetConfig+0xc4c>
 8014408:	a201      	add	r2, pc, #4	; (adr r2, 8014410 <UART_SetConfig+0xb4c>)
 801440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801440e:	bf00      	nop
 8014410:	0801449b 	.word	0x0801449b
 8014414:	080144a3 	.word	0x080144a3
 8014418:	08014511 	.word	0x08014511
 801441c:	08014511 	.word	0x08014511
 8014420:	080144ab 	.word	0x080144ab
 8014424:	08014511 	.word	0x08014511
 8014428:	08014511 	.word	0x08014511
 801442c:	08014511 	.word	0x08014511
 8014430:	080144bb 	.word	0x080144bb
 8014434:	08014511 	.word	0x08014511
 8014438:	08014511 	.word	0x08014511
 801443c:	08014511 	.word	0x08014511
 8014440:	08014511 	.word	0x08014511
 8014444:	08014511 	.word	0x08014511
 8014448:	08014511 	.word	0x08014511
 801444c:	08014511 	.word	0x08014511
 8014450:	080144cb 	.word	0x080144cb
 8014454:	08014511 	.word	0x08014511
 8014458:	08014511 	.word	0x08014511
 801445c:	08014511 	.word	0x08014511
 8014460:	08014511 	.word	0x08014511
 8014464:	08014511 	.word	0x08014511
 8014468:	08014511 	.word	0x08014511
 801446c:	08014511 	.word	0x08014511
 8014470:	08014511 	.word	0x08014511
 8014474:	08014511 	.word	0x08014511
 8014478:	08014511 	.word	0x08014511
 801447c:	08014511 	.word	0x08014511
 8014480:	08014511 	.word	0x08014511
 8014484:	08014511 	.word	0x08014511
 8014488:	08014511 	.word	0x08014511
 801448c:	08014511 	.word	0x08014511
 8014490:	08014503 	.word	0x08014503
 8014494:	2b40      	cmp	r3, #64	; 0x40
 8014496:	d037      	beq.n	8014508 <UART_SetConfig+0xc44>
 8014498:	e03a      	b.n	8014510 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801449a:	f7f9 ffcf 	bl	800e43c <HAL_RCC_GetPCLK1Freq>
 801449e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80144a0:	e03c      	b.n	801451c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80144a2:	f7f9 ffe1 	bl	800e468 <HAL_RCC_GetPCLK2Freq>
 80144a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80144a8:	e038      	b.n	801451c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80144aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80144ae:	4618      	mov	r0, r3
 80144b0:	f7fb fb26 	bl	800fb00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80144b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80144b8:	e030      	b.n	801451c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80144ba:	f107 0318 	add.w	r3, r7, #24
 80144be:	4618      	mov	r0, r3
 80144c0:	f7fb fc72 	bl	800fda8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80144c4:	69fb      	ldr	r3, [r7, #28]
 80144c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80144c8:	e028      	b.n	801451c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80144ca:	4b09      	ldr	r3, [pc, #36]	; (80144f0 <UART_SetConfig+0xc2c>)
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	f003 0320 	and.w	r3, r3, #32
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d012      	beq.n	80144fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80144d6:	4b06      	ldr	r3, [pc, #24]	; (80144f0 <UART_SetConfig+0xc2c>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	08db      	lsrs	r3, r3, #3
 80144dc:	f003 0303 	and.w	r3, r3, #3
 80144e0:	4a04      	ldr	r2, [pc, #16]	; (80144f4 <UART_SetConfig+0xc30>)
 80144e2:	fa22 f303 	lsr.w	r3, r2, r3
 80144e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80144e8:	e018      	b.n	801451c <UART_SetConfig+0xc58>
 80144ea:	bf00      	nop
 80144ec:	08016bec 	.word	0x08016bec
 80144f0:	58024400 	.word	0x58024400
 80144f4:	03d09000 	.word	0x03d09000
 80144f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80144fc:	4b24      	ldr	r3, [pc, #144]	; (8014590 <UART_SetConfig+0xccc>)
 80144fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014500:	e00c      	b.n	801451c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014502:	4b24      	ldr	r3, [pc, #144]	; (8014594 <UART_SetConfig+0xcd0>)
 8014504:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014506:	e009      	b.n	801451c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014508:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801450c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801450e:	e005      	b.n	801451c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8014510:	2300      	movs	r3, #0
 8014512:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014514:	2301      	movs	r3, #1
 8014516:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801451a:	bf00      	nop
    }

    if (pclk != 0U)
 801451c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801451e:	2b00      	cmp	r3, #0
 8014520:	d021      	beq.n	8014566 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014526:	4a1c      	ldr	r2, [pc, #112]	; (8014598 <UART_SetConfig+0xcd4>)
 8014528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801452c:	461a      	mov	r2, r3
 801452e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014530:	fbb3 f2f2 	udiv	r2, r3, r2
 8014534:	697b      	ldr	r3, [r7, #20]
 8014536:	685b      	ldr	r3, [r3, #4]
 8014538:	085b      	lsrs	r3, r3, #1
 801453a:	441a      	add	r2, r3
 801453c:	697b      	ldr	r3, [r7, #20]
 801453e:	685b      	ldr	r3, [r3, #4]
 8014540:	fbb2 f3f3 	udiv	r3, r2, r3
 8014544:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014548:	2b0f      	cmp	r3, #15
 801454a:	d909      	bls.n	8014560 <UART_SetConfig+0xc9c>
 801454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801454e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014552:	d205      	bcs.n	8014560 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014556:	b29a      	uxth	r2, r3
 8014558:	697b      	ldr	r3, [r7, #20]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	60da      	str	r2, [r3, #12]
 801455e:	e002      	b.n	8014566 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8014560:	2301      	movs	r3, #1
 8014562:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	2201      	movs	r2, #1
 801456a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	2201      	movs	r2, #1
 8014572:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014576:	697b      	ldr	r3, [r7, #20]
 8014578:	2200      	movs	r2, #0
 801457a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801457c:	697b      	ldr	r3, [r7, #20]
 801457e:	2200      	movs	r2, #0
 8014580:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8014582:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8014586:	4618      	mov	r0, r3
 8014588:	3748      	adds	r7, #72	; 0x48
 801458a:	46bd      	mov	sp, r7
 801458c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014590:	03d09000 	.word	0x03d09000
 8014594:	003d0900 	.word	0x003d0900
 8014598:	08016bec 	.word	0x08016bec

0801459c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801459c:	b480      	push	{r7}
 801459e:	b083      	sub	sp, #12
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145a8:	f003 0301 	and.w	r3, r3, #1
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d00a      	beq.n	80145c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	430a      	orrs	r2, r1
 80145c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145ca:	f003 0302 	and.w	r3, r3, #2
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d00a      	beq.n	80145e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	430a      	orrs	r2, r1
 80145e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145ec:	f003 0304 	and.w	r3, r3, #4
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d00a      	beq.n	801460a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	685b      	ldr	r3, [r3, #4]
 80145fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	430a      	orrs	r2, r1
 8014608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801460e:	f003 0308 	and.w	r3, r3, #8
 8014612:	2b00      	cmp	r3, #0
 8014614:	d00a      	beq.n	801462c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	685b      	ldr	r3, [r3, #4]
 801461c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	430a      	orrs	r2, r1
 801462a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014630:	f003 0310 	and.w	r3, r3, #16
 8014634:	2b00      	cmp	r3, #0
 8014636:	d00a      	beq.n	801464e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	689b      	ldr	r3, [r3, #8]
 801463e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	430a      	orrs	r2, r1
 801464c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014652:	f003 0320 	and.w	r3, r3, #32
 8014656:	2b00      	cmp	r3, #0
 8014658:	d00a      	beq.n	8014670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	689b      	ldr	r3, [r3, #8]
 8014660:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	430a      	orrs	r2, r1
 801466e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014678:	2b00      	cmp	r3, #0
 801467a:	d01a      	beq.n	80146b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	685b      	ldr	r3, [r3, #4]
 8014682:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	430a      	orrs	r2, r1
 8014690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801469a:	d10a      	bne.n	80146b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	685b      	ldr	r3, [r3, #4]
 80146a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	430a      	orrs	r2, r1
 80146b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d00a      	beq.n	80146d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	685b      	ldr	r3, [r3, #4]
 80146c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	430a      	orrs	r2, r1
 80146d2:	605a      	str	r2, [r3, #4]
  }
}
 80146d4:	bf00      	nop
 80146d6:	370c      	adds	r7, #12
 80146d8:	46bd      	mov	sp, r7
 80146da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146de:	4770      	bx	lr

080146e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b086      	sub	sp, #24
 80146e4:	af02      	add	r7, sp, #8
 80146e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	2200      	movs	r2, #0
 80146ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80146f0:	f7f1 ff14 	bl	800651c <HAL_GetTick>
 80146f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	f003 0308 	and.w	r3, r3, #8
 8014700:	2b08      	cmp	r3, #8
 8014702:	d10e      	bne.n	8014722 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014704:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014708:	9300      	str	r3, [sp, #0]
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	2200      	movs	r2, #0
 801470e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014712:	6878      	ldr	r0, [r7, #4]
 8014714:	f000 f82f 	bl	8014776 <UART_WaitOnFlagUntilTimeout>
 8014718:	4603      	mov	r3, r0
 801471a:	2b00      	cmp	r3, #0
 801471c:	d001      	beq.n	8014722 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801471e:	2303      	movs	r3, #3
 8014720:	e025      	b.n	801476e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	f003 0304 	and.w	r3, r3, #4
 801472c:	2b04      	cmp	r3, #4
 801472e:	d10e      	bne.n	801474e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014734:	9300      	str	r3, [sp, #0]
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	2200      	movs	r2, #0
 801473a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f000 f819 	bl	8014776 <UART_WaitOnFlagUntilTimeout>
 8014744:	4603      	mov	r3, r0
 8014746:	2b00      	cmp	r3, #0
 8014748:	d001      	beq.n	801474e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801474a:	2303      	movs	r3, #3
 801474c:	e00f      	b.n	801476e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	2220      	movs	r2, #32
 8014752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	2220      	movs	r2, #32
 801475a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	2200      	movs	r2, #0
 8014762:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2200      	movs	r2, #0
 8014768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801476c:	2300      	movs	r3, #0
}
 801476e:	4618      	mov	r0, r3
 8014770:	3710      	adds	r7, #16
 8014772:	46bd      	mov	sp, r7
 8014774:	bd80      	pop	{r7, pc}

08014776 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014776:	b580      	push	{r7, lr}
 8014778:	b09c      	sub	sp, #112	; 0x70
 801477a:	af00      	add	r7, sp, #0
 801477c:	60f8      	str	r0, [r7, #12]
 801477e:	60b9      	str	r1, [r7, #8]
 8014780:	603b      	str	r3, [r7, #0]
 8014782:	4613      	mov	r3, r2
 8014784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014786:	e0a9      	b.n	80148dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801478e:	f000 80a5 	beq.w	80148dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014792:	f7f1 fec3 	bl	800651c <HAL_GetTick>
 8014796:	4602      	mov	r2, r0
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	1ad3      	subs	r3, r2, r3
 801479c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801479e:	429a      	cmp	r2, r3
 80147a0:	d302      	bcc.n	80147a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80147a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d140      	bne.n	801482a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147b0:	e853 3f00 	ldrex	r3, [r3]
 80147b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80147b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80147bc:	667b      	str	r3, [r7, #100]	; 0x64
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	461a      	mov	r2, r3
 80147c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80147c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80147c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80147cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80147ce:	e841 2300 	strex	r3, r2, [r1]
 80147d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80147d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d1e6      	bne.n	80147a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	3308      	adds	r3, #8
 80147e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147e4:	e853 3f00 	ldrex	r3, [r3]
 80147e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80147ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ec:	f023 0301 	bic.w	r3, r3, #1
 80147f0:	663b      	str	r3, [r7, #96]	; 0x60
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	3308      	adds	r3, #8
 80147f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80147fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80147fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014802:	e841 2300 	strex	r3, r2, [r1]
 8014806:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801480a:	2b00      	cmp	r3, #0
 801480c:	d1e5      	bne.n	80147da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	2220      	movs	r2, #32
 8014812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	2220      	movs	r2, #32
 801481a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	2200      	movs	r2, #0
 8014822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8014826:	2303      	movs	r3, #3
 8014828:	e069      	b.n	80148fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	f003 0304 	and.w	r3, r3, #4
 8014834:	2b00      	cmp	r3, #0
 8014836:	d051      	beq.n	80148dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	69db      	ldr	r3, [r3, #28]
 801483e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014846:	d149      	bne.n	80148dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014850:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801485a:	e853 3f00 	ldrex	r3, [r3]
 801485e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014862:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014866:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	461a      	mov	r2, r3
 801486e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014870:	637b      	str	r3, [r7, #52]	; 0x34
 8014872:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014878:	e841 2300 	strex	r3, r2, [r1]
 801487c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014880:	2b00      	cmp	r3, #0
 8014882:	d1e6      	bne.n	8014852 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	3308      	adds	r3, #8
 801488a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801488c:	697b      	ldr	r3, [r7, #20]
 801488e:	e853 3f00 	ldrex	r3, [r3]
 8014892:	613b      	str	r3, [r7, #16]
   return(result);
 8014894:	693b      	ldr	r3, [r7, #16]
 8014896:	f023 0301 	bic.w	r3, r3, #1
 801489a:	66bb      	str	r3, [r7, #104]	; 0x68
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	3308      	adds	r3, #8
 80148a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80148a4:	623a      	str	r2, [r7, #32]
 80148a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148a8:	69f9      	ldr	r1, [r7, #28]
 80148aa:	6a3a      	ldr	r2, [r7, #32]
 80148ac:	e841 2300 	strex	r3, r2, [r1]
 80148b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80148b2:	69bb      	ldr	r3, [r7, #24]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d1e5      	bne.n	8014884 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	2220      	movs	r2, #32
 80148bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	2220      	movs	r2, #32
 80148c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	2220      	movs	r2, #32
 80148cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	2200      	movs	r2, #0
 80148d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80148d8:	2303      	movs	r3, #3
 80148da:	e010      	b.n	80148fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	69da      	ldr	r2, [r3, #28]
 80148e2:	68bb      	ldr	r3, [r7, #8]
 80148e4:	4013      	ands	r3, r2
 80148e6:	68ba      	ldr	r2, [r7, #8]
 80148e8:	429a      	cmp	r2, r3
 80148ea:	bf0c      	ite	eq
 80148ec:	2301      	moveq	r3, #1
 80148ee:	2300      	movne	r3, #0
 80148f0:	b2db      	uxtb	r3, r3
 80148f2:	461a      	mov	r2, r3
 80148f4:	79fb      	ldrb	r3, [r7, #7]
 80148f6:	429a      	cmp	r2, r3
 80148f8:	f43f af46 	beq.w	8014788 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80148fc:	2300      	movs	r3, #0
}
 80148fe:	4618      	mov	r0, r3
 8014900:	3770      	adds	r7, #112	; 0x70
 8014902:	46bd      	mov	sp, r7
 8014904:	bd80      	pop	{r7, pc}
	...

08014908 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014908:	b480      	push	{r7}
 801490a:	b0a3      	sub	sp, #140	; 0x8c
 801490c:	af00      	add	r7, sp, #0
 801490e:	60f8      	str	r0, [r7, #12]
 8014910:	60b9      	str	r1, [r7, #8]
 8014912:	4613      	mov	r3, r2
 8014914:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	68ba      	ldr	r2, [r7, #8]
 801491a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	88fa      	ldrh	r2, [r7, #6]
 8014920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	88fa      	ldrh	r2, [r7, #6]
 8014928:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	2200      	movs	r2, #0
 8014930:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	689b      	ldr	r3, [r3, #8]
 8014936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801493a:	d10e      	bne.n	801495a <UART_Start_Receive_IT+0x52>
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	691b      	ldr	r3, [r3, #16]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d105      	bne.n	8014950 <UART_Start_Receive_IT+0x48>
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	f240 12ff 	movw	r2, #511	; 0x1ff
 801494a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801494e:	e02d      	b.n	80149ac <UART_Start_Receive_IT+0xa4>
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	22ff      	movs	r2, #255	; 0xff
 8014954:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014958:	e028      	b.n	80149ac <UART_Start_Receive_IT+0xa4>
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	689b      	ldr	r3, [r3, #8]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d10d      	bne.n	801497e <UART_Start_Receive_IT+0x76>
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	691b      	ldr	r3, [r3, #16]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d104      	bne.n	8014974 <UART_Start_Receive_IT+0x6c>
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	22ff      	movs	r2, #255	; 0xff
 801496e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014972:	e01b      	b.n	80149ac <UART_Start_Receive_IT+0xa4>
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	227f      	movs	r2, #127	; 0x7f
 8014978:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801497c:	e016      	b.n	80149ac <UART_Start_Receive_IT+0xa4>
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	689b      	ldr	r3, [r3, #8]
 8014982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014986:	d10d      	bne.n	80149a4 <UART_Start_Receive_IT+0x9c>
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	691b      	ldr	r3, [r3, #16]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d104      	bne.n	801499a <UART_Start_Receive_IT+0x92>
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	227f      	movs	r2, #127	; 0x7f
 8014994:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014998:	e008      	b.n	80149ac <UART_Start_Receive_IT+0xa4>
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	223f      	movs	r2, #63	; 0x3f
 801499e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80149a2:	e003      	b.n	80149ac <UART_Start_Receive_IT+0xa4>
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	2200      	movs	r2, #0
 80149a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	2200      	movs	r2, #0
 80149b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	2222      	movs	r2, #34	; 0x22
 80149b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	3308      	adds	r3, #8
 80149c2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80149c6:	e853 3f00 	ldrex	r3, [r3]
 80149ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80149cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80149ce:	f043 0301 	orr.w	r3, r3, #1
 80149d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	3308      	adds	r3, #8
 80149dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80149e0:	673a      	str	r2, [r7, #112]	; 0x70
 80149e2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80149e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80149e8:	e841 2300 	strex	r3, r2, [r1]
 80149ec:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80149ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d1e3      	bne.n	80149bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80149f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80149fc:	d153      	bne.n	8014aa6 <UART_Start_Receive_IT+0x19e>
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014a04:	88fa      	ldrh	r2, [r7, #6]
 8014a06:	429a      	cmp	r2, r3
 8014a08:	d34d      	bcc.n	8014aa6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	689b      	ldr	r3, [r3, #8]
 8014a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014a12:	d107      	bne.n	8014a24 <UART_Start_Receive_IT+0x11c>
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	691b      	ldr	r3, [r3, #16]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d103      	bne.n	8014a24 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	4a4b      	ldr	r2, [pc, #300]	; (8014b4c <UART_Start_Receive_IT+0x244>)
 8014a20:	671a      	str	r2, [r3, #112]	; 0x70
 8014a22:	e002      	b.n	8014a2a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	4a4a      	ldr	r2, [pc, #296]	; (8014b50 <UART_Start_Receive_IT+0x248>)
 8014a28:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	691b      	ldr	r3, [r3, #16]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d01a      	beq.n	8014a70 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a42:	e853 3f00 	ldrex	r3, [r3]
 8014a46:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014a4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	461a      	mov	r2, r3
 8014a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014a5e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014a62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014a64:	e841 2300 	strex	r3, r2, [r1]
 8014a68:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d1e4      	bne.n	8014a3a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	3308      	adds	r3, #8
 8014a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a7a:	e853 3f00 	ldrex	r3, [r3]
 8014a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014a86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	3308      	adds	r3, #8
 8014a8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014a90:	64ba      	str	r2, [r7, #72]	; 0x48
 8014a92:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014a98:	e841 2300 	strex	r3, r2, [r1]
 8014a9c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d1e5      	bne.n	8014a70 <UART_Start_Receive_IT+0x168>
 8014aa4:	e04a      	b.n	8014b3c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	689b      	ldr	r3, [r3, #8]
 8014aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014aae:	d107      	bne.n	8014ac0 <UART_Start_Receive_IT+0x1b8>
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	691b      	ldr	r3, [r3, #16]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d103      	bne.n	8014ac0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	4a26      	ldr	r2, [pc, #152]	; (8014b54 <UART_Start_Receive_IT+0x24c>)
 8014abc:	671a      	str	r2, [r3, #112]	; 0x70
 8014abe:	e002      	b.n	8014ac6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	4a25      	ldr	r2, [pc, #148]	; (8014b58 <UART_Start_Receive_IT+0x250>)
 8014ac4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2200      	movs	r2, #0
 8014aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	691b      	ldr	r3, [r3, #16]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d019      	beq.n	8014b0a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ade:	e853 3f00 	ldrex	r3, [r3]
 8014ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8014aea:	677b      	str	r3, [r7, #116]	; 0x74
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	461a      	mov	r2, r3
 8014af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014af4:	637b      	str	r3, [r7, #52]	; 0x34
 8014af6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014af8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014afc:	e841 2300 	strex	r3, r2, [r1]
 8014b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d1e6      	bne.n	8014ad6 <UART_Start_Receive_IT+0x1ce>
 8014b08:	e018      	b.n	8014b3c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b10:	697b      	ldr	r3, [r7, #20]
 8014b12:	e853 3f00 	ldrex	r3, [r3]
 8014b16:	613b      	str	r3, [r7, #16]
   return(result);
 8014b18:	693b      	ldr	r3, [r7, #16]
 8014b1a:	f043 0320 	orr.w	r3, r3, #32
 8014b1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	461a      	mov	r2, r3
 8014b26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014b28:	623b      	str	r3, [r7, #32]
 8014b2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b2c:	69f9      	ldr	r1, [r7, #28]
 8014b2e:	6a3a      	ldr	r2, [r7, #32]
 8014b30:	e841 2300 	strex	r3, r2, [r1]
 8014b34:	61bb      	str	r3, [r7, #24]
   return(result);
 8014b36:	69bb      	ldr	r3, [r7, #24]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d1e6      	bne.n	8014b0a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8014b3c:	2300      	movs	r3, #0
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	378c      	adds	r7, #140	; 0x8c
 8014b42:	46bd      	mov	sp, r7
 8014b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b48:	4770      	bx	lr
 8014b4a:	bf00      	nop
 8014b4c:	080155a9 	.word	0x080155a9
 8014b50:	080152b1 	.word	0x080152b1
 8014b54:	0801514f 	.word	0x0801514f
 8014b58:	08014fef 	.word	0x08014fef

08014b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014b5c:	b480      	push	{r7}
 8014b5e:	b095      	sub	sp, #84	; 0x54
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b6c:	e853 3f00 	ldrex	r3, [r3]
 8014b70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	461a      	mov	r2, r3
 8014b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b82:	643b      	str	r3, [r7, #64]	; 0x40
 8014b84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014b88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014b8a:	e841 2300 	strex	r3, r2, [r1]
 8014b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d1e6      	bne.n	8014b64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	3308      	adds	r3, #8
 8014b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b9e:	6a3b      	ldr	r3, [r7, #32]
 8014ba0:	e853 3f00 	ldrex	r3, [r3]
 8014ba4:	61fb      	str	r3, [r7, #28]
   return(result);
 8014ba6:	69fa      	ldr	r2, [r7, #28]
 8014ba8:	4b1e      	ldr	r3, [pc, #120]	; (8014c24 <UART_EndRxTransfer+0xc8>)
 8014baa:	4013      	ands	r3, r2
 8014bac:	64bb      	str	r3, [r7, #72]	; 0x48
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	3308      	adds	r3, #8
 8014bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014bbe:	e841 2300 	strex	r3, r2, [r1]
 8014bc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d1e5      	bne.n	8014b96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bce:	2b01      	cmp	r3, #1
 8014bd0:	d118      	bne.n	8014c04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	e853 3f00 	ldrex	r3, [r3]
 8014bde:	60bb      	str	r3, [r7, #8]
   return(result);
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	f023 0310 	bic.w	r3, r3, #16
 8014be6:	647b      	str	r3, [r7, #68]	; 0x44
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	461a      	mov	r2, r3
 8014bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bf0:	61bb      	str	r3, [r7, #24]
 8014bf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bf4:	6979      	ldr	r1, [r7, #20]
 8014bf6:	69ba      	ldr	r2, [r7, #24]
 8014bf8:	e841 2300 	strex	r3, r2, [r1]
 8014bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8014bfe:	693b      	ldr	r3, [r7, #16]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d1e6      	bne.n	8014bd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	2220      	movs	r2, #32
 8014c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2200      	movs	r2, #0
 8014c16:	671a      	str	r2, [r3, #112]	; 0x70
}
 8014c18:	bf00      	nop
 8014c1a:	3754      	adds	r7, #84	; 0x54
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c22:	4770      	bx	lr
 8014c24:	effffffe 	.word	0xeffffffe

08014c28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b084      	sub	sp, #16
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	2200      	movs	r2, #0
 8014c3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	2200      	movs	r2, #0
 8014c42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014c46:	68f8      	ldr	r0, [r7, #12]
 8014c48:	f7fe fe26 	bl	8013898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014c4c:	bf00      	nop
 8014c4e:	3710      	adds	r7, #16
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}

08014c54 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8014c54:	b480      	push	{r7}
 8014c56:	b08f      	sub	sp, #60	; 0x3c
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014c62:	2b21      	cmp	r3, #33	; 0x21
 8014c64:	d14c      	bne.n	8014d00 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014c6c:	b29b      	uxth	r3, r3
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d132      	bne.n	8014cd8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c78:	6a3b      	ldr	r3, [r7, #32]
 8014c7a:	e853 3f00 	ldrex	r3, [r3]
 8014c7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8014c80:	69fb      	ldr	r3, [r7, #28]
 8014c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014c86:	637b      	str	r3, [r7, #52]	; 0x34
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	461a      	mov	r2, r3
 8014c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c92:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c98:	e841 2300 	strex	r3, r2, [r1]
 8014c9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d1e6      	bne.n	8014c72 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	e853 3f00 	ldrex	r3, [r3]
 8014cb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8014cb2:	68bb      	ldr	r3, [r7, #8]
 8014cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	461a      	mov	r2, r3
 8014cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cc2:	61bb      	str	r3, [r7, #24]
 8014cc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cc6:	6979      	ldr	r1, [r7, #20]
 8014cc8:	69ba      	ldr	r2, [r7, #24]
 8014cca:	e841 2300 	strex	r3, r2, [r1]
 8014cce:	613b      	str	r3, [r7, #16]
   return(result);
 8014cd0:	693b      	ldr	r3, [r7, #16]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d1e6      	bne.n	8014ca4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8014cd6:	e013      	b.n	8014d00 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014cdc:	781a      	ldrb	r2, [r3, #0]
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ce8:	1c5a      	adds	r2, r3, #1
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014cf4:	b29b      	uxth	r3, r3
 8014cf6:	3b01      	subs	r3, #1
 8014cf8:	b29a      	uxth	r2, r3
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8014d00:	bf00      	nop
 8014d02:	373c      	adds	r7, #60	; 0x3c
 8014d04:	46bd      	mov	sp, r7
 8014d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0a:	4770      	bx	lr

08014d0c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8014d0c:	b480      	push	{r7}
 8014d0e:	b091      	sub	sp, #68	; 0x44
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014d1a:	2b21      	cmp	r3, #33	; 0x21
 8014d1c:	d151      	bne.n	8014dc2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014d24:	b29b      	uxth	r3, r3
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d132      	bne.n	8014d90 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d32:	e853 3f00 	ldrex	r3, [r3]
 8014d36:	623b      	str	r3, [r7, #32]
   return(result);
 8014d38:	6a3b      	ldr	r3, [r7, #32]
 8014d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	461a      	mov	r2, r3
 8014d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d48:	633b      	str	r3, [r7, #48]	; 0x30
 8014d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d50:	e841 2300 	strex	r3, r2, [r1]
 8014d54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d1e6      	bne.n	8014d2a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	e853 3f00 	ldrex	r3, [r3]
 8014d68:	60fb      	str	r3, [r7, #12]
   return(result);
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d70:	637b      	str	r3, [r7, #52]	; 0x34
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	461a      	mov	r2, r3
 8014d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d7a:	61fb      	str	r3, [r7, #28]
 8014d7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d7e:	69b9      	ldr	r1, [r7, #24]
 8014d80:	69fa      	ldr	r2, [r7, #28]
 8014d82:	e841 2300 	strex	r3, r2, [r1]
 8014d86:	617b      	str	r3, [r7, #20]
   return(result);
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d1e6      	bne.n	8014d5c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8014d8e:	e018      	b.n	8014dc2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d94:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8014d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d98:	881b      	ldrh	r3, [r3, #0]
 8014d9a:	461a      	mov	r2, r3
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014da4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014daa:	1c9a      	adds	r2, r3, #2
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014db6:	b29b      	uxth	r3, r3
 8014db8:	3b01      	subs	r3, #1
 8014dba:	b29a      	uxth	r2, r3
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8014dc2:	bf00      	nop
 8014dc4:	3744      	adds	r7, #68	; 0x44
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dcc:	4770      	bx	lr

08014dce <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014dce:	b480      	push	{r7}
 8014dd0:	b091      	sub	sp, #68	; 0x44
 8014dd2:	af00      	add	r7, sp, #0
 8014dd4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014ddc:	2b21      	cmp	r3, #33	; 0x21
 8014dde:	d160      	bne.n	8014ea2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014de6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8014de8:	e057      	b.n	8014e9a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014df0:	b29b      	uxth	r3, r3
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d133      	bne.n	8014e5e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	3308      	adds	r3, #8
 8014dfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e00:	e853 3f00 	ldrex	r3, [r3]
 8014e04:	623b      	str	r3, [r7, #32]
   return(result);
 8014e06:	6a3b      	ldr	r3, [r7, #32]
 8014e08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8014e0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	3308      	adds	r3, #8
 8014e14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e16:	633a      	str	r2, [r7, #48]	; 0x30
 8014e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e1e:	e841 2300 	strex	r3, r2, [r1]
 8014e22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d1e5      	bne.n	8014df6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e30:	693b      	ldr	r3, [r7, #16]
 8014e32:	e853 3f00 	ldrex	r3, [r3]
 8014e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	461a      	mov	r2, r3
 8014e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e48:	61fb      	str	r3, [r7, #28]
 8014e4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e4c:	69b9      	ldr	r1, [r7, #24]
 8014e4e:	69fa      	ldr	r2, [r7, #28]
 8014e50:	e841 2300 	strex	r3, r2, [r1]
 8014e54:	617b      	str	r3, [r7, #20]
   return(result);
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d1e6      	bne.n	8014e2a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8014e5c:	e021      	b.n	8014ea2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	69db      	ldr	r3, [r3, #28]
 8014e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d013      	beq.n	8014e94 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e70:	781a      	ldrb	r2, [r3, #0]
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e7c:	1c5a      	adds	r2, r3, #1
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014e88:	b29b      	uxth	r3, r3
 8014e8a:	3b01      	subs	r3, #1
 8014e8c:	b29a      	uxth	r2, r3
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8014e94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e96:	3b01      	subs	r3, #1
 8014e98:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8014e9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d1a4      	bne.n	8014dea <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8014ea0:	e7ff      	b.n	8014ea2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8014ea2:	bf00      	nop
 8014ea4:	3744      	adds	r7, #68	; 0x44
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eac:	4770      	bx	lr

08014eae <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014eae:	b480      	push	{r7}
 8014eb0:	b091      	sub	sp, #68	; 0x44
 8014eb2:	af00      	add	r7, sp, #0
 8014eb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014ebc:	2b21      	cmp	r3, #33	; 0x21
 8014ebe:	d165      	bne.n	8014f8c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014ec6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8014ec8:	e05c      	b.n	8014f84 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014ed0:	b29b      	uxth	r3, r3
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d133      	bne.n	8014f3e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	3308      	adds	r3, #8
 8014edc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ede:	6a3b      	ldr	r3, [r7, #32]
 8014ee0:	e853 3f00 	ldrex	r3, [r3]
 8014ee4:	61fb      	str	r3, [r7, #28]
   return(result);
 8014ee6:	69fb      	ldr	r3, [r7, #28]
 8014ee8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8014eec:	637b      	str	r3, [r7, #52]	; 0x34
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	3308      	adds	r3, #8
 8014ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014efe:	e841 2300 	strex	r3, r2, [r1]
 8014f02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d1e5      	bne.n	8014ed6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	e853 3f00 	ldrex	r3, [r3]
 8014f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	461a      	mov	r2, r3
 8014f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f28:	61bb      	str	r3, [r7, #24]
 8014f2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f2c:	6979      	ldr	r1, [r7, #20]
 8014f2e:	69ba      	ldr	r2, [r7, #24]
 8014f30:	e841 2300 	strex	r3, r2, [r1]
 8014f34:	613b      	str	r3, [r7, #16]
   return(result);
 8014f36:	693b      	ldr	r3, [r7, #16]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d1e6      	bne.n	8014f0a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8014f3c:	e026      	b.n	8014f8c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	69db      	ldr	r3, [r3, #28]
 8014f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d018      	beq.n	8014f7e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f50:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8014f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f54:	881b      	ldrh	r3, [r3, #0]
 8014f56:	461a      	mov	r2, r3
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014f60:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f66:	1c9a      	adds	r2, r3, #2
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014f72:	b29b      	uxth	r3, r3
 8014f74:	3b01      	subs	r3, #1
 8014f76:	b29a      	uxth	r2, r3
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8014f7e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014f80:	3b01      	subs	r3, #1
 8014f82:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8014f84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d19f      	bne.n	8014eca <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8014f8a:	e7ff      	b.n	8014f8c <UART_TxISR_16BIT_FIFOEN+0xde>
 8014f8c:	bf00      	nop
 8014f8e:	3744      	adds	r7, #68	; 0x44
 8014f90:	46bd      	mov	sp, r7
 8014f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f96:	4770      	bx	lr

08014f98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b088      	sub	sp, #32
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	e853 3f00 	ldrex	r3, [r3]
 8014fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8014fae:	68bb      	ldr	r3, [r7, #8]
 8014fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014fb4:	61fb      	str	r3, [r7, #28]
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	461a      	mov	r2, r3
 8014fbc:	69fb      	ldr	r3, [r7, #28]
 8014fbe:	61bb      	str	r3, [r7, #24]
 8014fc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fc2:	6979      	ldr	r1, [r7, #20]
 8014fc4:	69ba      	ldr	r2, [r7, #24]
 8014fc6:	e841 2300 	strex	r3, r2, [r1]
 8014fca:	613b      	str	r3, [r7, #16]
   return(result);
 8014fcc:	693b      	ldr	r3, [r7, #16]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d1e6      	bne.n	8014fa0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	2220      	movs	r2, #32
 8014fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	2200      	movs	r2, #0
 8014fde:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014fe0:	6878      	ldr	r0, [r7, #4]
 8014fe2:	f7fe fc4f 	bl	8013884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014fe6:	bf00      	nop
 8014fe8:	3720      	adds	r7, #32
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}

08014fee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8014fee:	b580      	push	{r7, lr}
 8014ff0:	b096      	sub	sp, #88	; 0x58
 8014ff2:	af00      	add	r7, sp, #0
 8014ff4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014ffc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015006:	2b22      	cmp	r3, #34	; 0x22
 8015008:	f040 8095 	bne.w	8015136 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015012:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015016:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801501a:	b2d9      	uxtb	r1, r3
 801501c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015020:	b2da      	uxtb	r2, r3
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015026:	400a      	ands	r2, r1
 8015028:	b2d2      	uxtb	r2, r2
 801502a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015030:	1c5a      	adds	r2, r3, #1
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801503c:	b29b      	uxth	r3, r3
 801503e:	3b01      	subs	r3, #1
 8015040:	b29a      	uxth	r2, r3
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801504e:	b29b      	uxth	r3, r3
 8015050:	2b00      	cmp	r3, #0
 8015052:	d178      	bne.n	8015146 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801505c:	e853 3f00 	ldrex	r3, [r3]
 8015060:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015068:	653b      	str	r3, [r7, #80]	; 0x50
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	461a      	mov	r2, r3
 8015070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015072:	647b      	str	r3, [r7, #68]	; 0x44
 8015074:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015076:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015078:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801507a:	e841 2300 	strex	r3, r2, [r1]
 801507e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015082:	2b00      	cmp	r3, #0
 8015084:	d1e6      	bne.n	8015054 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	3308      	adds	r3, #8
 801508c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015090:	e853 3f00 	ldrex	r3, [r3]
 8015094:	623b      	str	r3, [r7, #32]
   return(result);
 8015096:	6a3b      	ldr	r3, [r7, #32]
 8015098:	f023 0301 	bic.w	r3, r3, #1
 801509c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	3308      	adds	r3, #8
 80150a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80150a6:	633a      	str	r2, [r7, #48]	; 0x30
 80150a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80150ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150ae:	e841 2300 	strex	r3, r2, [r1]
 80150b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80150b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d1e5      	bne.n	8015086 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	2220      	movs	r2, #32
 80150be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	2200      	movs	r2, #0
 80150c6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150cc:	2b01      	cmp	r3, #1
 80150ce:	d12e      	bne.n	801512e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	2200      	movs	r2, #0
 80150d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150dc:	693b      	ldr	r3, [r7, #16]
 80150de:	e853 3f00 	ldrex	r3, [r3]
 80150e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	f023 0310 	bic.w	r3, r3, #16
 80150ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	461a      	mov	r2, r3
 80150f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150f4:	61fb      	str	r3, [r7, #28]
 80150f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150f8:	69b9      	ldr	r1, [r7, #24]
 80150fa:	69fa      	ldr	r2, [r7, #28]
 80150fc:	e841 2300 	strex	r3, r2, [r1]
 8015100:	617b      	str	r3, [r7, #20]
   return(result);
 8015102:	697b      	ldr	r3, [r7, #20]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d1e6      	bne.n	80150d6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	69db      	ldr	r3, [r3, #28]
 801510e:	f003 0310 	and.w	r3, r3, #16
 8015112:	2b10      	cmp	r3, #16
 8015114:	d103      	bne.n	801511e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	2210      	movs	r2, #16
 801511c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015124:	4619      	mov	r1, r3
 8015126:	6878      	ldr	r0, [r7, #4]
 8015128:	f7fe fbc0 	bl	80138ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801512c:	e00b      	b.n	8015146 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f7ee f90a 	bl	8003348 <HAL_UART_RxCpltCallback>
}
 8015134:	e007      	b.n	8015146 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	699a      	ldr	r2, [r3, #24]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	f042 0208 	orr.w	r2, r2, #8
 8015144:	619a      	str	r2, [r3, #24]
}
 8015146:	bf00      	nop
 8015148:	3758      	adds	r7, #88	; 0x58
 801514a:	46bd      	mov	sp, r7
 801514c:	bd80      	pop	{r7, pc}

0801514e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801514e:	b580      	push	{r7, lr}
 8015150:	b096      	sub	sp, #88	; 0x58
 8015152:	af00      	add	r7, sp, #0
 8015154:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801515c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015166:	2b22      	cmp	r3, #34	; 0x22
 8015168:	f040 8095 	bne.w	8015296 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015172:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801517a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801517c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8015180:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015184:	4013      	ands	r3, r2
 8015186:	b29a      	uxth	r2, r3
 8015188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801518a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015190:	1c9a      	adds	r2, r3, #2
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801519c:	b29b      	uxth	r3, r3
 801519e:	3b01      	subs	r3, #1
 80151a0:	b29a      	uxth	r2, r3
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80151ae:	b29b      	uxth	r3, r3
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d178      	bne.n	80152a6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151bc:	e853 3f00 	ldrex	r3, [r3]
 80151c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80151c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80151c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	461a      	mov	r2, r3
 80151d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151d2:	643b      	str	r3, [r7, #64]	; 0x40
 80151d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80151d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80151da:	e841 2300 	strex	r3, r2, [r1]
 80151de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80151e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d1e6      	bne.n	80151b4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	3308      	adds	r3, #8
 80151ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151ee:	6a3b      	ldr	r3, [r7, #32]
 80151f0:	e853 3f00 	ldrex	r3, [r3]
 80151f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80151f6:	69fb      	ldr	r3, [r7, #28]
 80151f8:	f023 0301 	bic.w	r3, r3, #1
 80151fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	3308      	adds	r3, #8
 8015204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015206:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015208:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801520a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801520c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801520e:	e841 2300 	strex	r3, r2, [r1]
 8015212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015216:	2b00      	cmp	r3, #0
 8015218:	d1e5      	bne.n	80151e6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	2220      	movs	r2, #32
 801521e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	2200      	movs	r2, #0
 8015226:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801522c:	2b01      	cmp	r3, #1
 801522e:	d12e      	bne.n	801528e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2200      	movs	r2, #0
 8015234:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	e853 3f00 	ldrex	r3, [r3]
 8015242:	60bb      	str	r3, [r7, #8]
   return(result);
 8015244:	68bb      	ldr	r3, [r7, #8]
 8015246:	f023 0310 	bic.w	r3, r3, #16
 801524a:	647b      	str	r3, [r7, #68]	; 0x44
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	461a      	mov	r2, r3
 8015252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015254:	61bb      	str	r3, [r7, #24]
 8015256:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015258:	6979      	ldr	r1, [r7, #20]
 801525a:	69ba      	ldr	r2, [r7, #24]
 801525c:	e841 2300 	strex	r3, r2, [r1]
 8015260:	613b      	str	r3, [r7, #16]
   return(result);
 8015262:	693b      	ldr	r3, [r7, #16]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d1e6      	bne.n	8015236 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	69db      	ldr	r3, [r3, #28]
 801526e:	f003 0310 	and.w	r3, r3, #16
 8015272:	2b10      	cmp	r3, #16
 8015274:	d103      	bne.n	801527e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	2210      	movs	r2, #16
 801527c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015284:	4619      	mov	r1, r3
 8015286:	6878      	ldr	r0, [r7, #4]
 8015288:	f7fe fb10 	bl	80138ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801528c:	e00b      	b.n	80152a6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 801528e:	6878      	ldr	r0, [r7, #4]
 8015290:	f7ee f85a 	bl	8003348 <HAL_UART_RxCpltCallback>
}
 8015294:	e007      	b.n	80152a6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	699a      	ldr	r2, [r3, #24]
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	f042 0208 	orr.w	r2, r2, #8
 80152a4:	619a      	str	r2, [r3, #24]
}
 80152a6:	bf00      	nop
 80152a8:	3758      	adds	r7, #88	; 0x58
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}
	...

080152b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b0a6      	sub	sp, #152	; 0x98
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80152be:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	69db      	ldr	r3, [r3, #28]
 80152c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	689b      	ldr	r3, [r3, #8]
 80152dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80152e6:	2b22      	cmp	r3, #34	; 0x22
 80152e8:	f040 814d 	bne.w	8015586 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80152f2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80152f6:	e0f4      	b.n	80154e2 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152fe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015302:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8015306:	b2d9      	uxtb	r1, r3
 8015308:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801530c:	b2da      	uxtb	r2, r3
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015312:	400a      	ands	r2, r1
 8015314:	b2d2      	uxtb	r2, r2
 8015316:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801531c:	1c5a      	adds	r2, r3, #1
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015328:	b29b      	uxth	r3, r3
 801532a:	3b01      	subs	r3, #1
 801532c:	b29a      	uxth	r2, r3
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	69db      	ldr	r3, [r3, #28]
 801533a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801533e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015342:	f003 0307 	and.w	r3, r3, #7
 8015346:	2b00      	cmp	r3, #0
 8015348:	d053      	beq.n	80153f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801534a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801534e:	f003 0301 	and.w	r3, r3, #1
 8015352:	2b00      	cmp	r3, #0
 8015354:	d011      	beq.n	801537a <UART_RxISR_8BIT_FIFOEN+0xca>
 8015356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801535a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801535e:	2b00      	cmp	r3, #0
 8015360:	d00b      	beq.n	801537a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	2201      	movs	r2, #1
 8015368:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015370:	f043 0201 	orr.w	r2, r3, #1
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801537a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801537e:	f003 0302 	and.w	r3, r3, #2
 8015382:	2b00      	cmp	r3, #0
 8015384:	d011      	beq.n	80153aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8015386:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801538a:	f003 0301 	and.w	r3, r3, #1
 801538e:	2b00      	cmp	r3, #0
 8015390:	d00b      	beq.n	80153aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	2202      	movs	r2, #2
 8015398:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80153a0:	f043 0204 	orr.w	r2, r3, #4
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80153aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80153ae:	f003 0304 	and.w	r3, r3, #4
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d011      	beq.n	80153da <UART_RxISR_8BIT_FIFOEN+0x12a>
 80153b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80153ba:	f003 0301 	and.w	r3, r3, #1
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d00b      	beq.n	80153da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	2204      	movs	r2, #4
 80153c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80153d0:	f043 0202 	orr.w	r2, r3, #2
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d006      	beq.n	80153f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80153e4:	6878      	ldr	r0, [r7, #4]
 80153e6:	f7fe fa57 	bl	8013898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2200      	movs	r2, #0
 80153ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80153f8:	b29b      	uxth	r3, r3
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d171      	bne.n	80154e2 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015406:	e853 3f00 	ldrex	r3, [r3]
 801540a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801540c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801540e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015412:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	461a      	mov	r2, r3
 801541c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015420:	66bb      	str	r3, [r7, #104]	; 0x68
 8015422:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015424:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015426:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015428:	e841 2300 	strex	r3, r2, [r1]
 801542c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801542e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015430:	2b00      	cmp	r3, #0
 8015432:	d1e4      	bne.n	80153fe <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	3308      	adds	r3, #8
 801543a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801543c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801543e:	e853 3f00 	ldrex	r3, [r3]
 8015442:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015444:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015446:	4b56      	ldr	r3, [pc, #344]	; (80155a0 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8015448:	4013      	ands	r3, r2
 801544a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	3308      	adds	r3, #8
 8015452:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015454:	657a      	str	r2, [r7, #84]	; 0x54
 8015456:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015458:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801545a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801545c:	e841 2300 	strex	r3, r2, [r1]
 8015460:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015464:	2b00      	cmp	r3, #0
 8015466:	d1e5      	bne.n	8015434 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2220      	movs	r2, #32
 801546c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	2200      	movs	r2, #0
 8015474:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801547a:	2b01      	cmp	r3, #1
 801547c:	d12e      	bne.n	80154dc <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	2200      	movs	r2, #0
 8015482:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801548a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801548c:	e853 3f00 	ldrex	r3, [r3]
 8015490:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015494:	f023 0310 	bic.w	r3, r3, #16
 8015498:	67bb      	str	r3, [r7, #120]	; 0x78
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	461a      	mov	r2, r3
 80154a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80154a2:	643b      	str	r3, [r7, #64]	; 0x40
 80154a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80154a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80154aa:	e841 2300 	strex	r3, r2, [r1]
 80154ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80154b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d1e6      	bne.n	8015484 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	69db      	ldr	r3, [r3, #28]
 80154bc:	f003 0310 	and.w	r3, r3, #16
 80154c0:	2b10      	cmp	r3, #16
 80154c2:	d103      	bne.n	80154cc <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	2210      	movs	r2, #16
 80154ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80154d2:	4619      	mov	r1, r3
 80154d4:	6878      	ldr	r0, [r7, #4]
 80154d6:	f7fe f9e9 	bl	80138ac <HAL_UARTEx_RxEventCallback>
 80154da:	e002      	b.n	80154e2 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f7ed ff33 	bl	8003348 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80154e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d006      	beq.n	80154f8 <UART_RxISR_8BIT_FIFOEN+0x248>
 80154ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80154ee:	f003 0320 	and.w	r3, r3, #32
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	f47f af00 	bne.w	80152f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80154fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015502:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8015506:	2b00      	cmp	r3, #0
 8015508:	d045      	beq.n	8015596 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015510:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8015514:	429a      	cmp	r2, r3
 8015516:	d23e      	bcs.n	8015596 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	3308      	adds	r3, #8
 801551e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015520:	6a3b      	ldr	r3, [r7, #32]
 8015522:	e853 3f00 	ldrex	r3, [r3]
 8015526:	61fb      	str	r3, [r7, #28]
   return(result);
 8015528:	69fb      	ldr	r3, [r7, #28]
 801552a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801552e:	673b      	str	r3, [r7, #112]	; 0x70
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	3308      	adds	r3, #8
 8015536:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015538:	62fa      	str	r2, [r7, #44]	; 0x2c
 801553a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801553c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801553e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015540:	e841 2300 	strex	r3, r2, [r1]
 8015544:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015548:	2b00      	cmp	r3, #0
 801554a:	d1e5      	bne.n	8015518 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	4a15      	ldr	r2, [pc, #84]	; (80155a4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8015550:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	e853 3f00 	ldrex	r3, [r3]
 801555e:	60bb      	str	r3, [r7, #8]
   return(result);
 8015560:	68bb      	ldr	r3, [r7, #8]
 8015562:	f043 0320 	orr.w	r3, r3, #32
 8015566:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	461a      	mov	r2, r3
 801556e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015570:	61bb      	str	r3, [r7, #24]
 8015572:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015574:	6979      	ldr	r1, [r7, #20]
 8015576:	69ba      	ldr	r2, [r7, #24]
 8015578:	e841 2300 	strex	r3, r2, [r1]
 801557c:	613b      	str	r3, [r7, #16]
   return(result);
 801557e:	693b      	ldr	r3, [r7, #16]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d1e6      	bne.n	8015552 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015584:	e007      	b.n	8015596 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	699a      	ldr	r2, [r3, #24]
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	f042 0208 	orr.w	r2, r2, #8
 8015594:	619a      	str	r2, [r3, #24]
}
 8015596:	bf00      	nop
 8015598:	3798      	adds	r7, #152	; 0x98
 801559a:	46bd      	mov	sp, r7
 801559c:	bd80      	pop	{r7, pc}
 801559e:	bf00      	nop
 80155a0:	effffffe 	.word	0xeffffffe
 80155a4:	08014fef 	.word	0x08014fef

080155a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b0a8      	sub	sp, #160	; 0xa0
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80155b6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	69db      	ldr	r3, [r3, #28]
 80155c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	689b      	ldr	r3, [r3, #8]
 80155d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80155de:	2b22      	cmp	r3, #34	; 0x22
 80155e0:	f040 8151 	bne.w	8015886 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80155ea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80155ee:	e0f8      	b.n	80157e2 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155f6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80155fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8015602:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8015606:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 801560a:	4013      	ands	r3, r2
 801560c:	b29a      	uxth	r2, r3
 801560e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015612:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015618:	1c9a      	adds	r2, r3, #2
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015624:	b29b      	uxth	r3, r3
 8015626:	3b01      	subs	r3, #1
 8015628:	b29a      	uxth	r2, r3
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	69db      	ldr	r3, [r3, #28]
 8015636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801563a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801563e:	f003 0307 	and.w	r3, r3, #7
 8015642:	2b00      	cmp	r3, #0
 8015644:	d053      	beq.n	80156ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015646:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801564a:	f003 0301 	and.w	r3, r3, #1
 801564e:	2b00      	cmp	r3, #0
 8015650:	d011      	beq.n	8015676 <UART_RxISR_16BIT_FIFOEN+0xce>
 8015652:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801565a:	2b00      	cmp	r3, #0
 801565c:	d00b      	beq.n	8015676 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	2201      	movs	r2, #1
 8015664:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801566c:	f043 0201 	orr.w	r2, r3, #1
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015676:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801567a:	f003 0302 	and.w	r3, r3, #2
 801567e:	2b00      	cmp	r3, #0
 8015680:	d011      	beq.n	80156a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8015682:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015686:	f003 0301 	and.w	r3, r3, #1
 801568a:	2b00      	cmp	r3, #0
 801568c:	d00b      	beq.n	80156a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	2202      	movs	r2, #2
 8015694:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801569c:	f043 0204 	orr.w	r2, r3, #4
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80156a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80156aa:	f003 0304 	and.w	r3, r3, #4
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d011      	beq.n	80156d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80156b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80156b6:	f003 0301 	and.w	r3, r3, #1
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d00b      	beq.n	80156d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	2204      	movs	r2, #4
 80156c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80156cc:	f043 0202 	orr.w	r2, r3, #2
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d006      	beq.n	80156ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80156e0:	6878      	ldr	r0, [r7, #4]
 80156e2:	f7fe f8d9 	bl	8013898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	2200      	movs	r2, #0
 80156ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80156f4:	b29b      	uxth	r3, r3
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d173      	bne.n	80157e2 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015700:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015702:	e853 3f00 	ldrex	r3, [r3]
 8015706:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8015708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801570a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801570e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	461a      	mov	r2, r3
 8015718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801571c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801571e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015720:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015722:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015724:	e841 2300 	strex	r3, r2, [r1]
 8015728:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801572a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801572c:	2b00      	cmp	r3, #0
 801572e:	d1e4      	bne.n	80156fa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	3308      	adds	r3, #8
 8015736:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801573a:	e853 3f00 	ldrex	r3, [r3]
 801573e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015742:	4b57      	ldr	r3, [pc, #348]	; (80158a0 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8015744:	4013      	ands	r3, r2
 8015746:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	3308      	adds	r3, #8
 8015750:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015754:	65ba      	str	r2, [r7, #88]	; 0x58
 8015756:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015758:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801575a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801575c:	e841 2300 	strex	r3, r2, [r1]
 8015760:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015764:	2b00      	cmp	r3, #0
 8015766:	d1e3      	bne.n	8015730 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	2220      	movs	r2, #32
 801576c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	2200      	movs	r2, #0
 8015774:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801577a:	2b01      	cmp	r3, #1
 801577c:	d12e      	bne.n	80157dc <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	2200      	movs	r2, #0
 8015782:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801578c:	e853 3f00 	ldrex	r3, [r3]
 8015790:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015794:	f023 0310 	bic.w	r3, r3, #16
 8015798:	67fb      	str	r3, [r7, #124]	; 0x7c
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	461a      	mov	r2, r3
 80157a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80157a2:	647b      	str	r3, [r7, #68]	; 0x44
 80157a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80157a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80157aa:	e841 2300 	strex	r3, r2, [r1]
 80157ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80157b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d1e6      	bne.n	8015784 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	69db      	ldr	r3, [r3, #28]
 80157bc:	f003 0310 	and.w	r3, r3, #16
 80157c0:	2b10      	cmp	r3, #16
 80157c2:	d103      	bne.n	80157cc <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	2210      	movs	r2, #16
 80157ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80157d2:	4619      	mov	r1, r3
 80157d4:	6878      	ldr	r0, [r7, #4]
 80157d6:	f7fe f869 	bl	80138ac <HAL_UARTEx_RxEventCallback>
 80157da:	e002      	b.n	80157e2 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80157dc:	6878      	ldr	r0, [r7, #4]
 80157de:	f7ed fdb3 	bl	8003348 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80157e2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d006      	beq.n	80157f8 <UART_RxISR_16BIT_FIFOEN+0x250>
 80157ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80157ee:	f003 0320 	and.w	r3, r3, #32
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	f47f aefc 	bne.w	80155f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80157fe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015802:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8015806:	2b00      	cmp	r3, #0
 8015808:	d045      	beq.n	8015896 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015810:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8015814:	429a      	cmp	r2, r3
 8015816:	d23e      	bcs.n	8015896 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	3308      	adds	r3, #8
 801581e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015822:	e853 3f00 	ldrex	r3, [r3]
 8015826:	623b      	str	r3, [r7, #32]
   return(result);
 8015828:	6a3b      	ldr	r3, [r7, #32]
 801582a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801582e:	677b      	str	r3, [r7, #116]	; 0x74
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	3308      	adds	r3, #8
 8015836:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015838:	633a      	str	r2, [r7, #48]	; 0x30
 801583a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801583c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801583e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015840:	e841 2300 	strex	r3, r2, [r1]
 8015844:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015848:	2b00      	cmp	r3, #0
 801584a:	d1e5      	bne.n	8015818 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	4a15      	ldr	r2, [pc, #84]	; (80158a4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8015850:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015858:	693b      	ldr	r3, [r7, #16]
 801585a:	e853 3f00 	ldrex	r3, [r3]
 801585e:	60fb      	str	r3, [r7, #12]
   return(result);
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	f043 0320 	orr.w	r3, r3, #32
 8015866:	673b      	str	r3, [r7, #112]	; 0x70
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	461a      	mov	r2, r3
 801586e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015870:	61fb      	str	r3, [r7, #28]
 8015872:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015874:	69b9      	ldr	r1, [r7, #24]
 8015876:	69fa      	ldr	r2, [r7, #28]
 8015878:	e841 2300 	strex	r3, r2, [r1]
 801587c:	617b      	str	r3, [r7, #20]
   return(result);
 801587e:	697b      	ldr	r3, [r7, #20]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d1e6      	bne.n	8015852 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015884:	e007      	b.n	8015896 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	699a      	ldr	r2, [r3, #24]
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	f042 0208 	orr.w	r2, r2, #8
 8015894:	619a      	str	r2, [r3, #24]
}
 8015896:	bf00      	nop
 8015898:	37a0      	adds	r7, #160	; 0xa0
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}
 801589e:	bf00      	nop
 80158a0:	effffffe 	.word	0xeffffffe
 80158a4:	0801514f 	.word	0x0801514f

080158a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80158a8:	b480      	push	{r7}
 80158aa:	b083      	sub	sp, #12
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80158b0:	bf00      	nop
 80158b2:	370c      	adds	r7, #12
 80158b4:	46bd      	mov	sp, r7
 80158b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ba:	4770      	bx	lr

080158bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80158bc:	b480      	push	{r7}
 80158be:	b083      	sub	sp, #12
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80158c4:	bf00      	nop
 80158c6:	370c      	adds	r7, #12
 80158c8:	46bd      	mov	sp, r7
 80158ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ce:	4770      	bx	lr

080158d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80158d0:	b480      	push	{r7}
 80158d2:	b083      	sub	sp, #12
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80158d8:	bf00      	nop
 80158da:	370c      	adds	r7, #12
 80158dc:	46bd      	mov	sp, r7
 80158de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e2:	4770      	bx	lr

080158e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80158e4:	b480      	push	{r7}
 80158e6:	b085      	sub	sp, #20
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80158f2:	2b01      	cmp	r3, #1
 80158f4:	d101      	bne.n	80158fa <HAL_UARTEx_DisableFifoMode+0x16>
 80158f6:	2302      	movs	r3, #2
 80158f8:	e027      	b.n	801594a <HAL_UARTEx_DisableFifoMode+0x66>
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2201      	movs	r2, #1
 80158fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	2224      	movs	r2, #36	; 0x24
 8015906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	681a      	ldr	r2, [r3, #0]
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	f022 0201 	bic.w	r2, r2, #1
 8015920:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8015928:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	2200      	movs	r2, #0
 801592e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	68fa      	ldr	r2, [r7, #12]
 8015936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	2220      	movs	r2, #32
 801593c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2200      	movs	r2, #0
 8015944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015948:	2300      	movs	r3, #0
}
 801594a:	4618      	mov	r0, r3
 801594c:	3714      	adds	r7, #20
 801594e:	46bd      	mov	sp, r7
 8015950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015954:	4770      	bx	lr

08015956 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015956:	b580      	push	{r7, lr}
 8015958:	b084      	sub	sp, #16
 801595a:	af00      	add	r7, sp, #0
 801595c:	6078      	str	r0, [r7, #4]
 801595e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015966:	2b01      	cmp	r3, #1
 8015968:	d101      	bne.n	801596e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801596a:	2302      	movs	r3, #2
 801596c:	e02d      	b.n	80159ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	2201      	movs	r2, #1
 8015972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	2224      	movs	r2, #36	; 0x24
 801597a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	681a      	ldr	r2, [r3, #0]
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	f022 0201 	bic.w	r2, r2, #1
 8015994:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	689b      	ldr	r3, [r3, #8]
 801599c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	683a      	ldr	r2, [r7, #0]
 80159a6:	430a      	orrs	r2, r1
 80159a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80159aa:	6878      	ldr	r0, [r7, #4]
 80159ac:	f000 f850 	bl	8015a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	68fa      	ldr	r2, [r7, #12]
 80159b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	2220      	movs	r2, #32
 80159bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	2200      	movs	r2, #0
 80159c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80159c8:	2300      	movs	r3, #0
}
 80159ca:	4618      	mov	r0, r3
 80159cc:	3710      	adds	r7, #16
 80159ce:	46bd      	mov	sp, r7
 80159d0:	bd80      	pop	{r7, pc}

080159d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80159d2:	b580      	push	{r7, lr}
 80159d4:	b084      	sub	sp, #16
 80159d6:	af00      	add	r7, sp, #0
 80159d8:	6078      	str	r0, [r7, #4]
 80159da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80159e2:	2b01      	cmp	r3, #1
 80159e4:	d101      	bne.n	80159ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80159e6:	2302      	movs	r3, #2
 80159e8:	e02d      	b.n	8015a46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	2201      	movs	r2, #1
 80159ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	2224      	movs	r2, #36	; 0x24
 80159f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	681a      	ldr	r2, [r3, #0]
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	f022 0201 	bic.w	r2, r2, #1
 8015a10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	689b      	ldr	r3, [r3, #8]
 8015a18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	683a      	ldr	r2, [r7, #0]
 8015a22:	430a      	orrs	r2, r1
 8015a24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015a26:	6878      	ldr	r0, [r7, #4]
 8015a28:	f000 f812 	bl	8015a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	68fa      	ldr	r2, [r7, #12]
 8015a32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	2220      	movs	r2, #32
 8015a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	2200      	movs	r2, #0
 8015a40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015a44:	2300      	movs	r3, #0
}
 8015a46:	4618      	mov	r0, r3
 8015a48:	3710      	adds	r7, #16
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	bd80      	pop	{r7, pc}
	...

08015a50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015a50:	b480      	push	{r7}
 8015a52:	b085      	sub	sp, #20
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d108      	bne.n	8015a72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2201      	movs	r2, #1
 8015a64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	2201      	movs	r2, #1
 8015a6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015a70:	e031      	b.n	8015ad6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015a72:	2310      	movs	r3, #16
 8015a74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8015a76:	2310      	movs	r3, #16
 8015a78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	689b      	ldr	r3, [r3, #8]
 8015a80:	0e5b      	lsrs	r3, r3, #25
 8015a82:	b2db      	uxtb	r3, r3
 8015a84:	f003 0307 	and.w	r3, r3, #7
 8015a88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	689b      	ldr	r3, [r3, #8]
 8015a90:	0f5b      	lsrs	r3, r3, #29
 8015a92:	b2db      	uxtb	r3, r3
 8015a94:	f003 0307 	and.w	r3, r3, #7
 8015a98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015a9a:	7bbb      	ldrb	r3, [r7, #14]
 8015a9c:	7b3a      	ldrb	r2, [r7, #12]
 8015a9e:	4911      	ldr	r1, [pc, #68]	; (8015ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8015aa0:	5c8a      	ldrb	r2, [r1, r2]
 8015aa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8015aa6:	7b3a      	ldrb	r2, [r7, #12]
 8015aa8:	490f      	ldr	r1, [pc, #60]	; (8015ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8015aaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015aac:	fb93 f3f2 	sdiv	r3, r3, r2
 8015ab0:	b29a      	uxth	r2, r3
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015ab8:	7bfb      	ldrb	r3, [r7, #15]
 8015aba:	7b7a      	ldrb	r2, [r7, #13]
 8015abc:	4909      	ldr	r1, [pc, #36]	; (8015ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8015abe:	5c8a      	ldrb	r2, [r1, r2]
 8015ac0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015ac4:	7b7a      	ldrb	r2, [r7, #13]
 8015ac6:	4908      	ldr	r1, [pc, #32]	; (8015ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8015ac8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015aca:	fb93 f3f2 	sdiv	r3, r3, r2
 8015ace:	b29a      	uxth	r2, r3
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8015ad6:	bf00      	nop
 8015ad8:	3714      	adds	r7, #20
 8015ada:	46bd      	mov	sp, r7
 8015adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae0:	4770      	bx	lr
 8015ae2:	bf00      	nop
 8015ae4:	08016c04 	.word	0x08016c04
 8015ae8:	08016c0c 	.word	0x08016c0c

08015aec <__errno>:
 8015aec:	4b01      	ldr	r3, [pc, #4]	; (8015af4 <__errno+0x8>)
 8015aee:	6818      	ldr	r0, [r3, #0]
 8015af0:	4770      	bx	lr
 8015af2:	bf00      	nop
 8015af4:	20000020 	.word	0x20000020

08015af8 <__libc_init_array>:
 8015af8:	b570      	push	{r4, r5, r6, lr}
 8015afa:	4d0d      	ldr	r5, [pc, #52]	; (8015b30 <__libc_init_array+0x38>)
 8015afc:	4c0d      	ldr	r4, [pc, #52]	; (8015b34 <__libc_init_array+0x3c>)
 8015afe:	1b64      	subs	r4, r4, r5
 8015b00:	10a4      	asrs	r4, r4, #2
 8015b02:	2600      	movs	r6, #0
 8015b04:	42a6      	cmp	r6, r4
 8015b06:	d109      	bne.n	8015b1c <__libc_init_array+0x24>
 8015b08:	4d0b      	ldr	r5, [pc, #44]	; (8015b38 <__libc_init_array+0x40>)
 8015b0a:	4c0c      	ldr	r4, [pc, #48]	; (8015b3c <__libc_init_array+0x44>)
 8015b0c:	f001 f846 	bl	8016b9c <_init>
 8015b10:	1b64      	subs	r4, r4, r5
 8015b12:	10a4      	asrs	r4, r4, #2
 8015b14:	2600      	movs	r6, #0
 8015b16:	42a6      	cmp	r6, r4
 8015b18:	d105      	bne.n	8015b26 <__libc_init_array+0x2e>
 8015b1a:	bd70      	pop	{r4, r5, r6, pc}
 8015b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015b20:	4798      	blx	r3
 8015b22:	3601      	adds	r6, #1
 8015b24:	e7ee      	b.n	8015b04 <__libc_init_array+0xc>
 8015b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8015b2a:	4798      	blx	r3
 8015b2c:	3601      	adds	r6, #1
 8015b2e:	e7f2      	b.n	8015b16 <__libc_init_array+0x1e>
 8015b30:	08016e68 	.word	0x08016e68
 8015b34:	08016e68 	.word	0x08016e68
 8015b38:	08016e68 	.word	0x08016e68
 8015b3c:	08016e6c 	.word	0x08016e6c

08015b40 <memset>:
 8015b40:	4402      	add	r2, r0
 8015b42:	4603      	mov	r3, r0
 8015b44:	4293      	cmp	r3, r2
 8015b46:	d100      	bne.n	8015b4a <memset+0xa>
 8015b48:	4770      	bx	lr
 8015b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8015b4e:	e7f9      	b.n	8015b44 <memset+0x4>

08015b50 <cos>:
 8015b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015b52:	eeb0 7b40 	vmov.f64	d7, d0
 8015b56:	ee17 3a90 	vmov	r3, s15
 8015b5a:	4a21      	ldr	r2, [pc, #132]	; (8015be0 <cos+0x90>)
 8015b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015b60:	4293      	cmp	r3, r2
 8015b62:	dc06      	bgt.n	8015b72 <cos+0x22>
 8015b64:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8015bd8 <cos+0x88>
 8015b68:	b005      	add	sp, #20
 8015b6a:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b6e:	f000 bab7 	b.w	80160e0 <__kernel_cos>
 8015b72:	4a1c      	ldr	r2, [pc, #112]	; (8015be4 <cos+0x94>)
 8015b74:	4293      	cmp	r3, r2
 8015b76:	dd04      	ble.n	8015b82 <cos+0x32>
 8015b78:	ee30 0b40 	vsub.f64	d0, d0, d0
 8015b7c:	b005      	add	sp, #20
 8015b7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b82:	4668      	mov	r0, sp
 8015b84:	f000 f964 	bl	8015e50 <__ieee754_rem_pio2>
 8015b88:	f000 0003 	and.w	r0, r0, #3
 8015b8c:	2801      	cmp	r0, #1
 8015b8e:	d009      	beq.n	8015ba4 <cos+0x54>
 8015b90:	2802      	cmp	r0, #2
 8015b92:	d010      	beq.n	8015bb6 <cos+0x66>
 8015b94:	b9b0      	cbnz	r0, 8015bc4 <cos+0x74>
 8015b96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015b9a:	ed9d 0b00 	vldr	d0, [sp]
 8015b9e:	f000 fa9f 	bl	80160e0 <__kernel_cos>
 8015ba2:	e7eb      	b.n	8015b7c <cos+0x2c>
 8015ba4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015ba8:	ed9d 0b00 	vldr	d0, [sp]
 8015bac:	f000 fd9c 	bl	80166e8 <__kernel_sin>
 8015bb0:	eeb1 0b40 	vneg.f64	d0, d0
 8015bb4:	e7e2      	b.n	8015b7c <cos+0x2c>
 8015bb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015bba:	ed9d 0b00 	vldr	d0, [sp]
 8015bbe:	f000 fa8f 	bl	80160e0 <__kernel_cos>
 8015bc2:	e7f5      	b.n	8015bb0 <cos+0x60>
 8015bc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015bc8:	ed9d 0b00 	vldr	d0, [sp]
 8015bcc:	2001      	movs	r0, #1
 8015bce:	f000 fd8b 	bl	80166e8 <__kernel_sin>
 8015bd2:	e7d3      	b.n	8015b7c <cos+0x2c>
 8015bd4:	f3af 8000 	nop.w
	...
 8015be0:	3fe921fb 	.word	0x3fe921fb
 8015be4:	7fefffff 	.word	0x7fefffff

08015be8 <sin>:
 8015be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015bea:	eeb0 7b40 	vmov.f64	d7, d0
 8015bee:	ee17 3a90 	vmov	r3, s15
 8015bf2:	4a21      	ldr	r2, [pc, #132]	; (8015c78 <sin+0x90>)
 8015bf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015bf8:	4293      	cmp	r3, r2
 8015bfa:	dc07      	bgt.n	8015c0c <sin+0x24>
 8015bfc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8015c70 <sin+0x88>
 8015c00:	2000      	movs	r0, #0
 8015c02:	b005      	add	sp, #20
 8015c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c08:	f000 bd6e 	b.w	80166e8 <__kernel_sin>
 8015c0c:	4a1b      	ldr	r2, [pc, #108]	; (8015c7c <sin+0x94>)
 8015c0e:	4293      	cmp	r3, r2
 8015c10:	dd04      	ble.n	8015c1c <sin+0x34>
 8015c12:	ee30 0b40 	vsub.f64	d0, d0, d0
 8015c16:	b005      	add	sp, #20
 8015c18:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c1c:	4668      	mov	r0, sp
 8015c1e:	f000 f917 	bl	8015e50 <__ieee754_rem_pio2>
 8015c22:	f000 0003 	and.w	r0, r0, #3
 8015c26:	2801      	cmp	r0, #1
 8015c28:	d00a      	beq.n	8015c40 <sin+0x58>
 8015c2a:	2802      	cmp	r0, #2
 8015c2c:	d00f      	beq.n	8015c4e <sin+0x66>
 8015c2e:	b9c0      	cbnz	r0, 8015c62 <sin+0x7a>
 8015c30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015c34:	ed9d 0b00 	vldr	d0, [sp]
 8015c38:	2001      	movs	r0, #1
 8015c3a:	f000 fd55 	bl	80166e8 <__kernel_sin>
 8015c3e:	e7ea      	b.n	8015c16 <sin+0x2e>
 8015c40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015c44:	ed9d 0b00 	vldr	d0, [sp]
 8015c48:	f000 fa4a 	bl	80160e0 <__kernel_cos>
 8015c4c:	e7e3      	b.n	8015c16 <sin+0x2e>
 8015c4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015c52:	ed9d 0b00 	vldr	d0, [sp]
 8015c56:	2001      	movs	r0, #1
 8015c58:	f000 fd46 	bl	80166e8 <__kernel_sin>
 8015c5c:	eeb1 0b40 	vneg.f64	d0, d0
 8015c60:	e7d9      	b.n	8015c16 <sin+0x2e>
 8015c62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015c66:	ed9d 0b00 	vldr	d0, [sp]
 8015c6a:	f000 fa39 	bl	80160e0 <__kernel_cos>
 8015c6e:	e7f5      	b.n	8015c5c <sin+0x74>
	...
 8015c78:	3fe921fb 	.word	0x3fe921fb
 8015c7c:	7fefffff 	.word	0x7fefffff

08015c80 <atan2>:
 8015c80:	f000 b822 	b.w	8015cc8 <__ieee754_atan2>
 8015c84:	0000      	movs	r0, r0
	...

08015c88 <sqrt>:
 8015c88:	b508      	push	{r3, lr}
 8015c8a:	ed2d 8b04 	vpush	{d8-d9}
 8015c8e:	eeb0 8b40 	vmov.f64	d8, d0
 8015c92:	f000 fa21 	bl	80160d8 <__ieee754_sqrt>
 8015c96:	eeb4 8b48 	vcmp.f64	d8, d8
 8015c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c9e:	d60c      	bvs.n	8015cba <sqrt+0x32>
 8015ca0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8015cc0 <sqrt+0x38>
 8015ca4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8015ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cac:	d505      	bpl.n	8015cba <sqrt+0x32>
 8015cae:	f7ff ff1d 	bl	8015aec <__errno>
 8015cb2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8015cb6:	2321      	movs	r3, #33	; 0x21
 8015cb8:	6003      	str	r3, [r0, #0]
 8015cba:	ecbd 8b04 	vpop	{d8-d9}
 8015cbe:	bd08      	pop	{r3, pc}
	...

08015cc8 <__ieee754_atan2>:
 8015cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cca:	eeb0 7b40 	vmov.f64	d7, d0
 8015cce:	ee11 6a10 	vmov	r6, s2
 8015cd2:	ee11 0a90 	vmov	r0, s3
 8015cd6:	4273      	negs	r3, r6
 8015cd8:	4f59      	ldr	r7, [pc, #356]	; (8015e40 <__ieee754_atan2+0x178>)
 8015cda:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8015cde:	4333      	orrs	r3, r6
 8015ce0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015ce4:	42bb      	cmp	r3, r7
 8015ce6:	d80d      	bhi.n	8015d04 <__ieee754_atan2+0x3c>
 8015ce8:	ee10 ca10 	vmov	ip, s0
 8015cec:	ee17 5a90 	vmov	r5, s15
 8015cf0:	f1cc 0100 	rsb	r1, ip, #0
 8015cf4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015cf8:	ea41 010c 	orr.w	r1, r1, ip
 8015cfc:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8015d00:	42b9      	cmp	r1, r7
 8015d02:	d904      	bls.n	8015d0e <__ieee754_atan2+0x46>
 8015d04:	ee37 7b01 	vadd.f64	d7, d7, d1
 8015d08:	eeb0 0b47 	vmov.f64	d0, d7
 8015d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d0e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8015d12:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8015d16:	4331      	orrs	r1, r6
 8015d18:	d103      	bne.n	8015d22 <__ieee754_atan2+0x5a>
 8015d1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015d1e:	f000 bd3b 	b.w	8016798 <atan>
 8015d22:	1784      	asrs	r4, r0, #30
 8015d24:	f004 0402 	and.w	r4, r4, #2
 8015d28:	ea53 010c 	orrs.w	r1, r3, ip
 8015d2c:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8015d30:	d107      	bne.n	8015d42 <__ieee754_atan2+0x7a>
 8015d32:	2c02      	cmp	r4, #2
 8015d34:	d05d      	beq.n	8015df2 <__ieee754_atan2+0x12a>
 8015d36:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8015e08 <__ieee754_atan2+0x140>
 8015d3a:	2c03      	cmp	r4, #3
 8015d3c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8015d40:	e7e2      	b.n	8015d08 <__ieee754_atan2+0x40>
 8015d42:	ea52 0106 	orrs.w	r1, r2, r6
 8015d46:	d107      	bne.n	8015d58 <__ieee754_atan2+0x90>
 8015d48:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8015e10 <__ieee754_atan2+0x148>
 8015d4c:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8015e18 <__ieee754_atan2+0x150>
 8015d50:	2d00      	cmp	r5, #0
 8015d52:	fe27 7b00 	vselge.f64	d7, d7, d0
 8015d56:	e7d7      	b.n	8015d08 <__ieee754_atan2+0x40>
 8015d58:	42ba      	cmp	r2, r7
 8015d5a:	d10f      	bne.n	8015d7c <__ieee754_atan2+0xb4>
 8015d5c:	4293      	cmp	r3, r2
 8015d5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8015d62:	d107      	bne.n	8015d74 <__ieee754_atan2+0xac>
 8015d64:	2c02      	cmp	r4, #2
 8015d66:	d847      	bhi.n	8015df8 <__ieee754_atan2+0x130>
 8015d68:	4b36      	ldr	r3, [pc, #216]	; (8015e44 <__ieee754_atan2+0x17c>)
 8015d6a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015d6e:	ed94 7b00 	vldr	d7, [r4]
 8015d72:	e7c9      	b.n	8015d08 <__ieee754_atan2+0x40>
 8015d74:	2c02      	cmp	r4, #2
 8015d76:	d842      	bhi.n	8015dfe <__ieee754_atan2+0x136>
 8015d78:	4b33      	ldr	r3, [pc, #204]	; (8015e48 <__ieee754_atan2+0x180>)
 8015d7a:	e7f6      	b.n	8015d6a <__ieee754_atan2+0xa2>
 8015d7c:	42bb      	cmp	r3, r7
 8015d7e:	d0e3      	beq.n	8015d48 <__ieee754_atan2+0x80>
 8015d80:	1a9b      	subs	r3, r3, r2
 8015d82:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015d86:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015d8a:	da1a      	bge.n	8015dc2 <__ieee754_atan2+0xfa>
 8015d8c:	2800      	cmp	r0, #0
 8015d8e:	da01      	bge.n	8015d94 <__ieee754_atan2+0xcc>
 8015d90:	323c      	adds	r2, #60	; 0x3c
 8015d92:	db19      	blt.n	8015dc8 <__ieee754_atan2+0x100>
 8015d94:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8015d98:	f000 fdf8 	bl	801698c <fabs>
 8015d9c:	f000 fcfc 	bl	8016798 <atan>
 8015da0:	eeb0 7b40 	vmov.f64	d7, d0
 8015da4:	2c01      	cmp	r4, #1
 8015da6:	d012      	beq.n	8015dce <__ieee754_atan2+0x106>
 8015da8:	2c02      	cmp	r4, #2
 8015daa:	d019      	beq.n	8015de0 <__ieee754_atan2+0x118>
 8015dac:	2c00      	cmp	r4, #0
 8015dae:	d0ab      	beq.n	8015d08 <__ieee754_atan2+0x40>
 8015db0:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8015e20 <__ieee754_atan2+0x158>
 8015db4:	ee37 7b40 	vsub.f64	d7, d7, d0
 8015db8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8015e28 <__ieee754_atan2+0x160>
 8015dbc:	ee37 7b40 	vsub.f64	d7, d7, d0
 8015dc0:	e7a2      	b.n	8015d08 <__ieee754_atan2+0x40>
 8015dc2:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8015e10 <__ieee754_atan2+0x148>
 8015dc6:	e7ed      	b.n	8015da4 <__ieee754_atan2+0xdc>
 8015dc8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8015e30 <__ieee754_atan2+0x168>
 8015dcc:	e7ea      	b.n	8015da4 <__ieee754_atan2+0xdc>
 8015dce:	ee17 1a90 	vmov	r1, s15
 8015dd2:	ec53 2b17 	vmov	r2, r3, d7
 8015dd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015dda:	ec43 2b17 	vmov	d7, r2, r3
 8015dde:	e793      	b.n	8015d08 <__ieee754_atan2+0x40>
 8015de0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8015e20 <__ieee754_atan2+0x158>
 8015de4:	ee37 7b40 	vsub.f64	d7, d7, d0
 8015de8:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8015e28 <__ieee754_atan2+0x160>
 8015dec:	ee30 7b47 	vsub.f64	d7, d0, d7
 8015df0:	e78a      	b.n	8015d08 <__ieee754_atan2+0x40>
 8015df2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8015e28 <__ieee754_atan2+0x160>
 8015df6:	e787      	b.n	8015d08 <__ieee754_atan2+0x40>
 8015df8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8015e38 <__ieee754_atan2+0x170>
 8015dfc:	e784      	b.n	8015d08 <__ieee754_atan2+0x40>
 8015dfe:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8015e30 <__ieee754_atan2+0x168>
 8015e02:	e781      	b.n	8015d08 <__ieee754_atan2+0x40>
 8015e04:	f3af 8000 	nop.w
 8015e08:	54442d18 	.word	0x54442d18
 8015e0c:	c00921fb 	.word	0xc00921fb
 8015e10:	54442d18 	.word	0x54442d18
 8015e14:	3ff921fb 	.word	0x3ff921fb
 8015e18:	54442d18 	.word	0x54442d18
 8015e1c:	bff921fb 	.word	0xbff921fb
 8015e20:	33145c07 	.word	0x33145c07
 8015e24:	3ca1a626 	.word	0x3ca1a626
 8015e28:	54442d18 	.word	0x54442d18
 8015e2c:	400921fb 	.word	0x400921fb
	...
 8015e38:	54442d18 	.word	0x54442d18
 8015e3c:	3fe921fb 	.word	0x3fe921fb
 8015e40:	7ff00000 	.word	0x7ff00000
 8015e44:	08016c18 	.word	0x08016c18
 8015e48:	08016c30 	.word	0x08016c30
 8015e4c:	00000000 	.word	0x00000000

08015e50 <__ieee754_rem_pio2>:
 8015e50:	b570      	push	{r4, r5, r6, lr}
 8015e52:	eeb0 7b40 	vmov.f64	d7, d0
 8015e56:	ee17 5a90 	vmov	r5, s15
 8015e5a:	4b99      	ldr	r3, [pc, #612]	; (80160c0 <__ieee754_rem_pio2+0x270>)
 8015e5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015e60:	429e      	cmp	r6, r3
 8015e62:	b088      	sub	sp, #32
 8015e64:	4604      	mov	r4, r0
 8015e66:	dc07      	bgt.n	8015e78 <__ieee754_rem_pio2+0x28>
 8015e68:	2200      	movs	r2, #0
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	ed84 0b00 	vstr	d0, [r4]
 8015e70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015e74:	2000      	movs	r0, #0
 8015e76:	e01b      	b.n	8015eb0 <__ieee754_rem_pio2+0x60>
 8015e78:	4b92      	ldr	r3, [pc, #584]	; (80160c4 <__ieee754_rem_pio2+0x274>)
 8015e7a:	429e      	cmp	r6, r3
 8015e7c:	dc3b      	bgt.n	8015ef6 <__ieee754_rem_pio2+0xa6>
 8015e7e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8015e82:	2d00      	cmp	r5, #0
 8015e84:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8016080 <__ieee754_rem_pio2+0x230>
 8015e88:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8015e8c:	dd19      	ble.n	8015ec2 <__ieee754_rem_pio2+0x72>
 8015e8e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8015e92:	429e      	cmp	r6, r3
 8015e94:	d00e      	beq.n	8015eb4 <__ieee754_rem_pio2+0x64>
 8015e96:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8016088 <__ieee754_rem_pio2+0x238>
 8015e9a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8015e9e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8015ea2:	ed84 5b00 	vstr	d5, [r4]
 8015ea6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015eaa:	ed84 7b02 	vstr	d7, [r4, #8]
 8015eae:	2001      	movs	r0, #1
 8015eb0:	b008      	add	sp, #32
 8015eb2:	bd70      	pop	{r4, r5, r6, pc}
 8015eb4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8016090 <__ieee754_rem_pio2+0x240>
 8015eb8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015ebc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8016098 <__ieee754_rem_pio2+0x248>
 8015ec0:	e7eb      	b.n	8015e9a <__ieee754_rem_pio2+0x4a>
 8015ec2:	429e      	cmp	r6, r3
 8015ec4:	ee30 7b06 	vadd.f64	d7, d0, d6
 8015ec8:	d00e      	beq.n	8015ee8 <__ieee754_rem_pio2+0x98>
 8015eca:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8016088 <__ieee754_rem_pio2+0x238>
 8015ece:	ee37 5b06 	vadd.f64	d5, d7, d6
 8015ed2:	ee37 7b45 	vsub.f64	d7, d7, d5
 8015ed6:	ed84 5b00 	vstr	d5, [r4]
 8015eda:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015ede:	f04f 30ff 	mov.w	r0, #4294967295
 8015ee2:	ed84 7b02 	vstr	d7, [r4, #8]
 8015ee6:	e7e3      	b.n	8015eb0 <__ieee754_rem_pio2+0x60>
 8015ee8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8016090 <__ieee754_rem_pio2+0x240>
 8015eec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015ef0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8016098 <__ieee754_rem_pio2+0x248>
 8015ef4:	e7eb      	b.n	8015ece <__ieee754_rem_pio2+0x7e>
 8015ef6:	4b74      	ldr	r3, [pc, #464]	; (80160c8 <__ieee754_rem_pio2+0x278>)
 8015ef8:	429e      	cmp	r6, r3
 8015efa:	dc70      	bgt.n	8015fde <__ieee754_rem_pio2+0x18e>
 8015efc:	f000 fd46 	bl	801698c <fabs>
 8015f00:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8015f04:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80160a0 <__ieee754_rem_pio2+0x250>
 8015f08:	eea0 7b06 	vfma.f64	d7, d0, d6
 8015f0c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8015f10:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8015f14:	ee17 0a90 	vmov	r0, s15
 8015f18:	eeb1 4b45 	vneg.f64	d4, d5
 8015f1c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8016080 <__ieee754_rem_pio2+0x230>
 8015f20:	eea5 0b47 	vfms.f64	d0, d5, d7
 8015f24:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8016088 <__ieee754_rem_pio2+0x238>
 8015f28:	281f      	cmp	r0, #31
 8015f2a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8015f2e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015f32:	dc08      	bgt.n	8015f46 <__ieee754_rem_pio2+0xf6>
 8015f34:	4b65      	ldr	r3, [pc, #404]	; (80160cc <__ieee754_rem_pio2+0x27c>)
 8015f36:	1e42      	subs	r2, r0, #1
 8015f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f3c:	42b3      	cmp	r3, r6
 8015f3e:	d002      	beq.n	8015f46 <__ieee754_rem_pio2+0xf6>
 8015f40:	ed84 6b00 	vstr	d6, [r4]
 8015f44:	e026      	b.n	8015f94 <__ieee754_rem_pio2+0x144>
 8015f46:	ee16 3a90 	vmov	r3, s13
 8015f4a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015f4e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8015f52:	2b10      	cmp	r3, #16
 8015f54:	ea4f 5226 	mov.w	r2, r6, asr #20
 8015f58:	ddf2      	ble.n	8015f40 <__ieee754_rem_pio2+0xf0>
 8015f5a:	eeb0 6b40 	vmov.f64	d6, d0
 8015f5e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8016090 <__ieee754_rem_pio2+0x240>
 8015f62:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8016098 <__ieee754_rem_pio2+0x248>
 8015f66:	eea4 6b07 	vfma.f64	d6, d4, d7
 8015f6a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015f6e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8015f72:	eeb0 7b40 	vmov.f64	d7, d0
 8015f76:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8015f7a:	ee36 3b47 	vsub.f64	d3, d6, d7
 8015f7e:	ee13 3a90 	vmov	r3, s7
 8015f82:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015f86:	1ad3      	subs	r3, r2, r3
 8015f88:	2b31      	cmp	r3, #49	; 0x31
 8015f8a:	dc17      	bgt.n	8015fbc <__ieee754_rem_pio2+0x16c>
 8015f8c:	eeb0 0b46 	vmov.f64	d0, d6
 8015f90:	ed84 3b00 	vstr	d3, [r4]
 8015f94:	ed94 6b00 	vldr	d6, [r4]
 8015f98:	2d00      	cmp	r5, #0
 8015f9a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015f9e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015fa2:	ed84 0b02 	vstr	d0, [r4, #8]
 8015fa6:	da83      	bge.n	8015eb0 <__ieee754_rem_pio2+0x60>
 8015fa8:	eeb1 6b46 	vneg.f64	d6, d6
 8015fac:	eeb1 0b40 	vneg.f64	d0, d0
 8015fb0:	ed84 6b00 	vstr	d6, [r4]
 8015fb4:	ed84 0b02 	vstr	d0, [r4, #8]
 8015fb8:	4240      	negs	r0, r0
 8015fba:	e779      	b.n	8015eb0 <__ieee754_rem_pio2+0x60>
 8015fbc:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 80160a8 <__ieee754_rem_pio2+0x258>
 8015fc0:	eeb0 0b46 	vmov.f64	d0, d6
 8015fc4:	eea4 0b03 	vfma.f64	d0, d4, d3
 8015fc8:	ee36 7b40 	vsub.f64	d7, d6, d0
 8015fcc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80160b0 <__ieee754_rem_pio2+0x260>
 8015fd0:	eea4 7b03 	vfma.f64	d7, d4, d3
 8015fd4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8015fd8:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015fdc:	e7b0      	b.n	8015f40 <__ieee754_rem_pio2+0xf0>
 8015fde:	4b3c      	ldr	r3, [pc, #240]	; (80160d0 <__ieee754_rem_pio2+0x280>)
 8015fe0:	429e      	cmp	r6, r3
 8015fe2:	dd06      	ble.n	8015ff2 <__ieee754_rem_pio2+0x1a2>
 8015fe4:	ee30 7b40 	vsub.f64	d7, d0, d0
 8015fe8:	ed80 7b02 	vstr	d7, [r0, #8]
 8015fec:	ed80 7b00 	vstr	d7, [r0]
 8015ff0:	e740      	b.n	8015e74 <__ieee754_rem_pio2+0x24>
 8015ff2:	1532      	asrs	r2, r6, #20
 8015ff4:	ee10 0a10 	vmov	r0, s0
 8015ff8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8015ffc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8016000:	ec41 0b17 	vmov	d7, r0, r1
 8016004:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8016008:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80160b8 <__ieee754_rem_pio2+0x268>
 801600c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8016010:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016014:	ed8d 6b02 	vstr	d6, [sp, #8]
 8016018:	ee27 7b05 	vmul.f64	d7, d7, d5
 801601c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8016020:	a902      	add	r1, sp, #8
 8016022:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8016026:	ee37 7b46 	vsub.f64	d7, d7, d6
 801602a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801602e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016032:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016036:	2603      	movs	r6, #3
 8016038:	4608      	mov	r0, r1
 801603a:	ed91 7b04 	vldr	d7, [r1, #16]
 801603e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016046:	4633      	mov	r3, r6
 8016048:	f1a1 0108 	sub.w	r1, r1, #8
 801604c:	f106 36ff 	add.w	r6, r6, #4294967295
 8016050:	d0f3      	beq.n	801603a <__ieee754_rem_pio2+0x1ea>
 8016052:	4920      	ldr	r1, [pc, #128]	; (80160d4 <__ieee754_rem_pio2+0x284>)
 8016054:	9101      	str	r1, [sp, #4]
 8016056:	2102      	movs	r1, #2
 8016058:	9100      	str	r1, [sp, #0]
 801605a:	4621      	mov	r1, r4
 801605c:	f000 f8ac 	bl	80161b8 <__kernel_rem_pio2>
 8016060:	2d00      	cmp	r5, #0
 8016062:	f6bf af25 	bge.w	8015eb0 <__ieee754_rem_pio2+0x60>
 8016066:	ed94 7b00 	vldr	d7, [r4]
 801606a:	eeb1 7b47 	vneg.f64	d7, d7
 801606e:	ed84 7b00 	vstr	d7, [r4]
 8016072:	ed94 7b02 	vldr	d7, [r4, #8]
 8016076:	eeb1 7b47 	vneg.f64	d7, d7
 801607a:	ed84 7b02 	vstr	d7, [r4, #8]
 801607e:	e79b      	b.n	8015fb8 <__ieee754_rem_pio2+0x168>
 8016080:	54400000 	.word	0x54400000
 8016084:	3ff921fb 	.word	0x3ff921fb
 8016088:	1a626331 	.word	0x1a626331
 801608c:	3dd0b461 	.word	0x3dd0b461
 8016090:	1a600000 	.word	0x1a600000
 8016094:	3dd0b461 	.word	0x3dd0b461
 8016098:	2e037073 	.word	0x2e037073
 801609c:	3ba3198a 	.word	0x3ba3198a
 80160a0:	6dc9c883 	.word	0x6dc9c883
 80160a4:	3fe45f30 	.word	0x3fe45f30
 80160a8:	2e000000 	.word	0x2e000000
 80160ac:	3ba3198a 	.word	0x3ba3198a
 80160b0:	252049c1 	.word	0x252049c1
 80160b4:	397b839a 	.word	0x397b839a
 80160b8:	00000000 	.word	0x00000000
 80160bc:	41700000 	.word	0x41700000
 80160c0:	3fe921fb 	.word	0x3fe921fb
 80160c4:	4002d97b 	.word	0x4002d97b
 80160c8:	413921fb 	.word	0x413921fb
 80160cc:	08016c48 	.word	0x08016c48
 80160d0:	7fefffff 	.word	0x7fefffff
 80160d4:	08016cc8 	.word	0x08016cc8

080160d8 <__ieee754_sqrt>:
 80160d8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80160dc:	4770      	bx	lr
	...

080160e0 <__kernel_cos>:
 80160e0:	ee10 1a90 	vmov	r1, s1
 80160e4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80160e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80160ec:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80160f0:	da05      	bge.n	80160fe <__kernel_cos+0x1e>
 80160f2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80160f6:	ee17 3a90 	vmov	r3, s15
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d03d      	beq.n	801617a <__kernel_cos+0x9a>
 80160fe:	ee20 3b00 	vmul.f64	d3, d0, d0
 8016102:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8016180 <__kernel_cos+0xa0>
 8016106:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8016188 <__kernel_cos+0xa8>
 801610a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801610e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8016190 <__kernel_cos+0xb0>
 8016112:	eea6 7b03 	vfma.f64	d7, d6, d3
 8016116:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8016198 <__kernel_cos+0xb8>
 801611a:	eea7 6b03 	vfma.f64	d6, d7, d3
 801611e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80161a0 <__kernel_cos+0xc0>
 8016122:	4b23      	ldr	r3, [pc, #140]	; (80161b0 <__kernel_cos+0xd0>)
 8016124:	eea6 7b03 	vfma.f64	d7, d6, d3
 8016128:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80161a8 <__kernel_cos+0xc8>
 801612c:	4299      	cmp	r1, r3
 801612e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8016132:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8016136:	ee26 5b03 	vmul.f64	d5, d6, d3
 801613a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801613e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8016142:	eea3 6b05 	vfma.f64	d6, d3, d5
 8016146:	dc04      	bgt.n	8016152 <__kernel_cos+0x72>
 8016148:	ee37 6b46 	vsub.f64	d6, d7, d6
 801614c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8016150:	4770      	bx	lr
 8016152:	4b18      	ldr	r3, [pc, #96]	; (80161b4 <__kernel_cos+0xd4>)
 8016154:	4299      	cmp	r1, r3
 8016156:	dc0d      	bgt.n	8016174 <__kernel_cos+0x94>
 8016158:	2200      	movs	r2, #0
 801615a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801615e:	ec43 2b15 	vmov	d5, r2, r3
 8016162:	ee34 0b45 	vsub.f64	d0, d4, d5
 8016166:	ee37 7b45 	vsub.f64	d7, d7, d5
 801616a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801616e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8016172:	4770      	bx	lr
 8016174:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8016178:	e7f3      	b.n	8016162 <__kernel_cos+0x82>
 801617a:	eeb0 0b44 	vmov.f64	d0, d4
 801617e:	4770      	bx	lr
 8016180:	be8838d4 	.word	0xbe8838d4
 8016184:	bda8fae9 	.word	0xbda8fae9
 8016188:	bdb4b1c4 	.word	0xbdb4b1c4
 801618c:	3e21ee9e 	.word	0x3e21ee9e
 8016190:	809c52ad 	.word	0x809c52ad
 8016194:	be927e4f 	.word	0xbe927e4f
 8016198:	19cb1590 	.word	0x19cb1590
 801619c:	3efa01a0 	.word	0x3efa01a0
 80161a0:	16c15177 	.word	0x16c15177
 80161a4:	bf56c16c 	.word	0xbf56c16c
 80161a8:	5555554c 	.word	0x5555554c
 80161ac:	3fa55555 	.word	0x3fa55555
 80161b0:	3fd33332 	.word	0x3fd33332
 80161b4:	3fe90000 	.word	0x3fe90000

080161b8 <__kernel_rem_pio2>:
 80161b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161bc:	ed2d 8b06 	vpush	{d8-d10}
 80161c0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80161c4:	460f      	mov	r7, r1
 80161c6:	9002      	str	r0, [sp, #8]
 80161c8:	49c5      	ldr	r1, [pc, #788]	; (80164e0 <__kernel_rem_pio2+0x328>)
 80161ca:	98a2      	ldr	r0, [sp, #648]	; 0x288
 80161cc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 80161d0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80161d4:	9301      	str	r3, [sp, #4]
 80161d6:	f112 0f14 	cmn.w	r2, #20
 80161da:	bfa8      	it	ge
 80161dc:	2018      	movge	r0, #24
 80161de:	f103 31ff 	add.w	r1, r3, #4294967295
 80161e2:	bfb8      	it	lt
 80161e4:	2000      	movlt	r0, #0
 80161e6:	f06f 0417 	mvn.w	r4, #23
 80161ea:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80164c8 <__kernel_rem_pio2+0x310>
 80161ee:	bfa4      	itt	ge
 80161f0:	f1a2 0a03 	subge.w	sl, r2, #3
 80161f4:	fb9a f0f0 	sdivge	r0, sl, r0
 80161f8:	fb00 4404 	mla	r4, r0, r4, r4
 80161fc:	1a46      	subs	r6, r0, r1
 80161fe:	4414      	add	r4, r2
 8016200:	eb09 0c01 	add.w	ip, r9, r1
 8016204:	ad1a      	add	r5, sp, #104	; 0x68
 8016206:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 801620a:	2200      	movs	r2, #0
 801620c:	4562      	cmp	r2, ip
 801620e:	dd10      	ble.n	8016232 <__kernel_rem_pio2+0x7a>
 8016210:	9a01      	ldr	r2, [sp, #4]
 8016212:	ab1a      	add	r3, sp, #104	; 0x68
 8016214:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8016218:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801621c:	f04f 0c00 	mov.w	ip, #0
 8016220:	45cc      	cmp	ip, r9
 8016222:	dc26      	bgt.n	8016272 <__kernel_rem_pio2+0xba>
 8016224:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80164c8 <__kernel_rem_pio2+0x310>
 8016228:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801622c:	4616      	mov	r6, r2
 801622e:	2500      	movs	r5, #0
 8016230:	e015      	b.n	801625e <__kernel_rem_pio2+0xa6>
 8016232:	42d6      	cmn	r6, r2
 8016234:	d409      	bmi.n	801624a <__kernel_rem_pio2+0x92>
 8016236:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801623a:	ee07 3a90 	vmov	s15, r3
 801623e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016242:	eca5 7b02 	vstmia	r5!, {d7}
 8016246:	3201      	adds	r2, #1
 8016248:	e7e0      	b.n	801620c <__kernel_rem_pio2+0x54>
 801624a:	eeb0 7b46 	vmov.f64	d7, d6
 801624e:	e7f8      	b.n	8016242 <__kernel_rem_pio2+0x8a>
 8016250:	ecb8 5b02 	vldmia	r8!, {d5}
 8016254:	ed96 6b00 	vldr	d6, [r6]
 8016258:	3501      	adds	r5, #1
 801625a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801625e:	428d      	cmp	r5, r1
 8016260:	f1a6 0608 	sub.w	r6, r6, #8
 8016264:	ddf4      	ble.n	8016250 <__kernel_rem_pio2+0x98>
 8016266:	ecaa 7b02 	vstmia	sl!, {d7}
 801626a:	f10c 0c01 	add.w	ip, ip, #1
 801626e:	3208      	adds	r2, #8
 8016270:	e7d6      	b.n	8016220 <__kernel_rem_pio2+0x68>
 8016272:	ab06      	add	r3, sp, #24
 8016274:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80164d0 <__kernel_rem_pio2+0x318>
 8016278:	ed9f ab97 	vldr	d10, [pc, #604]	; 80164d8 <__kernel_rem_pio2+0x320>
 801627c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8016280:	9303      	str	r3, [sp, #12]
 8016282:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8016286:	464d      	mov	r5, r9
 8016288:	00eb      	lsls	r3, r5, #3
 801628a:	9304      	str	r3, [sp, #16]
 801628c:	ab92      	add	r3, sp, #584	; 0x248
 801628e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8016292:	f10d 0b18 	add.w	fp, sp, #24
 8016296:	ab6a      	add	r3, sp, #424	; 0x1a8
 8016298:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801629c:	465e      	mov	r6, fp
 801629e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80162a2:	4628      	mov	r0, r5
 80162a4:	2800      	cmp	r0, #0
 80162a6:	f1a2 0208 	sub.w	r2, r2, #8
 80162aa:	dc4c      	bgt.n	8016346 <__kernel_rem_pio2+0x18e>
 80162ac:	4620      	mov	r0, r4
 80162ae:	9105      	str	r1, [sp, #20]
 80162b0:	f000 fbea 	bl	8016a88 <scalbn>
 80162b4:	eeb0 8b40 	vmov.f64	d8, d0
 80162b8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80162bc:	ee28 0b00 	vmul.f64	d0, d8, d0
 80162c0:	f000 fb6e 	bl	80169a0 <floor>
 80162c4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80162c8:	eea0 8b47 	vfms.f64	d8, d0, d7
 80162cc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80162d0:	2c00      	cmp	r4, #0
 80162d2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80162d6:	ee17 8a90 	vmov	r8, s15
 80162da:	ee38 8b40 	vsub.f64	d8, d8, d0
 80162de:	9905      	ldr	r1, [sp, #20]
 80162e0:	dd43      	ble.n	801636a <__kernel_rem_pio2+0x1b2>
 80162e2:	1e68      	subs	r0, r5, #1
 80162e4:	ab06      	add	r3, sp, #24
 80162e6:	f1c4 0c18 	rsb	ip, r4, #24
 80162ea:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80162ee:	fa46 f20c 	asr.w	r2, r6, ip
 80162f2:	4490      	add	r8, r2
 80162f4:	fa02 f20c 	lsl.w	r2, r2, ip
 80162f8:	1ab6      	subs	r6, r6, r2
 80162fa:	f1c4 0217 	rsb	r2, r4, #23
 80162fe:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8016302:	4116      	asrs	r6, r2
 8016304:	2e00      	cmp	r6, #0
 8016306:	dd3f      	ble.n	8016388 <__kernel_rem_pio2+0x1d0>
 8016308:	f04f 0c00 	mov.w	ip, #0
 801630c:	f108 0801 	add.w	r8, r8, #1
 8016310:	4660      	mov	r0, ip
 8016312:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8016316:	4565      	cmp	r5, ip
 8016318:	dc6e      	bgt.n	80163f8 <__kernel_rem_pio2+0x240>
 801631a:	2c00      	cmp	r4, #0
 801631c:	dd04      	ble.n	8016328 <__kernel_rem_pio2+0x170>
 801631e:	2c01      	cmp	r4, #1
 8016320:	d07f      	beq.n	8016422 <__kernel_rem_pio2+0x26a>
 8016322:	2c02      	cmp	r4, #2
 8016324:	f000 8087 	beq.w	8016436 <__kernel_rem_pio2+0x27e>
 8016328:	2e02      	cmp	r6, #2
 801632a:	d12d      	bne.n	8016388 <__kernel_rem_pio2+0x1d0>
 801632c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016330:	ee30 8b48 	vsub.f64	d8, d0, d8
 8016334:	b340      	cbz	r0, 8016388 <__kernel_rem_pio2+0x1d0>
 8016336:	4620      	mov	r0, r4
 8016338:	9105      	str	r1, [sp, #20]
 801633a:	f000 fba5 	bl	8016a88 <scalbn>
 801633e:	9905      	ldr	r1, [sp, #20]
 8016340:	ee38 8b40 	vsub.f64	d8, d8, d0
 8016344:	e020      	b.n	8016388 <__kernel_rem_pio2+0x1d0>
 8016346:	ee20 7b09 	vmul.f64	d7, d0, d9
 801634a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801634e:	3801      	subs	r0, #1
 8016350:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8016354:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8016358:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801635c:	eca6 0a01 	vstmia	r6!, {s0}
 8016360:	ed92 0b00 	vldr	d0, [r2]
 8016364:	ee37 0b00 	vadd.f64	d0, d7, d0
 8016368:	e79c      	b.n	80162a4 <__kernel_rem_pio2+0xec>
 801636a:	d105      	bne.n	8016378 <__kernel_rem_pio2+0x1c0>
 801636c:	1e6a      	subs	r2, r5, #1
 801636e:	ab06      	add	r3, sp, #24
 8016370:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8016374:	15f6      	asrs	r6, r6, #23
 8016376:	e7c5      	b.n	8016304 <__kernel_rem_pio2+0x14c>
 8016378:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801637c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016384:	da36      	bge.n	80163f4 <__kernel_rem_pio2+0x23c>
 8016386:	2600      	movs	r6, #0
 8016388:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801638c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016390:	f040 80aa 	bne.w	80164e8 <__kernel_rem_pio2+0x330>
 8016394:	f105 3bff 	add.w	fp, r5, #4294967295
 8016398:	4658      	mov	r0, fp
 801639a:	2200      	movs	r2, #0
 801639c:	4548      	cmp	r0, r9
 801639e:	da52      	bge.n	8016446 <__kernel_rem_pio2+0x28e>
 80163a0:	2a00      	cmp	r2, #0
 80163a2:	f000 8081 	beq.w	80164a8 <__kernel_rem_pio2+0x2f0>
 80163a6:	ab06      	add	r3, sp, #24
 80163a8:	3c18      	subs	r4, #24
 80163aa:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	f000 8087 	beq.w	80164c2 <__kernel_rem_pio2+0x30a>
 80163b4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80163b8:	4620      	mov	r0, r4
 80163ba:	f000 fb65 	bl	8016a88 <scalbn>
 80163be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80163c2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80164d0 <__kernel_rem_pio2+0x318>
 80163c6:	a96a      	add	r1, sp, #424	; 0x1a8
 80163c8:	f103 0208 	add.w	r2, r3, #8
 80163cc:	1888      	adds	r0, r1, r2
 80163ce:	4659      	mov	r1, fp
 80163d0:	2900      	cmp	r1, #0
 80163d2:	f280 80b7 	bge.w	8016544 <__kernel_rem_pio2+0x38c>
 80163d6:	4659      	mov	r1, fp
 80163d8:	2900      	cmp	r1, #0
 80163da:	f2c0 80d5 	blt.w	8016588 <__kernel_rem_pio2+0x3d0>
 80163de:	a86a      	add	r0, sp, #424	; 0x1a8
 80163e0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80163e4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80164c8 <__kernel_rem_pio2+0x310>
 80163e8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80164e4 <__kernel_rem_pio2+0x32c>
 80163ec:	2400      	movs	r4, #0
 80163ee:	ebab 0001 	sub.w	r0, fp, r1
 80163f2:	e0be      	b.n	8016572 <__kernel_rem_pio2+0x3ba>
 80163f4:	2602      	movs	r6, #2
 80163f6:	e787      	b.n	8016308 <__kernel_rem_pio2+0x150>
 80163f8:	f8db 2000 	ldr.w	r2, [fp]
 80163fc:	b958      	cbnz	r0, 8016416 <__kernel_rem_pio2+0x25e>
 80163fe:	b122      	cbz	r2, 801640a <__kernel_rem_pio2+0x252>
 8016400:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8016404:	f8cb 2000 	str.w	r2, [fp]
 8016408:	2201      	movs	r2, #1
 801640a:	f10c 0c01 	add.w	ip, ip, #1
 801640e:	f10b 0b04 	add.w	fp, fp, #4
 8016412:	4610      	mov	r0, r2
 8016414:	e77f      	b.n	8016316 <__kernel_rem_pio2+0x15e>
 8016416:	ebae 0202 	sub.w	r2, lr, r2
 801641a:	f8cb 2000 	str.w	r2, [fp]
 801641e:	4602      	mov	r2, r0
 8016420:	e7f3      	b.n	801640a <__kernel_rem_pio2+0x252>
 8016422:	f105 3cff 	add.w	ip, r5, #4294967295
 8016426:	ab06      	add	r3, sp, #24
 8016428:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801642c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8016430:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8016434:	e778      	b.n	8016328 <__kernel_rem_pio2+0x170>
 8016436:	f105 3cff 	add.w	ip, r5, #4294967295
 801643a:	ab06      	add	r3, sp, #24
 801643c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8016440:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8016444:	e7f4      	b.n	8016430 <__kernel_rem_pio2+0x278>
 8016446:	ab06      	add	r3, sp, #24
 8016448:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801644c:	3801      	subs	r0, #1
 801644e:	431a      	orrs	r2, r3
 8016450:	e7a4      	b.n	801639c <__kernel_rem_pio2+0x1e4>
 8016452:	f10c 0c01 	add.w	ip, ip, #1
 8016456:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801645a:	2800      	cmp	r0, #0
 801645c:	d0f9      	beq.n	8016452 <__kernel_rem_pio2+0x29a>
 801645e:	9b04      	ldr	r3, [sp, #16]
 8016460:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8016464:	eb0d 0203 	add.w	r2, sp, r3
 8016468:	9b01      	ldr	r3, [sp, #4]
 801646a:	18e8      	adds	r0, r5, r3
 801646c:	ab1a      	add	r3, sp, #104	; 0x68
 801646e:	1c6e      	adds	r6, r5, #1
 8016470:	3a98      	subs	r2, #152	; 0x98
 8016472:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8016476:	4465      	add	r5, ip
 8016478:	42b5      	cmp	r5, r6
 801647a:	f6ff af05 	blt.w	8016288 <__kernel_rem_pio2+0xd0>
 801647e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8016482:	f8dd e008 	ldr.w	lr, [sp, #8]
 8016486:	ee07 3a90 	vmov	s15, r3
 801648a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801648e:	f04f 0c00 	mov.w	ip, #0
 8016492:	eca0 7b02 	vstmia	r0!, {d7}
 8016496:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80164c8 <__kernel_rem_pio2+0x310>
 801649a:	4680      	mov	r8, r0
 801649c:	458c      	cmp	ip, r1
 801649e:	dd07      	ble.n	80164b0 <__kernel_rem_pio2+0x2f8>
 80164a0:	eca2 7b02 	vstmia	r2!, {d7}
 80164a4:	3601      	adds	r6, #1
 80164a6:	e7e7      	b.n	8016478 <__kernel_rem_pio2+0x2c0>
 80164a8:	9a03      	ldr	r2, [sp, #12]
 80164aa:	f04f 0c01 	mov.w	ip, #1
 80164ae:	e7d2      	b.n	8016456 <__kernel_rem_pio2+0x29e>
 80164b0:	ecbe 5b02 	vldmia	lr!, {d5}
 80164b4:	ed38 6b02 	vldmdb	r8!, {d6}
 80164b8:	f10c 0c01 	add.w	ip, ip, #1
 80164bc:	eea5 7b06 	vfma.f64	d7, d5, d6
 80164c0:	e7ec      	b.n	801649c <__kernel_rem_pio2+0x2e4>
 80164c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80164c6:	e76e      	b.n	80163a6 <__kernel_rem_pio2+0x1ee>
	...
 80164d4:	3e700000 	.word	0x3e700000
 80164d8:	00000000 	.word	0x00000000
 80164dc:	41700000 	.word	0x41700000
 80164e0:	08016e10 	.word	0x08016e10
 80164e4:	08016dd0 	.word	0x08016dd0
 80164e8:	4260      	negs	r0, r4
 80164ea:	eeb0 0b48 	vmov.f64	d0, d8
 80164ee:	f000 facb 	bl	8016a88 <scalbn>
 80164f2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80166d0 <__kernel_rem_pio2+0x518>
 80164f6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80164fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164fe:	db18      	blt.n	8016532 <__kernel_rem_pio2+0x37a>
 8016500:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80166d8 <__kernel_rem_pio2+0x520>
 8016504:	ee20 7b07 	vmul.f64	d7, d0, d7
 8016508:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801650c:	aa06      	add	r2, sp, #24
 801650e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8016512:	eea5 0b46 	vfms.f64	d0, d5, d6
 8016516:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801651a:	f105 0b01 	add.w	fp, r5, #1
 801651e:	ee10 3a10 	vmov	r3, s0
 8016522:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8016526:	ee17 3a10 	vmov	r3, s14
 801652a:	3418      	adds	r4, #24
 801652c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8016530:	e740      	b.n	80163b4 <__kernel_rem_pio2+0x1fc>
 8016532:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8016536:	aa06      	add	r2, sp, #24
 8016538:	ee10 3a10 	vmov	r3, s0
 801653c:	46ab      	mov	fp, r5
 801653e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8016542:	e737      	b.n	80163b4 <__kernel_rem_pio2+0x1fc>
 8016544:	ac06      	add	r4, sp, #24
 8016546:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801654a:	9401      	str	r4, [sp, #4]
 801654c:	ee07 4a90 	vmov	s15, r4
 8016550:	3901      	subs	r1, #1
 8016552:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016556:	ee27 7b00 	vmul.f64	d7, d7, d0
 801655a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801655e:	ed20 7b02 	vstmdb	r0!, {d7}
 8016562:	e735      	b.n	80163d0 <__kernel_rem_pio2+0x218>
 8016564:	ecbc 5b02 	vldmia	ip!, {d5}
 8016568:	ecb5 6b02 	vldmia	r5!, {d6}
 801656c:	3401      	adds	r4, #1
 801656e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016572:	454c      	cmp	r4, r9
 8016574:	dc01      	bgt.n	801657a <__kernel_rem_pio2+0x3c2>
 8016576:	4284      	cmp	r4, r0
 8016578:	ddf4      	ble.n	8016564 <__kernel_rem_pio2+0x3ac>
 801657a:	ac42      	add	r4, sp, #264	; 0x108
 801657c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8016580:	ed80 7b00 	vstr	d7, [r0]
 8016584:	3901      	subs	r1, #1
 8016586:	e727      	b.n	80163d8 <__kernel_rem_pio2+0x220>
 8016588:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801658a:	2902      	cmp	r1, #2
 801658c:	dc0a      	bgt.n	80165a4 <__kernel_rem_pio2+0x3ec>
 801658e:	2900      	cmp	r1, #0
 8016590:	dc2c      	bgt.n	80165ec <__kernel_rem_pio2+0x434>
 8016592:	d045      	beq.n	8016620 <__kernel_rem_pio2+0x468>
 8016594:	f008 0007 	and.w	r0, r8, #7
 8016598:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801659c:	ecbd 8b06 	vpop	{d8-d10}
 80165a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165a4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80165a6:	2a03      	cmp	r2, #3
 80165a8:	d1f4      	bne.n	8016594 <__kernel_rem_pio2+0x3dc>
 80165aa:	aa42      	add	r2, sp, #264	; 0x108
 80165ac:	4413      	add	r3, r2
 80165ae:	461a      	mov	r2, r3
 80165b0:	4619      	mov	r1, r3
 80165b2:	4658      	mov	r0, fp
 80165b4:	2800      	cmp	r0, #0
 80165b6:	f1a1 0108 	sub.w	r1, r1, #8
 80165ba:	dc54      	bgt.n	8016666 <__kernel_rem_pio2+0x4ae>
 80165bc:	4659      	mov	r1, fp
 80165be:	2901      	cmp	r1, #1
 80165c0:	f1a2 0208 	sub.w	r2, r2, #8
 80165c4:	dc5f      	bgt.n	8016686 <__kernel_rem_pio2+0x4ce>
 80165c6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80166e0 <__kernel_rem_pio2+0x528>
 80165ca:	3308      	adds	r3, #8
 80165cc:	f1bb 0f01 	cmp.w	fp, #1
 80165d0:	dc69      	bgt.n	80166a6 <__kernel_rem_pio2+0x4ee>
 80165d2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80165d6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80165da:	2e00      	cmp	r6, #0
 80165dc:	d16a      	bne.n	80166b4 <__kernel_rem_pio2+0x4fc>
 80165de:	ed87 5b00 	vstr	d5, [r7]
 80165e2:	ed87 6b02 	vstr	d6, [r7, #8]
 80165e6:	ed87 7b04 	vstr	d7, [r7, #16]
 80165ea:	e7d3      	b.n	8016594 <__kernel_rem_pio2+0x3dc>
 80165ec:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80166e0 <__kernel_rem_pio2+0x528>
 80165f0:	ab42      	add	r3, sp, #264	; 0x108
 80165f2:	441a      	add	r2, r3
 80165f4:	465b      	mov	r3, fp
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	da26      	bge.n	8016648 <__kernel_rem_pio2+0x490>
 80165fa:	b35e      	cbz	r6, 8016654 <__kernel_rem_pio2+0x49c>
 80165fc:	eeb1 7b46 	vneg.f64	d7, d6
 8016600:	ed87 7b00 	vstr	d7, [r7]
 8016604:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8016608:	aa44      	add	r2, sp, #272	; 0x110
 801660a:	2301      	movs	r3, #1
 801660c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016610:	459b      	cmp	fp, r3
 8016612:	da22      	bge.n	801665a <__kernel_rem_pio2+0x4a2>
 8016614:	b10e      	cbz	r6, 801661a <__kernel_rem_pio2+0x462>
 8016616:	eeb1 7b47 	vneg.f64	d7, d7
 801661a:	ed87 7b02 	vstr	d7, [r7, #8]
 801661e:	e7b9      	b.n	8016594 <__kernel_rem_pio2+0x3dc>
 8016620:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80166e0 <__kernel_rem_pio2+0x528>
 8016624:	ab42      	add	r3, sp, #264	; 0x108
 8016626:	441a      	add	r2, r3
 8016628:	f1bb 0f00 	cmp.w	fp, #0
 801662c:	da05      	bge.n	801663a <__kernel_rem_pio2+0x482>
 801662e:	b10e      	cbz	r6, 8016634 <__kernel_rem_pio2+0x47c>
 8016630:	eeb1 7b47 	vneg.f64	d7, d7
 8016634:	ed87 7b00 	vstr	d7, [r7]
 8016638:	e7ac      	b.n	8016594 <__kernel_rem_pio2+0x3dc>
 801663a:	ed32 6b02 	vldmdb	r2!, {d6}
 801663e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016642:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016646:	e7ef      	b.n	8016628 <__kernel_rem_pio2+0x470>
 8016648:	ed32 7b02 	vldmdb	r2!, {d7}
 801664c:	3b01      	subs	r3, #1
 801664e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8016652:	e7d0      	b.n	80165f6 <__kernel_rem_pio2+0x43e>
 8016654:	eeb0 7b46 	vmov.f64	d7, d6
 8016658:	e7d2      	b.n	8016600 <__kernel_rem_pio2+0x448>
 801665a:	ecb2 6b02 	vldmia	r2!, {d6}
 801665e:	3301      	adds	r3, #1
 8016660:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016664:	e7d4      	b.n	8016610 <__kernel_rem_pio2+0x458>
 8016666:	ed91 7b00 	vldr	d7, [r1]
 801666a:	ed91 5b02 	vldr	d5, [r1, #8]
 801666e:	3801      	subs	r0, #1
 8016670:	ee37 6b05 	vadd.f64	d6, d7, d5
 8016674:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016678:	ed81 6b00 	vstr	d6, [r1]
 801667c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016680:	ed81 7b02 	vstr	d7, [r1, #8]
 8016684:	e796      	b.n	80165b4 <__kernel_rem_pio2+0x3fc>
 8016686:	ed92 7b00 	vldr	d7, [r2]
 801668a:	ed92 5b02 	vldr	d5, [r2, #8]
 801668e:	3901      	subs	r1, #1
 8016690:	ee37 6b05 	vadd.f64	d6, d7, d5
 8016694:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016698:	ed82 6b00 	vstr	d6, [r2]
 801669c:	ee37 7b05 	vadd.f64	d7, d7, d5
 80166a0:	ed82 7b02 	vstr	d7, [r2, #8]
 80166a4:	e78b      	b.n	80165be <__kernel_rem_pio2+0x406>
 80166a6:	ed33 6b02 	vldmdb	r3!, {d6}
 80166aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80166ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80166b2:	e78b      	b.n	80165cc <__kernel_rem_pio2+0x414>
 80166b4:	eeb1 5b45 	vneg.f64	d5, d5
 80166b8:	eeb1 6b46 	vneg.f64	d6, d6
 80166bc:	ed87 5b00 	vstr	d5, [r7]
 80166c0:	eeb1 7b47 	vneg.f64	d7, d7
 80166c4:	ed87 6b02 	vstr	d6, [r7, #8]
 80166c8:	e78d      	b.n	80165e6 <__kernel_rem_pio2+0x42e>
 80166ca:	bf00      	nop
 80166cc:	f3af 8000 	nop.w
 80166d0:	00000000 	.word	0x00000000
 80166d4:	41700000 	.word	0x41700000
 80166d8:	00000000 	.word	0x00000000
 80166dc:	3e700000 	.word	0x3e700000
	...

080166e8 <__kernel_sin>:
 80166e8:	ee10 3a90 	vmov	r3, s1
 80166ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80166f0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80166f4:	da04      	bge.n	8016700 <__kernel_sin+0x18>
 80166f6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80166fa:	ee17 3a90 	vmov	r3, s15
 80166fe:	b35b      	cbz	r3, 8016758 <__kernel_sin+0x70>
 8016700:	ee20 6b00 	vmul.f64	d6, d0, d0
 8016704:	ee20 5b06 	vmul.f64	d5, d0, d6
 8016708:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8016760 <__kernel_sin+0x78>
 801670c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8016768 <__kernel_sin+0x80>
 8016710:	eea6 4b07 	vfma.f64	d4, d6, d7
 8016714:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8016770 <__kernel_sin+0x88>
 8016718:	eea4 7b06 	vfma.f64	d7, d4, d6
 801671c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8016778 <__kernel_sin+0x90>
 8016720:	eea7 4b06 	vfma.f64	d4, d7, d6
 8016724:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8016780 <__kernel_sin+0x98>
 8016728:	eea4 7b06 	vfma.f64	d7, d4, d6
 801672c:	b930      	cbnz	r0, 801673c <__kernel_sin+0x54>
 801672e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8016788 <__kernel_sin+0xa0>
 8016732:	eea6 4b07 	vfma.f64	d4, d6, d7
 8016736:	eea4 0b05 	vfma.f64	d0, d4, d5
 801673a:	4770      	bx	lr
 801673c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8016740:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8016744:	eea1 7b04 	vfma.f64	d7, d1, d4
 8016748:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801674c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8016790 <__kernel_sin+0xa8>
 8016750:	eea5 1b07 	vfma.f64	d1, d5, d7
 8016754:	ee30 0b41 	vsub.f64	d0, d0, d1
 8016758:	4770      	bx	lr
 801675a:	bf00      	nop
 801675c:	f3af 8000 	nop.w
 8016760:	5acfd57c 	.word	0x5acfd57c
 8016764:	3de5d93a 	.word	0x3de5d93a
 8016768:	8a2b9ceb 	.word	0x8a2b9ceb
 801676c:	be5ae5e6 	.word	0xbe5ae5e6
 8016770:	57b1fe7d 	.word	0x57b1fe7d
 8016774:	3ec71de3 	.word	0x3ec71de3
 8016778:	19c161d5 	.word	0x19c161d5
 801677c:	bf2a01a0 	.word	0xbf2a01a0
 8016780:	1110f8a6 	.word	0x1110f8a6
 8016784:	3f811111 	.word	0x3f811111
 8016788:	55555549 	.word	0x55555549
 801678c:	bfc55555 	.word	0xbfc55555
 8016790:	55555549 	.word	0x55555549
 8016794:	3fc55555 	.word	0x3fc55555

08016798 <atan>:
 8016798:	b538      	push	{r3, r4, r5, lr}
 801679a:	eeb0 7b40 	vmov.f64	d7, d0
 801679e:	ee17 5a90 	vmov	r5, s15
 80167a2:	4b73      	ldr	r3, [pc, #460]	; (8016970 <atan+0x1d8>)
 80167a4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80167a8:	429c      	cmp	r4, r3
 80167aa:	dd13      	ble.n	80167d4 <atan+0x3c>
 80167ac:	4b71      	ldr	r3, [pc, #452]	; (8016974 <atan+0x1dc>)
 80167ae:	429c      	cmp	r4, r3
 80167b0:	dc03      	bgt.n	80167ba <atan+0x22>
 80167b2:	d107      	bne.n	80167c4 <atan+0x2c>
 80167b4:	ee10 3a10 	vmov	r3, s0
 80167b8:	b123      	cbz	r3, 80167c4 <atan+0x2c>
 80167ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80167be:	eeb0 0b47 	vmov.f64	d0, d7
 80167c2:	bd38      	pop	{r3, r4, r5, pc}
 80167c4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8016900 <atan+0x168>
 80167c8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8016908 <atan+0x170>
 80167cc:	2d00      	cmp	r5, #0
 80167ce:	fe36 7b07 	vselgt.f64	d7, d6, d7
 80167d2:	e7f4      	b.n	80167be <atan+0x26>
 80167d4:	4b68      	ldr	r3, [pc, #416]	; (8016978 <atan+0x1e0>)
 80167d6:	429c      	cmp	r4, r3
 80167d8:	dc11      	bgt.n	80167fe <atan+0x66>
 80167da:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80167de:	429c      	cmp	r4, r3
 80167e0:	dc0a      	bgt.n	80167f8 <atan+0x60>
 80167e2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80167e6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8016910 <atan+0x178>
 80167ea:	ee30 6b06 	vadd.f64	d6, d0, d6
 80167ee:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80167f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167f6:	dce2      	bgt.n	80167be <atan+0x26>
 80167f8:	f04f 33ff 	mov.w	r3, #4294967295
 80167fc:	e013      	b.n	8016826 <atan+0x8e>
 80167fe:	f000 f8c5 	bl	801698c <fabs>
 8016802:	4b5e      	ldr	r3, [pc, #376]	; (801697c <atan+0x1e4>)
 8016804:	429c      	cmp	r4, r3
 8016806:	dc4f      	bgt.n	80168a8 <atan+0x110>
 8016808:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801680c:	429c      	cmp	r4, r3
 801680e:	dc41      	bgt.n	8016894 <atan+0xfc>
 8016810:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8016814:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8016818:	2300      	movs	r3, #0
 801681a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801681e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016822:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8016826:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016918 <atan+0x180>
 801682a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801682e:	ee24 5b04 	vmul.f64	d5, d4, d4
 8016832:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8016920 <atan+0x188>
 8016836:	eea5 3b06 	vfma.f64	d3, d5, d6
 801683a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8016928 <atan+0x190>
 801683e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8016842:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8016930 <atan+0x198>
 8016846:	eea6 3b05 	vfma.f64	d3, d6, d5
 801684a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8016938 <atan+0x1a0>
 801684e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8016852:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8016940 <atan+0x1a8>
 8016856:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8016948 <atan+0x1b0>
 801685a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801685e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016950 <atan+0x1b8>
 8016862:	eea5 2b06 	vfma.f64	d2, d5, d6
 8016866:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016958 <atan+0x1c0>
 801686a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801686e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8016960 <atan+0x1c8>
 8016872:	eea6 2b05 	vfma.f64	d2, d6, d5
 8016876:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016968 <atan+0x1d0>
 801687a:	1c5a      	adds	r2, r3, #1
 801687c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8016880:	ee26 6b05 	vmul.f64	d6, d6, d5
 8016884:	eea3 6b04 	vfma.f64	d6, d3, d4
 8016888:	ee27 6b06 	vmul.f64	d6, d7, d6
 801688c:	d121      	bne.n	80168d2 <atan+0x13a>
 801688e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016892:	e794      	b.n	80167be <atan+0x26>
 8016894:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8016898:	2301      	movs	r3, #1
 801689a:	ee30 6b47 	vsub.f64	d6, d0, d7
 801689e:	ee30 0b07 	vadd.f64	d0, d0, d7
 80168a2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80168a6:	e7be      	b.n	8016826 <atan+0x8e>
 80168a8:	4b35      	ldr	r3, [pc, #212]	; (8016980 <atan+0x1e8>)
 80168aa:	429c      	cmp	r4, r3
 80168ac:	da0b      	bge.n	80168c6 <atan+0x12e>
 80168ae:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80168b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80168b6:	ee30 5b47 	vsub.f64	d5, d0, d7
 80168ba:	eea0 6b07 	vfma.f64	d6, d0, d7
 80168be:	2302      	movs	r3, #2
 80168c0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80168c4:	e7af      	b.n	8016826 <atan+0x8e>
 80168c6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80168ca:	2303      	movs	r3, #3
 80168cc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80168d0:	e7a9      	b.n	8016826 <atan+0x8e>
 80168d2:	4a2c      	ldr	r2, [pc, #176]	; (8016984 <atan+0x1ec>)
 80168d4:	492c      	ldr	r1, [pc, #176]	; (8016988 <atan+0x1f0>)
 80168d6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80168da:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80168de:	ed93 5b00 	vldr	d5, [r3]
 80168e2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80168e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80168ea:	ed92 6b00 	vldr	d6, [r2]
 80168ee:	2d00      	cmp	r5, #0
 80168f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80168f4:	bfb8      	it	lt
 80168f6:	eeb1 7b47 	vneglt.f64	d7, d7
 80168fa:	e760      	b.n	80167be <atan+0x26>
 80168fc:	f3af 8000 	nop.w
 8016900:	54442d18 	.word	0x54442d18
 8016904:	3ff921fb 	.word	0x3ff921fb
 8016908:	54442d18 	.word	0x54442d18
 801690c:	bff921fb 	.word	0xbff921fb
 8016910:	8800759c 	.word	0x8800759c
 8016914:	7e37e43c 	.word	0x7e37e43c
 8016918:	e322da11 	.word	0xe322da11
 801691c:	3f90ad3a 	.word	0x3f90ad3a
 8016920:	24760deb 	.word	0x24760deb
 8016924:	3fa97b4b 	.word	0x3fa97b4b
 8016928:	a0d03d51 	.word	0xa0d03d51
 801692c:	3fb10d66 	.word	0x3fb10d66
 8016930:	c54c206e 	.word	0xc54c206e
 8016934:	3fb745cd 	.word	0x3fb745cd
 8016938:	920083ff 	.word	0x920083ff
 801693c:	3fc24924 	.word	0x3fc24924
 8016940:	5555550d 	.word	0x5555550d
 8016944:	3fd55555 	.word	0x3fd55555
 8016948:	52defd9a 	.word	0x52defd9a
 801694c:	bfadde2d 	.word	0xbfadde2d
 8016950:	2c6a6c2f 	.word	0x2c6a6c2f
 8016954:	bfa2b444 	.word	0xbfa2b444
 8016958:	af749a6d 	.word	0xaf749a6d
 801695c:	bfb3b0f2 	.word	0xbfb3b0f2
 8016960:	fe231671 	.word	0xfe231671
 8016964:	bfbc71c6 	.word	0xbfbc71c6
 8016968:	9998ebc4 	.word	0x9998ebc4
 801696c:	bfc99999 	.word	0xbfc99999
 8016970:	440fffff 	.word	0x440fffff
 8016974:	7ff00000 	.word	0x7ff00000
 8016978:	3fdbffff 	.word	0x3fdbffff
 801697c:	3ff2ffff 	.word	0x3ff2ffff
 8016980:	40038000 	.word	0x40038000
 8016984:	08016e20 	.word	0x08016e20
 8016988:	08016e40 	.word	0x08016e40

0801698c <fabs>:
 801698c:	ec51 0b10 	vmov	r0, r1, d0
 8016990:	ee10 2a10 	vmov	r2, s0
 8016994:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016998:	ec43 2b10 	vmov	d0, r2, r3
 801699c:	4770      	bx	lr
	...

080169a0 <floor>:
 80169a0:	ee10 1a90 	vmov	r1, s1
 80169a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80169a8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80169ac:	2b13      	cmp	r3, #19
 80169ae:	b530      	push	{r4, r5, lr}
 80169b0:	ee10 0a10 	vmov	r0, s0
 80169b4:	ee10 5a10 	vmov	r5, s0
 80169b8:	dc31      	bgt.n	8016a1e <floor+0x7e>
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	da15      	bge.n	80169ea <floor+0x4a>
 80169be:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016a78 <floor+0xd8>
 80169c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80169c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80169ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169ce:	dd07      	ble.n	80169e0 <floor+0x40>
 80169d0:	2900      	cmp	r1, #0
 80169d2:	da4e      	bge.n	8016a72 <floor+0xd2>
 80169d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80169d8:	4318      	orrs	r0, r3
 80169da:	d001      	beq.n	80169e0 <floor+0x40>
 80169dc:	4928      	ldr	r1, [pc, #160]	; (8016a80 <floor+0xe0>)
 80169de:	2000      	movs	r0, #0
 80169e0:	460b      	mov	r3, r1
 80169e2:	4602      	mov	r2, r0
 80169e4:	ec43 2b10 	vmov	d0, r2, r3
 80169e8:	e020      	b.n	8016a2c <floor+0x8c>
 80169ea:	4a26      	ldr	r2, [pc, #152]	; (8016a84 <floor+0xe4>)
 80169ec:	411a      	asrs	r2, r3
 80169ee:	ea01 0402 	and.w	r4, r1, r2
 80169f2:	4304      	orrs	r4, r0
 80169f4:	d01a      	beq.n	8016a2c <floor+0x8c>
 80169f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8016a78 <floor+0xd8>
 80169fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80169fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a06:	ddeb      	ble.n	80169e0 <floor+0x40>
 8016a08:	2900      	cmp	r1, #0
 8016a0a:	bfbe      	ittt	lt
 8016a0c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8016a10:	fa40 f303 	asrlt.w	r3, r0, r3
 8016a14:	18c9      	addlt	r1, r1, r3
 8016a16:	ea21 0102 	bic.w	r1, r1, r2
 8016a1a:	2000      	movs	r0, #0
 8016a1c:	e7e0      	b.n	80169e0 <floor+0x40>
 8016a1e:	2b33      	cmp	r3, #51	; 0x33
 8016a20:	dd05      	ble.n	8016a2e <floor+0x8e>
 8016a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016a26:	d101      	bne.n	8016a2c <floor+0x8c>
 8016a28:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016a2c:	bd30      	pop	{r4, r5, pc}
 8016a2e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8016a32:	f04f 32ff 	mov.w	r2, #4294967295
 8016a36:	40e2      	lsrs	r2, r4
 8016a38:	4202      	tst	r2, r0
 8016a3a:	d0f7      	beq.n	8016a2c <floor+0x8c>
 8016a3c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8016a78 <floor+0xd8>
 8016a40:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016a44:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a4c:	ddc8      	ble.n	80169e0 <floor+0x40>
 8016a4e:	2900      	cmp	r1, #0
 8016a50:	da02      	bge.n	8016a58 <floor+0xb8>
 8016a52:	2b14      	cmp	r3, #20
 8016a54:	d103      	bne.n	8016a5e <floor+0xbe>
 8016a56:	3101      	adds	r1, #1
 8016a58:	ea20 0002 	bic.w	r0, r0, r2
 8016a5c:	e7c0      	b.n	80169e0 <floor+0x40>
 8016a5e:	2401      	movs	r4, #1
 8016a60:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016a64:	fa04 f303 	lsl.w	r3, r4, r3
 8016a68:	4418      	add	r0, r3
 8016a6a:	42a8      	cmp	r0, r5
 8016a6c:	bf38      	it	cc
 8016a6e:	1909      	addcc	r1, r1, r4
 8016a70:	e7f2      	b.n	8016a58 <floor+0xb8>
 8016a72:	2000      	movs	r0, #0
 8016a74:	4601      	mov	r1, r0
 8016a76:	e7b3      	b.n	80169e0 <floor+0x40>
 8016a78:	8800759c 	.word	0x8800759c
 8016a7c:	7e37e43c 	.word	0x7e37e43c
 8016a80:	bff00000 	.word	0xbff00000
 8016a84:	000fffff 	.word	0x000fffff

08016a88 <scalbn>:
 8016a88:	ee10 1a90 	vmov	r1, s1
 8016a8c:	b510      	push	{r4, lr}
 8016a8e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8016a92:	b98c      	cbnz	r4, 8016ab8 <scalbn+0x30>
 8016a94:	ee10 3a10 	vmov	r3, s0
 8016a98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8016a9c:	430b      	orrs	r3, r1
 8016a9e:	d011      	beq.n	8016ac4 <scalbn+0x3c>
 8016aa0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8016b68 <scalbn+0xe0>
 8016aa4:	4b3c      	ldr	r3, [pc, #240]	; (8016b98 <scalbn+0x110>)
 8016aa6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016aaa:	4298      	cmp	r0, r3
 8016aac:	da0b      	bge.n	8016ac6 <scalbn+0x3e>
 8016aae:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8016b70 <scalbn+0xe8>
 8016ab2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016ab6:	e005      	b.n	8016ac4 <scalbn+0x3c>
 8016ab8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8016abc:	429c      	cmp	r4, r3
 8016abe:	d107      	bne.n	8016ad0 <scalbn+0x48>
 8016ac0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016ac4:	bd10      	pop	{r4, pc}
 8016ac6:	ee10 1a90 	vmov	r1, s1
 8016aca:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8016ace:	3c36      	subs	r4, #54	; 0x36
 8016ad0:	4404      	add	r4, r0
 8016ad2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8016ad6:	429c      	cmp	r4, r3
 8016ad8:	dd0d      	ble.n	8016af6 <scalbn+0x6e>
 8016ada:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8016b78 <scalbn+0xf0>
 8016ade:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8016b80 <scalbn+0xf8>
 8016ae2:	eeb0 6b47 	vmov.f64	d6, d7
 8016ae6:	ee10 3a90 	vmov	r3, s1
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	fe27 7b05 	vselge.f64	d7, d7, d5
 8016af0:	ee27 0b06 	vmul.f64	d0, d7, d6
 8016af4:	e7e6      	b.n	8016ac4 <scalbn+0x3c>
 8016af6:	2c00      	cmp	r4, #0
 8016af8:	dd0a      	ble.n	8016b10 <scalbn+0x88>
 8016afa:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8016afe:	ec53 2b10 	vmov	r2, r3, d0
 8016b02:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8016b06:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8016b0a:	ec43 2b10 	vmov	d0, r2, r3
 8016b0e:	e7d9      	b.n	8016ac4 <scalbn+0x3c>
 8016b10:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8016b14:	da19      	bge.n	8016b4a <scalbn+0xc2>
 8016b16:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016b1a:	4298      	cmp	r0, r3
 8016b1c:	ee10 3a90 	vmov	r3, s1
 8016b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016b24:	dd09      	ble.n	8016b3a <scalbn+0xb2>
 8016b26:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8016b78 <scalbn+0xf0>
 8016b2a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8016b80 <scalbn+0xf8>
 8016b2e:	eeb0 7b40 	vmov.f64	d7, d0
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8016b38:	e7bb      	b.n	8016ab2 <scalbn+0x2a>
 8016b3a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8016b70 <scalbn+0xe8>
 8016b3e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8016b88 <scalbn+0x100>
 8016b42:	eeb0 7b40 	vmov.f64	d7, d0
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	e7f4      	b.n	8016b34 <scalbn+0xac>
 8016b4a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8016b4e:	ec53 2b10 	vmov	r2, r3, d0
 8016b52:	3436      	adds	r4, #54	; 0x36
 8016b54:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8016b58:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8016b5c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8016b90 <scalbn+0x108>
 8016b60:	ec43 2b10 	vmov	d0, r2, r3
 8016b64:	e7a5      	b.n	8016ab2 <scalbn+0x2a>
 8016b66:	bf00      	nop
 8016b68:	00000000 	.word	0x00000000
 8016b6c:	43500000 	.word	0x43500000
 8016b70:	c2f8f359 	.word	0xc2f8f359
 8016b74:	01a56e1f 	.word	0x01a56e1f
 8016b78:	8800759c 	.word	0x8800759c
 8016b7c:	7e37e43c 	.word	0x7e37e43c
 8016b80:	8800759c 	.word	0x8800759c
 8016b84:	fe37e43c 	.word	0xfe37e43c
 8016b88:	c2f8f359 	.word	0xc2f8f359
 8016b8c:	81a56e1f 	.word	0x81a56e1f
 8016b90:	00000000 	.word	0x00000000
 8016b94:	3c900000 	.word	0x3c900000
 8016b98:	ffff3cb0 	.word	0xffff3cb0

08016b9c <_init>:
 8016b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b9e:	bf00      	nop
 8016ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ba2:	bc08      	pop	{r3}
 8016ba4:	469e      	mov	lr, r3
 8016ba6:	4770      	bx	lr

08016ba8 <_fini>:
 8016ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016baa:	bf00      	nop
 8016bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bae:	bc08      	pop	{r3}
 8016bb0:	469e      	mov	lr, r3
 8016bb2:	4770      	bx	lr
