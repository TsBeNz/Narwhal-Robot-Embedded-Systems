
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f8c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08018260  08018260  00028260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018558  08018558  00028558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018560  08018560  00028560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018564  08018564  00028564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  08018568  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 RAM_D2        0000003d  20000094  080185fc  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000013b8  200000d8  08018639  000300d8  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20001490  08018639  00031490  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300d1  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002cc19  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004c80  00000000  00000000  0005cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001dc8  00000000  00000000  00061998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001bd8  00000000  00000000  00063760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039a8f  00000000  00000000  00065338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002cf4e  00000000  00000000  0009edc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016d0ff  00000000  00000000  000cbd15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00238e14  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008180  00000000  00000000  00238e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200000d8 	.word	0x200000d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018244 	.word	0x08018244

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000dc 	.word	0x200000dc
 800030c:	08018244 	.word	0x08018244

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <EncPulse2Rad_Read>:
 *      Author: Thansak Pongpaket
 */

#include "AS5047U.h"

double EncPulse2Rad_Read(AS5047U *Enc,uint8_t inv_dir){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	AS5047U_Position_Highspeed_Read(Enc,inv_dir);
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f8ef 	bl	8000808 <AS5047U_Position_Highspeed_Read>
	return (Enc->Position * 0.000383495f) - Enc->Offset;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	89db      	ldrh	r3, [r3, #14]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000636:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000658 <EncPulse2Rad_Read+0x44>
 800063a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800063e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	ed93 7b08 	vldr	d7, [r3, #32]
 8000648:	ee36 7b47 	vsub.f64	d7, d6, d7
//	return (Enc->Position * 0.000383495f);
}
 800064c:	eeb0 0b47 	vmov.f64	d0, d7
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	39c90fd4 	.word	0x39c90fd4
 800065c:	00000000 	.word	0x00000000

08000660 <AS5047U_init>:

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin,double offset) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6178      	str	r0, [r7, #20]
 8000668:	6139      	str	r1, [r7, #16]
 800066a:	60fa      	str	r2, [r7, #12]
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	ed87 0b00 	vstr	d0, [r7]
	dev->hspiHandle = hspiHandle;
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	8c3a      	ldrh	r2, [r7, #32]
 8000688:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(CSGPIOTypedef, CSGPIOPin, 1);
 800068a:	8c3b      	ldrh	r3, [r7, #32]
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f00c fb31 	bl	800ccf8 <HAL_GPIO_WritePin>
	dev->Error_Status.CORDIC_Overflow = 0;
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	2200      	movs	r2, #0
 800069a:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	2200      	movs	r2, #0
 80006a0:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	2200      	movs	r2, #0
 80006a6:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	2200      	movs	r2, #0
 80006ac:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	2200      	movs	r2, #0
 80006b2:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	2200      	movs	r2, #0
 80006b8:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	2200      	movs	r2, #0
 80006be:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	2200      	movs	r2, #0
 80006c4:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	2200      	movs	r2, #0
 80006ca:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2200      	movs	r2, #0
 80006d0:	765a      	strb	r2, [r3, #25]

	/* User Variable */
	dev->Offset = offset * 0.000383495f;
 80006d2:	ed97 7b00 	vldr	d7, [r7]
 80006d6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80006f0 <AS5047U_init+0x90>
 80006da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	ed83 7b08 	vstr	d7, [r3, #32]
}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	f3af 8000 	nop.w
 80006f0:	80000000 	.word	0x80000000
 80006f4:	3f3921fa 	.word	0x3f3921fa

080006f8 <AS5047U_Write>:

/*
 * This function for Non-Volatile Registers (OTP) Only
 */

inline void AS5047U_Write(AS5047U *dev,uint16_t Register_Address, uint16_t Data){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
 8000704:	4613      	mov	r3, r2
 8000706:	803b      	strh	r3, [r7, #0]
	uint8_t Buffer[3] = {};
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <AS5047U_Write+0x10c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	723b      	strb	r3, [r7, #8]
 800070e:	f107 0309 	add.w	r3, r7, #9
 8000712:	2200      	movs	r2, #0
 8000714:	801a      	strh	r2, [r3, #0]

	Buffer[0] = ((uint8_t) (Register_Address >> 8)) & 0xBF;
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000722:	b2db      	uxtb	r3, r3
 8000724:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Register_Address & 0xFF);
 8000726:	887b      	ldrh	r3, [r7, #2]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f107 0108 	add.w	r1, r7, #8
 8000734:	2202      	movs	r2, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f009 f954 	bl	80099e4 <HAL_CRC_Calculate>
 800073c:	4603      	mov	r3, r0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6898      	ldr	r0, [r3, #8]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	899b      	ldrh	r3, [r3, #12]
 800074e:	2200      	movs	r2, #0
 8000750:	4619      	mov	r1, r3
 8000752:	f00c fad1 	bl	800ccf8 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 8000756:	2300      	movs	r3, #0
 8000758:	81fb      	strh	r3, [r7, #14]
 800075a:	e002      	b.n	8000762 <AS5047U_Write+0x6a>
 800075c:	89fb      	ldrh	r3, [r7, #14]
 800075e:	3301      	adds	r3, #1
 8000760:	81fb      	strh	r3, [r7, #14]
 8000762:	89fb      	ldrh	r3, [r7, #14]
 8000764:	f240 2226 	movw	r2, #550	; 0x226
 8000768:	4293      	cmp	r3, r2
 800076a:	d9f7      	bls.n	800075c <AS5047U_Write+0x64>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	f107 0108 	add.w	r1, r7, #8
 8000774:	2301      	movs	r3, #1
 8000776:	2203      	movs	r2, #3
 8000778:	f010 ffd2 	bl	8011720 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6898      	ldr	r0, [r3, #8]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	899b      	ldrh	r3, [r3, #12]
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	f00c fab6 	bl	800ccf8 <HAL_GPIO_WritePin>

	Buffer[0] = (uint8_t) (Data >> 8);
 800078c:	883b      	ldrh	r3, [r7, #0]
 800078e:	0a1b      	lsrs	r3, r3, #8
 8000790:	b29b      	uxth	r3, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Data & 0xFF);
 8000796:	883b      	ldrh	r3, [r7, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f107 0108 	add.w	r1, r7, #8
 80007a4:	2202      	movs	r2, #2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f009 f91c 	bl	80099e4 <HAL_CRC_Calculate>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6898      	ldr	r0, [r3, #8]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	899b      	ldrh	r3, [r3, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	f00c fa99 	bl	800ccf8 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 80007c6:	2300      	movs	r3, #0
 80007c8:	81bb      	strh	r3, [r7, #12]
 80007ca:	e002      	b.n	80007d2 <AS5047U_Write+0xda>
 80007cc:	89bb      	ldrh	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	81bb      	strh	r3, [r7, #12]
 80007d2:	89bb      	ldrh	r3, [r7, #12]
 80007d4:	f240 2226 	movw	r2, #550	; 0x226
 80007d8:	4293      	cmp	r3, r2
 80007da:	d9f7      	bls.n	80007cc <AS5047U_Write+0xd4>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	f107 0108 	add.w	r1, r7, #8
 80007e4:	2301      	movs	r3, #1
 80007e6:	2203      	movs	r2, #3
 80007e8:	f010 ff9a 	bl	8011720 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6898      	ldr	r0, [r3, #8]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	899b      	ldrh	r3, [r3, #12]
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f00c fa7e 	bl	800ccf8 <HAL_GPIO_WritePin>
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	08018260 	.word	0x08018260

08000808 <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev,uint8_t dir){
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[2] = { 0x3F,0xFF };
 8000814:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000818:	823b      	strh	r3, [r7, #16]
	uint8_t Buffer[2] = {};
 800081a:	2300      	movs	r3, #0
 800081c:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i=0; i <= 400; i++);
 800081e:	2300      	movs	r3, #0
 8000820:	82fb      	strh	r3, [r7, #22]
 8000822:	e002      	b.n	800082a <AS5047U_Position_Highspeed_Read+0x22>
 8000824:	8afb      	ldrh	r3, [r7, #22]
 8000826:	3301      	adds	r3, #1
 8000828:	82fb      	strh	r3, [r7, #22]
 800082a:	8afb      	ldrh	r3, [r7, #22]
 800082c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000830:	d9f8      	bls.n	8000824 <AS5047U_Position_Highspeed_Read+0x1c>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6898      	ldr	r0, [r3, #8]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	899b      	ldrh	r3, [r3, #12]
 800083a:	2200      	movs	r2, #0
 800083c:	4619      	mov	r1, r3
 800083e:	f00c fa5b 	bl	800ccf8 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 100);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	f107 0110 	add.w	r1, r7, #16
 800084a:	2364      	movs	r3, #100	; 0x64
 800084c:	2202      	movs	r2, #2
 800084e:	f010 ff67 	bl	8011720 <HAL_SPI_Transmit>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6898      	ldr	r0, [r3, #8]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	899b      	ldrh	r3, [r3, #12]
 800085a:	2201      	movs	r2, #1
 800085c:	4619      	mov	r1, r3
 800085e:	f00c fa4b 	bl	800ccf8 <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550; i++);			//delay before sent data (#Base clock 550MHz)
 8000862:	2300      	movs	r3, #0
 8000864:	82bb      	strh	r3, [r7, #20]
 8000866:	e002      	b.n	800086e <AS5047U_Position_Highspeed_Read+0x66>
 8000868:	8abb      	ldrh	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	82bb      	strh	r3, [r7, #20]
 800086e:	8abb      	ldrh	r3, [r7, #20]
 8000870:	f240 2226 	movw	r2, #550	; 0x226
 8000874:	4293      	cmp	r3, r2
 8000876:	d9f7      	bls.n	8000868 <AS5047U_Position_Highspeed_Read+0x60>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6898      	ldr	r0, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	899b      	ldrh	r3, [r3, #12]
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	f00c fa38 	bl	800ccf8 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 100);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	f107 010c 	add.w	r1, r7, #12
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	2202      	movs	r2, #2
 8000894:	f011 f936 	bl	8011b04 <HAL_SPI_Receive>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6898      	ldr	r0, [r3, #8]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	899b      	ldrh	r3, [r3, #12]
 80008a0:	2201      	movs	r2, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	f00c fa28 	bl	800ccf8 <HAL_GPIO_WritePin>
	if (dir == 1){
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d111      	bne.n	80008d2 <AS5047U_Position_Highspeed_Read+0xca>
		dev->Position = (uint16_t)((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]) ^ 0x3FFF;
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	7b7b      	ldrb	r3, [r7, #13]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008c8:	4053      	eors	r3, r2
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	81da      	strh	r2, [r3, #14]
 80008d0:	e00c      	b.n	80008ec <AS5047U_Position_Highspeed_Read+0xe4>
	}
	else{
		dev->Position = ((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]);
 80008d2:	7b3b      	ldrb	r3, [r7, #12]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008dc:	b21a      	sxth	r2, r3
 80008de:	7b7b      	ldrb	r3, [r7, #13]
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	81da      	strh	r2, [r3, #14]
	}
	return dev->Position;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	89db      	ldrh	r3, [r3, #14]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <Neopixel_Init>:
 */

#include "Neopixel.h"

void Neopixel_Init(NeopixelParameter *Neopixel_led, TIM_HandleTypeDef *htim_in,
		uint32_t Channel_in) {
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	Neopixel_led->htim = htim_in;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Neopixel_led->timer_Channel = Channel_in;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	Neopixel_led->Pulse_High = (uint16_t) (htim_in->Init.Period * 0.66f);
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	ee07 3a90 	vmov	s15, r3
 800091c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000920:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000968 <Neopixel_Init+0x70>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800092c:	ee17 3a90 	vmov	r3, s15
 8000930:	b29a      	uxth	r2, r3
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
	Neopixel_led->Pulse_Low = (uint16_t) (htim_in->Init.Period * 0.33f);
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000944:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800096c <Neopixel_Init+0x74>
 8000948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800094c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000950:	ee17 3a90 	vmov	r3, s15
 8000954:	b29a      	uxth	r2, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	3f28f5c3 	.word	0x3f28f5c3
 800096c:	3ea8f5c3 	.word	0x3ea8f5c3

08000970 <Neopixel_Set>:

inline void Neopixel_Set(NeopixelParameter *Neopixel_led, uint8_t LEDnum,
		uint8_t Red, uint8_t Green, uint8_t Blue) {
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	4608      	mov	r0, r1
 800097a:	4611      	mov	r1, r2
 800097c:	461a      	mov	r2, r3
 800097e:	4603      	mov	r3, r0
 8000980:	70fb      	strb	r3, [r7, #3]
 8000982:	460b      	mov	r3, r1
 8000984:	70bb      	strb	r3, [r7, #2]
 8000986:	4613      	mov	r3, r2
 8000988:	707b      	strb	r3, [r7, #1]
	Neopixel_led->LED_Data[LEDnum][0] = Green;
 800098a:	78fa      	ldrb	r2, [r7, #3]
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	440b      	add	r3, r1
 8000996:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800099a:	787a      	ldrb	r2, [r7, #1]
 800099c:	701a      	strb	r2, [r3, #0]
	Neopixel_led->LED_Data[LEDnum][1] = Red;
 800099e:	78fa      	ldrb	r2, [r7, #3]
 80009a0:	6879      	ldr	r1, [r7, #4]
 80009a2:	4613      	mov	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	f203 1345 	addw	r3, r3, #325	; 0x145
 80009ae:	78ba      	ldrb	r2, [r7, #2]
 80009b0:	701a      	strb	r2, [r3, #0]
	Neopixel_led->LED_Data[LEDnum][2] = Blue;
 80009b2:	78fa      	ldrb	r2, [r7, #3]
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	440b      	add	r3, r1
 80009be:	f503 73a3 	add.w	r3, r3, #326	; 0x146
 80009c2:	7c3a      	ldrb	r2, [r7, #16]
 80009c4:	701a      	strb	r2, [r3, #0]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <Neopixel_Sent>:

inline void Neopixel_Sent(NeopixelParameter *Neopixel_led) {
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b088      	sub	sp, #32
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
	uint32_t index = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
	uint32_t data;
	for (int j = 0; j < NUM_LED; j++) {
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	e046      	b.n	8000a72 <Neopixel_Sent+0xa0>
		data = ((Neopixel_led->LED_Data[j][0] & 0xFF) << 16)
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	4613      	mov	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	0419      	lsls	r1, r3, #16
				| ((Neopixel_led->LED_Data[j][1] & 0xFF) << 8)
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	4613      	mov	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	4403      	add	r3, r0
 8000a04:	f203 1345 	addw	r3, r3, #325	; 0x145
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	4319      	orrs	r1, r3
				| (Neopixel_led->LED_Data[j][2] & 0xFF);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	4403      	add	r3, r0
 8000a1a:	f503 73a3 	add.w	r3, r3, #326	; 0x146
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	430b      	orrs	r3, r1
		data = ((Neopixel_led->LED_Data[j][0] & 0xFF) << 16)
 8000a22:	60fb      	str	r3, [r7, #12]
		for (int i = 23; i >= 0; i--) {
 8000a24:	2317      	movs	r3, #23
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e01d      	b.n	8000a66 <Neopixel_Sent+0x94>
			if (data & (1 << i)) {
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4013      	ands	r3, r2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d007      	beq.n	8000a4c <Neopixel_Sent+0x7a>
				Neopixel_led->pwmData[index] = Neopixel_led->Pulse_High;	//192
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f8b3 115a 	ldrh.w	r1, [r3, #346]	; 0x15a
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69fa      	ldr	r2, [r7, #28]
 8000a46:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000a4a:	e006      	b.n	8000a5a <Neopixel_Sent+0x88>
			} else {
				Neopixel_led->pwmData[index] = Neopixel_led->Pulse_Low;		//96
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f8b3 1158 	ldrh.w	r1, [r3, #344]	; 0x158
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	69fa      	ldr	r2, [r7, #28]
 8000a56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			index++;
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
		for (int i = 23; i >= 0; i--) {
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	dade      	bge.n	8000a2a <Neopixel_Sent+0x58>
	for (int j = 0; j < NUM_LED; j++) {
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	ddb5      	ble.n	80009e4 <Neopixel_Sent+0x12>
		}
	}
	for (int i = 0; i < 42; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	e00a      	b.n	8000a94 <Neopixel_Sent+0xc2>
		Neopixel_led->pwmData[index] = 0;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	2100      	movs	r1, #0
 8000a84:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		index++;
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 42; i++) {
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	3301      	adds	r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	2b29      	cmp	r3, #41	; 0x29
 8000a98:	ddf1      	ble.n	8000a7e <Neopixel_Sent+0xac>
	}
	HAL_TIM_PWM_Start_DMA(Neopixel_led->htim, TIM_CHANNEL_1,
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
			Neopixel_led->pwmData, index);
 8000aa0:	687a      	ldr	r2, [r7, #4]
	HAL_TIM_PWM_Start_DMA(Neopixel_led->htim, TIM_CHANNEL_1,
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f011 ff2a 	bl	8012900 <HAL_TIM_PWM_Start_DMA>
}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <Tmp75_Init>:
#include "Tmp75.h"

//I2C_HandleTypeDef hi2c2;

void Tmp75_Init(I2C_HandleTypeDef *hi2c) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	/*configuration register = 0x01
	 [res][res][OS][FQ][POL][TM][SD][RES][RES][RES][RES][RES][RES][RES][RES][RES]
	   0    0   1   0    0    0   0   0    0    0    0    0    0    0    0    0   =  0x2000
	 */
	Write_Register(0x01, 0x2000,hi2c);
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f000 f804 	bl	8000ad0 <Write_Register>

}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <Write_Register>:

void Write_Register(uint8_t register_pointer, uint16_t register_value, I2C_HandleTypeDef *hi2c) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	603a      	str	r2, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	460b      	mov	r3, r1
 8000ade:	80bb      	strh	r3, [r7, #4]
	uint8_t data[3];
	data[0] = register_pointer;     // TMP75_ADDR
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	733b      	strb	r3, [r7, #12]
	data[1] = register_value >> 8;    // MSB byte of 16bit data
 8000ae4:	88bb      	ldrh	r3, [r7, #4]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	737b      	strb	r3, [r7, #13]
	data[2] = register_value;       // LSB byte of 16bit data
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(hi2c, TMP75_ADDR, data, 3, 100);
 8000af4:	f107 020c 	add.w	r2, r7, #12
 8000af8:	2364      	movs	r3, #100	; 0x64
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2303      	movs	r3, #3
 8000afe:	2192      	movs	r1, #146	; 0x92
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f00c f9bd 	bl	800ce80 <HAL_I2C_Master_Transmit>

}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <Read_Register>:

void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer, I2C_HandleTypeDef *hi2c) {
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af02      	add	r7, sp, #8
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
	// first set the register pointer to the register wanted to be read
	HAL_I2C_Master_Transmit(hi2c, TMP75_ADDR, &register_pointer, 1, 100);
 8000b1c:	f107 020f 	add.w	r2, r7, #15
 8000b20:	2364      	movs	r3, #100	; 0x64
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2301      	movs	r3, #1
 8000b26:	2192      	movs	r1, #146	; 0x92
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f00c f9a9 	bl	800ce80 <HAL_I2C_Master_Transmit>

	// receive the 2 x 8bit data into the receive buffer
	HAL_I2C_Master_Receive(hi2c, TMP75_ADDR, receive_buffer, 2, 100);
 8000b2e:	2364      	movs	r3, #100	; 0x64
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2302      	movs	r3, #2
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	2192      	movs	r1, #146	; 0x92
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f00c fa95 	bl	800d068 <HAL_I2C_Master_Receive>
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <One_ShotTemp>:

void One_ShotTemp(I2C_HandleTypeDef *hi2c) {
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	//One-Shot register = 0x04 and write any value to start aconversion
	Write_Register(0x04, 0x0000,hi2c);
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	2100      	movs	r1, #0
 8000b52:	2004      	movs	r0, #4
 8000b54:	f7ff ffbc 	bl	8000ad0 <Write_Register>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Read_TempCelsius>:

void Read_TempCelsius(double *receive_buffer,I2C_HandleTypeDef *hi2c) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	uint8_t buffer[2];
	uint16_t TempSum;
	Read_Register(0x00, buffer,hi2c);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff ffcb 	bl	8000b0e <Read_Register>
	TempSum = (((buffer[0] << 8) | buffer[1]) >> 4);
 8000b78:	7b3b      	ldrb	r3, [r7, #12]
 8000b7a:	021b      	lsls	r3, r3, #8
 8000b7c:	7b7a      	ldrb	r2, [r7, #13]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	111b      	asrs	r3, r3, #4
 8000b82:	81fb      	strh	r3, [r7, #14]
	*receive_buffer = (TempSum * FTMP75_TEMP_AD_STEP);
 8000b84:	89fb      	ldrh	r3, [r7, #14]
 8000b86:	ee07 3a90 	vmov	s15, r3
 8000b8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b8e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000ba8 <Read_TempCelsius+0x48>
 8000b92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	ed83 7b00 	vstr	d7, [r3]
}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	3fb00000 	.word	0x3fb00000

08000bb0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2224      	movs	r2, #36	; 0x24
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f016 fb0d 	bl	80171e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bce:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bd0:	4a33      	ldr	r2, [pc, #204]	; (8000ca0 <MX_ADC1_Init+0xf0>)
 8000bd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000bd4:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bd6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000bda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be2:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be8:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bea:	2204      	movs	r2, #4
 8000bec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bee:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf4:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c00:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0e:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c26:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2e:	481b      	ldr	r0, [pc, #108]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c30:	f006 feec 	bl	8007a0c <HAL_ADC_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c3a:	f004 fd5d 	bl	80056f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_DISABLED;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4812      	ldr	r0, [pc, #72]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c52:	f008 fc71 	bl	8009538 <HAL_ADCEx_MultiModeConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000c5c:	f004 fd4c 	bl	80056f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <MX_ADC1_Init+0xf4>)
 8000c62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c64:	2306      	movs	r3, #6
 8000c66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c6c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c70:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c72:	2304      	movs	r3, #4
 8000c74:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c86:	f007 fc65 	bl	8008554 <HAL_ADC_ConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000c90:	f004 fd32 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3730      	adds	r7, #48	; 0x30
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200000f4 	.word	0x200000f4
 8000ca0:	40022000 	.word	0x40022000
 8000ca4:	21800100 	.word	0x21800100

08000ca8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2224      	movs	r2, #36	; 0x24
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f016 fa97 	bl	80171e8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cba:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cbc:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <MX_ADC2_Init+0xb8>)
 8000cbe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000cc0:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cc2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000cc6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d0e:	4813      	ldr	r0, [pc, #76]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000d10:	f006 fe7c 	bl	8007a0c <HAL_ADC_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8000d1a:	f004 fced 	bl	80056f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_ADC2_Init+0xbc>)
 8000d20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d22:	2306      	movs	r3, #6
 8000d24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d2a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d2e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d30:	2304      	movs	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000d44:	f007 fc06 	bl	8008554 <HAL_ADC_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d4e:	f004 fcd3 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000164 	.word	0x20000164
 8000d60:	40022100 	.word	0x40022100
 8000d64:	21800100 	.word	0x21800100

08000d68 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2224      	movs	r2, #36	; 0x24
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f016 fa37 	bl	80171e8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d7a:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d7c:	4a32      	ldr	r2, [pc, #200]	; (8000e48 <MX_ADC3_Init+0xe0>)
 8000d7e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d88:	2208      	movs	r2, #8
 8000d8a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d92:	4b2c      	ldr	r3, [pc, #176]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d98:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d9e:	4b29      	ldr	r3, [pc, #164]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dec:	4815      	ldr	r0, [pc, #84]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dee:	f006 fe0d 	bl	8007a0c <HAL_ADC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000df8:	f004 fc7e 	bl	80056f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_ADC3_Init+0xe4>)
 8000dfe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e00:	2306      	movs	r3, #6
 8000e02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 8000e04:	2306      	movs	r3, #6
 8000e06:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e08:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e0c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000e2c:	f007 fb92 	bl	8008554 <HAL_ADC_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000e36:	f004 fc5f 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200001d4 	.word	0x200001d4
 8000e48:	58026000 	.word	0x58026000
 8000e4c:	c7520000 	.word	0xc7520000

08000e50 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a47      	ldr	r2, [pc, #284]	; (8000f8c <HAL_ADC_MspInit+0x13c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d133      	bne.n	8000eda <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e72:	4b47      	ldr	r3, [pc, #284]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a45      	ldr	r2, [pc, #276]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000e7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e7c:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d10e      	bne.n	8000ea2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e84:	4b43      	ldr	r3, [pc, #268]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e8a:	4a42      	ldr	r2, [pc, #264]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000e8c:	f043 0320 	orr.w	r3, r3, #32
 8000e90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e94:	4b3f      	ldr	r3, [pc, #252]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000e96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9a:	f003 0320 	and.w	r3, r3, #32
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b3c      	ldr	r3, [pc, #240]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	4a3a      	ldr	r2, [pc, #232]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb2:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ec0:	2320      	movs	r3, #32
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4831      	ldr	r0, [pc, #196]	; (8000f98 <HAL_ADC_MspInit+0x148>)
 8000ed4:	f00b fd68 	bl	800c9a8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000ed8:	e054      	b.n	8000f84 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a2f      	ldr	r2, [pc, #188]	; (8000f9c <HAL_ADC_MspInit+0x14c>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d133      	bne.n	8000f4c <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ee4:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000eec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eee:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d10e      	bne.n	8000f14 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000ef8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000efc:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000efe:	f043 0320 	orr.w	r3, r3, #32
 8000f02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f0c:	f003 0320 	and.w	r3, r3, #32
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	4a1e      	ldr	r2, [pc, #120]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f32:	2320      	movs	r3, #32
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	4814      	ldr	r0, [pc, #80]	; (8000f98 <HAL_ADC_MspInit+0x148>)
 8000f46:	f00b fd2f 	bl	800c9a8 <HAL_GPIO_Init>
}
 8000f4a:	e01b      	b.n	8000f84 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC3)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <HAL_ADC_MspInit+0x150>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d116      	bne.n	8000f84 <HAL_ADC_MspInit+0x134>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2100      	movs	r1, #0
 8000f78:	207f      	movs	r0, #127	; 0x7f
 8000f7a:	f008 fc9a 	bl	80098b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000f7e:	207f      	movs	r0, #127	; 0x7f
 8000f80:	f008 fcb1 	bl	80098e6 <HAL_NVIC_EnableIRQ>
}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	; 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40022000 	.word	0x40022000
 8000f90:	20000244 	.word	0x20000244
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58020800 	.word	0x58020800
 8000f9c:	40022100 	.word	0x40022100
 8000fa0:	58026000 	.word	0x58026000

08000fa4 <Step_Driver_init>:
 * __HAL_TIM_SET_COMPARE();		CCR
 * __HAL_TIM_SET_AUTORELOAD();	ARR
 */
void Step_Driver_init(SteperParameter *step, TIM_HandleTypeDef *htim,
		uint32_t Channel, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t f_timer,uint8_t DIR_init) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	603b      	str	r3, [r7, #0]
	step->htim = htim;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	601a      	str	r2, [r3, #0]
	step->Channel = Channel;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	605a      	str	r2, [r3, #4]
	step->GPIOx = GPIOx;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	609a      	str	r2, [r3, #8]
	step->GPIO_Pin = GPIO_Pin;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	8b3a      	ldrh	r2, [r7, #24]
 8000fc8:	819a      	strh	r2, [r3, #12]
	step->f_timer = f_timer;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	81da      	strh	r2, [r3, #14]
	step->DIR_init = DIR_init;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fd8:	741a      	strb	r2, [r3, #16]
	HAL_TIM_PWM_Start(step->htim, step->Channel);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	f011 fb6f 	bl	80126c8 <HAL_TIM_PWM_Start>
	step->htim->Instance->ARR = 500;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c
	step->htim->Instance->CCR1 = 0;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <Step_Driver>:


void Step_Driver(SteperParameter *step, double f_driver) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	ed87 0b00 	vstr	d0, [r7]
	double abs_f_driver = fabs(f_driver);
 8001014:	ed97 7b00 	vldr	d7, [r7]
 8001018:	eeb0 7bc7 	vabs.f64	d7, d7
 800101c:	ed87 7b06 	vstr	d7, [r7, #24]
	uint16_t reg_out;
	if (abs_f_driver <= 7) {
 8001020:	ed97 7b06 	vldr	d7, [r7, #24]
 8001024:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 8001028:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	d80e      	bhi.n	8001050 <Step_Driver+0x48>
		reg_out = 50000;
 8001032:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001036:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = 50000;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = 0;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2200      	movs	r2, #0
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
 800104e:	e033      	b.n	80010b8 <Step_Driver+0xb0>
	} else if (abs_f_driver < 10) {
 8001050:	ed97 7b06 	vldr	d7, [r7, #24]
 8001054:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001058:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800105c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001060:	d50f      	bpl.n	8001082 <Step_Driver+0x7a>
		reg_out = 50000;
 8001062:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001066:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = reg_out;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	8afa      	ldrh	r2, [r7, #22]
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8001072:	8afb      	ldrh	r3, [r7, #22]
 8001074:	085b      	lsrs	r3, r3, #1
 8001076:	b29a      	uxth	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	635a      	str	r2, [r3, #52]	; 0x34
 8001080:	e01a      	b.n	80010b8 <Step_Driver+0xb0>
	} else {
		reg_out = (uint16_t) (step->f_timer / abs_f_driver);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	89db      	ldrh	r3, [r3, #14]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800108e:	ed97 6b06 	vldr	d6, [r7, #24]
 8001092:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001096:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800109a:	ee17 3a90 	vmov	r3, s15
 800109e:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = reg_out;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	8afa      	ldrh	r2, [r7, #22]
 80010a8:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 80010aa:	8afb      	ldrh	r3, [r7, #22]
 80010ac:	085b      	lsrs	r3, r3, #1
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (f_driver >= 0) {
 80010b8:	ed97 7b00 	vldr	d7, [r7]
 80010bc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	db09      	blt.n	80010da <Step_Driver+0xd2>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6898      	ldr	r0, [r3, #8]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	8999      	ldrh	r1, [r3, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	7c1b      	ldrb	r3, [r3, #16]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f00b fe10 	bl	800ccf8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
	}
}
 80010d8:	e00b      	b.n	80010f2 <Step_Driver+0xea>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6898      	ldr	r0, [r3, #8]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8999      	ldrh	r1, [r3, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	7c1b      	ldrb	r3, [r3, #16]
 80010e6:	f083 0301 	eor.w	r3, r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	461a      	mov	r2, r3
 80010ee:	f00b fe03 	bl	800ccf8 <HAL_GPIO_WritePin>
}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <Servo_init>:

/*
 * Servo Drive init
 */
void Servo_init(ServoParameter *Servo,TIM_HandleTypeDef *htim,
		uint32_t Channel){
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
	Servo->htim = htim;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	601a      	str	r2, [r3, #0]
	Servo->Channel = Channel;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_Start(Servo->htim, Servo->Channel);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4619      	mov	r1, r3
 800111c:	4610      	mov	r0, r2
 800111e:	f011 fad3 	bl	80126c8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d106      	bne.n	8001138 <Servo_init+0x3e>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f240 52db 	movw	r2, #1499	; 0x5db
 8001134:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001136:	e031      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d106      	bne.n	800114e <Servo_init+0x54>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	f240 53db 	movw	r3, #1499	; 0x5db
 800114a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800114c:	e026      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b08      	cmp	r3, #8
 8001154:	d106      	bne.n	8001164 <Servo_init+0x6a>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	f240 53db 	movw	r3, #1499	; 0x5db
 8001160:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001162:	e01b      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b0c      	cmp	r3, #12
 800116a:	d106      	bne.n	800117a <Servo_init+0x80>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	f240 53db 	movw	r3, #1499	; 0x5db
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001178:	e010      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b10      	cmp	r3, #16
 8001180:	d106      	bne.n	8001190 <Servo_init+0x96>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	f240 53db 	movw	r3, #1499	; 0x5db
 800118c:	6593      	str	r3, [r2, #88]	; 0x58
}
 800118e:	e005      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	f240 53db 	movw	r3, #1499	; 0x5db
 800119a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <Servo_Drive>:

/*
 * Servo Drive Function
 * Deg Range (0 -> 180)
 */
void Servo_Drive(ServoParameter *Servo,uint8_t Deg){
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
	uint16_t Pulse_in  =  (uint16_t)((Deg * 8.3333333f) +499);
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001250 <Servo_Drive+0xac>
 80011be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001254 <Servo_Drive+0xb0>
 80011c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ce:	ee17 3a90 	vmov	r3, s15
 80011d2:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d105      	bne.n	80011e8 <Servo_Drive+0x44>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	89fa      	ldrh	r2, [r7, #14]
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011e6:	e02c      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d105      	bne.n	80011fc <Servo_Drive+0x58>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80011fa:	e022      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b08      	cmp	r3, #8
 8001202:	d105      	bne.n	8001210 <Servo_Drive+0x6c>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800120e:	e018      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b0c      	cmp	r3, #12
 8001216:	d105      	bne.n	8001224 <Servo_Drive+0x80>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001222:	e00e      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b10      	cmp	r3, #16
 800122a:	d105      	bne.n	8001238 <Servo_Drive+0x94>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001236:	e004      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	89fb      	ldrh	r3, [r7, #14]
 8001240:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	41055555 	.word	0x41055555
 8001254:	43f98000 	.word	0x43f98000

08001258 <Traj_Coeff_Cal>:

void Traj_Coeff_Cal(TrajParameter *Traj, double T, double Pos_Final,
  double Pos_Now, double Vel_Final, double Vel_Now) {
 8001258:	b480      	push	{r7}
 800125a:	b09b      	sub	sp, #108	; 0x6c
 800125c:	af00      	add	r7, sp, #0
 800125e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001260:	ed87 0b08 	vstr	d0, [r7, #32]
 8001264:	ed87 1b06 	vstr	d1, [r7, #24]
 8001268:	ed87 2b04 	vstr	d2, [r7, #16]
 800126c:	ed87 3b02 	vstr	d3, [r7, #8]
 8001270:	ed87 4b00 	vstr	d4, [r7]
 Traj->T = T;
 8001274:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800127a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 double T_P2 = T * T;
 800127e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001282:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001286:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
 double T_P3 = T_P2 * T;
 800128a:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 800128e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001292:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001296:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 double T_P4 = T_P3 * T;
 800129a:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800129e:	ed97 7b08 	vldr	d7, [r7, #32]
 80012a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012a6:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 double T_P5 = T_P4 * T;
 80012aa:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80012ae:	ed97 7b08 	vldr	d7, [r7, #32]
 80012b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012b6:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
 double ds = Pos_Now - Pos_Final;
 80012ba:	ed97 6b04 	vldr	d6, [r7, #16]
 80012be:	ed97 7b06 	vldr	d7, [r7, #24]
 80012c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80012c6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 double tfv0 = T * Vel_Now;
 80012ca:	ed97 6b08 	vldr	d6, [r7, #32]
 80012ce:	ed97 7b00 	vldr	d7, [r7]
 80012d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012d6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 double tfv1 = T * Vel_Final;
 80012da:	ed97 6b08 	vldr	d6, [r7, #32]
 80012de:	ed97 7b02 	vldr	d7, [r7, #8]
 80012e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012e6:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
 Traj->TrajCoef[0] = Pos_Now;
 80012ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012f0:	e9c1 2300 	strd	r2, r3, [r1]
 Traj->TrajCoef[1] = Vel_Now;
 80012f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 Traj->TrajCoef[3] = -(2 * (5 * ds + 3 * tfv0 + 2*tfv1)) / T_P3;
 80012fe:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001302:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8001306:	ee27 6b06 	vmul.f64	d6, d7, d6
 800130a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800130e:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001312:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001316:	ee36 6b07 	vadd.f64	d6, d6, d7
 800131a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800131e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001322:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001326:	ee37 7b07 	vadd.f64	d7, d7, d7
 800132a:	eeb1 5b47 	vneg.f64	d5, d7
 800132e:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8001332:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001338:	ed83 7b06 	vstr	d7, [r3, #24]
 Traj->TrajCoef[4] = (15 * ds + 8 * tfv0 + 7*tfv1) / T_P4;
 800133c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001340:	eeb2 6b0e 	vmov.f64	d6, #46	; 0x41700000  15.0
 8001344:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001348:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800134c:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8001350:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001354:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001358:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800135c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8001360:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001364:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001368:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800136c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	ed83 7b08 	vstr	d7, [r3, #32]
 Traj->TrajCoef[5] = -(3 * (2 * ds + tfv0 + tfv1)) / T_P5;
 8001376:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800137a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800137e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001382:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001386:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800138a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800138e:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8001392:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001396:	eeb1 5b47 	vneg.f64	d5, d7
 800139a:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 800139e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 80013a8:	bf00      	nop
 80013aa:	376c      	adds	r7, #108	; 0x6c
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <TrajFollow>:

void TrajFollow(TrajParameter *Traj, double traj_t[5], double *Position,
		double *Velocity) {
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	ed93 6b00 	vldr	d6, [r3]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	ed93 5b02 	vldr	d5, [r3, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	ed93 7b00 	vldr	d7, [r3]
 80013d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013d8:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (Traj->TrajCoef[3] * traj_t[2]) + (Traj->TrajCoef[4] * traj_t[3])
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	ed93 5b06 	vldr	d5, [r3, #24]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3310      	adds	r3, #16
 80013e6:	ed93 7b00 	vldr	d7, [r3]
 80013ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	ed93 5b08 	vldr	d5, [r3, #32]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3318      	adds	r3, #24
 80013fc:	ed93 7b00 	vldr	d7, [r3]
 8001400:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001404:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (Traj->TrajCoef[5] * traj_t[4]);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3320      	adds	r3, #32
 8001412:	ed93 7b00 	vldr	d7, [r3]
 8001416:	ee25 7b07 	vmul.f64	d7, d5, d7
 800141a:	ee36 7b07 	vadd.f64	d7, d6, d7
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	ed83 7b00 	vstr	d7, [r3]
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	ed93 6b02 	vldr	d6, [r3, #8]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	ed93 7b06 	vldr	d7, [r3, #24]
 8001430:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001434:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3308      	adds	r3, #8
 800143c:	ed93 7b00 	vldr	d7, [r3]
 8001440:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001444:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((4.0 * Traj->TrajCoef[4]) * traj_t[2])
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	ed93 7b08 	vldr	d7, [r3, #32]
 800144e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001452:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3310      	adds	r3, #16
 800145a:	ed93 7b00 	vldr	d7, [r3]
 800145e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001462:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((5.0 * Traj->TrajCoef[5]) * traj_t[3]);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800146c:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8001470:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	3318      	adds	r3, #24
 8001478:	ed93 7b00 	vldr	d7, [r3]
 800147c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001480:	ee36 7b07 	vadd.f64	d7, d6, d7
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	ed83 7b00 	vstr	d7, [r3]
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <Kalman_init>:
 * KalmanFilter
 *
 * Q -> Process
 * R -> Sensor
 */
void Kalman_init(KalmanParameter *kalman, double Q, double R) {
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6178      	str	r0, [r7, #20]
 80014a0:	ed87 0b02 	vstr	d0, [r7, #8]
 80014a4:	ed87 1b00 	vstr	d1, [r7]
	kalman->Q = Q; 			// Adjustable
 80014a8:	6979      	ldr	r1, [r7, #20]
 80014aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014ae:	e9c1 2300 	strd	r2, r3, [r1]
	kalman->R = R; 			// Adjustable
 80014b2:	6979      	ldr	r1, [r7, #20]
 80014b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	kalman->x1 = 0.0;
 80014bc:	6979      	ldr	r1, [r7, #20]
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kalman->x2 = 0.0;
 80014ca:	6979      	ldr	r1, [r7, #20]
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->p11 = 0.05;
 80014d8:	6979      	ldr	r1, [r7, #20]
 80014da:	a30f      	add	r3, pc, #60	; (adr r3, 8001518 <Kalman_init+0x80>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->p12 = 0.05;
 80014e4:	6979      	ldr	r1, [r7, #20]
 80014e6:	a30c      	add	r3, pc, #48	; (adr r3, 8001518 <Kalman_init+0x80>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	kalman->p21 = 0.05;
 80014f0:	6979      	ldr	r1, [r7, #20]
 80014f2:	a309      	add	r3, pc, #36	; (adr r3, 8001518 <Kalman_init+0x80>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kalman->p22 = 0.05;
 80014fc:	6979      	ldr	r1, [r7, #20]
 80014fe:	a306      	add	r3, pc, #24	; (adr r3, 8001518 <Kalman_init+0x80>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	f3af 8000 	nop.w
 8001518:	9999999a 	.word	0x9999999a
 800151c:	3fa99999 	.word	0x3fa99999

08001520 <KalmanFilter>:


/*
 *	theta_k is Position input
 */
void KalmanFilter(KalmanParameter *kalman ,double theta_k) {
 8001520:	b480      	push	{r7}
 8001522:	b0a5      	sub	sp, #148	; 0x94
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	ed87 0b00 	vstr	d0, [r7]
	double e_xx1_tmp;
	double xx1_tmp;
	double xx1_tmp_tmp;
	double xx2_tmp;
	double xx1,xx2,pp11,pp12,pp21,pp22;
	xx1_tmp = 4.0 * delta_t * kalman->p12;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001532:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8001888 <KalmanFilter+0x368>
 8001536:	ee27 7b06 	vmul.f64	d7, d7, d6
 800153a:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	b_xx1_tmp = 4.0 * delta_t * kalman->p21;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001544:	ed9f 6bd0 	vldr	d6, [pc, #832]	; 8001888 <KalmanFilter+0x368>
 8001548:	ee27 7b06 	vmul.f64	d7, d7, d6
 800154c:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	c_xx1_tmp = kalman->Q * delta_tPow4;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	ed93 7b00 	vldr	d7, [r3]
 8001556:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8001890 <KalmanFilter+0x370>
 800155a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800155e:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	xx1_tmp_tmp = delta_tPow2;
 8001562:	a3d1      	add	r3, pc, #836	; (adr r3, 80018a8 <KalmanFilter+0x388>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	d_xx1_tmp = 4.0 * xx1_tmp_tmp * kalman->p22;
 800156c:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001570:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001574:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800157e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001582:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	e_xx1_tmp = ((((4.0 * kalman->R + 4.0 * kalman->p11) + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	ed93 7b02 	vldr	d7, [r3, #8]
 800158c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001590:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	ed93 7b08 	vldr	d7, [r3, #32]
 800159a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800159e:	ee27 7b05 	vmul.f64	d7, d7, d5
 80015a2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015a6:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80015aa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015ae:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80015b2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015b6:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80015ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015be:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 80015c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015c6:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			+ d_xx1_tmp;
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80015d0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80015d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	ed93 7b04 	vldr	d7, [r3, #16]
 80015de:	ee26 6b07 	vmul.f64	d6, d6, d7
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	ed93 7b08 	vldr	d7, [r3, #32]
 80015e8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80015ec:	ee27 5b05 	vmul.f64	d5, d7, d5
 80015f0:	ed97 7b00 	vldr	d7, [r7]
 80015f4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80015f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015fc:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 8001600:	ed97 7b00 	vldr	d7, [r7]
 8001604:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001608:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ 4.0 * kalman->R * delta_t * kalman->x2) + xx1_tmp * theta_k) + b_xx1_tmp * theta_k)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001612:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001616:	ee27 7b05 	vmul.f64	d7, d7, d5
 800161a:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 8001898 <KalmanFilter+0x378>
 800161e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	ed93 7b06 	vldr	d7, [r3, #24]
 8001628:	ee25 7b07 	vmul.f64	d7, d5, d7
 800162c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001630:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 8001634:	ed97 7b00 	vldr	d7, [r7]
 8001638:	ee25 7b07 	vmul.f64	d7, d5, d7
 800163c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001640:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8001644:	ed97 7b00 	vldr	d7, [r7]
 8001648:	ee25 7b07 	vmul.f64	d7, d5, d7
 800164c:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ c_xx1_tmp * theta_k) / e_xx1_tmp;
 8001650:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8001654:	ed97 7b00 	vldr	d7, [r7]
 8001658:	ee25 7b07 	vmul.f64	d7, d5, d7
 800165c:	ee36 5b07 	vadd.f64	d5, d6, d7
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8001660:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001664:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001668:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	xx2_tmp = kalman->p22 * delta_t;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001672:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8001898 <KalmanFilter+0x378>
 8001676:	ee27 7b06 	vmul.f64	d7, d7, d6
 800167a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	b_xx2_tmp = kalman->Q * delta_tPow3;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	ed93 7b00 	vldr	d7, [r3]
 8001684:	ed9f 6b86 	vldr	d6, [pc, #536]	; 80018a0 <KalmanFilter+0x380>
 8001688:	ee27 7b06 	vmul.f64	d7, d7, d6
 800168c:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	c_xx2_tmp = b_xx2_tmp / 2.0 + xx2_tmp;
 8001690:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8001694:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001698:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800169c:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80016a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016a4:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	d_xx2_tmp = c_xx2_tmp + kalman->p21;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80016ae:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 80016b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016b6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	xx2_tmp = (((kalman->R + kalman->p11) + delta_t * kalman->p21) + c_xx1_tmp / 4.0) + delta_t * (kalman->p12 + xx2_tmp);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	ed93 6b02 	vldr	d6, [r3, #8]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	ed93 7b08 	vldr	d7, [r3, #32]
 80016c6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80016d0:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8001898 <KalmanFilter+0x378>
 80016d4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80016d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016dc:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 80016e0:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 80016e4:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80016e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 80016f2:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80016f6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80016fa:	ed9f 5b67 	vldr	d5, [pc, #412]	; 8001898 <KalmanFilter+0x378>
 80016fe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001702:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001706:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	xx2 = kalman->x2 - d_xx2_tmp * ((kalman->x1 - theta_k) + delta_t * kalman->x2) / xx2_tmp;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	ed93 6b06 	vldr	d6, [r3, #24]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	ed93 5b04 	vldr	d5, [r3, #16]
 8001716:	ed97 7b00 	vldr	d7, [r7]
 800171a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	ed93 7b06 	vldr	d7, [r3, #24]
 8001724:	ed9f 4b5c 	vldr	d4, [pc, #368]	; 8001898 <KalmanFilter+0x378>
 8001728:	ee27 7b04 	vmul.f64	d7, d7, d4
 800172c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001730:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001734:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001738:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 800173c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001740:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001744:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	pp11 = kalman->R * ((((4.0 * kalman->p11 + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp) + d_xx1_tmp)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	ed93 6b02 	vldr	d6, [r3, #8]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	ed93 7b08 	vldr	d7, [r3, #32]
 8001754:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001758:	ee27 5b05 	vmul.f64	d5, d7, d5
 800175c:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001760:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001764:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8001768:	ee35 5b07 	vadd.f64	d5, d5, d7
 800176c:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8001770:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001774:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8001778:	ee35 7b07 	vadd.f64	d7, d5, d7
 800177c:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001780:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001784:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001788:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			/ e_xx1_tmp;
	xx1_tmp = b_xx2_tmp + 2.0 * kalman->p22 * delta_t;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001792:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001796:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8001898 <KalmanFilter+0x378>
 800179a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800179e:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80017a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017a6:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	pp12 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p12) / e_xx1_tmp;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	ed93 7b02 	vldr	d7, [r3, #8]
 80017b0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80017ba:	ee37 5b07 	vadd.f64	d5, d7, d7
 80017be:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80017c2:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017c6:	ee26 5b07 	vmul.f64	d5, d6, d7
 80017ca:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80017ce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017d2:	ed87 7b08 	vstr	d7, [r7, #32]
	pp21 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p21) / e_xx1_tmp;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	ed93 7b02 	vldr	d7, [r3, #8]
 80017dc:	ee37 6b07 	vadd.f64	d6, d7, d7
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80017e6:	ee37 5b07 	vadd.f64	d5, d7, d7
 80017ea:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80017ee:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017f2:	ee26 5b07 	vmul.f64	d5, d6, d7
 80017f6:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80017fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017fe:	ed87 7b06 	vstr	d7, [r7, #24]
	pp22 = (kalman->p22 + kalman->Q * xx1_tmp_tmp) - (c_xx2_tmp + kalman->p12) * d_xx2_tmp / xx2_tmp;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	ed93 5b00 	vldr	d5, [r3]
 800180e:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001812:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001816:	ee36 6b07 	vadd.f64	d6, d6, d7
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8001820:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001824:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001828:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800182c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001830:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8001834:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001838:	ee36 7b47 	vsub.f64	d7, d6, d7
 800183c:	ed87 7b04 	vstr	d7, [r7, #16]

	/*Update Variable*/
	kalman->x1 = xx1;
 8001840:	68f9      	ldr	r1, [r7, #12]
 8001842:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001846:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kalman->x2 = xx2;
 800184a:	68f9      	ldr	r1, [r7, #12]
 800184c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001850:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->p11 = pp11;
 8001854:	68f9      	ldr	r1, [r7, #12]
 8001856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800185a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->p12 = pp12;
 800185e:	68f9      	ldr	r1, [r7, #12]
 8001860:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001864:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	kalman->p21 = pp21;
 8001868:	68f9      	ldr	r1, [r7, #12]
 800186a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800186e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kalman->p22 = pp22;
 8001872:	68f9      	ldr	r1, [r7, #12]
 8001874:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001878:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 800187c:	bf00      	nop
 800187e:	3794      	adds	r7, #148	; 0x94
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	d2f1a9fc 	.word	0xd2f1a9fc
 800188c:	3f70624d 	.word	0x3f70624d
 8001890:	812dea12 	.word	0x812dea12
 8001894:	3d719799 	.word	0x3d719799
 8001898:	d2f1a9fc 	.word	0xd2f1a9fc
 800189c:	3f50624d 	.word	0x3f50624d
 80018a0:	e826d695 	.word	0xe826d695
 80018a4:	3e112e0b 	.word	0x3e112e0b
 80018a8:	a0b5ed8d 	.word	0xa0b5ed8d
 80018ac:	3eb0c6f7 	.word	0x3eb0c6f7

080018b0 <PID_init>:

double BaseENCRead(){
	return 970.0f;  //fsaldfkjas;dflkjas;dflksjf;asdf
}

void PID_init(PIDParameter *PID, double Kp, double Ki, double Kd) {
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	61f8      	str	r0, [r7, #28]
 80018b8:	ed87 0b04 	vstr	d0, [r7, #16]
 80018bc:	ed87 1b02 	vstr	d1, [r7, #8]
 80018c0:	ed87 2b00 	vstr	d2, [r7]
	PID->Kp = Kp;
 80018c4:	69f9      	ldr	r1, [r7, #28]
 80018c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018ca:	e9c1 2300 	strd	r2, r3, [r1]
	PID->Ki = Ki;
 80018ce:	69f9      	ldr	r1, [r7, #28]
 80018d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	PID->Kd = Kd;
 80018d8:	69f9      	ldr	r1, [r7, #28]
 80018da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018de:	e9c1 2304 	strd	r2, r3, [r1, #16]
	PID->ITerm = 0;
 80018e2:	69f9      	ldr	r1, [r7, #28]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
	PID->Setpoint = 0;
 80018f0:	69f9      	ldr	r1, [r7, #28]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PID->Feedback = 0;
 80018fe:	69f9      	ldr	r1, [r7, #28]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	PID->Error[0] = 0;
 800190c:	69f9      	ldr	r1, [r7, #28]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	PID->Error[1] = 0;
 800191a:	69f9      	ldr	r1, [r7, #28]
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	PID->Output = 0;
 8001928:	69f9      	ldr	r1, [r7, #28]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001936:	bf00      	nop
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <PID_Control>:

double PID_Control(PIDParameter *PID,double Setpoint,double Feedback){
 8001942:	b480      	push	{r7}
 8001944:	b087      	sub	sp, #28
 8001946:	af00      	add	r7, sp, #0
 8001948:	6178      	str	r0, [r7, #20]
 800194a:	ed87 0b02 	vstr	d0, [r7, #8]
 800194e:	ed87 1b00 	vstr	d1, [r7]
	PID->Feedback = Feedback; 	// Feedback Input
 8001952:	6979      	ldr	r1, [r7, #20]
 8001954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001958:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	PID->Setpoint = Setpoint;	// Setpoint Input
 800195c:	6979      	ldr	r1, [r7, #20]
 800195e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001962:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PID->Error[0] = PID->Setpoint - PID->Feedback;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	ed93 6b08 	vldr	d6, [r3, #32]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001972:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	PID->ITerm += PID->Error[0];
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	ed93 6b06 	vldr	d6, [r3, #24]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001988:	ee36 7b07 	vadd.f64	d7, d6, d7
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	ed83 7b06 	vstr	d7, [r3, #24]
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	ed93 6b00 	vldr	d6, [r3]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800199e:	ee26 6b07 	vmul.f64	d6, d6, d7
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	ed93 5b02 	vldr	d5, [r3, #8]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	ed93 7b06 	vldr	d7, [r3, #24]
 80019ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019b2:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (PID->Kd * (PID->Error[0] - PID->Error[1])));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	ed93 5b04 	vldr	d5, [r3, #16]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80019c8:	ee34 7b47 	vsub.f64	d7, d4, d7
 80019cc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019d0:	ee36 7b07 	vadd.f64	d7, d6, d7
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	PID->Error[1] = PID->Error[0]; // Update Error
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80019e0:	6979      	ldr	r1, [r7, #20]
 80019e2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	return PID->Output;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80019ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80019f0:	eeb0 0b47 	vmov.f64	d0, d7
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <CascadeControl_init>:


void CascadeControl_init(ControlParameter *Control,double PosP,double PosI,double PosD,double VelP,double VelI,double VelD, double GFeed){
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b090      	sub	sp, #64	; 0x40
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001a06:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8001a0a:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8001a0e:	ed87 2b08 	vstr	d2, [r7, #32]
 8001a12:	ed87 3b06 	vstr	d3, [r7, #24]
 8001a16:	ed87 4b04 	vstr	d4, [r7, #16]
 8001a1a:	ed87 5b02 	vstr	d5, [r7, #8]
 8001a1e:	ed87 6b00 	vstr	d6, [r7]
	PID_init(&Control->Pos,PosP,PosI,PosD);
 8001a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a24:	ed97 2b08 	vldr	d2, [r7, #32]
 8001a28:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8001a2c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff3d 	bl	80018b0 <PID_init>
	PID_init(&Control->Vel,VelP,VelI,VelD);
 8001a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a38:	3360      	adds	r3, #96	; 0x60
 8001a3a:	ed97 2b02 	vldr	d2, [r7, #8]
 8001a3e:	ed97 1b04 	vldr	d1, [r7, #16]
 8001a42:	ed97 0b06 	vldr	d0, [r7, #24]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff32 	bl	80018b0 <PID_init>
	Control->Vel_Gfeed = GFeed;
 8001a4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a52:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
}
 8001a56:	bf00      	nop
 8001a58:	3740      	adds	r7, #64	; 0x40
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <CascadeControl>:


void CascadeControl(ControlParameter *Control, KalmanParameter *kalman,
		double Pos_Feed, double pos_set, double vel_set) {
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b088      	sub	sp, #32
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	61f8      	str	r0, [r7, #28]
 8001a66:	61b9      	str	r1, [r7, #24]
 8001a68:	ed87 0b04 	vstr	d0, [r7, #16]
 8001a6c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001a70:	ed87 2b00 	vstr	d2, [r7]
	/*Set Setpoint*/
	Control->PositionSetpoint = pos_set;
 8001a74:	69f9      	ldr	r1, [r7, #28]
 8001a76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a7a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Control->VelocitySetpoint = vel_set;
 8001a7e:	69f9      	ldr	r1, [r7, #28]
 8001a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a84:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

	/*Kalman Filter*/
	KalmanFilter(kalman, Pos_Feed); /*Kalman filter */
 8001a88:	ed97 0b04 	vldr	d0, [r7, #16]
 8001a8c:	69b8      	ldr	r0, [r7, #24]
 8001a8e:	f7ff fd47 	bl	8001520 <KalmanFilter>
	Control->VelocityFeedback = kalman->x2;
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a98:	69f9      	ldr	r1, [r7, #28]
 8001a9a:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	Control->PositionFeedback = kalman->x1;
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001aa4:	69f9      	ldr	r1, [r7, #28]
 8001aa6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	/*Position PID Control*/
	Control->PositionPIDOutput = PID_Control(&Control->Pos,
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001ab8:	eeb0 1b46 	vmov.f64	d1, d6
 8001abc:	eeb0 0b47 	vmov.f64	d0, d7
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f7ff ff3e 	bl	8001942 <PID_Control>
 8001ac6:	eeb0 7b40 	vmov.f64	d7, d0
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
			Control->PositionSetpoint, Control->PositionFeedback);
	/*Feedforward Velocity*/
	Control->SumVelocityFeedForward = Control->PositionPIDOutput + Control->VelocitySetpoint;
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8001adc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	/*Velocity PID Control*/
	Control->VelocityPIDOutput = PID_Control(&Control->Vel,
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	ed93 6b2e 	vldr	d6, [r3, #184]	; 0xb8
 8001af8:	eeb0 1b46 	vmov.f64	d1, d6
 8001afc:	eeb0 0b47 	vmov.f64	d0, d7
 8001b00:	4610      	mov	r0, r2
 8001b02:	f7ff ff1e 	bl	8001942 <PID_Control>
 8001b06:	eeb0 7b40 	vmov.f64	d7, d0
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
			Control->SumVelocityFeedForward, Control->VelocityFeedback);
	/*Feedforward Velocity Setpoint*/
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	ed93 6b32 	vldr	d6, [r3, #200]	; 0xc8
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8001b1c:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ Control->VelocityPIDOutput;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 8001b26:	ee36 7b07 	vadd.f64	d7, d6, d7
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
//	Control->Output = Control->VelocityPIDOutput;
}
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <MX_CRC_Init+0x54>)
 8001b40:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b50:	221d      	movs	r2, #29
 8001b52:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b56:	2210      	movs	r2, #16
 8001b58:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b5c:	22c4      	movs	r2, #196	; 0xc4
 8001b5e:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b74:	f007 fed2 	bl	800991c <HAL_CRC_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8001b7e:	f003 fdbb 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000248 	.word	0x20000248
 8001b8c:	58024c00 	.word	0x58024c00

08001b90 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <HAL_CRC_MspInit+0x3c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_CRC_MspInit+0x40>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <HAL_CRC_MspInit+0x40>)
 8001baa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_CRC_MspInit+0x40>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	58024c00 	.word	0x58024c00
 8001bd0:	58024400 	.word	0x58024400

08001bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <MX_DMA_Init+0x5c>)
 8001bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001be0:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <MX_DMA_Init+0x5c>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_DMA_Init+0x5c>)
 8001bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	200b      	movs	r0, #11
 8001bfe:	f007 fe58 	bl	80098b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c02:	200b      	movs	r0, #11
 8001c04:	f007 fe6f 	bl	80098e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	200c      	movs	r0, #12
 8001c0e:	f007 fe50 	bl	80098b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c12:	200c      	movs	r0, #12
 8001c14:	f007 fe67 	bl	80098e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	200d      	movs	r0, #13
 8001c1e:	f007 fe48 	bl	80098b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c22:	200d      	movs	r0, #13
 8001c24:	f007 fe5f 	bl	80098e6 <HAL_NVIC_EnableIRQ>

}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	58024400 	.word	0x58024400

08001c34 <MX_GPIO_Init>:
        * the Code Generation settings)
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08c      	sub	sp, #48	; 0x30
 8001c38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c4a:	4b91      	ldr	r3, [pc, #580]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	4a8f      	ldr	r2, [pc, #572]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5a:	4b8d      	ldr	r3, [pc, #564]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c68:	4b89      	ldr	r3, [pc, #548]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	4a88      	ldr	r2, [pc, #544]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c78:	4b85      	ldr	r3, [pc, #532]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c86:	4b82      	ldr	r3, [pc, #520]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8c:	4a80      	ldr	r2, [pc, #512]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c96:	4b7e      	ldr	r3, [pc, #504]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	4b7a      	ldr	r3, [pc, #488]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001caa:	4a79      	ldr	r2, [pc, #484]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb4:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	4a71      	ldr	r2, [pc, #452]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cca:	f043 0302 	orr.w	r3, r3, #2
 8001cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd2:	4b6f      	ldr	r3, [pc, #444]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce0:	4b6b      	ldr	r3, [pc, #428]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce6:	4a6a      	ldr	r2, [pc, #424]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001ce8:	f043 0308 	orr.w	r3, r3, #8
 8001cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf0:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001d04:	4863      	ldr	r0, [pc, #396]	; (8001e94 <MX_GPIO_Init+0x260>)
 8001d06:	f00a fff7 	bl	800ccf8 <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001d10:	4861      	ldr	r0, [pc, #388]	; (8001e98 <MX_GPIO_Init+0x264>)
 8001d12:	f00a fff1 	bl	800ccf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	21c4      	movs	r1, #196	; 0xc4
 8001d1a:	4860      	ldr	r0, [pc, #384]	; (8001e9c <MX_GPIO_Init+0x268>)
 8001d1c:	f00a ffec 	bl	800ccf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	f24c 0140 	movw	r1, #49216	; 0xc040
 8001d26:	485e      	ldr	r0, [pc, #376]	; (8001ea0 <MX_GPIO_Init+0x26c>)
 8001d28:	f00a ffe6 	bl	800ccf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d32:	4859      	ldr	r0, [pc, #356]	; (8001e98 <MX_GPIO_Init+0x264>)
 8001d34:	f00a ffe0 	bl	800ccf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001d38:	2201      	movs	r2, #1
 8001d3a:	213f      	movs	r1, #63	; 0x3f
 8001d3c:	4858      	ldr	r0, [pc, #352]	; (8001ea0 <MX_GPIO_Init+0x26c>)
 8001d3e:	f00a ffdb 	bl	800ccf8 <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001d42:	f648 33df 	movw	r3, #35807	; 0x8bdf
 8001d46:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	4619      	mov	r1, r3
 8001d5a:	484e      	ldr	r0, [pc, #312]	; (8001e94 <MX_GPIO_Init+0x260>)
 8001d5c:	f00a fe24 	bl	800c9a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001d60:	f24e 030f 	movw	r3, #57359	; 0xe00f
 8001d64:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d66:	2303      	movs	r3, #3
 8001d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6e:	f107 031c 	add.w	r3, r7, #28
 8001d72:	4619      	mov	r1, r3
 8001d74:	4848      	ldr	r0, [pc, #288]	; (8001e98 <MX_GPIO_Init+0x264>)
 8001d76:	f00a fe17 	bl	800c9a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d7a:	233c      	movs	r3, #60	; 0x3c
 8001d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4845      	ldr	r0, [pc, #276]	; (8001ea4 <MX_GPIO_Init+0x270>)
 8001d8e:	f00a fe0b 	bl	800c9a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 8001d92:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	483b      	ldr	r0, [pc, #236]	; (8001e98 <MX_GPIO_Init+0x264>)
 8001dac:	f00a fdfc 	bl	800c9a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001db0:	2301      	movs	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db4:	2303      	movs	r3, #3
 8001db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4836      	ldr	r0, [pc, #216]	; (8001e9c <MX_GPIO_Init+0x268>)
 8001dc4:	f00a fdf0 	bl	800c9a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dcc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	482f      	ldr	r0, [pc, #188]	; (8001e9c <MX_GPIO_Init+0x268>)
 8001dde:	f00a fde3 	bl	800c9a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 8001de2:	23c4      	movs	r3, #196	; 0xc4
 8001de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4828      	ldr	r0, [pc, #160]	; (8001e9c <MX_GPIO_Init+0x268>)
 8001dfa:	f00a fdd5 	bl	800c9a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e04:	2303      	movs	r3, #3
 8001e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	4619      	mov	r1, r3
 8001e12:	4820      	ldr	r0, [pc, #128]	; (8001e94 <MX_GPIO_Init+0x260>)
 8001e14:	f00a fdc8 	bl	800c9a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_7;
 8001e18:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	481c      	ldr	r0, [pc, #112]	; (8001ea0 <MX_GPIO_Init+0x26c>)
 8001e2e:	f00a fdbb 	bl	800c9a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001e32:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001e36:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4815      	ldr	r0, [pc, #84]	; (8001ea0 <MX_GPIO_Init+0x26c>)
 8001e4c:	f00a fdac 	bl	800c9a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	480f      	ldr	r0, [pc, #60]	; (8001ea4 <MX_GPIO_Init+0x270>)
 8001e66:	f00a fd9f 	bl	800c9a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <MX_GPIO_Init+0x270>)
 8001e84:	f00a fd90 	bl	800c9a8 <HAL_GPIO_Init>

}
 8001e88:	bf00      	nop
 8001e8a:	3730      	adds	r7, #48	; 0x30
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	58024400 	.word	0x58024400
 8001e94:	58021000 	.word	0x58021000
 8001e98:	58020800 	.word	0x58020800
 8001e9c:	58020400 	.word	0x58020400
 8001ea0:	58020c00 	.word	0x58020c00
 8001ea4:	58020000 	.word	0x58020000

08001ea8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001eae:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <MX_I2C2_Init+0x78>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <MX_I2C2_Init+0x7c>)
 8001eb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ee2:	480e      	ldr	r0, [pc, #56]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ee4:	f00a ff3c 	bl	800cd60 <HAL_I2C_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001eee:	f003 fc03 	bl	80056f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4809      	ldr	r0, [pc, #36]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ef6:	f00c fa6d 	bl	800e3d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001f00:	f003 fbfa 	bl	80056f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f04:	2100      	movs	r1, #0
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001f08:	f00c faaf 	bl	800e46a <HAL_I2CEx_ConfigDigitalFilter>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001f12:	f003 fbf1 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000026c 	.word	0x2000026c
 8001f20:	40005800 	.word	0x40005800
 8001f24:	60404e72 	.word	0x60404e72

08001f28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0b6      	sub	sp, #216	; 0xd8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	22b4      	movs	r2, #180	; 0xb4
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f015 f94d 	bl	80171e8 <memset>
  if(i2cHandle->Instance==I2C2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a29      	ldr	r2, [pc, #164]	; (8001ff8 <HAL_I2C_MspInit+0xd0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d14a      	bne.n	8001fee <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f62:	f107 0310 	add.w	r3, r7, #16
 8001f66:	4618      	mov	r0, r3
 8001f68:	f00d fa40 	bl	800f3ec <HAL_RCCEx_PeriphCLKConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f72:	f003 fbc1 	bl	80056f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7c:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f9c:	2312      	movs	r3, #18
 8001f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4811      	ldr	r0, [pc, #68]	; (8002000 <HAL_I2C_MspInit+0xd8>)
 8001fbc:	f00a fcf4 	bl	800c9a8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fc6:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001fc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fcc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2022      	movs	r0, #34	; 0x22
 8001fe4:	f007 fc65 	bl	80098b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001fe8:	2022      	movs	r0, #34	; 0x22
 8001fea:	f007 fc7c 	bl	80098e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001fee:	bf00      	nop
 8001ff0:	37d8      	adds	r7, #216	; 0xd8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40005800 	.word	0x40005800
 8001ffc:	58024400 	.word	0x58024400
 8002000:	58020400 	.word	0x58020400
 8002004:	00000000 	.word	0x00000000

08002008 <IPK>:
 *
 **************** Output ********************
 * q[4]				---> JointSpace Position
 *
 */
Kinematics_StatusTypeDef IPK(double gammabar[3], double chi[3], double q[4]) {
 8002008:	b580      	push	{r7, lr}
 800200a:	ed2d 8b02 	vpush	{d8}
 800200e:	b08e      	sub	sp, #56	; 0x38
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
	double c2;
	double q2;
	double q3;
	double s2;
	double x24;
	x24 = gammabar[1] * sqrt(chi[0] * chi[0] + chi[1] * chi[1]) - 20.0;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3308      	adds	r3, #8
 800201c:	ed93 8b00 	vldr	d8, [r3]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	ed93 6b00 	vldr	d6, [r3]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	ed93 7b00 	vldr	d7, [r3]
 800202c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	3308      	adds	r3, #8
 8002034:	ed93 5b00 	vldr	d5, [r3]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	3308      	adds	r3, #8
 800203c:	ed93 7b00 	vldr	d7, [r3]
 8002040:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002044:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002048:	eeb0 0b47 	vmov.f64	d0, d7
 800204c:	f015 f970 	bl	8017330 <sqrt>
 8002050:	eeb0 7b40 	vmov.f64	d7, d0
 8002054:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002058:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 800205c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002060:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	c2 = x24 * x24
 8002064:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002068:	ee27 6b07 	vmul.f64	d6, d7, d7
			+ ((chi[2] + 268.23) - 295.89) * ((chi[2] + 268.23) - 295.89);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	3310      	adds	r3, #16
 8002070:	ed93 7b00 	vldr	d7, [r3]
 8002074:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8002228 <IPK+0x220>
 8002078:	ee37 7b05 	vadd.f64	d7, d7, d5
 800207c:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8002230 <IPK+0x228>
 8002080:	ee37 5b45 	vsub.f64	d5, d7, d5
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3310      	adds	r3, #16
 8002088:	ed93 7b00 	vldr	d7, [r3]
 800208c:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8002228 <IPK+0x220>
 8002090:	ee37 7b04 	vadd.f64	d7, d7, d4
 8002094:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8002230 <IPK+0x228>
 8002098:	ee37 7b44 	vsub.f64	d7, d7, d4
 800209c:	ee25 7b07 	vmul.f64	d7, d5, d7
	c2 = x24 * x24
 80020a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020a4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	s2 = sqrt(c2);
 80020a8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80020ac:	f015 f940 	bl	8017330 <sqrt>
 80020b0:	ed87 0b08 	vstr	d0, [r7, #32]
	if ((s2 <= 760.0) && (s2 >= 0.0)) {
 80020b4:	ed97 7b08 	vldr	d7, [r7, #32]
 80020b8:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8002238 <IPK+0x230>
 80020bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80020c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c4:	f200 80a8 	bhi.w	8002218 <IPK+0x210>
 80020c8:	ed97 7b08 	vldr	d7, [r7, #32]
 80020cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80020d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d4:	f2c0 80a0 	blt.w	8002218 <IPK+0x210>
		c2 = ((c2 - 144400.0) - 144400.0) / 288800.0;
 80020d8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80020dc:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8002240 <IPK+0x238>
 80020e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020e4:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002240 <IPK+0x238>
 80020e8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80020ec:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8002248 <IPK+0x240>
 80020f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020f4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		s2 = gammabar[2] * sqrt(1.0 - c2 * c2);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3310      	adds	r3, #16
 80020fc:	ed93 8b00 	vldr	d8, [r3]
 8002100:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002104:	ee27 7b07 	vmul.f64	d7, d7, d7
 8002108:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800210c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002110:	eeb0 0b47 	vmov.f64	d0, d7
 8002114:	f015 f90c 	bl	8017330 <sqrt>
 8002118:	eeb0 7b40 	vmov.f64	d7, d0
 800211c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002120:	ed87 7b08 	vstr	d7, [r7, #32]
		q2 = (atan2((chi[2] + 268.23) - 295.89, x24)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	3310      	adds	r3, #16
 8002128:	ed93 7b00 	vldr	d7, [r3]
 800212c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002228 <IPK+0x220>
 8002130:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002134:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002230 <IPK+0x228>
 8002138:	ee37 7b46 	vsub.f64	d7, d7, d6
 800213c:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8002140:	eeb0 0b47 	vmov.f64	d0, d7
 8002144:	f015 f8f0 	bl	8017328 <atan2>
 8002148:	eeb0 8b40 	vmov.f64	d8, d0
				- atan2(380.0 * s2, 380.0 * c2 + 380.0)) - 1.5707963267948966;
 800214c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002150:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8002250 <IPK+0x248>
 8002154:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002158:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800215c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8002250 <IPK+0x248>
 8002160:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002164:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8002250 <IPK+0x248>
 8002168:	ee37 7b05 	vadd.f64	d7, d7, d5
 800216c:	eeb0 1b47 	vmov.f64	d1, d7
 8002170:	eeb0 0b46 	vmov.f64	d0, d6
 8002174:	f015 f8d8 	bl	8017328 <atan2>
 8002178:	eeb0 7b40 	vmov.f64	d7, d0
 800217c:	ee38 7b47 	vsub.f64	d7, d8, d7
		q2 = (atan2((chi[2] + 268.23) - 295.89, x24)
 8002180:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8002258 <IPK+0x250>
 8002184:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002188:	ed87 7b06 	vstr	d7, [r7, #24]
		q3 = atan2(s2, c2) + 1.5707963267948966;
 800218c:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8002190:	ed97 0b08 	vldr	d0, [r7, #32]
 8002194:	f015 f8c8 	bl	8017328 <atan2>
 8002198:	eeb0 7b40 	vmov.f64	d7, d0
 800219c:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8002258 <IPK+0x250>
 80021a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021a4:	ed87 7b04 	vstr	d7, [r7, #16]
		q[0] = atan2(gammabar[0] * chi[1], gammabar[0] * chi[0]);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	ed93 6b00 	vldr	d6, [r3]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	3308      	adds	r3, #8
 80021b2:	ed93 7b00 	vldr	d7, [r3]
 80021b6:	ee26 5b07 	vmul.f64	d5, d6, d7
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	ed93 6b00 	vldr	d6, [r3]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	ed93 7b00 	vldr	d7, [r3]
 80021c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021ca:	eeb0 1b47 	vmov.f64	d1, d7
 80021ce:	eeb0 0b45 	vmov.f64	d0, d5
 80021d2:	f015 f8a9 	bl	8017328 <atan2>
 80021d6:	eeb0 7b40 	vmov.f64	d7, d0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	ed83 7b00 	vstr	d7, [r3]
		q[1] = q2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f103 0108 	add.w	r1, r3, #8
 80021e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ea:	e9c1 2300 	strd	r2, r3, [r1]
		q[2] = q3;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f103 0110 	add.w	r1, r3, #16
 80021f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021f8:	e9c1 2300 	strd	r2, r3, [r1]
		q[3] = -q2 - q3;
 80021fc:	ed97 7b06 	vldr	d7, [r7, #24]
 8002200:	eeb1 6b47 	vneg.f64	d6, d7
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3318      	adds	r3, #24
 8002208:	ed97 7b04 	vldr	d7, [r7, #16]
 800220c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002210:	ed83 7b00 	vstr	d7, [r3]
		return Kinematics_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e000      	b.n	800221a <IPK+0x212>
	} else {
		return Error_Link_length;
 8002218:	2301      	movs	r3, #1
	}
}
 800221a:	4618      	mov	r0, r3
 800221c:	3738      	adds	r7, #56	; 0x38
 800221e:	46bd      	mov	sp, r7
 8002220:	ecbd 8b02 	vpop	{d8}
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	147ae148 	.word	0x147ae148
 800222c:	4070c3ae 	.word	0x4070c3ae
 8002230:	70a3d70a 	.word	0x70a3d70a
 8002234:	40727e3d 	.word	0x40727e3d
 8002238:	00000000 	.word	0x00000000
 800223c:	4087c000 	.word	0x4087c000
 8002240:	00000000 	.word	0x00000000
 8002244:	4101a080 	.word	0x4101a080
 8002248:	00000000 	.word	0x00000000
 800224c:	4111a080 	.word	0x4111a080
 8002250:	00000000 	.word	0x00000000
 8002254:	4077c000 	.word	0x4077c000
 8002258:	54442d18 	.word	0x54442d18
 800225c:	3ff921fb 	.word	0x3ff921fb

08002260 <IVK>:
 */

//Kinematics_StatusTypeDef IVK(double q[3], double chi_dot[3], double qv[4])

Kinematics_StatusTypeDef IVK(double q[4], double chi_dot[3], double qv[4])
{
 8002260:	b580      	push	{r7, lr}
 8002262:	ed2d 8b04 	vpush	{d8-d9}
 8002266:	b0a6      	sub	sp, #152	; 0x98
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  double qvbar_idx_1;
  double qvbar_idx_2;
  int r1;
  int r2;
  int rtemp;
  qvbar_idx_1 = q[1] + q[2];
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3308      	adds	r3, #8
 8002274:	ed93 6b00 	vldr	d6, [r3]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3310      	adds	r3, #16
 800227c:	ed93 7b00 	vldr	d7, [r3]
 8002280:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002284:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_2 = sin(qvbar_idx_1);
 8002288:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 800228c:	f015 f800 	bl	8017290 <sin>
 8002290:	ed87 0b1e 	vstr	d0, [r7, #120]	; 0x78
  Jv4_tmp = cos(q[0]);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	ed93 7b00 	vldr	d7, [r3]
 800229a:	eeb0 0b47 	vmov.f64	d0, d7
 800229e:	f014 ffab 	bl	80171f8 <cos>
 80022a2:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
  b_Jv4_tmp = sin(q[0]);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	ed93 7b00 	vldr	d7, [r3]
 80022ac:	eeb0 0b47 	vmov.f64	d0, d7
 80022b0:	f014 ffee 	bl	8017290 <sin>
 80022b4:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68
  qvbar_idx_1 = 380.0 * cos(qvbar_idx_1);
 80022b8:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 80022bc:	f014 ff9c 	bl	80171f8 <cos>
 80022c0:	eeb0 7b40 	vmov.f64	d7, d0
 80022c4:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 80025e8 <IVK+0x388>
 80022c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022cc:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  Jv4_tmp_tmp = 380.0 * sin(q[1]);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3308      	adds	r3, #8
 80022d4:	ed93 7b00 	vldr	d7, [r3]
 80022d8:	eeb0 0b47 	vmov.f64	d0, d7
 80022dc:	f014 ffd8 	bl	8017290 <sin>
 80022e0:	eeb0 7b40 	vmov.f64	d7, d0
 80022e4:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 80025e8 <IVK+0x388>
 80022e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022ec:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
  c_Jv4_tmp = (qvbar_idx_1 + 20.0) - Jv4_tmp_tmp;
 80022f0:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80022f4:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 80022f8:	ee37 6b06 	vadd.f64	d6, d7, d6
 80022fc:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002300:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002304:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
  Jv4[0] = -b_Jv4_tmp * c_Jv4_tmp;
 8002308:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800230c:	eeb1 6b47 	vneg.f64	d6, d7
 8002310:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002314:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002318:	ed87 7b04 	vstr	d7, [r7, #16]
  Jv4[3] = -Jv4_tmp * (380.0 * qvbar_idx_2 + 380.0 * cos(q[1]));
 800231c:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002320:	eeb1 8b47 	vneg.f64	d8, d7
 8002324:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002328:	ed9f 6baf 	vldr	d6, [pc, #700]	; 80025e8 <IVK+0x388>
 800232c:	ee27 9b06 	vmul.f64	d9, d7, d6
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3308      	adds	r3, #8
 8002334:	ed93 7b00 	vldr	d7, [r3]
 8002338:	eeb0 0b47 	vmov.f64	d0, d7
 800233c:	f014 ff5c 	bl	80171f8 <cos>
 8002340:	eeb0 7b40 	vmov.f64	d7, d0
 8002344:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80025e8 <IVK+0x388>
 8002348:	ee27 7b06 	vmul.f64	d7, d7, d6
 800234c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002350:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002354:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  Jv4[6] = -380.0 * qvbar_idx_2 * Jv4_tmp;
 8002358:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800235c:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80025f0 <IVK+0x390>
 8002360:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002364:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002368:	ee26 7b07 	vmul.f64	d7, d6, d7
 800236c:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  Jv4[1] = Jv4_tmp * c_Jv4_tmp;
 8002370:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8002374:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002378:	ee26 7b07 	vmul.f64	d7, d6, d7
 800237c:	ed87 7b06 	vstr	d7, [r7, #24]
  Jv4[4] = -sin(q[0]) * (380.0 * sin(q[1] + q[2]) + 380.0 * cos(q[1]));
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	ed93 7b00 	vldr	d7, [r3]
 8002386:	eeb0 0b47 	vmov.f64	d0, d7
 800238a:	f014 ff81 	bl	8017290 <sin>
 800238e:	eeb0 7b40 	vmov.f64	d7, d0
 8002392:	eeb1 8b47 	vneg.f64	d8, d7
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3308      	adds	r3, #8
 800239a:	ed93 6b00 	vldr	d6, [r3]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3310      	adds	r3, #16
 80023a2:	ed93 7b00 	vldr	d7, [r3]
 80023a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023aa:	eeb0 0b47 	vmov.f64	d0, d7
 80023ae:	f014 ff6f 	bl	8017290 <sin>
 80023b2:	eeb0 7b40 	vmov.f64	d7, d0
 80023b6:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 80025e8 <IVK+0x388>
 80023ba:	ee27 9b06 	vmul.f64	d9, d7, d6
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3308      	adds	r3, #8
 80023c2:	ed93 7b00 	vldr	d7, [r3]
 80023c6:	eeb0 0b47 	vmov.f64	d0, d7
 80023ca:	f014 ff15 	bl	80171f8 <cos>
 80023ce:	eeb0 7b40 	vmov.f64	d7, d0
 80023d2:	ed9f 6b85 	vldr	d6, [pc, #532]	; 80025e8 <IVK+0x388>
 80023d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023da:	ee39 7b07 	vadd.f64	d7, d9, d7
 80023de:	ee28 7b07 	vmul.f64	d7, d8, d7
 80023e2:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  Jv4[7] = -380.0 * sin(q[1] + q[2]) * b_Jv4_tmp;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3308      	adds	r3, #8
 80023ea:	ed93 6b00 	vldr	d6, [r3]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3310      	adds	r3, #16
 80023f2:	ed93 7b00 	vldr	d7, [r3]
 80023f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023fa:	eeb0 0b47 	vmov.f64	d0, d7
 80023fe:	f014 ff47 	bl	8017290 <sin>
 8002402:	eeb0 7b40 	vmov.f64	d7, d0
 8002406:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80025f0 <IVK+0x390>
 800240a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800240e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8002412:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002416:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
  Jv4[2] = 0.0;
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	e9c7 2308 	strd	r2, r3, [r7, #32]
  Jv4[5] = qvbar_idx_1 - Jv4_tmp_tmp;
 8002426:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 800242a:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800242e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002432:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  Jv4[8] = qvbar_idx_1;
 8002436:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800243a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  r1 = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  r2 = 1;
 8002444:	2301      	movs	r3, #1
 8002446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  rtemp = 2;
 800244a:	2302      	movs	r3, #2
 800244c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (fabs(Jv4[1]) > fabs(Jv4[0])) {
 8002450:	ed97 7b06 	vldr	d7, [r7, #24]
 8002454:	eeb0 6bc7 	vabs.f64	d6, d7
 8002458:	ed97 7b04 	vldr	d7, [r7, #16]
 800245c:	eeb0 7bc7 	vabs.f64	d7, d7
 8002460:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	dd05      	ble.n	8002476 <IVK+0x216>
    r1 = 1;
 800246a:	2301      	movs	r3, #1
 800246c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    r2 = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  }
  Jv4[r2] /= Jv4[r1];
 8002476:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	3398      	adds	r3, #152	; 0x98
 800247e:	443b      	add	r3, r7
 8002480:	3b88      	subs	r3, #136	; 0x88
 8002482:	ed93 5b00 	vldr	d5, [r3]
 8002486:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	3398      	adds	r3, #152	; 0x98
 800248e:	443b      	add	r3, r7
 8002490:	3b88      	subs	r3, #136	; 0x88
 8002492:	ed93 6b00 	vldr	d6, [r3]
 8002496:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800249a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	3398      	adds	r3, #152	; 0x98
 80024a2:	443b      	add	r3, r7
 80024a4:	3b88      	subs	r3, #136	; 0x88
 80024a6:	ed83 7b00 	vstr	d7, [r3]
  Jv4[2] = 0.0 / Jv4[r1];
 80024aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	3398      	adds	r3, #152	; 0x98
 80024b2:	443b      	add	r3, r7
 80024b4:	3b88      	subs	r3, #136	; 0x88
 80024b6:	ed93 6b00 	vldr	d6, [r3]
 80024ba:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 80025f8 <IVK+0x398>
 80024be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80024c2:	ed87 7b08 	vstr	d7, [r7, #32]
  Jv4[r2 + 3] -= Jv4[r2] * Jv4[r1 + 3];
 80024c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024ca:	3303      	adds	r3, #3
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	3398      	adds	r3, #152	; 0x98
 80024d0:	443b      	add	r3, r7
 80024d2:	3b88      	subs	r3, #136	; 0x88
 80024d4:	ed93 6b00 	vldr	d6, [r3]
 80024d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	3398      	adds	r3, #152	; 0x98
 80024e0:	443b      	add	r3, r7
 80024e2:	3b88      	subs	r3, #136	; 0x88
 80024e4:	ed93 5b00 	vldr	d5, [r3]
 80024e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024ec:	3303      	adds	r3, #3
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	3398      	adds	r3, #152	; 0x98
 80024f2:	443b      	add	r3, r7
 80024f4:	3b88      	subs	r3, #136	; 0x88
 80024f6:	ed93 7b00 	vldr	d7, [r3]
 80024fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80024fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002502:	3303      	adds	r3, #3
 8002504:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	3398      	adds	r3, #152	; 0x98
 800250c:	443b      	add	r3, r7
 800250e:	3b88      	subs	r3, #136	; 0x88
 8002510:	ed83 7b00 	vstr	d7, [r3]
  Jv4[5] -= Jv4[2] * Jv4[r1 + 3];
 8002514:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8002518:	ed97 5b08 	vldr	d5, [r7, #32]
 800251c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002520:	3303      	adds	r3, #3
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	3398      	adds	r3, #152	; 0x98
 8002526:	443b      	add	r3, r7
 8002528:	3b88      	subs	r3, #136	; 0x88
 800252a:	ed93 7b00 	vldr	d7, [r3]
 800252e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002532:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002536:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  Jv4[r2 + 6] -= Jv4[r2] * Jv4[r1 + 6];
 800253a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800253e:	3306      	adds	r3, #6
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	3398      	adds	r3, #152	; 0x98
 8002544:	443b      	add	r3, r7
 8002546:	3b88      	subs	r3, #136	; 0x88
 8002548:	ed93 6b00 	vldr	d6, [r3]
 800254c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	3398      	adds	r3, #152	; 0x98
 8002554:	443b      	add	r3, r7
 8002556:	3b88      	subs	r3, #136	; 0x88
 8002558:	ed93 5b00 	vldr	d5, [r3]
 800255c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002560:	3306      	adds	r3, #6
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	3398      	adds	r3, #152	; 0x98
 8002566:	443b      	add	r3, r7
 8002568:	3b88      	subs	r3, #136	; 0x88
 800256a:	ed93 7b00 	vldr	d7, [r3]
 800256e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002572:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002576:	3306      	adds	r3, #6
 8002578:	ee36 7b47 	vsub.f64	d7, d6, d7
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	3398      	adds	r3, #152	; 0x98
 8002580:	443b      	add	r3, r7
 8002582:	3b88      	subs	r3, #136	; 0x88
 8002584:	ed83 7b00 	vstr	d7, [r3]
  Jv4[8] -= Jv4[2] * Jv4[r1 + 6];
 8002588:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800258c:	ed97 5b08 	vldr	d5, [r7, #32]
 8002590:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002594:	3306      	adds	r3, #6
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	3398      	adds	r3, #152	; 0x98
 800259a:	443b      	add	r3, r7
 800259c:	3b88      	subs	r3, #136	; 0x88
 800259e:	ed93 7b00 	vldr	d7, [r3]
 80025a2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80025a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80025aa:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
  if (fabs(Jv4[5]) > fabs(Jv4[r2 + 3])) {
 80025ae:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80025b2:	eeb0 6bc7 	vabs.f64	d6, d7
 80025b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025ba:	3303      	adds	r3, #3
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	3398      	adds	r3, #152	; 0x98
 80025c0:	443b      	add	r3, r7
 80025c2:	3b88      	subs	r3, #136	; 0x88
 80025c4:	ed93 7b00 	vldr	d7, [r3]
 80025c8:	eeb0 7bc7 	vabs.f64	d7, d7
 80025cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80025d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d4:	dd14      	ble.n	8002600 <IVK+0x3a0>
    rtemp = r2;
 80025d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    r2 = 2;
 80025de:	2302      	movs	r3, #2
 80025e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025e4:	e00c      	b.n	8002600 <IVK+0x3a0>
 80025e6:	bf00      	nop
 80025e8:	00000000 	.word	0x00000000
 80025ec:	4077c000 	.word	0x4077c000
 80025f0:	00000000 	.word	0x00000000
 80025f4:	c077c000 	.word	0xc077c000
	...
  }
  Jv4[rtemp + 3] /= Jv4[r2 + 3];
 8002600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002604:	3303      	adds	r3, #3
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	3398      	adds	r3, #152	; 0x98
 800260a:	443b      	add	r3, r7
 800260c:	3b88      	subs	r3, #136	; 0x88
 800260e:	ed93 5b00 	vldr	d5, [r3]
 8002612:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002616:	3303      	adds	r3, #3
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	3398      	adds	r3, #152	; 0x98
 800261c:	443b      	add	r3, r7
 800261e:	3b88      	subs	r3, #136	; 0x88
 8002620:	ed93 6b00 	vldr	d6, [r3]
 8002624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002628:	3303      	adds	r3, #3
 800262a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	3398      	adds	r3, #152	; 0x98
 8002632:	443b      	add	r3, r7
 8002634:	3b88      	subs	r3, #136	; 0x88
 8002636:	ed83 7b00 	vstr	d7, [r3]
  Jv4[rtemp + 6] -= Jv4[rtemp + 3] * Jv4[r2 + 6];
 800263a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800263e:	3306      	adds	r3, #6
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	3398      	adds	r3, #152	; 0x98
 8002644:	443b      	add	r3, r7
 8002646:	3b88      	subs	r3, #136	; 0x88
 8002648:	ed93 6b00 	vldr	d6, [r3]
 800264c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002650:	3303      	adds	r3, #3
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	3398      	adds	r3, #152	; 0x98
 8002656:	443b      	add	r3, r7
 8002658:	3b88      	subs	r3, #136	; 0x88
 800265a:	ed93 5b00 	vldr	d5, [r3]
 800265e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002662:	3306      	adds	r3, #6
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	3398      	adds	r3, #152	; 0x98
 8002668:	443b      	add	r3, r7
 800266a:	3b88      	subs	r3, #136	; 0x88
 800266c:	ed93 7b00 	vldr	d7, [r3]
 8002670:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002674:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002678:	3306      	adds	r3, #6
 800267a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	3398      	adds	r3, #152	; 0x98
 8002682:	443b      	add	r3, r7
 8002684:	3b88      	subs	r3, #136	; 0x88
 8002686:	ed83 7b00 	vstr	d7, [r3]
  qvbar_idx_1 = chi_dot[r2] - chi_dot[r1] * Jv4[r2];
 800268a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	4413      	add	r3, r2
 8002694:	ed93 6b00 	vldr	d6, [r3]
 8002698:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	4413      	add	r3, r2
 80026a2:	ed93 5b00 	vldr	d5, [r3]
 80026a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3398      	adds	r3, #152	; 0x98
 80026ae:	443b      	add	r3, r7
 80026b0:	3b88      	subs	r3, #136	; 0x88
 80026b2:	ed93 7b00 	vldr	d7, [r3]
 80026b6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80026be:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 80026c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	4413      	add	r3, r2
 80026cc:	ed93 6b00 	vldr	d6, [r3]
 80026d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	4413      	add	r3, r2
 80026da:	ed93 5b00 	vldr	d5, [r3]
 80026de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	3398      	adds	r3, #152	; 0x98
 80026e6:	443b      	add	r3, r7
 80026e8:	3b88      	subs	r3, #136	; 0x88
 80026ea:	ed93 7b00 	vldr	d7, [r3]
 80026ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026f2:	ee36 6b47 	vsub.f64	d6, d6, d7
                 qvbar_idx_1 * Jv4[rtemp + 3]) /
 80026f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026fa:	3303      	adds	r3, #3
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	3398      	adds	r3, #152	; 0x98
 8002700:	443b      	add	r3, r7
 8002702:	3b88      	subs	r3, #136	; 0x88
 8002704:	ed93 5b00 	vldr	d5, [r3]
 8002708:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800270c:	ee25 7b07 	vmul.f64	d7, d5, d7
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 8002710:	ee36 5b47 	vsub.f64	d5, d6, d7
                Jv4[rtemp + 6];
 8002714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002718:	3306      	adds	r3, #6
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	3398      	adds	r3, #152	; 0x98
 800271e:	443b      	add	r3, r7
 8002720:	3b88      	subs	r3, #136	; 0x88
 8002722:	ed93 6b00 	vldr	d6, [r3]
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 8002726:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800272a:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
  qvbar_idx_1 -= qvbar_idx_2 * Jv4[r2 + 6];
 800272e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002732:	3306      	adds	r3, #6
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	3398      	adds	r3, #152	; 0x98
 8002738:	443b      	add	r3, r7
 800273a:	3b88      	subs	r3, #136	; 0x88
 800273c:	ed93 6b00 	vldr	d6, [r3]
 8002740:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002744:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002748:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 800274c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002750:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_1 /= Jv4[r2 + 3];
 8002754:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002758:	3303      	adds	r3, #3
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	3398      	adds	r3, #152	; 0x98
 800275e:	443b      	add	r3, r7
 8002760:	3b88      	subs	r3, #136	; 0x88
 8002762:	ed93 6b00 	vldr	d6, [r3]
 8002766:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 800276a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800276e:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qv[0] =
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 8002772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	4413      	add	r3, r2
 800277c:	ed93 6b00 	vldr	d6, [r3]
 8002780:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002784:	3306      	adds	r3, #6
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	3398      	adds	r3, #152	; 0x98
 800278a:	443b      	add	r3, r7
 800278c:	3b88      	subs	r3, #136	; 0x88
 800278e:	ed93 5b00 	vldr	d5, [r3]
 8002792:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002796:	ee25 7b07 	vmul.f64	d7, d5, d7
 800279a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800279e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027a2:	3303      	adds	r3, #3
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	3398      	adds	r3, #152	; 0x98
 80027a8:	443b      	add	r3, r7
 80027aa:	3b88      	subs	r3, #136	; 0x88
 80027ac:	ed93 5b00 	vldr	d5, [r3]
 80027b0:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80027b4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80027b8:	ee36 5b47 	vsub.f64	d5, d6, d7
      Jv4[r1];
 80027bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	3398      	adds	r3, #152	; 0x98
 80027c4:	443b      	add	r3, r7
 80027c6:	3b88      	subs	r3, #136	; 0x88
 80027c8:	ed93 6b00 	vldr	d6, [r3]
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 80027cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
  qv[0] =
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	ed83 7b00 	vstr	d7, [r3]
  qv[1] = qvbar_idx_1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f103 0108 	add.w	r1, r3, #8
 80027dc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80027e0:	e9c1 2300 	strd	r2, r3, [r1]
  qv[2] = qvbar_idx_2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f103 0110 	add.w	r1, r3, #16
 80027ea:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80027ee:	e9c1 2300 	strd	r2, r3, [r1]
  qv[3] = -qvbar_idx_1 - qvbar_idx_2;
 80027f2:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80027f6:	eeb1 6b47 	vneg.f64	d6, d7
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3318      	adds	r3, #24
 80027fe:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002802:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002806:	ed83 7b00 	vstr	d7, [r3]
  return Kinematics_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3798      	adds	r7, #152	; 0x98
 8002810:	46bd      	mov	sp, r7
 8002812:	ecbd 8b04 	vpop	{d8-d9}
 8002816:	bd80      	pop	{r7, pc}

08002818 <FPK>:
 * Arguments    : const double q[5]
 *                double l3
 *                double Pne[3]
 * Return Type  : void
 */
void FPK(double q[5], double l3, double Pne[3]) {
 8002818:	b580      	push	{r7, lr}
 800281a:	ed2d 8b08 	vpush	{d8-d11}
 800281e:	b094      	sub	sp, #80	; 0x50
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	ed87 0b00 	vstr	d0, [r7]
 8002828:	60b9      	str	r1, [r7, #8]
	double e_Pne_tmp;
	double f_Pne_tmp;
	double g_Pne_tmp;
	double h_Pne_tmp;
	/* offset */
	Pne_tmp = cos(q[0]);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	ed93 7b00 	vldr	d7, [r3]
 8002830:	eeb0 0b47 	vmov.f64	d0, d7
 8002834:	f014 fce0 	bl	80171f8 <cos>
 8002838:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	b_Pne_tmp = sin(q[2]);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3310      	adds	r3, #16
 8002840:	ed93 7b00 	vldr	d7, [r3]
 8002844:	eeb0 0b47 	vmov.f64	d0, d7
 8002848:	f014 fd22 	bl	8017290 <sin>
 800284c:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	c_Pne_tmp = cos(q[2]);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3310      	adds	r3, #16
 8002854:	ed93 7b00 	vldr	d7, [r3]
 8002858:	eeb0 0b47 	vmov.f64	d0, d7
 800285c:	f014 fccc 	bl	80171f8 <cos>
 8002860:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	d_Pne_tmp = sin(q[1]);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3308      	adds	r3, #8
 8002868:	ed93 7b00 	vldr	d7, [r3]
 800286c:	eeb0 0b47 	vmov.f64	d0, d7
 8002870:	f014 fd0e 	bl	8017290 <sin>
 8002874:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	e_Pne_tmp = cos(q[1]);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3308      	adds	r3, #8
 800287c:	ed93 7b00 	vldr	d7, [r3]
 8002880:	eeb0 0b47 	vmov.f64	d0, d7
 8002884:	f014 fcb8 	bl	80171f8 <cos>
 8002888:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	f_Pne_tmp = sin(q[0]);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	ed93 7b00 	vldr	d7, [r3]
 8002892:	eeb0 0b47 	vmov.f64	d0, d7
 8002896:	f014 fcfb 	bl	8017290 <sin>
 800289a:	ed87 0b08 	vstr	d0, [r7, #32]
	g_Pne_tmp = cos(q[3]);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3318      	adds	r3, #24
 80028a2:	ed93 7b00 	vldr	d7, [r3]
 80028a6:	eeb0 0b47 	vmov.f64	d0, d7
 80028aa:	f014 fca5 	bl	80171f8 <cos>
 80028ae:	ed87 0b06 	vstr	d0, [r7, #24]
	h_Pne_tmp = sin(q[3]);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3318      	adds	r3, #24
 80028b6:	ed93 7b00 	vldr	d7, [r3]
 80028ba:	eeb0 0b47 	vmov.f64	d0, d7
 80028be:	f014 fce7 	bl	8017290 <sin>
 80028c2:	ed87 0b04 	vstr	d0, [r7, #16]
	Pne[0] =
			((380.0
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 80028c6:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80028ca:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80028ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 80028d2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80028d6:	ee26 6b07 	vmul.f64	d6, d6, d7
							- Pne_tmp * d_Pne_tmp * b_Pne_tmp)
 80028da:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 80028de:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80028e2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80028e6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80028ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80028ee:	ee36 7b47 	vsub.f64	d7, d6, d7
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 80028f2:	ed9f 6bdb 	vldr	d6, [pc, #876]	; 8002c60 <FPK+0x448>
 80028f6:	ee27 8b06 	vmul.f64	d8, d7, d6
					+ l3
							* (g_Pne_tmp
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	ed93 7b00 	vldr	d7, [r3]
 8002900:	eeb0 0b47 	vmov.f64	d0, d7
 8002904:	f014 fc78 	bl	80171f8 <cos>
 8002908:	eeb0 9b40 	vmov.f64	d9, d0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3308      	adds	r3, #8
 8002910:	ed93 7b00 	vldr	d7, [r3]
 8002914:	eeb0 0b47 	vmov.f64	d0, d7
 8002918:	f014 fc6e 	bl	80171f8 <cos>
 800291c:	eeb0 7b40 	vmov.f64	d7, d0
 8002920:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002924:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002928:	ee26 6b07 	vmul.f64	d6, d6, d7
											+ Pne_tmp * c_Pne_tmp * d_Pne_tmp)
 800292c:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 8002930:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002934:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002938:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800293c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002940:	ee36 6b07 	vadd.f64	d6, d6, d7
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 8002944:	ed97 7b06 	vldr	d7, [r7, #24]
 8002948:	ee26 9b07 	vmul.f64	d9, d6, d7
									+ h_Pne_tmp
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	ed93 7b00 	vldr	d7, [r3]
 8002952:	eeb0 0b47 	vmov.f64	d0, d7
 8002956:	f014 fc4f 	bl	80171f8 <cos>
 800295a:	eeb0 ab40 	vmov.f64	d10, d0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3308      	adds	r3, #8
 8002962:	ed93 7b00 	vldr	d7, [r3]
 8002966:	eeb0 0b47 	vmov.f64	d0, d7
 800296a:	f014 fc45 	bl	80171f8 <cos>
 800296e:	eeb0 7b40 	vmov.f64	d7, d0
 8002972:	ee2a ab07 	vmul.f64	d10, d10, d7
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3310      	adds	r3, #16
 800297a:	ed93 7b00 	vldr	d7, [r3]
 800297e:	eeb0 0b47 	vmov.f64	d0, d7
 8002982:	f014 fc39 	bl	80171f8 <cos>
 8002986:	eeb0 7b40 	vmov.f64	d7, d0
 800298a:	ee2a ab07 	vmul.f64	d10, d10, d7
													- cos(q[0]) * sin(q[1])
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	ed93 7b00 	vldr	d7, [r3]
 8002994:	eeb0 0b47 	vmov.f64	d0, d7
 8002998:	f014 fc2e 	bl	80171f8 <cos>
 800299c:	eeb0 bb40 	vmov.f64	d11, d0
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3308      	adds	r3, #8
 80029a4:	ed93 7b00 	vldr	d7, [r3]
 80029a8:	eeb0 0b47 	vmov.f64	d0, d7
 80029ac:	f014 fc70 	bl	8017290 <sin>
 80029b0:	eeb0 7b40 	vmov.f64	d7, d0
 80029b4:	ee2b bb07 	vmul.f64	d11, d11, d7
															* sin(q[2]))))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3310      	adds	r3, #16
 80029bc:	ed93 7b00 	vldr	d7, [r3]
 80029c0:	eeb0 0b47 	vmov.f64	d0, d7
 80029c4:	f014 fc64 	bl	8017290 <sin>
 80029c8:	eeb0 7b40 	vmov.f64	d7, d0
 80029cc:	ee2b 7b07 	vmul.f64	d7, d11, d7
													- cos(q[0]) * sin(q[1])
 80029d0:	ee3a 6b47 	vsub.f64	d6, d10, d7
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 80029d4:	ed97 7b04 	vldr	d7, [r7, #16]
 80029d8:	ee26 7b07 	vmul.f64	d7, d6, d7
									+ h_Pne_tmp
 80029dc:	ee39 6b07 	vadd.f64	d6, d9, d7
							* (g_Pne_tmp
 80029e0:	ed97 7b00 	vldr	d7, [r7]
 80029e4:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ l3
 80029e8:	ee38 6b07 	vadd.f64	d6, d8, d7
					+ 20.0 * Pne_tmp) - 380.0 * Pne_tmp * d_Pne_tmp;
 80029ec:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80029f0:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 80029f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80029f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80029fc:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002a00:	ed9f 5b97 	vldr	d5, [pc, #604]	; 8002c60 <FPK+0x448>
 8002a04:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002a08:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002a0c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002a10:	ee36 7b47 	vsub.f64	d7, d6, d7
	Pne[0] =
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	ed83 7b00 	vstr	d7, [r3]
	Pne[1] = ((l3
			* (g_Pne_tmp
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 8002a1a:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002a1e:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a22:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a26:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002a2a:	ee26 6b07 	vmul.f64	d6, d6, d7
							+ c_Pne_tmp * f_Pne_tmp * d_Pne_tmp)
 8002a2e:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8002a32:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a36:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002a3a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002a3e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002a42:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 8002a46:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a4a:	ee26 6b07 	vmul.f64	d6, d6, d7
					- h_Pne_tmp
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 8002a4e:	ed97 5b08 	vldr	d5, [r7, #32]
 8002a52:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002a56:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002a5a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002a5e:	ee25 5b07 	vmul.f64	d5, d5, d7
									- e_Pne_tmp * c_Pne_tmp * f_Pne_tmp))
 8002a62:	ed97 4b0a 	vldr	d4, [r7, #40]	; 0x28
 8002a66:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002a6a:	ee24 4b07 	vmul.f64	d4, d4, d7
 8002a6e:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a72:	ee24 7b07 	vmul.f64	d7, d4, d7
 8002a76:	ee35 5b47 	vsub.f64	d5, d5, d7
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 8002a7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a7e:	ee25 7b07 	vmul.f64	d7, d5, d7
					- h_Pne_tmp
 8002a82:	ee36 6b47 	vsub.f64	d6, d6, d7
			* (g_Pne_tmp
 8002a86:	ed97 7b00 	vldr	d7, [r7]
 8002a8a:	ee26 8b07 	vmul.f64	d8, d6, d7
			- 380.0
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	ed93 7b00 	vldr	d7, [r3]
 8002a94:	eeb0 0b47 	vmov.f64	d0, d7
 8002a98:	f014 fbfa 	bl	8017290 <sin>
 8002a9c:	eeb0 9b40 	vmov.f64	d9, d0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	ed93 7b00 	vldr	d7, [r3]
 8002aa8:	eeb0 0b47 	vmov.f64	d0, d7
 8002aac:	f014 fbf0 	bl	8017290 <sin>
 8002ab0:	eeb0 7b40 	vmov.f64	d7, d0
 8002ab4:	ee29 9b07 	vmul.f64	d9, d9, d7
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3310      	adds	r3, #16
 8002abc:	ed93 7b00 	vldr	d7, [r3]
 8002ac0:	eeb0 0b47 	vmov.f64	d0, d7
 8002ac4:	f014 fbe4 	bl	8017290 <sin>
 8002ac8:	eeb0 7b40 	vmov.f64	d7, d0
 8002acc:	ee29 9b07 	vmul.f64	d9, d9, d7
							- cos(q[1]) * cos(q[2]) * sin(q[0])))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	ed93 7b00 	vldr	d7, [r3]
 8002ad8:	eeb0 0b47 	vmov.f64	d0, d7
 8002adc:	f014 fb8c 	bl	80171f8 <cos>
 8002ae0:	eeb0 ab40 	vmov.f64	d10, d0
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3310      	adds	r3, #16
 8002ae8:	ed93 7b00 	vldr	d7, [r3]
 8002aec:	eeb0 0b47 	vmov.f64	d0, d7
 8002af0:	f014 fb82 	bl	80171f8 <cos>
 8002af4:	eeb0 7b40 	vmov.f64	d7, d0
 8002af8:	ee2a ab07 	vmul.f64	d10, d10, d7
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	ed93 7b00 	vldr	d7, [r3]
 8002b02:	eeb0 0b47 	vmov.f64	d0, d7
 8002b06:	f014 fbc3 	bl	8017290 <sin>
 8002b0a:	eeb0 7b40 	vmov.f64	d7, d0
 8002b0e:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8002b12:	ee39 7b47 	vsub.f64	d7, d9, d7
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 8002b16:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8002c60 <FPK+0x448>
 8002b1a:	ee27 7b06 	vmul.f64	d7, d7, d6
			- 380.0
 8002b1e:	ee38 6b47 	vsub.f64	d6, d8, d7
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 8002b22:	ed97 7b08 	vldr	d7, [r7, #32]
 8002b26:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8002b2a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002b2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b32:	ed97 7b08 	vldr	d7, [r7, #32]
 8002b36:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8002c60 <FPK+0x448>
 8002b3a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002b3e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002b42:	ee25 7b07 	vmul.f64	d7, d5, d7
	Pne[1] = ((l3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3308      	adds	r3, #8
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 8002b4a:	ee36 7b47 	vsub.f64	d7, d6, d7
	Pne[1] = ((l3
 8002b4e:	ed83 7b00 	vstr	d7, [r3]
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002b52:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002b56:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002b5a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b5e:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8002b62:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002b66:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b6e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002c60 <FPK+0x448>
 8002b72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b76:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002c68 <FPK+0x450>
 8002b7a:	ee37 6b06 	vadd.f64	d6, d7, d6
			+ 380.0 * e_Pne_tmp)
 8002b7e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002b82:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8002c60 <FPK+0x448>
 8002b86:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002b8a:	ee36 8b07 	vadd.f64	d8, d6, d7
			- l3
					* (g_Pne_tmp
							* (cos(q[1]) * cos(q[2]) - d_Pne_tmp * b_Pne_tmp)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3308      	adds	r3, #8
 8002b92:	ed93 7b00 	vldr	d7, [r3]
 8002b96:	eeb0 0b47 	vmov.f64	d0, d7
 8002b9a:	f014 fb2d 	bl	80171f8 <cos>
 8002b9e:	eeb0 9b40 	vmov.f64	d9, d0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3310      	adds	r3, #16
 8002ba6:	ed93 7b00 	vldr	d7, [r3]
 8002baa:	eeb0 0b47 	vmov.f64	d0, d7
 8002bae:	f014 fb23 	bl	80171f8 <cos>
 8002bb2:	eeb0 7b40 	vmov.f64	d7, d0
 8002bb6:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002bba:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8002bbe:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002bc2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002bc6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002bca:	ed97 7b06 	vldr	d7, [r7, #24]
 8002bce:	ee26 9b07 	vmul.f64	d9, d6, d7
							- h_Pne_tmp
									* (cos(q[1]) * sin(q[2])
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	ed93 7b00 	vldr	d7, [r3]
 8002bda:	eeb0 0b47 	vmov.f64	d0, d7
 8002bde:	f014 fb0b 	bl	80171f8 <cos>
 8002be2:	eeb0 ab40 	vmov.f64	d10, d0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3310      	adds	r3, #16
 8002bea:	ed93 7b00 	vldr	d7, [r3]
 8002bee:	eeb0 0b47 	vmov.f64	d0, d7
 8002bf2:	f014 fb4d 	bl	8017290 <sin>
 8002bf6:	eeb0 7b40 	vmov.f64	d7, d0
 8002bfa:	ee2a ab07 	vmul.f64	d10, d10, d7
											+ cos(q[2]) * sin(q[1])));
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3310      	adds	r3, #16
 8002c02:	ed93 7b00 	vldr	d7, [r3]
 8002c06:	eeb0 0b47 	vmov.f64	d0, d7
 8002c0a:	f014 faf5 	bl	80171f8 <cos>
 8002c0e:	eeb0 bb40 	vmov.f64	d11, d0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3308      	adds	r3, #8
 8002c16:	ed93 7b00 	vldr	d7, [r3]
 8002c1a:	eeb0 0b47 	vmov.f64	d0, d7
 8002c1e:	f014 fb37 	bl	8017290 <sin>
 8002c22:	eeb0 7b40 	vmov.f64	d7, d0
 8002c26:	ee2b 7b07 	vmul.f64	d7, d11, d7
 8002c2a:	ee3a 6b07 	vadd.f64	d6, d10, d7
									* (cos(q[1]) * sin(q[2])
 8002c2e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c32:	ee26 7b07 	vmul.f64	d7, d6, d7
							- h_Pne_tmp
 8002c36:	ee39 6b47 	vsub.f64	d6, d9, d7
					* (g_Pne_tmp
 8002c3a:	ed97 7b00 	vldr	d7, [r7]
 8002c3e:	ee26 7b07 	vmul.f64	d7, d6, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3310      	adds	r3, #16
			- l3
 8002c46:	ee38 7b47 	vsub.f64	d7, d8, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002c4a:	ed83 7b00 	vstr	d7, [r3]
}
 8002c4e:	bf00      	nop
 8002c50:	3750      	adds	r7, #80	; 0x50
 8002c52:	46bd      	mov	sp, r7
 8002c54:	ecbd 8b08 	vpop	{d8-d11}
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	f3af 8000 	nop.w
 8002c60:	00000000 	.word	0x00000000
 8002c64:	4077c000 	.word	0x4077c000
 8002c68:	70a3d70a 	.word	0x70a3d70a
 8002c6c:	40727e3d 	.word	0x40727e3d

08002c70 <ChessPose>:
	twist_tmp = l3 * sin((q[1] + q[2]) + q[3]);
	twist[2] = (qd[1] * ((twist_tmp_tmp - twist_tmp_tmp_tmp) + twist_tmp)
			+ qd[2] * (twist_tmp_tmp + twist_tmp)) + g_twist_tmp * d_twist_tmp;
}

void ChessPose(uint8_t Chess_Index, double Chess_Theta, double ChessPosition[2]) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b096      	sub	sp, #88	; 0x58
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	ed87 0b00 	vstr	d0, [r7]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	73fb      	strb	r3, [r7, #15]
	/*
	 *
	 */
	uint8_t X = (Chess_Index%8) + 1;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	3301      	adds	r3, #1
 8002c8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t N = (Chess_Index/8) + 1;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	08db      	lsrs	r3, r3, #3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	double l = 250;
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	4b45      	ldr	r3, [pc, #276]	; (8002db4 <ChessPose+0x144>)
 8002ca0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double L = 400;
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <ChessPose+0x148>)
 8002caa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double YOffset = 10;
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	4b42      	ldr	r3, [pc, #264]	; (8002dbc <ChessPose+0x14c>)
 8002cb4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double b_positionx_tmp;
	double c_positionx_tmp;
	double d_positionx_tmp;
	double e_positionx_tmp;
	double positionx_tmp;
	positionx_tmp = cos(Chess_Theta);
 8002cb8:	ed97 0b00 	vldr	d0, [r7]
 8002cbc:	f014 fa9c 	bl	80171f8 <cos>
 8002cc0:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	b_positionx_tmp = sin(Chess_Theta);
 8002cc4:	ed97 0b00 	vldr	d0, [r7]
 8002cc8:	f014 fae2 	bl	8017290 <sin>
 8002ccc:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	c_positionx_tmp = 9.0 * L / 16.0;
 8002cd0:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002cd4:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002cd8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002cdc:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8002ce0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ce4:	ed87 7b08 	vstr	d7, [r7, #32]
	d_positionx_tmp = X * L / 8.0 - c_positionx_tmp;
 8002ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002cf4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002cf8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002cfc:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8002d00:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d04:	ed97 7b08 	vldr	d7, [r7, #32]
 8002d08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002d0c:	ed87 7b06 	vstr	d7, [r7, #24]
	e_positionx_tmp = N * L / 8.0;
 8002d10:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002d14:	ee07 3a90 	vmov	s15, r3
 8002d18:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002d1c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002d20:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002d24:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8002d28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d2c:	ed87 7b04 	vstr	d7, [r7, #16]
	ChessPosition[0] = ((b_positionx_tmp * d_positionx_tmp
 8002d30:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002d34:	ed97 7b06 	vldr	d7, [r7, #24]
 8002d38:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ (e_positionx_tmp - c_positionx_tmp * positionx_tmp)) + l)
 8002d3c:	ed97 5b08 	vldr	d5, [r7, #32]
 8002d40:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002d44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002d48:	ed97 5b04 	vldr	d5, [r7, #16]
 8002d4c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002d50:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002d54:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002d58:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ L / 2.0;
 8002d5c:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
 8002d60:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8002d64:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002d68:	ee36 7b07 	vadd.f64	d7, d6, d7
	ChessPosition[0] = ((b_positionx_tmp * d_positionx_tmp
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	ed83 7b00 	vstr	d7, [r3]
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002d72:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002d76:	eeb1 6b47 	vneg.f64	d6, d7
 8002d7a:	ed97 7b06 	vldr	d7, [r7, #24]
 8002d7e:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ (e_positionx_tmp - c_positionx_tmp) * b_positionx_tmp) + YOffset;
 8002d82:	ed97 5b04 	vldr	d5, [r7, #16]
 8002d86:	ed97 7b08 	vldr	d7, [r7, #32]
 8002d8a:	ee35 5b47 	vsub.f64	d5, d5, d7
 8002d8e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002d92:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002d96:	ee36 6b07 	vadd.f64	d6, d6, d7
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	3308      	adds	r3, #8
			+ (e_positionx_tmp - c_positionx_tmp) * b_positionx_tmp) + YOffset;
 8002d9e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002da2:	ee36 7b07 	vadd.f64	d7, d6, d7
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002da6:	ed83 7b00 	vstr	d7, [r3]
}
 8002daa:	bf00      	nop
 8002dac:	3758      	adds	r7, #88	; 0x58
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	406f4000 	.word	0x406f4000
 8002db8:	40790000 	.word	0x40790000
 8002dbc:	40240000 	.word	0x40240000

08002dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b096      	sub	sp, #88	; 0x58
 8002dc4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dc6:	f004 fa95 	bl	80072f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dca:	f000 fba3 	bl	8003514 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002dce:	f000 fc19 	bl	8003604 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dd2:	f7fe ff2f 	bl	8001c34 <MX_GPIO_Init>
  MX_DMA_Init();
 8002dd6:	f7fe fefd 	bl	8001bd4 <MX_DMA_Init>
  MX_ADC3_Init();
 8002dda:	f7fd ffc5 	bl	8000d68 <MX_ADC3_Init>
  MX_TIM1_Init();
 8002dde:	f002 ff0d 	bl	8005bfc <MX_TIM1_Init>
  MX_TIM3_Init();
 8002de2:	f002 ffef 	bl	8005dc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002de6:	f003 f873 	bl	8005ed0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002dea:	f003 f8c7 	bl	8005f7c <MX_TIM5_Init>
  MX_TIM8_Init();
 8002dee:	f003 f981 	bl	80060f4 <MX_TIM8_Init>
  MX_TIM13_Init();
 8002df2:	f003 f9d9 	bl	80061a8 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002df6:	f003 fa27 	bl	8006248 <MX_TIM14_Init>
  MX_TIM15_Init();
 8002dfa:	f003 fa75 	bl	80062e8 <MX_TIM15_Init>
  MX_TIM16_Init();
 8002dfe:	f003 fafb 	bl	80063f8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002e02:	f003 fb75 	bl	80064f0 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002e06:	f004 f881 	bl	8006f0c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002e0a:	f004 f8cd 	bl	8006fa8 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8002e0e:	f002 fc81 	bl	8005714 <MX_SPI3_Init>
  MX_SPI4_Init();
 8002e12:	f002 fcd7 	bl	80057c4 <MX_SPI4_Init>
  MX_I2C2_Init();
 8002e16:	f7ff f847 	bl	8001ea8 <MX_I2C2_Init>
  MX_CRC_Init();
 8002e1a:	f7fe fe8d 	bl	8001b38 <MX_CRC_Init>
  MX_TIM24_Init();
 8002e1e:	f003 fc33 	bl	8006688 <MX_TIM24_Init>
  MX_TIM23_Init();
 8002e22:	f003 fbe1 	bl	80065e8 <MX_TIM23_Init>
  MX_TIM6_Init();
 8002e26:	f003 f92d 	bl	8006084 <MX_TIM6_Init>
  MX_UART5_Init();
 8002e2a:	f004 f81d 	bl	8006e68 <MX_UART5_Init>
  MX_ADC1_Init();
 8002e2e:	f7fd febf 	bl	8000bb0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002e32:	f7fd ff39 	bl	8000ca8 <MX_ADC2_Init>
  MX_TIM2_Init();
 8002e36:	f002 ff71 	bl	8005d1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	MX_DMA_Init();
 8002e3a:	f7fe fecb 	bl	8001bd4 <MX_DMA_Init>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);	// LVDS EN
 8002e3e:	2201      	movs	r2, #1
 8002e40:	2140      	movs	r1, #64	; 0x40
 8002e42:	48c9      	ldr	r0, [pc, #804]	; (8003168 <main+0x3a8>)
 8002e44:	f009 ff58 	bl	800ccf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);	// Level Shifter EN
 8002e48:	2201      	movs	r2, #1
 8002e4a:	2140      	movs	r1, #64	; 0x40
 8002e4c:	48c7      	ldr	r0, [pc, #796]	; (800316c <main+0x3ac>)
 8002e4e:	f009 ff53 	bl	800ccf8 <HAL_GPIO_WritePin>

	Temp_Calibration =
			(110.0 - 30.0)
					/ (*(unsigned short*) (0x1FF1E840)
 8002e52:	4bc7      	ldr	r3, [pc, #796]	; (8003170 <main+0x3b0>)
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
							- *(unsigned short*) (0x1FF1E820));
 8002e58:	4bc6      	ldr	r3, [pc, #792]	; (8003174 <main+0x3b4>)
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	1ad3      	subs	r3, r2, r3
					/ (*(unsigned short*) (0x1FF1E840)
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e66:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 8003100 <main+0x340>
 8002e6a:	ee85 7b06 	vdiv.f64	d7, d5, d6
	Temp_Calibration =
 8002e6e:	4bc2      	ldr	r3, [pc, #776]	; (8003178 <main+0x3b8>)
 8002e70:	ed83 7b00 	vstr	d7, [r3]
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002e74:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002e78:	2100      	movs	r1, #0
 8002e7a:	48c0      	ldr	r0, [pc, #768]	; (800317c <main+0x3bc>)
 8002e7c:	f006 fac6 	bl	800940c <HAL_ADCEx_Calibration_Start>

	/*			   Encoder				*/
	AS5047U_init(&Encoder[0], &hspi3, GPIOD, &hcrc, GPIO_PIN_0, 6500);
 8002e80:	2301      	movs	r3, #1
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8003108 <main+0x348>
 8002e88:	4bbd      	ldr	r3, [pc, #756]	; (8003180 <main+0x3c0>)
 8002e8a:	4ab7      	ldr	r2, [pc, #732]	; (8003168 <main+0x3a8>)
 8002e8c:	49bd      	ldr	r1, [pc, #756]	; (8003184 <main+0x3c4>)
 8002e8e:	48be      	ldr	r0, [pc, #760]	; (8003188 <main+0x3c8>)
 8002e90:	f7fd fbe6 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[1], &hspi3, GPIOD, &hcrc, GPIO_PIN_1, 10100);
 8002e94:	2302      	movs	r3, #2
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	ed9f 0b9d 	vldr	d0, [pc, #628]	; 8003110 <main+0x350>
 8002e9c:	4bb8      	ldr	r3, [pc, #736]	; (8003180 <main+0x3c0>)
 8002e9e:	4ab2      	ldr	r2, [pc, #712]	; (8003168 <main+0x3a8>)
 8002ea0:	49b8      	ldr	r1, [pc, #736]	; (8003184 <main+0x3c4>)
 8002ea2:	48ba      	ldr	r0, [pc, #744]	; (800318c <main+0x3cc>)
 8002ea4:	f7fd fbdc 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[2], &hspi3, GPIOD, &hcrc, GPIO_PIN_2, 3165);
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 8003118 <main+0x358>
 8002eb0:	4bb3      	ldr	r3, [pc, #716]	; (8003180 <main+0x3c0>)
 8002eb2:	4aad      	ldr	r2, [pc, #692]	; (8003168 <main+0x3a8>)
 8002eb4:	49b3      	ldr	r1, [pc, #716]	; (8003184 <main+0x3c4>)
 8002eb6:	48b6      	ldr	r0, [pc, #728]	; (8003190 <main+0x3d0>)
 8002eb8:	f7fd fbd2 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[3], &hspi3, GPIOD, &hcrc, GPIO_PIN_3, 6970);
 8002ebc:	2308      	movs	r3, #8
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	ed9f 0b97 	vldr	d0, [pc, #604]	; 8003120 <main+0x360>
 8002ec4:	4bae      	ldr	r3, [pc, #696]	; (8003180 <main+0x3c0>)
 8002ec6:	4aa8      	ldr	r2, [pc, #672]	; (8003168 <main+0x3a8>)
 8002ec8:	49ae      	ldr	r1, [pc, #696]	; (8003184 <main+0x3c4>)
 8002eca:	48b2      	ldr	r0, [pc, #712]	; (8003194 <main+0x3d4>)
 8002ecc:	f7fd fbc8 	bl	8000660 <AS5047U_init>

	HAL_Delay(50);
 8002ed0:	2032      	movs	r0, #50	; 0x32
 8002ed2:	f004 faa1 	bl	8007418 <HAL_Delay>

	/* Encoder ABI Res Setting */
	AS5047U_Write(&Encoder[0], 0x001A, 0b01000000);
 8002ed6:	2240      	movs	r2, #64	; 0x40
 8002ed8:	211a      	movs	r1, #26
 8002eda:	48ab      	ldr	r0, [pc, #684]	; (8003188 <main+0x3c8>)
 8002edc:	f7fd fc0c 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[1], 0x001A, 0b01000000);
 8002ee0:	2240      	movs	r2, #64	; 0x40
 8002ee2:	211a      	movs	r1, #26
 8002ee4:	48a9      	ldr	r0, [pc, #676]	; (800318c <main+0x3cc>)
 8002ee6:	f7fd fc07 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[2], 0x001A, 0b01000000);
 8002eea:	2240      	movs	r2, #64	; 0x40
 8002eec:	211a      	movs	r1, #26
 8002eee:	48a8      	ldr	r0, [pc, #672]	; (8003190 <main+0x3d0>)
 8002ef0:	f7fd fc02 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[3], 0x001A, 0b01000000);
 8002ef4:	2240      	movs	r2, #64	; 0x40
 8002ef6:	211a      	movs	r1, #26
 8002ef8:	48a6      	ldr	r0, [pc, #664]	; (8003194 <main+0x3d4>)
 8002efa:	f7fd fbfd 	bl	80006f8 <AS5047U_Write>

	/* Chess Board Encoder */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002efe:	213c      	movs	r1, #60	; 0x3c
 8002f00:	48a5      	ldr	r0, [pc, #660]	; (8003198 <main+0x3d8>)
 8002f02:	f010 f8cf 	bl	80130a4 <HAL_TIM_Encoder_Start>

	/*			Kalman Filter			*/
	Kalman_init(&Kalman[0], 5000, 0.001);
 8002f06:	ed9f 1b88 	vldr	d1, [pc, #544]	; 8003128 <main+0x368>
 8002f0a:	ed9f 0b89 	vldr	d0, [pc, #548]	; 8003130 <main+0x370>
 8002f0e:	48a3      	ldr	r0, [pc, #652]	; (800319c <main+0x3dc>)
 8002f10:	f7fe fac2 	bl	8001498 <Kalman_init>
	Kalman_init(&Kalman[1], 5000, 0.001);
 8002f14:	ed9f 1b84 	vldr	d1, [pc, #528]	; 8003128 <main+0x368>
 8002f18:	ed9f 0b85 	vldr	d0, [pc, #532]	; 8003130 <main+0x370>
 8002f1c:	48a0      	ldr	r0, [pc, #640]	; (80031a0 <main+0x3e0>)
 8002f1e:	f7fe fabb 	bl	8001498 <Kalman_init>
	Kalman_init(&Kalman[2], 5000, 0.001);
 8002f22:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8003128 <main+0x368>
 8002f26:	ed9f 0b82 	vldr	d0, [pc, #520]	; 8003130 <main+0x370>
 8002f2a:	489e      	ldr	r0, [pc, #632]	; (80031a4 <main+0x3e4>)
 8002f2c:	f7fe fab4 	bl	8001498 <Kalman_init>
	Kalman_init(&Kalman[3], 5000, 0.001);
 8002f30:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8003128 <main+0x368>
 8002f34:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 8003130 <main+0x370>
 8002f38:	489b      	ldr	r0, [pc, #620]	; (80031a8 <main+0x3e8>)
 8002f3a:	f7fe faad 	bl	8001498 <Kalman_init>
	Kalman_init(&Kalman[5], 5000, 0.001);
 8002f3e:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8003128 <main+0x368>
 8002f42:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 8003130 <main+0x370>
 8002f46:	4899      	ldr	r0, [pc, #612]	; (80031ac <main+0x3ec>)
 8002f48:	f7fe faa6 	bl	8001498 <Kalman_init>
	/*			CascadeControl			*/
//	CascadeControl_init(&Control[0], 0.6, 0, 0, 15, 0.5, 10, 400);
//	CascadeControl_init(&Control[1], 0.7, 0, 0.3, 10, 0, 10, 410);
//	CascadeControl_init(&Control[2], 0.82, 0, 0.2, 10, 0, 30, 400);
//	CascadeControl_init(&Control[3], 0.7, 0.001, 0, 9, 0.1, 3, 500);
	CascadeControl_init(&Control[0], 0.75, 0, 0, 15, 0.5, 10, 400);
 8002f4c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8003138 <main+0x378>
 8002f50:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002f54:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8002f58:	eeb2 3b0e 	vmov.f64	d3, #46	; 0x41700000  15.0
 8002f5c:	ed9f 2b78 	vldr	d2, [pc, #480]	; 8003140 <main+0x380>
 8002f60:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8003140 <main+0x380>
 8002f64:	eeb6 0b08 	vmov.f64	d0, #104	; 0x3f400000  0.750
 8002f68:	4891      	ldr	r0, [pc, #580]	; (80031b0 <main+0x3f0>)
 8002f6a:	f7fe fd48 	bl	80019fe <CascadeControl_init>
	CascadeControl_init(&Control[1], 0.5, 0, 0.5, 10, 0, 30, 410);
 8002f6e:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8003148 <main+0x388>
 8002f72:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8002f76:	ed9f 4b72 	vldr	d4, [pc, #456]	; 8003140 <main+0x380>
 8002f7a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002f7e:	eeb6 2b00 	vmov.f64	d2, #96	; 0x3f000000  0.5
 8002f82:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8003140 <main+0x380>
 8002f86:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002f8a:	488a      	ldr	r0, [pc, #552]	; (80031b4 <main+0x3f4>)
 8002f8c:	f7fe fd37 	bl	80019fe <CascadeControl_init>
	CascadeControl_init(&Control[2], 0.5, 0, 0.3, 25, 0, 30, 800);
 8002f90:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8003150 <main+0x390>
 8002f94:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8002f98:	ed9f 4b69 	vldr	d4, [pc, #420]	; 8003140 <main+0x380>
 8002f9c:	eeb3 3b09 	vmov.f64	d3, #57	; 0x41c80000  25.0
 8002fa0:	ed9f 2b6d 	vldr	d2, [pc, #436]	; 8003158 <main+0x398>
 8002fa4:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8003140 <main+0x380>
 8002fa8:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002fac:	4882      	ldr	r0, [pc, #520]	; (80031b8 <main+0x3f8>)
 8002fae:	f7fe fd26 	bl	80019fe <CascadeControl_init>
	CascadeControl_init(&Control[3], 0.75, 0, 0.3, 9, 0, 3, 420);
 8002fb2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8003160 <main+0x3a0>
 8002fb6:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002fba:	ed9f 4b61 	vldr	d4, [pc, #388]	; 8003140 <main+0x380>
 8002fbe:	eeb2 3b02 	vmov.f64	d3, #34	; 0x41100000  9.0
 8002fc2:	ed9f 2b65 	vldr	d2, [pc, #404]	; 8003158 <main+0x398>
 8002fc6:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8003140 <main+0x380>
 8002fca:	eeb6 0b08 	vmov.f64	d0, #104	; 0x3f400000  0.750
 8002fce:	487b      	ldr	r0, [pc, #492]	; (80031bc <main+0x3fc>)
 8002fd0:	f7fe fd15 	bl	80019fe <CascadeControl_init>

	/*  Power Supply Temperature Sensor */
	Tmp75_Init(&hi2c2);
 8002fd4:	487a      	ldr	r0, [pc, #488]	; (80031c0 <main+0x400>)
 8002fd6:	f7fd fd6d 	bl	8000ab4 <Tmp75_Init>

	SetPoint_Position[0] = EncPulse2Rad_Read(&Encoder[0], 1);
 8002fda:	2101      	movs	r1, #1
 8002fdc:	486a      	ldr	r0, [pc, #424]	; (8003188 <main+0x3c8>)
 8002fde:	f7fd fb19 	bl	8000614 <EncPulse2Rad_Read>
 8002fe2:	eeb0 7b40 	vmov.f64	d7, d0
 8002fe6:	4b77      	ldr	r3, [pc, #476]	; (80031c4 <main+0x404>)
 8002fe8:	ed83 7b00 	vstr	d7, [r3]
	SetPoint_Position[1] = EncPulse2Rad_Read(&Encoder[1], 0);
 8002fec:	2100      	movs	r1, #0
 8002fee:	4867      	ldr	r0, [pc, #412]	; (800318c <main+0x3cc>)
 8002ff0:	f7fd fb10 	bl	8000614 <EncPulse2Rad_Read>
 8002ff4:	eeb0 7b40 	vmov.f64	d7, d0
 8002ff8:	4b72      	ldr	r3, [pc, #456]	; (80031c4 <main+0x404>)
 8002ffa:	ed83 7b02 	vstr	d7, [r3, #8]
	SetPoint_Position[2] = EncPulse2Rad_Read(&Encoder[2], 0);
 8002ffe:	2100      	movs	r1, #0
 8003000:	4863      	ldr	r0, [pc, #396]	; (8003190 <main+0x3d0>)
 8003002:	f7fd fb07 	bl	8000614 <EncPulse2Rad_Read>
 8003006:	eeb0 7b40 	vmov.f64	d7, d0
 800300a:	4b6e      	ldr	r3, [pc, #440]	; (80031c4 <main+0x404>)
 800300c:	ed83 7b04 	vstr	d7, [r3, #16]
	SetPoint_Position[3] = EncPulse2Rad_Read(&Encoder[3], 0);
 8003010:	2100      	movs	r1, #0
 8003012:	4860      	ldr	r0, [pc, #384]	; (8003194 <main+0x3d4>)
 8003014:	f7fd fafe 	bl	8000614 <EncPulse2Rad_Read>
 8003018:	eeb0 7b40 	vmov.f64	d7, d0
 800301c:	4b69      	ldr	r3, [pc, #420]	; (80031c4 <main+0x404>)
 800301e:	ed83 7b06 	vstr	d7, [r3, #24]
	SetPoint_Velocity[0] = 0;
 8003022:	4969      	ldr	r1, [pc, #420]	; (80031c8 <main+0x408>)
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9c1 2300 	strd	r2, r3, [r1]
	SetPoint_Velocity[1] = 0;
 8003030:	4965      	ldr	r1, [pc, #404]	; (80031c8 <main+0x408>)
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	SetPoint_Velocity[2] = 0;
 800303e:	4962      	ldr	r1, [pc, #392]	; (80031c8 <main+0x408>)
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	e9c1 2304 	strd	r2, r3, [r1, #16]
	SetPoint_Velocity[3] = 0;
 800304c:	495e      	ldr	r1, [pc, #376]	; (80031c8 <main+0x408>)
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	e9c1 2306 	strd	r2, r3, [r1, #24]

	/*			Stepper Driver			*/
	Step_Driver_init(&Stepper[0], &htim13, TIM_CHANNEL_1, GPIOE, GPIO_PIN_0, 500000, 1);
 800305a:	2301      	movs	r3, #1
 800305c:	9302      	str	r3, [sp, #8]
 800305e:	4b5b      	ldr	r3, [pc, #364]	; (80031cc <main+0x40c>)
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	2301      	movs	r3, #1
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	4b41      	ldr	r3, [pc, #260]	; (800316c <main+0x3ac>)
 8003068:	2200      	movs	r2, #0
 800306a:	4959      	ldr	r1, [pc, #356]	; (80031d0 <main+0x410>)
 800306c:	4859      	ldr	r0, [pc, #356]	; (80031d4 <main+0x414>)
 800306e:	f7fd ff99 	bl	8000fa4 <Step_Driver_init>
	Step_Driver_init(&Stepper[1], &htim14, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1, 500000, 0);
 8003072:	2300      	movs	r3, #0
 8003074:	9302      	str	r3, [sp, #8]
 8003076:	4b55      	ldr	r3, [pc, #340]	; (80031cc <main+0x40c>)
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	2302      	movs	r3, #2
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <main+0x3ac>)
 8003080:	2200      	movs	r2, #0
 8003082:	4955      	ldr	r1, [pc, #340]	; (80031d8 <main+0x418>)
 8003084:	4855      	ldr	r0, [pc, #340]	; (80031dc <main+0x41c>)
 8003086:	f7fd ff8d 	bl	8000fa4 <Step_Driver_init>
	Step_Driver_init(&Stepper[2], &htim15, TIM_CHANNEL_1, GPIOE, GPIO_PIN_2, 500000, 1);
 800308a:	2301      	movs	r3, #1
 800308c:	9302      	str	r3, [sp, #8]
 800308e:	4b4f      	ldr	r3, [pc, #316]	; (80031cc <main+0x40c>)
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	2304      	movs	r3, #4
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	4b35      	ldr	r3, [pc, #212]	; (800316c <main+0x3ac>)
 8003098:	2200      	movs	r2, #0
 800309a:	4951      	ldr	r1, [pc, #324]	; (80031e0 <main+0x420>)
 800309c:	4851      	ldr	r0, [pc, #324]	; (80031e4 <main+0x424>)
 800309e:	f7fd ff81 	bl	8000fa4 <Step_Driver_init>
	Step_Driver_init(&Stepper[3], &htim16, TIM_CHANNEL_1, GPIOE, GPIO_PIN_3, 500000, 1);
 80030a2:	2301      	movs	r3, #1
 80030a4:	9302      	str	r3, [sp, #8]
 80030a6:	4b49      	ldr	r3, [pc, #292]	; (80031cc <main+0x40c>)
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	2308      	movs	r3, #8
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	4b2f      	ldr	r3, [pc, #188]	; (800316c <main+0x3ac>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	494d      	ldr	r1, [pc, #308]	; (80031e8 <main+0x428>)
 80030b4:	484d      	ldr	r0, [pc, #308]	; (80031ec <main+0x42c>)
 80030b6:	f7fd ff75 	bl	8000fa4 <Step_Driver_init>

	/*         	  Servo             */
	Servo_init(&Servo[0], &htim3, TIM_CHANNEL_1);
 80030ba:	2200      	movs	r2, #0
 80030bc:	494c      	ldr	r1, [pc, #304]	; (80031f0 <main+0x430>)
 80030be:	484d      	ldr	r0, [pc, #308]	; (80031f4 <main+0x434>)
 80030c0:	f7fe f81b 	bl	80010fa <Servo_init>
	Servo_init(&Servo[1], &htim3, TIM_CHANNEL_2);
 80030c4:	2204      	movs	r2, #4
 80030c6:	494a      	ldr	r1, [pc, #296]	; (80031f0 <main+0x430>)
 80030c8:	484b      	ldr	r0, [pc, #300]	; (80031f8 <main+0x438>)
 80030ca:	f7fe f816 	bl	80010fa <Servo_init>
	Servo_Drive(&Servo[0], 90);
 80030ce:	215a      	movs	r1, #90	; 0x5a
 80030d0:	4848      	ldr	r0, [pc, #288]	; (80031f4 <main+0x434>)
 80030d2:	f7fe f867 	bl	80011a4 <Servo_Drive>
	Servo_Drive(&Servo[1], 90);
 80030d6:	215a      	movs	r1, #90	; 0x5a
 80030d8:	4847      	ldr	r0, [pc, #284]	; (80031f8 <main+0x438>)
 80030da:	f7fe f863 	bl	80011a4 <Servo_Drive>

	/*			Trajectory			*/
	Test_traj_Val[0] = 0;
 80030de:	4947      	ldr	r1, [pc, #284]	; (80031fc <main+0x43c>)
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	e9c1 2300 	strd	r2, r3, [r1]
	Test_traj_Val[1] = 0;
 80030ec:	4943      	ldr	r1, [pc, #268]	; (80031fc <main+0x43c>)
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80030fa:	e081      	b.n	8003200 <main+0x440>
 80030fc:	f3af 8000 	nop.w
 8003100:	00000000 	.word	0x00000000
 8003104:	40540000 	.word	0x40540000
 8003108:	00000000 	.word	0x00000000
 800310c:	40b96400 	.word	0x40b96400
 8003110:	00000000 	.word	0x00000000
 8003114:	40c3ba00 	.word	0x40c3ba00
 8003118:	00000000 	.word	0x00000000
 800311c:	40a8ba00 	.word	0x40a8ba00
 8003120:	00000000 	.word	0x00000000
 8003124:	40bb3a00 	.word	0x40bb3a00
 8003128:	d2f1a9fc 	.word	0xd2f1a9fc
 800312c:	3f50624d 	.word	0x3f50624d
 8003130:	00000000 	.word	0x00000000
 8003134:	40b38800 	.word	0x40b38800
 8003138:	00000000 	.word	0x00000000
 800313c:	40790000 	.word	0x40790000
	...
 800314c:	4079a000 	.word	0x4079a000
 8003150:	00000000 	.word	0x00000000
 8003154:	40890000 	.word	0x40890000
 8003158:	33333333 	.word	0x33333333
 800315c:	3fd33333 	.word	0x3fd33333
 8003160:	00000000 	.word	0x00000000
 8003164:	407a4000 	.word	0x407a4000
 8003168:	58020c00 	.word	0x58020c00
 800316c:	58021000 	.word	0x58021000
 8003170:	1ff1e840 	.word	0x1ff1e840
 8003174:	1ff1e820 	.word	0x1ff1e820
 8003178:	200002c0 	.word	0x200002c0
 800317c:	200001d4 	.word	0x200001d4
 8003180:	20000248 	.word	0x20000248
 8003184:	20000c3c 	.word	0x20000c3c
 8003188:	200002c8 	.word	0x200002c8
 800318c:	200002f0 	.word	0x200002f0
 8003190:	20000318 	.word	0x20000318
 8003194:	20000340 	.word	0x20000340
 8003198:	20000d98 	.word	0x20000d98
 800319c:	20000368 	.word	0x20000368
 80031a0:	200003a8 	.word	0x200003a8
 80031a4:	200003e8 	.word	0x200003e8
 80031a8:	20000428 	.word	0x20000428
 80031ac:	200004a8 	.word	0x200004a8
 80031b0:	200004a8 	.word	0x200004a8
 80031b4:	20000580 	.word	0x20000580
 80031b8:	20000658 	.word	0x20000658
 80031bc:	20000730 	.word	0x20000730
 80031c0:	2000026c 	.word	0x2000026c
 80031c4:	20000b70 	.word	0x20000b70
 80031c8:	20000b98 	.word	0x20000b98
 80031cc:	0007a120 	.word	0x0007a120
 80031d0:	20000f60 	.word	0x20000f60
 80031d4:	20000808 	.word	0x20000808
 80031d8:	20000fac 	.word	0x20000fac
 80031dc:	2000081c 	.word	0x2000081c
 80031e0:	20000ff8 	.word	0x20000ff8
 80031e4:	20000830 	.word	0x20000830
 80031e8:	20001044 	.word	0x20001044
 80031ec:	20000844 	.word	0x20000844
 80031f0:	20000de4 	.word	0x20000de4
 80031f4:	20000858 	.word	0x20000858
 80031f8:	20000860 	.word	0x20000860
 80031fc:	20000c00 	.word	0x20000c00
	Test_traj_Val[2] = 0;
 8003200:	49a9      	ldr	r1, [pc, #676]	; (80034a8 <main+0x6e8>)
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Test_traj_Val[3] = 0;
 800320e:	49a6      	ldr	r1, [pc, #664]	; (80034a8 <main+0x6e8>)
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Traj_Flag = 0;
 800321c:	4ba3      	ldr	r3, [pc, #652]	; (80034ac <main+0x6ec>)
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
	t = 0;
 8003222:	49a3      	ldr	r1, [pc, #652]	; (80034b0 <main+0x6f0>)
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9c1 2300 	strd	r2, r3, [r1]

	/*   RGB LED   */
	Neopixel_Init(&Neopixel, &htim1, TIM_CHANNEL_1);
 8003230:	2200      	movs	r2, #0
 8003232:	49a0      	ldr	r1, [pc, #640]	; (80034b4 <main+0x6f4>)
 8003234:	48a0      	ldr	r0, [pc, #640]	; (80034b8 <main+0x6f8>)
 8003236:	f7fd fb5f 	bl	80008f8 <Neopixel_Init>
	Neopixel_Set(&Neopixel, 0, 255, 0, 0);
 800323a:	2300      	movs	r3, #0
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	2300      	movs	r3, #0
 8003240:	22ff      	movs	r2, #255	; 0xff
 8003242:	2100      	movs	r1, #0
 8003244:	489c      	ldr	r0, [pc, #624]	; (80034b8 <main+0x6f8>)
 8003246:	f7fd fb93 	bl	8000970 <Neopixel_Set>
	Neopixel_Set(&Neopixel, 1, 0, 255, 0);
 800324a:	2300      	movs	r3, #0
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	23ff      	movs	r3, #255	; 0xff
 8003250:	2200      	movs	r2, #0
 8003252:	2101      	movs	r1, #1
 8003254:	4898      	ldr	r0, [pc, #608]	; (80034b8 <main+0x6f8>)
 8003256:	f7fd fb8b 	bl	8000970 <Neopixel_Set>
	Neopixel_Set(&Neopixel, 2, 0, 0, 255);
 800325a:	23ff      	movs	r3, #255	; 0xff
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	2300      	movs	r3, #0
 8003260:	2200      	movs	r2, #0
 8003262:	2102      	movs	r1, #2
 8003264:	4894      	ldr	r0, [pc, #592]	; (80034b8 <main+0x6f8>)
 8003266:	f7fd fb83 	bl	8000970 <Neopixel_Set>
	Neopixel_Sent(&Neopixel);
 800326a:	4893      	ldr	r0, [pc, #588]	; (80034b8 <main+0x6f8>)
 800326c:	f7fd fbb1 	bl	80009d2 <Neopixel_Sent>


	HAL_TIM_Base_Start_IT(&htim23);   // Start Control Timer
 8003270:	4892      	ldr	r0, [pc, #584]	; (80034bc <main+0x6fc>)
 8003272:	f00f f94b 	bl	801250c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 8003276:	220e      	movs	r2, #14
 8003278:	4991      	ldr	r1, [pc, #580]	; (80034c0 <main+0x700>)
 800327a:	4892      	ldr	r0, [pc, #584]	; (80034c4 <main+0x704>)
 800327c:	f011 fa62 	bl	8014744 <HAL_UART_Receive_IT>

	ChessMoveStates = Chess_idle;
 8003280:	4b91      	ldr	r3, [pc, #580]	; (80034c8 <main+0x708>)
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN 3 */
//		Servo_Drive(&Servo[0], Servo_Griper[0]);
//		Servo_Drive(&Servo[1], Servo_Griper[1]);

		if (Test_traj) {
 8003286:	4b91      	ldr	r3, [pc, #580]	; (80034cc <main+0x70c>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <main+0x4e4>
			Test_traj = 0;
 800328e:	4b8f      	ldr	r3, [pc, #572]	; (80034cc <main+0x70c>)
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
			JMoveTaskSpace(TaskSpace_Live_Ex1, Time_Live_Ex1);
 8003294:	4b8e      	ldr	r3, [pc, #568]	; (80034d0 <main+0x710>)
 8003296:	ed93 7b00 	vldr	d7, [r3]
 800329a:	eeb0 0b47 	vmov.f64	d0, d7
 800329e:	488d      	ldr	r0, [pc, #564]	; (80034d4 <main+0x714>)
 80032a0:	f001 fd4e 	bl	8004d40 <JMoveTaskSpace>
		}
		if (Test_traj2) {
 80032a4:	4b8c      	ldr	r3, [pc, #560]	; (80034d8 <main+0x718>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01f      	beq.n	80032ec <main+0x52c>
			Test_traj2 = 0;
 80032ac:	4b8a      	ldr	r3, [pc, #552]	; (80034d8 <main+0x718>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
			double TaskSpace_Live_Ex1_ChangeZ[3];
			TaskSpace_Live_Ex1_ChangeZ[0] = TaskSpace_Live_Ex1[0];
 80032b2:	4b88      	ldr	r3, [pc, #544]	; (80034d4 <main+0x714>)
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
			TaskSpace_Live_Ex1_ChangeZ[1] = TaskSpace_Live_Ex1[1];
 80032bc:	4b85      	ldr	r3, [pc, #532]	; (80034d4 <main+0x714>)
 80032be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80032c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			TaskSpace_Live_Ex1_ChangeZ[2] = TaskSpace_Live_Ex1[2] - 100;
 80032c6:	4b83      	ldr	r3, [pc, #524]	; (80034d4 <main+0x714>)
 80032c8:	ed93 7b04 	vldr	d7, [r3, #16]
 80032cc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8003498 <main+0x6d8>
 80032d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80032d4:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
			JMoveTaskSpace(TaskSpace_Live_Ex1_ChangeZ, Time_Live_Ex1);
 80032d8:	4b7d      	ldr	r3, [pc, #500]	; (80034d0 <main+0x710>)
 80032da:	ed93 7b00 	vldr	d7, [r3]
 80032de:	f107 0320 	add.w	r3, r7, #32
 80032e2:	eeb0 0b47 	vmov.f64	d0, d7
 80032e6:	4618      	mov	r0, r3
 80032e8:	f001 fd2a 	bl	8004d40 <JMoveTaskSpace>
		}

	   uint8_t tune_joint = 3;
 80032ec:	2303      	movs	r3, #3
 80032ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	   if (tune_PID[0] != tune_PID[1]){
 80032f2:	4b7a      	ldr	r3, [pc, #488]	; (80034dc <main+0x71c>)
 80032f4:	ed93 6b00 	vldr	d6, [r3]
 80032f8:	4b78      	ldr	r3, [pc, #480]	; (80034dc <main+0x71c>)
 80032fa:	ed93 7b02 	vldr	d7, [r3, #8]
 80032fe:	eeb4 6b47 	vcmp.f64	d6, d7
 8003302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003306:	d070      	beq.n	80033ea <main+0x62a>
		   	tune_PID[1] = tune_PID[0];
 8003308:	4b74      	ldr	r3, [pc, #464]	; (80034dc <main+0x71c>)
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	4973      	ldr	r1, [pc, #460]	; (80034dc <main+0x71c>)
 8003310:	e9c1 2302 	strd	r2, r3, [r1, #8]
			t = 0;
 8003314:	4966      	ldr	r1, [pc, #408]	; (80034b0 <main+0x6f0>)
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9c1 2300 	strd	r2, r3, [r1]
			double Joint[4] = {0,0,0,0};
 8003322:	463b      	mov	r3, r7
 8003324:	2220      	movs	r2, #32
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f013 ff5d 	bl	80171e8 <memset>
			for (int i = 0; i < 4; i++) {
 800332e:	2300      	movs	r3, #0
 8003330:	647b      	str	r3, [r7, #68]	; 0x44
 8003332:	e012      	b.n	800335a <main+0x59a>
				Joint[i] = Control[i].PositionFeedback;
 8003334:	4a6a      	ldr	r2, [pc, #424]	; (80034e0 <main+0x720>)
 8003336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003338:	21d8      	movs	r1, #216	; 0xd8
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3350      	adds	r3, #80	; 0x50
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003348:	00c9      	lsls	r1, r1, #3
 800334a:	3148      	adds	r1, #72	; 0x48
 800334c:	4439      	add	r1, r7
 800334e:	3948      	subs	r1, #72	; 0x48
 8003350:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < 4; i++) {
 8003354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003356:	3301      	adds	r3, #1
 8003358:	647b      	str	r3, [r7, #68]	; 0x44
 800335a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800335c:	2b03      	cmp	r3, #3
 800335e:	dde9      	ble.n	8003334 <main+0x574>
			}
			Joint[tune_joint] = tune_PID[0];
 8003360:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8003364:	4b5d      	ldr	r3, [pc, #372]	; (80034dc <main+0x71c>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	00c9      	lsls	r1, r1, #3
 800336c:	3148      	adds	r1, #72	; 0x48
 800336e:	4439      	add	r1, r7
 8003370:	3948      	subs	r1, #72	; 0x48
 8003372:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < 4; i++) {
 8003376:	2300      	movs	r3, #0
 8003378:	643b      	str	r3, [r7, #64]	; 0x40
 800337a:	e030      	b.n	80033de <main+0x61e>
				Traj_Coeff_Cal(&Traj[i], T_tune_PID, Joint[i], Control[i].PositionFeedback,0, Control[i].VelocityFeedback);
 800337c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4a57      	ldr	r2, [pc, #348]	; (80034e4 <main+0x724>)
 8003388:	441a      	add	r2, r3
 800338a:	4b57      	ldr	r3, [pc, #348]	; (80034e8 <main+0x728>)
 800338c:	ed93 7b00 	vldr	d7, [r3]
 8003390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	3348      	adds	r3, #72	; 0x48
 8003396:	443b      	add	r3, r7
 8003398:	3b48      	subs	r3, #72	; 0x48
 800339a:	ed93 6b00 	vldr	d6, [r3]
 800339e:	4950      	ldr	r1, [pc, #320]	; (80034e0 <main+0x720>)
 80033a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a2:	20d8      	movs	r0, #216	; 0xd8
 80033a4:	fb00 f303 	mul.w	r3, r0, r3
 80033a8:	440b      	add	r3, r1
 80033aa:	3350      	adds	r3, #80	; 0x50
 80033ac:	ed93 5b00 	vldr	d5, [r3]
 80033b0:	494b      	ldr	r1, [pc, #300]	; (80034e0 <main+0x720>)
 80033b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b4:	20d8      	movs	r0, #216	; 0xd8
 80033b6:	fb00 f303 	mul.w	r3, r0, r3
 80033ba:	440b      	add	r3, r1
 80033bc:	33b8      	adds	r3, #184	; 0xb8
 80033be:	ed93 4b00 	vldr	d4, [r3]
 80033c2:	ed9f 3b37 	vldr	d3, [pc, #220]	; 80034a0 <main+0x6e0>
 80033c6:	eeb0 2b45 	vmov.f64	d2, d5
 80033ca:	eeb0 1b46 	vmov.f64	d1, d6
 80033ce:	eeb0 0b47 	vmov.f64	d0, d7
 80033d2:	4610      	mov	r0, r2
 80033d4:	f7fd ff40 	bl	8001258 <Traj_Coeff_Cal>
			for (int i = 0; i < 4; i++) {
 80033d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033da:	3301      	adds	r3, #1
 80033dc:	643b      	str	r3, [r7, #64]	; 0x40
 80033de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	ddcb      	ble.n	800337c <main+0x5bc>
			}
			Traj_Flag = 0x0F;
 80033e4:	4b31      	ldr	r3, [pc, #196]	; (80034ac <main+0x6ec>)
 80033e6:	220f      	movs	r2, #15
 80033e8:	701a      	strb	r2, [r3, #0]
	   }

		if (Contorl_Flag) {
 80033ea:	4b40      	ldr	r3, [pc, #256]	; (80034ec <main+0x72c>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <main+0x63c>
			Control_Function();
 80033f2:	f001 fa3d 	bl	8004870 <Control_Function>
			Contorl_Flag = 0;    // Clear Control Flag
 80033f6:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <main+0x72c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
		}

		if (Protocol_Flag) {
 80033fc:	4b3c      	ldr	r3, [pc, #240]	; (80034f0 <main+0x730>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <main+0x64e>
			Narwhal_Protocol();
 8003404:	f000 f9e0 	bl	80037c8 <Narwhal_Protocol>
			Protocol_Flag = 0;
 8003408:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <main+0x730>)
 800340a:	2200      	movs	r2, #0
 800340c:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - Software_Timer_100ms >= 10) {
 800340e:	f003 fff7 	bl	8007400 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <main+0x734>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b09      	cmp	r3, #9
 800341c:	d910      	bls.n	8003440 <main+0x680>
			Software_Timer_100ms = HAL_GetTick();
 800341e:	f003 ffef 	bl	8007400 <HAL_GetTick>
 8003422:	4603      	mov	r3, r0
 8003424:	4a33      	ldr	r2, [pc, #204]	; (80034f4 <main+0x734>)
 8003426:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc3); 				//	read temperature sensor
 8003428:	4833      	ldr	r0, [pc, #204]	; (80034f8 <main+0x738>)
 800342a:	f004 fcf7 	bl	8007e1c <HAL_ADC_Start_IT>
			One_ShotTemp(&hi2c2);
 800342e:	4833      	ldr	r0, [pc, #204]	; (80034fc <main+0x73c>)
 8003430:	f7fd fb89 	bl	8000b46 <One_ShotTemp>
			Read_TempCelsius(&TPM75_Temp,&hi2c2);
 8003434:	4931      	ldr	r1, [pc, #196]	; (80034fc <main+0x73c>)
 8003436:	4832      	ldr	r0, [pc, #200]	; (8003500 <main+0x740>)
 8003438:	f7fd fb92 	bl	8000b60 <Read_TempCelsius>
			ChessMoveStateMachine();
 800343c:	f001 fe6c 	bl	8005118 <ChessMoveStateMachine>
		}

		if (HAL_GetTick() - Software_Timer_1s >= 1000) {		// 	Update System Status
 8003440:	f003 ffde 	bl	8007400 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <main+0x744>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003450:	f4ff af19 	bcc.w	8003286 <main+0x4c6>
			Software_Timer_1s = HAL_GetTick();
 8003454:	f003 ffd4 	bl	8007400 <HAL_GetTick>
 8003458:	4603      	mov	r3, r0
 800345a:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <main+0x744>)
 800345c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800345e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003462:	4829      	ldr	r0, [pc, #164]	; (8003508 <main+0x748>)
 8003464:	f009 fc61 	bl	800cd2a <HAL_GPIO_TogglePin>
			if (Comunication_Heartbeat == 0){
 8003468:	4b28      	ldr	r3, [pc, #160]	; (800350c <main+0x74c>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d106      	bne.n	800347e <main+0x6be>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8003470:	2201      	movs	r2, #1
 8003472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003476:	4826      	ldr	r0, [pc, #152]	; (8003510 <main+0x750>)
 8003478:	f009 fc3e 	bl	800ccf8 <HAL_GPIO_WritePin>
 800347c:	e703      	b.n	8003286 <main+0x4c6>
			}
			else{
				Comunication_Heartbeat -= 1;
 800347e:	4b23      	ldr	r3, [pc, #140]	; (800350c <main+0x74c>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	3b01      	subs	r3, #1
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4b21      	ldr	r3, [pc, #132]	; (800350c <main+0x74c>)
 8003488:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800348a:	2200      	movs	r2, #0
 800348c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003490:	481f      	ldr	r0, [pc, #124]	; (8003510 <main+0x750>)
 8003492:	f009 fc31 	bl	800ccf8 <HAL_GPIO_WritePin>
  {
 8003496:	e6f6      	b.n	8003286 <main+0x4c6>
 8003498:	00000000 	.word	0x00000000
 800349c:	40590000 	.word	0x40590000
	...
 80034a8:	20000c00 	.word	0x20000c00
 80034ac:	20000bc9 	.word	0x20000bc9
 80034b0:	20000bc0 	.word	0x20000bc0
 80034b4:	20000d4c 	.word	0x20000d4c
 80034b8:	20000868 	.word	0x20000868
 80034bc:	200010dc 	.word	0x200010dc
 80034c0:	20000094 	.word	0x20000094
 80034c4:	200011ec 	.word	0x200011ec
 80034c8:	20000be1 	.word	0x20000be1
 80034cc:	20000bf8 	.word	0x20000bf8
 80034d0:	20000018 	.word	0x20000018
 80034d4:	20000c20 	.word	0x20000c20
 80034d8:	20000bf9 	.word	0x20000bf9
 80034dc:	20000be8 	.word	0x20000be8
 80034e0:	200004a8 	.word	0x200004a8
 80034e4:	200009d0 	.word	0x200009d0
 80034e8:	20000010 	.word	0x20000010
 80034ec:	20000bc8 	.word	0x20000bc8
 80034f0:	20000bca 	.word	0x20000bca
 80034f4:	20000bd0 	.word	0x20000bd0
 80034f8:	200001d4 	.word	0x200001d4
 80034fc:	2000026c 	.word	0x2000026c
 8003500:	20000b68 	.word	0x20000b68
 8003504:	20000bcc 	.word	0x20000bcc
 8003508:	58020800 	.word	0x58020800
 800350c:	20000bd4 	.word	0x20000bd4
 8003510:	58020c00 	.word	0x58020c00

08003514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b09c      	sub	sp, #112	; 0x70
 8003518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800351a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800351e:	224c      	movs	r2, #76	; 0x4c
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f013 fe60 	bl	80171e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	2220      	movs	r2, #32
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f013 fe5a 	bl	80171e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003534:	2002      	movs	r0, #2
 8003536:	f00a ffe5 	bl	800e504 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800353a:	2300      	movs	r3, #0
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4b2f      	ldr	r3, [pc, #188]	; (80035fc <SystemClock_Config+0xe8>)
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	4a2e      	ldr	r2, [pc, #184]	; (80035fc <SystemClock_Config+0xe8>)
 8003544:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003548:	6193      	str	r3, [r2, #24]
 800354a:	4b2c      	ldr	r3, [pc, #176]	; (80035fc <SystemClock_Config+0xe8>)
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003556:	bf00      	nop
 8003558:	4b28      	ldr	r3, [pc, #160]	; (80035fc <SystemClock_Config+0xe8>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003564:	d1f8      	bne.n	8003558 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003566:	4b26      	ldr	r3, [pc, #152]	; (8003600 <SystemClock_Config+0xec>)
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	f023 0303 	bic.w	r3, r3, #3
 800356e:	4a24      	ldr	r2, [pc, #144]	; (8003600 <SystemClock_Config+0xec>)
 8003570:	f043 0302 	orr.w	r3, r3, #2
 8003574:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003576:	2301      	movs	r3, #1
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800357a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003580:	2302      	movs	r3, #2
 8003582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003584:	2302      	movs	r3, #2
 8003586:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003588:	2302      	movs	r3, #2
 800358a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800358c:	232c      	movs	r3, #44	; 0x2c
 800358e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8003590:	2301      	movs	r3, #1
 8003592:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003594:	2302      	movs	r3, #2
 8003596:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003598:	2302      	movs	r3, #2
 800359a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800359c:	230c      	movs	r3, #12
 800359e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ac:	4618      	mov	r0, r3
 80035ae:	f00a ffe3 	bl	800e578 <HAL_RCC_OscConfig>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80035b8:	f002 f89e 	bl	80056f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035bc:	233f      	movs	r3, #63	; 0x3f
 80035be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035c0:	2303      	movs	r3, #3
 80035c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80035c8:	2308      	movs	r3, #8
 80035ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80035cc:	2340      	movs	r3, #64	; 0x40
 80035ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80035d0:	2340      	movs	r3, #64	; 0x40
 80035d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80035d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80035da:	2340      	movs	r3, #64	; 0x40
 80035dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80035de:	1d3b      	adds	r3, r7, #4
 80035e0:	2103      	movs	r1, #3
 80035e2:	4618      	mov	r0, r3
 80035e4:	f00b fb76 	bl	800ecd4 <HAL_RCC_ClockConfig>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80035ee:	f002 f883 	bl	80056f8 <Error_Handler>
  }
}
 80035f2:	bf00      	nop
 80035f4:	3770      	adds	r7, #112	; 0x70
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	58024800 	.word	0x58024800
 8003600:	58024400 	.word	0x58024400

08003604 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b0ae      	sub	sp, #184	; 0xb8
 8003608:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800360a:	1d3b      	adds	r3, r7, #4
 800360c:	22b4      	movs	r2, #180	; 0xb4
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f013 fde9 	bl	80171e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 8003616:	4b14      	ldr	r3, [pc, #80]	; (8003668 <PeriphCommonClock_Config+0x64>)
 8003618:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800361a:	2302      	movs	r3, #2
 800361c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800361e:	2310      	movs	r3, #16
 8003620:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003622:	2302      	movs	r3, #2
 8003624:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003626:	2302      	movs	r3, #2
 8003628:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800362a:	2302      	movs	r3, #2
 800362c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800362e:	23c0      	movs	r3, #192	; 0xc0
 8003630:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003632:	2300      	movs	r3, #0
 8003634:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 800363a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800363e:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8003640:	2301      	movs	r3, #1
 8003642:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8003644:	2308      	movs	r3, #8
 8003646:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800364e:	1d3b      	adds	r3, r7, #4
 8003650:	4618      	mov	r0, r3
 8003652:	f00b fecb 	bl	800f3ec <HAL_RCCEx_PeriphCLKConfig>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800365c:	f002 f84c 	bl	80056f8 <Error_Handler>
  }
}
 8003660:	bf00      	nop
 8003662:	37b8      	adds	r7, #184	; 0xb8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	00082003 	.word	0x00082003

0800366c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a06      	ldr	r2, [pc, #24]	; (8003690 <HAL_UART_RxCpltCallback+0x24>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d102      	bne.n	8003682 <HAL_UART_RxCpltCallback+0x16>
		Protocol_Flag = 1;
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_UART_RxCpltCallback+0x28>)
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
	}
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	200011ec 	.word	0x200011ec
 8003694:	20000bca 	.word	0x20000bca

08003698 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80036a0:	2100      	movs	r1, #0
 80036a2:	4803      	ldr	r0, [pc, #12]	; (80036b0 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 80036a4:	f00f fb60 	bl	8012d68 <HAL_TIM_PWM_Stop_DMA>
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000d4c 	.word	0x20000d4c

080036b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a18      	ldr	r2, [pc, #96]	; (8003720 <HAL_ADC_ConvCpltCallback+0x6c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d129      	bne.n	8003718 <HAL_ADC_ConvCpltCallback+0x64>
		uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 80036c4:	4816      	ldr	r0, [pc, #88]	; (8003720 <HAL_ADC_ConvCpltCallback+0x6c>)
 80036c6:	f004 fce9 	bl	800809c <HAL_ADC_GetValue>
 80036ca:	60f8      	str	r0, [r7, #12]
		Temperature = ((Temperature * 19)
 80036cc:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_ADC_ConvCpltCallback+0x70>)
 80036ce:	ed93 7b00 	vldr	d7, [r3]
 80036d2:	eeb3 6b03 	vmov.f64	d6, #51	; 0x41980000  19.0
 80036d6:	ee27 6b06 	vmul.f64	d6, d7, d6
				+ (Temp_Calibration
						* (double) ((double) ADC_Output
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eeb8 5b67 	vcvt.f64.u32	d5, s15
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_ADC_ConvCpltCallback+0x74>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	ee07 3a90 	vmov	s15, r3
						* (double) ((double) ADC_Output
 80036ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80036f0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80036f4:	4b0d      	ldr	r3, [pc, #52]	; (800372c <HAL_ADC_ConvCpltCallback+0x78>)
 80036f6:	ed93 7b00 	vldr	d7, [r3]
 80036fa:	ee25 7b07 	vmul.f64	d7, d5, d7
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 80036fe:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8003702:	ee37 7b05 	vadd.f64	d7, d7, d5
				+ (Temp_Calibration
 8003706:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ 20;
 800370a:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 800370e:	ee86 7b05 	vdiv.f64	d7, d6, d5
		Temperature = ((Temperature * 19)
 8003712:	4b04      	ldr	r3, [pc, #16]	; (8003724 <HAL_ADC_ConvCpltCallback+0x70>)
 8003714:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200001d4 	.word	0x200001d4
 8003724:	200002b8 	.word	0x200002b8
 8003728:	1ff1e820 	.word	0x1ff1e820
 800372c:	200002c0 	.word	0x200002c0

08003730 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	if (htim == &htim23) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a06      	ldr	r2, [pc, #24]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d102      	bne.n	8003746 <HAL_TIM_PeriodElapsedCallback+0x16>
		Contorl_Flag = 1;
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
	}
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	200010dc 	.word	0x200010dc
 8003758:	20000bc8 	.word	0x20000bc8

0800375c <CRC8>:

inline uint8_t CRC8(uint8_t *Data,uint8_t BufferLength){
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	70fb      	strb	r3, [r7, #3]
	return HAL_CRC_Calculate(&hcrc, (uint32_t*) Data, BufferLength) ^ 0xFF;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	461a      	mov	r2, r3
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4805      	ldr	r0, [pc, #20]	; (8003784 <CRC8+0x28>)
 8003770:	f006 f938 	bl	80099e4 <HAL_CRC_Calculate>
 8003774:	4603      	mov	r3, r0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	b2db      	uxtb	r3, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000248 	.word	0x20000248

08003788 <SentData>:
inline void SentData(uint8_t range){
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
	UART5_txBuffer[range] = CRC8(UART5_txBuffer, range);
 8003792:	79fc      	ldrb	r4, [r7, #7]
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	4619      	mov	r1, r3
 8003798:	4809      	ldr	r0, [pc, #36]	; (80037c0 <SentData+0x38>)
 800379a:	f7ff ffdf 	bl	800375c <CRC8>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <SentData+0x38>)
 80037a4:	551a      	strb	r2, [r3, r4]
	HAL_UART_Transmit_IT(&huart5, UART5_txBuffer, range+1);
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3301      	adds	r3, #1
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	4903      	ldr	r1, [pc, #12]	; (80037c0 <SentData+0x38>)
 80037b2:	4804      	ldr	r0, [pc, #16]	; (80037c4 <SentData+0x3c>)
 80037b4:	f010 ff1e 	bl	80145f4 <HAL_UART_Transmit_IT>
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd90      	pop	{r4, r7, pc}
 80037c0:	200000a4 	.word	0x200000a4
 80037c4:	200011ec 	.word	0x200011ec

080037c8 <Narwhal_Protocol>:

inline void Narwhal_Protocol() {
 80037c8:	b5b0      	push	{r4, r5, r7, lr}
 80037ca:	b0ee      	sub	sp, #440	; 0x1b8
 80037cc:	af00      	add	r7, sp, #0
	if (UART5_rxBuffer[0] == 0xFF) {
 80037ce:	4bda      	ldr	r3, [pc, #872]	; (8003b38 <Narwhal_Protocol+0x370>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2bff      	cmp	r3, #255	; 0xff
 80037d4:	f041 8023 	bne.w	800481e <Narwhal_Protocol+0x1056>
		uint8_t CRC_Cal = CRC8(UART5_rxBuffer, 13);
 80037d8:	210d      	movs	r1, #13
 80037da:	48d7      	ldr	r0, [pc, #860]	; (8003b38 <Narwhal_Protocol+0x370>)
 80037dc:	f7ff ffbe 	bl	800375c <CRC8>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		if (CRC_Cal == UART5_rxBuffer[13]) {
 80037e6:	4bd4      	ldr	r3, [pc, #848]	; (8003b38 <Narwhal_Protocol+0x370>)
 80037e8:	7b5b      	ldrb	r3, [r3, #13]
 80037ea:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 80037ee:	429a      	cmp	r2, r3
 80037f0:	f041 800e 	bne.w	8004810 <Narwhal_Protocol+0x1048>
			UART5_txBuffer[0] = 0xFF;
 80037f4:	4bd1      	ldr	r3, [pc, #836]	; (8003b3c <Narwhal_Protocol+0x374>)
 80037f6:	22ff      	movs	r2, #255	; 0xff
 80037f8:	701a      	strb	r2, [r3, #0]
			Comunication_Heartbeat = 2;
 80037fa:	4bd1      	ldr	r3, [pc, #836]	; (8003b40 <Narwhal_Protocol+0x378>)
 80037fc:	2202      	movs	r2, #2
 80037fe:	701a      	strb	r2, [r3, #0]
			double Safe_Zone[4] = { 0, 0.5, -0.5, 0 };
 8003800:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003804:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003808:	4ace      	ldr	r2, [pc, #824]	; (8003b44 <Narwhal_Protocol+0x37c>)
 800380a:	461c      	mov	r4, r3
 800380c:	4615      	mov	r5, r2
 800380e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003812:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003816:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			double q_Feed[4];
			double dq[4];
			double d_Task[3];
			double d_Task_Set[3];
			double q_in[5] = {0,0,0,0,0};
 800381a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800381e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003822:	4618      	mov	r0, r3
 8003824:	2328      	movs	r3, #40	; 0x28
 8003826:	461a      	mov	r2, r3
 8003828:	2100      	movs	r1, #0
 800382a:	f013 fcdd 	bl	80171e8 <memset>
			double q_in_Set[5] = {0,0,0,0,0};
 800382e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003836:	4618      	mov	r0, r3
 8003838:	2328      	movs	r3, #40	; 0x28
 800383a:	461a      	mov	r2, r3
 800383c:	2100      	movs	r1, #0
 800383e:	f013 fcd3 	bl	80171e8 <memset>
			double task[3] = { 0, 0, 0 };
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			int Chess_Board_Base_Encoder2Sent;


			uint16_t Temperature_Protocol = Temperature * 1000;
 8003866:	4bb8      	ldr	r3, [pc, #736]	; (8003b48 <Narwhal_Protocol+0x380>)
 8003868:	ed93 7b00 	vldr	d7, [r3]
 800386c:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8003b28 <Narwhal_Protocol+0x360>
 8003870:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003874:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003878:	ee17 3a90 	vmov	r3, s15
 800387c:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
			uint16_t Temperature_Protocol2 = TPM75_Temp * 1000;
 8003880:	4bb2      	ldr	r3, [pc, #712]	; (8003b4c <Narwhal_Protocol+0x384>)
 8003882:	ed93 7b00 	vldr	d7, [r3]
 8003886:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8003b28 <Narwhal_Protocol+0x360>
 800388a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800388e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003892:	ee17 3a90 	vmov	r3, s15
 8003896:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a

			/* 		Data to MCU Start	*/
			switch (UART5_rxBuffer[1]) {
 800389a:	4ba7      	ldr	r3, [pc, #668]	; (8003b38 <Narwhal_Protocol+0x370>)
 800389c:	785b      	ldrb	r3, [r3, #1]
 800389e:	3ba0      	subs	r3, #160	; 0xa0
 80038a0:	2b5f      	cmp	r3, #95	; 0x5f
 80038a2:	f200 87ae 	bhi.w	8004802 <Narwhal_Protocol+0x103a>
 80038a6:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <Narwhal_Protocol+0xe4>)
 80038a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ac:	080042c7 	.word	0x080042c7
 80038b0:	080042ed 	.word	0x080042ed
 80038b4:	0800432b 	.word	0x0800432b
 80038b8:	08004803 	.word	0x08004803
 80038bc:	08004803 	.word	0x08004803
 80038c0:	08004803 	.word	0x08004803
 80038c4:	08004803 	.word	0x08004803
 80038c8:	08004803 	.word	0x08004803
 80038cc:	08004803 	.word	0x08004803
 80038d0:	08004803 	.word	0x08004803
 80038d4:	0800439b 	.word	0x0800439b
 80038d8:	0800441f 	.word	0x0800441f
 80038dc:	08004803 	.word	0x08004803
 80038e0:	08004803 	.word	0x08004803
 80038e4:	08004803 	.word	0x08004803
 80038e8:	080044eb 	.word	0x080044eb
 80038ec:	08004803 	.word	0x08004803
 80038f0:	08004803 	.word	0x08004803
 80038f4:	08004803 	.word	0x08004803
 80038f8:	08004803 	.word	0x08004803
 80038fc:	08004803 	.word	0x08004803
 8003900:	08004803 	.word	0x08004803
 8003904:	08004803 	.word	0x08004803
 8003908:	08004803 	.word	0x08004803
 800390c:	08004803 	.word	0x08004803
 8003910:	08004803 	.word	0x08004803
 8003914:	08004803 	.word	0x08004803
 8003918:	08004803 	.word	0x08004803
 800391c:	08004803 	.word	0x08004803
 8003920:	08004803 	.word	0x08004803
 8003924:	08004803 	.word	0x08004803
 8003928:	08004803 	.word	0x08004803
 800392c:	08004803 	.word	0x08004803
 8003930:	08004803 	.word	0x08004803
 8003934:	08004803 	.word	0x08004803
 8003938:	08004803 	.word	0x08004803
 800393c:	08004803 	.word	0x08004803
 8003940:	08004803 	.word	0x08004803
 8003944:	08004803 	.word	0x08004803
 8003948:	08004803 	.word	0x08004803
 800394c:	08004803 	.word	0x08004803
 8003950:	08004803 	.word	0x08004803
 8003954:	08004803 	.word	0x08004803
 8003958:	08004803 	.word	0x08004803
 800395c:	08004803 	.word	0x08004803
 8003960:	08004803 	.word	0x08004803
 8003964:	08004803 	.word	0x08004803
 8003968:	08004803 	.word	0x08004803
 800396c:	08004803 	.word	0x08004803
 8003970:	08004803 	.word	0x08004803
 8003974:	08004803 	.word	0x08004803
 8003978:	08004803 	.word	0x08004803
 800397c:	08004803 	.word	0x08004803
 8003980:	08004803 	.word	0x08004803
 8003984:	08004803 	.word	0x08004803
 8003988:	08004803 	.word	0x08004803
 800398c:	08004803 	.word	0x08004803
 8003990:	08004803 	.word	0x08004803
 8003994:	08004803 	.word	0x08004803
 8003998:	08004803 	.word	0x08004803
 800399c:	08004803 	.word	0x08004803
 80039a0:	08004803 	.word	0x08004803
 80039a4:	08004803 	.word	0x08004803
 80039a8:	08004803 	.word	0x08004803
 80039ac:	08004803 	.word	0x08004803
 80039b0:	08004803 	.word	0x08004803
 80039b4:	08004803 	.word	0x08004803
 80039b8:	08004803 	.word	0x08004803
 80039bc:	08004803 	.word	0x08004803
 80039c0:	08004803 	.word	0x08004803
 80039c4:	08004803 	.word	0x08004803
 80039c8:	08004803 	.word	0x08004803
 80039cc:	08004803 	.word	0x08004803
 80039d0:	08004803 	.word	0x08004803
 80039d4:	08004803 	.word	0x08004803
 80039d8:	08004803 	.word	0x08004803
 80039dc:	08004803 	.word	0x08004803
 80039e0:	08004803 	.word	0x08004803
 80039e4:	08004803 	.word	0x08004803
 80039e8:	08004803 	.word	0x08004803
 80039ec:	08003a2d 	.word	0x08003a2d
 80039f0:	08003a43 	.word	0x08003a43
 80039f4:	08004803 	.word	0x08004803
 80039f8:	08004803 	.word	0x08004803
 80039fc:	08004803 	.word	0x08004803
 8003a00:	08003a59 	.word	0x08003a59
 8003a04:	08003b05 	.word	0x08003b05
 8003a08:	08003c07 	.word	0x08003c07
 8003a0c:	08004803 	.word	0x08004803
 8003a10:	08004803 	.word	0x08004803
 8003a14:	08003c25 	.word	0x08003c25
 8003a18:	08003d13 	.word	0x08003d13
 8003a1c:	08004803 	.word	0x08004803
 8003a20:	08003ed1 	.word	0x08003ed1
 8003a24:	08004045 	.word	0x08004045
 8003a28:	080041e5 	.word	0x080041e5
			case 0xF0:
				/* Ping */
				UART5_txBuffer[2] = 0x00;
 8003a2c:	4b43      	ldr	r3, [pc, #268]	; (8003b3c <Narwhal_Protocol+0x374>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003a32:	4b42      	ldr	r3, [pc, #264]	; (8003b3c <Narwhal_Protocol+0x374>)
 8003a34:	22ff      	movs	r2, #255	; 0xff
 8003a36:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003a38:	2003      	movs	r0, #3
 8003a3a:	f7ff fea5 	bl	8003788 <SentData>
				break;
 8003a3e:	f000 bef4 	b.w	800482a <Narwhal_Protocol+0x1062>
			case 0xF1:
				/* Working Mode Set */
				UART5_txBuffer[2] = 0x01;
 8003a42:	4b3e      	ldr	r3, [pc, #248]	; (8003b3c <Narwhal_Protocol+0x374>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003a48:	4b3c      	ldr	r3, [pc, #240]	; (8003b3c <Narwhal_Protocol+0x374>)
 8003a4a:	22ff      	movs	r2, #255	; 0xff
 8003a4c:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003a4e:	2003      	movs	r0, #3
 8003a50:	f7ff fe9a 	bl	8003788 <SentData>
				break;
 8003a54:	f000 bee9 	b.w	800482a <Narwhal_Protocol+0x1062>
			case 0xF5:
				/* GoHome */
				if (Traj_Flag == 0) {;
 8003a58:	4b3d      	ldr	r3, [pc, #244]	; (8003b50 <Narwhal_Protocol+0x388>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d146      	bne.n	8003aee <Narwhal_Protocol+0x326>
					t = 0;
 8003a60:	493c      	ldr	r1, [pc, #240]	; (8003b54 <Narwhal_Protocol+0x38c>)
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	e9c1 2300 	strd	r2, r3, [r1]
					for (int i = 0; i < 4; i++) {
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003a74:	e02d      	b.n	8003ad2 <Narwhal_Protocol+0x30a>
						Traj_Coeff_Cal(&Traj[i], 2, 0,
 8003a76:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4a35      	ldr	r2, [pc, #212]	; (8003b58 <Narwhal_Protocol+0x390>)
 8003a84:	441a      	add	r2, r3
 8003a86:	4935      	ldr	r1, [pc, #212]	; (8003b5c <Narwhal_Protocol+0x394>)
 8003a88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003a8c:	20d8      	movs	r0, #216	; 0xd8
 8003a8e:	fb00 f303 	mul.w	r3, r0, r3
 8003a92:	440b      	add	r3, r1
 8003a94:	3350      	adds	r3, #80	; 0x50
 8003a96:	ed93 7b00 	vldr	d7, [r3]
 8003a9a:	4930      	ldr	r1, [pc, #192]	; (8003b5c <Narwhal_Protocol+0x394>)
 8003a9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003aa0:	20d8      	movs	r0, #216	; 0xd8
 8003aa2:	fb00 f303 	mul.w	r3, r0, r3
 8003aa6:	440b      	add	r3, r1
 8003aa8:	33b8      	adds	r3, #184	; 0xb8
 8003aaa:	ed93 6b00 	vldr	d6, [r3]
 8003aae:	eeb0 4b46 	vmov.f64	d4, d6
 8003ab2:	ed9f 3b1f 	vldr	d3, [pc, #124]	; 8003b30 <Narwhal_Protocol+0x368>
 8003ab6:	eeb0 2b47 	vmov.f64	d2, d7
 8003aba:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8003b30 <Narwhal_Protocol+0x368>
 8003abe:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f7fd fbc8 	bl	8001258 <Traj_Coeff_Cal>
					for (int i = 0; i < 4; i++) {
 8003ac8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003acc:	3301      	adds	r3, #1
 8003ace:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003ad2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	ddcd      	ble.n	8003a76 <Narwhal_Protocol+0x2ae>
								Control[i].PositionFeedback, 0,
								Control[i].VelocityFeedback);
					}
					Traj_Flag = 0x0F;
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <Narwhal_Protocol+0x388>)
 8003adc:	220f      	movs	r2, #15
 8003ade:	701a      	strb	r2, [r3, #0]
					Chessmove_State = 0;
 8003ae0:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <Narwhal_Protocol+0x398>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
					UART5_txBuffer[2] = 0x00;
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <Narwhal_Protocol+0x374>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	709a      	strb	r2, [r3, #2]
 8003aec:	e002      	b.n	8003af4 <Narwhal_Protocol+0x32c>
				} else {
					UART5_txBuffer[2] = 0x01;
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <Narwhal_Protocol+0x374>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	709a      	strb	r2, [r3, #2]
				}
				UART5_txBuffer[1] = 0xFF;
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <Narwhal_Protocol+0x374>)
 8003af6:	22ff      	movs	r2, #255	; 0xff
 8003af8:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003afa:	2003      	movs	r0, #3
 8003afc:	f7ff fe44 	bl	8003788 <SentData>
				break;
 8003b00:	f000 be93 	b.w	800482a <Narwhal_Protocol+0x1062>
			case 0xF6:
				/* GoSafe */
				if (Traj_Flag == 0) {
 8003b04:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <Narwhal_Protocol+0x388>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d171      	bne.n	8003bf0 <Narwhal_Protocol+0x428>
					;
					t = 0;
 8003b0c:	4911      	ldr	r1, [pc, #68]	; (8003b54 <Narwhal_Protocol+0x38c>)
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	e9c1 2300 	strd	r2, r3, [r1]
					for (int i = 0; i < 4; i++) {
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003b20:	e058      	b.n	8003bd4 <Narwhal_Protocol+0x40c>
 8003b22:	bf00      	nop
 8003b24:	f3af 8000 	nop.w
 8003b28:	00000000 	.word	0x00000000
 8003b2c:	408f4000 	.word	0x408f4000
	...
 8003b38:	20000094 	.word	0x20000094
 8003b3c:	200000a4 	.word	0x200000a4
 8003b40:	20000bd4 	.word	0x20000bd4
 8003b44:	08018268 	.word	0x08018268
 8003b48:	200002b8 	.word	0x200002b8
 8003b4c:	20000b68 	.word	0x20000b68
 8003b50:	20000bc9 	.word	0x20000bc9
 8003b54:	20000bc0 	.word	0x20000bc0
 8003b58:	200009d0 	.word	0x200009d0
 8003b5c:	200004a8 	.word	0x200004a8
 8003b60:	20000bcb 	.word	0x20000bcb
						Traj_Coeff_Cal(&Traj[i], 2.5, Safe_Zone[i],
 8003b64:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4acf      	ldr	r2, [pc, #828]	; (8003eb0 <Narwhal_Protocol+0x6e8>)
 8003b72:	1899      	adds	r1, r3, r2
 8003b74:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003b78:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 8003b7c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	ed93 7b00 	vldr	d7, [r3]
 8003b88:	4aca      	ldr	r2, [pc, #808]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003b8a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003b8e:	20d8      	movs	r0, #216	; 0xd8
 8003b90:	fb00 f303 	mul.w	r3, r0, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	3350      	adds	r3, #80	; 0x50
 8003b98:	ed93 6b00 	vldr	d6, [r3]
 8003b9c:	4ac5      	ldr	r2, [pc, #788]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003b9e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003ba2:	20d8      	movs	r0, #216	; 0xd8
 8003ba4:	fb00 f303 	mul.w	r3, r0, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	33b8      	adds	r3, #184	; 0xb8
 8003bac:	ed93 5b00 	vldr	d5, [r3]
 8003bb0:	eeb0 4b45 	vmov.f64	d4, d5
 8003bb4:	ed9f 3bb8 	vldr	d3, [pc, #736]	; 8003e98 <Narwhal_Protocol+0x6d0>
 8003bb8:	eeb0 2b46 	vmov.f64	d2, d6
 8003bbc:	eeb0 1b47 	vmov.f64	d1, d7
 8003bc0:	eeb0 0b04 	vmov.f64	d0, #4	; 0x40200000  2.5
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	f7fd fb47 	bl	8001258 <Traj_Coeff_Cal>
					for (int i = 0; i < 4; i++) {
 8003bca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003bd4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	ddc3      	ble.n	8003b64 <Narwhal_Protocol+0x39c>
								Control[i].PositionFeedback, 0,
								Control[i].VelocityFeedback);
					}
					Traj_Flag = 0x0F;
 8003bdc:	4bb6      	ldr	r3, [pc, #728]	; (8003eb8 <Narwhal_Protocol+0x6f0>)
 8003bde:	220f      	movs	r2, #15
 8003be0:	701a      	strb	r2, [r3, #0]
					Chessmove_State = 0;
 8003be2:	4bb6      	ldr	r3, [pc, #728]	; (8003ebc <Narwhal_Protocol+0x6f4>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
					UART5_txBuffer[2] = 0x00;
 8003be8:	4bb5      	ldr	r3, [pc, #724]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	709a      	strb	r2, [r3, #2]
 8003bee:	e002      	b.n	8003bf6 <Narwhal_Protocol+0x42e>
				} else {
					UART5_txBuffer[2] = 0x01;
 8003bf0:	4bb3      	ldr	r3, [pc, #716]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	709a      	strb	r2, [r3, #2]
				}
				UART5_txBuffer[1] = 0xFF;
 8003bf6:	4bb2      	ldr	r3, [pc, #712]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003bf8:	22ff      	movs	r2, #255	; 0xff
 8003bfa:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003bfc:	2003      	movs	r0, #3
 8003bfe:	f7ff fdc3 	bl	8003788 <SentData>
				break;
 8003c02:	f000 be12 	b.w	800482a <Narwhal_Protocol+0x1062>
			case 0xF7:
				/* Set0 BaseEnc */
				Chess_Board_Base_Encoder = 0;
 8003c06:	49af      	ldr	r1, [pc, #700]	; (8003ec4 <Narwhal_Protocol+0x6fc>)
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	e9c1 2300 	strd	r2, r3, [r1]
				UART5_txBuffer[1] = 0xFF;
 8003c14:	4baa      	ldr	r3, [pc, #680]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003c16:	22ff      	movs	r2, #255	; 0xff
 8003c18:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003c1a:	2003      	movs	r0, #3
 8003c1c:	f7ff fdb4 	bl	8003788 <SentData>
				break;
 8003c20:	f000 be03 	b.w	800482a <Narwhal_Protocol+0x1062>
			case 0xFA:
				/* Joint Jog */
				t = 0;
 8003c24:	49a8      	ldr	r1, [pc, #672]	; (8003ec8 <Narwhal_Protocol+0x700>)
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8003c32:	2300      	movs	r3, #0
 8003c34:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8003c38:	e056      	b.n	8003ce8 <Narwhal_Protocol+0x520>
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003c3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c3e:	3301      	adds	r3, #1
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4aa2      	ldr	r2, [pc, #648]	; (8003ecc <Narwhal_Protocol+0x704>)
 8003c44:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003c46:	021b      	lsls	r3, r3, #8
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003c48:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003c4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	3303      	adds	r3, #3
 8003c52:	499e      	ldr	r1, [pc, #632]	; (8003ecc <Narwhal_Protocol+0x704>)
 8003c54:	5ccb      	ldrb	r3, [r1, r3]
 8003c56:	b21b      	sxth	r3, r3
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003c5c:	ee07 3a90 	vmov	s15, r3
 8003c60:	eeb8 6be7 	vcvt.f64.s32	d6, s15
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003c64:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 8003ea0 <Narwhal_Protocol+0x6d8>
 8003c68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003c6c:	ed87 7b4e 	vstr	d7, [r7, #312]	; 0x138
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8003c70:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8003c74:	4613      	mov	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4a8c      	ldr	r2, [pc, #560]	; (8003eb0 <Narwhal_Protocol+0x6e8>)
 8003c7e:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 8003c80:	498c      	ldr	r1, [pc, #560]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003c82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c86:	20d8      	movs	r0, #216	; 0xd8
 8003c88:	fb00 f303 	mul.w	r3, r0, r3
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3350      	adds	r3, #80	; 0x50
 8003c90:	ed93 6b00 	vldr	d6, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8003c94:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8003c98:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c9c:	4985      	ldr	r1, [pc, #532]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003c9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003ca2:	20d8      	movs	r0, #216	; 0xd8
 8003ca4:	fb00 f303 	mul.w	r3, r0, r3
 8003ca8:	440b      	add	r3, r1
 8003caa:	3350      	adds	r3, #80	; 0x50
 8003cac:	ed93 6b00 	vldr	d6, [r3]
 8003cb0:	4980      	ldr	r1, [pc, #512]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003cb2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003cb6:	20d8      	movs	r0, #216	; 0xd8
 8003cb8:	fb00 f303 	mul.w	r3, r0, r3
 8003cbc:	440b      	add	r3, r1
 8003cbe:	33b8      	adds	r3, #184	; 0xb8
 8003cc0:	ed93 5b00 	vldr	d5, [r3]
 8003cc4:	eeb0 4b45 	vmov.f64	d4, d5
 8003cc8:	ed9f 3b73 	vldr	d3, [pc, #460]	; 8003e98 <Narwhal_Protocol+0x6d0>
 8003ccc:	eeb0 2b46 	vmov.f64	d2, d6
 8003cd0:	eeb0 1b47 	vmov.f64	d1, d7
 8003cd4:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f7fd fabd 	bl	8001258 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003cde:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8003ce8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	dda4      	ble.n	8003c3a <Narwhal_Protocol+0x472>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003cf0:	4b71      	ldr	r3, [pc, #452]	; (8003eb8 <Narwhal_Protocol+0x6f0>)
 8003cf2:	220f      	movs	r2, #15
 8003cf4:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003cf6:	4b71      	ldr	r3, [pc, #452]	; (8003ebc <Narwhal_Protocol+0x6f4>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003cfc:	4b70      	ldr	r3, [pc, #448]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003d02:	4b6f      	ldr	r3, [pc, #444]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003d04:	22ff      	movs	r2, #255	; 0xff
 8003d06:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003d08:	2003      	movs	r0, #3
 8003d0a:	f7ff fd3d 	bl	8003788 <SentData>
				break;
 8003d0e:	f000 bd8c 	b.w	800482a <Narwhal_Protocol+0x1062>
			case 0xFB:
				/* Cartesian Jog */
				q_Feed[0] = Control[0].PositionFeedback;
 8003d12:	4b68      	ldr	r3, [pc, #416]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003d14:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003d18:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003d1c:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003d20:	e9c1 2300 	strd	r2, r3, [r1]
				q_Feed[1] = Control[1].PositionFeedback;
 8003d24:	4b63      	ldr	r3, [pc, #396]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003d26:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8003d2a:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003d2e:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003d32:	e9c1 2302 	strd	r2, r3, [r1, #8]
				q_Feed[2] = Control[2].PositionFeedback;
 8003d36:	4b5f      	ldr	r3, [pc, #380]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003d38:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8003d3c:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003d40:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003d44:	e9c1 2304 	strd	r2, r3, [r1, #16]
				q_Feed[3] = Control[3].PositionFeedback;
 8003d48:	4b5a      	ldr	r3, [pc, #360]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003d4a:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8003d4e:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003d52:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003d56:	e9c1 2306 	strd	r2, r3, [r1, #24]
				for (int i = 0; i < 3; i++) {
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003d60:	e026      	b.n	8003db0 <Narwhal_Protocol+0x5e8>
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003d62:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d66:	3301      	adds	r3, #1
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	4a58      	ldr	r2, [pc, #352]	; (8003ecc <Narwhal_Protocol+0x704>)
 8003d6c:	5cd3      	ldrb	r3, [r2, r3]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003d72:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	3303      	adds	r3, #3
 8003d7a:	4954      	ldr	r1, [pc, #336]	; (8003ecc <Narwhal_Protocol+0x704>)
 8003d7c:	5ccb      	ldrb	r3, [r1, r3]
 8003d7e:	b21b      	sxth	r3, r3
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003d8c:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8003ea8 <Narwhal_Protocol+0x6e0>
 8003d90:	ee86 7b05 	vdiv.f64	d7, d6, d5
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003d94:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d9e:	443b      	add	r3, r7
 8003da0:	3ba8      	subs	r3, #168	; 0xa8
 8003da2:	ed83 7b00 	vstr	d7, [r3]
				for (int i = 0; i < 3; i++) {
 8003da6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003daa:	3301      	adds	r3, #1
 8003dac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003db0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	ddd4      	ble.n	8003d62 <Narwhal_Protocol+0x59a>
				}
				IVK(q_Feed, d_Task, dq);
 8003db8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003dbc:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003dc0:	f107 0320 	add.w	r3, r7, #32
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fe fa4b 	bl	8002260 <IVK>
				t = 0;
 8003dca:	493f      	ldr	r1, [pc, #252]	; (8003ec8 <Narwhal_Protocol+0x700>)
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003dde:	e045      	b.n	8003e6c <Narwhal_Protocol+0x6a4>
					double Setpoint = Control[i].PositionFeedback + dq[i];
 8003de0:	4a34      	ldr	r2, [pc, #208]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003de2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003de6:	21d8      	movs	r1, #216	; 0xd8
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	4413      	add	r3, r2
 8003dee:	3350      	adds	r3, #80	; 0x50
 8003df0:	ed93 6b00 	vldr	d6, [r3]
 8003df4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003df8:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003dfc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	ed93 7b00 	vldr	d7, [r3]
 8003e08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e0c:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
					Traj_Coeff_Cal(&Traj[i], 0.5, Setpoint,
 8003e10:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4a24      	ldr	r2, [pc, #144]	; (8003eb0 <Narwhal_Protocol+0x6e8>)
 8003e1e:	441a      	add	r2, r3
 8003e20:	4924      	ldr	r1, [pc, #144]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003e22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e26:	20d8      	movs	r0, #216	; 0xd8
 8003e28:	fb00 f303 	mul.w	r3, r0, r3
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3350      	adds	r3, #80	; 0x50
 8003e30:	ed93 7b00 	vldr	d7, [r3]
 8003e34:	491f      	ldr	r1, [pc, #124]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003e36:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e3a:	20d8      	movs	r0, #216	; 0xd8
 8003e3c:	fb00 f303 	mul.w	r3, r0, r3
 8003e40:	440b      	add	r3, r1
 8003e42:	33b8      	adds	r3, #184	; 0xb8
 8003e44:	ed93 6b00 	vldr	d6, [r3]
 8003e48:	eeb0 4b46 	vmov.f64	d4, d6
 8003e4c:	ed9f 3b12 	vldr	d3, [pc, #72]	; 8003e98 <Narwhal_Protocol+0x6d0>
 8003e50:	eeb0 2b47 	vmov.f64	d2, d7
 8003e54:	ed97 1b50 	vldr	d1, [r7, #320]	; 0x140
 8003e58:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f7fd f9fb 	bl	8001258 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003e62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e66:	3301      	adds	r3, #1
 8003e68:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003e6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	ddb5      	ble.n	8003de0 <Narwhal_Protocol+0x618>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003e74:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <Narwhal_Protocol+0x6f0>)
 8003e76:	220f      	movs	r2, #15
 8003e78:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <Narwhal_Protocol+0x6f4>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003e88:	22ff      	movs	r2, #255	; 0xff
 8003e8a:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003e8c:	2003      	movs	r0, #3
 8003e8e:	f7ff fc7b 	bl	8003788 <SentData>
				break;
 8003e92:	f000 bcca 	b.w	800482a <Narwhal_Protocol+0x1062>
 8003e96:	bf00      	nop
	...
 8003ea4:	408f4000 	.word	0x408f4000
 8003ea8:	00000000 	.word	0x00000000
 8003eac:	40490000 	.word	0x40490000
 8003eb0:	200009d0 	.word	0x200009d0
 8003eb4:	200004a8 	.word	0x200004a8
 8003eb8:	20000bc9 	.word	0x20000bc9
 8003ebc:	20000bcb 	.word	0x20000bcb
 8003ec0:	200000a4 	.word	0x200000a4
 8003ec4:	20000b58 	.word	0x20000b58
 8003ec8:	20000bc0 	.word	0x20000bc0
 8003ecc:	20000094 	.word	0x20000094
			case 0xFD:
				/* Joint Set */
				t = 0;
 8003ed0:	49d5      	ldr	r1, [pc, #852]	; (8004228 <Narwhal_Protocol+0xa60>)
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	e9c1 2300 	strd	r2, r3, [r1]
				double Joint[4];
				double T = 1;
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	4bd2      	ldr	r3, [pc, #840]	; (800422c <Narwhal_Protocol+0xa64>)
 8003ee4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				double Distance = -1;
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	4bd0      	ldr	r3, [pc, #832]	; (8004230 <Narwhal_Protocol+0xa68>)
 8003eee:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
				for (int i = 0; i < 4; i++) {
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8003ef8:	e044      	b.n	8003f84 <Narwhal_Protocol+0x7bc>
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003efa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003efe:	3301      	adds	r3, #1
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4acc      	ldr	r2, [pc, #816]	; (8004234 <Narwhal_Protocol+0xa6c>)
 8003f04:	5cd3      	ldrb	r3, [r2, r3]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003f0a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	3303      	adds	r3, #3
 8003f12:	49c8      	ldr	r1, [pc, #800]	; (8004234 <Narwhal_Protocol+0xa6c>)
 8003f14:	5ccb      	ldrb	r3, [r1, r3]
 8003f16:	b21b      	sxth	r3, r3
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003f1c:	ee07 3a90 	vmov	s15, r3
 8003f20:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003f24:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 80041f0 <Narwhal_Protocol+0xa28>
 8003f28:	ee86 7b05 	vdiv.f64	d7, d6, d5
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003f2c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f30:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003f34:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	ed83 7b00 	vstr	d7, [r3]
					if (Joint[i] > Distance){
 8003f40:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f44:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003f48:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4413      	add	r3, r2
 8003f50:	ed93 7b00 	vldr	d7, [r3]
 8003f54:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 8003f58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f60:	d50b      	bpl.n	8003f7a <Narwhal_Protocol+0x7b2>
						Distance = Joint[i];
 8003f62:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f66:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003f6a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
				for (int i = 0; i < 4; i++) {
 8003f7a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8003f84:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	ddb6      	ble.n	8003efa <Narwhal_Protocol+0x732>
					}
				}
				T += (Distance * 0.8);
 8003f8c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003f90:	ed9f 6b99 	vldr	d6, [pc, #612]	; 80041f8 <Narwhal_Protocol+0xa30>
 8003f94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003f98:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 8003f9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003fa0:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
				for (int i = 0; i < 4; i++) {
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003faa:	e037      	b.n	800401c <Narwhal_Protocol+0x854>
					Traj_Coeff_Cal(&Traj[i], T, Joint[i],
 8003fac:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4a9f      	ldr	r2, [pc, #636]	; (8004238 <Narwhal_Protocol+0xa70>)
 8003fba:	1899      	adds	r1, r3, r2
 8003fbc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003fc0:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003fc4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	ed93 7b00 	vldr	d7, [r3]
 8003fd0:	4a9a      	ldr	r2, [pc, #616]	; (800423c <Narwhal_Protocol+0xa74>)
 8003fd2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003fd6:	20d8      	movs	r0, #216	; 0xd8
 8003fd8:	fb00 f303 	mul.w	r3, r0, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	3350      	adds	r3, #80	; 0x50
 8003fe0:	ed93 6b00 	vldr	d6, [r3]
 8003fe4:	4a95      	ldr	r2, [pc, #596]	; (800423c <Narwhal_Protocol+0xa74>)
 8003fe6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003fea:	20d8      	movs	r0, #216	; 0xd8
 8003fec:	fb00 f303 	mul.w	r3, r0, r3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	33b8      	adds	r3, #184	; 0xb8
 8003ff4:	ed93 5b00 	vldr	d5, [r3]
 8003ff8:	eeb0 4b45 	vmov.f64	d4, d5
 8003ffc:	ed9f 3b80 	vldr	d3, [pc, #512]	; 8004200 <Narwhal_Protocol+0xa38>
 8004000:	eeb0 2b46 	vmov.f64	d2, d6
 8004004:	eeb0 1b47 	vmov.f64	d1, d7
 8004008:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 800400c:	4608      	mov	r0, r1
 800400e:	f7fd f923 	bl	8001258 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8004012:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004016:	3301      	adds	r3, #1
 8004018:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800401c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004020:	2b03      	cmp	r3, #3
 8004022:	ddc3      	ble.n	8003fac <Narwhal_Protocol+0x7e4>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8004024:	4b86      	ldr	r3, [pc, #536]	; (8004240 <Narwhal_Protocol+0xa78>)
 8004026:	220f      	movs	r2, #15
 8004028:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 800402a:	4b86      	ldr	r3, [pc, #536]	; (8004244 <Narwhal_Protocol+0xa7c>)
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x03;
 8004030:	4b85      	ldr	r3, [pc, #532]	; (8004248 <Narwhal_Protocol+0xa80>)
 8004032:	2203      	movs	r2, #3
 8004034:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8004036:	4b84      	ldr	r3, [pc, #528]	; (8004248 <Narwhal_Protocol+0xa80>)
 8004038:	22ff      	movs	r2, #255	; 0xff
 800403a:	705a      	strb	r2, [r3, #1]
				SentData(3);
 800403c:	2003      	movs	r0, #3
 800403e:	f7ff fba3 	bl	8003788 <SentData>
				break;
 8004042:	e3f2      	b.n	800482a <Narwhal_Protocol+0x1062>
			case 0xFE:
				/* Cartesian Set */
				t = 0;
 8004044:	4978      	ldr	r1, [pc, #480]	; (8004228 <Narwhal_Protocol+0xa60>)
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9c1 2300 	strd	r2, r3, [r1]
				double Task[3];
				for (int i = 0; i < 3; i++) {
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004058:	e026      	b.n	80040a8 <Narwhal_Protocol+0x8e0>
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 800405a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800405e:	3301      	adds	r3, #1
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4a74      	ldr	r2, [pc, #464]	; (8004234 <Narwhal_Protocol+0xa6c>)
 8004064:	5cd3      	ldrb	r3, [r2, r3]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 800406a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	3303      	adds	r3, #3
 8004072:	4970      	ldr	r1, [pc, #448]	; (8004234 <Narwhal_Protocol+0xa6c>)
 8004074:	5ccb      	ldrb	r3, [r1, r3]
 8004076:	b21b      	sxth	r3, r3
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8004078:	4313      	orrs	r3, r2
 800407a:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 800407c:	ee07 3a90 	vmov	s15, r3
 8004080:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004084:	ed9f 5b60 	vldr	d5, [pc, #384]	; 8004208 <Narwhal_Protocol+0xa40>
 8004088:	ee86 7b05 	vdiv.f64	d7, d6, d5
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 800408c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004096:	443b      	add	r3, r7
 8004098:	3bf0      	subs	r3, #240	; 0xf0
 800409a:	ed83 7b00 	vstr	d7, [r3]
				for (int i = 0; i < 3; i++) {
 800409e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80040a2:	3301      	adds	r3, #1
 80040a4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80040a8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	ddd4      	ble.n	800405a <Narwhal_Protocol+0x892>
				}
				double q_Feed[4];
				double Pne[3];
				q_Feed[0] = Control[0].PositionFeedback;
 80040b0:	4b62      	ldr	r3, [pc, #392]	; (800423c <Narwhal_Protocol+0xa74>)
 80040b2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80040b6:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80040ba:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 80040be:	e9c1 2300 	strd	r2, r3, [r1]
				q_Feed[1] = Control[1].PositionFeedback;
 80040c2:	4b5e      	ldr	r3, [pc, #376]	; (800423c <Narwhal_Protocol+0xa74>)
 80040c4:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 80040c8:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80040cc:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 80040d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
				q_Feed[2] = Control[2].PositionFeedback;
 80040d4:	4b59      	ldr	r3, [pc, #356]	; (800423c <Narwhal_Protocol+0xa74>)
 80040d6:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 80040da:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80040de:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 80040e2:	e9c1 2304 	strd	r2, r3, [r1, #16]
				q_Feed[3] = Control[3].PositionFeedback;
 80040e6:	4b55      	ldr	r3, [pc, #340]	; (800423c <Narwhal_Protocol+0xa74>)
 80040e8:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 80040ec:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80040f0:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 80040f4:	e9c1 2306 	strd	r2, r3, [r1, #24]

				FPK(q_Feed, 269.0f, Pne);
 80040f8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80040fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004100:	4611      	mov	r1, r2
 8004102:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8004210 <Narwhal_Protocol+0xa48>
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe fb86 	bl	8002818 <FPK>
				double Time2MoveDynamic = 1.3;
 800410c:	a342      	add	r3, pc, #264	; (adr r3, 8004218 <Narwhal_Protocol+0xa50>)
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
				Time2MoveDynamic += (sqrt(
						((Task[0] - Pne[0]) * (Task[0] - Pne[0]))
 8004116:	ed97 6b32 	vldr	d6, [r7, #200]	; 0xc8
 800411a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800411e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004122:	ed93 7b00 	vldr	d7, [r3]
 8004126:	ee36 6b47 	vsub.f64	d6, d6, d7
 800412a:	ed97 5b32 	vldr	d5, [r7, #200]	; 0xc8
 800412e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004136:	ed93 7b00 	vldr	d7, [r3]
 800413a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800413e:	ee26 6b07 	vmul.f64	d6, d6, d7
								+ ((Task[1] - Pne[1]) * (Task[1] - Pne[1]))
 8004142:	ed97 5b34 	vldr	d5, [r7, #208]	; 0xd0
 8004146:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800414a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800414e:	ed93 7b02 	vldr	d7, [r3, #8]
 8004152:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004156:	ed97 4b34 	vldr	d4, [r7, #208]	; 0xd0
 800415a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800415e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004162:	ed93 7b02 	vldr	d7, [r3, #8]
 8004166:	ee34 7b47 	vsub.f64	d7, d4, d7
 800416a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800416e:	ee36 6b07 	vadd.f64	d6, d6, d7
								+ ((Task[2] - Pne[2]) * (Task[2] - Pne[2]))))
 8004172:	ed97 5b36 	vldr	d5, [r7, #216]	; 0xd8
 8004176:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800417a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800417e:	ed93 7b04 	vldr	d7, [r3, #16]
 8004182:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004186:	ed97 4b36 	vldr	d4, [r7, #216]	; 0xd8
 800418a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800418e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004192:	ed93 7b04 	vldr	d7, [r3, #16]
 8004196:	ee34 7b47 	vsub.f64	d7, d4, d7
 800419a:	ee25 7b07 	vmul.f64	d7, d5, d7
				Time2MoveDynamic += (sqrt(
 800419e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041a2:	eeb0 0b47 	vmov.f64	d0, d7
 80041a6:	f013 f8c3 	bl	8017330 <sqrt>
 80041aa:	eeb0 7b40 	vmov.f64	d7, d0
						* 0.0075;
 80041ae:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004220 <Narwhal_Protocol+0xa58>
 80041b2:	ee27 7b06 	vmul.f64	d7, d7, d6
				Time2MoveDynamic += (sqrt(
 80041b6:	ed97 6b54 	vldr	d6, [r7, #336]	; 0x150
 80041ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041be:	ed87 7b54 	vstr	d7, [r7, #336]	; 0x150

				JMoveTaskSpace(Task, Time2MoveDynamic);
 80041c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041c6:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fdb8 	bl	8004d40 <JMoveTaskSpace>
				UART5_txBuffer[2] = 0x00;
 80041d0:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <Narwhal_Protocol+0xa80>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80041d6:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <Narwhal_Protocol+0xa80>)
 80041d8:	22ff      	movs	r2, #255	; 0xff
 80041da:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80041dc:	2003      	movs	r0, #3
 80041de:	f7ff fad3 	bl	8003788 <SentData>
				break;
 80041e2:	e322      	b.n	800482a <Narwhal_Protocol+0x1062>
			case 0xFF:
				/* Chess Move */
//				uint8_t ChessIndex[2];
				for (int i = 0; i < 2; i++) {
 80041e4:	2300      	movs	r3, #0
 80041e6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80041ea:	e03f      	b.n	800426c <Narwhal_Protocol+0xaa4>
 80041ec:	f3af 8000 	nop.w
 80041f0:	00000000 	.word	0x00000000
 80041f4:	408f4000 	.word	0x408f4000
 80041f8:	9999999a 	.word	0x9999999a
 80041fc:	3fe99999 	.word	0x3fe99999
	...
 800420c:	40490000 	.word	0x40490000
 8004210:	00000000 	.word	0x00000000
 8004214:	4070d000 	.word	0x4070d000
 8004218:	cccccccd 	.word	0xcccccccd
 800421c:	3ff4cccc 	.word	0x3ff4cccc
 8004220:	eb851eb8 	.word	0xeb851eb8
 8004224:	3f7eb851 	.word	0x3f7eb851
 8004228:	20000bc0 	.word	0x20000bc0
 800422c:	3ff00000 	.word	0x3ff00000
 8004230:	bff00000 	.word	0xbff00000
 8004234:	20000094 	.word	0x20000094
 8004238:	200009d0 	.word	0x200009d0
 800423c:	200004a8 	.word	0x200004a8
 8004240:	20000bc9 	.word	0x20000bc9
 8004244:	20000bcb 	.word	0x20000bcb
 8004248:	200000a4 	.word	0x200000a4
					ChessIndex[i] = (uint8_t) (UART5_rxBuffer[2 + i]);
 800424c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004250:	3302      	adds	r3, #2
 8004252:	4abf      	ldr	r2, [pc, #764]	; (8004550 <Narwhal_Protocol+0xd88>)
 8004254:	5cd1      	ldrb	r1, [r2, r3]
 8004256:	4abf      	ldr	r2, [pc, #764]	; (8004554 <Narwhal_Protocol+0xd8c>)
 8004258:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800425c:	4413      	add	r3, r2
 800425e:	460a      	mov	r2, r1
 8004260:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 2; i++) {
 8004262:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004266:	3301      	adds	r3, #1
 8004268:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800426c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004270:	2b01      	cmp	r3, #1
 8004272:	ddeb      	ble.n	800424c <Narwhal_Protocol+0xa84>
				}
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 8004274:	4bb6      	ldr	r3, [pc, #728]	; (8004550 <Narwhal_Protocol+0xd88>)
 8004276:	791b      	ldrb	r3, [r3, #4]
 8004278:	021b      	lsls	r3, r3, #8
						| (UART5_rxBuffer[5])) / 100.0f;
 800427a:	4ab5      	ldr	r2, [pc, #724]	; (8004550 <Narwhal_Protocol+0xd88>)
 800427c:	7952      	ldrb	r2, [r2, #5]
 800427e:	4313      	orrs	r3, r2
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						| (UART5_rxBuffer[5])) / 100.0f;
 8004288:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8004558 <Narwhal_Protocol+0xd90>
 800428c:	eec7 7a26 	vdiv.f32	s15, s14, s13
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 8004290:	4bb2      	ldr	r3, [pc, #712]	; (800455c <Narwhal_Protocol+0xd94>)
 8004292:	edc3 7a00 	vstr	s15, [r3]

				if (ChessIndex[0] == 65 || ChessIndex[1] == 65){
 8004296:	4baf      	ldr	r3, [pc, #700]	; (8004554 <Narwhal_Protocol+0xd8c>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b41      	cmp	r3, #65	; 0x41
 800429c:	d003      	beq.n	80042a6 <Narwhal_Protocol+0xade>
 800429e:	4bad      	ldr	r3, [pc, #692]	; (8004554 <Narwhal_Protocol+0xd8c>)
 80042a0:	785b      	ldrb	r3, [r3, #1]
 80042a2:	2b41      	cmp	r3, #65	; 0x41
 80042a4:	d102      	bne.n	80042ac <Narwhal_Protocol+0xae4>
					ChessMoveStates = ChessMove_Finish;
 80042a6:	4bae      	ldr	r3, [pc, #696]	; (8004560 <Narwhal_Protocol+0xd98>)
 80042a8:	220a      	movs	r2, #10
 80042aa:	701a      	strb	r2, [r3, #0]
				}

				Chess_Move_Start_Flag = 1;
 80042ac:	4bad      	ldr	r3, [pc, #692]	; (8004564 <Narwhal_Protocol+0xd9c>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x05;
 80042b2:	4bad      	ldr	r3, [pc, #692]	; (8004568 <Narwhal_Protocol+0xda0>)
 80042b4:	2205      	movs	r2, #5
 80042b6:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80042b8:	4bab      	ldr	r3, [pc, #684]	; (8004568 <Narwhal_Protocol+0xda0>)
 80042ba:	22ff      	movs	r2, #255	; 0xff
 80042bc:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80042be:	2003      	movs	r0, #3
 80042c0:	f7ff fa62 	bl	8003788 <SentData>
				break;
 80042c4:	e2b1      	b.n	800482a <Narwhal_Protocol+0x1062>
				/* 		Data to MCU End	*/

				/* 		Sent Data to Master Start 	*/
			case 0xA0:
				/* System Status */
				UART5_txBuffer[1] = 0xEE;
 80042c6:	4ba8      	ldr	r3, [pc, #672]	; (8004568 <Narwhal_Protocol+0xda0>)
 80042c8:	22ee      	movs	r2, #238	; 0xee
 80042ca:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 80042cc:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80042d0:	0a1b      	lsrs	r3, r3, #8
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	4ba4      	ldr	r3, [pc, #656]	; (8004568 <Narwhal_Protocol+0xda0>)
 80042d8:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Temperature_Protocol & 0xFF);
 80042da:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	4ba1      	ldr	r3, [pc, #644]	; (8004568 <Narwhal_Protocol+0xda0>)
 80042e2:	70da      	strb	r2, [r3, #3]
				SentData(4);
 80042e4:	2004      	movs	r0, #4
 80042e6:	f7ff fa4f 	bl	8003788 <SentData>
				break;
 80042ea:	e29e      	b.n	800482a <Narwhal_Protocol+0x1062>
			case 0xA1:
				/* Station Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 80042ec:	4b9e      	ldr	r3, [pc, #632]	; (8004568 <Narwhal_Protocol+0xda0>)
 80042ee:	22ee      	movs	r2, #238	; 0xee
 80042f0:	705a      	strb	r2, [r3, #1]
				Chess_Board_Base_Encoder2Sent = (int)(Chess_Board_Base_Encoder * 1000.0f);
 80042f2:	4b9e      	ldr	r3, [pc, #632]	; (800456c <Narwhal_Protocol+0xda4>)
 80042f4:	ed93 7b00 	vldr	d7, [r3]
 80042f8:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8004540 <Narwhal_Protocol+0xd78>
 80042fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004300:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004304:	ee17 3a90 	vmov	r3, s15
 8004308:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				UART5_txBuffer[2] = (uint8_t) ((Chess_Board_Base_Encoder2Sent >> 8) & 0xFF);
 800430c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004310:	121b      	asrs	r3, r3, #8
 8004312:	b2da      	uxtb	r2, r3
 8004314:	4b94      	ldr	r3, [pc, #592]	; (8004568 <Narwhal_Protocol+0xda0>)
 8004316:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Chess_Board_Base_Encoder2Sent & 0xFF);
 8004318:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800431c:	b2da      	uxtb	r2, r3
 800431e:	4b92      	ldr	r3, [pc, #584]	; (8004568 <Narwhal_Protocol+0xda0>)
 8004320:	70da      	strb	r2, [r3, #3]
				SentData(4);
 8004322:	2004      	movs	r0, #4
 8004324:	f7ff fa30 	bl	8003788 <SentData>
				break;
 8004328:	e27f      	b.n	800482a <Narwhal_Protocol+0x1062>
			case 0xA2:
				/* Raw Joint Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 800432a:	4b8f      	ldr	r3, [pc, #572]	; (8004568 <Narwhal_Protocol+0xda0>)
 800432c:	22ee      	movs	r2, #238	; 0xee
 800432e:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 8004330:	2300      	movs	r3, #0
 8004332:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004336:	e028      	b.n	800438a <Narwhal_Protocol+0xbc2>
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Encoder[i].Position >> 8)
 8004338:	498d      	ldr	r1, [pc, #564]	; (8004570 <Narwhal_Protocol+0xda8>)
 800433a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	440b      	add	r3, r1
 8004348:	330e      	adds	r3, #14
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	0a1b      	lsrs	r3, r3, #8
 800434e:	b29a      	uxth	r2, r3
 8004350:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004354:	3301      	adds	r3, #1
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	b2d1      	uxtb	r1, r2
 800435a:	4a83      	ldr	r2, [pc, #524]	; (8004568 <Narwhal_Protocol+0xda0>)
 800435c:	54d1      	strb	r1, [r2, r3]
							& 0xFF);
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Encoder[i].Position & 0xFF);
 800435e:	4984      	ldr	r1, [pc, #528]	; (8004570 <Narwhal_Protocol+0xda8>)
 8004360:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	440b      	add	r3, r1
 800436e:	330e      	adds	r3, #14
 8004370:	881a      	ldrh	r2, [r3, #0]
 8004372:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	3303      	adds	r3, #3
 800437a:	b2d1      	uxtb	r1, r2
 800437c:	4a7a      	ldr	r2, [pc, #488]	; (8004568 <Narwhal_Protocol+0xda0>)
 800437e:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8004380:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004384:	3301      	adds	r3, #1
 8004386:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800438a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800438e:	2b03      	cmp	r3, #3
 8004390:	ddd2      	ble.n	8004338 <Narwhal_Protocol+0xb70>
				}
				SentData(12);
 8004392:	200c      	movs	r0, #12
 8004394:	f7ff f9f8 	bl	8003788 <SentData>
				break;
 8004398:	e247      	b.n	800482a <Narwhal_Protocol+0x1062>
			case 0xAA:
				/* Joint Position */
				UART5_txBuffer[1] = 0xEE;
 800439a:	4b73      	ldr	r3, [pc, #460]	; (8004568 <Narwhal_Protocol+0xda0>)
 800439c:	22ee      	movs	r2, #238	; 0xee
 800439e:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 80043a0:	2300      	movs	r3, #0
 80043a2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80043a6:	e02c      	b.n	8004402 <Narwhal_Protocol+0xc3a>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 80043a8:	4a72      	ldr	r2, [pc, #456]	; (8004574 <Narwhal_Protocol+0xdac>)
 80043aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80043ae:	21d8      	movs	r1, #216	; 0xd8
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	3350      	adds	r3, #80	; 0x50
 80043b8:	ed93 7b00 	vldr	d7, [r3]
							* 1000.0f);
 80043bc:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8004540 <Narwhal_Protocol+0xd78>
 80043c0:	ee27 7b06 	vmul.f64	d7, d7, d6
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 80043c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80043c8:	ee17 3a90 	vmov	r3, s15
 80043cc:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80043d0:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 80043d4:	121b      	asrs	r3, r3, #8
 80043d6:	b21a      	sxth	r2, r3
 80043d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80043dc:	3301      	adds	r3, #1
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	b2d1      	uxtb	r1, r2
 80043e2:	4a61      	ldr	r2, [pc, #388]	; (8004568 <Narwhal_Protocol+0xda0>)
 80043e4:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80043e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	3303      	adds	r3, #3
 80043ee:	f8b7 2128 	ldrh.w	r2, [r7, #296]	; 0x128
 80043f2:	b2d1      	uxtb	r1, r2
 80043f4:	4a5c      	ldr	r2, [pc, #368]	; (8004568 <Narwhal_Protocol+0xda0>)
 80043f6:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 80043f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80043fc:	3301      	adds	r3, #1
 80043fe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004402:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004406:	2b03      	cmp	r3, #3
 8004408:	ddce      	ble.n	80043a8 <Narwhal_Protocol+0xbe0>
				}
				UART5_txBuffer[10] = 0;
 800440a:	4b57      	ldr	r3, [pc, #348]	; (8004568 <Narwhal_Protocol+0xda0>)
 800440c:	2200      	movs	r2, #0
 800440e:	729a      	strb	r2, [r3, #10]
				UART5_txBuffer[11] = 0;
 8004410:	4b55      	ldr	r3, [pc, #340]	; (8004568 <Narwhal_Protocol+0xda0>)
 8004412:	2200      	movs	r2, #0
 8004414:	72da      	strb	r2, [r3, #11]
				SentData(12);
 8004416:	200c      	movs	r0, #12
 8004418:	f7ff f9b6 	bl	8003788 <SentData>
				break;
 800441c:	e205      	b.n	800482a <Narwhal_Protocol+0x1062>
			case 0xAB:
				/* Task Space Position */
				UART5_txBuffer[1] = 0xEE;
 800441e:	4b52      	ldr	r3, [pc, #328]	; (8004568 <Narwhal_Protocol+0xda0>)
 8004420:	22ee      	movs	r2, #238	; 0xee
 8004422:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */

				for (int i = 0; i < 4; i++) {
 8004424:	2300      	movs	r3, #0
 8004426:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800442a:	e018      	b.n	800445e <Narwhal_Protocol+0xc96>
					q_in[i] = Control[i].PositionFeedback;
 800442c:	4a51      	ldr	r2, [pc, #324]	; (8004574 <Narwhal_Protocol+0xdac>)
 800442e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004432:	21d8      	movs	r1, #216	; 0xd8
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	4413      	add	r3, r2
 800443a:	3350      	adds	r3, #80	; 0x50
 800443c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004440:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8004444:	f5a1 70ac 	sub.w	r0, r1, #344	; 0x158
 8004448:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 800444c:	00c9      	lsls	r1, r1, #3
 800444e:	4401      	add	r1, r0
 8004450:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8004454:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004458:	3301      	adds	r3, #1
 800445a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800445e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004462:	2b03      	cmp	r3, #3
 8004464:	dde2      	ble.n	800442c <Narwhal_Protocol+0xc64>
				}
				FPK(q_in, 269.0f, task);
 8004466:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800446a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800446e:	4611      	mov	r1, r2
 8004470:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8004548 <Narwhal_Protocol+0xd80>
 8004474:	4618      	mov	r0, r3
 8004476:	f7fe f9cf 	bl	8002818 <FPK>

				for (int i = 0; i < 3; i++) {
 800447a:	2300      	movs	r3, #0
 800447c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004480:	e02b      	b.n	80044da <Narwhal_Protocol+0xd12>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 8004482:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800448c:	443b      	add	r3, r7
 800448e:	3bd8      	subs	r3, #216	; 0xd8
 8004490:	ed93 7b00 	vldr	d7, [r3]
 8004494:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004498:	ee27 7b06 	vmul.f64	d7, d7, d6
 800449c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80044a0:	ee17 3a90 	vmov	r3, s15
 80044a4:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80044a8:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 80044ac:	121b      	asrs	r3, r3, #8
 80044ae:	b21a      	sxth	r2, r3
 80044b0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80044b4:	3301      	adds	r3, #1
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	b2d1      	uxtb	r1, r2
 80044ba:	4a2b      	ldr	r2, [pc, #172]	; (8004568 <Narwhal_Protocol+0xda0>)
 80044bc:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80044be:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	3303      	adds	r3, #3
 80044c6:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 80044ca:	b2d1      	uxtb	r1, r2
 80044cc:	4a26      	ldr	r2, [pc, #152]	; (8004568 <Narwhal_Protocol+0xda0>)
 80044ce:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 80044d0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80044d4:	3301      	adds	r3, #1
 80044d6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80044da:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80044de:	2b02      	cmp	r3, #2
 80044e0:	ddcf      	ble.n	8004482 <Narwhal_Protocol+0xcba>
				}
				SentData(8);
 80044e2:	2008      	movs	r0, #8
 80044e4:	f7ff f950 	bl	8003788 <SentData>
				break;
 80044e8:	e19f      	b.n	800482a <Narwhal_Protocol+0x1062>
			case 0xAF:
				/* UI Feedback */
				UART5_txBuffer[1] = 0xEE;
 80044ea:	4b1f      	ldr	r3, [pc, #124]	; (8004568 <Narwhal_Protocol+0xda0>)
 80044ec:	22ee      	movs	r2, #238	; 0xee
 80044ee:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */
				for (int i = 0; i < 4; i++) {
 80044f0:	2300      	movs	r3, #0
 80044f2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80044f6:	e018      	b.n	800452a <Narwhal_Protocol+0xd62>
					q_in[i] = Control[i].PositionFeedback;
 80044f8:	4a1e      	ldr	r2, [pc, #120]	; (8004574 <Narwhal_Protocol+0xdac>)
 80044fa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80044fe:	21d8      	movs	r1, #216	; 0xd8
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	4413      	add	r3, r2
 8004506:	3350      	adds	r3, #80	; 0x50
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8004510:	f5a1 70ac 	sub.w	r0, r1, #344	; 0x158
 8004514:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004518:	00c9      	lsls	r1, r1, #3
 800451a:	4401      	add	r1, r0
 800451c:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8004520:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8004524:	3301      	adds	r3, #1
 8004526:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800452a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800452e:	2b03      	cmp	r3, #3
 8004530:	dde2      	ble.n	80044f8 <Narwhal_Protocol+0xd30>
				}
				for (int i = 0; i < 4; i++) {
 8004532:	2300      	movs	r3, #0
 8004534:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004538:	e037      	b.n	80045aa <Narwhal_Protocol+0xde2>
 800453a:	bf00      	nop
 800453c:	f3af 8000 	nop.w
 8004540:	00000000 	.word	0x00000000
 8004544:	408f4000 	.word	0x408f4000
 8004548:	00000000 	.word	0x00000000
 800454c:	4070d000 	.word	0x4070d000
 8004550:	20000094 	.word	0x20000094
 8004554:	20000bd8 	.word	0x20000bd8
 8004558:	42c80000 	.word	0x42c80000
 800455c:	20000bdc 	.word	0x20000bdc
 8004560:	20000be1 	.word	0x20000be1
 8004564:	20000be0 	.word	0x20000be0
 8004568:	200000a4 	.word	0x200000a4
 800456c:	20000b58 	.word	0x20000b58
 8004570:	200002c8 	.word	0x200002c8
 8004574:	200004a8 	.word	0x200004a8
					q_in_Set[i] = Control[i].PositionSetpoint;
 8004578:	4ab5      	ldr	r2, [pc, #724]	; (8004850 <Narwhal_Protocol+0x1088>)
 800457a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800457e:	21d8      	movs	r1, #216	; 0xd8
 8004580:	fb01 f303 	mul.w	r3, r1, r3
 8004584:	4413      	add	r3, r2
 8004586:	3348      	adds	r3, #72	; 0x48
 8004588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458c:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8004590:	f5a1 7098 	sub.w	r0, r1, #304	; 0x130
 8004594:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004598:	00c9      	lsls	r1, r1, #3
 800459a:	4401      	add	r1, r0
 800459c:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 80045a0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80045a4:	3301      	adds	r3, #1
 80045a6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80045aa:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	dde2      	ble.n	8004578 <Narwhal_Protocol+0xdb0>
				}
				FPK(q_in, 269.0f, task);
 80045b2:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80045b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80045ba:	4611      	mov	r1, r2
 80045bc:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8004840 <Narwhal_Protocol+0x1078>
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe f929 	bl	8002818 <FPK>
				FPK(q_in_Set, 269.0f, d_Task_Set);
 80045c6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80045ca:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80045ce:	4611      	mov	r1, r2
 80045d0:	ed9f 0b9b 	vldr	d0, [pc, #620]	; 8004840 <Narwhal_Protocol+0x1078>
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe f91f 	bl	8002818 <FPK>

				/* Station Encoder */
				Chess_Board_Base_Encoder2Sent = Chess_Board_Base_Encoder * 1000.0f;
 80045da:	4b9e      	ldr	r3, [pc, #632]	; (8004854 <Narwhal_Protocol+0x108c>)
 80045dc:	ed93 7b00 	vldr	d7, [r3]
 80045e0:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8004848 <Narwhal_Protocol+0x1080>
 80045e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80045e8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80045ec:	ee17 3a90 	vmov	r3, s15
 80045f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				UART5_txBuffer[2] = (uint8_t) ((Chess_Board_Base_Encoder2Sent >> 8) & 0xFF);
 80045f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80045f8:	121b      	asrs	r3, r3, #8
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	4b96      	ldr	r3, [pc, #600]	; (8004858 <Narwhal_Protocol+0x1090>)
 80045fe:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Chess_Board_Base_Encoder2Sent & 0xFF);
 8004600:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004604:	b2da      	uxtb	r2, r3
 8004606:	4b94      	ldr	r3, [pc, #592]	; (8004858 <Narwhal_Protocol+0x1090>)
 8004608:	70da      	strb	r2, [r3, #3]

				/* Temp */
				UART5_txBuffer[4] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 800460a:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800460e:	0a1b      	lsrs	r3, r3, #8
 8004610:	b29b      	uxth	r3, r3
 8004612:	b2da      	uxtb	r2, r3
 8004614:	4b90      	ldr	r3, [pc, #576]	; (8004858 <Narwhal_Protocol+0x1090>)
 8004616:	711a      	strb	r2, [r3, #4]
				UART5_txBuffer[5] = (uint8_t) (Temperature_Protocol & 0xFF);
 8004618:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800461c:	b2da      	uxtb	r2, r3
 800461e:	4b8e      	ldr	r3, [pc, #568]	; (8004858 <Narwhal_Protocol+0x1090>)
 8004620:	715a      	strb	r2, [r3, #5]
				UART5_txBuffer[6] = (uint8_t) ((Temperature_Protocol2 >> 8) & 0xFF);
 8004622:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8004626:	0a1b      	lsrs	r3, r3, #8
 8004628:	b29b      	uxth	r3, r3
 800462a:	b2da      	uxtb	r2, r3
 800462c:	4b8a      	ldr	r3, [pc, #552]	; (8004858 <Narwhal_Protocol+0x1090>)
 800462e:	719a      	strb	r2, [r3, #6]
				UART5_txBuffer[7] = (uint8_t) (Temperature_Protocol2 & 0xFF);
 8004630:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8004634:	b2da      	uxtb	r2, r3
 8004636:	4b88      	ldr	r3, [pc, #544]	; (8004858 <Narwhal_Protocol+0x1090>)
 8004638:	71da      	strb	r2, [r3, #7]

				/* Joint Current */
				for (int i = 0; i < 4; i++) {
 800463a:	2300      	movs	r3, #0
 800463c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004640:	e02c      	b.n	800469c <Narwhal_Protocol+0xed4>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8004642:	4a83      	ldr	r2, [pc, #524]	; (8004850 <Narwhal_Protocol+0x1088>)
 8004644:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004648:	21d8      	movs	r1, #216	; 0xd8
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	4413      	add	r3, r2
 8004650:	3350      	adds	r3, #80	; 0x50
 8004652:	ed93 7b00 	vldr	d7, [r3]
							* 1000.0f);
 8004656:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8004848 <Narwhal_Protocol+0x1080>
 800465a:	ee27 7b06 	vmul.f64	d7, d7, d6
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 800465e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004662:	ee17 3a90 	vmov	r3, s15
 8004666:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
					UART5_txBuffer[8 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 800466a:	f9b7 312c 	ldrsh.w	r3, [r7, #300]	; 0x12c
 800466e:	121b      	asrs	r3, r3, #8
 8004670:	b21a      	sxth	r2, r3
 8004672:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004676:	3304      	adds	r3, #4
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	b2d1      	uxtb	r1, r2
 800467c:	4a76      	ldr	r2, [pc, #472]	; (8004858 <Narwhal_Protocol+0x1090>)
 800467e:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[9 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8004680:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	3309      	adds	r3, #9
 8004688:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 800468c:	b2d1      	uxtb	r1, r2
 800468e:	4a72      	ldr	r2, [pc, #456]	; (8004858 <Narwhal_Protocol+0x1090>)
 8004690:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8004692:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004696:	3301      	adds	r3, #1
 8004698:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800469c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	ddce      	ble.n	8004642 <Narwhal_Protocol+0xe7a>
				}
				UART5_txBuffer[16] = 0;
 80046a4:	4b6c      	ldr	r3, [pc, #432]	; (8004858 <Narwhal_Protocol+0x1090>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	741a      	strb	r2, [r3, #16]
				UART5_txBuffer[17] = 0;
 80046aa:	4b6b      	ldr	r3, [pc, #428]	; (8004858 <Narwhal_Protocol+0x1090>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	745a      	strb	r2, [r3, #17]

				/* Joint Set point*/
				for (int i = 0; i < 4; i++) {
 80046b0:	2300      	movs	r3, #0
 80046b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80046b6:	e029      	b.n	800470c <Narwhal_Protocol+0xf44>
					int16_t Buf = (int16_t) (SetPoint_Position[i] * 1000.0f);
 80046b8:	4a68      	ldr	r2, [pc, #416]	; (800485c <Narwhal_Protocol+0x1094>)
 80046ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	ed93 7b00 	vldr	d7, [r3]
 80046c6:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8004848 <Narwhal_Protocol+0x1080>
 80046ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80046ce:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80046d2:	ee17 3a90 	vmov	r3, s15
 80046d6:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
					UART5_txBuffer[18 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80046da:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 80046de:	121b      	asrs	r3, r3, #8
 80046e0:	b21a      	sxth	r2, r3
 80046e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80046e6:	3309      	adds	r3, #9
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	b2d1      	uxtb	r1, r2
 80046ec:	4a5a      	ldr	r2, [pc, #360]	; (8004858 <Narwhal_Protocol+0x1090>)
 80046ee:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[19 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80046f0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	3313      	adds	r3, #19
 80046f8:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 80046fc:	b2d1      	uxtb	r1, r2
 80046fe:	4a56      	ldr	r2, [pc, #344]	; (8004858 <Narwhal_Protocol+0x1090>)
 8004700:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8004702:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004706:	3301      	adds	r3, #1
 8004708:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800470c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004710:	2b03      	cmp	r3, #3
 8004712:	ddd1      	ble.n	80046b8 <Narwhal_Protocol+0xef0>
				}
				UART5_txBuffer[26] = 0;
 8004714:	4b50      	ldr	r3, [pc, #320]	; (8004858 <Narwhal_Protocol+0x1090>)
 8004716:	2200      	movs	r2, #0
 8004718:	769a      	strb	r2, [r3, #26]
				UART5_txBuffer[27] = 0;
 800471a:	4b4f      	ldr	r3, [pc, #316]	; (8004858 <Narwhal_Protocol+0x1090>)
 800471c:	2200      	movs	r2, #0
 800471e:	76da      	strb	r2, [r3, #27]

				for (int i = 0; i < 3; i++) {
 8004720:	2300      	movs	r3, #0
 8004722:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8004726:	e02b      	b.n	8004780 <Narwhal_Protocol+0xfb8>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 8004728:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004732:	443b      	add	r3, r7
 8004734:	3bd8      	subs	r3, #216	; 0xd8
 8004736:	ed93 7b00 	vldr	d7, [r3]
 800473a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800473e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004742:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004746:	ee17 3a90 	vmov	r3, s15
 800474a:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
					UART5_txBuffer[28 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 800474e:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8004752:	121b      	asrs	r3, r3, #8
 8004754:	b21a      	sxth	r2, r3
 8004756:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800475a:	330e      	adds	r3, #14
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	b2d1      	uxtb	r1, r2
 8004760:	4a3d      	ldr	r2, [pc, #244]	; (8004858 <Narwhal_Protocol+0x1090>)
 8004762:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[29 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8004764:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	331d      	adds	r3, #29
 800476c:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 8004770:	b2d1      	uxtb	r1, r2
 8004772:	4a39      	ldr	r2, [pc, #228]	; (8004858 <Narwhal_Protocol+0x1090>)
 8004774:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 8004776:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800477a:	3301      	adds	r3, #1
 800477c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8004780:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004784:	2b02      	cmp	r3, #2
 8004786:	ddcf      	ble.n	8004728 <Narwhal_Protocol+0xf60>
				}
				UART5_txBuffer[34] = Chess_Move_Start_Flag;
 8004788:	4b35      	ldr	r3, [pc, #212]	; (8004860 <Narwhal_Protocol+0x1098>)
 800478a:	781a      	ldrb	r2, [r3, #0]
 800478c:	4b32      	ldr	r3, [pc, #200]	; (8004858 <Narwhal_Protocol+0x1090>)
 800478e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				for (int i = 0; i < 3; i++) {
 8004792:	2300      	movs	r3, #0
 8004794:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004798:	e02b      	b.n	80047f2 <Narwhal_Protocol+0x102a>
					int16_t Buf = (int16_t) (d_Task_Set[i] * 10.0f);
 800479a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047a4:	443b      	add	r3, r7
 80047a6:	3bc0      	subs	r3, #192	; 0xc0
 80047a8:	ed93 7b00 	vldr	d7, [r3]
 80047ac:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80047b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80047b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80047b8:	ee17 3a90 	vmov	r3, s15
 80047bc:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
					UART5_txBuffer[35 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80047c0:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 80047c4:	121b      	asrs	r3, r3, #8
 80047c6:	b21a      	sxth	r2, r3
 80047c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	3323      	adds	r3, #35	; 0x23
 80047d0:	b2d1      	uxtb	r1, r2
 80047d2:	4a21      	ldr	r2, [pc, #132]	; (8004858 <Narwhal_Protocol+0x1090>)
 80047d4:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[36 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80047d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047da:	3312      	adds	r3, #18
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 80047e2:	b2d1      	uxtb	r1, r2
 80047e4:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <Narwhal_Protocol+0x1090>)
 80047e6:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 80047e8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047ec:	3301      	adds	r3, #1
 80047ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80047f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	ddcf      	ble.n	800479a <Narwhal_Protocol+0xfd2>
				}
				SentData(41);
 80047fa:	2029      	movs	r0, #41	; 0x29
 80047fc:	f7fe ffc4 	bl	8003788 <SentData>
				break;
 8004800:	e013      	b.n	800482a <Narwhal_Protocol+0x1062>
			default:
				UART5_txBuffer[2] = 0xFF;
 8004802:	4b15      	ldr	r3, [pc, #84]	; (8004858 <Narwhal_Protocol+0x1090>)
 8004804:	22ff      	movs	r2, #255	; 0xff
 8004806:	709a      	strb	r2, [r3, #2]
				SentData(3);
 8004808:	2003      	movs	r0, #3
 800480a:	f7fe ffbd 	bl	8003788 <SentData>
 800480e:	e00c      	b.n	800482a <Narwhal_Protocol+0x1062>
				/* 		Sent Data to Master End 	*/
			}
		} else {
			/*		CRC Error		*/
			UART5_txBuffer[1] = 0xCC;
 8004810:	4b11      	ldr	r3, [pc, #68]	; (8004858 <Narwhal_Protocol+0x1090>)
 8004812:	22cc      	movs	r2, #204	; 0xcc
 8004814:	705a      	strb	r2, [r3, #1]
			SentData(3);
 8004816:	2003      	movs	r0, #3
 8004818:	f7fe ffb6 	bl	8003788 <SentData>
 800481c:	e005      	b.n	800482a <Narwhal_Protocol+0x1062>
		}
	} else {
		/*		Header Error	*/
		UART5_txBuffer[1] = 0xAA;
 800481e:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <Narwhal_Protocol+0x1090>)
 8004820:	22aa      	movs	r2, #170	; 0xaa
 8004822:	705a      	strb	r2, [r3, #1]
		SentData(3);
 8004824:	2003      	movs	r0, #3
 8004826:	f7fe ffaf 	bl	8003788 <SentData>
	}
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 800482a:	220e      	movs	r2, #14
 800482c:	490d      	ldr	r1, [pc, #52]	; (8004864 <Narwhal_Protocol+0x109c>)
 800482e:	480e      	ldr	r0, [pc, #56]	; (8004868 <Narwhal_Protocol+0x10a0>)
 8004830:	f00f ff88 	bl	8014744 <HAL_UART_Receive_IT>
}
 8004834:	bf00      	nop
 8004836:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 800483a:	46bd      	mov	sp, r7
 800483c:	bdb0      	pop	{r4, r5, r7, pc}
 800483e:	bf00      	nop
 8004840:	00000000 	.word	0x00000000
 8004844:	4070d000 	.word	0x4070d000
 8004848:	00000000 	.word	0x00000000
 800484c:	408f4000 	.word	0x408f4000
 8004850:	200004a8 	.word	0x200004a8
 8004854:	20000b58 	.word	0x20000b58
 8004858:	200000a4 	.word	0x200000a4
 800485c:	20000b70 	.word	0x20000b70
 8004860:	20000be0 	.word	0x20000be0
 8004864:	20000094 	.word	0x20000094
 8004868:	200011ec 	.word	0x200011ec
 800486c:	00000000 	.word	0x00000000

08004870 <Control_Function>:
	}
	Traj_Flag = 0x0F;
	Chessmove_State = 0;
}

inline void Control_Function() {
 8004870:	b5b0      	push	{r4, r5, r7, lr}
 8004872:	b0b8      	sub	sp, #224	; 0xe0
 8004874:	af00      	add	r7, sp, #0
	/***** Encoder Read *****/
	double J1, J2, J3, J4;
	J1 = EncPulse2Rad_Read(&Encoder[0], 1);
 8004876:	2101      	movs	r1, #1
 8004878:	48c7      	ldr	r0, [pc, #796]	; (8004b98 <Control_Function+0x328>)
 800487a:	f7fb fecb 	bl	8000614 <EncPulse2Rad_Read>
 800487e:	ed87 0b32 	vstr	d0, [r7, #200]	; 0xc8
	J2 = EncPulse2Rad_Read(&Encoder[1], 0);
 8004882:	2100      	movs	r1, #0
 8004884:	48c5      	ldr	r0, [pc, #788]	; (8004b9c <Control_Function+0x32c>)
 8004886:	f7fb fec5 	bl	8000614 <EncPulse2Rad_Read>
 800488a:	ed87 0b30 	vstr	d0, [r7, #192]	; 0xc0
	J3 = EncPulse2Rad_Read(&Encoder[2], 0);
 800488e:	2100      	movs	r1, #0
 8004890:	48c3      	ldr	r0, [pc, #780]	; (8004ba0 <Control_Function+0x330>)
 8004892:	f7fb febf 	bl	8000614 <EncPulse2Rad_Read>
 8004896:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
	J4 = EncPulse2Rad_Read(&Encoder[3], 0);
 800489a:	2100      	movs	r1, #0
 800489c:	48c1      	ldr	r0, [pc, #772]	; (8004ba4 <Control_Function+0x334>)
 800489e:	f7fb feb9 	bl	8000614 <EncPulse2Rad_Read>
 80048a2:	ed87 0b2c 	vstr	d0, [r7, #176]	; 0xb0

	BaseENC[0] = TIM2->CNT;
 80048a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	4bbe      	ldr	r3, [pc, #760]	; (8004ba8 <Control_Function+0x338>)
 80048b0:	801a      	strh	r2, [r3, #0]
	int ds = BaseENC[0] - BaseENC[1]; //find delta s
 80048b2:	4bbd      	ldr	r3, [pc, #756]	; (8004ba8 <Control_Function+0x338>)
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	4bbb      	ldr	r3, [pc, #748]	; (8004ba8 <Control_Function+0x338>)
 80048ba:	885b      	ldrh	r3, [r3, #2]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	BaseENC[1] = BaseENC[0];
 80048c2:	4bb9      	ldr	r3, [pc, #740]	; (8004ba8 <Control_Function+0x338>)
 80048c4:	881a      	ldrh	r2, [r3, #0]
 80048c6:	4bb8      	ldr	r3, [pc, #736]	; (8004ba8 <Control_Function+0x338>)
 80048c8:	805a      	strh	r2, [r3, #2]
	//Unwrapping position
	if (ds >= 1000) {
 80048ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048d2:	db06      	blt.n	80048e2 <Control_Function+0x72>
		ds -= 1999;
 80048d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048d8:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 80048dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048e0:	e00a      	b.n	80048f8 <Control_Function+0x88>
	} else if (ds <= -1000) {
 80048e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80048ea:	dc05      	bgt.n	80048f8 <Control_Function+0x88>
		ds += 1999;
 80048ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048f0:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 80048f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	}
	Chess_Board_Base_Encoder += (ds/2000.0f)*2.0f*PI;
 80048f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004904:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8004bac <Control_Function+0x33c>
 8004908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800490c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004910:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8004bb0 <Control_Function+0x340>
 8004914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004918:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800491c:	4ba5      	ldr	r3, [pc, #660]	; (8004bb4 <Control_Function+0x344>)
 800491e:	ed93 7b00 	vldr	d7, [r3]
 8004922:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004926:	4ba3      	ldr	r3, [pc, #652]	; (8004bb4 <Control_Function+0x344>)
 8004928:	ed83 7b00 	vstr	d7, [r3]

	/***** Joint Space SetPoint Gen *****/
	if (Chessmove_State == 0) {
 800492c:	4ba2      	ldr	r3, [pc, #648]	; (8004bb8 <Control_Function+0x348>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	f040 808d 	bne.w	8004a50 <Control_Function+0x1e0>
		if (Traj_Flag & 0x0F) {
 8004936:	4ba1      	ldr	r3, [pc, #644]	; (8004bbc <Control_Function+0x34c>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 8173 	beq.w	8004c2a <Control_Function+0x3ba>
			double traj_t_set[5];
			traj_t_set[0] = t;
 8004944:	4b9e      	ldr	r3, [pc, #632]	; (8004bc0 <Control_Function+0x350>)
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			traj_t_set[1] = t * t;
 800494e:	4b9c      	ldr	r3, [pc, #624]	; (8004bc0 <Control_Function+0x350>)
 8004950:	ed93 6b00 	vldr	d6, [r3]
 8004954:	4b9a      	ldr	r3, [pc, #616]	; (8004bc0 <Control_Function+0x350>)
 8004956:	ed93 7b00 	vldr	d7, [r3]
 800495a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800495e:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
			traj_t_set[2] = traj_t_set[1] * t;
 8004962:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8004966:	4b96      	ldr	r3, [pc, #600]	; (8004bc0 <Control_Function+0x350>)
 8004968:	ed93 7b00 	vldr	d7, [r3]
 800496c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004970:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
			traj_t_set[3] = traj_t_set[2] * t;
 8004974:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8004978:	4b91      	ldr	r3, [pc, #580]	; (8004bc0 <Control_Function+0x350>)
 800497a:	ed93 7b00 	vldr	d7, [r3]
 800497e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004982:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			traj_t_set[4] = traj_t_set[3] * t;
 8004986:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800498a:	4b8d      	ldr	r3, [pc, #564]	; (8004bc0 <Control_Function+0x350>)
 800498c:	ed93 7b00 	vldr	d7, [r3]
 8004990:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004994:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int i = 0; i < 4; i++) {
 8004998:	2300      	movs	r3, #0
 800499a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800499e:	e048      	b.n	8004a32 <Control_Function+0x1c2>
				if (Traj_Flag & (0x01 << i)) {
 80049a0:	4b86      	ldr	r3, [pc, #536]	; (8004bbc <Control_Function+0x34c>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049aa:	fa42 f303 	asr.w	r3, r2, r3
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d038      	beq.n	8004a28 <Control_Function+0x1b8>
					TrajFollow(&Traj[i], traj_t_set, &SetPoint_Position[i],
 80049b6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80049ba:	4613      	mov	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4a80      	ldr	r2, [pc, #512]	; (8004bc4 <Control_Function+0x354>)
 80049c4:	1898      	adds	r0, r3, r2
 80049c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4a7e      	ldr	r2, [pc, #504]	; (8004bc8 <Control_Function+0x358>)
 80049ce:	441a      	add	r2, r3
 80049d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	497d      	ldr	r1, [pc, #500]	; (8004bcc <Control_Function+0x35c>)
 80049d8:	440b      	add	r3, r1
 80049da:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80049de:	f7fc fce9 	bl	80013b4 <TrajFollow>
							&SetPoint_Velocity[i]);
					if (t >= Traj[i].T) {
 80049e2:	4978      	ldr	r1, [pc, #480]	; (8004bc4 <Control_Function+0x354>)
 80049e4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	440b      	add	r3, r1
 80049f2:	3330      	adds	r3, #48	; 0x30
 80049f4:	ed93 6b00 	vldr	d6, [r3]
 80049f8:	4b71      	ldr	r3, [pc, #452]	; (8004bc0 <Control_Function+0x350>)
 80049fa:	ed93 7b00 	vldr	d7, [r3]
 80049fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a06:	d80f      	bhi.n	8004a28 <Control_Function+0x1b8>
						Traj_Flag &= ((0x01 << i) ^ 0xFF);
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	b25b      	sxtb	r3, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	b25a      	sxtb	r2, r3
 8004a18:	4b68      	ldr	r3, [pc, #416]	; (8004bbc <Control_Function+0x34c>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	b25b      	sxtb	r3, r3
 8004a1e:	4013      	ands	r3, r2
 8004a20:	b25b      	sxtb	r3, r3
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <Control_Function+0x34c>)
 8004a26:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8004a28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	ddb2      	ble.n	80049a0 <Control_Function+0x130>
					}
				}
			}
			t += delta_t;
 8004a3a:	4b61      	ldr	r3, [pc, #388]	; (8004bc0 <Control_Function+0x350>)
 8004a3c:	ed93 7b00 	vldr	d7, [r3]
 8004a40:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8004b90 <Control_Function+0x320>
 8004a44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a48:	4b5d      	ldr	r3, [pc, #372]	; (8004bc0 <Control_Function+0x350>)
 8004a4a:	ed83 7b00 	vstr	d7, [r3]
 8004a4e:	e0ec      	b.n	8004c2a <Control_Function+0x3ba>
		}
	}

	else if (Chessmove_State == 1) {
 8004a50:	4b59      	ldr	r3, [pc, #356]	; (8004bb8 <Control_Function+0x348>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	f040 80e8 	bne.w	8004c2a <Control_Function+0x3ba>
		if (Traj_Flag & 0x0F) {
 8004a5a:	4b58      	ldr	r3, [pc, #352]	; (8004bbc <Control_Function+0x34c>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 80e1 	beq.w	8004c2a <Control_Function+0x3ba>
			double gamma[3] = { 1, 1, -1 };
 8004a68:	4b59      	ldr	r3, [pc, #356]	; (8004bd0 <Control_Function+0x360>)
 8004a6a:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8004a6e:	461d      	mov	r5, r3
 8004a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004a78:	e884 0003 	stmia.w	r4, {r0, r1}
			//*********** Chi Output ************//
			double SetPointPosition[4];
			double SetPointVelocity[4];

			double traj_t_set[5];
			traj_t_set[0] = t;
 8004a7c:	4b50      	ldr	r3, [pc, #320]	; (8004bc0 <Control_Function+0x350>)
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			traj_t_set[1] = t * t;
 8004a86:	4b4e      	ldr	r3, [pc, #312]	; (8004bc0 <Control_Function+0x350>)
 8004a88:	ed93 6b00 	vldr	d6, [r3]
 8004a8c:	4b4c      	ldr	r3, [pc, #304]	; (8004bc0 <Control_Function+0x350>)
 8004a8e:	ed93 7b00 	vldr	d7, [r3]
 8004a92:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a96:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
			traj_t_set[2] = traj_t_set[1] * t;
 8004a9a:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8004a9e:	4b48      	ldr	r3, [pc, #288]	; (8004bc0 <Control_Function+0x350>)
 8004aa0:	ed93 7b00 	vldr	d7, [r3]
 8004aa4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004aa8:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
			traj_t_set[3] = traj_t_set[2] * t;
 8004aac:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8004ab0:	4b43      	ldr	r3, [pc, #268]	; (8004bc0 <Control_Function+0x350>)
 8004ab2:	ed93 7b00 	vldr	d7, [r3]
 8004ab6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004aba:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			traj_t_set[4] = traj_t_set[3] * t;
 8004abe:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <Control_Function+0x350>)
 8004ac4:	ed93 7b00 	vldr	d7, [r3]
 8004ac8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004acc:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int i = 4; i < 7; i++) {
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004ad6:	e040      	b.n	8004b5a <Control_Function+0x2ea>
				TrajFollow(&Traj[i], traj_t_set, &Chi_t[i], &ChiDot_t[i]);
 8004ad8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4a37      	ldr	r2, [pc, #220]	; (8004bc4 <Control_Function+0x354>)
 8004ae6:	1898      	adds	r0, r3, r2
 8004ae8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004aec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	18d4      	adds	r4, r2, r3
 8004af4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004af8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	4413      	add	r3, r2
 8004b00:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004b04:	4622      	mov	r2, r4
 8004b06:	f7fc fc55 	bl	80013b4 <TrajFollow>
				if (t >= Traj[i].T) {
 8004b0a:	492e      	ldr	r1, [pc, #184]	; (8004bc4 <Control_Function+0x354>)
 8004b0c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004b10:	4613      	mov	r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	440b      	add	r3, r1
 8004b1a:	3330      	adds	r3, #48	; 0x30
 8004b1c:	ed93 6b00 	vldr	d6, [r3]
 8004b20:	4b27      	ldr	r3, [pc, #156]	; (8004bc0 <Control_Function+0x350>)
 8004b22:	ed93 7b00 	vldr	d7, [r3]
 8004b26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2e:	d80f      	bhi.n	8004b50 <Control_Function+0x2e0>
					Traj_Flag &= ((0x01 << i) ^ 0xFF);
 8004b30:	2201      	movs	r2, #1
 8004b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	b25b      	sxtb	r3, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	b25a      	sxtb	r2, r3
 8004b40:	4b1e      	ldr	r3, [pc, #120]	; (8004bbc <Control_Function+0x34c>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	b25b      	sxtb	r3, r3
 8004b46:	4013      	ands	r3, r2
 8004b48:	b25b      	sxtb	r3, r3
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	4b1b      	ldr	r3, [pc, #108]	; (8004bbc <Control_Function+0x34c>)
 8004b4e:	701a      	strb	r2, [r3, #0]
			for (int i = 4; i < 7; i++) {
 8004b50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b54:	3301      	adds	r3, #1
 8004b56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b5e:	2b06      	cmp	r3, #6
 8004b60:	ddba      	ble.n	8004ad8 <Control_Function+0x268>
				}
			}
			IPK(gamma, Chi_t, SetPointPosition);
 8004b62:	463a      	mov	r2, r7
 8004b64:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8004b68:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fd fa4b 	bl	8002008 <IPK>
			IVK(SetPointPosition, ChiDot_t, SetPointVelocity);
 8004b72:	f107 0220 	add.w	r2, r7, #32
 8004b76:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004b7a:	463b      	mov	r3, r7
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fd fb6f 	bl	8002260 <IVK>
			for (int i = 0; i < 4; i++) {
 8004b82:	2300      	movs	r3, #0
 8004b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b88:	e041      	b.n	8004c0e <Control_Function+0x39e>
 8004b8a:	bf00      	nop
 8004b8c:	f3af 8000 	nop.w
 8004b90:	d2f1a9fc 	.word	0xd2f1a9fc
 8004b94:	3f50624d 	.word	0x3f50624d
 8004b98:	200002c8 	.word	0x200002c8
 8004b9c:	200002f0 	.word	0x200002f0
 8004ba0:	20000318 	.word	0x20000318
 8004ba4:	20000340 	.word	0x20000340
 8004ba8:	20000b60 	.word	0x20000b60
 8004bac:	44fa0000 	.word	0x44fa0000
 8004bb0:	40490fdb 	.word	0x40490fdb
 8004bb4:	20000b58 	.word	0x20000b58
 8004bb8:	20000bcb 	.word	0x20000bcb
 8004bbc:	20000bc9 	.word	0x20000bc9
 8004bc0:	20000bc0 	.word	0x20000bc0
 8004bc4:	200009d0 	.word	0x200009d0
 8004bc8:	20000b70 	.word	0x20000b70
 8004bcc:	20000b98 	.word	0x20000b98
 8004bd0:	08018288 	.word	0x08018288
				TrajFollow(&Traj[i], traj_t_set, &SetPointPosition[i],
 8004bd4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bd8:	4613      	mov	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4a47      	ldr	r2, [pc, #284]	; (8004d00 <Control_Function+0x490>)
 8004be2:	1898      	adds	r0, r3, r2
 8004be4:	463a      	mov	r2, r7
 8004be6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	18d4      	adds	r4, r2, r3
 8004bee:	f107 0220 	add.w	r2, r7, #32
 8004bf2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004bfe:	4622      	mov	r2, r4
 8004c00:	f7fc fbd8 	bl	80013b4 <TrajFollow>
			for (int i = 0; i < 4; i++) {
 8004c04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c08:	3301      	adds	r3, #1
 8004c0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	ddde      	ble.n	8004bd4 <Control_Function+0x364>
						&SetPointVelocity[i]);
			}
			t += delta_t;
 8004c16:	4b3b      	ldr	r3, [pc, #236]	; (8004d04 <Control_Function+0x494>)
 8004c18:	ed93 7b00 	vldr	d7, [r3]
 8004c1c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8004cf8 <Control_Function+0x488>
 8004c20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c24:	4b37      	ldr	r3, [pc, #220]	; (8004d04 <Control_Function+0x494>)
 8004c26:	ed83 7b00 	vstr	d7, [r3]
		}
	}

	CascadeControl(&Control[0], &Kalman[0], J1, SetPoint_Position[0], SetPoint_Velocity[0]);
 8004c2a:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <Control_Function+0x498>)
 8004c2c:	ed93 7b00 	vldr	d7, [r3]
 8004c30:	4b36      	ldr	r3, [pc, #216]	; (8004d0c <Control_Function+0x49c>)
 8004c32:	ed93 6b00 	vldr	d6, [r3]
 8004c36:	eeb0 2b46 	vmov.f64	d2, d6
 8004c3a:	eeb0 1b47 	vmov.f64	d1, d7
 8004c3e:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 8004c42:	4933      	ldr	r1, [pc, #204]	; (8004d10 <Control_Function+0x4a0>)
 8004c44:	4833      	ldr	r0, [pc, #204]	; (8004d14 <Control_Function+0x4a4>)
 8004c46:	f7fc ff0a 	bl	8001a5e <CascadeControl>
	CascadeControl(&Control[1], &Kalman[1], J2, SetPoint_Position[1], SetPoint_Velocity[1]);
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	; (8004d08 <Control_Function+0x498>)
 8004c4c:	ed93 7b02 	vldr	d7, [r3, #8]
 8004c50:	4b2e      	ldr	r3, [pc, #184]	; (8004d0c <Control_Function+0x49c>)
 8004c52:	ed93 6b02 	vldr	d6, [r3, #8]
 8004c56:	eeb0 2b46 	vmov.f64	d2, d6
 8004c5a:	eeb0 1b47 	vmov.f64	d1, d7
 8004c5e:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8004c62:	492d      	ldr	r1, [pc, #180]	; (8004d18 <Control_Function+0x4a8>)
 8004c64:	482d      	ldr	r0, [pc, #180]	; (8004d1c <Control_Function+0x4ac>)
 8004c66:	f7fc fefa 	bl	8001a5e <CascadeControl>
	CascadeControl(&Control[2], &Kalman[2], J3, SetPoint_Position[2], SetPoint_Velocity[2]);
 8004c6a:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <Control_Function+0x498>)
 8004c6c:	ed93 7b04 	vldr	d7, [r3, #16]
 8004c70:	4b26      	ldr	r3, [pc, #152]	; (8004d0c <Control_Function+0x49c>)
 8004c72:	ed93 6b04 	vldr	d6, [r3, #16]
 8004c76:	eeb0 2b46 	vmov.f64	d2, d6
 8004c7a:	eeb0 1b47 	vmov.f64	d1, d7
 8004c7e:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 8004c82:	4927      	ldr	r1, [pc, #156]	; (8004d20 <Control_Function+0x4b0>)
 8004c84:	4827      	ldr	r0, [pc, #156]	; (8004d24 <Control_Function+0x4b4>)
 8004c86:	f7fc feea 	bl	8001a5e <CascadeControl>
	CascadeControl(&Control[3], &Kalman[3], J4, SetPoint_Position[3], SetPoint_Velocity[3]);
 8004c8a:	4b1f      	ldr	r3, [pc, #124]	; (8004d08 <Control_Function+0x498>)
 8004c8c:	ed93 7b06 	vldr	d7, [r3, #24]
 8004c90:	4b1e      	ldr	r3, [pc, #120]	; (8004d0c <Control_Function+0x49c>)
 8004c92:	ed93 6b06 	vldr	d6, [r3, #24]
 8004c96:	eeb0 2b46 	vmov.f64	d2, d6
 8004c9a:	eeb0 1b47 	vmov.f64	d1, d7
 8004c9e:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 8004ca2:	4921      	ldr	r1, [pc, #132]	; (8004d28 <Control_Function+0x4b8>)
 8004ca4:	4821      	ldr	r0, [pc, #132]	; (8004d2c <Control_Function+0x4bc>)
 8004ca6:	f7fc feda 	bl	8001a5e <CascadeControl>

	Step_Driver(&Stepper[0], Control[0].Output);
 8004caa:	4b1a      	ldr	r3, [pc, #104]	; (8004d14 <Control_Function+0x4a4>)
 8004cac:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8004cb0:	eeb0 0b47 	vmov.f64	d0, d7
 8004cb4:	481e      	ldr	r0, [pc, #120]	; (8004d30 <Control_Function+0x4c0>)
 8004cb6:	f7fc f9a7 	bl	8001008 <Step_Driver>
	Step_Driver(&Stepper[1], Control[1].Output);
 8004cba:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <Control_Function+0x4a4>)
 8004cbc:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8004cc0:	eeb0 0b47 	vmov.f64	d0, d7
 8004cc4:	481b      	ldr	r0, [pc, #108]	; (8004d34 <Control_Function+0x4c4>)
 8004cc6:	f7fc f99f 	bl	8001008 <Step_Driver>
	Step_Driver(&Stepper[2], Control[2].Output);
 8004cca:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <Control_Function+0x4a4>)
 8004ccc:	ed93 7ba0 	vldr	d7, [r3, #640]	; 0x280
 8004cd0:	eeb0 0b47 	vmov.f64	d0, d7
 8004cd4:	4818      	ldr	r0, [pc, #96]	; (8004d38 <Control_Function+0x4c8>)
 8004cd6:	f7fc f997 	bl	8001008 <Step_Driver>
	Step_Driver(&Stepper[3], Control[3].Output);
 8004cda:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <Control_Function+0x4a4>)
 8004cdc:	ed93 7bd6 	vldr	d7, [r3, #856]	; 0x358
 8004ce0:	eeb0 0b47 	vmov.f64	d0, d7
 8004ce4:	4815      	ldr	r0, [pc, #84]	; (8004d3c <Control_Function+0x4cc>)
 8004ce6:	f7fc f98f 	bl	8001008 <Step_Driver>
}
 8004cea:	bf00      	nop
 8004cec:	37e0      	adds	r7, #224	; 0xe0
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	f3af 8000 	nop.w
 8004cf8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004cfc:	3f50624d 	.word	0x3f50624d
 8004d00:	200009d0 	.word	0x200009d0
 8004d04:	20000bc0 	.word	0x20000bc0
 8004d08:	20000b70 	.word	0x20000b70
 8004d0c:	20000b98 	.word	0x20000b98
 8004d10:	20000368 	.word	0x20000368
 8004d14:	200004a8 	.word	0x200004a8
 8004d18:	200003a8 	.word	0x200003a8
 8004d1c:	20000580 	.word	0x20000580
 8004d20:	200003e8 	.word	0x200003e8
 8004d24:	20000658 	.word	0x20000658
 8004d28:	20000428 	.word	0x20000428
 8004d2c:	20000730 	.word	0x20000730
 8004d30:	20000808 	.word	0x20000808
 8004d34:	2000081c 	.word	0x2000081c
 8004d38:	20000830 	.word	0x20000830
 8004d3c:	20000844 	.word	0x20000844

08004d40 <JMoveTaskSpace>:

inline void JMoveTaskSpace(double Task2Go[3], double Time2Move){
 8004d40:	b5b0      	push	{r4, r5, r7, lr}
 8004d42:	b094      	sub	sp, #80	; 0x50
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	ed87 0b00 	vstr	d0, [r7]
	double gamma[3] = { 1, 1, -1 };
 8004d4c:	4b2e      	ldr	r3, [pc, #184]	; (8004e08 <JMoveTaskSpace+0xc8>)
 8004d4e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004d52:	461d      	mov	r5, r3
 8004d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004d5c:	e884 0003 	stmia.w	r4, {r0, r1}
	double q_inv[4];
	IPK(gamma, Task2Go, q_inv);
 8004d60:	f107 0210 	add.w	r2, r7, #16
 8004d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d68:	68f9      	ldr	r1, [r7, #12]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fd f94c 	bl	8002008 <IPK>
	t = 0;
 8004d70:	4926      	ldr	r1, [pc, #152]	; (8004e0c <JMoveTaskSpace+0xcc>)
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 4; i++) {
 8004d7e:	2300      	movs	r3, #0
 8004d80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d82:	e02f      	b.n	8004de4 <JMoveTaskSpace+0xa4>
		Traj_Coeff_Cal(&Traj[i], Time2Move, q_inv[i], Control[i].PositionFeedback, 0,
 8004d84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d86:	4613      	mov	r3, r2
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4a20      	ldr	r2, [pc, #128]	; (8004e10 <JMoveTaskSpace+0xd0>)
 8004d90:	441a      	add	r2, r3
 8004d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	3350      	adds	r3, #80	; 0x50
 8004d98:	443b      	add	r3, r7
 8004d9a:	3b40      	subs	r3, #64	; 0x40
 8004d9c:	ed93 7b00 	vldr	d7, [r3]
 8004da0:	491c      	ldr	r1, [pc, #112]	; (8004e14 <JMoveTaskSpace+0xd4>)
 8004da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da4:	20d8      	movs	r0, #216	; 0xd8
 8004da6:	fb00 f303 	mul.w	r3, r0, r3
 8004daa:	440b      	add	r3, r1
 8004dac:	3350      	adds	r3, #80	; 0x50
 8004dae:	ed93 6b00 	vldr	d6, [r3]
 8004db2:	4918      	ldr	r1, [pc, #96]	; (8004e14 <JMoveTaskSpace+0xd4>)
 8004db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db6:	20d8      	movs	r0, #216	; 0xd8
 8004db8:	fb00 f303 	mul.w	r3, r0, r3
 8004dbc:	440b      	add	r3, r1
 8004dbe:	33b8      	adds	r3, #184	; 0xb8
 8004dc0:	ed93 5b00 	vldr	d5, [r3]
 8004dc4:	eeb0 4b45 	vmov.f64	d4, d5
 8004dc8:	ed9f 3b0d 	vldr	d3, [pc, #52]	; 8004e00 <JMoveTaskSpace+0xc0>
 8004dcc:	eeb0 2b46 	vmov.f64	d2, d6
 8004dd0:	eeb0 1b47 	vmov.f64	d1, d7
 8004dd4:	ed97 0b00 	vldr	d0, [r7]
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f7fc fa3d 	bl	8001258 <Traj_Coeff_Cal>
	for (int i = 0; i < 4; i++) {
 8004dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de0:	3301      	adds	r3, #1
 8004de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	ddcc      	ble.n	8004d84 <JMoveTaskSpace+0x44>
				Control[i].VelocityFeedback);
	}
	Traj_Flag = 0x0F;
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <JMoveTaskSpace+0xd8>)
 8004dec:	220f      	movs	r2, #15
 8004dee:	701a      	strb	r2, [r3, #0]
	Chessmove_State = 0;
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <JMoveTaskSpace+0xdc>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
}
 8004df6:	bf00      	nop
 8004df8:	3750      	adds	r7, #80	; 0x50
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8004dfe:	bf00      	nop
	...
 8004e08:	08018288 	.word	0x08018288
 8004e0c:	20000bc0 	.word	0x20000bc0
 8004e10:	200009d0 	.word	0x200009d0
 8004e14:	200004a8 	.word	0x200004a8
 8004e18:	20000bc9 	.word	0x20000bc9
 8004e1c:	20000bcb 	.word	0x20000bcb

08004e20 <ChessNotMovePathWay>:
	}
	Traj_Flag = 0x0F;
	Chessmove_State = 1; // Change to TaskSpace Traj
}

void ChessNotMovePathWay(uint8_t Index2Move, double Z_Offset, uint8_t IsJMove, uint8_t IsRemove) {
 8004e20:	b5b0      	push	{r4, r5, r7, lr}
 8004e22:	b0a6      	sub	sp, #152	; 0x98
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	ed87 0b00 	vstr	d0, [r7]
 8004e2c:	73fb      	strb	r3, [r7, #15]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	73bb      	strb	r3, [r7, #14]
 8004e32:	4613      	mov	r3, r2
 8004e34:	737b      	strb	r3, [r7, #13]
	/***** Encoder Read *****/
	double PositionXY[2];
	double SafePose[3] = {120, -370, 30};
 8004e36:	4bb0      	ldr	r3, [pc, #704]	; (80050f8 <ChessNotMovePathWay+0x2d8>)
 8004e38:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8004e3c:	461d      	mov	r5, r3
 8004e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004e46:	e884 0003 	stmia.w	r4, {r0, r1}
	static uint8_t PositionX = 0;

	/***** Base Encoder Read *****/
//	BaseEnc = BaseENCRead();   //?????????????????????????????????????????????????????????
	ChessPose(Index2Move, Chess_Board_Base_Encoder, PositionXY);
 8004e4a:	4bac      	ldr	r3, [pc, #688]	; (80050fc <ChessNotMovePathWay+0x2dc>)
 8004e4c:	ed93 7b00 	vldr	d7, [r3]
 8004e50:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	4611      	mov	r1, r2
 8004e58:	eeb0 0b47 	vmov.f64	d0, d7
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fd ff07 	bl	8002c70 <ChessPose>
	double q_Feed[4];
	double Pne[3];
	q_Feed[0] = Control[0].PositionFeedback;
 8004e62:	4ba7      	ldr	r3, [pc, #668]	; (8005100 <ChessNotMovePathWay+0x2e0>)
 8004e64:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004e68:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	q_Feed[1] = Control[1].PositionFeedback;
 8004e6c:	4ba4      	ldr	r3, [pc, #656]	; (8005100 <ChessNotMovePathWay+0x2e0>)
 8004e6e:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8004e72:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	q_Feed[2] = Control[2].PositionFeedback;
 8004e76:	4ba2      	ldr	r3, [pc, #648]	; (8005100 <ChessNotMovePathWay+0x2e0>)
 8004e78:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8004e7c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	q_Feed[3] = Control[3].PositionFeedback;
 8004e80:	4b9f      	ldr	r3, [pc, #636]	; (8005100 <ChessNotMovePathWay+0x2e0>)
 8004e82:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8004e86:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	FPK(q_Feed, 269.0f, Pne);
 8004e8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e92:	4611      	mov	r1, r2
 8004e94:	ed9f 0b8a 	vldr	d0, [pc, #552]	; 80050c0 <ChessNotMovePathWay+0x2a0>
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fd fcbd 	bl	8002818 <FPK>
	double Time2MoveDynamic = 1.2;
 8004e9e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004ea2:	4b98      	ldr	r3, [pc, #608]	; (8005104 <ChessNotMovePathWay+0x2e4>)
 8004ea4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	Time2MoveDynamic += (sqrt(
			((PositionXY[0] - Pne[0]) * (PositionXY[0] - Pne[0]))
 8004ea8:	ed97 6b1e 	vldr	d6, [r7, #120]	; 0x78
 8004eac:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004eb0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004eb4:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8004eb8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004ebc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004ec0:	ee26 6b07 	vmul.f64	d6, d6, d7
					+ ((PositionXY[1] - Pne[1]) * (PositionXY[1] - Pne[1])))) * 0.01;
 8004ec4:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8004ec8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004ecc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004ed0:	ed97 4b20 	vldr	d4, [r7, #128]	; 0x80
 8004ed4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004ed8:	ee34 7b47 	vsub.f64	d7, d4, d7
 8004edc:	ee25 7b07 	vmul.f64	d7, d5, d7
	Time2MoveDynamic += (sqrt(
 8004ee0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ee4:	eeb0 0b47 	vmov.f64	d0, d7
 8004ee8:	f012 fa22 	bl	8017330 <sqrt>
 8004eec:	eeb0 7b40 	vmov.f64	d7, d0
					+ ((PositionXY[1] - Pne[1]) * (PositionXY[1] - Pne[1])))) * 0.01;
 8004ef0:	ed9f 6b75 	vldr	d6, [pc, #468]	; 80050c8 <ChessNotMovePathWay+0x2a8>
 8004ef4:	ee27 7b06 	vmul.f64	d7, d7, d6
	Time2MoveDynamic += (sqrt(
 8004ef8:	ed97 6b22 	vldr	d6, [r7, #136]	; 0x88
 8004efc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f00:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88

	double TaskSpace2Go[3];
	if (Index2Move == 64) {
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b40      	cmp	r3, #64	; 0x40
 8004f08:	d168      	bne.n	8004fdc <ChessNotMovePathWay+0x1bc>
		if (IsRemove == 1) {
 8004f0a:	7b7b      	ldrb	r3, [r7, #13]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d11e      	bne.n	8004f4e <ChessNotMovePathWay+0x12e>
			TaskSpace2Go[0] = SafePose[0];
 8004f10:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004f14:	e9c7 2304 	strd	r2, r3, [r7, #16]
			TaskSpace2Go[1] = SafePose[1];
 8004f18:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004f1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
			TaskSpace2Go[2] = Z_TopOffset;
 8004f20:	4b79      	ldr	r3, [pc, #484]	; (8005108 <ChessNotMovePathWay+0x2e8>)
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if (IsJMove) {
 8004f2a:	7bbb      	ldrb	r3, [r7, #14]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <ChessNotMovePathWay+0x120>
				JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 8004f30:	f107 0310 	add.w	r3, r7, #16
 8004f34:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff ff01 	bl	8004d40 <JMoveTaskSpace>
 8004f3e:	e006      	b.n	8004f4e <ChessNotMovePathWay+0x12e>
			} else {
				JMoveTaskSpace(TaskSpace2Go, 1);
 8004f40:	f107 0310 	add.w	r3, r7, #16
 8004f44:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fef9 	bl	8004d40 <JMoveTaskSpace>
			}
		}
		if (IsRemove == 2) {
 8004f4e:	7b7b      	ldrb	r3, [r7, #13]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d130      	bne.n	8004fb6 <ChessNotMovePathWay+0x196>
			TaskSpace2Go[0] = SafePose[0] + (PositionX * 30);
 8004f54:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8004f58:	4b6c      	ldr	r3, [pc, #432]	; (800510c <ChessNotMovePathWay+0x2ec>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4613      	mov	r3, r2
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004f6e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f72:	ed87 7b04 	vstr	d7, [r7, #16]
			TaskSpace2Go[1] = SafePose[1];
 8004f76:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004f7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
			TaskSpace2Go[2] = SafePose[1];
 8004f7e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004f82:	e9c7 2308 	strd	r2, r3, [r7, #32]
			PositionX += 1;
 8004f86:	4b61      	ldr	r3, [pc, #388]	; (800510c <ChessNotMovePathWay+0x2ec>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	4b5f      	ldr	r3, [pc, #380]	; (800510c <ChessNotMovePathWay+0x2ec>)
 8004f90:	701a      	strb	r2, [r3, #0]
			if (IsJMove) {
 8004f92:	7bbb      	ldrb	r3, [r7, #14]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <ChessNotMovePathWay+0x188>
				JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 8004f98:	f107 0310 	add.w	r3, r7, #16
 8004f9c:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fecd 	bl	8004d40 <JMoveTaskSpace>
 8004fa6:	e006      	b.n	8004fb6 <ChessNotMovePathWay+0x196>
			} else {
				JMoveTaskSpace(TaskSpace2Go, 1);
 8004fa8:	f107 0310 	add.w	r3, r7, #16
 8004fac:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff fec5 	bl	8004d40 <JMoveTaskSpace>
			}
		}
		if (IsJMove) {
 8004fb6:	7bbb      	ldrb	r3, [r7, #14]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <ChessNotMovePathWay+0x1ac>
			JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 8004fbc:	f107 0310 	add.w	r3, r7, #16
 8004fc0:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff febb 	bl	8004d40 <JMoveTaskSpace>
			JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
		} else {
			JMoveTaskSpace(TaskSpace2Go, 2);
		}
	}
}
 8004fca:	e073      	b.n	80050b4 <ChessNotMovePathWay+0x294>
			JMoveTaskSpace(TaskSpace2Go, 1);
 8004fcc:	f107 0310 	add.w	r3, r7, #16
 8004fd0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff feb3 	bl	8004d40 <JMoveTaskSpace>
}
 8004fda:	e06b      	b.n	80050b4 <ChessNotMovePathWay+0x294>
		if (PositionXY[0] > 250 && PositionXY[0] < 450) {
 8004fdc:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004fe0:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80050d0 <ChessNotMovePathWay+0x2b0>
 8004fe4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fec:	dd17      	ble.n	800501e <ChessNotMovePathWay+0x1fe>
 8004fee:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004ff2:	ed9f 6b39 	vldr	d6, [pc, #228]	; 80050d8 <ChessNotMovePathWay+0x2b8>
 8004ff6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffe:	d50e      	bpl.n	800501e <ChessNotMovePathWay+0x1fe>
			Z_Board_Offset = (PositionXY[0] - 250) * 0.05f;
 8005000:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8005004:	ed9f 6b32 	vldr	d6, [pc, #200]	; 80050d0 <ChessNotMovePathWay+0x2b0>
 8005008:	ee37 7b46 	vsub.f64	d7, d7, d6
 800500c:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80050e0 <ChessNotMovePathWay+0x2c0>
 8005010:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005014:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005018:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 800501c:	e01f      	b.n	800505e <ChessNotMovePathWay+0x23e>
		} else if (PositionXY[0] > 450 && PositionXY[0] < 700) {
 800501e:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8005022:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 80050d8 <ChessNotMovePathWay+0x2b8>
 8005026:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800502a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502e:	dd16      	ble.n	800505e <ChessNotMovePathWay+0x23e>
 8005030:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8005034:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80050e8 <ChessNotMovePathWay+0x2c8>
 8005038:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800503c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005040:	d50d      	bpl.n	800505e <ChessNotMovePathWay+0x23e>
			Z_Board_Offset = (PositionXY[0] - 450) * 0.1f;
 8005042:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8005046:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80050d8 <ChessNotMovePathWay+0x2b8>
 800504a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800504e:	ed9f 6b28 	vldr	d6, [pc, #160]	; 80050f0 <ChessNotMovePathWay+0x2d0>
 8005052:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005056:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800505a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		TaskSpace2Go[0] = PositionXY[0];
 800505e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005062:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TaskSpace2Go[1] = PositionXY[1];
 8005066:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800506a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		TaskSpace2Go[2] = Z_Offset + ChessHight + Z_Board_Offset;
 800506e:	4b28      	ldr	r3, [pc, #160]	; (8005110 <ChessNotMovePathWay+0x2f0>)
 8005070:	edd3 7a00 	vldr	s15, [r3]
 8005074:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005078:	ed97 7b00 	vldr	d7, [r7]
 800507c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005080:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005084:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005088:	ee36 7b07 	vadd.f64	d7, d6, d7
 800508c:	ed87 7b08 	vstr	d7, [r7, #32]
		if (IsJMove) {
 8005090:	7bbb      	ldrb	r3, [r7, #14]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d007      	beq.n	80050a6 <ChessNotMovePathWay+0x286>
			JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 8005096:	f107 0310 	add.w	r3, r7, #16
 800509a:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fe4e 	bl	8004d40 <JMoveTaskSpace>
}
 80050a4:	e006      	b.n	80050b4 <ChessNotMovePathWay+0x294>
			JMoveTaskSpace(TaskSpace2Go, 2);
 80050a6:	f107 0310 	add.w	r3, r7, #16
 80050aa:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fe46 	bl	8004d40 <JMoveTaskSpace>
}
 80050b4:	bf00      	nop
 80050b6:	3798      	adds	r7, #152	; 0x98
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bdb0      	pop	{r4, r5, r7, pc}
 80050bc:	f3af 8000 	nop.w
 80050c0:	00000000 	.word	0x00000000
 80050c4:	4070d000 	.word	0x4070d000
 80050c8:	47ae147b 	.word	0x47ae147b
 80050cc:	3f847ae1 	.word	0x3f847ae1
 80050d0:	00000000 	.word	0x00000000
 80050d4:	406f4000 	.word	0x406f4000
 80050d8:	00000000 	.word	0x00000000
 80050dc:	407c2000 	.word	0x407c2000
 80050e0:	a0000000 	.word	0xa0000000
 80050e4:	3fa99999 	.word	0x3fa99999
 80050e8:	00000000 	.word	0x00000000
 80050ec:	4085e000 	.word	0x4085e000
 80050f0:	a0000000 	.word	0xa0000000
 80050f4:	3fb99999 	.word	0x3fb99999
 80050f8:	080182a0 	.word	0x080182a0
 80050fc:	20000b58 	.word	0x20000b58
 8005100:	200004a8 	.word	0x200004a8
 8005104:	3ff33333 	.word	0x3ff33333
 8005108:	20000000 	.word	0x20000000
 800510c:	20000c38 	.word	0x20000c38
 8005110:	20000bdc 	.word	0x20000bdc
 8005114:	00000000 	.word	0x00000000

08005118 <ChessMoveStateMachine>:

void ChessMoveStateMachine() {
 8005118:	b5b0      	push	{r4, r5, r7, lr}
 800511a:	b09a      	sub	sp, #104	; 0x68
 800511c:	af00      	add	r7, sp, #0
	static uint8_t ChangeState = 0;
	double Speed_Error = 0.05;
 800511e:	a3c3      	add	r3, pc, #780	; (adr r3, 800542c <ChessMoveStateMachine+0x314>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double SafePose[3] = {210, -270, 250};
 8005128:	4bb3      	ldr	r3, [pc, #716]	; (80053f8 <ChessMoveStateMachine+0x2e0>)
 800512a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800512e:	461d      	mov	r5, r3
 8005130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005134:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005138:	e884 0003 	stmia.w	r4, {r0, r1}
	double Time2MoveDynamic = 1.3;
 800513c:	a3aa      	add	r3, pc, #680	; (adr r3, 80053e8 <ChessMoveStateMachine+0x2d0>)
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double q_Feed[4];
	double Pne[3];

	switch (ChessMoveStates) {
 8005146:	4bad      	ldr	r3, [pc, #692]	; (80053fc <ChessMoveStateMachine+0x2e4>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b0a      	cmp	r3, #10
 800514c:	f200 826d 	bhi.w	800562a <ChessMoveStateMachine+0x512>
 8005150:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <ChessMoveStateMachine+0x40>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	08005185 	.word	0x08005185
 800515c:	080051b5 	.word	0x080051b5
 8005160:	08005237 	.word	0x08005237
 8005164:	08005295 	.word	0x08005295
 8005168:	080052a5 	.word	0x080052a5
 800516c:	080052fb 	.word	0x080052fb
 8005170:	0800537d 	.word	0x0800537d
 8005174:	08005435 	.word	0x08005435
 8005178:	080054b7 	.word	0x080054b7
 800517c:	080054cd 	.word	0x080054cd
 8005180:	08005523 	.word	0x08005523
	case Chess_idle:
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8005184:	2200      	movs	r2, #0
 8005186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800518a:	489d      	ldr	r0, [pc, #628]	; (8005400 <ChessMoveStateMachine+0x2e8>)
 800518c:	f007 fdb4 	bl	800ccf8 <HAL_GPIO_WritePin>
		if (Chess_Move_Start_Flag) {
 8005190:	4b9c      	ldr	r3, [pc, #624]	; (8005404 <ChessMoveStateMachine+0x2ec>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 824a 	beq.w	800562e <ChessMoveStateMachine+0x516>
			ChessMoveStates = Move_2_Start_Top_Point;
 800519a:	4b98      	ldr	r3, [pc, #608]	; (80053fc <ChessMoveStateMachine+0x2e4>)
 800519c:	2201      	movs	r2, #1
 800519e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 80051a0:	2201      	movs	r2, #1
 80051a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051a6:	4896      	ldr	r0, [pc, #600]	; (8005400 <ChessMoveStateMachine+0x2e8>)
 80051a8:	f007 fda6 	bl	800ccf8 <HAL_GPIO_WritePin>
			ChangeState = 1;
 80051ac:	4b96      	ldr	r3, [pc, #600]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	701a      	strb	r2, [r3, #0]
			}
		break;
 80051b2:	e23c      	b.n	800562e <ChessMoveStateMachine+0x516>
	case Move_2_Start_Top_Point:
		if (ChangeState) {
 80051b4:	4b94      	ldr	r3, [pc, #592]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00e      	beq.n	80051da <ChessMoveStateMachine+0xc2>
			ChessNotMovePathWay(ChessIndex[0], Z_TopOffset, 1 , 0);
 80051bc:	4b93      	ldr	r3, [pc, #588]	; (800540c <ChessMoveStateMachine+0x2f4>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	4a93      	ldr	r2, [pc, #588]	; (8005410 <ChessMoveStateMachine+0x2f8>)
 80051c2:	ed92 7b00 	vldr	d7, [r2]
 80051c6:	2200      	movs	r2, #0
 80051c8:	2101      	movs	r1, #1
 80051ca:	eeb0 0b47 	vmov.f64	d0, d7
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fe26 	bl	8004e20 <ChessNotMovePathWay>
			ChangeState = 0;
 80051d4:	4b8c      	ldr	r3, [pc, #560]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 80051da:	4b8e      	ldr	r3, [pc, #568]	; (8005414 <ChessMoveStateMachine+0x2fc>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f040 8227 	bne.w	8005632 <ChessMoveStateMachine+0x51a>
			if(All_Joint_Speed_Avg() <= Speed_Error){
 80051e4:	f000 fa5a 	bl	800569c <All_Joint_Speed_Avg>
 80051e8:	eeb0 6b40 	vmov.f64	d6, d0
 80051ec:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80051f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80051f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f8:	da00      	bge.n	80051fc <ChessMoveStateMachine+0xe4>
				ChessMoveStates = Move_2_Start_Grip_Point;
				Servo_Drive(&Servo[1], 90.0f + Control[0].PositionFeedback - Chess_Board_Base_Encoder);
				ChangeState = 1;
			}
		}
		break;
 80051fa:	e21a      	b.n	8005632 <ChessMoveStateMachine+0x51a>
				ChessMoveStates = Move_2_Start_Grip_Point;
 80051fc:	4b7f      	ldr	r3, [pc, #508]	; (80053fc <ChessMoveStateMachine+0x2e4>)
 80051fe:	2202      	movs	r2, #2
 8005200:	701a      	strb	r2, [r3, #0]
				Servo_Drive(&Servo[1], 90.0f + Control[0].PositionFeedback - Chess_Board_Base_Encoder);
 8005202:	4b85      	ldr	r3, [pc, #532]	; (8005418 <ChessMoveStateMachine+0x300>)
 8005204:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005208:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80053f0 <ChessMoveStateMachine+0x2d8>
 800520c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8005210:	4b82      	ldr	r3, [pc, #520]	; (800541c <ChessMoveStateMachine+0x304>)
 8005212:	ed93 7b00 	vldr	d7, [r3]
 8005216:	ee36 7b47 	vsub.f64	d7, d6, d7
 800521a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800521e:	edc7 7a01 	vstr	s15, [r7, #4]
 8005222:	793b      	ldrb	r3, [r7, #4]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	4619      	mov	r1, r3
 8005228:	487d      	ldr	r0, [pc, #500]	; (8005420 <ChessMoveStateMachine+0x308>)
 800522a:	f7fb ffbb 	bl	80011a4 <Servo_Drive>
				ChangeState = 1;
 800522e:	4b76      	ldr	r3, [pc, #472]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 8005230:	2201      	movs	r2, #1
 8005232:	701a      	strb	r2, [r3, #0]
		break;
 8005234:	e1fd      	b.n	8005632 <ChessMoveStateMachine+0x51a>
	case Move_2_Start_Grip_Point:
		if (ChangeState) {
 8005236:	4b74      	ldr	r3, [pc, #464]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00e      	beq.n	800525c <ChessMoveStateMachine+0x144>
			ChessNotMovePathWay(ChessIndex[0], Z_2GripOffset, 0, 1);
 800523e:	4b73      	ldr	r3, [pc, #460]	; (800540c <ChessMoveStateMachine+0x2f4>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	4a78      	ldr	r2, [pc, #480]	; (8005424 <ChessMoveStateMachine+0x30c>)
 8005244:	ed92 7b00 	vldr	d7, [r2]
 8005248:	2201      	movs	r2, #1
 800524a:	2100      	movs	r1, #0
 800524c:	eeb0 0b47 	vmov.f64	d0, d7
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff fde5 	bl	8004e20 <ChessNotMovePathWay>
			ChangeState = 0;
 8005256:	4b6c      	ldr	r3, [pc, #432]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 800525c:	4b6d      	ldr	r3, [pc, #436]	; (8005414 <ChessMoveStateMachine+0x2fc>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	f040 81e8 	bne.w	8005636 <ChessMoveStateMachine+0x51e>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8005266:	f000 fa19 	bl	800569c <All_Joint_Speed_Avg>
 800526a:	eeb0 6b40 	vmov.f64	d6, d0
 800526e:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8005272:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527a:	da00      	bge.n	800527e <ChessMoveStateMachine+0x166>
				ChessMoveStates = Move_2_Start_Point_and_Griping;
				Servo_Drive(&Servo[0], 110); //Ungrip
				ChangeState = 1;
			}
		}
		break;
 800527c:	e1db      	b.n	8005636 <ChessMoveStateMachine+0x51e>
				ChessMoveStates = Move_2_Start_Point_and_Griping;
 800527e:	4b5f      	ldr	r3, [pc, #380]	; (80053fc <ChessMoveStateMachine+0x2e4>)
 8005280:	2203      	movs	r2, #3
 8005282:	701a      	strb	r2, [r3, #0]
				Servo_Drive(&Servo[0], 110); //Ungrip
 8005284:	216e      	movs	r1, #110	; 0x6e
 8005286:	4868      	ldr	r0, [pc, #416]	; (8005428 <ChessMoveStateMachine+0x310>)
 8005288:	f7fb ff8c 	bl	80011a4 <Servo_Drive>
				ChangeState = 1;
 800528c:	4b5e      	ldr	r3, [pc, #376]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 800528e:	2201      	movs	r2, #1
 8005290:	701a      	strb	r2, [r3, #0]
		break;
 8005292:	e1d0      	b.n	8005636 <ChessMoveStateMachine+0x51e>
	case Move_2_Start_Point_and_Griping:
		// Grip Chess
		Servo_Drive(&Servo[0], 25); //Grip
 8005294:	2119      	movs	r1, #25
 8005296:	4864      	ldr	r0, [pc, #400]	; (8005428 <ChessMoveStateMachine+0x310>)
 8005298:	f7fb ff84 	bl	80011a4 <Servo_Drive>
		ChessMoveStates = Back_2_Start_Top_Point;
 800529c:	4b57      	ldr	r3, [pc, #348]	; (80053fc <ChessMoveStateMachine+0x2e4>)
 800529e:	2204      	movs	r2, #4
 80052a0:	701a      	strb	r2, [r3, #0]
		break;
 80052a2:	e1d5      	b.n	8005650 <ChessMoveStateMachine+0x538>
	case Back_2_Start_Top_Point:
		if (ChangeState) {
 80052a4:	4b58      	ldr	r3, [pc, #352]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00e      	beq.n	80052ca <ChessMoveStateMachine+0x1b2>
			ChessNotMovePathWay(ChessIndex[0], Z_TopOffset, 0, 1);
 80052ac:	4b57      	ldr	r3, [pc, #348]	; (800540c <ChessMoveStateMachine+0x2f4>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	4a57      	ldr	r2, [pc, #348]	; (8005410 <ChessMoveStateMachine+0x2f8>)
 80052b2:	ed92 7b00 	vldr	d7, [r2]
 80052b6:	2201      	movs	r2, #1
 80052b8:	2100      	movs	r1, #0
 80052ba:	eeb0 0b47 	vmov.f64	d0, d7
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fdae 	bl	8004e20 <ChessNotMovePathWay>
			ChangeState = 0;
 80052c4:	4b50      	ldr	r3, [pc, #320]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 80052ca:	4b52      	ldr	r3, [pc, #328]	; (8005414 <ChessMoveStateMachine+0x2fc>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f040 81b3 	bne.w	800563a <ChessMoveStateMachine+0x522>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 80052d4:	f000 f9e2 	bl	800569c <All_Joint_Speed_Avg>
 80052d8:	eeb0 6b40 	vmov.f64	d6, d0
 80052dc:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80052e0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80052e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e8:	da00      	bge.n	80052ec <ChessMoveStateMachine+0x1d4>
				ChessMoveStates = Move_2_End_Top_Point;
				ChangeState = 1;
			}
		}
		break;
 80052ea:	e1a6      	b.n	800563a <ChessMoveStateMachine+0x522>
				ChessMoveStates = Move_2_End_Top_Point;
 80052ec:	4b43      	ldr	r3, [pc, #268]	; (80053fc <ChessMoveStateMachine+0x2e4>)
 80052ee:	2205      	movs	r2, #5
 80052f0:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 80052f2:	4b45      	ldr	r3, [pc, #276]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	701a      	strb	r2, [r3, #0]
		break;
 80052f8:	e19f      	b.n	800563a <ChessMoveStateMachine+0x522>

		// Finish To Grip Chess

	case Move_2_End_Top_Point:
		if (ChangeState) {
 80052fa:	4b43      	ldr	r3, [pc, #268]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00e      	beq.n	8005320 <ChessMoveStateMachine+0x208>
			ChessNotMovePathWay(ChessIndex[1], Z_TopOffset, 1, 1);
 8005302:	4b42      	ldr	r3, [pc, #264]	; (800540c <ChessMoveStateMachine+0x2f4>)
 8005304:	785b      	ldrb	r3, [r3, #1]
 8005306:	4a42      	ldr	r2, [pc, #264]	; (8005410 <ChessMoveStateMachine+0x2f8>)
 8005308:	ed92 7b00 	vldr	d7, [r2]
 800530c:	2201      	movs	r2, #1
 800530e:	2101      	movs	r1, #1
 8005310:	eeb0 0b47 	vmov.f64	d0, d7
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff fd83 	bl	8004e20 <ChessNotMovePathWay>
			ChangeState = 0;
 800531a:	4b3b      	ldr	r3, [pc, #236]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8005320:	4b3c      	ldr	r3, [pc, #240]	; (8005414 <ChessMoveStateMachine+0x2fc>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f040 818a 	bne.w	800563e <ChessMoveStateMachine+0x526>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 800532a:	f000 f9b7 	bl	800569c <All_Joint_Speed_Avg>
 800532e:	eeb0 6b40 	vmov.f64	d6, d0
 8005332:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8005336:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800533a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533e:	da00      	bge.n	8005342 <ChessMoveStateMachine+0x22a>
								+ Chess_Board_Base_Encoder);
				ChessMoveStates = Move_2_End_Ungrip_Point;
				ChangeState = 1;
			}
		}
		break;
 8005340:	e17d      	b.n	800563e <ChessMoveStateMachine+0x526>
						90.0f - Control[0].PositionFeedback
 8005342:	4b35      	ldr	r3, [pc, #212]	; (8005418 <ChessMoveStateMachine+0x300>)
 8005344:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005348:	ed9f 6b29 	vldr	d6, [pc, #164]	; 80053f0 <ChessMoveStateMachine+0x2d8>
 800534c:	ee36 6b47 	vsub.f64	d6, d6, d7
								+ Chess_Board_Base_Encoder);
 8005350:	4b32      	ldr	r3, [pc, #200]	; (800541c <ChessMoveStateMachine+0x304>)
 8005352:	ed93 7b00 	vldr	d7, [r3]
 8005356:	ee36 7b07 	vadd.f64	d7, d6, d7
				Servo_Drive(&Servo[1],
 800535a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800535e:	edc7 7a01 	vstr	s15, [r7, #4]
 8005362:	793b      	ldrb	r3, [r7, #4]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	4619      	mov	r1, r3
 8005368:	482d      	ldr	r0, [pc, #180]	; (8005420 <ChessMoveStateMachine+0x308>)
 800536a:	f7fb ff1b 	bl	80011a4 <Servo_Drive>
				ChessMoveStates = Move_2_End_Ungrip_Point;
 800536e:	4b23      	ldr	r3, [pc, #140]	; (80053fc <ChessMoveStateMachine+0x2e4>)
 8005370:	2206      	movs	r2, #6
 8005372:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8005374:	4b24      	ldr	r3, [pc, #144]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 8005376:	2201      	movs	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
		break;
 800537a:	e160      	b.n	800563e <ChessMoveStateMachine+0x526>
	case Move_2_End_Ungrip_Point:
		if (ChangeState) {
 800537c:	4b22      	ldr	r3, [pc, #136]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00e      	beq.n	80053a2 <ChessMoveStateMachine+0x28a>
			ChessNotMovePathWay(ChessIndex[1], Z_2GripOffset, 0, 1);
 8005384:	4b21      	ldr	r3, [pc, #132]	; (800540c <ChessMoveStateMachine+0x2f4>)
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	4a26      	ldr	r2, [pc, #152]	; (8005424 <ChessMoveStateMachine+0x30c>)
 800538a:	ed92 7b00 	vldr	d7, [r2]
 800538e:	2201      	movs	r2, #1
 8005390:	2100      	movs	r1, #0
 8005392:	eeb0 0b47 	vmov.f64	d0, d7
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fd42 	bl	8004e20 <ChessNotMovePathWay>
			ChangeState = 0;
 800539c:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 800539e:	2200      	movs	r2, #0
 80053a0:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 80053a2:	4b1c      	ldr	r3, [pc, #112]	; (8005414 <ChessMoveStateMachine+0x2fc>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f040 814b 	bne.w	8005642 <ChessMoveStateMachine+0x52a>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 80053ac:	f000 f976 	bl	800569c <All_Joint_Speed_Avg>
 80053b0:	eeb0 6b40 	vmov.f64	d6, d0
 80053b4:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80053b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80053bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c0:	da00      	bge.n	80053c4 <ChessMoveStateMachine+0x2ac>
					ChessMoveStates = Move_2_End_Point_and_Ungriping;
					ChangeState = 1;
				}
			}
		}
		break;
 80053c2:	e13e      	b.n	8005642 <ChessMoveStateMachine+0x52a>
				if (ChessIndex[1] == 64) {
 80053c4:	4b11      	ldr	r3, [pc, #68]	; (800540c <ChessMoveStateMachine+0x2f4>)
 80053c6:	785b      	ldrb	r3, [r3, #1]
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	d106      	bne.n	80053da <ChessMoveStateMachine+0x2c2>
					ChessMoveStates = Move_2_End_Remove_Point_and_Ungriping;
 80053cc:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <ChessMoveStateMachine+0x2e4>)
 80053ce:	2207      	movs	r2, #7
 80053d0:	701a      	strb	r2, [r3, #0]
					ChangeState = 1;
 80053d2:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
		break;
 80053d8:	e133      	b.n	8005642 <ChessMoveStateMachine+0x52a>
					ChessMoveStates = Move_2_End_Point_and_Ungriping;
 80053da:	4b08      	ldr	r3, [pc, #32]	; (80053fc <ChessMoveStateMachine+0x2e4>)
 80053dc:	2208      	movs	r2, #8
 80053de:	701a      	strb	r2, [r3, #0]
					ChangeState = 1;
 80053e0:	4b09      	ldr	r3, [pc, #36]	; (8005408 <ChessMoveStateMachine+0x2f0>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	701a      	strb	r2, [r3, #0]
		break;
 80053e6:	e12c      	b.n	8005642 <ChessMoveStateMachine+0x52a>
 80053e8:	cccccccd 	.word	0xcccccccd
 80053ec:	3ff4cccc 	.word	0x3ff4cccc
 80053f0:	00000000 	.word	0x00000000
 80053f4:	40568000 	.word	0x40568000
 80053f8:	080182b8 	.word	0x080182b8
 80053fc:	20000be1 	.word	0x20000be1
 8005400:	58020c00 	.word	0x58020c00
 8005404:	20000be0 	.word	0x20000be0
 8005408:	20000c39 	.word	0x20000c39
 800540c:	20000bd8 	.word	0x20000bd8
 8005410:	20000000 	.word	0x20000000
 8005414:	20000bc9 	.word	0x20000bc9
 8005418:	200004a8 	.word	0x200004a8
 800541c:	20000b58 	.word	0x20000b58
 8005420:	20000860 	.word	0x20000860
 8005424:	20000008 	.word	0x20000008
 8005428:	20000858 	.word	0x20000858
 800542c:	9999999a 	.word	0x9999999a
 8005430:	3fa99999 	.word	0x3fa99999
	case Move_2_End_Remove_Point_and_Ungriping:
		if (ChangeState) {
 8005434:	4b8e      	ldr	r3, [pc, #568]	; (8005670 <ChessMoveStateMachine+0x558>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00e      	beq.n	800545a <ChessMoveStateMachine+0x342>
			ChessNotMovePathWay(ChessIndex[1], Z_2GripOffset, 0, 2);
 800543c:	4b8d      	ldr	r3, [pc, #564]	; (8005674 <ChessMoveStateMachine+0x55c>)
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	4a8d      	ldr	r2, [pc, #564]	; (8005678 <ChessMoveStateMachine+0x560>)
 8005442:	ed92 7b00 	vldr	d7, [r2]
 8005446:	2202      	movs	r2, #2
 8005448:	2100      	movs	r1, #0
 800544a:	eeb0 0b47 	vmov.f64	d0, d7
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fce6 	bl	8004e20 <ChessNotMovePathWay>
			ChangeState = 0;
 8005454:	4b86      	ldr	r3, [pc, #536]	; (8005670 <ChessMoveStateMachine+0x558>)
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 800545a:	4b88      	ldr	r3, [pc, #544]	; (800567c <ChessMoveStateMachine+0x564>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	f040 80f1 	bne.w	8005646 <ChessMoveStateMachine+0x52e>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8005464:	f000 f91a 	bl	800569c <All_Joint_Speed_Avg>
 8005468:	eeb0 6b40 	vmov.f64	d6, d0
 800546c:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8005470:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005478:	da00      	bge.n	800547c <ChessMoveStateMachine+0x364>
				ChessMoveStates = Move_2_End_Point_and_Ungriping;
				Servo_Drive(&Servo[1], 90.0f + Control[0].PositionFeedback - Chess_Board_Base_Encoder);
				ChangeState = 1;
			}
		}
		break;
 800547a:	e0e4      	b.n	8005646 <ChessMoveStateMachine+0x52e>
				ChessMoveStates = Move_2_End_Point_and_Ungriping;
 800547c:	4b80      	ldr	r3, [pc, #512]	; (8005680 <ChessMoveStateMachine+0x568>)
 800547e:	2208      	movs	r2, #8
 8005480:	701a      	strb	r2, [r3, #0]
				Servo_Drive(&Servo[1], 90.0f + Control[0].PositionFeedback - Chess_Board_Base_Encoder);
 8005482:	4b80      	ldr	r3, [pc, #512]	; (8005684 <ChessMoveStateMachine+0x56c>)
 8005484:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005488:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8005658 <ChessMoveStateMachine+0x540>
 800548c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8005490:	4b7d      	ldr	r3, [pc, #500]	; (8005688 <ChessMoveStateMachine+0x570>)
 8005492:	ed93 7b00 	vldr	d7, [r3]
 8005496:	ee36 7b47 	vsub.f64	d7, d6, d7
 800549a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800549e:	edc7 7a01 	vstr	s15, [r7, #4]
 80054a2:	793b      	ldrb	r3, [r7, #4]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	4619      	mov	r1, r3
 80054a8:	4878      	ldr	r0, [pc, #480]	; (800568c <ChessMoveStateMachine+0x574>)
 80054aa:	f7fb fe7b 	bl	80011a4 <Servo_Drive>
				ChangeState = 1;
 80054ae:	4b70      	ldr	r3, [pc, #448]	; (8005670 <ChessMoveStateMachine+0x558>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	701a      	strb	r2, [r3, #0]
		break;
 80054b4:	e0c7      	b.n	8005646 <ChessMoveStateMachine+0x52e>
	case Move_2_End_Point_and_Ungriping:
		Servo_Drive(&Servo[0], 110); //Ungrip
 80054b6:	216e      	movs	r1, #110	; 0x6e
 80054b8:	4875      	ldr	r0, [pc, #468]	; (8005690 <ChessMoveStateMachine+0x578>)
 80054ba:	f7fb fe73 	bl	80011a4 <Servo_Drive>
		ChessMoveStates = Back_2_End_Top_Point;
 80054be:	4b70      	ldr	r3, [pc, #448]	; (8005680 <ChessMoveStateMachine+0x568>)
 80054c0:	2209      	movs	r2, #9
 80054c2:	701a      	strb	r2, [r3, #0]
		ChangeState = 1;
 80054c4:	4b6a      	ldr	r3, [pc, #424]	; (8005670 <ChessMoveStateMachine+0x558>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	701a      	strb	r2, [r3, #0]
		break;
 80054ca:	e0c1      	b.n	8005650 <ChessMoveStateMachine+0x538>
	case Back_2_End_Top_Point:
		if (ChangeState) {
 80054cc:	4b68      	ldr	r3, [pc, #416]	; (8005670 <ChessMoveStateMachine+0x558>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00e      	beq.n	80054f2 <ChessMoveStateMachine+0x3da>
			ChessNotMovePathWay(ChessIndex[1], Z_TopOffset, 0, 1);
 80054d4:	4b67      	ldr	r3, [pc, #412]	; (8005674 <ChessMoveStateMachine+0x55c>)
 80054d6:	785b      	ldrb	r3, [r3, #1]
 80054d8:	4a6e      	ldr	r2, [pc, #440]	; (8005694 <ChessMoveStateMachine+0x57c>)
 80054da:	ed92 7b00 	vldr	d7, [r2]
 80054de:	2201      	movs	r2, #1
 80054e0:	2100      	movs	r1, #0
 80054e2:	eeb0 0b47 	vmov.f64	d0, d7
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fc9a 	bl	8004e20 <ChessNotMovePathWay>
			ChangeState = 0;
 80054ec:	4b60      	ldr	r3, [pc, #384]	; (8005670 <ChessMoveStateMachine+0x558>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 80054f2:	4b62      	ldr	r3, [pc, #392]	; (800567c <ChessMoveStateMachine+0x564>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f040 80a7 	bne.w	800564a <ChessMoveStateMachine+0x532>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 80054fc:	f000 f8ce 	bl	800569c <All_Joint_Speed_Avg>
 8005500:	eeb0 6b40 	vmov.f64	d6, d0
 8005504:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8005508:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800550c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005510:	da00      	bge.n	8005514 <ChessMoveStateMachine+0x3fc>
				ChessMoveStates = ChessMove_Finish;
				ChangeState = 1;
			}
		}
		break;
 8005512:	e09a      	b.n	800564a <ChessMoveStateMachine+0x532>
				ChessMoveStates = ChessMove_Finish;
 8005514:	4b5a      	ldr	r3, [pc, #360]	; (8005680 <ChessMoveStateMachine+0x568>)
 8005516:	220a      	movs	r2, #10
 8005518:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 800551a:	4b55      	ldr	r3, [pc, #340]	; (8005670 <ChessMoveStateMachine+0x558>)
 800551c:	2201      	movs	r2, #1
 800551e:	701a      	strb	r2, [r3, #0]
		break;
 8005520:	e093      	b.n	800564a <ChessMoveStateMachine+0x532>
	case ChessMove_Finish:
		if (ChangeState) {
 8005522:	4b53      	ldr	r3, [pc, #332]	; (8005670 <ChessMoveStateMachine+0x558>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d065      	beq.n	80055f6 <ChessMoveStateMachine+0x4de>
			q_Feed[0] = Control[0].PositionFeedback;
 800552a:	4b56      	ldr	r3, [pc, #344]	; (8005684 <ChessMoveStateMachine+0x56c>)
 800552c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005530:	e9c7 2308 	strd	r2, r3, [r7, #32]
			q_Feed[1] = Control[1].PositionFeedback;
 8005534:	4b53      	ldr	r3, [pc, #332]	; (8005684 <ChessMoveStateMachine+0x56c>)
 8005536:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 800553a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			q_Feed[2] = Control[2].PositionFeedback;
 800553e:	4b51      	ldr	r3, [pc, #324]	; (8005684 <ChessMoveStateMachine+0x56c>)
 8005540:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8005544:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			q_Feed[3] = Control[3].PositionFeedback;
 8005548:	4b4e      	ldr	r3, [pc, #312]	; (8005684 <ChessMoveStateMachine+0x56c>)
 800554a:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 800554e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			FPK(q_Feed, 269.0f, Pne);
 8005552:	f107 0208 	add.w	r2, r7, #8
 8005556:	f107 0320 	add.w	r3, r7, #32
 800555a:	4611      	mov	r1, r2
 800555c:	ed9f 0b40 	vldr	d0, [pc, #256]	; 8005660 <ChessMoveStateMachine+0x548>
 8005560:	4618      	mov	r0, r3
 8005562:	f7fd f959 	bl	8002818 <FPK>
			Time2MoveDynamic +=
					(sqrt(
							((SafePose[0] - Pne[0]) * (SafePose[0] - Pne[0]))
 8005566:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 800556a:	ed97 7b02 	vldr	d7, [r7, #8]
 800556e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005572:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
 8005576:	ed97 7b02 	vldr	d7, [r7, #8]
 800557a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800557e:	ee26 6b07 	vmul.f64	d6, d6, d7
									+ ((SafePose[1] - Pne[1])
 8005582:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 8005586:	ed97 7b04 	vldr	d7, [r7, #16]
 800558a:	ee35 5b47 	vsub.f64	d5, d5, d7
											* (SafePose[1] - Pne[1]))
 800558e:	ed97 4b12 	vldr	d4, [r7, #72]	; 0x48
 8005592:	ed97 7b04 	vldr	d7, [r7, #16]
 8005596:	ee34 7b47 	vsub.f64	d7, d4, d7
 800559a:	ee25 7b07 	vmul.f64	d7, d5, d7
									+ ((SafePose[1] - Pne[1])
 800559e:	ee36 6b07 	vadd.f64	d6, d6, d7
									+ ((SafePose[2] - Pne[2])
 80055a2:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 80055a6:	ed97 7b06 	vldr	d7, [r7, #24]
 80055aa:	ee35 5b47 	vsub.f64	d5, d5, d7
											* (SafePose[2] - Pne[2]))))
 80055ae:	ed97 4b14 	vldr	d4, [r7, #80]	; 0x50
 80055b2:	ed97 7b06 	vldr	d7, [r7, #24]
 80055b6:	ee34 7b47 	vsub.f64	d7, d4, d7
 80055ba:	ee25 7b07 	vmul.f64	d7, d5, d7
					(sqrt(
 80055be:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055c2:	eeb0 0b47 	vmov.f64	d0, d7
 80055c6:	f011 feb3 	bl	8017330 <sqrt>
 80055ca:	eeb0 7b40 	vmov.f64	d7, d0
							* 0.0075;
 80055ce:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8005668 <ChessMoveStateMachine+0x550>
 80055d2:	ee27 7b06 	vmul.f64	d7, d7, d6
			Time2MoveDynamic +=
 80055d6:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 80055da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055de:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			JMoveTaskSpace(SafePose, Time2MoveDynamic);
 80055e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055e6:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff fba8 	bl	8004d40 <JMoveTaskSpace>
			ChangeState = 0;
 80055f0:	4b1f      	ldr	r3, [pc, #124]	; (8005670 <ChessMoveStateMachine+0x558>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 80055f6:	4b21      	ldr	r3, [pc, #132]	; (800567c <ChessMoveStateMachine+0x564>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d127      	bne.n	800564e <ChessMoveStateMachine+0x536>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 80055fe:	f000 f84d 	bl	800569c <All_Joint_Speed_Avg>
 8005602:	eeb0 6b40 	vmov.f64	d6, d0
 8005606:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800560a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800560e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005612:	da00      	bge.n	8005616 <ChessMoveStateMachine+0x4fe>
				ChessMoveStates = Chess_idle;
				Chess_Move_Start_Flag = 0;
				ChangeState = 1;
			}
		}
		break;
 8005614:	e01b      	b.n	800564e <ChessMoveStateMachine+0x536>
				ChessMoveStates = Chess_idle;
 8005616:	4b1a      	ldr	r3, [pc, #104]	; (8005680 <ChessMoveStateMachine+0x568>)
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
				Chess_Move_Start_Flag = 0;
 800561c:	4b1e      	ldr	r3, [pc, #120]	; (8005698 <ChessMoveStateMachine+0x580>)
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8005622:	4b13      	ldr	r3, [pc, #76]	; (8005670 <ChessMoveStateMachine+0x558>)
 8005624:	2201      	movs	r2, #1
 8005626:	701a      	strb	r2, [r3, #0]
		break;
 8005628:	e011      	b.n	800564e <ChessMoveStateMachine+0x536>
	default:
		break;
 800562a:	bf00      	nop
 800562c:	e010      	b.n	8005650 <ChessMoveStateMachine+0x538>
		break;
 800562e:	bf00      	nop
 8005630:	e00e      	b.n	8005650 <ChessMoveStateMachine+0x538>
		break;
 8005632:	bf00      	nop
 8005634:	e00c      	b.n	8005650 <ChessMoveStateMachine+0x538>
		break;
 8005636:	bf00      	nop
 8005638:	e00a      	b.n	8005650 <ChessMoveStateMachine+0x538>
		break;
 800563a:	bf00      	nop
 800563c:	e008      	b.n	8005650 <ChessMoveStateMachine+0x538>
		break;
 800563e:	bf00      	nop
 8005640:	e006      	b.n	8005650 <ChessMoveStateMachine+0x538>
		break;
 8005642:	bf00      	nop
 8005644:	e004      	b.n	8005650 <ChessMoveStateMachine+0x538>
		break;
 8005646:	bf00      	nop
 8005648:	e002      	b.n	8005650 <ChessMoveStateMachine+0x538>
		break;
 800564a:	bf00      	nop
 800564c:	e000      	b.n	8005650 <ChessMoveStateMachine+0x538>
		break;
 800564e:	bf00      	nop
	}
}
 8005650:	bf00      	nop
 8005652:	3768      	adds	r7, #104	; 0x68
 8005654:	46bd      	mov	sp, r7
 8005656:	bdb0      	pop	{r4, r5, r7, pc}
 8005658:	00000000 	.word	0x00000000
 800565c:	40568000 	.word	0x40568000
 8005660:	00000000 	.word	0x00000000
 8005664:	4070d000 	.word	0x4070d000
 8005668:	eb851eb8 	.word	0xeb851eb8
 800566c:	3f7eb851 	.word	0x3f7eb851
 8005670:	20000c39 	.word	0x20000c39
 8005674:	20000bd8 	.word	0x20000bd8
 8005678:	20000008 	.word	0x20000008
 800567c:	20000bc9 	.word	0x20000bc9
 8005680:	20000be1 	.word	0x20000be1
 8005684:	200004a8 	.word	0x200004a8
 8005688:	20000b58 	.word	0x20000b58
 800568c:	20000860 	.word	0x20000860
 8005690:	20000858 	.word	0x20000858
 8005694:	20000000 	.word	0x20000000
 8005698:	20000be0 	.word	0x20000be0

0800569c <All_Joint_Speed_Avg>:

double All_Joint_Speed_Avg(){
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
	double Buf;
	for (int i=4;i<4;i++){
 80056a2:	2304      	movs	r3, #4
 80056a4:	607b      	str	r3, [r7, #4]
 80056a6:	e013      	b.n	80056d0 <All_Joint_Speed_Avg+0x34>
		Buf += fabs(Control[i].VelocityFeedback);
 80056a8:	4a12      	ldr	r2, [pc, #72]	; (80056f4 <All_Joint_Speed_Avg+0x58>)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	21d8      	movs	r1, #216	; 0xd8
 80056ae:	fb01 f303 	mul.w	r3, r1, r3
 80056b2:	4413      	add	r3, r2
 80056b4:	33b8      	adds	r3, #184	; 0xb8
 80056b6:	ed93 7b00 	vldr	d7, [r3]
 80056ba:	eeb0 7bc7 	vabs.f64	d7, d7
 80056be:	ed97 6b02 	vldr	d6, [r7, #8]
 80056c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80056c6:	ed87 7b02 	vstr	d7, [r7, #8]
	for (int i=4;i<4;i++){
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3301      	adds	r3, #1
 80056ce:	607b      	str	r3, [r7, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	dde8      	ble.n	80056a8 <All_Joint_Speed_Avg+0xc>
	}
	return Buf/4.0f;
 80056d6:	ed97 7b02 	vldr	d7, [r7, #8]
 80056da:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80056de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80056e2:	eeb0 7b45 	vmov.f64	d7, d5
}
 80056e6:	eeb0 0b47 	vmov.f64	d0, d7
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	200004a8 	.word	0x200004a8

080056f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056fc:	b672      	cpsid	i
}
 80056fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8005700:	2200      	movs	r2, #0
 8005702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005706:	4802      	ldr	r0, [pc, #8]	; (8005710 <Error_Handler+0x18>)
 8005708:	f007 faf6 	bl	800ccf8 <HAL_GPIO_WritePin>
  while (1)
 800570c:	e7fe      	b.n	800570c <Error_Handler+0x14>
 800570e:	bf00      	nop
 8005710:	58020800 	.word	0x58020800

08005714 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005718:	4b28      	ldr	r3, [pc, #160]	; (80057bc <MX_SPI3_Init+0xa8>)
 800571a:	4a29      	ldr	r2, [pc, #164]	; (80057c0 <MX_SPI3_Init+0xac>)
 800571c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800571e:	4b27      	ldr	r3, [pc, #156]	; (80057bc <MX_SPI3_Init+0xa8>)
 8005720:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005724:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005726:	4b25      	ldr	r3, [pc, #148]	; (80057bc <MX_SPI3_Init+0xa8>)
 8005728:	2200      	movs	r2, #0
 800572a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800572c:	4b23      	ldr	r3, [pc, #140]	; (80057bc <MX_SPI3_Init+0xa8>)
 800572e:	2207      	movs	r2, #7
 8005730:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005732:	4b22      	ldr	r3, [pc, #136]	; (80057bc <MX_SPI3_Init+0xa8>)
 8005734:	2200      	movs	r2, #0
 8005736:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005738:	4b20      	ldr	r3, [pc, #128]	; (80057bc <MX_SPI3_Init+0xa8>)
 800573a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800573e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005740:	4b1e      	ldr	r3, [pc, #120]	; (80057bc <MX_SPI3_Init+0xa8>)
 8005742:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005746:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005748:	4b1c      	ldr	r3, [pc, #112]	; (80057bc <MX_SPI3_Init+0xa8>)
 800574a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800574e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005750:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <MX_SPI3_Init+0xa8>)
 8005752:	2200      	movs	r2, #0
 8005754:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005756:	4b19      	ldr	r3, [pc, #100]	; (80057bc <MX_SPI3_Init+0xa8>)
 8005758:	2200      	movs	r2, #0
 800575a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800575c:	4b17      	ldr	r3, [pc, #92]	; (80057bc <MX_SPI3_Init+0xa8>)
 800575e:	2200      	movs	r2, #0
 8005760:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 8005762:	4b16      	ldr	r3, [pc, #88]	; (80057bc <MX_SPI3_Init+0xa8>)
 8005764:	221d      	movs	r2, #29
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005768:	4b14      	ldr	r3, [pc, #80]	; (80057bc <MX_SPI3_Init+0xa8>)
 800576a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800576e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8005770:	4b12      	ldr	r3, [pc, #72]	; (80057bc <MX_SPI3_Init+0xa8>)
 8005772:	2200      	movs	r2, #0
 8005774:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8005776:	4b11      	ldr	r3, [pc, #68]	; (80057bc <MX_SPI3_Init+0xa8>)
 8005778:	2200      	movs	r2, #0
 800577a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800577c:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <MX_SPI3_Init+0xa8>)
 800577e:	2200      	movs	r2, #0
 8005780:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005782:	4b0e      	ldr	r3, [pc, #56]	; (80057bc <MX_SPI3_Init+0xa8>)
 8005784:	2200      	movs	r2, #0
 8005786:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8005788:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <MX_SPI3_Init+0xa8>)
 800578a:	2200      	movs	r2, #0
 800578c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800578e:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <MX_SPI3_Init+0xa8>)
 8005790:	2200      	movs	r2, #0
 8005792:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8005794:	4b09      	ldr	r3, [pc, #36]	; (80057bc <MX_SPI3_Init+0xa8>)
 8005796:	2200      	movs	r2, #0
 8005798:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800579a:	4b08      	ldr	r3, [pc, #32]	; (80057bc <MX_SPI3_Init+0xa8>)
 800579c:	2200      	movs	r2, #0
 800579e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <MX_SPI3_Init+0xa8>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80057a6:	4805      	ldr	r0, [pc, #20]	; (80057bc <MX_SPI3_Init+0xa8>)
 80057a8:	f00b feb4 	bl	8011514 <HAL_SPI_Init>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80057b2:	f7ff ffa1 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80057b6:	bf00      	nop
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20000c3c 	.word	0x20000c3c
 80057c0:	40003c00 	.word	0x40003c00

080057c4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80057c8:	4b27      	ldr	r3, [pc, #156]	; (8005868 <MX_SPI4_Init+0xa4>)
 80057ca:	4a28      	ldr	r2, [pc, #160]	; (800586c <MX_SPI4_Init+0xa8>)
 80057cc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80057ce:	4b26      	ldr	r3, [pc, #152]	; (8005868 <MX_SPI4_Init+0xa4>)
 80057d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80057d4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80057d6:	4b24      	ldr	r3, [pc, #144]	; (8005868 <MX_SPI4_Init+0xa4>)
 80057d8:	2200      	movs	r2, #0
 80057da:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80057dc:	4b22      	ldr	r3, [pc, #136]	; (8005868 <MX_SPI4_Init+0xa4>)
 80057de:	220f      	movs	r2, #15
 80057e0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80057e2:	4b21      	ldr	r3, [pc, #132]	; (8005868 <MX_SPI4_Init+0xa4>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80057e8:	4b1f      	ldr	r3, [pc, #124]	; (8005868 <MX_SPI4_Init+0xa4>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80057ee:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <MX_SPI4_Init+0xa4>)
 80057f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80057f4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80057f6:	4b1c      	ldr	r3, [pc, #112]	; (8005868 <MX_SPI4_Init+0xa4>)
 80057f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80057fc:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80057fe:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <MX_SPI4_Init+0xa4>)
 8005800:	2200      	movs	r2, #0
 8005802:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8005804:	4b18      	ldr	r3, [pc, #96]	; (8005868 <MX_SPI4_Init+0xa4>)
 8005806:	2200      	movs	r2, #0
 8005808:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800580a:	4b17      	ldr	r3, [pc, #92]	; (8005868 <MX_SPI4_Init+0xa4>)
 800580c:	2200      	movs	r2, #0
 800580e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8005810:	4b15      	ldr	r3, [pc, #84]	; (8005868 <MX_SPI4_Init+0xa4>)
 8005812:	2200      	movs	r2, #0
 8005814:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005816:	4b14      	ldr	r3, [pc, #80]	; (8005868 <MX_SPI4_Init+0xa4>)
 8005818:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800581c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800581e:	4b12      	ldr	r3, [pc, #72]	; (8005868 <MX_SPI4_Init+0xa4>)
 8005820:	2200      	movs	r2, #0
 8005822:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8005824:	4b10      	ldr	r3, [pc, #64]	; (8005868 <MX_SPI4_Init+0xa4>)
 8005826:	2200      	movs	r2, #0
 8005828:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800582a:	4b0f      	ldr	r3, [pc, #60]	; (8005868 <MX_SPI4_Init+0xa4>)
 800582c:	2200      	movs	r2, #0
 800582e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <MX_SPI4_Init+0xa4>)
 8005832:	2200      	movs	r2, #0
 8005834:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8005836:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <MX_SPI4_Init+0xa4>)
 8005838:	2200      	movs	r2, #0
 800583a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800583c:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <MX_SPI4_Init+0xa4>)
 800583e:	2200      	movs	r2, #0
 8005840:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8005842:	4b09      	ldr	r3, [pc, #36]	; (8005868 <MX_SPI4_Init+0xa4>)
 8005844:	2200      	movs	r2, #0
 8005846:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8005848:	4b07      	ldr	r3, [pc, #28]	; (8005868 <MX_SPI4_Init+0xa4>)
 800584a:	2200      	movs	r2, #0
 800584c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800584e:	4b06      	ldr	r3, [pc, #24]	; (8005868 <MX_SPI4_Init+0xa4>)
 8005850:	2200      	movs	r2, #0
 8005852:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8005854:	4804      	ldr	r0, [pc, #16]	; (8005868 <MX_SPI4_Init+0xa4>)
 8005856:	f00b fe5d 	bl	8011514 <HAL_SPI_Init>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8005860:	f7ff ff4a 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8005864:	bf00      	nop
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20000cc4 	.word	0x20000cc4
 800586c:	40013400 	.word	0x40013400

08005870 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b0b8      	sub	sp, #224	; 0xe0
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005878:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	605a      	str	r2, [r3, #4]
 8005882:	609a      	str	r2, [r3, #8]
 8005884:	60da      	str	r2, [r3, #12]
 8005886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005888:	f107 0318 	add.w	r3, r7, #24
 800588c:	22b4      	movs	r2, #180	; 0xb4
 800588e:	2100      	movs	r1, #0
 8005890:	4618      	mov	r0, r3
 8005892:	f011 fca9 	bl	80171e8 <memset>
  if(spiHandle->Instance==SPI3)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a4b      	ldr	r2, [pc, #300]	; (80059c8 <HAL_SPI_MspInit+0x158>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d156      	bne.n	800594e <HAL_SPI_MspInit+0xde>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80058a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 80058a6:	2319      	movs	r3, #25
 80058a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 80058aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058ae:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80058b0:	2302      	movs	r3, #2
 80058b2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80058b4:	2302      	movs	r3, #2
 80058b6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80058b8:	2302      	movs	r3, #2
 80058ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80058bc:	2300      	movs	r3, #0
 80058be:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80058c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058c4:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80058ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058ce:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058d0:	f107 0318 	add.w	r3, r7, #24
 80058d4:	4618      	mov	r0, r3
 80058d6:	f009 fd89 	bl	800f3ec <HAL_RCCEx_PeriphCLKConfig>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 80058e0:	f7ff ff0a 	bl	80056f8 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80058e4:	4b39      	ldr	r3, [pc, #228]	; (80059cc <HAL_SPI_MspInit+0x15c>)
 80058e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058ea:	4a38      	ldr	r2, [pc, #224]	; (80059cc <HAL_SPI_MspInit+0x15c>)
 80058ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80058f4:	4b35      	ldr	r3, [pc, #212]	; (80059cc <HAL_SPI_MspInit+0x15c>)
 80058f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005902:	4b32      	ldr	r3, [pc, #200]	; (80059cc <HAL_SPI_MspInit+0x15c>)
 8005904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005908:	4a30      	ldr	r2, [pc, #192]	; (80059cc <HAL_SPI_MspInit+0x15c>)
 800590a:	f043 0304 	orr.w	r3, r3, #4
 800590e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005912:	4b2e      	ldr	r3, [pc, #184]	; (80059cc <HAL_SPI_MspInit+0x15c>)
 8005914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005920:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005924:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005928:	2302      	movs	r3, #2
 800592a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592e:	2300      	movs	r3, #0
 8005930:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005934:	2300      	movs	r3, #0
 8005936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800593a:	2306      	movs	r3, #6
 800593c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005940:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005944:	4619      	mov	r1, r3
 8005946:	4822      	ldr	r0, [pc, #136]	; (80059d0 <HAL_SPI_MspInit+0x160>)
 8005948:	f007 f82e 	bl	800c9a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800594c:	e038      	b.n	80059c0 <HAL_SPI_MspInit+0x150>
  else if(spiHandle->Instance==SPI4)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a20      	ldr	r2, [pc, #128]	; (80059d4 <HAL_SPI_MspInit+0x164>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d133      	bne.n	80059c0 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005958:	4b1c      	ldr	r3, [pc, #112]	; (80059cc <HAL_SPI_MspInit+0x15c>)
 800595a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800595e:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <HAL_SPI_MspInit+0x15c>)
 8005960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005964:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005968:	4b18      	ldr	r3, [pc, #96]	; (80059cc <HAL_SPI_MspInit+0x15c>)
 800596a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800596e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005976:	4b15      	ldr	r3, [pc, #84]	; (80059cc <HAL_SPI_MspInit+0x15c>)
 8005978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800597c:	4a13      	ldr	r2, [pc, #76]	; (80059cc <HAL_SPI_MspInit+0x15c>)
 800597e:	f043 0310 	orr.w	r3, r3, #16
 8005982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005986:	4b11      	ldr	r3, [pc, #68]	; (80059cc <HAL_SPI_MspInit+0x15c>)
 8005988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	60bb      	str	r3, [r7, #8]
 8005992:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 8005994:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8005998:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800599c:	2302      	movs	r3, #2
 800599e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80059ae:	2305      	movs	r3, #5
 80059b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80059b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80059b8:	4619      	mov	r1, r3
 80059ba:	4807      	ldr	r0, [pc, #28]	; (80059d8 <HAL_SPI_MspInit+0x168>)
 80059bc:	f006 fff4 	bl	800c9a8 <HAL_GPIO_Init>
}
 80059c0:	bf00      	nop
 80059c2:	37e0      	adds	r7, #224	; 0xe0
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40003c00 	.word	0x40003c00
 80059cc:	58024400 	.word	0x58024400
 80059d0:	58020800 	.word	0x58020800
 80059d4:	40013400 	.word	0x40013400
 80059d8:	58021000 	.word	0x58021000

080059dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059e2:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <HAL_MspInit+0x30>)
 80059e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059e8:	4a08      	ldr	r2, [pc, #32]	; (8005a0c <HAL_MspInit+0x30>)
 80059ea:	f043 0302 	orr.w	r3, r3, #2
 80059ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_MspInit+0x30>)
 80059f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	607b      	str	r3, [r7, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	58024400 	.word	0x58024400

08005a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005a14:	e7fe      	b.n	8005a14 <NMI_Handler+0x4>

08005a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a16:	b480      	push	{r7}
 8005a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a1a:	e7fe      	b.n	8005a1a <HardFault_Handler+0x4>

08005a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a20:	e7fe      	b.n	8005a20 <MemManage_Handler+0x4>

08005a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a22:	b480      	push	{r7}
 8005a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a26:	e7fe      	b.n	8005a26 <BusFault_Handler+0x4>

08005a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a2c:	e7fe      	b.n	8005a2c <UsageFault_Handler+0x4>

08005a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a32:	bf00      	nop
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a40:	bf00      	nop
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a4e:	bf00      	nop
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a5c:	f001 fcbc 	bl	80073d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a60:	bf00      	nop
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8005a68:	4802      	ldr	r0, [pc, #8]	; (8005a74 <DMA1_Stream0_IRQHandler+0x10>)
 8005a6a:	f005 fc7d 	bl	800b368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005a6e:	bf00      	nop
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20001174 	.word	0x20001174

08005a78 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8005a7c:	4802      	ldr	r0, [pc, #8]	; (8005a88 <DMA1_Stream1_IRQHandler+0x10>)
 8005a7e:	f005 fc73 	bl	800b368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005a82:	bf00      	nop
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20001414 	.word	0x20001414

08005a8c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8005a90:	4802      	ldr	r0, [pc, #8]	; (8005a9c <DMA1_Stream2_IRQHandler+0x10>)
 8005a92:	f005 fc69 	bl	800b368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005a96:	bf00      	nop
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2000139c 	.word	0x2000139c

08005aa0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8005aa4:	4802      	ldr	r0, [pc, #8]	; (8005ab0 <I2C2_ER_IRQHandler+0x10>)
 8005aa6:	f007 fbd5 	bl	800d254 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8005aaa:	bf00      	nop
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	2000026c 	.word	0x2000026c

08005ab4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005ab8:	4802      	ldr	r0, [pc, #8]	; (8005ac4 <USART3_IRQHandler+0x10>)
 8005aba:	f00e fe99 	bl	80147f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005abe:	bf00      	nop
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	2000130c 	.word	0x2000130c

08005ac8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005acc:	4802      	ldr	r0, [pc, #8]	; (8005ad8 <UART5_IRQHandler+0x10>)
 8005ace:	f00e fe8f 	bl	80147f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005ad2:	bf00      	nop
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	200011ec 	.word	0x200011ec

08005adc <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8005ae0:	4802      	ldr	r0, [pc, #8]	; (8005aec <ADC3_IRQHandler+0x10>)
 8005ae2:	f002 fae9 	bl	80080b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8005ae6:	bf00      	nop
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	200001d4 	.word	0x200001d4

08005af0 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8005af4:	4802      	ldr	r0, [pc, #8]	; (8005b00 <TIM23_IRQHandler+0x10>)
 8005af6:	f00d fb63 	bl	80131c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8005afa:	bf00      	nop
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	200010dc 	.word	0x200010dc

08005b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005b08:	4b34      	ldr	r3, [pc, #208]	; (8005bdc <SystemInit+0xd8>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0e:	4a33      	ldr	r2, [pc, #204]	; (8005bdc <SystemInit+0xd8>)
 8005b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005b18:	4b31      	ldr	r3, [pc, #196]	; (8005be0 <SystemInit+0xdc>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 030f 	and.w	r3, r3, #15
 8005b20:	2b06      	cmp	r3, #6
 8005b22:	d807      	bhi.n	8005b34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005b24:	4b2e      	ldr	r3, [pc, #184]	; (8005be0 <SystemInit+0xdc>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f023 030f 	bic.w	r3, r3, #15
 8005b2c:	4a2c      	ldr	r2, [pc, #176]	; (8005be0 <SystemInit+0xdc>)
 8005b2e:	f043 0307 	orr.w	r3, r3, #7
 8005b32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005b34:	4b2b      	ldr	r3, [pc, #172]	; (8005be4 <SystemInit+0xe0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a2a      	ldr	r2, [pc, #168]	; (8005be4 <SystemInit+0xe0>)
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005b40:	4b28      	ldr	r3, [pc, #160]	; (8005be4 <SystemInit+0xe0>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005b46:	4b27      	ldr	r3, [pc, #156]	; (8005be4 <SystemInit+0xe0>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	4926      	ldr	r1, [pc, #152]	; (8005be4 <SystemInit+0xe0>)
 8005b4c:	4b26      	ldr	r3, [pc, #152]	; (8005be8 <SystemInit+0xe4>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005b52:	4b23      	ldr	r3, [pc, #140]	; (8005be0 <SystemInit+0xdc>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005b5e:	4b20      	ldr	r3, [pc, #128]	; (8005be0 <SystemInit+0xdc>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f023 030f 	bic.w	r3, r3, #15
 8005b66:	4a1e      	ldr	r2, [pc, #120]	; (8005be0 <SystemInit+0xdc>)
 8005b68:	f043 0307 	orr.w	r3, r3, #7
 8005b6c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005b6e:	4b1d      	ldr	r3, [pc, #116]	; (8005be4 <SystemInit+0xe0>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005b74:	4b1b      	ldr	r3, [pc, #108]	; (8005be4 <SystemInit+0xe0>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005b7a:	4b1a      	ldr	r3, [pc, #104]	; (8005be4 <SystemInit+0xe0>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005b80:	4b18      	ldr	r3, [pc, #96]	; (8005be4 <SystemInit+0xe0>)
 8005b82:	4a1a      	ldr	r2, [pc, #104]	; (8005bec <SystemInit+0xe8>)
 8005b84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005b86:	4b17      	ldr	r3, [pc, #92]	; (8005be4 <SystemInit+0xe0>)
 8005b88:	4a19      	ldr	r2, [pc, #100]	; (8005bf0 <SystemInit+0xec>)
 8005b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005b8c:	4b15      	ldr	r3, [pc, #84]	; (8005be4 <SystemInit+0xe0>)
 8005b8e:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <SystemInit+0xf0>)
 8005b90:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005b92:	4b14      	ldr	r3, [pc, #80]	; (8005be4 <SystemInit+0xe0>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005b98:	4b12      	ldr	r3, [pc, #72]	; (8005be4 <SystemInit+0xe0>)
 8005b9a:	4a16      	ldr	r2, [pc, #88]	; (8005bf4 <SystemInit+0xf0>)
 8005b9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005b9e:	4b11      	ldr	r3, [pc, #68]	; (8005be4 <SystemInit+0xe0>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005ba4:	4b0f      	ldr	r3, [pc, #60]	; (8005be4 <SystemInit+0xe0>)
 8005ba6:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <SystemInit+0xf0>)
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005baa:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <SystemInit+0xe0>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005bb0:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <SystemInit+0xe0>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a0b      	ldr	r2, [pc, #44]	; (8005be4 <SystemInit+0xe0>)
 8005bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005bbc:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <SystemInit+0xe0>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005bc2:	4b0d      	ldr	r3, [pc, #52]	; (8005bf8 <SystemInit+0xf4>)
 8005bc4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005bc8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005bca:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <SystemInit+0xd8>)
 8005bcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bd0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005bd2:	bf00      	nop
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	e000ed00 	.word	0xe000ed00
 8005be0:	52002000 	.word	0x52002000
 8005be4:	58024400 	.word	0x58024400
 8005be8:	eaf6ed7f 	.word	0xeaf6ed7f
 8005bec:	02020200 	.word	0x02020200
 8005bf0:	01ff0000 	.word	0x01ff0000
 8005bf4:	01010280 	.word	0x01010280
 8005bf8:	52004000 	.word	0x52004000

08005bfc <MX_TIM1_Init>:
TIM_HandleTypeDef htim24;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b098      	sub	sp, #96	; 0x60
 8005c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	605a      	str	r2, [r3, #4]
 8005c0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	605a      	str	r2, [r3, #4]
 8005c18:	609a      	str	r2, [r3, #8]
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	611a      	str	r2, [r3, #16]
 8005c1e:	615a      	str	r2, [r3, #20]
 8005c20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005c22:	1d3b      	adds	r3, r7, #4
 8005c24:	2234      	movs	r2, #52	; 0x34
 8005c26:	2100      	movs	r1, #0
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f011 fadd 	bl	80171e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005c2e:	4b39      	ldr	r3, [pc, #228]	; (8005d14 <MX_TIM1_Init+0x118>)
 8005c30:	4a39      	ldr	r2, [pc, #228]	; (8005d18 <MX_TIM1_Init+0x11c>)
 8005c32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005c34:	4b37      	ldr	r3, [pc, #220]	; (8005d14 <MX_TIM1_Init+0x118>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c3a:	4b36      	ldr	r3, [pc, #216]	; (8005d14 <MX_TIM1_Init+0x118>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 343;
 8005c40:	4b34      	ldr	r3, [pc, #208]	; (8005d14 <MX_TIM1_Init+0x118>)
 8005c42:	f240 1257 	movw	r2, #343	; 0x157
 8005c46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c48:	4b32      	ldr	r3, [pc, #200]	; (8005d14 <MX_TIM1_Init+0x118>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005c4e:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <MX_TIM1_Init+0x118>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c54:	4b2f      	ldr	r3, [pc, #188]	; (8005d14 <MX_TIM1_Init+0x118>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005c5a:	482e      	ldr	r0, [pc, #184]	; (8005d14 <MX_TIM1_Init+0x118>)
 8005c5c:	f00c fcdc 	bl	8012618 <HAL_TIM_PWM_Init>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8005c66:	f7ff fd47 	bl	80056f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005c76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4825      	ldr	r0, [pc, #148]	; (8005d14 <MX_TIM1_Init+0x118>)
 8005c7e:	f00e fb0f 	bl	80142a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005c88:	f7ff fd36 	bl	80056f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c8c:	2360      	movs	r3, #96	; 0x60
 8005c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c94:	2300      	movs	r3, #0
 8005c96:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ca8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005cac:	2200      	movs	r2, #0
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4818      	ldr	r0, [pc, #96]	; (8005d14 <MX_TIM1_Init+0x118>)
 8005cb2:	f00d fba5 	bl	8013400 <HAL_TIM_PWM_ConfigChannel>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005cbc:	f7ff fd1c 	bl	80056f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cd8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005cec:	2300      	movs	r3, #0
 8005cee:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005cf0:	1d3b      	adds	r3, r7, #4
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4807      	ldr	r0, [pc, #28]	; (8005d14 <MX_TIM1_Init+0x118>)
 8005cf6:	f00e fb6f 	bl	80143d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8005d00:	f7ff fcfa 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005d04:	4803      	ldr	r0, [pc, #12]	; (8005d14 <MX_TIM1_Init+0x118>)
 8005d06:	f000 ff5d 	bl	8006bc4 <HAL_TIM_MspPostInit>

}
 8005d0a:	bf00      	nop
 8005d0c:	3760      	adds	r7, #96	; 0x60
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000d4c 	.word	0x20000d4c
 8005d18:	40010000 	.word	0x40010000

08005d1c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08c      	sub	sp, #48	; 0x30
 8005d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005d22:	f107 030c 	add.w	r3, r7, #12
 8005d26:	2224      	movs	r2, #36	; 0x24
 8005d28:	2100      	movs	r1, #0
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f011 fa5c 	bl	80171e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d30:	463b      	mov	r3, r7
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	605a      	str	r2, [r3, #4]
 8005d38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005d3a:	4b21      	ldr	r3, [pc, #132]	; (8005dc0 <MX_TIM2_Init+0xa4>)
 8005d3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005d42:	4b1f      	ldr	r3, [pc, #124]	; (8005dc0 <MX_TIM2_Init+0xa4>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d48:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <MX_TIM2_Init+0xa4>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8005d4e:	4b1c      	ldr	r3, [pc, #112]	; (8005dc0 <MX_TIM2_Init+0xa4>)
 8005d50:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005d54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d56:	4b1a      	ldr	r3, [pc, #104]	; (8005dc0 <MX_TIM2_Init+0xa4>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d5c:	4b18      	ldr	r3, [pc, #96]	; (8005dc0 <MX_TIM2_Init+0xa4>)
 8005d5e:	2280      	movs	r2, #128	; 0x80
 8005d60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005d62:	2303      	movs	r3, #3
 8005d64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005d66:	2300      	movs	r3, #0
 8005d68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8005d72:	230a      	movs	r3, #10
 8005d74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005d76:	2300      	movs	r3, #0
 8005d78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8005d82:	230a      	movs	r3, #10
 8005d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005d86:	f107 030c 	add.w	r3, r7, #12
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	480c      	ldr	r0, [pc, #48]	; (8005dc0 <MX_TIM2_Init+0xa4>)
 8005d8e:	f00d f8e3 	bl	8012f58 <HAL_TIM_Encoder_Init>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8005d98:	f7ff fcae 	bl	80056f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005da4:	463b      	mov	r3, r7
 8005da6:	4619      	mov	r1, r3
 8005da8:	4805      	ldr	r0, [pc, #20]	; (8005dc0 <MX_TIM2_Init+0xa4>)
 8005daa:	f00e fa79 	bl	80142a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8005db4:	f7ff fca0 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005db8:	bf00      	nop
 8005dba:	3730      	adds	r7, #48	; 0x30
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	20000d98 	.word	0x20000d98

08005dc4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08e      	sub	sp, #56	; 0x38
 8005dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	605a      	str	r2, [r3, #4]
 8005dd4:	609a      	str	r2, [r3, #8]
 8005dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dd8:	f107 031c 	add.w	r3, r7, #28
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	605a      	str	r2, [r3, #4]
 8005de2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005de4:	463b      	mov	r3, r7
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	605a      	str	r2, [r3, #4]
 8005dec:	609a      	str	r2, [r3, #8]
 8005dee:	60da      	str	r2, [r3, #12]
 8005df0:	611a      	str	r2, [r3, #16]
 8005df2:	615a      	str	r2, [r3, #20]
 8005df4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005df6:	4b34      	ldr	r3, [pc, #208]	; (8005ec8 <MX_TIM3_Init+0x104>)
 8005df8:	4a34      	ldr	r2, [pc, #208]	; (8005ecc <MX_TIM3_Init+0x108>)
 8005dfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 275-1;
 8005dfc:	4b32      	ldr	r3, [pc, #200]	; (8005ec8 <MX_TIM3_Init+0x104>)
 8005dfe:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005e02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e04:	4b30      	ldr	r3, [pc, #192]	; (8005ec8 <MX_TIM3_Init+0x104>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8005e0a:	4b2f      	ldr	r3, [pc, #188]	; (8005ec8 <MX_TIM3_Init+0x104>)
 8005e0c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005e10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e12:	4b2d      	ldr	r3, [pc, #180]	; (8005ec8 <MX_TIM3_Init+0x104>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e18:	4b2b      	ldr	r3, [pc, #172]	; (8005ec8 <MX_TIM3_Init+0x104>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005e1e:	482a      	ldr	r0, [pc, #168]	; (8005ec8 <MX_TIM3_Init+0x104>)
 8005e20:	f00c fb1d 	bl	801245e <HAL_TIM_Base_Init>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8005e2a:	f7ff fc65 	bl	80056f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005e34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4823      	ldr	r0, [pc, #140]	; (8005ec8 <MX_TIM3_Init+0x104>)
 8005e3c:	f00d fbf4 	bl	8013628 <HAL_TIM_ConfigClockSource>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8005e46:	f7ff fc57 	bl	80056f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005e4a:	481f      	ldr	r0, [pc, #124]	; (8005ec8 <MX_TIM3_Init+0x104>)
 8005e4c:	f00c fbe4 	bl	8012618 <HAL_TIM_PWM_Init>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8005e56:	f7ff fc4f 	bl	80056f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005e62:	f107 031c 	add.w	r3, r7, #28
 8005e66:	4619      	mov	r1, r3
 8005e68:	4817      	ldr	r0, [pc, #92]	; (8005ec8 <MX_TIM3_Init+0x104>)
 8005e6a:	f00e fa19 	bl	80142a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8005e74:	f7ff fc40 	bl	80056f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e78:	2360      	movs	r3, #96	; 0x60
 8005e7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1999;
 8005e7c:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8005e80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	4619      	mov	r1, r3
 8005e90:	480d      	ldr	r0, [pc, #52]	; (8005ec8 <MX_TIM3_Init+0x104>)
 8005e92:	f00d fab5 	bl	8013400 <HAL_TIM_PWM_ConfigChannel>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8005e9c:	f7ff fc2c 	bl	80056f8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ea4:	463b      	mov	r3, r7
 8005ea6:	2204      	movs	r2, #4
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4807      	ldr	r0, [pc, #28]	; (8005ec8 <MX_TIM3_Init+0x104>)
 8005eac:	f00d faa8 	bl	8013400 <HAL_TIM_PWM_ConfigChannel>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8005eb6:	f7ff fc1f 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005eba:	4803      	ldr	r0, [pc, #12]	; (8005ec8 <MX_TIM3_Init+0x104>)
 8005ebc:	f000 fe82 	bl	8006bc4 <HAL_TIM_MspPostInit>

}
 8005ec0:	bf00      	nop
 8005ec2:	3738      	adds	r7, #56	; 0x38
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20000de4 	.word	0x20000de4
 8005ecc:	40000400 	.word	0x40000400

08005ed0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08c      	sub	sp, #48	; 0x30
 8005ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005ed6:	f107 030c 	add.w	r3, r7, #12
 8005eda:	2224      	movs	r2, #36	; 0x24
 8005edc:	2100      	movs	r1, #0
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f011 f982 	bl	80171e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	605a      	str	r2, [r3, #4]
 8005eec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005eee:	4b21      	ldr	r3, [pc, #132]	; (8005f74 <MX_TIM4_Init+0xa4>)
 8005ef0:	4a21      	ldr	r2, [pc, #132]	; (8005f78 <MX_TIM4_Init+0xa8>)
 8005ef2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005ef4:	4b1f      	ldr	r3, [pc, #124]	; (8005f74 <MX_TIM4_Init+0xa4>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005efa:	4b1e      	ldr	r3, [pc, #120]	; (8005f74 <MX_TIM4_Init+0xa4>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8005f00:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <MX_TIM4_Init+0xa4>)
 8005f02:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8005f06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f08:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <MX_TIM4_Init+0xa4>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f0e:	4b19      	ldr	r3, [pc, #100]	; (8005f74 <MX_TIM4_Init+0xa4>)
 8005f10:	2280      	movs	r2, #128	; 0x80
 8005f12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005f14:	2303      	movs	r3, #3
 8005f16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005f30:	2300      	movs	r3, #0
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005f38:	f107 030c 	add.w	r3, r7, #12
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	480d      	ldr	r0, [pc, #52]	; (8005f74 <MX_TIM4_Init+0xa4>)
 8005f40:	f00d f80a 	bl	8012f58 <HAL_TIM_Encoder_Init>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005f4a:	f7ff fbd5 	bl	80056f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005f56:	463b      	mov	r3, r7
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4806      	ldr	r0, [pc, #24]	; (8005f74 <MX_TIM4_Init+0xa4>)
 8005f5c:	f00e f9a0 	bl	80142a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005f66:	f7ff fbc7 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005f6a:	bf00      	nop
 8005f6c:	3730      	adds	r7, #48	; 0x30
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000e30 	.word	0x20000e30
 8005f78:	40000800 	.word	0x40000800

08005f7c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08e      	sub	sp, #56	; 0x38
 8005f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	605a      	str	r2, [r3, #4]
 8005f8c:	609a      	str	r2, [r3, #8]
 8005f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f90:	f107 031c 	add.w	r3, r7, #28
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	605a      	str	r2, [r3, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f9c:	463b      	mov	r3, r7
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	605a      	str	r2, [r3, #4]
 8005fa4:	609a      	str	r2, [r3, #8]
 8005fa6:	60da      	str	r2, [r3, #12]
 8005fa8:	611a      	str	r2, [r3, #16]
 8005faa:	615a      	str	r2, [r3, #20]
 8005fac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005fae:	4b33      	ldr	r3, [pc, #204]	; (800607c <MX_TIM5_Init+0x100>)
 8005fb0:	4a33      	ldr	r2, [pc, #204]	; (8006080 <MX_TIM5_Init+0x104>)
 8005fb2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 8005fb4:	4b31      	ldr	r3, [pc, #196]	; (800607c <MX_TIM5_Init+0x100>)
 8005fb6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005fba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fbc:	4b2f      	ldr	r3, [pc, #188]	; (800607c <MX_TIM5_Init+0x100>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8005fc2:	4b2e      	ldr	r3, [pc, #184]	; (800607c <MX_TIM5_Init+0x100>)
 8005fc4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005fc8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fca:	4b2c      	ldr	r3, [pc, #176]	; (800607c <MX_TIM5_Init+0x100>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fd0:	4b2a      	ldr	r3, [pc, #168]	; (800607c <MX_TIM5_Init+0x100>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005fd6:	4829      	ldr	r0, [pc, #164]	; (800607c <MX_TIM5_Init+0x100>)
 8005fd8:	f00c fa41 	bl	801245e <HAL_TIM_Base_Init>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 8005fe2:	f7ff fb89 	bl	80056f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005fec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4822      	ldr	r0, [pc, #136]	; (800607c <MX_TIM5_Init+0x100>)
 8005ff4:	f00d fb18 	bl	8013628 <HAL_TIM_ConfigClockSource>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 8005ffe:	f7ff fb7b 	bl	80056f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8006002:	481e      	ldr	r0, [pc, #120]	; (800607c <MX_TIM5_Init+0x100>)
 8006004:	f00c fb08 	bl	8012618 <HAL_TIM_PWM_Init>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 800600e:	f7ff fb73 	bl	80056f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006016:	2300      	movs	r3, #0
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800601a:	f107 031c 	add.w	r3, r7, #28
 800601e:	4619      	mov	r1, r3
 8006020:	4816      	ldr	r0, [pc, #88]	; (800607c <MX_TIM5_Init+0x100>)
 8006022:	f00e f93d 	bl	80142a0 <HAL_TIMEx_MasterConfigSynchronization>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 800602c:	f7ff fb64 	bl	80056f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006030:	2360      	movs	r3, #96	; 0x60
 8006032:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500-1;
 8006034:	f240 53db 	movw	r3, #1499	; 0x5db
 8006038:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800603a:	2300      	movs	r3, #0
 800603c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800603e:	2300      	movs	r3, #0
 8006040:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006042:	463b      	mov	r3, r7
 8006044:	2200      	movs	r2, #0
 8006046:	4619      	mov	r1, r3
 8006048:	480c      	ldr	r0, [pc, #48]	; (800607c <MX_TIM5_Init+0x100>)
 800604a:	f00d f9d9 	bl	8013400 <HAL_TIM_PWM_ConfigChannel>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8006054:	f7ff fb50 	bl	80056f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006058:	463b      	mov	r3, r7
 800605a:	2204      	movs	r2, #4
 800605c:	4619      	mov	r1, r3
 800605e:	4807      	ldr	r0, [pc, #28]	; (800607c <MX_TIM5_Init+0x100>)
 8006060:	f00d f9ce 	bl	8013400 <HAL_TIM_PWM_ConfigChannel>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 800606a:	f7ff fb45 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800606e:	4803      	ldr	r0, [pc, #12]	; (800607c <MX_TIM5_Init+0x100>)
 8006070:	f000 fda8 	bl	8006bc4 <HAL_TIM_MspPostInit>

}
 8006074:	bf00      	nop
 8006076:	3738      	adds	r7, #56	; 0x38
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20000e7c 	.word	0x20000e7c
 8006080:	40000c00 	.word	0x40000c00

08006084 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800608a:	1d3b      	adds	r3, r7, #4
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	605a      	str	r2, [r3, #4]
 8006092:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006094:	4b15      	ldr	r3, [pc, #84]	; (80060ec <MX_TIM6_Init+0x68>)
 8006096:	4a16      	ldr	r2, [pc, #88]	; (80060f0 <MX_TIM6_Init+0x6c>)
 8006098:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 800609a:	4b14      	ldr	r3, [pc, #80]	; (80060ec <MX_TIM6_Init+0x68>)
 800609c:	f44f 7289 	mov.w	r2, #274	; 0x112
 80060a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060a2:	4b12      	ldr	r3, [pc, #72]	; (80060ec <MX_TIM6_Init+0x68>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80060a8:	4b10      	ldr	r3, [pc, #64]	; (80060ec <MX_TIM6_Init+0x68>)
 80060aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060b0:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <MX_TIM6_Init+0x68>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80060b6:	480d      	ldr	r0, [pc, #52]	; (80060ec <MX_TIM6_Init+0x68>)
 80060b8:	f00c f9d1 	bl	801245e <HAL_TIM_Base_Init>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80060c2:	f7ff fb19 	bl	80056f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060c6:	2300      	movs	r3, #0
 80060c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80060ce:	1d3b      	adds	r3, r7, #4
 80060d0:	4619      	mov	r1, r3
 80060d2:	4806      	ldr	r0, [pc, #24]	; (80060ec <MX_TIM6_Init+0x68>)
 80060d4:	f00e f8e4 	bl	80142a0 <HAL_TIMEx_MasterConfigSynchronization>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80060de:	f7ff fb0b 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000ec8 	.word	0x20000ec8
 80060f0:	40001000 	.word	0x40001000

080060f4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08c      	sub	sp, #48	; 0x30
 80060f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80060fa:	f107 030c 	add.w	r3, r7, #12
 80060fe:	2224      	movs	r2, #36	; 0x24
 8006100:	2100      	movs	r1, #0
 8006102:	4618      	mov	r0, r3
 8006104:	f011 f870 	bl	80171e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006108:	463b      	mov	r3, r7
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	605a      	str	r2, [r3, #4]
 8006110:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006112:	4b23      	ldr	r3, [pc, #140]	; (80061a0 <MX_TIM8_Init+0xac>)
 8006114:	4a23      	ldr	r2, [pc, #140]	; (80061a4 <MX_TIM8_Init+0xb0>)
 8006116:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006118:	4b21      	ldr	r3, [pc, #132]	; (80061a0 <MX_TIM8_Init+0xac>)
 800611a:	2200      	movs	r2, #0
 800611c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800611e:	4b20      	ldr	r3, [pc, #128]	; (80061a0 <MX_TIM8_Init+0xac>)
 8006120:	2200      	movs	r2, #0
 8006122:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 8006124:	4b1e      	ldr	r3, [pc, #120]	; (80061a0 <MX_TIM8_Init+0xac>)
 8006126:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800612a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800612c:	4b1c      	ldr	r3, [pc, #112]	; (80061a0 <MX_TIM8_Init+0xac>)
 800612e:	2200      	movs	r2, #0
 8006130:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006132:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <MX_TIM8_Init+0xac>)
 8006134:	2200      	movs	r2, #0
 8006136:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006138:	4b19      	ldr	r3, [pc, #100]	; (80061a0 <MX_TIM8_Init+0xac>)
 800613a:	2280      	movs	r2, #128	; 0x80
 800613c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800613e:	2303      	movs	r3, #3
 8006140:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006142:	2300      	movs	r3, #0
 8006144:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006146:	2301      	movs	r3, #1
 8006148:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800614a:	2300      	movs	r3, #0
 800614c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006152:	2300      	movs	r3, #0
 8006154:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006156:	2301      	movs	r3, #1
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800615a:	2300      	movs	r3, #0
 800615c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800615e:	2300      	movs	r3, #0
 8006160:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006162:	f107 030c 	add.w	r3, r7, #12
 8006166:	4619      	mov	r1, r3
 8006168:	480d      	ldr	r0, [pc, #52]	; (80061a0 <MX_TIM8_Init+0xac>)
 800616a:	f00c fef5 	bl	8012f58 <HAL_TIM_Encoder_Init>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8006174:	f7ff fac0 	bl	80056f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006178:	2300      	movs	r3, #0
 800617a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800617c:	2300      	movs	r3, #0
 800617e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006180:	2300      	movs	r3, #0
 8006182:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006184:	463b      	mov	r3, r7
 8006186:	4619      	mov	r1, r3
 8006188:	4805      	ldr	r0, [pc, #20]	; (80061a0 <MX_TIM8_Init+0xac>)
 800618a:	f00e f889 	bl	80142a0 <HAL_TIMEx_MasterConfigSynchronization>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8006194:	f7ff fab0 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006198:	bf00      	nop
 800619a:	3730      	adds	r7, #48	; 0x30
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	20000f14 	.word	0x20000f14
 80061a4:	40010400 	.word	0x40010400

080061a8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80061ae:	1d3b      	adds	r3, r7, #4
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	605a      	str	r2, [r3, #4]
 80061b6:	609a      	str	r2, [r3, #8]
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	611a      	str	r2, [r3, #16]
 80061bc:	615a      	str	r2, [r3, #20]
 80061be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80061c0:	4b1f      	ldr	r3, [pc, #124]	; (8006240 <MX_TIM13_Init+0x98>)
 80061c2:	4a20      	ldr	r2, [pc, #128]	; (8006244 <MX_TIM13_Init+0x9c>)
 80061c4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550-1;
 80061c6:	4b1e      	ldr	r3, [pc, #120]	; (8006240 <MX_TIM13_Init+0x98>)
 80061c8:	f240 2225 	movw	r2, #549	; 0x225
 80061cc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061ce:	4b1c      	ldr	r3, [pc, #112]	; (8006240 <MX_TIM13_Init+0x98>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 80061d4:	4b1a      	ldr	r3, [pc, #104]	; (8006240 <MX_TIM13_Init+0x98>)
 80061d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80061da:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061dc:	4b18      	ldr	r3, [pc, #96]	; (8006240 <MX_TIM13_Init+0x98>)
 80061de:	2200      	movs	r2, #0
 80061e0:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80061e2:	4b17      	ldr	r3, [pc, #92]	; (8006240 <MX_TIM13_Init+0x98>)
 80061e4:	2280      	movs	r2, #128	; 0x80
 80061e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80061e8:	4815      	ldr	r0, [pc, #84]	; (8006240 <MX_TIM13_Init+0x98>)
 80061ea:	f00c f938 	bl	801245e <HAL_TIM_Base_Init>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 80061f4:	f7ff fa80 	bl	80056f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80061f8:	4811      	ldr	r0, [pc, #68]	; (8006240 <MX_TIM13_Init+0x98>)
 80061fa:	f00c fa0d 	bl	8012618 <HAL_TIM_PWM_Init>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8006204:	f7ff fa78 	bl	80056f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006208:	2360      	movs	r3, #96	; 0x60
 800620a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800620c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8006210:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800621a:	1d3b      	adds	r3, r7, #4
 800621c:	2200      	movs	r2, #0
 800621e:	4619      	mov	r1, r3
 8006220:	4807      	ldr	r0, [pc, #28]	; (8006240 <MX_TIM13_Init+0x98>)
 8006222:	f00d f8ed 	bl	8013400 <HAL_TIM_PWM_ConfigChannel>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 800622c:	f7ff fa64 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8006230:	4803      	ldr	r0, [pc, #12]	; (8006240 <MX_TIM13_Init+0x98>)
 8006232:	f000 fcc7 	bl	8006bc4 <HAL_TIM_MspPostInit>

}
 8006236:	bf00      	nop
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20000f60 	.word	0x20000f60
 8006244:	40001c00 	.word	0x40001c00

08006248 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800624e:	1d3b      	adds	r3, r7, #4
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	605a      	str	r2, [r3, #4]
 8006256:	609a      	str	r2, [r3, #8]
 8006258:	60da      	str	r2, [r3, #12]
 800625a:	611a      	str	r2, [r3, #16]
 800625c:	615a      	str	r2, [r3, #20]
 800625e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8006260:	4b1f      	ldr	r3, [pc, #124]	; (80062e0 <MX_TIM14_Init+0x98>)
 8006262:	4a20      	ldr	r2, [pc, #128]	; (80062e4 <MX_TIM14_Init+0x9c>)
 8006264:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 8006266:	4b1e      	ldr	r3, [pc, #120]	; (80062e0 <MX_TIM14_Init+0x98>)
 8006268:	f240 2225 	movw	r2, #549	; 0x225
 800626c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800626e:	4b1c      	ldr	r3, [pc, #112]	; (80062e0 <MX_TIM14_Init+0x98>)
 8006270:	2200      	movs	r2, #0
 8006272:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8006274:	4b1a      	ldr	r3, [pc, #104]	; (80062e0 <MX_TIM14_Init+0x98>)
 8006276:	f240 32e7 	movw	r2, #999	; 0x3e7
 800627a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800627c:	4b18      	ldr	r3, [pc, #96]	; (80062e0 <MX_TIM14_Init+0x98>)
 800627e:	2200      	movs	r2, #0
 8006280:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006282:	4b17      	ldr	r3, [pc, #92]	; (80062e0 <MX_TIM14_Init+0x98>)
 8006284:	2280      	movs	r2, #128	; 0x80
 8006286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8006288:	4815      	ldr	r0, [pc, #84]	; (80062e0 <MX_TIM14_Init+0x98>)
 800628a:	f00c f8e8 	bl	801245e <HAL_TIM_Base_Init>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8006294:	f7ff fa30 	bl	80056f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8006298:	4811      	ldr	r0, [pc, #68]	; (80062e0 <MX_TIM14_Init+0x98>)
 800629a:	f00c f9bd 	bl	8012618 <HAL_TIM_PWM_Init>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 80062a4:	f7ff fa28 	bl	80056f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80062a8:	2360      	movs	r3, #96	; 0x60
 80062aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80062ac:	f240 13f3 	movw	r3, #499	; 0x1f3
 80062b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80062ba:	1d3b      	adds	r3, r7, #4
 80062bc:	2200      	movs	r2, #0
 80062be:	4619      	mov	r1, r3
 80062c0:	4807      	ldr	r0, [pc, #28]	; (80062e0 <MX_TIM14_Init+0x98>)
 80062c2:	f00d f89d 	bl	8013400 <HAL_TIM_PWM_ConfigChannel>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80062cc:	f7ff fa14 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80062d0:	4803      	ldr	r0, [pc, #12]	; (80062e0 <MX_TIM14_Init+0x98>)
 80062d2:	f000 fc77 	bl	8006bc4 <HAL_TIM_MspPostInit>

}
 80062d6:	bf00      	nop
 80062d8:	3720      	adds	r7, #32
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000fac 	.word	0x20000fac
 80062e4:	40002000 	.word	0x40002000

080062e8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b098      	sub	sp, #96	; 0x60
 80062ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	605a      	str	r2, [r3, #4]
 80062f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	605a      	str	r2, [r3, #4]
 8006304:	609a      	str	r2, [r3, #8]
 8006306:	60da      	str	r2, [r3, #12]
 8006308:	611a      	str	r2, [r3, #16]
 800630a:	615a      	str	r2, [r3, #20]
 800630c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800630e:	1d3b      	adds	r3, r7, #4
 8006310:	2234      	movs	r2, #52	; 0x34
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f010 ff67 	bl	80171e8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800631a:	4b35      	ldr	r3, [pc, #212]	; (80063f0 <MX_TIM15_Init+0x108>)
 800631c:	4a35      	ldr	r2, [pc, #212]	; (80063f4 <MX_TIM15_Init+0x10c>)
 800631e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550-1;
 8006320:	4b33      	ldr	r3, [pc, #204]	; (80063f0 <MX_TIM15_Init+0x108>)
 8006322:	f240 2225 	movw	r2, #549	; 0x225
 8006326:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006328:	4b31      	ldr	r3, [pc, #196]	; (80063f0 <MX_TIM15_Init+0x108>)
 800632a:	2200      	movs	r2, #0
 800632c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 800632e:	4b30      	ldr	r3, [pc, #192]	; (80063f0 <MX_TIM15_Init+0x108>)
 8006330:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006334:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006336:	4b2e      	ldr	r3, [pc, #184]	; (80063f0 <MX_TIM15_Init+0x108>)
 8006338:	2200      	movs	r2, #0
 800633a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800633c:	4b2c      	ldr	r3, [pc, #176]	; (80063f0 <MX_TIM15_Init+0x108>)
 800633e:	2200      	movs	r2, #0
 8006340:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006342:	4b2b      	ldr	r3, [pc, #172]	; (80063f0 <MX_TIM15_Init+0x108>)
 8006344:	2280      	movs	r2, #128	; 0x80
 8006346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8006348:	4829      	ldr	r0, [pc, #164]	; (80063f0 <MX_TIM15_Init+0x108>)
 800634a:	f00c f965 	bl	8012618 <HAL_TIM_PWM_Init>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8006354:	f7ff f9d0 	bl	80056f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006358:	2300      	movs	r3, #0
 800635a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800635c:	2300      	movs	r3, #0
 800635e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8006360:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006364:	4619      	mov	r1, r3
 8006366:	4822      	ldr	r0, [pc, #136]	; (80063f0 <MX_TIM15_Init+0x108>)
 8006368:	f00d ff9a 	bl	80142a0 <HAL_TIMEx_MasterConfigSynchronization>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8006372:	f7ff f9c1 	bl	80056f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006376:	2360      	movs	r3, #96	; 0x60
 8006378:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 800637a:	f240 13f3 	movw	r3, #499	; 0x1f3
 800637e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006380:	2300      	movs	r3, #0
 8006382:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006384:	2300      	movs	r3, #0
 8006386:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006388:	2300      	movs	r3, #0
 800638a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800638c:	2300      	movs	r3, #0
 800638e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006390:	2300      	movs	r3, #0
 8006392:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006394:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006398:	2200      	movs	r2, #0
 800639a:	4619      	mov	r1, r3
 800639c:	4814      	ldr	r0, [pc, #80]	; (80063f0 <MX_TIM15_Init+0x108>)
 800639e:	f00d f82f 	bl	8013400 <HAL_TIM_PWM_ConfigChannel>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 80063a8:	f7ff f9a6 	bl	80056f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80063c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80063ce:	1d3b      	adds	r3, r7, #4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4807      	ldr	r0, [pc, #28]	; (80063f0 <MX_TIM15_Init+0x108>)
 80063d4:	f00e f800 	bl	80143d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80063de:	f7ff f98b 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80063e2:	4803      	ldr	r0, [pc, #12]	; (80063f0 <MX_TIM15_Init+0x108>)
 80063e4:	f000 fbee 	bl	8006bc4 <HAL_TIM_MspPostInit>

}
 80063e8:	bf00      	nop
 80063ea:	3760      	adds	r7, #96	; 0x60
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	20000ff8 	.word	0x20000ff8
 80063f4:	40014000 	.word	0x40014000

080063f8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b094      	sub	sp, #80	; 0x50
 80063fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80063fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	605a      	str	r2, [r3, #4]
 8006408:	609a      	str	r2, [r3, #8]
 800640a:	60da      	str	r2, [r3, #12]
 800640c:	611a      	str	r2, [r3, #16]
 800640e:	615a      	str	r2, [r3, #20]
 8006410:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006412:	463b      	mov	r3, r7
 8006414:	2234      	movs	r2, #52	; 0x34
 8006416:	2100      	movs	r1, #0
 8006418:	4618      	mov	r0, r3
 800641a:	f010 fee5 	bl	80171e8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800641e:	4b32      	ldr	r3, [pc, #200]	; (80064e8 <MX_TIM16_Init+0xf0>)
 8006420:	4a32      	ldr	r2, [pc, #200]	; (80064ec <MX_TIM16_Init+0xf4>)
 8006422:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8006424:	4b30      	ldr	r3, [pc, #192]	; (80064e8 <MX_TIM16_Init+0xf0>)
 8006426:	f240 2225 	movw	r2, #549	; 0x225
 800642a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800642c:	4b2e      	ldr	r3, [pc, #184]	; (80064e8 <MX_TIM16_Init+0xf0>)
 800642e:	2200      	movs	r2, #0
 8006430:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8006432:	4b2d      	ldr	r3, [pc, #180]	; (80064e8 <MX_TIM16_Init+0xf0>)
 8006434:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006438:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800643a:	4b2b      	ldr	r3, [pc, #172]	; (80064e8 <MX_TIM16_Init+0xf0>)
 800643c:	2200      	movs	r2, #0
 800643e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006440:	4b29      	ldr	r3, [pc, #164]	; (80064e8 <MX_TIM16_Init+0xf0>)
 8006442:	2200      	movs	r2, #0
 8006444:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006446:	4b28      	ldr	r3, [pc, #160]	; (80064e8 <MX_TIM16_Init+0xf0>)
 8006448:	2280      	movs	r2, #128	; 0x80
 800644a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800644c:	4826      	ldr	r0, [pc, #152]	; (80064e8 <MX_TIM16_Init+0xf0>)
 800644e:	f00c f806 	bl	801245e <HAL_TIM_Base_Init>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8006458:	f7ff f94e 	bl	80056f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800645c:	4822      	ldr	r0, [pc, #136]	; (80064e8 <MX_TIM16_Init+0xf0>)
 800645e:	f00c f8db 	bl	8012618 <HAL_TIM_PWM_Init>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8006468:	f7ff f946 	bl	80056f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800646c:	2360      	movs	r3, #96	; 0x60
 800646e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8006470:	f240 13f3 	movw	r3, #499	; 0x1f3
 8006474:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006476:	2300      	movs	r3, #0
 8006478:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800647a:	2300      	movs	r3, #0
 800647c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800647e:	2300      	movs	r3, #0
 8006480:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006482:	2300      	movs	r3, #0
 8006484:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006486:	2300      	movs	r3, #0
 8006488:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800648a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800648e:	2200      	movs	r2, #0
 8006490:	4619      	mov	r1, r3
 8006492:	4815      	ldr	r0, [pc, #84]	; (80064e8 <MX_TIM16_Init+0xf0>)
 8006494:	f00c ffb4 	bl	8013400 <HAL_TIM_PWM_ConfigChannel>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 800649e:	f7ff f92b 	bl	80056f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80064b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80064c4:	463b      	mov	r3, r7
 80064c6:	4619      	mov	r1, r3
 80064c8:	4807      	ldr	r0, [pc, #28]	; (80064e8 <MX_TIM16_Init+0xf0>)
 80064ca:	f00d ff85 	bl	80143d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 80064d4:	f7ff f910 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80064d8:	4803      	ldr	r0, [pc, #12]	; (80064e8 <MX_TIM16_Init+0xf0>)
 80064da:	f000 fb73 	bl	8006bc4 <HAL_TIM_MspPostInit>

}
 80064de:	bf00      	nop
 80064e0:	3750      	adds	r7, #80	; 0x50
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20001044 	.word	0x20001044
 80064ec:	40014400 	.word	0x40014400

080064f0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b094      	sub	sp, #80	; 0x50
 80064f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80064f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	605a      	str	r2, [r3, #4]
 8006500:	609a      	str	r2, [r3, #8]
 8006502:	60da      	str	r2, [r3, #12]
 8006504:	611a      	str	r2, [r3, #16]
 8006506:	615a      	str	r2, [r3, #20]
 8006508:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800650a:	463b      	mov	r3, r7
 800650c:	2234      	movs	r2, #52	; 0x34
 800650e:	2100      	movs	r1, #0
 8006510:	4618      	mov	r0, r3
 8006512:	f010 fe69 	bl	80171e8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8006516:	4b32      	ldr	r3, [pc, #200]	; (80065e0 <MX_TIM17_Init+0xf0>)
 8006518:	4a32      	ldr	r2, [pc, #200]	; (80065e4 <MX_TIM17_Init+0xf4>)
 800651a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 800651c:	4b30      	ldr	r3, [pc, #192]	; (80065e0 <MX_TIM17_Init+0xf0>)
 800651e:	f240 2225 	movw	r2, #549	; 0x225
 8006522:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006524:	4b2e      	ldr	r3, [pc, #184]	; (80065e0 <MX_TIM17_Init+0xf0>)
 8006526:	2200      	movs	r2, #0
 8006528:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 800652a:	4b2d      	ldr	r3, [pc, #180]	; (80065e0 <MX_TIM17_Init+0xf0>)
 800652c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006530:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006532:	4b2b      	ldr	r3, [pc, #172]	; (80065e0 <MX_TIM17_Init+0xf0>)
 8006534:	2200      	movs	r2, #0
 8006536:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006538:	4b29      	ldr	r3, [pc, #164]	; (80065e0 <MX_TIM17_Init+0xf0>)
 800653a:	2200      	movs	r2, #0
 800653c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800653e:	4b28      	ldr	r3, [pc, #160]	; (80065e0 <MX_TIM17_Init+0xf0>)
 8006540:	2280      	movs	r2, #128	; 0x80
 8006542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8006544:	4826      	ldr	r0, [pc, #152]	; (80065e0 <MX_TIM17_Init+0xf0>)
 8006546:	f00b ff8a 	bl	801245e <HAL_TIM_Base_Init>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8006550:	f7ff f8d2 	bl	80056f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8006554:	4822      	ldr	r0, [pc, #136]	; (80065e0 <MX_TIM17_Init+0xf0>)
 8006556:	f00c f85f 	bl	8012618 <HAL_TIM_PWM_Init>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8006560:	f7ff f8ca 	bl	80056f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006564:	2360      	movs	r3, #96	; 0x60
 8006566:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8006568:	f240 13f3 	movw	r3, #499	; 0x1f3
 800656c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800656e:	2300      	movs	r3, #0
 8006570:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006572:	2300      	movs	r3, #0
 8006574:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006576:	2300      	movs	r3, #0
 8006578:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800657a:	2300      	movs	r3, #0
 800657c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800657e:	2300      	movs	r3, #0
 8006580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006582:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006586:	2200      	movs	r2, #0
 8006588:	4619      	mov	r1, r3
 800658a:	4815      	ldr	r0, [pc, #84]	; (80065e0 <MX_TIM17_Init+0xf0>)
 800658c:	f00c ff38 	bl	8013400 <HAL_TIM_PWM_ConfigChannel>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 8006596:	f7ff f8af 	bl	80056f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800659a:	2300      	movs	r3, #0
 800659c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800659e:	2300      	movs	r3, #0
 80065a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80065ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80065bc:	463b      	mov	r3, r7
 80065be:	4619      	mov	r1, r3
 80065c0:	4807      	ldr	r0, [pc, #28]	; (80065e0 <MX_TIM17_Init+0xf0>)
 80065c2:	f00d ff09 	bl	80143d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 80065cc:	f7ff f894 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80065d0:	4803      	ldr	r0, [pc, #12]	; (80065e0 <MX_TIM17_Init+0xf0>)
 80065d2:	f000 faf7 	bl	8006bc4 <HAL_TIM_MspPostInit>

}
 80065d6:	bf00      	nop
 80065d8:	3750      	adds	r7, #80	; 0x50
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20001090 	.word	0x20001090
 80065e4:	40014800 	.word	0x40014800

080065e8 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80065ee:	f107 0310 	add.w	r3, r7, #16
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	605a      	str	r2, [r3, #4]
 80065f8:	609a      	str	r2, [r3, #8]
 80065fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065fc:	1d3b      	adds	r3, r7, #4
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	605a      	str	r2, [r3, #4]
 8006604:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8006606:	4b1e      	ldr	r3, [pc, #120]	; (8006680 <MX_TIM23_Init+0x98>)
 8006608:	4a1e      	ldr	r2, [pc, #120]	; (8006684 <MX_TIM23_Init+0x9c>)
 800660a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 800660c:	4b1c      	ldr	r3, [pc, #112]	; (8006680 <MX_TIM23_Init+0x98>)
 800660e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006612:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006614:	4b1a      	ldr	r3, [pc, #104]	; (8006680 <MX_TIM23_Init+0x98>)
 8006616:	2200      	movs	r2, #0
 8006618:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 1000-1;
 800661a:	4b19      	ldr	r3, [pc, #100]	; (8006680 <MX_TIM23_Init+0x98>)
 800661c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006620:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006622:	4b17      	ldr	r3, [pc, #92]	; (8006680 <MX_TIM23_Init+0x98>)
 8006624:	2200      	movs	r2, #0
 8006626:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006628:	4b15      	ldr	r3, [pc, #84]	; (8006680 <MX_TIM23_Init+0x98>)
 800662a:	2280      	movs	r2, #128	; 0x80
 800662c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800662e:	4814      	ldr	r0, [pc, #80]	; (8006680 <MX_TIM23_Init+0x98>)
 8006630:	f00b ff15 	bl	801245e <HAL_TIM_Base_Init>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 800663a:	f7ff f85d 	bl	80056f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800663e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006642:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8006644:	f107 0310 	add.w	r3, r7, #16
 8006648:	4619      	mov	r1, r3
 800664a:	480d      	ldr	r0, [pc, #52]	; (8006680 <MX_TIM23_Init+0x98>)
 800664c:	f00c ffec 	bl	8013628 <HAL_TIM_ConfigClockSource>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8006656:	f7ff f84f 	bl	80056f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800665a:	2300      	movs	r3, #0
 800665c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8006662:	1d3b      	adds	r3, r7, #4
 8006664:	4619      	mov	r1, r3
 8006666:	4806      	ldr	r0, [pc, #24]	; (8006680 <MX_TIM23_Init+0x98>)
 8006668:	f00d fe1a 	bl	80142a0 <HAL_TIMEx_MasterConfigSynchronization>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8006672:	f7ff f841 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8006676:	bf00      	nop
 8006678:	3720      	adds	r7, #32
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	200010dc 	.word	0x200010dc
 8006684:	4000e000 	.word	0x4000e000

08006688 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800668e:	f107 0310 	add.w	r3, r7, #16
 8006692:	2200      	movs	r2, #0
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	605a      	str	r2, [r3, #4]
 8006698:	609a      	str	r2, [r3, #8]
 800669a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800669c:	1d3b      	adds	r3, r7, #4
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	605a      	str	r2, [r3, #4]
 80066a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80066a6:	4b1e      	ldr	r3, [pc, #120]	; (8006720 <MX_TIM24_Init+0x98>)
 80066a8:	4a1e      	ldr	r2, [pc, #120]	; (8006724 <MX_TIM24_Init+0x9c>)
 80066aa:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 80066ac:	4b1c      	ldr	r3, [pc, #112]	; (8006720 <MX_TIM24_Init+0x98>)
 80066ae:	f44f 7289 	mov.w	r2, #274	; 0x112
 80066b2:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066b4:	4b1a      	ldr	r3, [pc, #104]	; (8006720 <MX_TIM24_Init+0x98>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80066ba:	4b19      	ldr	r3, [pc, #100]	; (8006720 <MX_TIM24_Init+0x98>)
 80066bc:	f04f 32ff 	mov.w	r2, #4294967295
 80066c0:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066c2:	4b17      	ldr	r3, [pc, #92]	; (8006720 <MX_TIM24_Init+0x98>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066c8:	4b15      	ldr	r3, [pc, #84]	; (8006720 <MX_TIM24_Init+0x98>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 80066ce:	4814      	ldr	r0, [pc, #80]	; (8006720 <MX_TIM24_Init+0x98>)
 80066d0:	f00b fec5 	bl	801245e <HAL_TIM_Base_Init>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 80066da:	f7ff f80d 	bl	80056f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80066de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 80066e4:	f107 0310 	add.w	r3, r7, #16
 80066e8:	4619      	mov	r1, r3
 80066ea:	480d      	ldr	r0, [pc, #52]	; (8006720 <MX_TIM24_Init+0x98>)
 80066ec:	f00c ff9c 	bl	8013628 <HAL_TIM_ConfigClockSource>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 80066f6:	f7fe ffff 	bl	80056f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066fa:	2300      	movs	r3, #0
 80066fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8006702:	1d3b      	adds	r3, r7, #4
 8006704:	4619      	mov	r1, r3
 8006706:	4806      	ldr	r0, [pc, #24]	; (8006720 <MX_TIM24_Init+0x98>)
 8006708:	f00d fdca 	bl	80142a0 <HAL_TIMEx_MasterConfigSynchronization>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8006712:	f7fe fff1 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8006716:	bf00      	nop
 8006718:	3720      	adds	r7, #32
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20001128 	.word	0x20001128
 8006724:	4000e400 	.word	0x4000e400

08006728 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08a      	sub	sp, #40	; 0x28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006730:	f107 0314 	add.w	r3, r7, #20
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	605a      	str	r2, [r3, #4]
 800673a:	609a      	str	r2, [r3, #8]
 800673c:	60da      	str	r2, [r3, #12]
 800673e:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a3c      	ldr	r2, [pc, #240]	; (8006838 <HAL_TIM_PWM_MspInit+0x110>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d15e      	bne.n	8006808 <HAL_TIM_PWM_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800674a:	4b3c      	ldr	r3, [pc, #240]	; (800683c <HAL_TIM_PWM_MspInit+0x114>)
 800674c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006750:	4a3a      	ldr	r2, [pc, #232]	; (800683c <HAL_TIM_PWM_MspInit+0x114>)
 8006752:	f043 0301 	orr.w	r3, r3, #1
 8006756:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800675a:	4b38      	ldr	r3, [pc, #224]	; (800683c <HAL_TIM_PWM_MspInit+0x114>)
 800675c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006768:	4b34      	ldr	r3, [pc, #208]	; (800683c <HAL_TIM_PWM_MspInit+0x114>)
 800676a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800676e:	4a33      	ldr	r2, [pc, #204]	; (800683c <HAL_TIM_PWM_MspInit+0x114>)
 8006770:	f043 0301 	orr.w	r3, r3, #1
 8006774:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006778:	4b30      	ldr	r3, [pc, #192]	; (800683c <HAL_TIM_PWM_MspInit+0x114>)
 800677a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 8006786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800678a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800678c:	2302      	movs	r3, #2
 800678e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006790:	2300      	movs	r3, #0
 8006792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006794:	2300      	movs	r3, #0
 8006796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006798:	2301      	movs	r3, #1
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 800679c:	f107 0314 	add.w	r3, r7, #20
 80067a0:	4619      	mov	r1, r3
 80067a2:	4827      	ldr	r0, [pc, #156]	; (8006840 <HAL_TIM_PWM_MspInit+0x118>)
 80067a4:	f006 f900 	bl	800c9a8 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream0;
 80067a8:	4b26      	ldr	r3, [pc, #152]	; (8006844 <HAL_TIM_PWM_MspInit+0x11c>)
 80067aa:	4a27      	ldr	r2, [pc, #156]	; (8006848 <HAL_TIM_PWM_MspInit+0x120>)
 80067ac:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 80067ae:	4b25      	ldr	r3, [pc, #148]	; (8006844 <HAL_TIM_PWM_MspInit+0x11c>)
 80067b0:	220b      	movs	r2, #11
 80067b2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067b4:	4b23      	ldr	r3, [pc, #140]	; (8006844 <HAL_TIM_PWM_MspInit+0x11c>)
 80067b6:	2240      	movs	r2, #64	; 0x40
 80067b8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80067ba:	4b22      	ldr	r3, [pc, #136]	; (8006844 <HAL_TIM_PWM_MspInit+0x11c>)
 80067bc:	2200      	movs	r2, #0
 80067be:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80067c0:	4b20      	ldr	r3, [pc, #128]	; (8006844 <HAL_TIM_PWM_MspInit+0x11c>)
 80067c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067c6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80067c8:	4b1e      	ldr	r3, [pc, #120]	; (8006844 <HAL_TIM_PWM_MspInit+0x11c>)
 80067ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067ce:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80067d0:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <HAL_TIM_PWM_MspInit+0x11c>)
 80067d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80067d6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80067d8:	4b1a      	ldr	r3, [pc, #104]	; (8006844 <HAL_TIM_PWM_MspInit+0x11c>)
 80067da:	2200      	movs	r2, #0
 80067dc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80067de:	4b19      	ldr	r3, [pc, #100]	; (8006844 <HAL_TIM_PWM_MspInit+0x11c>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067e4:	4b17      	ldr	r3, [pc, #92]	; (8006844 <HAL_TIM_PWM_MspInit+0x11c>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80067ea:	4816      	ldr	r0, [pc, #88]	; (8006844 <HAL_TIM_PWM_MspInit+0x11c>)
 80067ec:	f003 fa94 	bl	8009d18 <HAL_DMA_Init>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <HAL_TIM_PWM_MspInit+0xd2>
    {
      Error_Handler();
 80067f6:	f7fe ff7f 	bl	80056f8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a11      	ldr	r2, [pc, #68]	; (8006844 <HAL_TIM_PWM_MspInit+0x11c>)
 80067fe:	625a      	str	r2, [r3, #36]	; 0x24
 8006800:	4a10      	ldr	r2, [pc, #64]	; (8006844 <HAL_TIM_PWM_MspInit+0x11c>)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8006806:	e013      	b.n	8006830 <HAL_TIM_PWM_MspInit+0x108>
  else if(tim_pwmHandle->Instance==TIM15)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a0f      	ldr	r2, [pc, #60]	; (800684c <HAL_TIM_PWM_MspInit+0x124>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d10e      	bne.n	8006830 <HAL_TIM_PWM_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006812:	4b0a      	ldr	r3, [pc, #40]	; (800683c <HAL_TIM_PWM_MspInit+0x114>)
 8006814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006818:	4a08      	ldr	r2, [pc, #32]	; (800683c <HAL_TIM_PWM_MspInit+0x114>)
 800681a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800681e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006822:	4b06      	ldr	r3, [pc, #24]	; (800683c <HAL_TIM_PWM_MspInit+0x114>)
 8006824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	68bb      	ldr	r3, [r7, #8]
}
 8006830:	bf00      	nop
 8006832:	3728      	adds	r7, #40	; 0x28
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	40010000 	.word	0x40010000
 800683c:	58024400 	.word	0x58024400
 8006840:	58020000 	.word	0x58020000
 8006844:	20001174 	.word	0x20001174
 8006848:	40020010 	.word	0x40020010
 800684c:	40014000 	.word	0x40014000

08006850 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08e      	sub	sp, #56	; 0x38
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	605a      	str	r2, [r3, #4]
 8006862:	609a      	str	r2, [r3, #8]
 8006864:	60da      	str	r2, [r3, #12]
 8006866:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006870:	d14e      	bne.n	8006910 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006872:	4b5d      	ldr	r3, [pc, #372]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 8006874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006878:	4a5b      	ldr	r2, [pc, #364]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006882:	4b59      	ldr	r3, [pc, #356]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 8006884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	623b      	str	r3, [r7, #32]
 800688e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006890:	4b55      	ldr	r3, [pc, #340]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 8006892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006896:	4a54      	ldr	r2, [pc, #336]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 8006898:	f043 0301 	orr.w	r3, r3, #1
 800689c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80068a0:	4b51      	ldr	r3, [pc, #324]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 80068a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	61fb      	str	r3, [r7, #28]
 80068ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068ae:	4b4e      	ldr	r3, [pc, #312]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 80068b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068b4:	4a4c      	ldr	r2, [pc, #304]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 80068b6:	f043 0302 	orr.w	r3, r3, #2
 80068ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80068be:	4b4a      	ldr	r3, [pc, #296]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 80068c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	61bb      	str	r3, [r7, #24]
 80068ca:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC6A_Pin;
 80068cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068d2:	2302      	movs	r3, #2
 80068d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068da:	2300      	movs	r3, #0
 80068dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80068de:	2301      	movs	r3, #1
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 80068e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068e6:	4619      	mov	r1, r3
 80068e8:	4840      	ldr	r0, [pc, #256]	; (80069ec <HAL_TIM_Encoder_MspInit+0x19c>)
 80068ea:	f006 f85d 	bl	800c9a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC6B_Pin;
 80068ee:	2308      	movs	r3, #8
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f2:	2302      	movs	r3, #2
 80068f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068fa:	2300      	movs	r3, #0
 80068fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80068fe:	2301      	movs	r3, #1
 8006900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 8006902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006906:	4619      	mov	r1, r3
 8006908:	4839      	ldr	r0, [pc, #228]	; (80069f0 <HAL_TIM_Encoder_MspInit+0x1a0>)
 800690a:	f006 f84d 	bl	800c9a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800690e:	e067      	b.n	80069e0 <HAL_TIM_Encoder_MspInit+0x190>
  else if(tim_encoderHandle->Instance==TIM4)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a37      	ldr	r2, [pc, #220]	; (80069f4 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d12f      	bne.n	800697a <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800691a:	4b33      	ldr	r3, [pc, #204]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 800691c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006920:	4a31      	ldr	r2, [pc, #196]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 8006922:	f043 0304 	orr.w	r3, r3, #4
 8006926:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800692a:	4b2f      	ldr	r3, [pc, #188]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 800692c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006938:	4b2b      	ldr	r3, [pc, #172]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 800693a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800693e:	4a2a      	ldr	r2, [pc, #168]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 8006940:	f043 0308 	orr.w	r3, r3, #8
 8006944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006948:	4b27      	ldr	r3, [pc, #156]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 800694a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	613b      	str	r3, [r7, #16]
 8006954:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 8006956:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800695c:	2302      	movs	r3, #2
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006960:	2300      	movs	r3, #0
 8006962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006964:	2300      	movs	r3, #0
 8006966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006968:	2302      	movs	r3, #2
 800696a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800696c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006970:	4619      	mov	r1, r3
 8006972:	4821      	ldr	r0, [pc, #132]	; (80069f8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8006974:	f006 f818 	bl	800c9a8 <HAL_GPIO_Init>
}
 8006978:	e032      	b.n	80069e0 <HAL_TIM_Encoder_MspInit+0x190>
  else if(tim_encoderHandle->Instance==TIM8)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a1f      	ldr	r2, [pc, #124]	; (80069fc <HAL_TIM_Encoder_MspInit+0x1ac>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d12d      	bne.n	80069e0 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006984:	4b18      	ldr	r3, [pc, #96]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 8006986:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800698a:	4a17      	ldr	r2, [pc, #92]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 800698c:	f043 0302 	orr.w	r3, r3, #2
 8006990:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006994:	4b14      	ldr	r3, [pc, #80]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 8006996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069a2:	4b11      	ldr	r3, [pc, #68]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 80069a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069a8:	4a0f      	ldr	r2, [pc, #60]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 80069aa:	f043 0304 	orr.w	r3, r3, #4
 80069ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069b2:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <HAL_TIM_Encoder_MspInit+0x198>)
 80069b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	60bb      	str	r3, [r7, #8]
 80069be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 80069c0:	23c0      	movs	r3, #192	; 0xc0
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069c4:	2302      	movs	r3, #2
 80069c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c8:	2300      	movs	r3, #0
 80069ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069cc:	2300      	movs	r3, #0
 80069ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80069d0:	2303      	movs	r3, #3
 80069d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069d8:	4619      	mov	r1, r3
 80069da:	4809      	ldr	r0, [pc, #36]	; (8006a00 <HAL_TIM_Encoder_MspInit+0x1b0>)
 80069dc:	f005 ffe4 	bl	800c9a8 <HAL_GPIO_Init>
}
 80069e0:	bf00      	nop
 80069e2:	3738      	adds	r7, #56	; 0x38
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	58024400 	.word	0x58024400
 80069ec:	58020000 	.word	0x58020000
 80069f0:	58020400 	.word	0x58020400
 80069f4:	40000800 	.word	0x40000800
 80069f8:	58020c00 	.word	0x58020c00
 80069fc:	40010400 	.word	0x40010400
 8006a00:	58020800 	.word	0x58020800

08006a04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08c      	sub	sp, #48	; 0x30
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a62      	ldr	r2, [pc, #392]	; (8006b9c <HAL_TIM_Base_MspInit+0x198>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d10f      	bne.n	8006a36 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a16:	4b62      	ldr	r3, [pc, #392]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a1c:	4a60      	ldr	r2, [pc, #384]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006a1e:	f043 0302 	orr.w	r3, r3, #2
 8006a22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006a26:	4b5e      	ldr	r3, [pc, #376]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006a28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8006a34:	e0ae      	b.n	8006b94 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM5)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a5a      	ldr	r2, [pc, #360]	; (8006ba4 <HAL_TIM_Base_MspInit+0x1a0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10f      	bne.n	8006a60 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006a40:	4b57      	ldr	r3, [pc, #348]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006a42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a46:	4a56      	ldr	r2, [pc, #344]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006a48:	f043 0308 	orr.w	r3, r3, #8
 8006a4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006a50:	4b53      	ldr	r3, [pc, #332]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006a52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a56:	f003 0308 	and.w	r3, r3, #8
 8006a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006a5e:	e099      	b.n	8006b94 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM6)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a50      	ldr	r2, [pc, #320]	; (8006ba8 <HAL_TIM_Base_MspInit+0x1a4>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d10f      	bne.n	8006a8a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006a6a:	4b4d      	ldr	r3, [pc, #308]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a70:	4a4b      	ldr	r2, [pc, #300]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006a72:	f043 0310 	orr.w	r3, r3, #16
 8006a76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006a7a:	4b49      	ldr	r3, [pc, #292]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a88:	e084      	b.n	8006b94 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM13)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a47      	ldr	r2, [pc, #284]	; (8006bac <HAL_TIM_Base_MspInit+0x1a8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d10f      	bne.n	8006ab4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006a94:	4b42      	ldr	r3, [pc, #264]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006a96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a9a:	4a41      	ldr	r2, [pc, #260]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006aa4:	4b3e      	ldr	r3, [pc, #248]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006aa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aae:	623b      	str	r3, [r7, #32]
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
}
 8006ab2:	e06f      	b.n	8006b94 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM14)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a3d      	ldr	r2, [pc, #244]	; (8006bb0 <HAL_TIM_Base_MspInit+0x1ac>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d10f      	bne.n	8006ade <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006abe:	4b38      	ldr	r3, [pc, #224]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ac4:	4a36      	ldr	r2, [pc, #216]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006ace:	4b34      	ldr	r3, [pc, #208]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad8:	61fb      	str	r3, [r7, #28]
 8006ada:	69fb      	ldr	r3, [r7, #28]
}
 8006adc:	e05a      	b.n	8006b94 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM16)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a34      	ldr	r2, [pc, #208]	; (8006bb4 <HAL_TIM_Base_MspInit+0x1b0>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d10f      	bne.n	8006b08 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006ae8:	4b2d      	ldr	r3, [pc, #180]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006aee:	4a2c      	ldr	r2, [pc, #176]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006af4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006af8:	4b29      	ldr	r3, [pc, #164]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b02:	61bb      	str	r3, [r7, #24]
 8006b04:	69bb      	ldr	r3, [r7, #24]
}
 8006b06:	e045      	b.n	8006b94 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM17)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a2a      	ldr	r2, [pc, #168]	; (8006bb8 <HAL_TIM_Base_MspInit+0x1b4>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d10f      	bne.n	8006b32 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006b12:	4b23      	ldr	r3, [pc, #140]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b18:	4a21      	ldr	r2, [pc, #132]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006b22:	4b1f      	ldr	r3, [pc, #124]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	697b      	ldr	r3, [r7, #20]
}
 8006b30:	e030      	b.n	8006b94 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM23)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a21      	ldr	r2, [pc, #132]	; (8006bbc <HAL_TIM_Base_MspInit+0x1b8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d117      	bne.n	8006b6c <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8006b3c:	4b18      	ldr	r3, [pc, #96]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006b42:	4a17      	ldr	r2, [pc, #92]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b48:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8006b4c:	4b14      	ldr	r3, [pc, #80]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b4e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b56:	613b      	str	r3, [r7, #16]
 8006b58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	20a1      	movs	r0, #161	; 0xa1
 8006b60:	f002 fea7 	bl	80098b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8006b64:	20a1      	movs	r0, #161	; 0xa1
 8006b66:	f002 febe 	bl	80098e6 <HAL_NVIC_EnableIRQ>
}
 8006b6a:	e013      	b.n	8006b94 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM24)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a13      	ldr	r2, [pc, #76]	; (8006bc0 <HAL_TIM_Base_MspInit+0x1bc>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d10e      	bne.n	8006b94 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8006b76:	4b0a      	ldr	r3, [pc, #40]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b78:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006b7c:	4a08      	ldr	r2, [pc, #32]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b82:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8006b86:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b88:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	68fb      	ldr	r3, [r7, #12]
}
 8006b94:	bf00      	nop
 8006b96:	3730      	adds	r7, #48	; 0x30
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	40000400 	.word	0x40000400
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	40000c00 	.word	0x40000c00
 8006ba8:	40001000 	.word	0x40001000
 8006bac:	40001c00 	.word	0x40001c00
 8006bb0:	40002000 	.word	0x40002000
 8006bb4:	40014400 	.word	0x40014400
 8006bb8:	40014800 	.word	0x40014800
 8006bbc:	4000e000 	.word	0x4000e000
 8006bc0:	4000e400 	.word	0x4000e400

08006bc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b090      	sub	sp, #64	; 0x40
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	605a      	str	r2, [r3, #4]
 8006bd6:	609a      	str	r2, [r3, #8]
 8006bd8:	60da      	str	r2, [r3, #12]
 8006bda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a95      	ldr	r2, [pc, #596]	; (8006e38 <HAL_TIM_MspPostInit+0x274>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d120      	bne.n	8006c28 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006be6:	4b95      	ldr	r3, [pc, #596]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bec:	4a93      	ldr	r2, [pc, #588]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006bee:	f043 0301 	orr.w	r3, r3, #1
 8006bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006bf6:	4b91      	ldr	r3, [pc, #580]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 8006c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c12:	2300      	movs	r3, #0
 8006c14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006c16:	2301      	movs	r3, #1
 8006c18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 8006c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4887      	ldr	r0, [pc, #540]	; (8006e40 <HAL_TIM_MspPostInit+0x27c>)
 8006c22:	f005 fec1 	bl	800c9a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8006c26:	e103      	b.n	8006e30 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM3)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a85      	ldr	r2, [pc, #532]	; (8006e44 <HAL_TIM_MspPostInit+0x280>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d11f      	bne.n	8006c72 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c32:	4b82      	ldr	r3, [pc, #520]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c38:	4a80      	ldr	r2, [pc, #512]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006c3a:	f043 0302 	orr.w	r3, r3, #2
 8006c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c42:	4b7e      	ldr	r3, [pc, #504]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = ENC5A_GriperA_Pin|ENC5B_GriperB_Pin;
 8006c50:	2330      	movs	r3, #48	; 0x30
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c54:	2302      	movs	r3, #2
 8006c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006c60:	2302      	movs	r3, #2
 8006c62:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4877      	ldr	r0, [pc, #476]	; (8006e48 <HAL_TIM_MspPostInit+0x284>)
 8006c6c:	f005 fe9c 	bl	800c9a8 <HAL_GPIO_Init>
}
 8006c70:	e0de      	b.n	8006e30 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM5)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a75      	ldr	r2, [pc, #468]	; (8006e4c <HAL_TIM_MspPostInit+0x288>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d11f      	bne.n	8006cbc <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c7c:	4b6f      	ldr	r3, [pc, #444]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c82:	4a6e      	ldr	r2, [pc, #440]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006c84:	f043 0301 	orr.w	r3, r3, #1
 8006c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c8c:	4b6b      	ldr	r3, [pc, #428]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	623b      	str	r3, [r7, #32]
 8006c98:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006caa:	2302      	movs	r3, #2
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	4862      	ldr	r0, [pc, #392]	; (8006e40 <HAL_TIM_MspPostInit+0x27c>)
 8006cb6:	f005 fe77 	bl	800c9a8 <HAL_GPIO_Init>
}
 8006cba:	e0b9      	b.n	8006e30 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM13)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a63      	ldr	r2, [pc, #396]	; (8006e50 <HAL_TIM_MspPostInit+0x28c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d11f      	bne.n	8006d06 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cc6:	4b5d      	ldr	r3, [pc, #372]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ccc:	4a5b      	ldr	r2, [pc, #364]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006cce:	f043 0301 	orr.w	r3, r3, #1
 8006cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006cd6:	4b59      	ldr	r3, [pc, #356]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	61fb      	str	r3, [r7, #28]
 8006ce2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 8006ce4:	2340      	movs	r3, #64	; 0x40
 8006ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ce8:	2302      	movs	r3, #2
 8006cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cec:	2300      	movs	r3, #0
 8006cee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8006cf4:	2309      	movs	r3, #9
 8006cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8006cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4850      	ldr	r0, [pc, #320]	; (8006e40 <HAL_TIM_MspPostInit+0x27c>)
 8006d00:	f005 fe52 	bl	800c9a8 <HAL_GPIO_Init>
}
 8006d04:	e094      	b.n	8006e30 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM14)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a52      	ldr	r2, [pc, #328]	; (8006e54 <HAL_TIM_MspPostInit+0x290>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d11f      	bne.n	8006d50 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d10:	4b4a      	ldr	r3, [pc, #296]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d16:	4a49      	ldr	r2, [pc, #292]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006d18:	f043 0301 	orr.w	r3, r3, #1
 8006d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d20:	4b46      	ldr	r3, [pc, #280]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8006d2e:	2380      	movs	r3, #128	; 0x80
 8006d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d32:	2302      	movs	r3, #2
 8006d34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8006d3e:	2309      	movs	r3, #9
 8006d40:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8006d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d46:	4619      	mov	r1, r3
 8006d48:	483d      	ldr	r0, [pc, #244]	; (8006e40 <HAL_TIM_MspPostInit+0x27c>)
 8006d4a:	f005 fe2d 	bl	800c9a8 <HAL_GPIO_Init>
}
 8006d4e:	e06f      	b.n	8006e30 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM15)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a40      	ldr	r2, [pc, #256]	; (8006e58 <HAL_TIM_MspPostInit+0x294>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d11f      	bne.n	8006d9a <HAL_TIM_MspPostInit+0x1d6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d5a:	4b38      	ldr	r3, [pc, #224]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d60:	4a36      	ldr	r2, [pc, #216]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006d62:	f043 0310 	orr.w	r3, r3, #16
 8006d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d6a:	4b34      	ldr	r3, [pc, #208]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d70:	f003 0310 	and.w	r3, r3, #16
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006d78:	2320      	movs	r3, #32
 8006d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d80:	2300      	movs	r3, #0
 8006d82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d84:	2300      	movs	r3, #0
 8006d86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006d88:	2304      	movs	r3, #4
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d90:	4619      	mov	r1, r3
 8006d92:	4832      	ldr	r0, [pc, #200]	; (8006e5c <HAL_TIM_MspPostInit+0x298>)
 8006d94:	f005 fe08 	bl	800c9a8 <HAL_GPIO_Init>
}
 8006d98:	e04a      	b.n	8006e30 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM16)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a30      	ldr	r2, [pc, #192]	; (8006e60 <HAL_TIM_MspPostInit+0x29c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d120      	bne.n	8006de6 <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006da4:	4b25      	ldr	r3, [pc, #148]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006daa:	4a24      	ldr	r2, [pc, #144]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006dac:	f043 0302 	orr.w	r3, r3, #2
 8006db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006db4:	4b21      	ldr	r3, [pc, #132]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP4_Pin;
 8006dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dc8:	2302      	movs	r3, #2
 8006dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 8006dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ddc:	4619      	mov	r1, r3
 8006dde:	481a      	ldr	r0, [pc, #104]	; (8006e48 <HAL_TIM_MspPostInit+0x284>)
 8006de0:	f005 fde2 	bl	800c9a8 <HAL_GPIO_Init>
}
 8006de4:	e024      	b.n	8006e30 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM17)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a1e      	ldr	r2, [pc, #120]	; (8006e64 <HAL_TIM_MspPostInit+0x2a0>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d11f      	bne.n	8006e30 <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006df0:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006df6:	4a11      	ldr	r2, [pc, #68]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006df8:	f043 0302 	orr.w	r3, r3, #2
 8006dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e00:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <HAL_TIM_MspPostInit+0x278>)
 8006e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP5_Pin;
 8006e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e14:	2302      	movs	r3, #2
 8006e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8006e20:	2301      	movs	r3, #1
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 8006e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4807      	ldr	r0, [pc, #28]	; (8006e48 <HAL_TIM_MspPostInit+0x284>)
 8006e2c:	f005 fdbc 	bl	800c9a8 <HAL_GPIO_Init>
}
 8006e30:	bf00      	nop
 8006e32:	3740      	adds	r7, #64	; 0x40
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	40010000 	.word	0x40010000
 8006e3c:	58024400 	.word	0x58024400
 8006e40:	58020000 	.word	0x58020000
 8006e44:	40000400 	.word	0x40000400
 8006e48:	58020400 	.word	0x58020400
 8006e4c:	40000c00 	.word	0x40000c00
 8006e50:	40001c00 	.word	0x40001c00
 8006e54:	40002000 	.word	0x40002000
 8006e58:	40014000 	.word	0x40014000
 8006e5c:	58021000 	.word	0x58021000
 8006e60:	40014400 	.word	0x40014400
 8006e64:	40014800 	.word	0x40014800

08006e68 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006e6c:	4b24      	ldr	r3, [pc, #144]	; (8006f00 <MX_UART5_Init+0x98>)
 8006e6e:	4a25      	ldr	r2, [pc, #148]	; (8006f04 <MX_UART5_Init+0x9c>)
 8006e70:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8006e72:	4b23      	ldr	r3, [pc, #140]	; (8006f00 <MX_UART5_Init+0x98>)
 8006e74:	4a24      	ldr	r2, [pc, #144]	; (8006f08 <MX_UART5_Init+0xa0>)
 8006e76:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006e78:	4b21      	ldr	r3, [pc, #132]	; (8006f00 <MX_UART5_Init+0x98>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006e7e:	4b20      	ldr	r3, [pc, #128]	; (8006f00 <MX_UART5_Init+0x98>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006e84:	4b1e      	ldr	r3, [pc, #120]	; (8006f00 <MX_UART5_Init+0x98>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006e8a:	4b1d      	ldr	r3, [pc, #116]	; (8006f00 <MX_UART5_Init+0x98>)
 8006e8c:	220c      	movs	r2, #12
 8006e8e:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e90:	4b1b      	ldr	r3, [pc, #108]	; (8006f00 <MX_UART5_Init+0x98>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e96:	4b1a      	ldr	r3, [pc, #104]	; (8006f00 <MX_UART5_Init+0x98>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006e9c:	4b18      	ldr	r3, [pc, #96]	; (8006f00 <MX_UART5_Init+0x98>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006ea2:	4b17      	ldr	r3, [pc, #92]	; (8006f00 <MX_UART5_Init+0x98>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8006ea8:	4b15      	ldr	r3, [pc, #84]	; (8006f00 <MX_UART5_Init+0x98>)
 8006eaa:	2208      	movs	r2, #8
 8006eac:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8006eae:	4b14      	ldr	r3, [pc, #80]	; (8006f00 <MX_UART5_Init+0x98>)
 8006eb0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006eb4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006eb6:	4812      	ldr	r0, [pc, #72]	; (8006f00 <MX_UART5_Init+0x98>)
 8006eb8:	f00d fb4c 	bl	8014554 <HAL_UART_Init>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <MX_UART5_Init+0x5e>
  {
    Error_Handler();
 8006ec2:	f7fe fc19 	bl	80056f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	480d      	ldr	r0, [pc, #52]	; (8006f00 <MX_UART5_Init+0x98>)
 8006eca:	f010 f898 	bl	8016ffe <HAL_UARTEx_SetTxFifoThreshold>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <MX_UART5_Init+0x70>
  {
    Error_Handler();
 8006ed4:	f7fe fc10 	bl	80056f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ed8:	2100      	movs	r1, #0
 8006eda:	4809      	ldr	r0, [pc, #36]	; (8006f00 <MX_UART5_Init+0x98>)
 8006edc:	f010 f8cd 	bl	801707a <HAL_UARTEx_SetRxFifoThreshold>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <MX_UART5_Init+0x82>
  {
    Error_Handler();
 8006ee6:	f7fe fc07 	bl	80056f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8006eea:	4805      	ldr	r0, [pc, #20]	; (8006f00 <MX_UART5_Init+0x98>)
 8006eec:	f010 f84e 	bl	8016f8c <HAL_UARTEx_DisableFifoMode>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <MX_UART5_Init+0x92>
  {
    Error_Handler();
 8006ef6:	f7fe fbff 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006efa:	bf00      	nop
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	200011ec 	.word	0x200011ec
 8006f04:	40005000 	.word	0x40005000
 8006f08:	000f4240 	.word	0x000f4240

08006f0c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006f10:	4b22      	ldr	r3, [pc, #136]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f12:	4a23      	ldr	r2, [pc, #140]	; (8006fa0 <MX_USART1_UART_Init+0x94>)
 8006f14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8006f16:	4b21      	ldr	r3, [pc, #132]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f18:	4a22      	ldr	r2, [pc, #136]	; (8006fa4 <MX_USART1_UART_Init+0x98>)
 8006f1a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f1c:	4b1f      	ldr	r3, [pc, #124]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006f22:	4b1e      	ldr	r3, [pc, #120]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006f28:	4b1c      	ldr	r3, [pc, #112]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006f2e:	4b1b      	ldr	r3, [pc, #108]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f30:	220c      	movs	r2, #12
 8006f32:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f34:	4b19      	ldr	r3, [pc, #100]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f3a:	4b18      	ldr	r3, [pc, #96]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f40:	4b16      	ldr	r3, [pc, #88]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006f46:	4b15      	ldr	r3, [pc, #84]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f4c:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f52:	4812      	ldr	r0, [pc, #72]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f54:	f00d fafe 	bl	8014554 <HAL_UART_Init>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8006f5e:	f7fe fbcb 	bl	80056f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f62:	2100      	movs	r1, #0
 8006f64:	480d      	ldr	r0, [pc, #52]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f66:	f010 f84a 	bl	8016ffe <HAL_UARTEx_SetTxFifoThreshold>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8006f70:	f7fe fbc2 	bl	80056f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f74:	2100      	movs	r1, #0
 8006f76:	4809      	ldr	r0, [pc, #36]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f78:	f010 f87f 	bl	801707a <HAL_UARTEx_SetRxFifoThreshold>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8006f82:	f7fe fbb9 	bl	80056f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006f86:	4805      	ldr	r0, [pc, #20]	; (8006f9c <MX_USART1_UART_Init+0x90>)
 8006f88:	f010 f800 	bl	8016f8c <HAL_UARTEx_DisableFifoMode>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8006f92:	f7fe fbb1 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006f96:	bf00      	nop
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	2000127c 	.word	0x2000127c
 8006fa0:	40011000 	.word	0x40011000
 8006fa4:	001e8480 	.word	0x001e8480

08006fa8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006fac:	4b22      	ldr	r3, [pc, #136]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8006fae:	4a23      	ldr	r2, [pc, #140]	; (800703c <MX_USART3_UART_Init+0x94>)
 8006fb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006fb2:	4b21      	ldr	r3, [pc, #132]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8006fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006fb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006fba:	4b1f      	ldr	r3, [pc, #124]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006fc0:	4b1d      	ldr	r3, [pc, #116]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006fc6:	4b1c      	ldr	r3, [pc, #112]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006fcc:	4b1a      	ldr	r3, [pc, #104]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8006fce:	220c      	movs	r2, #12
 8006fd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fd2:	4b19      	ldr	r3, [pc, #100]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fd8:	4b17      	ldr	r3, [pc, #92]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006fde:	4b16      	ldr	r3, [pc, #88]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006fe4:	4b14      	ldr	r3, [pc, #80]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006fea:	4b13      	ldr	r3, [pc, #76]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006ff0:	4811      	ldr	r0, [pc, #68]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8006ff2:	f00d faaf 	bl	8014554 <HAL_UART_Init>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006ffc:	f7fe fb7c 	bl	80056f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007000:	2100      	movs	r1, #0
 8007002:	480d      	ldr	r0, [pc, #52]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8007004:	f00f fffb 	bl	8016ffe <HAL_UARTEx_SetTxFifoThreshold>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800700e:	f7fe fb73 	bl	80056f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007012:	2100      	movs	r1, #0
 8007014:	4808      	ldr	r0, [pc, #32]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8007016:	f010 f830 	bl	801707a <HAL_UARTEx_SetRxFifoThreshold>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8007020:	f7fe fb6a 	bl	80056f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8007024:	4804      	ldr	r0, [pc, #16]	; (8007038 <MX_USART3_UART_Init+0x90>)
 8007026:	f00f ffb1 	bl	8016f8c <HAL_UARTEx_DisableFifoMode>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8007030:	f7fe fb62 	bl	80056f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007034:	bf00      	nop
 8007036:	bd80      	pop	{r7, pc}
 8007038:	2000130c 	.word	0x2000130c
 800703c:	40004800 	.word	0x40004800

08007040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08e      	sub	sp, #56	; 0x38
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	605a      	str	r2, [r3, #4]
 8007052:	609a      	str	r2, [r3, #8]
 8007054:	60da      	str	r2, [r3, #12]
 8007056:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a86      	ldr	r2, [pc, #536]	; (8007278 <HAL_UART_MspInit+0x238>)
 800705e:	4293      	cmp	r3, r2
 8007060:	f040 8094 	bne.w	800718c <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8007064:	4b85      	ldr	r3, [pc, #532]	; (800727c <HAL_UART_MspInit+0x23c>)
 8007066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800706a:	4a84      	ldr	r2, [pc, #528]	; (800727c <HAL_UART_MspInit+0x23c>)
 800706c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007070:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007074:	4b81      	ldr	r3, [pc, #516]	; (800727c <HAL_UART_MspInit+0x23c>)
 8007076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800707a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800707e:	623b      	str	r3, [r7, #32]
 8007080:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007082:	4b7e      	ldr	r3, [pc, #504]	; (800727c <HAL_UART_MspInit+0x23c>)
 8007084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007088:	4a7c      	ldr	r2, [pc, #496]	; (800727c <HAL_UART_MspInit+0x23c>)
 800708a:	f043 0302 	orr.w	r3, r3, #2
 800708e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007092:	4b7a      	ldr	r3, [pc, #488]	; (800727c <HAL_UART_MspInit+0x23c>)
 8007094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	61fb      	str	r3, [r7, #28]
 800709e:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80070a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070a6:	2302      	movs	r3, #2
 80070a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070ae:	2300      	movs	r3, #0
 80070b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80070b2:	230e      	movs	r3, #14
 80070b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ba:	4619      	mov	r1, r3
 80070bc:	4870      	ldr	r0, [pc, #448]	; (8007280 <HAL_UART_MspInit+0x240>)
 80070be:	f005 fc73 	bl	800c9a8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream2;
 80070c2:	4b70      	ldr	r3, [pc, #448]	; (8007284 <HAL_UART_MspInit+0x244>)
 80070c4:	4a70      	ldr	r2, [pc, #448]	; (8007288 <HAL_UART_MspInit+0x248>)
 80070c6:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80070c8:	4b6e      	ldr	r3, [pc, #440]	; (8007284 <HAL_UART_MspInit+0x244>)
 80070ca:	2241      	movs	r2, #65	; 0x41
 80070cc:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070ce:	4b6d      	ldr	r3, [pc, #436]	; (8007284 <HAL_UART_MspInit+0x244>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070d4:	4b6b      	ldr	r3, [pc, #428]	; (8007284 <HAL_UART_MspInit+0x244>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80070da:	4b6a      	ldr	r3, [pc, #424]	; (8007284 <HAL_UART_MspInit+0x244>)
 80070dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070e0:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070e2:	4b68      	ldr	r3, [pc, #416]	; (8007284 <HAL_UART_MspInit+0x244>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070e8:	4b66      	ldr	r3, [pc, #408]	; (8007284 <HAL_UART_MspInit+0x244>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80070ee:	4b65      	ldr	r3, [pc, #404]	; (8007284 <HAL_UART_MspInit+0x244>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80070f4:	4b63      	ldr	r3, [pc, #396]	; (8007284 <HAL_UART_MspInit+0x244>)
 80070f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80070fa:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80070fc:	4b61      	ldr	r3, [pc, #388]	; (8007284 <HAL_UART_MspInit+0x244>)
 80070fe:	2200      	movs	r2, #0
 8007100:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8007102:	4860      	ldr	r0, [pc, #384]	; (8007284 <HAL_UART_MspInit+0x244>)
 8007104:	f002 fe08 	bl	8009d18 <HAL_DMA_Init>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800710e:	f7fe faf3 	bl	80056f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a5b      	ldr	r2, [pc, #364]	; (8007284 <HAL_UART_MspInit+0x244>)
 8007116:	67da      	str	r2, [r3, #124]	; 0x7c
 8007118:	4a5a      	ldr	r2, [pc, #360]	; (8007284 <HAL_UART_MspInit+0x244>)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream1;
 800711e:	4b5b      	ldr	r3, [pc, #364]	; (800728c <HAL_UART_MspInit+0x24c>)
 8007120:	4a5b      	ldr	r2, [pc, #364]	; (8007290 <HAL_UART_MspInit+0x250>)
 8007122:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8007124:	4b59      	ldr	r3, [pc, #356]	; (800728c <HAL_UART_MspInit+0x24c>)
 8007126:	2242      	movs	r2, #66	; 0x42
 8007128:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800712a:	4b58      	ldr	r3, [pc, #352]	; (800728c <HAL_UART_MspInit+0x24c>)
 800712c:	2240      	movs	r2, #64	; 0x40
 800712e:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007130:	4b56      	ldr	r3, [pc, #344]	; (800728c <HAL_UART_MspInit+0x24c>)
 8007132:	2200      	movs	r2, #0
 8007134:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007136:	4b55      	ldr	r3, [pc, #340]	; (800728c <HAL_UART_MspInit+0x24c>)
 8007138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800713c:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800713e:	4b53      	ldr	r3, [pc, #332]	; (800728c <HAL_UART_MspInit+0x24c>)
 8007140:	2200      	movs	r2, #0
 8007142:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007144:	4b51      	ldr	r3, [pc, #324]	; (800728c <HAL_UART_MspInit+0x24c>)
 8007146:	2200      	movs	r2, #0
 8007148:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800714a:	4b50      	ldr	r3, [pc, #320]	; (800728c <HAL_UART_MspInit+0x24c>)
 800714c:	2200      	movs	r2, #0
 800714e:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007150:	4b4e      	ldr	r3, [pc, #312]	; (800728c <HAL_UART_MspInit+0x24c>)
 8007152:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007156:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007158:	4b4c      	ldr	r3, [pc, #304]	; (800728c <HAL_UART_MspInit+0x24c>)
 800715a:	2200      	movs	r2, #0
 800715c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800715e:	484b      	ldr	r0, [pc, #300]	; (800728c <HAL_UART_MspInit+0x24c>)
 8007160:	f002 fdda 	bl	8009d18 <HAL_DMA_Init>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800716a:	f7fe fac5 	bl	80056f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a46      	ldr	r2, [pc, #280]	; (800728c <HAL_UART_MspInit+0x24c>)
 8007172:	679a      	str	r2, [r3, #120]	; 0x78
 8007174:	4a45      	ldr	r2, [pc, #276]	; (800728c <HAL_UART_MspInit+0x24c>)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800717a:	2200      	movs	r2, #0
 800717c:	2100      	movs	r1, #0
 800717e:	2035      	movs	r0, #53	; 0x35
 8007180:	f002 fb97 	bl	80098b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8007184:	2035      	movs	r0, #53	; 0x35
 8007186:	f002 fbae 	bl	80098e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800718a:	e070      	b.n	800726e <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART1)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a40      	ldr	r2, [pc, #256]	; (8007294 <HAL_UART_MspInit+0x254>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d12f      	bne.n	80071f6 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007196:	4b39      	ldr	r3, [pc, #228]	; (800727c <HAL_UART_MspInit+0x23c>)
 8007198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800719c:	4a37      	ldr	r2, [pc, #220]	; (800727c <HAL_UART_MspInit+0x23c>)
 800719e:	f043 0310 	orr.w	r3, r3, #16
 80071a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80071a6:	4b35      	ldr	r3, [pc, #212]	; (800727c <HAL_UART_MspInit+0x23c>)
 80071a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071ac:	f003 0310 	and.w	r3, r3, #16
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071b4:	4b31      	ldr	r3, [pc, #196]	; (800727c <HAL_UART_MspInit+0x23c>)
 80071b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071ba:	4a30      	ldr	r2, [pc, #192]	; (800727c <HAL_UART_MspInit+0x23c>)
 80071bc:	f043 0302 	orr.w	r3, r3, #2
 80071c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80071c4:	4b2d      	ldr	r3, [pc, #180]	; (800727c <HAL_UART_MspInit+0x23c>)
 80071c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80071d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d8:	2302      	movs	r3, #2
 80071da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071dc:	2300      	movs	r3, #0
 80071de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071e0:	2300      	movs	r3, #0
 80071e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80071e4:	2304      	movs	r3, #4
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ec:	4619      	mov	r1, r3
 80071ee:	4824      	ldr	r0, [pc, #144]	; (8007280 <HAL_UART_MspInit+0x240>)
 80071f0:	f005 fbda 	bl	800c9a8 <HAL_GPIO_Init>
}
 80071f4:	e03b      	b.n	800726e <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART3)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a27      	ldr	r2, [pc, #156]	; (8007298 <HAL_UART_MspInit+0x258>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d136      	bne.n	800726e <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007200:	4b1e      	ldr	r3, [pc, #120]	; (800727c <HAL_UART_MspInit+0x23c>)
 8007202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007206:	4a1d      	ldr	r2, [pc, #116]	; (800727c <HAL_UART_MspInit+0x23c>)
 8007208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800720c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007210:	4b1a      	ldr	r3, [pc, #104]	; (800727c <HAL_UART_MspInit+0x23c>)
 8007212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800721a:	613b      	str	r3, [r7, #16]
 800721c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800721e:	4b17      	ldr	r3, [pc, #92]	; (800727c <HAL_UART_MspInit+0x23c>)
 8007220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007224:	4a15      	ldr	r2, [pc, #84]	; (800727c <HAL_UART_MspInit+0x23c>)
 8007226:	f043 0308 	orr.w	r3, r3, #8
 800722a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800722e:	4b13      	ldr	r3, [pc, #76]	; (800727c <HAL_UART_MspInit+0x23c>)
 8007230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007234:	f003 0308 	and.w	r3, r3, #8
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800723c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007242:	2302      	movs	r3, #2
 8007244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007246:	2300      	movs	r3, #0
 8007248:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800724a:	2300      	movs	r3, #0
 800724c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800724e:	2307      	movs	r3, #7
 8007250:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007256:	4619      	mov	r1, r3
 8007258:	4810      	ldr	r0, [pc, #64]	; (800729c <HAL_UART_MspInit+0x25c>)
 800725a:	f005 fba5 	bl	800c9a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800725e:	2200      	movs	r2, #0
 8007260:	2100      	movs	r1, #0
 8007262:	2027      	movs	r0, #39	; 0x27
 8007264:	f002 fb25 	bl	80098b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007268:	2027      	movs	r0, #39	; 0x27
 800726a:	f002 fb3c 	bl	80098e6 <HAL_NVIC_EnableIRQ>
}
 800726e:	bf00      	nop
 8007270:	3738      	adds	r7, #56	; 0x38
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40005000 	.word	0x40005000
 800727c:	58024400 	.word	0x58024400
 8007280:	58020400 	.word	0x58020400
 8007284:	2000139c 	.word	0x2000139c
 8007288:	40020040 	.word	0x40020040
 800728c:	20001414 	.word	0x20001414
 8007290:	40020028 	.word	0x40020028
 8007294:	40011000 	.word	0x40011000
 8007298:	40004800 	.word	0x40004800
 800729c:	58020c00 	.word	0x58020c00

080072a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80072a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80072d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80072a4:	f7fe fc2e 	bl	8005b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80072a8:	480c      	ldr	r0, [pc, #48]	; (80072dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80072aa:	490d      	ldr	r1, [pc, #52]	; (80072e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80072ac:	4a0d      	ldr	r2, [pc, #52]	; (80072e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80072ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80072b0:	e002      	b.n	80072b8 <LoopCopyDataInit>

080072b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80072b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80072b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80072b6:	3304      	adds	r3, #4

080072b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80072b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80072ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80072bc:	d3f9      	bcc.n	80072b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80072be:	4a0a      	ldr	r2, [pc, #40]	; (80072e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80072c0:	4c0a      	ldr	r4, [pc, #40]	; (80072ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80072c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80072c4:	e001      	b.n	80072ca <LoopFillZerobss>

080072c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80072c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80072c8:	3204      	adds	r2, #4

080072ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80072ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80072cc:	d3fb      	bcc.n	80072c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80072ce:	f00f ff67 	bl	80171a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80072d2:	f7fb fd75 	bl	8002dc0 <main>
  bx  lr
 80072d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80072d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80072dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80072e0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80072e4:	08018568 	.word	0x08018568
  ldr r2, =_sbss
 80072e8:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 80072ec:	20001490 	.word	0x20001490

080072f0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80072f0:	e7fe      	b.n	80072f0 <ADC_IRQHandler>
	...

080072f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072fa:	2003      	movs	r0, #3
 80072fc:	f002 face 	bl	800989c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007300:	f007 fe9e 	bl	800f040 <HAL_RCC_GetSysClockFreq>
 8007304:	4602      	mov	r2, r0
 8007306:	4b15      	ldr	r3, [pc, #84]	; (800735c <HAL_Init+0x68>)
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	0a1b      	lsrs	r3, r3, #8
 800730c:	f003 030f 	and.w	r3, r3, #15
 8007310:	4913      	ldr	r1, [pc, #76]	; (8007360 <HAL_Init+0x6c>)
 8007312:	5ccb      	ldrb	r3, [r1, r3]
 8007314:	f003 031f 	and.w	r3, r3, #31
 8007318:	fa22 f303 	lsr.w	r3, r2, r3
 800731c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800731e:	4b0f      	ldr	r3, [pc, #60]	; (800735c <HAL_Init+0x68>)
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	f003 030f 	and.w	r3, r3, #15
 8007326:	4a0e      	ldr	r2, [pc, #56]	; (8007360 <HAL_Init+0x6c>)
 8007328:	5cd3      	ldrb	r3, [r2, r3]
 800732a:	f003 031f 	and.w	r3, r3, #31
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	fa22 f303 	lsr.w	r3, r2, r3
 8007334:	4a0b      	ldr	r2, [pc, #44]	; (8007364 <HAL_Init+0x70>)
 8007336:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007338:	4a0b      	ldr	r2, [pc, #44]	; (8007368 <HAL_Init+0x74>)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800733e:	2000      	movs	r0, #0
 8007340:	f000 f814 	bl	800736c <HAL_InitTick>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e002      	b.n	8007354 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800734e:	f7fe fb45 	bl	80059dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	58024400 	.word	0x58024400
 8007360:	080182d0 	.word	0x080182d0
 8007364:	20000024 	.word	0x20000024
 8007368:	20000020 	.word	0x20000020

0800736c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007374:	4b15      	ldr	r3, [pc, #84]	; (80073cc <HAL_InitTick+0x60>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e021      	b.n	80073c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007380:	4b13      	ldr	r3, [pc, #76]	; (80073d0 <HAL_InitTick+0x64>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	4b11      	ldr	r3, [pc, #68]	; (80073cc <HAL_InitTick+0x60>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	4619      	mov	r1, r3
 800738a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800738e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007392:	fbb2 f3f3 	udiv	r3, r2, r3
 8007396:	4618      	mov	r0, r3
 8007398:	f002 fab3 	bl	8009902 <HAL_SYSTICK_Config>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e00e      	b.n	80073c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b0f      	cmp	r3, #15
 80073aa:	d80a      	bhi.n	80073c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073ac:	2200      	movs	r2, #0
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	f04f 30ff 	mov.w	r0, #4294967295
 80073b4:	f002 fa7d 	bl	80098b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80073b8:	4a06      	ldr	r2, [pc, #24]	; (80073d4 <HAL_InitTick+0x68>)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	e000      	b.n	80073c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	2000002c 	.word	0x2000002c
 80073d0:	20000020 	.word	0x20000020
 80073d4:	20000028 	.word	0x20000028

080073d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073d8:	b480      	push	{r7}
 80073da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80073dc:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <HAL_IncTick+0x20>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	461a      	mov	r2, r3
 80073e2:	4b06      	ldr	r3, [pc, #24]	; (80073fc <HAL_IncTick+0x24>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4413      	add	r3, r2
 80073e8:	4a04      	ldr	r2, [pc, #16]	; (80073fc <HAL_IncTick+0x24>)
 80073ea:	6013      	str	r3, [r2, #0]
}
 80073ec:	bf00      	nop
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	2000002c 	.word	0x2000002c
 80073fc:	2000148c 	.word	0x2000148c

08007400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  return uwTick;
 8007404:	4b03      	ldr	r3, [pc, #12]	; (8007414 <HAL_GetTick+0x14>)
 8007406:	681b      	ldr	r3, [r3, #0]
}
 8007408:	4618      	mov	r0, r3
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	2000148c 	.word	0x2000148c

08007418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007420:	f7ff ffee 	bl	8007400 <HAL_GetTick>
 8007424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d005      	beq.n	800743e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007432:	4b0a      	ldr	r3, [pc, #40]	; (800745c <HAL_Delay+0x44>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4413      	add	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800743e:	bf00      	nop
 8007440:	f7ff ffde 	bl	8007400 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	429a      	cmp	r2, r3
 800744e:	d8f7      	bhi.n	8007440 <HAL_Delay+0x28>
  {
  }
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	2000002c 	.word	0x2000002c

08007460 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	431a      	orrs	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	609a      	str	r2, [r3, #8]
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	431a      	orrs	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	609a      	str	r2, [r3, #8]
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3360      	adds	r3, #96	; 0x60
 80074da:	461a      	mov	r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4a10      	ldr	r2, [pc, #64]	; (8007528 <LL_ADC_SetOffset+0x60>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d10b      	bne.n	8007504 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8007502:	e00b      	b.n	800751c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	430b      	orrs	r3, r1
 8007516:	431a      	orrs	r2, r3
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	601a      	str	r2, [r3, #0]
}
 800751c:	bf00      	nop
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	58026000 	.word	0x58026000

0800752c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3360      	adds	r3, #96	; 0x60
 800753a:	461a      	mov	r2, r3
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f003 031f 	and.w	r3, r3, #31
 8007572:	6879      	ldr	r1, [r7, #4]
 8007574:	fa01 f303 	lsl.w	r3, r1, r3
 8007578:	431a      	orrs	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	611a      	str	r2, [r3, #16]
}
 800757e:	bf00      	nop
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
	...

0800758c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4a0c      	ldr	r2, [pc, #48]	; (80075cc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00e      	beq.n	80075be <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3360      	adds	r3, #96	; 0x60
 80075a4:	461a      	mov	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	431a      	orrs	r2, r3
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	601a      	str	r2, [r3, #0]
  }
}
 80075be:	bf00      	nop
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	58026000 	.word	0x58026000

080075d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4a0c      	ldr	r2, [pc, #48]	; (8007610 <LL_ADC_SetOffsetSaturation+0x40>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d10e      	bne.n	8007602 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3360      	adds	r3, #96	; 0x60
 80075e8:	461a      	mov	r2, r3
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	431a      	orrs	r2, r3
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8007602:	bf00      	nop
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	58026000 	.word	0x58026000

08007614 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4a0c      	ldr	r2, [pc, #48]	; (8007654 <LL_ADC_SetOffsetSign+0x40>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d10e      	bne.n	8007646 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3360      	adds	r3, #96	; 0x60
 800762c:	461a      	mov	r2, r3
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	431a      	orrs	r2, r3
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8007646:	bf00      	nop
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	58026000 	.word	0x58026000

08007658 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	3360      	adds	r3, #96	; 0x60
 8007668:	461a      	mov	r2, r3
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	4a0c      	ldr	r2, [pc, #48]	; (80076a8 <LL_ADC_SetOffsetState+0x50>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d108      	bne.n	800768c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	431a      	orrs	r2, r3
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800768a:	e007      	b.n	800769c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	431a      	orrs	r2, r3
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	601a      	str	r2, [r3, #0]
}
 800769c:	bf00      	nop
 800769e:	371c      	adds	r7, #28
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	58026000 	.word	0x58026000

080076ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e000      	b.n	80076c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b087      	sub	sp, #28
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3330      	adds	r3, #48	; 0x30
 80076e2:	461a      	mov	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	0a1b      	lsrs	r3, r3, #8
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	f003 030c 	and.w	r3, r3, #12
 80076ee:	4413      	add	r3, r2
 80076f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f003 031f 	and.w	r3, r3, #31
 80076fc:	211f      	movs	r1, #31
 80076fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007702:	43db      	mvns	r3, r3
 8007704:	401a      	ands	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	0e9b      	lsrs	r3, r3, #26
 800770a:	f003 011f 	and.w	r1, r3, #31
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f003 031f 	and.w	r3, r3, #31
 8007714:	fa01 f303 	lsl.w	r3, r1, r3
 8007718:	431a      	orrs	r2, r3
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800771e:	bf00      	nop
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007736:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800773e:	2301      	movs	r3, #1
 8007740:	e000      	b.n	8007744 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3314      	adds	r3, #20
 8007760:	461a      	mov	r2, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	0e5b      	lsrs	r3, r3, #25
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	4413      	add	r3, r2
 800776e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	0d1b      	lsrs	r3, r3, #20
 8007778:	f003 031f 	and.w	r3, r3, #31
 800777c:	2107      	movs	r1, #7
 800777e:	fa01 f303 	lsl.w	r3, r1, r3
 8007782:	43db      	mvns	r3, r3
 8007784:	401a      	ands	r2, r3
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	0d1b      	lsrs	r3, r3, #20
 800778a:	f003 031f 	and.w	r3, r3, #31
 800778e:	6879      	ldr	r1, [r7, #4]
 8007790:	fa01 f303 	lsl.w	r3, r1, r3
 8007794:	431a      	orrs	r2, r3
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800779a:	bf00      	nop
 800779c:	371c      	adds	r7, #28
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
	...

080077a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4a1a      	ldr	r2, [pc, #104]	; (8007820 <LL_ADC_SetChannelSingleDiff+0x78>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d115      	bne.n	80077e8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077c8:	43db      	mvns	r3, r3
 80077ca:	401a      	ands	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f003 0318 	and.w	r3, r3, #24
 80077d2:	4914      	ldr	r1, [pc, #80]	; (8007824 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80077d4:	40d9      	lsrs	r1, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	400b      	ands	r3, r1
 80077da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077de:	431a      	orrs	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80077e6:	e014      	b.n	8007812 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077f4:	43db      	mvns	r3, r3
 80077f6:	401a      	ands	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f003 0318 	and.w	r3, r3, #24
 80077fe:	4909      	ldr	r1, [pc, #36]	; (8007824 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007800:	40d9      	lsrs	r1, r3
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	400b      	ands	r3, r1
 8007806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800780a:	431a      	orrs	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8007812:	bf00      	nop
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	58026000 	.word	0x58026000
 8007824:	000fffff 	.word	0x000fffff

08007828 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f003 031f 	and.w	r3, r3, #31
}
 8007838:	4618      	mov	r0, r3
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	4b04      	ldr	r3, [pc, #16]	; (8007880 <LL_ADC_DisableDeepPowerDown+0x20>)
 800786e:	4013      	ands	r3, r2
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6093      	str	r3, [r2, #8]
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	5fffffc0 	.word	0x5fffffc0

08007884 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007898:	d101      	bne.n	800789e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800789a:	2301      	movs	r3, #1
 800789c:	e000      	b.n	80078a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	6fffffc0 	.word	0x6fffffc0

080078d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078e8:	d101      	bne.n	80078ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80078ea:	2301      	movs	r3, #1
 80078ec:	e000      	b.n	80078f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	4b05      	ldr	r3, [pc, #20]	; (8007920 <LL_ADC_Enable+0x24>)
 800790a:	4013      	ands	r3, r2
 800790c:	f043 0201 	orr.w	r2, r3, #1
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	7fffffc0 	.word	0x7fffffc0

08007924 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	4b05      	ldr	r3, [pc, #20]	; (8007948 <LL_ADC_Disable+0x24>)
 8007932:	4013      	ands	r3, r2
 8007934:	f043 0202 	orr.w	r2, r3, #2
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	7fffffc0 	.word	0x7fffffc0

0800794c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b01      	cmp	r3, #1
 800795e:	d101      	bne.n	8007964 <LL_ADC_IsEnabled+0x18>
 8007960:	2301      	movs	r3, #1
 8007962:	e000      	b.n	8007966 <LL_ADC_IsEnabled+0x1a>
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	2b02      	cmp	r3, #2
 8007984:	d101      	bne.n	800798a <LL_ADC_IsDisableOngoing+0x18>
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <LL_ADC_IsDisableOngoing+0x1a>
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <LL_ADC_REG_StartConversion+0x24>)
 80079a6:	4013      	ands	r3, r2
 80079a8:	f043 0204 	orr.w	r2, r3, #4
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	7fffffc0 	.word	0x7fffffc0

080079c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d101      	bne.n	80079d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e000      	b.n	80079da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 0308 	and.w	r3, r3, #8
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d101      	bne.n	80079fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e000      	b.n	8007a00 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007a0c:	b590      	push	{r4, r7, lr}
 8007a0e:	b089      	sub	sp, #36	; 0x24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e1ee      	b.n	8007e04 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d109      	bne.n	8007a48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7f9 fa0b 	bl	8000e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7ff ff19 	bl	8007884 <LL_ADC_IsDeepPowerDownEnabled>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff feff 	bl	8007860 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff ff34 	bl	80078d4 <LL_ADC_IsInternalRegulatorEnabled>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d114      	bne.n	8007a9c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff ff18 	bl	80078ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a7c:	4b8e      	ldr	r3, [pc, #568]	; (8007cb8 <HAL_ADC_Init+0x2ac>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	099b      	lsrs	r3, r3, #6
 8007a82:	4a8e      	ldr	r2, [pc, #568]	; (8007cbc <HAL_ADC_Init+0x2b0>)
 8007a84:	fba2 2303 	umull	r2, r3, r2, r3
 8007a88:	099b      	lsrs	r3, r3, #6
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007a8e:	e002      	b.n	8007a96 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1f9      	bne.n	8007a90 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff ff17 	bl	80078d4 <LL_ADC_IsInternalRegulatorEnabled>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10d      	bne.n	8007ac8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab0:	f043 0210 	orr.w	r2, r3, #16
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007abc:	f043 0201 	orr.w	r2, r3, #1
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7ff ff77 	bl	80079c0 <LL_ADC_REG_IsConversionOngoing>
 8007ad2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ad8:	f003 0310 	and.w	r3, r3, #16
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f040 8188 	bne.w	8007df2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f040 8184 	bne.w	8007df2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007af2:	f043 0202 	orr.w	r2, r3, #2
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff ff24 	bl	800794c <LL_ADC_IsEnabled>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d136      	bne.n	8007b78 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a6c      	ldr	r2, [pc, #432]	; (8007cc0 <HAL_ADC_Init+0x2b4>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d004      	beq.n	8007b1e <HAL_ADC_Init+0x112>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a6a      	ldr	r2, [pc, #424]	; (8007cc4 <HAL_ADC_Init+0x2b8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d10e      	bne.n	8007b3c <HAL_ADC_Init+0x130>
 8007b1e:	4868      	ldr	r0, [pc, #416]	; (8007cc0 <HAL_ADC_Init+0x2b4>)
 8007b20:	f7ff ff14 	bl	800794c <LL_ADC_IsEnabled>
 8007b24:	4604      	mov	r4, r0
 8007b26:	4867      	ldr	r0, [pc, #412]	; (8007cc4 <HAL_ADC_Init+0x2b8>)
 8007b28:	f7ff ff10 	bl	800794c <LL_ADC_IsEnabled>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	4323      	orrs	r3, r4
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	bf0c      	ite	eq
 8007b34:	2301      	moveq	r3, #1
 8007b36:	2300      	movne	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	e008      	b.n	8007b4e <HAL_ADC_Init+0x142>
 8007b3c:	4862      	ldr	r0, [pc, #392]	; (8007cc8 <HAL_ADC_Init+0x2bc>)
 8007b3e:	f7ff ff05 	bl	800794c <LL_ADC_IsEnabled>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bf0c      	ite	eq
 8007b48:	2301      	moveq	r3, #1
 8007b4a:	2300      	movne	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d012      	beq.n	8007b78 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a5a      	ldr	r2, [pc, #360]	; (8007cc0 <HAL_ADC_Init+0x2b4>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d004      	beq.n	8007b66 <HAL_ADC_Init+0x15a>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a58      	ldr	r2, [pc, #352]	; (8007cc4 <HAL_ADC_Init+0x2b8>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d101      	bne.n	8007b6a <HAL_ADC_Init+0x15e>
 8007b66:	4a59      	ldr	r2, [pc, #356]	; (8007ccc <HAL_ADC_Init+0x2c0>)
 8007b68:	e000      	b.n	8007b6c <HAL_ADC_Init+0x160>
 8007b6a:	4a59      	ldr	r2, [pc, #356]	; (8007cd0 <HAL_ADC_Init+0x2c4>)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f7ff fc74 	bl	8007460 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a52      	ldr	r2, [pc, #328]	; (8007cc8 <HAL_ADC_Init+0x2bc>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d129      	bne.n	8007bd6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	7e5b      	ldrb	r3, [r3, #25]
 8007b86:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007b8c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8007b92:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d013      	beq.n	8007bc4 <HAL_ADC_Init+0x1b8>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	2b0c      	cmp	r3, #12
 8007ba2:	d00d      	beq.n	8007bc0 <HAL_ADC_Init+0x1b4>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	2b1c      	cmp	r3, #28
 8007baa:	d007      	beq.n	8007bbc <HAL_ADC_Init+0x1b0>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	2b18      	cmp	r3, #24
 8007bb2:	d101      	bne.n	8007bb8 <HAL_ADC_Init+0x1ac>
 8007bb4:	2318      	movs	r3, #24
 8007bb6:	e006      	b.n	8007bc6 <HAL_ADC_Init+0x1ba>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	e004      	b.n	8007bc6 <HAL_ADC_Init+0x1ba>
 8007bbc:	2310      	movs	r3, #16
 8007bbe:	e002      	b.n	8007bc6 <HAL_ADC_Init+0x1ba>
 8007bc0:	2308      	movs	r3, #8
 8007bc2:	e000      	b.n	8007bc6 <HAL_ADC_Init+0x1ba>
 8007bc4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8007bc6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	61bb      	str	r3, [r7, #24]
 8007bd4:	e00e      	b.n	8007bf4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	7e5b      	ldrb	r3, [r3, #25]
 8007bda:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007be0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007be6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d106      	bne.n	8007c0c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	3b01      	subs	r3, #1
 8007c04:	045b      	lsls	r3, r3, #17
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d009      	beq.n	8007c28 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c18:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a26      	ldr	r2, [pc, #152]	; (8007cc8 <HAL_ADC_Init+0x2bc>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d115      	bne.n	8007c5e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	4b26      	ldr	r3, [pc, #152]	; (8007cd4 <HAL_ADC_Init+0x2c8>)
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6812      	ldr	r2, [r2, #0]
 8007c40:	69b9      	ldr	r1, [r7, #24]
 8007c42:	430b      	orrs	r3, r1
 8007c44:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	611a      	str	r2, [r3, #16]
 8007c5c:	e009      	b.n	8007c72 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	4b1c      	ldr	r3, [pc, #112]	; (8007cd8 <HAL_ADC_Init+0x2cc>)
 8007c66:	4013      	ands	r3, r2
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	69b9      	ldr	r1, [r7, #24]
 8007c6e:	430b      	orrs	r3, r1
 8007c70:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff fea2 	bl	80079c0 <LL_ADC_REG_IsConversionOngoing>
 8007c7c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff feaf 	bl	80079e6 <LL_ADC_INJ_IsConversionOngoing>
 8007c88:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f040 808e 	bne.w	8007dae <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f040 808a 	bne.w	8007dae <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a0a      	ldr	r2, [pc, #40]	; (8007cc8 <HAL_ADC_Init+0x2bc>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d11b      	bne.n	8007cdc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	7e1b      	ldrb	r3, [r3, #24]
 8007ca8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007cb0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	e018      	b.n	8007cea <HAL_ADC_Init+0x2de>
 8007cb8:	20000020 	.word	0x20000020
 8007cbc:	053e2d63 	.word	0x053e2d63
 8007cc0:	40022000 	.word	0x40022000
 8007cc4:	40022100 	.word	0x40022100
 8007cc8:	58026000 	.word	0x58026000
 8007ccc:	40022300 	.word	0x40022300
 8007cd0:	58026300 	.word	0x58026300
 8007cd4:	fff04007 	.word	0xfff04007
 8007cd8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	7e1b      	ldrb	r3, [r3, #24]
 8007ce0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	4b46      	ldr	r3, [pc, #280]	; (8007e0c <HAL_ADC_Init+0x400>)
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	6812      	ldr	r2, [r2, #0]
 8007cf8:	69b9      	ldr	r1, [r7, #24]
 8007cfa:	430b      	orrs	r3, r1
 8007cfc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d137      	bne.n	8007d78 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a3f      	ldr	r2, [pc, #252]	; (8007e10 <HAL_ADC_Init+0x404>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d116      	bne.n	8007d46 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691a      	ldr	r2, [r3, #16]
 8007d1e:	4b3d      	ldr	r3, [pc, #244]	; (8007e14 <HAL_ADC_Init+0x408>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007d2a:	4311      	orrs	r1, r2
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007d30:	4311      	orrs	r1, r2
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007d36:	430a      	orrs	r2, r1
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0201 	orr.w	r2, r2, #1
 8007d42:	611a      	str	r2, [r3, #16]
 8007d44:	e020      	b.n	8007d88 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	691a      	ldr	r2, [r3, #16]
 8007d4c:	4b32      	ldr	r3, [pc, #200]	; (8007e18 <HAL_ADC_Init+0x40c>)
 8007d4e:	4013      	ands	r3, r2
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007d54:	3a01      	subs	r2, #1
 8007d56:	0411      	lsls	r1, r2, #16
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007d5c:	4311      	orrs	r1, r2
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007d62:	4311      	orrs	r1, r2
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f042 0201 	orr.w	r2, r2, #1
 8007d74:	611a      	str	r2, [r3, #16]
 8007d76:	e007      	b.n	8007d88 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691a      	ldr	r2, [r3, #16]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0201 	bic.w	r2, r2, #1
 8007d86:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <HAL_ADC_Init+0x404>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d002      	beq.n	8007dae <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 f9e9 	bl	8009180 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d10c      	bne.n	8007dd0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbc:	f023 010f 	bic.w	r1, r3, #15
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	1e5a      	subs	r2, r3, #1
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8007dce:	e007      	b.n	8007de0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 020f 	bic.w	r2, r2, #15
 8007dde:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de4:	f023 0303 	bic.w	r3, r3, #3
 8007de8:	f043 0201 	orr.w	r2, r3, #1
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	661a      	str	r2, [r3, #96]	; 0x60
 8007df0:	e007      	b.n	8007e02 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df6:	f043 0210 	orr.w	r2, r3, #16
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007e02:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3724      	adds	r7, #36	; 0x24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd90      	pop	{r4, r7, pc}
 8007e0c:	ffffbffc 	.word	0xffffbffc
 8007e10:	58026000 	.word	0x58026000
 8007e14:	fc00f81f 	.word	0xfc00f81f
 8007e18:	fc00f81e 	.word	0xfc00f81e

08007e1c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a90      	ldr	r2, [pc, #576]	; (800806c <HAL_ADC_Start_IT+0x250>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d004      	beq.n	8007e38 <HAL_ADC_Start_IT+0x1c>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a8f      	ldr	r2, [pc, #572]	; (8008070 <HAL_ADC_Start_IT+0x254>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d101      	bne.n	8007e3c <HAL_ADC_Start_IT+0x20>
 8007e38:	4b8e      	ldr	r3, [pc, #568]	; (8008074 <HAL_ADC_Start_IT+0x258>)
 8007e3a:	e000      	b.n	8007e3e <HAL_ADC_Start_IT+0x22>
 8007e3c:	4b8e      	ldr	r3, [pc, #568]	; (8008078 <HAL_ADC_Start_IT+0x25c>)
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff fcf2 	bl	8007828 <LL_ADC_GetMultimode>
 8007e44:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fdb8 	bl	80079c0 <LL_ADC_REG_IsConversionOngoing>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f040 8119 	bne.w	800808a <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d101      	bne.n	8007e66 <HAL_ADC_Start_IT+0x4a>
 8007e62:	2302      	movs	r3, #2
 8007e64:	e116      	b.n	8008094 <HAL_ADC_Start_IT+0x278>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 f89c 	bl	8008fac <ADC_Enable>
 8007e74:	4603      	mov	r3, r0
 8007e76:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f040 8100 	bne.w	8008080 <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007e84:	4b7d      	ldr	r3, [pc, #500]	; (800807c <HAL_ADC_Start_IT+0x260>)
 8007e86:	4013      	ands	r3, r2
 8007e88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a76      	ldr	r2, [pc, #472]	; (8008070 <HAL_ADC_Start_IT+0x254>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d002      	beq.n	8007ea0 <HAL_ADC_Start_IT+0x84>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	e000      	b.n	8007ea2 <HAL_ADC_Start_IT+0x86>
 8007ea0:	4b72      	ldr	r3, [pc, #456]	; (800806c <HAL_ADC_Start_IT+0x250>)
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	6812      	ldr	r2, [r2, #0]
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d002      	beq.n	8007eb0 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d105      	bne.n	8007ebc <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d006      	beq.n	8007ed6 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ecc:	f023 0206 	bic.w	r2, r3, #6
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	665a      	str	r2, [r3, #100]	; 0x64
 8007ed4:	e002      	b.n	8007edc <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	221c      	movs	r2, #28
 8007ee2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f022 021c 	bic.w	r2, r2, #28
 8007efa:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d108      	bne.n	8007f16 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0208 	orr.w	r2, r2, #8
 8007f12:	605a      	str	r2, [r3, #4]
          break;
 8007f14:	e008      	b.n	8007f28 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f042 0204 	orr.w	r2, r2, #4
 8007f24:	605a      	str	r2, [r3, #4]
          break;
 8007f26:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d107      	bne.n	8007f40 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 0210 	orr.w	r2, r2, #16
 8007f3e:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a4a      	ldr	r2, [pc, #296]	; (8008070 <HAL_ADC_Start_IT+0x254>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d002      	beq.n	8007f50 <HAL_ADC_Start_IT+0x134>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	e000      	b.n	8007f52 <HAL_ADC_Start_IT+0x136>
 8007f50:	4b46      	ldr	r3, [pc, #280]	; (800806c <HAL_ADC_Start_IT+0x250>)
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	6812      	ldr	r2, [r2, #0]
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d008      	beq.n	8007f6c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d005      	beq.n	8007f6c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	2b05      	cmp	r3, #5
 8007f64:	d002      	beq.n	8007f6c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	2b09      	cmp	r3, #9
 8007f6a:	d13b      	bne.n	8007fe4 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d02d      	beq.n	8007fd6 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	2b08      	cmp	r3, #8
 8007f90:	d110      	bne.n	8007fb4 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0220 	bic.w	r2, r2, #32
 8007fa0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fb0:	605a      	str	r2, [r3, #4]
              break;
 8007fb2:	e011      	b.n	8007fd8 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fc2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0220 	orr.w	r2, r2, #32
 8007fd2:	605a      	str	r2, [r3, #4]
              break;
 8007fd4:	e000      	b.n	8007fd8 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 8007fd6:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff fcdb 	bl	8007998 <LL_ADC_REG_StartConversion>
 8007fe2:	e056      	b.n	8008092 <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a1e      	ldr	r2, [pc, #120]	; (8008070 <HAL_ADC_Start_IT+0x254>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d002      	beq.n	8008000 <HAL_ADC_Start_IT+0x1e4>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	e000      	b.n	8008002 <HAL_ADC_Start_IT+0x1e6>
 8008000:	4b1a      	ldr	r3, [pc, #104]	; (800806c <HAL_ADC_Start_IT+0x250>)
 8008002:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d03f      	beq.n	8008090 <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008014:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008018:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	2b08      	cmp	r3, #8
 8008026:	d110      	bne.n	800804a <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f022 0220 	bic.w	r2, r2, #32
 8008036:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008046:	605a      	str	r2, [r3, #4]
              break;
 8008048:	e023      	b.n	8008092 <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008058:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f042 0220 	orr.w	r2, r2, #32
 8008068:	605a      	str	r2, [r3, #4]
              break;
 800806a:	e012      	b.n	8008092 <HAL_ADC_Start_IT+0x276>
 800806c:	40022000 	.word	0x40022000
 8008070:	40022100 	.word	0x40022100
 8008074:	40022300 	.word	0x40022300
 8008078:	58026300 	.word	0x58026300
 800807c:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8008088:	e003      	b.n	8008092 <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800808a:	2302      	movs	r3, #2
 800808c:	75fb      	strb	r3, [r7, #23]
 800808e:	e000      	b.n	8008092 <HAL_ADC_Start_IT+0x276>
        }
 8008090:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
	...

080080b8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08a      	sub	sp, #40	; 0x28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80080c0:	2300      	movs	r3, #0
 80080c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a87      	ldr	r2, [pc, #540]	; (80082f8 <HAL_ADC_IRQHandler+0x240>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d004      	beq.n	80080e8 <HAL_ADC_IRQHandler+0x30>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a86      	ldr	r2, [pc, #536]	; (80082fc <HAL_ADC_IRQHandler+0x244>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d101      	bne.n	80080ec <HAL_ADC_IRQHandler+0x34>
 80080e8:	4b85      	ldr	r3, [pc, #532]	; (8008300 <HAL_ADC_IRQHandler+0x248>)
 80080ea:	e000      	b.n	80080ee <HAL_ADC_IRQHandler+0x36>
 80080ec:	4b85      	ldr	r3, [pc, #532]	; (8008304 <HAL_ADC_IRQHandler+0x24c>)
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7ff fb9a 	bl	8007828 <LL_ADC_GetMultimode>
 80080f4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d017      	beq.n	8008130 <HAL_ADC_IRQHandler+0x78>
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d012      	beq.n	8008130 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800810e:	f003 0310 	and.w	r3, r3, #16
 8008112:	2b00      	cmp	r3, #0
 8008114:	d105      	bne.n	8008122 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800811a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 f9fe 	bl	8009524 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2202      	movs	r2, #2
 800812e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	f003 0304 	and.w	r3, r3, #4
 8008136:	2b00      	cmp	r3, #0
 8008138:	d004      	beq.n	8008144 <HAL_ADC_IRQHandler+0x8c>
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10a      	bne.n	800815a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 8083 	beq.w	8008256 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	f003 0308 	and.w	r3, r3, #8
 8008156:	2b00      	cmp	r3, #0
 8008158:	d07d      	beq.n	8008256 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800815e:	f003 0310 	and.w	r3, r3, #16
 8008162:	2b00      	cmp	r3, #0
 8008164:	d105      	bne.n	8008172 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800816a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff fa98 	bl	80076ac <LL_ADC_REG_IsTriggerSourceSWStart>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d062      	beq.n	8008248 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a5d      	ldr	r2, [pc, #372]	; (80082fc <HAL_ADC_IRQHandler+0x244>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d002      	beq.n	8008192 <HAL_ADC_IRQHandler+0xda>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	e000      	b.n	8008194 <HAL_ADC_IRQHandler+0xdc>
 8008192:	4b59      	ldr	r3, [pc, #356]	; (80082f8 <HAL_ADC_IRQHandler+0x240>)
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	6812      	ldr	r2, [r2, #0]
 8008198:	4293      	cmp	r3, r2
 800819a:	d008      	beq.n	80081ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d005      	beq.n	80081ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2b05      	cmp	r3, #5
 80081a6:	d002      	beq.n	80081ae <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	2b09      	cmp	r3, #9
 80081ac:	d104      	bne.n	80081b8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	623b      	str	r3, [r7, #32]
 80081b6:	e00c      	b.n	80081d2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a4f      	ldr	r2, [pc, #316]	; (80082fc <HAL_ADC_IRQHandler+0x244>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d002      	beq.n	80081c8 <HAL_ADC_IRQHandler+0x110>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	e000      	b.n	80081ca <HAL_ADC_IRQHandler+0x112>
 80081c8:	4b4b      	ldr	r3, [pc, #300]	; (80082f8 <HAL_ADC_IRQHandler+0x240>)
 80081ca:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d135      	bne.n	8008248 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0308 	and.w	r3, r3, #8
 80081e6:	2b08      	cmp	r3, #8
 80081e8:	d12e      	bne.n	8008248 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff fbe6 	bl	80079c0 <LL_ADC_REG_IsConversionOngoing>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d11a      	bne.n	8008230 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 020c 	bic.w	r2, r2, #12
 8008208:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800820e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800821a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d112      	bne.n	8008248 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008226:	f043 0201 	orr.w	r2, r3, #1
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	661a      	str	r2, [r3, #96]	; 0x60
 800822e:	e00b      	b.n	8008248 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008234:	f043 0210 	orr.w	r2, r3, #16
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008240:	f043 0201 	orr.w	r2, r3, #1
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7fb fa33 	bl	80036b4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	220c      	movs	r2, #12
 8008254:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	f003 0320 	and.w	r3, r3, #32
 800825c:	2b00      	cmp	r3, #0
 800825e:	d004      	beq.n	800826a <HAL_ADC_IRQHandler+0x1b2>
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10b      	bne.n	8008282 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 80a0 	beq.w	80083b6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 809a 	beq.w	80083b6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008286:	f003 0310 	and.w	r3, r3, #16
 800828a:	2b00      	cmp	r3, #0
 800828c:	d105      	bne.n	800829a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008292:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff fa43 	bl	800772a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80082a4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff f9fe 	bl	80076ac <LL_ADC_REG_IsTriggerSourceSWStart>
 80082b0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a11      	ldr	r2, [pc, #68]	; (80082fc <HAL_ADC_IRQHandler+0x244>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d002      	beq.n	80082c2 <HAL_ADC_IRQHandler+0x20a>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	e000      	b.n	80082c4 <HAL_ADC_IRQHandler+0x20c>
 80082c2:	4b0d      	ldr	r3, [pc, #52]	; (80082f8 <HAL_ADC_IRQHandler+0x240>)
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	6812      	ldr	r2, [r2, #0]
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d008      	beq.n	80082de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d005      	beq.n	80082de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b06      	cmp	r3, #6
 80082d6:	d002      	beq.n	80082de <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2b07      	cmp	r3, #7
 80082dc:	d104      	bne.n	80082e8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	623b      	str	r3, [r7, #32]
 80082e6:	e014      	b.n	8008312 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a03      	ldr	r2, [pc, #12]	; (80082fc <HAL_ADC_IRQHandler+0x244>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d00a      	beq.n	8008308 <HAL_ADC_IRQHandler+0x250>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	e008      	b.n	800830a <HAL_ADC_IRQHandler+0x252>
 80082f8:	40022000 	.word	0x40022000
 80082fc:	40022100 	.word	0x40022100
 8008300:	40022300 	.word	0x40022300
 8008304:	58026300 	.word	0x58026300
 8008308:	4b84      	ldr	r3, [pc, #528]	; (800851c <HAL_ADC_IRQHandler+0x464>)
 800830a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d047      	beq.n	80083a8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d007      	beq.n	8008332 <HAL_ADC_IRQHandler+0x27a>
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d03f      	beq.n	80083a8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800832e:	2b00      	cmp	r3, #0
 8008330:	d13a      	bne.n	80083a8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833c:	2b40      	cmp	r3, #64	; 0x40
 800833e:	d133      	bne.n	80083a8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d12e      	bne.n	80083a8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f7ff fb49 	bl	80079e6 <LL_ADC_INJ_IsConversionOngoing>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d11a      	bne.n	8008390 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008368:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800836e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800837a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837e:	2b00      	cmp	r3, #0
 8008380:	d112      	bne.n	80083a8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008386:	f043 0201 	orr.w	r2, r3, #1
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	661a      	str	r2, [r3, #96]	; 0x60
 800838e:	e00b      	b.n	80083a8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008394:	f043 0210 	orr.w	r2, r3, #16
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083a0:	f043 0201 	orr.w	r2, r3, #1
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f001 f893 	bl	80094d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2260      	movs	r2, #96	; 0x60
 80083b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d011      	beq.n	80083e4 <HAL_ADC_IRQHandler+0x32c>
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00c      	beq.n	80083e4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f8a8 	bl	800852c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2280      	movs	r2, #128	; 0x80
 80083e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d012      	beq.n	8008414 <HAL_ADC_IRQHandler+0x35c>
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00d      	beq.n	8008414 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 f879 	bl	80094fc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008412:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800841a:	2b00      	cmp	r3, #0
 800841c:	d012      	beq.n	8008444 <HAL_ADC_IRQHandler+0x38c>
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00d      	beq.n	8008444 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800842c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 f86b 	bl	8009510 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008442:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	f003 0310 	and.w	r3, r3, #16
 800844a:	2b00      	cmp	r3, #0
 800844c:	d043      	beq.n	80084d6 <HAL_ADC_IRQHandler+0x41e>
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	f003 0310 	and.w	r3, r3, #16
 8008454:	2b00      	cmp	r3, #0
 8008456:	d03e      	beq.n	80084d6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d102      	bne.n	8008466 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8008460:	2301      	movs	r3, #1
 8008462:	627b      	str	r3, [r7, #36]	; 0x24
 8008464:	e021      	b.n	80084aa <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d015      	beq.n	8008498 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a2a      	ldr	r2, [pc, #168]	; (800851c <HAL_ADC_IRQHandler+0x464>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d004      	beq.n	8008480 <HAL_ADC_IRQHandler+0x3c8>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a29      	ldr	r2, [pc, #164]	; (8008520 <HAL_ADC_IRQHandler+0x468>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d101      	bne.n	8008484 <HAL_ADC_IRQHandler+0x3cc>
 8008480:	4b28      	ldr	r3, [pc, #160]	; (8008524 <HAL_ADC_IRQHandler+0x46c>)
 8008482:	e000      	b.n	8008486 <HAL_ADC_IRQHandler+0x3ce>
 8008484:	4b28      	ldr	r3, [pc, #160]	; (8008528 <HAL_ADC_IRQHandler+0x470>)
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff f9dc 	bl	8007844 <LL_ADC_GetMultiDMATransfer>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00b      	beq.n	80084aa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8008492:	2301      	movs	r3, #1
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
 8008496:	e008      	b.n	80084aa <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f003 0303 	and.w	r3, r3, #3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80084a6:	2301      	movs	r3, #1
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d10e      	bne.n	80084ce <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084c0:	f043 0202 	orr.w	r2, r3, #2
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f839 	bl	8008540 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2210      	movs	r2, #16
 80084d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d018      	beq.n	8008512 <HAL_ADC_IRQHandler+0x45a>
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d013      	beq.n	8008512 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ee:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084fa:	f043 0208 	orr.w	r2, r3, #8
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800850a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 ffeb 	bl	80094e8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8008512:	bf00      	nop
 8008514:	3728      	adds	r7, #40	; 0x28
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	40022000 	.word	0x40022000
 8008520:	40022100 	.word	0x40022100
 8008524:	40022300 	.word	0x40022300
 8008528:	58026300 	.word	0x58026300

0800852c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008554:	b590      	push	{r4, r7, lr}
 8008556:	b0b9      	sub	sp, #228	; 0xe4
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800856e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	4aa9      	ldr	r2, [pc, #676]	; (800881c <HAL_ADC_ConfigChannel+0x2c8>)
 8008576:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800857e:	2b01      	cmp	r3, #1
 8008580:	d102      	bne.n	8008588 <HAL_ADC_ConfigChannel+0x34>
 8008582:	2302      	movs	r3, #2
 8008584:	f000 bcfa 	b.w	8008f7c <HAL_ADC_ConfigChannel+0xa28>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff fa13 	bl	80079c0 <LL_ADC_REG_IsConversionOngoing>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	f040 84de 	bne.w	8008f5e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a9e      	ldr	r2, [pc, #632]	; (8008820 <HAL_ADC_ConfigChannel+0x2cc>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d033      	beq.n	8008614 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d108      	bne.n	80085ca <HAL_ADC_ConfigChannel+0x76>
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	0e9b      	lsrs	r3, r3, #26
 80085be:	f003 031f 	and.w	r3, r3, #31
 80085c2:	2201      	movs	r2, #1
 80085c4:	fa02 f303 	lsl.w	r3, r2, r3
 80085c8:	e01d      	b.n	8008606 <HAL_ADC_ConfigChannel+0xb2>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80085d6:	fa93 f3a3 	rbit	r3, r3
 80085da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80085de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80085e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80085ee:	2320      	movs	r3, #32
 80085f0:	e004      	b.n	80085fc <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80085f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085f6:	fab3 f383 	clz	r3, r3
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	f003 031f 	and.w	r3, r3, #31
 8008600:	2201      	movs	r2, #1
 8008602:	fa02 f303 	lsl.w	r3, r2, r3
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6812      	ldr	r2, [r2, #0]
 800860a:	69d1      	ldr	r1, [r2, #28]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	6812      	ldr	r2, [r2, #0]
 8008610:	430b      	orrs	r3, r1
 8008612:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6818      	ldr	r0, [r3, #0]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	6859      	ldr	r1, [r3, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	461a      	mov	r2, r3
 8008622:	f7ff f856 	bl	80076d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff f9c8 	bl	80079c0 <LL_ADC_REG_IsConversionOngoing>
 8008630:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff f9d4 	bl	80079e6 <LL_ADC_INJ_IsConversionOngoing>
 800863e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008646:	2b00      	cmp	r3, #0
 8008648:	f040 8270 	bne.w	8008b2c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800864c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008650:	2b00      	cmp	r3, #0
 8008652:	f040 826b 	bne.w	8008b2c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6818      	ldr	r0, [r3, #0]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	6819      	ldr	r1, [r3, #0]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	461a      	mov	r2, r3
 8008664:	f7ff f874 	bl	8007750 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a6c      	ldr	r2, [pc, #432]	; (8008820 <HAL_ADC_ConfigChannel+0x2cc>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d10d      	bne.n	800868e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	695a      	ldr	r2, [r3, #20]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	08db      	lsrs	r3, r3, #3
 800867e:	f003 0303 	and.w	r3, r3, #3
 8008682:	005b      	lsls	r3, r3, #1
 8008684:	fa02 f303 	lsl.w	r3, r2, r3
 8008688:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800868c:	e032      	b.n	80086f4 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800868e:	4b65      	ldr	r3, [pc, #404]	; (8008824 <HAL_ADC_ConfigChannel+0x2d0>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800869a:	d10b      	bne.n	80086b4 <HAL_ADC_ConfigChannel+0x160>
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	695a      	ldr	r2, [r3, #20]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	089b      	lsrs	r3, r3, #2
 80086a8:	f003 0307 	and.w	r3, r3, #7
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	fa02 f303 	lsl.w	r3, r2, r3
 80086b2:	e01d      	b.n	80086f0 <HAL_ADC_ConfigChannel+0x19c>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	f003 0310 	and.w	r3, r3, #16
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10b      	bne.n	80086da <HAL_ADC_ConfigChannel+0x186>
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	695a      	ldr	r2, [r3, #20]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	089b      	lsrs	r3, r3, #2
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	005b      	lsls	r3, r3, #1
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	e00a      	b.n	80086f0 <HAL_ADC_ConfigChannel+0x19c>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	695a      	ldr	r2, [r3, #20]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	089b      	lsrs	r3, r3, #2
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	005b      	lsls	r3, r3, #1
 80086ec:	fa02 f303 	lsl.w	r3, r2, r3
 80086f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	d048      	beq.n	800878e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	6919      	ldr	r1, [r3, #16]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800870c:	f7fe fedc 	bl	80074c8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a42      	ldr	r2, [pc, #264]	; (8008820 <HAL_ADC_ConfigChannel+0x2cc>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d119      	bne.n	800874e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6818      	ldr	r0, [r3, #0]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	6919      	ldr	r1, [r3, #16]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	461a      	mov	r2, r3
 8008728:	f7fe ff74 	bl	8007614 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	6919      	ldr	r1, [r3, #16]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d102      	bne.n	8008744 <HAL_ADC_ConfigChannel+0x1f0>
 800873e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008742:	e000      	b.n	8008746 <HAL_ADC_ConfigChannel+0x1f2>
 8008744:	2300      	movs	r3, #0
 8008746:	461a      	mov	r2, r3
 8008748:	f7fe ff42 	bl	80075d0 <LL_ADC_SetOffsetSaturation>
 800874c:	e1ee      	b.n	8008b2c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	6919      	ldr	r1, [r3, #16]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800875c:	2b01      	cmp	r3, #1
 800875e:	d102      	bne.n	8008766 <HAL_ADC_ConfigChannel+0x212>
 8008760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008764:	e000      	b.n	8008768 <HAL_ADC_ConfigChannel+0x214>
 8008766:	2300      	movs	r3, #0
 8008768:	461a      	mov	r2, r3
 800876a:	f7fe ff0f 	bl	800758c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6818      	ldr	r0, [r3, #0]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	6919      	ldr	r1, [r3, #16]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	7e1b      	ldrb	r3, [r3, #24]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d102      	bne.n	8008784 <HAL_ADC_ConfigChannel+0x230>
 800877e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008782:	e000      	b.n	8008786 <HAL_ADC_ConfigChannel+0x232>
 8008784:	2300      	movs	r3, #0
 8008786:	461a      	mov	r2, r3
 8008788:	f7fe fee6 	bl	8007558 <LL_ADC_SetDataRightShift>
 800878c:	e1ce      	b.n	8008b2c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a23      	ldr	r2, [pc, #140]	; (8008820 <HAL_ADC_ConfigChannel+0x2cc>)
 8008794:	4293      	cmp	r3, r2
 8008796:	f040 8181 	bne.w	8008a9c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2100      	movs	r1, #0
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe fec3 	bl	800752c <LL_ADC_GetOffsetChannel>
 80087a6:	4603      	mov	r3, r0
 80087a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10a      	bne.n	80087c6 <HAL_ADC_ConfigChannel+0x272>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2100      	movs	r1, #0
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe feb8 	bl	800752c <LL_ADC_GetOffsetChannel>
 80087bc:	4603      	mov	r3, r0
 80087be:	0e9b      	lsrs	r3, r3, #26
 80087c0:	f003 021f 	and.w	r2, r3, #31
 80087c4:	e01e      	b.n	8008804 <HAL_ADC_ConfigChannel+0x2b0>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2100      	movs	r1, #0
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fe fead 	bl	800752c <LL_ADC_GetOffsetChannel>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087dc:	fa93 f3a3 	rbit	r3, r3
 80087e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80087e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80087ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80087f4:	2320      	movs	r3, #32
 80087f6:	e004      	b.n	8008802 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80087f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087fc:	fab3 f383 	clz	r3, r3
 8008800:	b2db      	uxtb	r3, r3
 8008802:	461a      	mov	r2, r3
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10b      	bne.n	8008828 <HAL_ADC_ConfigChannel+0x2d4>
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	0e9b      	lsrs	r3, r3, #26
 8008816:	f003 031f 	and.w	r3, r3, #31
 800881a:	e01e      	b.n	800885a <HAL_ADC_ConfigChannel+0x306>
 800881c:	47ff0000 	.word	0x47ff0000
 8008820:	58026000 	.word	0x58026000
 8008824:	5c001000 	.word	0x5c001000
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008834:	fa93 f3a3 	rbit	r3, r3
 8008838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800883c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008840:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8008844:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800884c:	2320      	movs	r3, #32
 800884e:	e004      	b.n	800885a <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8008850:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008854:	fab3 f383 	clz	r3, r3
 8008858:	b2db      	uxtb	r3, r3
 800885a:	429a      	cmp	r2, r3
 800885c:	d106      	bne.n	800886c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2200      	movs	r2, #0
 8008864:	2100      	movs	r1, #0
 8008866:	4618      	mov	r0, r3
 8008868:	f7fe fef6 	bl	8007658 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2101      	movs	r1, #1
 8008872:	4618      	mov	r0, r3
 8008874:	f7fe fe5a 	bl	800752c <LL_ADC_GetOffsetChannel>
 8008878:	4603      	mov	r3, r0
 800887a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <HAL_ADC_ConfigChannel+0x344>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2101      	movs	r1, #1
 8008888:	4618      	mov	r0, r3
 800888a:	f7fe fe4f 	bl	800752c <LL_ADC_GetOffsetChannel>
 800888e:	4603      	mov	r3, r0
 8008890:	0e9b      	lsrs	r3, r3, #26
 8008892:	f003 021f 	and.w	r2, r3, #31
 8008896:	e01e      	b.n	80088d6 <HAL_ADC_ConfigChannel+0x382>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2101      	movs	r1, #1
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe fe44 	bl	800752c <LL_ADC_GetOffsetChannel>
 80088a4:	4603      	mov	r3, r0
 80088a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088ae:	fa93 f3a3 	rbit	r3, r3
 80088b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80088b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80088be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80088c6:	2320      	movs	r3, #32
 80088c8:	e004      	b.n	80088d4 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80088ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088ce:	fab3 f383 	clz	r3, r3
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	461a      	mov	r2, r3
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d105      	bne.n	80088ee <HAL_ADC_ConfigChannel+0x39a>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	0e9b      	lsrs	r3, r3, #26
 80088e8:	f003 031f 	and.w	r3, r3, #31
 80088ec:	e018      	b.n	8008920 <HAL_ADC_ConfigChannel+0x3cc>
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088fa:	fa93 f3a3 	rbit	r3, r3
 80088fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8008902:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008906:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800890a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8008912:	2320      	movs	r3, #32
 8008914:	e004      	b.n	8008920 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8008916:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800891a:	fab3 f383 	clz	r3, r3
 800891e:	b2db      	uxtb	r3, r3
 8008920:	429a      	cmp	r2, r3
 8008922:	d106      	bne.n	8008932 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2200      	movs	r2, #0
 800892a:	2101      	movs	r1, #1
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe fe93 	bl	8007658 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2102      	movs	r1, #2
 8008938:	4618      	mov	r0, r3
 800893a:	f7fe fdf7 	bl	800752c <LL_ADC_GetOffsetChannel>
 800893e:	4603      	mov	r3, r0
 8008940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10a      	bne.n	800895e <HAL_ADC_ConfigChannel+0x40a>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2102      	movs	r1, #2
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe fdec 	bl	800752c <LL_ADC_GetOffsetChannel>
 8008954:	4603      	mov	r3, r0
 8008956:	0e9b      	lsrs	r3, r3, #26
 8008958:	f003 021f 	and.w	r2, r3, #31
 800895c:	e01e      	b.n	800899c <HAL_ADC_ConfigChannel+0x448>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2102      	movs	r1, #2
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe fde1 	bl	800752c <LL_ADC_GetOffsetChannel>
 800896a:	4603      	mov	r3, r0
 800896c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008970:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008974:	fa93 f3a3 	rbit	r3, r3
 8008978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800897c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008980:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8008984:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800898c:	2320      	movs	r3, #32
 800898e:	e004      	b.n	800899a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8008990:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008994:	fab3 f383 	clz	r3, r3
 8008998:	b2db      	uxtb	r3, r3
 800899a:	461a      	mov	r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d105      	bne.n	80089b4 <HAL_ADC_ConfigChannel+0x460>
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	0e9b      	lsrs	r3, r3, #26
 80089ae:	f003 031f 	and.w	r3, r3, #31
 80089b2:	e014      	b.n	80089de <HAL_ADC_ConfigChannel+0x48a>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089bc:	fa93 f3a3 	rbit	r3, r3
 80089c0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80089c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80089c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80089d0:	2320      	movs	r3, #32
 80089d2:	e004      	b.n	80089de <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80089d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089d8:	fab3 f383 	clz	r3, r3
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	429a      	cmp	r2, r3
 80089e0:	d106      	bne.n	80089f0 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2200      	movs	r2, #0
 80089e8:	2102      	movs	r1, #2
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fe34 	bl	8007658 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2103      	movs	r1, #3
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fe fd98 	bl	800752c <LL_ADC_GetOffsetChannel>
 80089fc:	4603      	mov	r3, r0
 80089fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10a      	bne.n	8008a1c <HAL_ADC_ConfigChannel+0x4c8>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2103      	movs	r1, #3
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe fd8d 	bl	800752c <LL_ADC_GetOffsetChannel>
 8008a12:	4603      	mov	r3, r0
 8008a14:	0e9b      	lsrs	r3, r3, #26
 8008a16:	f003 021f 	and.w	r2, r3, #31
 8008a1a:	e017      	b.n	8008a4c <HAL_ADC_ConfigChannel+0x4f8>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2103      	movs	r1, #3
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe fd82 	bl	800752c <LL_ADC_GetOffsetChannel>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a2e:	fa93 f3a3 	rbit	r3, r3
 8008a32:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a36:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8008a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8008a3e:	2320      	movs	r3, #32
 8008a40:	e003      	b.n	8008a4a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8008a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a44:	fab3 f383 	clz	r3, r3
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d105      	bne.n	8008a64 <HAL_ADC_ConfigChannel+0x510>
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	0e9b      	lsrs	r3, r3, #26
 8008a5e:	f003 031f 	and.w	r3, r3, #31
 8008a62:	e011      	b.n	8008a88 <HAL_ADC_ConfigChannel+0x534>
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a6c:	fa93 f3a3 	rbit	r3, r3
 8008a70:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8008a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a74:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8008a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8008a7c:	2320      	movs	r3, #32
 8008a7e:	e003      	b.n	8008a88 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8008a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a82:	fab3 f383 	clz	r3, r3
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d14f      	bne.n	8008b2c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2200      	movs	r2, #0
 8008a92:	2103      	movs	r1, #3
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe fddf 	bl	8007658 <LL_ADC_SetOffsetState>
 8008a9a:	e047      	b.n	8008b2c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	069b      	lsls	r3, r3, #26
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d107      	bne.n	8008ac0 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008abe:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ac6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	069b      	lsls	r3, r3, #26
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d107      	bne.n	8008ae4 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008ae2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	069b      	lsls	r3, r3, #26
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d107      	bne.n	8008b08 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008b06:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	069b      	lsls	r3, r3, #26
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d107      	bne.n	8008b2c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008b2a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fe ff0b 	bl	800794c <LL_ADC_IsEnabled>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f040 8219 	bne.w	8008f70 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6818      	ldr	r0, [r3, #0]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	6819      	ldr	r1, [r3, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f7fe fe2c 	bl	80077a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	4aa1      	ldr	r2, [pc, #644]	; (8008ddc <HAL_ADC_ConfigChannel+0x888>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	f040 812e 	bne.w	8008db8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10b      	bne.n	8008b84 <HAL_ADC_ConfigChannel+0x630>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	0e9b      	lsrs	r3, r3, #26
 8008b72:	3301      	adds	r3, #1
 8008b74:	f003 031f 	and.w	r3, r3, #31
 8008b78:	2b09      	cmp	r3, #9
 8008b7a:	bf94      	ite	ls
 8008b7c:	2301      	movls	r3, #1
 8008b7e:	2300      	movhi	r3, #0
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	e019      	b.n	8008bb8 <HAL_ADC_ConfigChannel+0x664>
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b8c:	fa93 f3a3 	rbit	r3, r3
 8008b90:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8008b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8008b9c:	2320      	movs	r3, #32
 8008b9e:	e003      	b.n	8008ba8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8008ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ba2:	fab3 f383 	clz	r3, r3
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	3301      	adds	r3, #1
 8008baa:	f003 031f 	and.w	r3, r3, #31
 8008bae:	2b09      	cmp	r3, #9
 8008bb0:	bf94      	ite	ls
 8008bb2:	2301      	movls	r3, #1
 8008bb4:	2300      	movhi	r3, #0
 8008bb6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d079      	beq.n	8008cb0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d107      	bne.n	8008bd8 <HAL_ADC_ConfigChannel+0x684>
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	0e9b      	lsrs	r3, r3, #26
 8008bce:	3301      	adds	r3, #1
 8008bd0:	069b      	lsls	r3, r3, #26
 8008bd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008bd6:	e015      	b.n	8008c04 <HAL_ADC_ConfigChannel+0x6b0>
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be0:	fa93 f3a3 	rbit	r3, r3
 8008be4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8008be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008be8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8008bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8008bf0:	2320      	movs	r3, #32
 8008bf2:	e003      	b.n	8008bfc <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8008bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bf6:	fab3 f383 	clz	r3, r3
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	069b      	lsls	r3, r3, #26
 8008c00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d109      	bne.n	8008c24 <HAL_ADC_ConfigChannel+0x6d0>
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	0e9b      	lsrs	r3, r3, #26
 8008c16:	3301      	adds	r3, #1
 8008c18:	f003 031f 	and.w	r3, r3, #31
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c22:	e017      	b.n	8008c54 <HAL_ADC_ConfigChannel+0x700>
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c2c:	fa93 f3a3 	rbit	r3, r3
 8008c30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c34:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8008c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8008c3c:	2320      	movs	r3, #32
 8008c3e:	e003      	b.n	8008c48 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8008c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c42:	fab3 f383 	clz	r3, r3
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	3301      	adds	r3, #1
 8008c4a:	f003 031f 	and.w	r3, r3, #31
 8008c4e:	2101      	movs	r1, #1
 8008c50:	fa01 f303 	lsl.w	r3, r1, r3
 8008c54:	ea42 0103 	orr.w	r1, r2, r3
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10a      	bne.n	8008c7a <HAL_ADC_ConfigChannel+0x726>
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	0e9b      	lsrs	r3, r3, #26
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	f003 021f 	and.w	r2, r3, #31
 8008c70:	4613      	mov	r3, r2
 8008c72:	005b      	lsls	r3, r3, #1
 8008c74:	4413      	add	r3, r2
 8008c76:	051b      	lsls	r3, r3, #20
 8008c78:	e018      	b.n	8008cac <HAL_ADC_ConfigChannel+0x758>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c82:	fa93 f3a3 	rbit	r3, r3
 8008c86:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8008c92:	2320      	movs	r3, #32
 8008c94:	e003      	b.n	8008c9e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8008c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c98:	fab3 f383 	clz	r3, r3
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	f003 021f 	and.w	r2, r3, #31
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	4413      	add	r3, r2
 8008caa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008cac:	430b      	orrs	r3, r1
 8008cae:	e07e      	b.n	8008dae <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d107      	bne.n	8008ccc <HAL_ADC_ConfigChannel+0x778>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	0e9b      	lsrs	r3, r3, #26
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	069b      	lsls	r3, r3, #26
 8008cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008cca:	e015      	b.n	8008cf8 <HAL_ADC_ConfigChannel+0x7a4>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd4:	fa93 f3a3 	rbit	r3, r3
 8008cd8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8008cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	e003      	b.n	8008cf0 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	fab3 f383 	clz	r3, r3
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	069b      	lsls	r3, r3, #26
 8008cf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d109      	bne.n	8008d18 <HAL_ADC_ConfigChannel+0x7c4>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	0e9b      	lsrs	r3, r3, #26
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	f003 031f 	and.w	r3, r3, #31
 8008d10:	2101      	movs	r1, #1
 8008d12:	fa01 f303 	lsl.w	r3, r1, r3
 8008d16:	e017      	b.n	8008d48 <HAL_ADC_ConfigChannel+0x7f4>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	fa93 f3a3 	rbit	r3, r3
 8008d24:	61bb      	str	r3, [r7, #24]
  return result;
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008d2a:	6a3b      	ldr	r3, [r7, #32]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d101      	bne.n	8008d34 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8008d30:	2320      	movs	r3, #32
 8008d32:	e003      	b.n	8008d3c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	fab3 f383 	clz	r3, r3
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	f003 031f 	and.w	r3, r3, #31
 8008d42:	2101      	movs	r1, #1
 8008d44:	fa01 f303 	lsl.w	r3, r1, r3
 8008d48:	ea42 0103 	orr.w	r1, r2, r3
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10d      	bne.n	8008d74 <HAL_ADC_ConfigChannel+0x820>
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	0e9b      	lsrs	r3, r3, #26
 8008d5e:	3301      	adds	r3, #1
 8008d60:	f003 021f 	and.w	r2, r3, #31
 8008d64:	4613      	mov	r3, r2
 8008d66:	005b      	lsls	r3, r3, #1
 8008d68:	4413      	add	r3, r2
 8008d6a:	3b1e      	subs	r3, #30
 8008d6c:	051b      	lsls	r3, r3, #20
 8008d6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d72:	e01b      	b.n	8008dac <HAL_ADC_ConfigChannel+0x858>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	fa93 f3a3 	rbit	r3, r3
 8008d80:	60fb      	str	r3, [r7, #12]
  return result;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8008d8c:	2320      	movs	r3, #32
 8008d8e:	e003      	b.n	8008d98 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	fab3 f383 	clz	r3, r3
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	3301      	adds	r3, #1
 8008d9a:	f003 021f 	and.w	r2, r3, #31
 8008d9e:	4613      	mov	r3, r2
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	4413      	add	r3, r2
 8008da4:	3b1e      	subs	r3, #30
 8008da6:	051b      	lsls	r3, r3, #20
 8008da8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008dac:	430b      	orrs	r3, r1
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	6892      	ldr	r2, [r2, #8]
 8008db2:	4619      	mov	r1, r3
 8008db4:	f7fe fccc 	bl	8007750 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f280 80d7 	bge.w	8008f70 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a06      	ldr	r2, [pc, #24]	; (8008de0 <HAL_ADC_ConfigChannel+0x88c>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d004      	beq.n	8008dd6 <HAL_ADC_ConfigChannel+0x882>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a04      	ldr	r2, [pc, #16]	; (8008de4 <HAL_ADC_ConfigChannel+0x890>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d10a      	bne.n	8008dec <HAL_ADC_ConfigChannel+0x898>
 8008dd6:	4b04      	ldr	r3, [pc, #16]	; (8008de8 <HAL_ADC_ConfigChannel+0x894>)
 8008dd8:	e009      	b.n	8008dee <HAL_ADC_ConfigChannel+0x89a>
 8008dda:	bf00      	nop
 8008ddc:	47ff0000 	.word	0x47ff0000
 8008de0:	40022000 	.word	0x40022000
 8008de4:	40022100 	.word	0x40022100
 8008de8:	40022300 	.word	0x40022300
 8008dec:	4b65      	ldr	r3, [pc, #404]	; (8008f84 <HAL_ADC_ConfigChannel+0xa30>)
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7fe fb5c 	bl	80074ac <LL_ADC_GetCommonPathInternalCh>
 8008df4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a62      	ldr	r2, [pc, #392]	; (8008f88 <HAL_ADC_ConfigChannel+0xa34>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d004      	beq.n	8008e0c <HAL_ADC_ConfigChannel+0x8b8>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a61      	ldr	r2, [pc, #388]	; (8008f8c <HAL_ADC_ConfigChannel+0xa38>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d10e      	bne.n	8008e2a <HAL_ADC_ConfigChannel+0x8d6>
 8008e0c:	485e      	ldr	r0, [pc, #376]	; (8008f88 <HAL_ADC_ConfigChannel+0xa34>)
 8008e0e:	f7fe fd9d 	bl	800794c <LL_ADC_IsEnabled>
 8008e12:	4604      	mov	r4, r0
 8008e14:	485d      	ldr	r0, [pc, #372]	; (8008f8c <HAL_ADC_ConfigChannel+0xa38>)
 8008e16:	f7fe fd99 	bl	800794c <LL_ADC_IsEnabled>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	4323      	orrs	r3, r4
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	bf0c      	ite	eq
 8008e22:	2301      	moveq	r3, #1
 8008e24:	2300      	movne	r3, #0
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	e008      	b.n	8008e3c <HAL_ADC_ConfigChannel+0x8e8>
 8008e2a:	4859      	ldr	r0, [pc, #356]	; (8008f90 <HAL_ADC_ConfigChannel+0xa3c>)
 8008e2c:	f7fe fd8e 	bl	800794c <LL_ADC_IsEnabled>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	bf0c      	ite	eq
 8008e36:	2301      	moveq	r3, #1
 8008e38:	2300      	movne	r3, #0
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f000 8084 	beq.w	8008f4a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a53      	ldr	r2, [pc, #332]	; (8008f94 <HAL_ADC_ConfigChannel+0xa40>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d132      	bne.n	8008eb2 <HAL_ADC_ConfigChannel+0x95e>
 8008e4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d12c      	bne.n	8008eb2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a4c      	ldr	r2, [pc, #304]	; (8008f90 <HAL_ADC_ConfigChannel+0xa3c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	f040 8086 	bne.w	8008f70 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a47      	ldr	r2, [pc, #284]	; (8008f88 <HAL_ADC_ConfigChannel+0xa34>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d004      	beq.n	8008e78 <HAL_ADC_ConfigChannel+0x924>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a46      	ldr	r2, [pc, #280]	; (8008f8c <HAL_ADC_ConfigChannel+0xa38>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d101      	bne.n	8008e7c <HAL_ADC_ConfigChannel+0x928>
 8008e78:	4a47      	ldr	r2, [pc, #284]	; (8008f98 <HAL_ADC_ConfigChannel+0xa44>)
 8008e7a:	e000      	b.n	8008e7e <HAL_ADC_ConfigChannel+0x92a>
 8008e7c:	4a41      	ldr	r2, [pc, #260]	; (8008f84 <HAL_ADC_ConfigChannel+0xa30>)
 8008e7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e86:	4619      	mov	r1, r3
 8008e88:	4610      	mov	r0, r2
 8008e8a:	f7fe fafc 	bl	8007486 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008e8e:	4b43      	ldr	r3, [pc, #268]	; (8008f9c <HAL_ADC_ConfigChannel+0xa48>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	099b      	lsrs	r3, r3, #6
 8008e94:	4a42      	ldr	r2, [pc, #264]	; (8008fa0 <HAL_ADC_ConfigChannel+0xa4c>)
 8008e96:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9a:	099b      	lsrs	r3, r3, #6
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	005b      	lsls	r3, r3, #1
 8008ea0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008ea2:	e002      	b.n	8008eaa <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1f9      	bne.n	8008ea4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008eb0:	e05e      	b.n	8008f70 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a3b      	ldr	r2, [pc, #236]	; (8008fa4 <HAL_ADC_ConfigChannel+0xa50>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d120      	bne.n	8008efe <HAL_ADC_ConfigChannel+0x9aa>
 8008ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d11a      	bne.n	8008efe <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a30      	ldr	r2, [pc, #192]	; (8008f90 <HAL_ADC_ConfigChannel+0xa3c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d14e      	bne.n	8008f70 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a2c      	ldr	r2, [pc, #176]	; (8008f88 <HAL_ADC_ConfigChannel+0xa34>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d004      	beq.n	8008ee6 <HAL_ADC_ConfigChannel+0x992>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a2a      	ldr	r2, [pc, #168]	; (8008f8c <HAL_ADC_ConfigChannel+0xa38>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d101      	bne.n	8008eea <HAL_ADC_ConfigChannel+0x996>
 8008ee6:	4a2c      	ldr	r2, [pc, #176]	; (8008f98 <HAL_ADC_ConfigChannel+0xa44>)
 8008ee8:	e000      	b.n	8008eec <HAL_ADC_ConfigChannel+0x998>
 8008eea:	4a26      	ldr	r2, [pc, #152]	; (8008f84 <HAL_ADC_ConfigChannel+0xa30>)
 8008eec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f7fe fac5 	bl	8007486 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008efc:	e038      	b.n	8008f70 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a29      	ldr	r2, [pc, #164]	; (8008fa8 <HAL_ADC_ConfigChannel+0xa54>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d133      	bne.n	8008f70 <HAL_ADC_ConfigChannel+0xa1c>
 8008f08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d12d      	bne.n	8008f70 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a1d      	ldr	r2, [pc, #116]	; (8008f90 <HAL_ADC_ConfigChannel+0xa3c>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d128      	bne.n	8008f70 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a19      	ldr	r2, [pc, #100]	; (8008f88 <HAL_ADC_ConfigChannel+0xa34>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d004      	beq.n	8008f32 <HAL_ADC_ConfigChannel+0x9de>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a17      	ldr	r2, [pc, #92]	; (8008f8c <HAL_ADC_ConfigChannel+0xa38>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d101      	bne.n	8008f36 <HAL_ADC_ConfigChannel+0x9e2>
 8008f32:	4a19      	ldr	r2, [pc, #100]	; (8008f98 <HAL_ADC_ConfigChannel+0xa44>)
 8008f34:	e000      	b.n	8008f38 <HAL_ADC_ConfigChannel+0x9e4>
 8008f36:	4a13      	ldr	r2, [pc, #76]	; (8008f84 <HAL_ADC_ConfigChannel+0xa30>)
 8008f38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008f3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f40:	4619      	mov	r1, r3
 8008f42:	4610      	mov	r0, r2
 8008f44:	f7fe fa9f 	bl	8007486 <LL_ADC_SetCommonPathInternalCh>
 8008f48:	e012      	b.n	8008f70 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f4e:	f043 0220 	orr.w	r2, r3, #32
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8008f5c:	e008      	b.n	8008f70 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f62:	f043 0220 	orr.w	r2, r3, #32
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008f78:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	37e4      	adds	r7, #228	; 0xe4
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd90      	pop	{r4, r7, pc}
 8008f84:	58026300 	.word	0x58026300
 8008f88:	40022000 	.word	0x40022000
 8008f8c:	40022100 	.word	0x40022100
 8008f90:	58026000 	.word	0x58026000
 8008f94:	c7520000 	.word	0xc7520000
 8008f98:	40022300 	.word	0x40022300
 8008f9c:	20000020 	.word	0x20000020
 8008fa0:	053e2d63 	.word	0x053e2d63
 8008fa4:	c3210000 	.word	0xc3210000
 8008fa8:	cb840000 	.word	0xcb840000

08008fac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe fcc7 	bl	800794c <LL_ADC_IsEnabled>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d16e      	bne.n	80090a2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689a      	ldr	r2, [r3, #8]
 8008fca:	4b38      	ldr	r3, [pc, #224]	; (80090ac <ADC_Enable+0x100>)
 8008fcc:	4013      	ands	r3, r2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00d      	beq.n	8008fee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fd6:	f043 0210 	orr.w	r2, r3, #16
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fe2:	f043 0201 	orr.w	r2, r3, #1
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e05a      	b.n	80090a4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fe fc82 	bl	80078fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008ff8:	f7fe fa02 	bl	8007400 <HAL_GetTick>
 8008ffc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a2b      	ldr	r2, [pc, #172]	; (80090b0 <ADC_Enable+0x104>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d004      	beq.n	8009012 <ADC_Enable+0x66>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a29      	ldr	r2, [pc, #164]	; (80090b4 <ADC_Enable+0x108>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d101      	bne.n	8009016 <ADC_Enable+0x6a>
 8009012:	4b29      	ldr	r3, [pc, #164]	; (80090b8 <ADC_Enable+0x10c>)
 8009014:	e000      	b.n	8009018 <ADC_Enable+0x6c>
 8009016:	4b29      	ldr	r3, [pc, #164]	; (80090bc <ADC_Enable+0x110>)
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe fc05 	bl	8007828 <LL_ADC_GetMultimode>
 800901e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a23      	ldr	r2, [pc, #140]	; (80090b4 <ADC_Enable+0x108>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d002      	beq.n	8009030 <ADC_Enable+0x84>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	e000      	b.n	8009032 <ADC_Enable+0x86>
 8009030:	4b1f      	ldr	r3, [pc, #124]	; (80090b0 <ADC_Enable+0x104>)
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	6812      	ldr	r2, [r2, #0]
 8009036:	4293      	cmp	r3, r2
 8009038:	d02c      	beq.n	8009094 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d130      	bne.n	80090a2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009040:	e028      	b.n	8009094 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fc80 	bl	800794c <LL_ADC_IsEnabled>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d104      	bne.n	800905c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4618      	mov	r0, r3
 8009058:	f7fe fc50 	bl	80078fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800905c:	f7fe f9d0 	bl	8007400 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	2b02      	cmp	r3, #2
 8009068:	d914      	bls.n	8009094 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	2b01      	cmp	r3, #1
 8009076:	d00d      	beq.n	8009094 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800907c:	f043 0210 	orr.w	r2, r3, #16
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009088:	f043 0201 	orr.w	r2, r3, #1
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e007      	b.n	80090a4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d1cf      	bne.n	8009042 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	8000003f 	.word	0x8000003f
 80090b0:	40022000 	.word	0x40022000
 80090b4:	40022100 	.word	0x40022100
 80090b8:	40022300 	.word	0x40022300
 80090bc:	58026300 	.word	0x58026300

080090c0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fe fc50 	bl	8007972 <LL_ADC_IsDisableOngoing>
 80090d2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fe fc37 	bl	800794c <LL_ADC_IsEnabled>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d047      	beq.n	8009174 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d144      	bne.n	8009174 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f003 030d 	and.w	r3, r3, #13
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d10c      	bne.n	8009112 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe fc11 	bl	8007924 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2203      	movs	r2, #3
 8009108:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800910a:	f7fe f979 	bl	8007400 <HAL_GetTick>
 800910e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009110:	e029      	b.n	8009166 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009116:	f043 0210 	orr.w	r2, r3, #16
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009122:	f043 0201 	orr.w	r2, r3, #1
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e023      	b.n	8009176 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800912e:	f7fe f967 	bl	8007400 <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	2b02      	cmp	r3, #2
 800913a:	d914      	bls.n	8009166 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00d      	beq.n	8009166 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800914e:	f043 0210 	orr.w	r2, r3, #16
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800915a:	f043 0201 	orr.w	r2, r3, #1
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e007      	b.n	8009176 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1dc      	bne.n	800912e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
	...

08009180 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a6b      	ldr	r2, [pc, #428]	; (800933c <ADC_ConfigureBoostMode+0x1bc>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d004      	beq.n	800919c <ADC_ConfigureBoostMode+0x1c>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a6a      	ldr	r2, [pc, #424]	; (8009340 <ADC_ConfigureBoostMode+0x1c0>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d109      	bne.n	80091b0 <ADC_ConfigureBoostMode+0x30>
 800919c:	4b69      	ldr	r3, [pc, #420]	; (8009344 <ADC_ConfigureBoostMode+0x1c4>)
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	bf14      	ite	ne
 80091a8:	2301      	movne	r3, #1
 80091aa:	2300      	moveq	r3, #0
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	e008      	b.n	80091c2 <ADC_ConfigureBoostMode+0x42>
 80091b0:	4b65      	ldr	r3, [pc, #404]	; (8009348 <ADC_ConfigureBoostMode+0x1c8>)
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	bf14      	ite	ne
 80091bc:	2301      	movne	r3, #1
 80091be:	2300      	moveq	r3, #0
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d01c      	beq.n	8009200 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80091c6:	f006 f8b5 	bl	800f334 <HAL_RCC_GetHCLKFreq>
 80091ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091d4:	d010      	beq.n	80091f8 <ADC_ConfigureBoostMode+0x78>
 80091d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091da:	d871      	bhi.n	80092c0 <ADC_ConfigureBoostMode+0x140>
 80091dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e0:	d002      	beq.n	80091e8 <ADC_ConfigureBoostMode+0x68>
 80091e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091e6:	d16b      	bne.n	80092c0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	0c1b      	lsrs	r3, r3, #16
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091f4:	60fb      	str	r3, [r7, #12]
        break;
 80091f6:	e066      	b.n	80092c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	089b      	lsrs	r3, r3, #2
 80091fc:	60fb      	str	r3, [r7, #12]
        break;
 80091fe:	e062      	b.n	80092c6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8009200:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009204:	f006 ffec 	bl	80101e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009208:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8009212:	d051      	beq.n	80092b8 <ADC_ConfigureBoostMode+0x138>
 8009214:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8009218:	d854      	bhi.n	80092c4 <ADC_ConfigureBoostMode+0x144>
 800921a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800921e:	d047      	beq.n	80092b0 <ADC_ConfigureBoostMode+0x130>
 8009220:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8009224:	d84e      	bhi.n	80092c4 <ADC_ConfigureBoostMode+0x144>
 8009226:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800922a:	d03d      	beq.n	80092a8 <ADC_ConfigureBoostMode+0x128>
 800922c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8009230:	d848      	bhi.n	80092c4 <ADC_ConfigureBoostMode+0x144>
 8009232:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009236:	d033      	beq.n	80092a0 <ADC_ConfigureBoostMode+0x120>
 8009238:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800923c:	d842      	bhi.n	80092c4 <ADC_ConfigureBoostMode+0x144>
 800923e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8009242:	d029      	beq.n	8009298 <ADC_ConfigureBoostMode+0x118>
 8009244:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8009248:	d83c      	bhi.n	80092c4 <ADC_ConfigureBoostMode+0x144>
 800924a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800924e:	d01a      	beq.n	8009286 <ADC_ConfigureBoostMode+0x106>
 8009250:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009254:	d836      	bhi.n	80092c4 <ADC_ConfigureBoostMode+0x144>
 8009256:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800925a:	d014      	beq.n	8009286 <ADC_ConfigureBoostMode+0x106>
 800925c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8009260:	d830      	bhi.n	80092c4 <ADC_ConfigureBoostMode+0x144>
 8009262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009266:	d00e      	beq.n	8009286 <ADC_ConfigureBoostMode+0x106>
 8009268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800926c:	d82a      	bhi.n	80092c4 <ADC_ConfigureBoostMode+0x144>
 800926e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009272:	d008      	beq.n	8009286 <ADC_ConfigureBoostMode+0x106>
 8009274:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009278:	d824      	bhi.n	80092c4 <ADC_ConfigureBoostMode+0x144>
 800927a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800927e:	d002      	beq.n	8009286 <ADC_ConfigureBoostMode+0x106>
 8009280:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009284:	d11e      	bne.n	80092c4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	0c9b      	lsrs	r3, r3, #18
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	fbb2 f3f3 	udiv	r3, r2, r3
 8009294:	60fb      	str	r3, [r7, #12]
        break;
 8009296:	e016      	b.n	80092c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	091b      	lsrs	r3, r3, #4
 800929c:	60fb      	str	r3, [r7, #12]
        break;
 800929e:	e012      	b.n	80092c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	095b      	lsrs	r3, r3, #5
 80092a4:	60fb      	str	r3, [r7, #12]
        break;
 80092a6:	e00e      	b.n	80092c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	099b      	lsrs	r3, r3, #6
 80092ac:	60fb      	str	r3, [r7, #12]
        break;
 80092ae:	e00a      	b.n	80092c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	09db      	lsrs	r3, r3, #7
 80092b4:	60fb      	str	r3, [r7, #12]
        break;
 80092b6:	e006      	b.n	80092c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	0a1b      	lsrs	r3, r3, #8
 80092bc:	60fb      	str	r3, [r7, #12]
        break;
 80092be:	e002      	b.n	80092c6 <ADC_ConfigureBoostMode+0x146>
        break;
 80092c0:	bf00      	nop
 80092c2:	e000      	b.n	80092c6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80092c4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	085b      	lsrs	r3, r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4a1f      	ldr	r2, [pc, #124]	; (800934c <ADC_ConfigureBoostMode+0x1cc>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d808      	bhi.n	80092e6 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80092e2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80092e4:	e025      	b.n	8009332 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	4a19      	ldr	r2, [pc, #100]	; (8009350 <ADC_ConfigureBoostMode+0x1d0>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d80a      	bhi.n	8009304 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009300:	609a      	str	r2, [r3, #8]
}
 8009302:	e016      	b.n	8009332 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4a13      	ldr	r2, [pc, #76]	; (8009354 <ADC_ConfigureBoostMode+0x1d4>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d80a      	bhi.n	8009322 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800931e:	609a      	str	r2, [r3, #8]
}
 8009320:	e007      	b.n	8009332 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	689a      	ldr	r2, [r3, #8]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009330:	609a      	str	r2, [r3, #8]
}
 8009332:	bf00      	nop
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	40022000 	.word	0x40022000
 8009340:	40022100 	.word	0x40022100
 8009344:	40022300 	.word	0x40022300
 8009348:	58026300 	.word	0x58026300
 800934c:	005f5e10 	.word	0x005f5e10
 8009350:	00bebc20 	.word	0x00bebc20
 8009354:	017d7840 	.word	0x017d7840

08009358 <LL_ADC_IsEnabled>:
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	2b01      	cmp	r3, #1
 800936a:	d101      	bne.n	8009370 <LL_ADC_IsEnabled+0x18>
 800936c:	2301      	movs	r3, #1
 800936e:	e000      	b.n	8009372 <LL_ADC_IsEnabled+0x1a>
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
	...

08009380 <LL_ADC_StartCalibration>:
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	689a      	ldr	r2, [r3, #8]
 8009390:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <LL_ADC_StartCalibration+0x38>)
 8009392:	4013      	ands	r3, r2
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80093a0:	430a      	orrs	r2, r1
 80093a2:	4313      	orrs	r3, r2
 80093a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	609a      	str	r2, [r3, #8]
}
 80093ac:	bf00      	nop
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	3ffeffc0 	.word	0x3ffeffc0

080093bc <LL_ADC_IsCalibrationOnGoing>:
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093d0:	d101      	bne.n	80093d6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80093d2:	2301      	movs	r3, #1
 80093d4:	e000      	b.n	80093d8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <LL_ADC_REG_IsConversionOngoing>:
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f003 0304 	and.w	r3, r3, #4
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	d101      	bne.n	80093fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80093f8:	2301      	movs	r3, #1
 80093fa:	e000      	b.n	80093fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
	...

0800940c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8009418:	2300      	movs	r3, #0
 800941a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009422:	2b01      	cmp	r3, #1
 8009424:	d101      	bne.n	800942a <HAL_ADCEx_Calibration_Start+0x1e>
 8009426:	2302      	movs	r3, #2
 8009428:	e04c      	b.n	80094c4 <HAL_ADCEx_Calibration_Start+0xb8>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f7ff fe44 	bl	80090c0 <ADC_Disable>
 8009438:	4603      	mov	r3, r0
 800943a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d135      	bne.n	80094ae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009446:	4b21      	ldr	r3, [pc, #132]	; (80094cc <HAL_ADCEx_Calibration_Start+0xc0>)
 8009448:	4013      	ands	r3, r2
 800944a:	f043 0202 	orr.w	r2, r3, #2
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	68b9      	ldr	r1, [r7, #8]
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff ff90 	bl	8009380 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009460:	e014      	b.n	800948c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	3301      	adds	r3, #1
 8009466:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	4a19      	ldr	r2, [pc, #100]	; (80094d0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d30d      	bcc.n	800948c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009474:	f023 0312 	bic.w	r3, r3, #18
 8009478:	f043 0210 	orr.w	r2, r3, #16
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e01b      	b.n	80094c4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff ff93 	bl	80093bc <LL_ADC_IsCalibrationOnGoing>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e2      	bne.n	8009462 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094a0:	f023 0303 	bic.w	r3, r3, #3
 80094a4:	f043 0201 	orr.w	r2, r3, #1
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	661a      	str	r2, [r3, #96]	; 0x60
 80094ac:	e005      	b.n	80094ba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094b2:	f043 0210 	orr.w	r2, r3, #16
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3718      	adds	r7, #24
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	ffffeefd 	.word	0xffffeefd
 80094d0:	25c3f800 	.word	0x25c3f800

080094d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8009504:	bf00      	nop
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009538:	b590      	push	{r4, r7, lr}
 800953a:	b0a3      	sub	sp, #140	; 0x8c
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800954e:	2b01      	cmp	r3, #1
 8009550:	d101      	bne.n	8009556 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009552:	2302      	movs	r3, #2
 8009554:	e0c1      	b.n	80096da <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800955e:	2300      	movs	r3, #0
 8009560:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8009562:	2300      	movs	r3, #0
 8009564:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a5e      	ldr	r2, [pc, #376]	; (80096e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d102      	bne.n	8009576 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009570:	4b5d      	ldr	r3, [pc, #372]	; (80096e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	e001      	b.n	800957a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8009576:	2300      	movs	r3, #0
 8009578:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10b      	bne.n	8009598 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009584:	f043 0220 	orr.w	r2, r3, #32
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e0a0      	b.n	80096da <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	4618      	mov	r0, r3
 800959c:	f7ff ff22 	bl	80093e4 <LL_ADC_REG_IsConversionOngoing>
 80095a0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff ff1b 	bl	80093e4 <LL_ADC_REG_IsConversionOngoing>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f040 8081 	bne.w	80096b8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80095b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d17c      	bne.n	80096b8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a48      	ldr	r2, [pc, #288]	; (80096e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d004      	beq.n	80095d2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a46      	ldr	r2, [pc, #280]	; (80096e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d101      	bne.n	80095d6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80095d2:	4b46      	ldr	r3, [pc, #280]	; (80096ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80095d4:	e000      	b.n	80095d8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80095d6:	4b46      	ldr	r3, [pc, #280]	; (80096f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80095d8:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d039      	beq.n	8009656 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80095e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	431a      	orrs	r2, r3
 80095f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a3a      	ldr	r2, [pc, #232]	; (80096e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d004      	beq.n	8009608 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a39      	ldr	r2, [pc, #228]	; (80096e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d10e      	bne.n	8009626 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8009608:	4836      	ldr	r0, [pc, #216]	; (80096e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800960a:	f7ff fea5 	bl	8009358 <LL_ADC_IsEnabled>
 800960e:	4604      	mov	r4, r0
 8009610:	4835      	ldr	r0, [pc, #212]	; (80096e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009612:	f7ff fea1 	bl	8009358 <LL_ADC_IsEnabled>
 8009616:	4603      	mov	r3, r0
 8009618:	4323      	orrs	r3, r4
 800961a:	2b00      	cmp	r3, #0
 800961c:	bf0c      	ite	eq
 800961e:	2301      	moveq	r3, #1
 8009620:	2300      	movne	r3, #0
 8009622:	b2db      	uxtb	r3, r3
 8009624:	e008      	b.n	8009638 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009626:	4833      	ldr	r0, [pc, #204]	; (80096f4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8009628:	f7ff fe96 	bl	8009358 <LL_ADC_IsEnabled>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	bf0c      	ite	eq
 8009632:	2301      	moveq	r3, #1
 8009634:	2300      	movne	r3, #0
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b00      	cmp	r3, #0
 800963a:	d047      	beq.n	80096cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800963c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800963e:	689a      	ldr	r2, [r3, #8]
 8009640:	4b2d      	ldr	r3, [pc, #180]	; (80096f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009642:	4013      	ands	r3, r2
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	6811      	ldr	r1, [r2, #0]
 8009648:	683a      	ldr	r2, [r7, #0]
 800964a:	6892      	ldr	r2, [r2, #8]
 800964c:	430a      	orrs	r2, r1
 800964e:	431a      	orrs	r2, r3
 8009650:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009652:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009654:	e03a      	b.n	80096cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8009656:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800965e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009660:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a1f      	ldr	r2, [pc, #124]	; (80096e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d004      	beq.n	8009676 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a1d      	ldr	r2, [pc, #116]	; (80096e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d10e      	bne.n	8009694 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8009676:	481b      	ldr	r0, [pc, #108]	; (80096e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009678:	f7ff fe6e 	bl	8009358 <LL_ADC_IsEnabled>
 800967c:	4604      	mov	r4, r0
 800967e:	481a      	ldr	r0, [pc, #104]	; (80096e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009680:	f7ff fe6a 	bl	8009358 <LL_ADC_IsEnabled>
 8009684:	4603      	mov	r3, r0
 8009686:	4323      	orrs	r3, r4
 8009688:	2b00      	cmp	r3, #0
 800968a:	bf0c      	ite	eq
 800968c:	2301      	moveq	r3, #1
 800968e:	2300      	movne	r3, #0
 8009690:	b2db      	uxtb	r3, r3
 8009692:	e008      	b.n	80096a6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8009694:	4817      	ldr	r0, [pc, #92]	; (80096f4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8009696:	f7ff fe5f 	bl	8009358 <LL_ADC_IsEnabled>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	bf0c      	ite	eq
 80096a0:	2301      	moveq	r3, #1
 80096a2:	2300      	movne	r3, #0
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d010      	beq.n	80096cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80096aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096ac:	689a      	ldr	r2, [r3, #8]
 80096ae:	4b12      	ldr	r3, [pc, #72]	; (80096f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80096b0:	4013      	ands	r3, r2
 80096b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096b4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80096b6:	e009      	b.n	80096cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096bc:	f043 0220 	orr.w	r2, r3, #32
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80096ca:	e000      	b.n	80096ce <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80096cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80096d6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80096da:	4618      	mov	r0, r3
 80096dc:	378c      	adds	r7, #140	; 0x8c
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd90      	pop	{r4, r7, pc}
 80096e2:	bf00      	nop
 80096e4:	40022000 	.word	0x40022000
 80096e8:	40022100 	.word	0x40022100
 80096ec:	40022300 	.word	0x40022300
 80096f0:	58026300 	.word	0x58026300
 80096f4:	58026000 	.word	0x58026000
 80096f8:	fffff0e0 	.word	0xfffff0e0

080096fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f003 0307 	and.w	r3, r3, #7
 800970a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800970c:	4b0b      	ldr	r3, [pc, #44]	; (800973c <__NVIC_SetPriorityGrouping+0x40>)
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009718:	4013      	ands	r3, r2
 800971a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009724:	4b06      	ldr	r3, [pc, #24]	; (8009740 <__NVIC_SetPriorityGrouping+0x44>)
 8009726:	4313      	orrs	r3, r2
 8009728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800972a:	4a04      	ldr	r2, [pc, #16]	; (800973c <__NVIC_SetPriorityGrouping+0x40>)
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	60d3      	str	r3, [r2, #12]
}
 8009730:	bf00      	nop
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	e000ed00 	.word	0xe000ed00
 8009740:	05fa0000 	.word	0x05fa0000

08009744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009744:	b480      	push	{r7}
 8009746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009748:	4b04      	ldr	r3, [pc, #16]	; (800975c <__NVIC_GetPriorityGrouping+0x18>)
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	0a1b      	lsrs	r3, r3, #8
 800974e:	f003 0307 	and.w	r3, r3, #7
}
 8009752:	4618      	mov	r0, r3
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	e000ed00 	.word	0xe000ed00

08009760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800976a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800976e:	2b00      	cmp	r3, #0
 8009770:	db0b      	blt.n	800978a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009772:	88fb      	ldrh	r3, [r7, #6]
 8009774:	f003 021f 	and.w	r2, r3, #31
 8009778:	4907      	ldr	r1, [pc, #28]	; (8009798 <__NVIC_EnableIRQ+0x38>)
 800977a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800977e:	095b      	lsrs	r3, r3, #5
 8009780:	2001      	movs	r0, #1
 8009782:	fa00 f202 	lsl.w	r2, r0, r2
 8009786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800978a:	bf00      	nop
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	e000e100 	.word	0xe000e100

0800979c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	6039      	str	r1, [r7, #0]
 80097a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80097a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	db0a      	blt.n	80097c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	490c      	ldr	r1, [pc, #48]	; (80097e8 <__NVIC_SetPriority+0x4c>)
 80097b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097ba:	0112      	lsls	r2, r2, #4
 80097bc:	b2d2      	uxtb	r2, r2
 80097be:	440b      	add	r3, r1
 80097c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80097c4:	e00a      	b.n	80097dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	4908      	ldr	r1, [pc, #32]	; (80097ec <__NVIC_SetPriority+0x50>)
 80097cc:	88fb      	ldrh	r3, [r7, #6]
 80097ce:	f003 030f 	and.w	r3, r3, #15
 80097d2:	3b04      	subs	r3, #4
 80097d4:	0112      	lsls	r2, r2, #4
 80097d6:	b2d2      	uxtb	r2, r2
 80097d8:	440b      	add	r3, r1
 80097da:	761a      	strb	r2, [r3, #24]
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	e000e100 	.word	0xe000e100
 80097ec:	e000ed00 	.word	0xe000ed00

080097f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b089      	sub	sp, #36	; 0x24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f003 0307 	and.w	r3, r3, #7
 8009802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	f1c3 0307 	rsb	r3, r3, #7
 800980a:	2b04      	cmp	r3, #4
 800980c:	bf28      	it	cs
 800980e:	2304      	movcs	r3, #4
 8009810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	3304      	adds	r3, #4
 8009816:	2b06      	cmp	r3, #6
 8009818:	d902      	bls.n	8009820 <NVIC_EncodePriority+0x30>
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	3b03      	subs	r3, #3
 800981e:	e000      	b.n	8009822 <NVIC_EncodePriority+0x32>
 8009820:	2300      	movs	r3, #0
 8009822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009824:	f04f 32ff 	mov.w	r2, #4294967295
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	fa02 f303 	lsl.w	r3, r2, r3
 800982e:	43da      	mvns	r2, r3
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	401a      	ands	r2, r3
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009838:	f04f 31ff 	mov.w	r1, #4294967295
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	fa01 f303 	lsl.w	r3, r1, r3
 8009842:	43d9      	mvns	r1, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009848:	4313      	orrs	r3, r2
         );
}
 800984a:	4618      	mov	r0, r3
 800984c:	3724      	adds	r7, #36	; 0x24
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
	...

08009858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	3b01      	subs	r3, #1
 8009864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009868:	d301      	bcc.n	800986e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800986a:	2301      	movs	r3, #1
 800986c:	e00f      	b.n	800988e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800986e:	4a0a      	ldr	r2, [pc, #40]	; (8009898 <SysTick_Config+0x40>)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	3b01      	subs	r3, #1
 8009874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009876:	210f      	movs	r1, #15
 8009878:	f04f 30ff 	mov.w	r0, #4294967295
 800987c:	f7ff ff8e 	bl	800979c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009880:	4b05      	ldr	r3, [pc, #20]	; (8009898 <SysTick_Config+0x40>)
 8009882:	2200      	movs	r2, #0
 8009884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009886:	4b04      	ldr	r3, [pc, #16]	; (8009898 <SysTick_Config+0x40>)
 8009888:	2207      	movs	r2, #7
 800988a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	e000e010 	.word	0xe000e010

0800989c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7ff ff29 	bl	80096fc <__NVIC_SetPriorityGrouping>
}
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b086      	sub	sp, #24
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	4603      	mov	r3, r0
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	607a      	str	r2, [r7, #4]
 80098be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80098c0:	f7ff ff40 	bl	8009744 <__NVIC_GetPriorityGrouping>
 80098c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	68b9      	ldr	r1, [r7, #8]
 80098ca:	6978      	ldr	r0, [r7, #20]
 80098cc:	f7ff ff90 	bl	80097f0 <NVIC_EncodePriority>
 80098d0:	4602      	mov	r2, r0
 80098d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80098d6:	4611      	mov	r1, r2
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff ff5f 	bl	800979c <__NVIC_SetPriority>
}
 80098de:	bf00      	nop
 80098e0:	3718      	adds	r7, #24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	4603      	mov	r3, r0
 80098ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80098f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7ff ff33 	bl	8009760 <__NVIC_EnableIRQ>
}
 80098fa:	bf00      	nop
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b082      	sub	sp, #8
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7ff ffa4 	bl	8009858 <SysTick_Config>
 8009910:	4603      	mov	r3, r0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
	...

0800991c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e054      	b.n	80099d8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	7f5b      	ldrb	r3, [r3, #29]
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b00      	cmp	r3, #0
 8009936:	d105      	bne.n	8009944 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7f8 f926 	bl	8001b90 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	791b      	ldrb	r3, [r3, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10c      	bne.n	800996c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a22      	ldr	r2, [pc, #136]	; (80099e0 <HAL_CRC_Init+0xc4>)
 8009958:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	689a      	ldr	r2, [r3, #8]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f022 0218 	bic.w	r2, r2, #24
 8009968:	609a      	str	r2, [r3, #8]
 800996a:	e00c      	b.n	8009986 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6899      	ldr	r1, [r3, #8]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	461a      	mov	r2, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f948 	bl	8009c0c <HAL_CRCEx_Polynomial_Set>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e028      	b.n	80099d8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	795b      	ldrb	r3, [r3, #5]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d105      	bne.n	800999a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f04f 32ff 	mov.w	r2, #4294967295
 8009996:	611a      	str	r2, [r3, #16]
 8009998:	e004      	b.n	80099a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	6912      	ldr	r2, [r2, #16]
 80099a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	695a      	ldr	r2, [r3, #20]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	699a      	ldr	r2, [r3, #24]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	430a      	orrs	r2, r1
 80099ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	04c11db7 	.word	0x04c11db7

080099e4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80099f0:	2300      	movs	r3, #0
 80099f2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2202      	movs	r2, #2
 80099f8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f042 0201 	orr.w	r2, r2, #1
 8009a08:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6a1b      	ldr	r3, [r3, #32]
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d006      	beq.n	8009a20 <HAL_CRC_Calculate+0x3c>
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d829      	bhi.n	8009a6a <HAL_CRC_Calculate+0x86>
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d019      	beq.n	8009a4e <HAL_CRC_Calculate+0x6a>
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d01e      	beq.n	8009a5c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8009a1e:	e024      	b.n	8009a6a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8009a20:	2300      	movs	r3, #0
 8009a22:	617b      	str	r3, [r7, #20]
 8009a24:	e00a      	b.n	8009a3c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	68ba      	ldr	r2, [r7, #8]
 8009a2c:	441a      	add	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6812      	ldr	r2, [r2, #0]
 8009a34:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	617b      	str	r3, [r7, #20]
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d3f0      	bcc.n	8009a26 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	613b      	str	r3, [r7, #16]
      break;
 8009a4c:	e00e      	b.n	8009a6c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	68b9      	ldr	r1, [r7, #8]
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 f812 	bl	8009a7c <CRC_Handle_8>
 8009a58:	6138      	str	r0, [r7, #16]
      break;
 8009a5a:	e007      	b.n	8009a6c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 f899 	bl	8009b98 <CRC_Handle_16>
 8009a66:	6138      	str	r0, [r7, #16]
      break;
 8009a68:	e000      	b.n	8009a6c <HAL_CRC_Calculate+0x88>
      break;
 8009a6a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8009a72:	693b      	ldr	r3, [r7, #16]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3718      	adds	r7, #24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b089      	sub	sp, #36	; 0x24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009a88:	2300      	movs	r3, #0
 8009a8a:	61fb      	str	r3, [r7, #28]
 8009a8c:	e023      	b.n	8009ad6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	4413      	add	r3, r2
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	68b9      	ldr	r1, [r7, #8]
 8009aa2:	440b      	add	r3, r1
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009aa8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	3302      	adds	r3, #2
 8009ab0:	68b9      	ldr	r1, [r7, #8]
 8009ab2:	440b      	add	r3, r1
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009ab8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	3303      	adds	r3, #3
 8009ac0:	68b9      	ldr	r1, [r7, #8]
 8009ac2:	440b      	add	r3, r1
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009acc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009ace:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	61fb      	str	r3, [r7, #28]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	089b      	lsrs	r3, r3, #2
 8009ada:	69fa      	ldr	r2, [r7, #28]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d3d6      	bcc.n	8009a8e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f003 0303 	and.w	r3, r3, #3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d04d      	beq.n	8009b86 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f003 0303 	and.w	r3, r3, #3
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d107      	bne.n	8009b04 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	4413      	add	r3, r2
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	6812      	ldr	r2, [r2, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f003 0303 	and.w	r3, r3, #3
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d116      	bne.n	8009b3c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	4413      	add	r3, r2
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	b21a      	sxth	r2, r3
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	3301      	adds	r3, #1
 8009b22:	68b9      	ldr	r1, [r7, #8]
 8009b24:	440b      	add	r3, r1
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	b21b      	sxth	r3, r3
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	b21b      	sxth	r3, r3
 8009b2e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	8b7a      	ldrh	r2, [r7, #26]
 8009b3a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f003 0303 	and.w	r3, r3, #3
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d11f      	bne.n	8009b86 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	021b      	lsls	r3, r3, #8
 8009b52:	b21a      	sxth	r2, r3
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	3301      	adds	r3, #1
 8009b5a:	68b9      	ldr	r1, [r7, #8]
 8009b5c:	440b      	add	r3, r1
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	b21b      	sxth	r3, r3
 8009b62:	4313      	orrs	r3, r2
 8009b64:	b21b      	sxth	r3, r3
 8009b66:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	8b7a      	ldrh	r2, [r7, #26]
 8009b72:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	3302      	adds	r3, #2
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	6812      	ldr	r2, [r2, #0]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3724      	adds	r7, #36	; 0x24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	617b      	str	r3, [r7, #20]
 8009ba8:	e013      	b.n	8009bd2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	041a      	lsls	r2, r3, #16
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	3302      	adds	r3, #2
 8009bbc:	68b9      	ldr	r1, [r7, #8]
 8009bbe:	440b      	add	r3, r1
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	617b      	str	r3, [r7, #20]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	085b      	lsrs	r3, r3, #1
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d3e6      	bcc.n	8009baa <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d009      	beq.n	8009bfa <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	881a      	ldrh	r2, [r3, #0]
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	371c      	adds	r7, #28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009c1c:	231f      	movs	r3, #31
 8009c1e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009c20:	bf00      	nop
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	1e5a      	subs	r2, r3, #1
 8009c26:	613a      	str	r2, [r7, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d009      	beq.n	8009c40 <HAL_CRCEx_Polynomial_Set+0x34>
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	f003 031f 	and.w	r3, r3, #31
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	fa22 f303 	lsr.w	r3, r2, r3
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d0f0      	beq.n	8009c22 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b18      	cmp	r3, #24
 8009c44:	d846      	bhi.n	8009cd4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8009c46:	a201      	add	r2, pc, #4	; (adr r2, 8009c4c <HAL_CRCEx_Polynomial_Set+0x40>)
 8009c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4c:	08009cdb 	.word	0x08009cdb
 8009c50:	08009cd5 	.word	0x08009cd5
 8009c54:	08009cd5 	.word	0x08009cd5
 8009c58:	08009cd5 	.word	0x08009cd5
 8009c5c:	08009cd5 	.word	0x08009cd5
 8009c60:	08009cd5 	.word	0x08009cd5
 8009c64:	08009cd5 	.word	0x08009cd5
 8009c68:	08009cd5 	.word	0x08009cd5
 8009c6c:	08009cc9 	.word	0x08009cc9
 8009c70:	08009cd5 	.word	0x08009cd5
 8009c74:	08009cd5 	.word	0x08009cd5
 8009c78:	08009cd5 	.word	0x08009cd5
 8009c7c:	08009cd5 	.word	0x08009cd5
 8009c80:	08009cd5 	.word	0x08009cd5
 8009c84:	08009cd5 	.word	0x08009cd5
 8009c88:	08009cd5 	.word	0x08009cd5
 8009c8c:	08009cbd 	.word	0x08009cbd
 8009c90:	08009cd5 	.word	0x08009cd5
 8009c94:	08009cd5 	.word	0x08009cd5
 8009c98:	08009cd5 	.word	0x08009cd5
 8009c9c:	08009cd5 	.word	0x08009cd5
 8009ca0:	08009cd5 	.word	0x08009cd5
 8009ca4:	08009cd5 	.word	0x08009cd5
 8009ca8:	08009cd5 	.word	0x08009cd5
 8009cac:	08009cb1 	.word	0x08009cb1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	2b06      	cmp	r3, #6
 8009cb4:	d913      	bls.n	8009cde <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009cba:	e010      	b.n	8009cde <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	2b07      	cmp	r3, #7
 8009cc0:	d90f      	bls.n	8009ce2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009cc6:	e00c      	b.n	8009ce2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	2b0f      	cmp	r3, #15
 8009ccc:	d90b      	bls.n	8009ce6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009cd2:	e008      	b.n	8009ce6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8009cd8:	e006      	b.n	8009ce8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009cda:	bf00      	nop
 8009cdc:	e004      	b.n	8009ce8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009cde:	bf00      	nop
 8009ce0:	e002      	b.n	8009ce8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009ce2:	bf00      	nop
 8009ce4:	e000      	b.n	8009ce8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009ce6:	bf00      	nop
  }
  if (status == HAL_OK)
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10d      	bne.n	8009d0a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f023 0118 	bic.w	r1, r3, #24
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	430a      	orrs	r2, r1
 8009d08:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	371c      	adds	r7, #28
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8009d20:	f7fd fb6e 	bl	8007400 <HAL_GetTick>
 8009d24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e314      	b.n	800a35a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a66      	ldr	r2, [pc, #408]	; (8009ed0 <HAL_DMA_Init+0x1b8>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d04a      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a65      	ldr	r2, [pc, #404]	; (8009ed4 <HAL_DMA_Init+0x1bc>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d045      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a63      	ldr	r2, [pc, #396]	; (8009ed8 <HAL_DMA_Init+0x1c0>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d040      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a62      	ldr	r2, [pc, #392]	; (8009edc <HAL_DMA_Init+0x1c4>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d03b      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a60      	ldr	r2, [pc, #384]	; (8009ee0 <HAL_DMA_Init+0x1c8>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d036      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a5f      	ldr	r2, [pc, #380]	; (8009ee4 <HAL_DMA_Init+0x1cc>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d031      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a5d      	ldr	r2, [pc, #372]	; (8009ee8 <HAL_DMA_Init+0x1d0>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d02c      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a5c      	ldr	r2, [pc, #368]	; (8009eec <HAL_DMA_Init+0x1d4>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d027      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a5a      	ldr	r2, [pc, #360]	; (8009ef0 <HAL_DMA_Init+0x1d8>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d022      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a59      	ldr	r2, [pc, #356]	; (8009ef4 <HAL_DMA_Init+0x1dc>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d01d      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a57      	ldr	r2, [pc, #348]	; (8009ef8 <HAL_DMA_Init+0x1e0>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d018      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a56      	ldr	r2, [pc, #344]	; (8009efc <HAL_DMA_Init+0x1e4>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d013      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a54      	ldr	r2, [pc, #336]	; (8009f00 <HAL_DMA_Init+0x1e8>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d00e      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a53      	ldr	r2, [pc, #332]	; (8009f04 <HAL_DMA_Init+0x1ec>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d009      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a51      	ldr	r2, [pc, #324]	; (8009f08 <HAL_DMA_Init+0x1f0>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d004      	beq.n	8009dd0 <HAL_DMA_Init+0xb8>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a50      	ldr	r2, [pc, #320]	; (8009f0c <HAL_DMA_Init+0x1f4>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d101      	bne.n	8009dd4 <HAL_DMA_Init+0xbc>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e000      	b.n	8009dd6 <HAL_DMA_Init+0xbe>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 813c 	beq.w	800a054 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2202      	movs	r2, #2
 8009de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a37      	ldr	r2, [pc, #220]	; (8009ed0 <HAL_DMA_Init+0x1b8>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d04a      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a36      	ldr	r2, [pc, #216]	; (8009ed4 <HAL_DMA_Init+0x1bc>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d045      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a34      	ldr	r2, [pc, #208]	; (8009ed8 <HAL_DMA_Init+0x1c0>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d040      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a33      	ldr	r2, [pc, #204]	; (8009edc <HAL_DMA_Init+0x1c4>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d03b      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a31      	ldr	r2, [pc, #196]	; (8009ee0 <HAL_DMA_Init+0x1c8>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d036      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a30      	ldr	r2, [pc, #192]	; (8009ee4 <HAL_DMA_Init+0x1cc>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d031      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a2e      	ldr	r2, [pc, #184]	; (8009ee8 <HAL_DMA_Init+0x1d0>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d02c      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a2d      	ldr	r2, [pc, #180]	; (8009eec <HAL_DMA_Init+0x1d4>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d027      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a2b      	ldr	r2, [pc, #172]	; (8009ef0 <HAL_DMA_Init+0x1d8>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d022      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a2a      	ldr	r2, [pc, #168]	; (8009ef4 <HAL_DMA_Init+0x1dc>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d01d      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a28      	ldr	r2, [pc, #160]	; (8009ef8 <HAL_DMA_Init+0x1e0>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d018      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a27      	ldr	r2, [pc, #156]	; (8009efc <HAL_DMA_Init+0x1e4>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d013      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a25      	ldr	r2, [pc, #148]	; (8009f00 <HAL_DMA_Init+0x1e8>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d00e      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a24      	ldr	r2, [pc, #144]	; (8009f04 <HAL_DMA_Init+0x1ec>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d009      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a22      	ldr	r2, [pc, #136]	; (8009f08 <HAL_DMA_Init+0x1f0>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d004      	beq.n	8009e8c <HAL_DMA_Init+0x174>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a21      	ldr	r2, [pc, #132]	; (8009f0c <HAL_DMA_Init+0x1f4>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d108      	bne.n	8009e9e <HAL_DMA_Init+0x186>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f022 0201 	bic.w	r2, r2, #1
 8009e9a:	601a      	str	r2, [r3, #0]
 8009e9c:	e007      	b.n	8009eae <HAL_DMA_Init+0x196>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f022 0201 	bic.w	r2, r2, #1
 8009eac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009eae:	e02f      	b.n	8009f10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009eb0:	f7fd faa6 	bl	8007400 <HAL_GetTick>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	2b05      	cmp	r3, #5
 8009ebc:	d928      	bls.n	8009f10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2203      	movs	r2, #3
 8009ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e244      	b.n	800a35a <HAL_DMA_Init+0x642>
 8009ed0:	40020010 	.word	0x40020010
 8009ed4:	40020028 	.word	0x40020028
 8009ed8:	40020040 	.word	0x40020040
 8009edc:	40020058 	.word	0x40020058
 8009ee0:	40020070 	.word	0x40020070
 8009ee4:	40020088 	.word	0x40020088
 8009ee8:	400200a0 	.word	0x400200a0
 8009eec:	400200b8 	.word	0x400200b8
 8009ef0:	40020410 	.word	0x40020410
 8009ef4:	40020428 	.word	0x40020428
 8009ef8:	40020440 	.word	0x40020440
 8009efc:	40020458 	.word	0x40020458
 8009f00:	40020470 	.word	0x40020470
 8009f04:	40020488 	.word	0x40020488
 8009f08:	400204a0 	.word	0x400204a0
 8009f0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1c8      	bne.n	8009eb0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	4b84      	ldr	r3, [pc, #528]	; (800a13c <HAL_DMA_Init+0x424>)
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8009f36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f60:	2b04      	cmp	r3, #4
 8009f62:	d107      	bne.n	8009f74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	2b28      	cmp	r3, #40	; 0x28
 8009f7a:	d903      	bls.n	8009f84 <HAL_DMA_Init+0x26c>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	2b2e      	cmp	r3, #46	; 0x2e
 8009f82:	d91f      	bls.n	8009fc4 <HAL_DMA_Init+0x2ac>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	2b3e      	cmp	r3, #62	; 0x3e
 8009f8a:	d903      	bls.n	8009f94 <HAL_DMA_Init+0x27c>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	2b42      	cmp	r3, #66	; 0x42
 8009f92:	d917      	bls.n	8009fc4 <HAL_DMA_Init+0x2ac>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	2b46      	cmp	r3, #70	; 0x46
 8009f9a:	d903      	bls.n	8009fa4 <HAL_DMA_Init+0x28c>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	2b48      	cmp	r3, #72	; 0x48
 8009fa2:	d90f      	bls.n	8009fc4 <HAL_DMA_Init+0x2ac>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	2b4e      	cmp	r3, #78	; 0x4e
 8009faa:	d903      	bls.n	8009fb4 <HAL_DMA_Init+0x29c>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	2b52      	cmp	r3, #82	; 0x52
 8009fb2:	d907      	bls.n	8009fc4 <HAL_DMA_Init+0x2ac>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	2b73      	cmp	r3, #115	; 0x73
 8009fba:	d905      	bls.n	8009fc8 <HAL_DMA_Init+0x2b0>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	2b77      	cmp	r3, #119	; 0x77
 8009fc2:	d801      	bhi.n	8009fc8 <HAL_DMA_Init+0x2b0>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e000      	b.n	8009fca <HAL_DMA_Init+0x2b2>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fd4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f023 0307 	bic.w	r3, r3, #7
 8009fec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffc:	2b04      	cmp	r3, #4
 8009ffe:	d117      	bne.n	800a030 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	4313      	orrs	r3, r2
 800a008:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00e      	beq.n	800a030 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f002 fb3e 	bl	800c694 <DMA_CheckFifoParam>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d008      	beq.n	800a030 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2240      	movs	r2, #64	; 0x40
 800a022:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e194      	b.n	800a35a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f002 fa79 	bl	800c530 <DMA_CalcBaseAndBitshift>
 800a03e:	4603      	mov	r3, r0
 800a040:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a046:	f003 031f 	and.w	r3, r3, #31
 800a04a:	223f      	movs	r2, #63	; 0x3f
 800a04c:	409a      	lsls	r2, r3
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	609a      	str	r2, [r3, #8]
 800a052:	e0ca      	b.n	800a1ea <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a39      	ldr	r2, [pc, #228]	; (800a140 <HAL_DMA_Init+0x428>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d022      	beq.n	800a0a4 <HAL_DMA_Init+0x38c>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a38      	ldr	r2, [pc, #224]	; (800a144 <HAL_DMA_Init+0x42c>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d01d      	beq.n	800a0a4 <HAL_DMA_Init+0x38c>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a36      	ldr	r2, [pc, #216]	; (800a148 <HAL_DMA_Init+0x430>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d018      	beq.n	800a0a4 <HAL_DMA_Init+0x38c>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a35      	ldr	r2, [pc, #212]	; (800a14c <HAL_DMA_Init+0x434>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d013      	beq.n	800a0a4 <HAL_DMA_Init+0x38c>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a33      	ldr	r2, [pc, #204]	; (800a150 <HAL_DMA_Init+0x438>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d00e      	beq.n	800a0a4 <HAL_DMA_Init+0x38c>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a32      	ldr	r2, [pc, #200]	; (800a154 <HAL_DMA_Init+0x43c>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d009      	beq.n	800a0a4 <HAL_DMA_Init+0x38c>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a30      	ldr	r2, [pc, #192]	; (800a158 <HAL_DMA_Init+0x440>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d004      	beq.n	800a0a4 <HAL_DMA_Init+0x38c>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a2f      	ldr	r2, [pc, #188]	; (800a15c <HAL_DMA_Init+0x444>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d101      	bne.n	800a0a8 <HAL_DMA_Init+0x390>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e000      	b.n	800a0aa <HAL_DMA_Init+0x392>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f000 8094 	beq.w	800a1d8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a22      	ldr	r2, [pc, #136]	; (800a140 <HAL_DMA_Init+0x428>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d021      	beq.n	800a0fe <HAL_DMA_Init+0x3e6>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a21      	ldr	r2, [pc, #132]	; (800a144 <HAL_DMA_Init+0x42c>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d01c      	beq.n	800a0fe <HAL_DMA_Init+0x3e6>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a1f      	ldr	r2, [pc, #124]	; (800a148 <HAL_DMA_Init+0x430>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d017      	beq.n	800a0fe <HAL_DMA_Init+0x3e6>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a1e      	ldr	r2, [pc, #120]	; (800a14c <HAL_DMA_Init+0x434>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d012      	beq.n	800a0fe <HAL_DMA_Init+0x3e6>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a1c      	ldr	r2, [pc, #112]	; (800a150 <HAL_DMA_Init+0x438>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d00d      	beq.n	800a0fe <HAL_DMA_Init+0x3e6>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a1b      	ldr	r2, [pc, #108]	; (800a154 <HAL_DMA_Init+0x43c>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d008      	beq.n	800a0fe <HAL_DMA_Init+0x3e6>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a19      	ldr	r2, [pc, #100]	; (800a158 <HAL_DMA_Init+0x440>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d003      	beq.n	800a0fe <HAL_DMA_Init+0x3e6>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a18      	ldr	r2, [pc, #96]	; (800a15c <HAL_DMA_Init+0x444>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2202      	movs	r2, #2
 800a104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	4b11      	ldr	r3, [pc, #68]	; (800a160 <HAL_DMA_Init+0x448>)
 800a11c:	4013      	ands	r3, r2
 800a11e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	2b40      	cmp	r3, #64	; 0x40
 800a126:	d01d      	beq.n	800a164 <HAL_DMA_Init+0x44c>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	2b80      	cmp	r3, #128	; 0x80
 800a12e:	d102      	bne.n	800a136 <HAL_DMA_Init+0x41e>
 800a130:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a134:	e017      	b.n	800a166 <HAL_DMA_Init+0x44e>
 800a136:	2300      	movs	r3, #0
 800a138:	e015      	b.n	800a166 <HAL_DMA_Init+0x44e>
 800a13a:	bf00      	nop
 800a13c:	fe10803f 	.word	0xfe10803f
 800a140:	58025408 	.word	0x58025408
 800a144:	5802541c 	.word	0x5802541c
 800a148:	58025430 	.word	0x58025430
 800a14c:	58025444 	.word	0x58025444
 800a150:	58025458 	.word	0x58025458
 800a154:	5802546c 	.word	0x5802546c
 800a158:	58025480 	.word	0x58025480
 800a15c:	58025494 	.word	0x58025494
 800a160:	fffe000f 	.word	0xfffe000f
 800a164:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	68d2      	ldr	r2, [r2, #12]
 800a16a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a16c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800a174:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	695b      	ldr	r3, [r3, #20]
 800a17a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800a17c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800a184:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	69db      	ldr	r3, [r3, #28]
 800a18a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800a18c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800a194:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	4313      	orrs	r3, r2
 800a19a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	4b6e      	ldr	r3, [pc, #440]	; (800a364 <HAL_DMA_Init+0x64c>)
 800a1ac:	4413      	add	r3, r2
 800a1ae:	4a6e      	ldr	r2, [pc, #440]	; (800a368 <HAL_DMA_Init+0x650>)
 800a1b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b4:	091b      	lsrs	r3, r3, #4
 800a1b6:	009a      	lsls	r2, r3, #2
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f002 f9b7 	bl	800c530 <DMA_CalcBaseAndBitshift>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ca:	f003 031f 	and.w	r3, r3, #31
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	409a      	lsls	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	605a      	str	r2, [r3, #4]
 800a1d6:	e008      	b.n	800a1ea <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2240      	movs	r2, #64	; 0x40
 800a1dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2203      	movs	r2, #3
 800a1e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e0b7      	b.n	800a35a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a5f      	ldr	r2, [pc, #380]	; (800a36c <HAL_DMA_Init+0x654>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d072      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a5d      	ldr	r2, [pc, #372]	; (800a370 <HAL_DMA_Init+0x658>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d06d      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a5c      	ldr	r2, [pc, #368]	; (800a374 <HAL_DMA_Init+0x65c>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d068      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a5a      	ldr	r2, [pc, #360]	; (800a378 <HAL_DMA_Init+0x660>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d063      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a59      	ldr	r2, [pc, #356]	; (800a37c <HAL_DMA_Init+0x664>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d05e      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a57      	ldr	r2, [pc, #348]	; (800a380 <HAL_DMA_Init+0x668>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d059      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a56      	ldr	r2, [pc, #344]	; (800a384 <HAL_DMA_Init+0x66c>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d054      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a54      	ldr	r2, [pc, #336]	; (800a388 <HAL_DMA_Init+0x670>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d04f      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a53      	ldr	r2, [pc, #332]	; (800a38c <HAL_DMA_Init+0x674>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d04a      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a51      	ldr	r2, [pc, #324]	; (800a390 <HAL_DMA_Init+0x678>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d045      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a50      	ldr	r2, [pc, #320]	; (800a394 <HAL_DMA_Init+0x67c>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d040      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a4e      	ldr	r2, [pc, #312]	; (800a398 <HAL_DMA_Init+0x680>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d03b      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a4d      	ldr	r2, [pc, #308]	; (800a39c <HAL_DMA_Init+0x684>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d036      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a4b      	ldr	r2, [pc, #300]	; (800a3a0 <HAL_DMA_Init+0x688>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d031      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a4a      	ldr	r2, [pc, #296]	; (800a3a4 <HAL_DMA_Init+0x68c>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d02c      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a48      	ldr	r2, [pc, #288]	; (800a3a8 <HAL_DMA_Init+0x690>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d027      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a47      	ldr	r2, [pc, #284]	; (800a3ac <HAL_DMA_Init+0x694>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d022      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a45      	ldr	r2, [pc, #276]	; (800a3b0 <HAL_DMA_Init+0x698>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d01d      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a44      	ldr	r2, [pc, #272]	; (800a3b4 <HAL_DMA_Init+0x69c>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d018      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a42      	ldr	r2, [pc, #264]	; (800a3b8 <HAL_DMA_Init+0x6a0>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d013      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a41      	ldr	r2, [pc, #260]	; (800a3bc <HAL_DMA_Init+0x6a4>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d00e      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a3f      	ldr	r2, [pc, #252]	; (800a3c0 <HAL_DMA_Init+0x6a8>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d009      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a3e      	ldr	r2, [pc, #248]	; (800a3c4 <HAL_DMA_Init+0x6ac>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d004      	beq.n	800a2da <HAL_DMA_Init+0x5c2>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a3c      	ldr	r2, [pc, #240]	; (800a3c8 <HAL_DMA_Init+0x6b0>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d101      	bne.n	800a2de <HAL_DMA_Init+0x5c6>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e000      	b.n	800a2e0 <HAL_DMA_Init+0x5c8>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d032      	beq.n	800a34a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f002 fa51 	bl	800c78c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	2b80      	cmp	r3, #128	; 0x80
 800a2f0:	d102      	bne.n	800a2f8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a300:	b2d2      	uxtb	r2, r2
 800a302:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a30c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d010      	beq.n	800a338 <HAL_DMA_Init+0x620>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	2b08      	cmp	r3, #8
 800a31c:	d80c      	bhi.n	800a338 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f002 face 	bl	800c8c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a328:	2200      	movs	r2, #0
 800a32a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a334:	605a      	str	r2, [r3, #4]
 800a336:	e008      	b.n	800a34a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	a7fdabf8 	.word	0xa7fdabf8
 800a368:	cccccccd 	.word	0xcccccccd
 800a36c:	40020010 	.word	0x40020010
 800a370:	40020028 	.word	0x40020028
 800a374:	40020040 	.word	0x40020040
 800a378:	40020058 	.word	0x40020058
 800a37c:	40020070 	.word	0x40020070
 800a380:	40020088 	.word	0x40020088
 800a384:	400200a0 	.word	0x400200a0
 800a388:	400200b8 	.word	0x400200b8
 800a38c:	40020410 	.word	0x40020410
 800a390:	40020428 	.word	0x40020428
 800a394:	40020440 	.word	0x40020440
 800a398:	40020458 	.word	0x40020458
 800a39c:	40020470 	.word	0x40020470
 800a3a0:	40020488 	.word	0x40020488
 800a3a4:	400204a0 	.word	0x400204a0
 800a3a8:	400204b8 	.word	0x400204b8
 800a3ac:	58025408 	.word	0x58025408
 800a3b0:	5802541c 	.word	0x5802541c
 800a3b4:	58025430 	.word	0x58025430
 800a3b8:	58025444 	.word	0x58025444
 800a3bc:	58025458 	.word	0x58025458
 800a3c0:	5802546c 	.word	0x5802546c
 800a3c4:	58025480 	.word	0x58025480
 800a3c8:	58025494 	.word	0x58025494

0800a3cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
 800a3d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e226      	b.n	800a836 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d101      	bne.n	800a3f6 <HAL_DMA_Start_IT+0x2a>
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	e21f      	b.n	800a836 <HAL_DMA_Start_IT+0x46a>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a404:	b2db      	uxtb	r3, r3
 800a406:	2b01      	cmp	r3, #1
 800a408:	f040 820a 	bne.w	800a820 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2202      	movs	r2, #2
 800a410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a68      	ldr	r2, [pc, #416]	; (800a5c0 <HAL_DMA_Start_IT+0x1f4>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d04a      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a66      	ldr	r2, [pc, #408]	; (800a5c4 <HAL_DMA_Start_IT+0x1f8>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d045      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a65      	ldr	r2, [pc, #404]	; (800a5c8 <HAL_DMA_Start_IT+0x1fc>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d040      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a63      	ldr	r2, [pc, #396]	; (800a5cc <HAL_DMA_Start_IT+0x200>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d03b      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a62      	ldr	r2, [pc, #392]	; (800a5d0 <HAL_DMA_Start_IT+0x204>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d036      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a60      	ldr	r2, [pc, #384]	; (800a5d4 <HAL_DMA_Start_IT+0x208>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d031      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a5f      	ldr	r2, [pc, #380]	; (800a5d8 <HAL_DMA_Start_IT+0x20c>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d02c      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a5d      	ldr	r2, [pc, #372]	; (800a5dc <HAL_DMA_Start_IT+0x210>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d027      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a5c      	ldr	r2, [pc, #368]	; (800a5e0 <HAL_DMA_Start_IT+0x214>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d022      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a5a      	ldr	r2, [pc, #360]	; (800a5e4 <HAL_DMA_Start_IT+0x218>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d01d      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a59      	ldr	r2, [pc, #356]	; (800a5e8 <HAL_DMA_Start_IT+0x21c>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d018      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a57      	ldr	r2, [pc, #348]	; (800a5ec <HAL_DMA_Start_IT+0x220>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d013      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a56      	ldr	r2, [pc, #344]	; (800a5f0 <HAL_DMA_Start_IT+0x224>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d00e      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a54      	ldr	r2, [pc, #336]	; (800a5f4 <HAL_DMA_Start_IT+0x228>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d009      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a53      	ldr	r2, [pc, #332]	; (800a5f8 <HAL_DMA_Start_IT+0x22c>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d004      	beq.n	800a4ba <HAL_DMA_Start_IT+0xee>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a51      	ldr	r2, [pc, #324]	; (800a5fc <HAL_DMA_Start_IT+0x230>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d108      	bne.n	800a4cc <HAL_DMA_Start_IT+0x100>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f022 0201 	bic.w	r2, r2, #1
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	e007      	b.n	800a4dc <HAL_DMA_Start_IT+0x110>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f022 0201 	bic.w	r2, r2, #1
 800a4da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	68b9      	ldr	r1, [r7, #8]
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f001 fe78 	bl	800c1d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a34      	ldr	r2, [pc, #208]	; (800a5c0 <HAL_DMA_Start_IT+0x1f4>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d04a      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a33      	ldr	r2, [pc, #204]	; (800a5c4 <HAL_DMA_Start_IT+0x1f8>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d045      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a31      	ldr	r2, [pc, #196]	; (800a5c8 <HAL_DMA_Start_IT+0x1fc>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d040      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a30      	ldr	r2, [pc, #192]	; (800a5cc <HAL_DMA_Start_IT+0x200>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d03b      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a2e      	ldr	r2, [pc, #184]	; (800a5d0 <HAL_DMA_Start_IT+0x204>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d036      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a2d      	ldr	r2, [pc, #180]	; (800a5d4 <HAL_DMA_Start_IT+0x208>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d031      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a2b      	ldr	r2, [pc, #172]	; (800a5d8 <HAL_DMA_Start_IT+0x20c>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d02c      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a2a      	ldr	r2, [pc, #168]	; (800a5dc <HAL_DMA_Start_IT+0x210>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d027      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a28      	ldr	r2, [pc, #160]	; (800a5e0 <HAL_DMA_Start_IT+0x214>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d022      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a27      	ldr	r2, [pc, #156]	; (800a5e4 <HAL_DMA_Start_IT+0x218>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d01d      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a25      	ldr	r2, [pc, #148]	; (800a5e8 <HAL_DMA_Start_IT+0x21c>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d018      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a24      	ldr	r2, [pc, #144]	; (800a5ec <HAL_DMA_Start_IT+0x220>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d013      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a22      	ldr	r2, [pc, #136]	; (800a5f0 <HAL_DMA_Start_IT+0x224>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d00e      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a21      	ldr	r2, [pc, #132]	; (800a5f4 <HAL_DMA_Start_IT+0x228>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d009      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a1f      	ldr	r2, [pc, #124]	; (800a5f8 <HAL_DMA_Start_IT+0x22c>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d004      	beq.n	800a588 <HAL_DMA_Start_IT+0x1bc>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a1e      	ldr	r2, [pc, #120]	; (800a5fc <HAL_DMA_Start_IT+0x230>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d101      	bne.n	800a58c <HAL_DMA_Start_IT+0x1c0>
 800a588:	2301      	movs	r3, #1
 800a58a:	e000      	b.n	800a58e <HAL_DMA_Start_IT+0x1c2>
 800a58c:	2300      	movs	r3, #0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d036      	beq.n	800a600 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f023 021e 	bic.w	r2, r3, #30
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f042 0216 	orr.w	r2, r2, #22
 800a5a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d03e      	beq.n	800a62c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f042 0208 	orr.w	r2, r2, #8
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	e035      	b.n	800a62c <HAL_DMA_Start_IT+0x260>
 800a5c0:	40020010 	.word	0x40020010
 800a5c4:	40020028 	.word	0x40020028
 800a5c8:	40020040 	.word	0x40020040
 800a5cc:	40020058 	.word	0x40020058
 800a5d0:	40020070 	.word	0x40020070
 800a5d4:	40020088 	.word	0x40020088
 800a5d8:	400200a0 	.word	0x400200a0
 800a5dc:	400200b8 	.word	0x400200b8
 800a5e0:	40020410 	.word	0x40020410
 800a5e4:	40020428 	.word	0x40020428
 800a5e8:	40020440 	.word	0x40020440
 800a5ec:	40020458 	.word	0x40020458
 800a5f0:	40020470 	.word	0x40020470
 800a5f4:	40020488 	.word	0x40020488
 800a5f8:	400204a0 	.word	0x400204a0
 800a5fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f023 020e 	bic.w	r2, r3, #14
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f042 020a 	orr.w	r2, r2, #10
 800a612:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d007      	beq.n	800a62c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f042 0204 	orr.w	r2, r2, #4
 800a62a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a83      	ldr	r2, [pc, #524]	; (800a840 <HAL_DMA_Start_IT+0x474>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d072      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a82      	ldr	r2, [pc, #520]	; (800a844 <HAL_DMA_Start_IT+0x478>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d06d      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a80      	ldr	r2, [pc, #512]	; (800a848 <HAL_DMA_Start_IT+0x47c>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d068      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a7f      	ldr	r2, [pc, #508]	; (800a84c <HAL_DMA_Start_IT+0x480>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d063      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a7d      	ldr	r2, [pc, #500]	; (800a850 <HAL_DMA_Start_IT+0x484>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d05e      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a7c      	ldr	r2, [pc, #496]	; (800a854 <HAL_DMA_Start_IT+0x488>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d059      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a7a      	ldr	r2, [pc, #488]	; (800a858 <HAL_DMA_Start_IT+0x48c>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d054      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a79      	ldr	r2, [pc, #484]	; (800a85c <HAL_DMA_Start_IT+0x490>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d04f      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a77      	ldr	r2, [pc, #476]	; (800a860 <HAL_DMA_Start_IT+0x494>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d04a      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a76      	ldr	r2, [pc, #472]	; (800a864 <HAL_DMA_Start_IT+0x498>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d045      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a74      	ldr	r2, [pc, #464]	; (800a868 <HAL_DMA_Start_IT+0x49c>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d040      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a73      	ldr	r2, [pc, #460]	; (800a86c <HAL_DMA_Start_IT+0x4a0>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d03b      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a71      	ldr	r2, [pc, #452]	; (800a870 <HAL_DMA_Start_IT+0x4a4>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d036      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a70      	ldr	r2, [pc, #448]	; (800a874 <HAL_DMA_Start_IT+0x4a8>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d031      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a6e      	ldr	r2, [pc, #440]	; (800a878 <HAL_DMA_Start_IT+0x4ac>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d02c      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a6d      	ldr	r2, [pc, #436]	; (800a87c <HAL_DMA_Start_IT+0x4b0>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d027      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a6b      	ldr	r2, [pc, #428]	; (800a880 <HAL_DMA_Start_IT+0x4b4>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d022      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a6a      	ldr	r2, [pc, #424]	; (800a884 <HAL_DMA_Start_IT+0x4b8>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d01d      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a68      	ldr	r2, [pc, #416]	; (800a888 <HAL_DMA_Start_IT+0x4bc>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d018      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a67      	ldr	r2, [pc, #412]	; (800a88c <HAL_DMA_Start_IT+0x4c0>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d013      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a65      	ldr	r2, [pc, #404]	; (800a890 <HAL_DMA_Start_IT+0x4c4>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d00e      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a64      	ldr	r2, [pc, #400]	; (800a894 <HAL_DMA_Start_IT+0x4c8>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d009      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a62      	ldr	r2, [pc, #392]	; (800a898 <HAL_DMA_Start_IT+0x4cc>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d004      	beq.n	800a71c <HAL_DMA_Start_IT+0x350>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a61      	ldr	r2, [pc, #388]	; (800a89c <HAL_DMA_Start_IT+0x4d0>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d101      	bne.n	800a720 <HAL_DMA_Start_IT+0x354>
 800a71c:	2301      	movs	r3, #1
 800a71e:	e000      	b.n	800a722 <HAL_DMA_Start_IT+0x356>
 800a720:	2300      	movs	r3, #0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d01a      	beq.n	800a75c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d007      	beq.n	800a744 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a73e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a742:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d007      	beq.n	800a75c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a75a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a37      	ldr	r2, [pc, #220]	; (800a840 <HAL_DMA_Start_IT+0x474>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d04a      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a36      	ldr	r2, [pc, #216]	; (800a844 <HAL_DMA_Start_IT+0x478>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d045      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a34      	ldr	r2, [pc, #208]	; (800a848 <HAL_DMA_Start_IT+0x47c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d040      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a33      	ldr	r2, [pc, #204]	; (800a84c <HAL_DMA_Start_IT+0x480>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d03b      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a31      	ldr	r2, [pc, #196]	; (800a850 <HAL_DMA_Start_IT+0x484>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d036      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a30      	ldr	r2, [pc, #192]	; (800a854 <HAL_DMA_Start_IT+0x488>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d031      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a2e      	ldr	r2, [pc, #184]	; (800a858 <HAL_DMA_Start_IT+0x48c>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d02c      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a2d      	ldr	r2, [pc, #180]	; (800a85c <HAL_DMA_Start_IT+0x490>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d027      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a2b      	ldr	r2, [pc, #172]	; (800a860 <HAL_DMA_Start_IT+0x494>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d022      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a2a      	ldr	r2, [pc, #168]	; (800a864 <HAL_DMA_Start_IT+0x498>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d01d      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a28      	ldr	r2, [pc, #160]	; (800a868 <HAL_DMA_Start_IT+0x49c>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d018      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a27      	ldr	r2, [pc, #156]	; (800a86c <HAL_DMA_Start_IT+0x4a0>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d013      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a25      	ldr	r2, [pc, #148]	; (800a870 <HAL_DMA_Start_IT+0x4a4>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d00e      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a24      	ldr	r2, [pc, #144]	; (800a874 <HAL_DMA_Start_IT+0x4a8>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d009      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a22      	ldr	r2, [pc, #136]	; (800a878 <HAL_DMA_Start_IT+0x4ac>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d004      	beq.n	800a7fc <HAL_DMA_Start_IT+0x430>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a21      	ldr	r2, [pc, #132]	; (800a87c <HAL_DMA_Start_IT+0x4b0>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d108      	bne.n	800a80e <HAL_DMA_Start_IT+0x442>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f042 0201 	orr.w	r2, r2, #1
 800a80a:	601a      	str	r2, [r3, #0]
 800a80c:	e012      	b.n	800a834 <HAL_DMA_Start_IT+0x468>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f042 0201 	orr.w	r2, r2, #1
 800a81c:	601a      	str	r2, [r3, #0]
 800a81e:	e009      	b.n	800a834 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a826:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a834:	7dfb      	ldrb	r3, [r7, #23]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	40020010 	.word	0x40020010
 800a844:	40020028 	.word	0x40020028
 800a848:	40020040 	.word	0x40020040
 800a84c:	40020058 	.word	0x40020058
 800a850:	40020070 	.word	0x40020070
 800a854:	40020088 	.word	0x40020088
 800a858:	400200a0 	.word	0x400200a0
 800a85c:	400200b8 	.word	0x400200b8
 800a860:	40020410 	.word	0x40020410
 800a864:	40020428 	.word	0x40020428
 800a868:	40020440 	.word	0x40020440
 800a86c:	40020458 	.word	0x40020458
 800a870:	40020470 	.word	0x40020470
 800a874:	40020488 	.word	0x40020488
 800a878:	400204a0 	.word	0x400204a0
 800a87c:	400204b8 	.word	0x400204b8
 800a880:	58025408 	.word	0x58025408
 800a884:	5802541c 	.word	0x5802541c
 800a888:	58025430 	.word	0x58025430
 800a88c:	58025444 	.word	0x58025444
 800a890:	58025458 	.word	0x58025458
 800a894:	5802546c 	.word	0x5802546c
 800a898:	58025480 	.word	0x58025480
 800a89c:	58025494 	.word	0x58025494

0800a8a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800a8a8:	f7fc fdaa 	bl	8007400 <HAL_GetTick>
 800a8ac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e2dc      	b.n	800ae72 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	d008      	beq.n	800a8d6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2280      	movs	r2, #128	; 0x80
 800a8c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e2cd      	b.n	800ae72 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a76      	ldr	r2, [pc, #472]	; (800aab4 <HAL_DMA_Abort+0x214>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d04a      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a74      	ldr	r2, [pc, #464]	; (800aab8 <HAL_DMA_Abort+0x218>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d045      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a73      	ldr	r2, [pc, #460]	; (800aabc <HAL_DMA_Abort+0x21c>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d040      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a71      	ldr	r2, [pc, #452]	; (800aac0 <HAL_DMA_Abort+0x220>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d03b      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a70      	ldr	r2, [pc, #448]	; (800aac4 <HAL_DMA_Abort+0x224>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d036      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a6e      	ldr	r2, [pc, #440]	; (800aac8 <HAL_DMA_Abort+0x228>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d031      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a6d      	ldr	r2, [pc, #436]	; (800aacc <HAL_DMA_Abort+0x22c>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d02c      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a6b      	ldr	r2, [pc, #428]	; (800aad0 <HAL_DMA_Abort+0x230>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d027      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a6a      	ldr	r2, [pc, #424]	; (800aad4 <HAL_DMA_Abort+0x234>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d022      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a68      	ldr	r2, [pc, #416]	; (800aad8 <HAL_DMA_Abort+0x238>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d01d      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a67      	ldr	r2, [pc, #412]	; (800aadc <HAL_DMA_Abort+0x23c>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d018      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a65      	ldr	r2, [pc, #404]	; (800aae0 <HAL_DMA_Abort+0x240>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d013      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a64      	ldr	r2, [pc, #400]	; (800aae4 <HAL_DMA_Abort+0x244>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d00e      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a62      	ldr	r2, [pc, #392]	; (800aae8 <HAL_DMA_Abort+0x248>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d009      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a61      	ldr	r2, [pc, #388]	; (800aaec <HAL_DMA_Abort+0x24c>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d004      	beq.n	800a976 <HAL_DMA_Abort+0xd6>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a5f      	ldr	r2, [pc, #380]	; (800aaf0 <HAL_DMA_Abort+0x250>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d101      	bne.n	800a97a <HAL_DMA_Abort+0xda>
 800a976:	2301      	movs	r3, #1
 800a978:	e000      	b.n	800a97c <HAL_DMA_Abort+0xdc>
 800a97a:	2300      	movs	r3, #0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d013      	beq.n	800a9a8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f022 021e 	bic.w	r2, r2, #30
 800a98e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	695a      	ldr	r2, [r3, #20]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a99e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	617b      	str	r3, [r7, #20]
 800a9a6:	e00a      	b.n	800a9be <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f022 020e 	bic.w	r2, r2, #14
 800a9b6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a3c      	ldr	r2, [pc, #240]	; (800aab4 <HAL_DMA_Abort+0x214>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d072      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a3a      	ldr	r2, [pc, #232]	; (800aab8 <HAL_DMA_Abort+0x218>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d06d      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a39      	ldr	r2, [pc, #228]	; (800aabc <HAL_DMA_Abort+0x21c>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d068      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a37      	ldr	r2, [pc, #220]	; (800aac0 <HAL_DMA_Abort+0x220>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d063      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a36      	ldr	r2, [pc, #216]	; (800aac4 <HAL_DMA_Abort+0x224>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d05e      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a34      	ldr	r2, [pc, #208]	; (800aac8 <HAL_DMA_Abort+0x228>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d059      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a33      	ldr	r2, [pc, #204]	; (800aacc <HAL_DMA_Abort+0x22c>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d054      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a31      	ldr	r2, [pc, #196]	; (800aad0 <HAL_DMA_Abort+0x230>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d04f      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a30      	ldr	r2, [pc, #192]	; (800aad4 <HAL_DMA_Abort+0x234>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d04a      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a2e      	ldr	r2, [pc, #184]	; (800aad8 <HAL_DMA_Abort+0x238>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d045      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a2d      	ldr	r2, [pc, #180]	; (800aadc <HAL_DMA_Abort+0x23c>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d040      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a2b      	ldr	r2, [pc, #172]	; (800aae0 <HAL_DMA_Abort+0x240>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d03b      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a2a      	ldr	r2, [pc, #168]	; (800aae4 <HAL_DMA_Abort+0x244>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d036      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a28      	ldr	r2, [pc, #160]	; (800aae8 <HAL_DMA_Abort+0x248>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d031      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a27      	ldr	r2, [pc, #156]	; (800aaec <HAL_DMA_Abort+0x24c>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d02c      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a25      	ldr	r2, [pc, #148]	; (800aaf0 <HAL_DMA_Abort+0x250>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d027      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a24      	ldr	r2, [pc, #144]	; (800aaf4 <HAL_DMA_Abort+0x254>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d022      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a22      	ldr	r2, [pc, #136]	; (800aaf8 <HAL_DMA_Abort+0x258>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d01d      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a21      	ldr	r2, [pc, #132]	; (800aafc <HAL_DMA_Abort+0x25c>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d018      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a1f      	ldr	r2, [pc, #124]	; (800ab00 <HAL_DMA_Abort+0x260>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d013      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a1e      	ldr	r2, [pc, #120]	; (800ab04 <HAL_DMA_Abort+0x264>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d00e      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a1c      	ldr	r2, [pc, #112]	; (800ab08 <HAL_DMA_Abort+0x268>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d009      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a1b      	ldr	r2, [pc, #108]	; (800ab0c <HAL_DMA_Abort+0x26c>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d004      	beq.n	800aaae <HAL_DMA_Abort+0x20e>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a19      	ldr	r2, [pc, #100]	; (800ab10 <HAL_DMA_Abort+0x270>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d132      	bne.n	800ab14 <HAL_DMA_Abort+0x274>
 800aaae:	2301      	movs	r3, #1
 800aab0:	e031      	b.n	800ab16 <HAL_DMA_Abort+0x276>
 800aab2:	bf00      	nop
 800aab4:	40020010 	.word	0x40020010
 800aab8:	40020028 	.word	0x40020028
 800aabc:	40020040 	.word	0x40020040
 800aac0:	40020058 	.word	0x40020058
 800aac4:	40020070 	.word	0x40020070
 800aac8:	40020088 	.word	0x40020088
 800aacc:	400200a0 	.word	0x400200a0
 800aad0:	400200b8 	.word	0x400200b8
 800aad4:	40020410 	.word	0x40020410
 800aad8:	40020428 	.word	0x40020428
 800aadc:	40020440 	.word	0x40020440
 800aae0:	40020458 	.word	0x40020458
 800aae4:	40020470 	.word	0x40020470
 800aae8:	40020488 	.word	0x40020488
 800aaec:	400204a0 	.word	0x400204a0
 800aaf0:	400204b8 	.word	0x400204b8
 800aaf4:	58025408 	.word	0x58025408
 800aaf8:	5802541c 	.word	0x5802541c
 800aafc:	58025430 	.word	0x58025430
 800ab00:	58025444 	.word	0x58025444
 800ab04:	58025458 	.word	0x58025458
 800ab08:	5802546c 	.word	0x5802546c
 800ab0c:	58025480 	.word	0x58025480
 800ab10:	58025494 	.word	0x58025494
 800ab14:	2300      	movs	r3, #0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d007      	beq.n	800ab2a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab28:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a6d      	ldr	r2, [pc, #436]	; (800ace4 <HAL_DMA_Abort+0x444>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d04a      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a6b      	ldr	r2, [pc, #428]	; (800ace8 <HAL_DMA_Abort+0x448>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d045      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a6a      	ldr	r2, [pc, #424]	; (800acec <HAL_DMA_Abort+0x44c>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d040      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a68      	ldr	r2, [pc, #416]	; (800acf0 <HAL_DMA_Abort+0x450>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d03b      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a67      	ldr	r2, [pc, #412]	; (800acf4 <HAL_DMA_Abort+0x454>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d036      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a65      	ldr	r2, [pc, #404]	; (800acf8 <HAL_DMA_Abort+0x458>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d031      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a64      	ldr	r2, [pc, #400]	; (800acfc <HAL_DMA_Abort+0x45c>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d02c      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a62      	ldr	r2, [pc, #392]	; (800ad00 <HAL_DMA_Abort+0x460>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d027      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a61      	ldr	r2, [pc, #388]	; (800ad04 <HAL_DMA_Abort+0x464>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d022      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a5f      	ldr	r2, [pc, #380]	; (800ad08 <HAL_DMA_Abort+0x468>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d01d      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a5e      	ldr	r2, [pc, #376]	; (800ad0c <HAL_DMA_Abort+0x46c>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d018      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a5c      	ldr	r2, [pc, #368]	; (800ad10 <HAL_DMA_Abort+0x470>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d013      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a5b      	ldr	r2, [pc, #364]	; (800ad14 <HAL_DMA_Abort+0x474>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d00e      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a59      	ldr	r2, [pc, #356]	; (800ad18 <HAL_DMA_Abort+0x478>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d009      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a58      	ldr	r2, [pc, #352]	; (800ad1c <HAL_DMA_Abort+0x47c>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d004      	beq.n	800abca <HAL_DMA_Abort+0x32a>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a56      	ldr	r2, [pc, #344]	; (800ad20 <HAL_DMA_Abort+0x480>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d108      	bne.n	800abdc <HAL_DMA_Abort+0x33c>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f022 0201 	bic.w	r2, r2, #1
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	e007      	b.n	800abec <HAL_DMA_Abort+0x34c>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f022 0201 	bic.w	r2, r2, #1
 800abea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800abec:	e013      	b.n	800ac16 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800abee:	f7fc fc07 	bl	8007400 <HAL_GetTick>
 800abf2:	4602      	mov	r2, r0
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	2b05      	cmp	r3, #5
 800abfa:	d90c      	bls.n	800ac16 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2220      	movs	r2, #32
 800ac00:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2203      	movs	r2, #3
 800ac06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	e12d      	b.n	800ae72 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1e5      	bne.n	800abee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a2f      	ldr	r2, [pc, #188]	; (800ace4 <HAL_DMA_Abort+0x444>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d04a      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a2d      	ldr	r2, [pc, #180]	; (800ace8 <HAL_DMA_Abort+0x448>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d045      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a2c      	ldr	r2, [pc, #176]	; (800acec <HAL_DMA_Abort+0x44c>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d040      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a2a      	ldr	r2, [pc, #168]	; (800acf0 <HAL_DMA_Abort+0x450>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d03b      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a29      	ldr	r2, [pc, #164]	; (800acf4 <HAL_DMA_Abort+0x454>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d036      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a27      	ldr	r2, [pc, #156]	; (800acf8 <HAL_DMA_Abort+0x458>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d031      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a26      	ldr	r2, [pc, #152]	; (800acfc <HAL_DMA_Abort+0x45c>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d02c      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a24      	ldr	r2, [pc, #144]	; (800ad00 <HAL_DMA_Abort+0x460>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d027      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a23      	ldr	r2, [pc, #140]	; (800ad04 <HAL_DMA_Abort+0x464>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d022      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a21      	ldr	r2, [pc, #132]	; (800ad08 <HAL_DMA_Abort+0x468>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d01d      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a20      	ldr	r2, [pc, #128]	; (800ad0c <HAL_DMA_Abort+0x46c>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d018      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a1e      	ldr	r2, [pc, #120]	; (800ad10 <HAL_DMA_Abort+0x470>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d013      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a1d      	ldr	r2, [pc, #116]	; (800ad14 <HAL_DMA_Abort+0x474>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d00e      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a1b      	ldr	r2, [pc, #108]	; (800ad18 <HAL_DMA_Abort+0x478>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d009      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a1a      	ldr	r2, [pc, #104]	; (800ad1c <HAL_DMA_Abort+0x47c>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d004      	beq.n	800acc2 <HAL_DMA_Abort+0x422>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a18      	ldr	r2, [pc, #96]	; (800ad20 <HAL_DMA_Abort+0x480>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d101      	bne.n	800acc6 <HAL_DMA_Abort+0x426>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e000      	b.n	800acc8 <HAL_DMA_Abort+0x428>
 800acc6:	2300      	movs	r3, #0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d02b      	beq.n	800ad24 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acd0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acd6:	f003 031f 	and.w	r3, r3, #31
 800acda:	223f      	movs	r2, #63	; 0x3f
 800acdc:	409a      	lsls	r2, r3
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	609a      	str	r2, [r3, #8]
 800ace2:	e02a      	b.n	800ad3a <HAL_DMA_Abort+0x49a>
 800ace4:	40020010 	.word	0x40020010
 800ace8:	40020028 	.word	0x40020028
 800acec:	40020040 	.word	0x40020040
 800acf0:	40020058 	.word	0x40020058
 800acf4:	40020070 	.word	0x40020070
 800acf8:	40020088 	.word	0x40020088
 800acfc:	400200a0 	.word	0x400200a0
 800ad00:	400200b8 	.word	0x400200b8
 800ad04:	40020410 	.word	0x40020410
 800ad08:	40020428 	.word	0x40020428
 800ad0c:	40020440 	.word	0x40020440
 800ad10:	40020458 	.word	0x40020458
 800ad14:	40020470 	.word	0x40020470
 800ad18:	40020488 	.word	0x40020488
 800ad1c:	400204a0 	.word	0x400204a0
 800ad20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad28:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad2e:	f003 031f 	and.w	r3, r3, #31
 800ad32:	2201      	movs	r2, #1
 800ad34:	409a      	lsls	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a4f      	ldr	r2, [pc, #316]	; (800ae7c <HAL_DMA_Abort+0x5dc>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d072      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a4d      	ldr	r2, [pc, #308]	; (800ae80 <HAL_DMA_Abort+0x5e0>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d06d      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a4c      	ldr	r2, [pc, #304]	; (800ae84 <HAL_DMA_Abort+0x5e4>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d068      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a4a      	ldr	r2, [pc, #296]	; (800ae88 <HAL_DMA_Abort+0x5e8>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d063      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a49      	ldr	r2, [pc, #292]	; (800ae8c <HAL_DMA_Abort+0x5ec>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d05e      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a47      	ldr	r2, [pc, #284]	; (800ae90 <HAL_DMA_Abort+0x5f0>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d059      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a46      	ldr	r2, [pc, #280]	; (800ae94 <HAL_DMA_Abort+0x5f4>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d054      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a44      	ldr	r2, [pc, #272]	; (800ae98 <HAL_DMA_Abort+0x5f8>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d04f      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a43      	ldr	r2, [pc, #268]	; (800ae9c <HAL_DMA_Abort+0x5fc>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d04a      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a41      	ldr	r2, [pc, #260]	; (800aea0 <HAL_DMA_Abort+0x600>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d045      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a40      	ldr	r2, [pc, #256]	; (800aea4 <HAL_DMA_Abort+0x604>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d040      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a3e      	ldr	r2, [pc, #248]	; (800aea8 <HAL_DMA_Abort+0x608>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d03b      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a3d      	ldr	r2, [pc, #244]	; (800aeac <HAL_DMA_Abort+0x60c>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d036      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a3b      	ldr	r2, [pc, #236]	; (800aeb0 <HAL_DMA_Abort+0x610>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d031      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a3a      	ldr	r2, [pc, #232]	; (800aeb4 <HAL_DMA_Abort+0x614>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d02c      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a38      	ldr	r2, [pc, #224]	; (800aeb8 <HAL_DMA_Abort+0x618>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d027      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a37      	ldr	r2, [pc, #220]	; (800aebc <HAL_DMA_Abort+0x61c>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d022      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a35      	ldr	r2, [pc, #212]	; (800aec0 <HAL_DMA_Abort+0x620>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d01d      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a34      	ldr	r2, [pc, #208]	; (800aec4 <HAL_DMA_Abort+0x624>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d018      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a32      	ldr	r2, [pc, #200]	; (800aec8 <HAL_DMA_Abort+0x628>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d013      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a31      	ldr	r2, [pc, #196]	; (800aecc <HAL_DMA_Abort+0x62c>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d00e      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a2f      	ldr	r2, [pc, #188]	; (800aed0 <HAL_DMA_Abort+0x630>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d009      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a2e      	ldr	r2, [pc, #184]	; (800aed4 <HAL_DMA_Abort+0x634>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d004      	beq.n	800ae2a <HAL_DMA_Abort+0x58a>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a2c      	ldr	r2, [pc, #176]	; (800aed8 <HAL_DMA_Abort+0x638>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d101      	bne.n	800ae2e <HAL_DMA_Abort+0x58e>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e000      	b.n	800ae30 <HAL_DMA_Abort+0x590>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d015      	beq.n	800ae60 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ae3c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00c      	beq.n	800ae60 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae54:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ae5e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3718      	adds	r7, #24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	40020010 	.word	0x40020010
 800ae80:	40020028 	.word	0x40020028
 800ae84:	40020040 	.word	0x40020040
 800ae88:	40020058 	.word	0x40020058
 800ae8c:	40020070 	.word	0x40020070
 800ae90:	40020088 	.word	0x40020088
 800ae94:	400200a0 	.word	0x400200a0
 800ae98:	400200b8 	.word	0x400200b8
 800ae9c:	40020410 	.word	0x40020410
 800aea0:	40020428 	.word	0x40020428
 800aea4:	40020440 	.word	0x40020440
 800aea8:	40020458 	.word	0x40020458
 800aeac:	40020470 	.word	0x40020470
 800aeb0:	40020488 	.word	0x40020488
 800aeb4:	400204a0 	.word	0x400204a0
 800aeb8:	400204b8 	.word	0x400204b8
 800aebc:	58025408 	.word	0x58025408
 800aec0:	5802541c 	.word	0x5802541c
 800aec4:	58025430 	.word	0x58025430
 800aec8:	58025444 	.word	0x58025444
 800aecc:	58025458 	.word	0x58025458
 800aed0:	5802546c 	.word	0x5802546c
 800aed4:	58025480 	.word	0x58025480
 800aed8:	58025494 	.word	0x58025494

0800aedc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e237      	b.n	800b35e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d004      	beq.n	800af04 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2280      	movs	r2, #128	; 0x80
 800aefe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	e22c      	b.n	800b35e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a5c      	ldr	r2, [pc, #368]	; (800b07c <HAL_DMA_Abort_IT+0x1a0>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d04a      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a5b      	ldr	r2, [pc, #364]	; (800b080 <HAL_DMA_Abort_IT+0x1a4>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d045      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a59      	ldr	r2, [pc, #356]	; (800b084 <HAL_DMA_Abort_IT+0x1a8>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d040      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a58      	ldr	r2, [pc, #352]	; (800b088 <HAL_DMA_Abort_IT+0x1ac>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d03b      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a56      	ldr	r2, [pc, #344]	; (800b08c <HAL_DMA_Abort_IT+0x1b0>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d036      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a55      	ldr	r2, [pc, #340]	; (800b090 <HAL_DMA_Abort_IT+0x1b4>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d031      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a53      	ldr	r2, [pc, #332]	; (800b094 <HAL_DMA_Abort_IT+0x1b8>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d02c      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a52      	ldr	r2, [pc, #328]	; (800b098 <HAL_DMA_Abort_IT+0x1bc>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d027      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a50      	ldr	r2, [pc, #320]	; (800b09c <HAL_DMA_Abort_IT+0x1c0>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d022      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a4f      	ldr	r2, [pc, #316]	; (800b0a0 <HAL_DMA_Abort_IT+0x1c4>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d01d      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a4d      	ldr	r2, [pc, #308]	; (800b0a4 <HAL_DMA_Abort_IT+0x1c8>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d018      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a4c      	ldr	r2, [pc, #304]	; (800b0a8 <HAL_DMA_Abort_IT+0x1cc>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d013      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a4a      	ldr	r2, [pc, #296]	; (800b0ac <HAL_DMA_Abort_IT+0x1d0>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d00e      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a49      	ldr	r2, [pc, #292]	; (800b0b0 <HAL_DMA_Abort_IT+0x1d4>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d009      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a47      	ldr	r2, [pc, #284]	; (800b0b4 <HAL_DMA_Abort_IT+0x1d8>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d004      	beq.n	800afa4 <HAL_DMA_Abort_IT+0xc8>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a46      	ldr	r2, [pc, #280]	; (800b0b8 <HAL_DMA_Abort_IT+0x1dc>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d101      	bne.n	800afa8 <HAL_DMA_Abort_IT+0xcc>
 800afa4:	2301      	movs	r3, #1
 800afa6:	e000      	b.n	800afaa <HAL_DMA_Abort_IT+0xce>
 800afa8:	2300      	movs	r3, #0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 8086 	beq.w	800b0bc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2204      	movs	r2, #4
 800afb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a2f      	ldr	r2, [pc, #188]	; (800b07c <HAL_DMA_Abort_IT+0x1a0>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d04a      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a2e      	ldr	r2, [pc, #184]	; (800b080 <HAL_DMA_Abort_IT+0x1a4>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d045      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a2c      	ldr	r2, [pc, #176]	; (800b084 <HAL_DMA_Abort_IT+0x1a8>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d040      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a2b      	ldr	r2, [pc, #172]	; (800b088 <HAL_DMA_Abort_IT+0x1ac>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d03b      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a29      	ldr	r2, [pc, #164]	; (800b08c <HAL_DMA_Abort_IT+0x1b0>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d036      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a28      	ldr	r2, [pc, #160]	; (800b090 <HAL_DMA_Abort_IT+0x1b4>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d031      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a26      	ldr	r2, [pc, #152]	; (800b094 <HAL_DMA_Abort_IT+0x1b8>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d02c      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a25      	ldr	r2, [pc, #148]	; (800b098 <HAL_DMA_Abort_IT+0x1bc>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d027      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a23      	ldr	r2, [pc, #140]	; (800b09c <HAL_DMA_Abort_IT+0x1c0>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d022      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a22      	ldr	r2, [pc, #136]	; (800b0a0 <HAL_DMA_Abort_IT+0x1c4>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d01d      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a20      	ldr	r2, [pc, #128]	; (800b0a4 <HAL_DMA_Abort_IT+0x1c8>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d018      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a1f      	ldr	r2, [pc, #124]	; (800b0a8 <HAL_DMA_Abort_IT+0x1cc>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d013      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a1d      	ldr	r2, [pc, #116]	; (800b0ac <HAL_DMA_Abort_IT+0x1d0>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d00e      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a1c      	ldr	r2, [pc, #112]	; (800b0b0 <HAL_DMA_Abort_IT+0x1d4>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d009      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a1a      	ldr	r2, [pc, #104]	; (800b0b4 <HAL_DMA_Abort_IT+0x1d8>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d004      	beq.n	800b058 <HAL_DMA_Abort_IT+0x17c>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a19      	ldr	r2, [pc, #100]	; (800b0b8 <HAL_DMA_Abort_IT+0x1dc>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d108      	bne.n	800b06a <HAL_DMA_Abort_IT+0x18e>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f022 0201 	bic.w	r2, r2, #1
 800b066:	601a      	str	r2, [r3, #0]
 800b068:	e178      	b.n	800b35c <HAL_DMA_Abort_IT+0x480>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f022 0201 	bic.w	r2, r2, #1
 800b078:	601a      	str	r2, [r3, #0]
 800b07a:	e16f      	b.n	800b35c <HAL_DMA_Abort_IT+0x480>
 800b07c:	40020010 	.word	0x40020010
 800b080:	40020028 	.word	0x40020028
 800b084:	40020040 	.word	0x40020040
 800b088:	40020058 	.word	0x40020058
 800b08c:	40020070 	.word	0x40020070
 800b090:	40020088 	.word	0x40020088
 800b094:	400200a0 	.word	0x400200a0
 800b098:	400200b8 	.word	0x400200b8
 800b09c:	40020410 	.word	0x40020410
 800b0a0:	40020428 	.word	0x40020428
 800b0a4:	40020440 	.word	0x40020440
 800b0a8:	40020458 	.word	0x40020458
 800b0ac:	40020470 	.word	0x40020470
 800b0b0:	40020488 	.word	0x40020488
 800b0b4:	400204a0 	.word	0x400204a0
 800b0b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f022 020e 	bic.w	r2, r2, #14
 800b0ca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a6c      	ldr	r2, [pc, #432]	; (800b284 <HAL_DMA_Abort_IT+0x3a8>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d04a      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a6b      	ldr	r2, [pc, #428]	; (800b288 <HAL_DMA_Abort_IT+0x3ac>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d045      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a69      	ldr	r2, [pc, #420]	; (800b28c <HAL_DMA_Abort_IT+0x3b0>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d040      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a68      	ldr	r2, [pc, #416]	; (800b290 <HAL_DMA_Abort_IT+0x3b4>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d03b      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a66      	ldr	r2, [pc, #408]	; (800b294 <HAL_DMA_Abort_IT+0x3b8>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d036      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a65      	ldr	r2, [pc, #404]	; (800b298 <HAL_DMA_Abort_IT+0x3bc>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d031      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a63      	ldr	r2, [pc, #396]	; (800b29c <HAL_DMA_Abort_IT+0x3c0>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d02c      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a62      	ldr	r2, [pc, #392]	; (800b2a0 <HAL_DMA_Abort_IT+0x3c4>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d027      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a60      	ldr	r2, [pc, #384]	; (800b2a4 <HAL_DMA_Abort_IT+0x3c8>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d022      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a5f      	ldr	r2, [pc, #380]	; (800b2a8 <HAL_DMA_Abort_IT+0x3cc>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d01d      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a5d      	ldr	r2, [pc, #372]	; (800b2ac <HAL_DMA_Abort_IT+0x3d0>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d018      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4a5c      	ldr	r2, [pc, #368]	; (800b2b0 <HAL_DMA_Abort_IT+0x3d4>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d013      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a5a      	ldr	r2, [pc, #360]	; (800b2b4 <HAL_DMA_Abort_IT+0x3d8>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d00e      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a59      	ldr	r2, [pc, #356]	; (800b2b8 <HAL_DMA_Abort_IT+0x3dc>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d009      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a57      	ldr	r2, [pc, #348]	; (800b2bc <HAL_DMA_Abort_IT+0x3e0>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d004      	beq.n	800b16c <HAL_DMA_Abort_IT+0x290>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a56      	ldr	r2, [pc, #344]	; (800b2c0 <HAL_DMA_Abort_IT+0x3e4>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d108      	bne.n	800b17e <HAL_DMA_Abort_IT+0x2a2>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f022 0201 	bic.w	r2, r2, #1
 800b17a:	601a      	str	r2, [r3, #0]
 800b17c:	e007      	b.n	800b18e <HAL_DMA_Abort_IT+0x2b2>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f022 0201 	bic.w	r2, r2, #1
 800b18c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a3c      	ldr	r2, [pc, #240]	; (800b284 <HAL_DMA_Abort_IT+0x3a8>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d072      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a3a      	ldr	r2, [pc, #232]	; (800b288 <HAL_DMA_Abort_IT+0x3ac>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d06d      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a39      	ldr	r2, [pc, #228]	; (800b28c <HAL_DMA_Abort_IT+0x3b0>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d068      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a37      	ldr	r2, [pc, #220]	; (800b290 <HAL_DMA_Abort_IT+0x3b4>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d063      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a36      	ldr	r2, [pc, #216]	; (800b294 <HAL_DMA_Abort_IT+0x3b8>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d05e      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a34      	ldr	r2, [pc, #208]	; (800b298 <HAL_DMA_Abort_IT+0x3bc>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d059      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a33      	ldr	r2, [pc, #204]	; (800b29c <HAL_DMA_Abort_IT+0x3c0>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d054      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a31      	ldr	r2, [pc, #196]	; (800b2a0 <HAL_DMA_Abort_IT+0x3c4>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d04f      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a30      	ldr	r2, [pc, #192]	; (800b2a4 <HAL_DMA_Abort_IT+0x3c8>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d04a      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a2e      	ldr	r2, [pc, #184]	; (800b2a8 <HAL_DMA_Abort_IT+0x3cc>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d045      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a2d      	ldr	r2, [pc, #180]	; (800b2ac <HAL_DMA_Abort_IT+0x3d0>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d040      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a2b      	ldr	r2, [pc, #172]	; (800b2b0 <HAL_DMA_Abort_IT+0x3d4>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d03b      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a2a      	ldr	r2, [pc, #168]	; (800b2b4 <HAL_DMA_Abort_IT+0x3d8>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d036      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a28      	ldr	r2, [pc, #160]	; (800b2b8 <HAL_DMA_Abort_IT+0x3dc>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d031      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a27      	ldr	r2, [pc, #156]	; (800b2bc <HAL_DMA_Abort_IT+0x3e0>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d02c      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a25      	ldr	r2, [pc, #148]	; (800b2c0 <HAL_DMA_Abort_IT+0x3e4>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d027      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a24      	ldr	r2, [pc, #144]	; (800b2c4 <HAL_DMA_Abort_IT+0x3e8>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d022      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a22      	ldr	r2, [pc, #136]	; (800b2c8 <HAL_DMA_Abort_IT+0x3ec>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d01d      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a21      	ldr	r2, [pc, #132]	; (800b2cc <HAL_DMA_Abort_IT+0x3f0>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d018      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a1f      	ldr	r2, [pc, #124]	; (800b2d0 <HAL_DMA_Abort_IT+0x3f4>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d013      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a1e      	ldr	r2, [pc, #120]	; (800b2d4 <HAL_DMA_Abort_IT+0x3f8>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d00e      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a1c      	ldr	r2, [pc, #112]	; (800b2d8 <HAL_DMA_Abort_IT+0x3fc>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d009      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a1b      	ldr	r2, [pc, #108]	; (800b2dc <HAL_DMA_Abort_IT+0x400>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d004      	beq.n	800b27e <HAL_DMA_Abort_IT+0x3a2>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a19      	ldr	r2, [pc, #100]	; (800b2e0 <HAL_DMA_Abort_IT+0x404>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d132      	bne.n	800b2e4 <HAL_DMA_Abort_IT+0x408>
 800b27e:	2301      	movs	r3, #1
 800b280:	e031      	b.n	800b2e6 <HAL_DMA_Abort_IT+0x40a>
 800b282:	bf00      	nop
 800b284:	40020010 	.word	0x40020010
 800b288:	40020028 	.word	0x40020028
 800b28c:	40020040 	.word	0x40020040
 800b290:	40020058 	.word	0x40020058
 800b294:	40020070 	.word	0x40020070
 800b298:	40020088 	.word	0x40020088
 800b29c:	400200a0 	.word	0x400200a0
 800b2a0:	400200b8 	.word	0x400200b8
 800b2a4:	40020410 	.word	0x40020410
 800b2a8:	40020428 	.word	0x40020428
 800b2ac:	40020440 	.word	0x40020440
 800b2b0:	40020458 	.word	0x40020458
 800b2b4:	40020470 	.word	0x40020470
 800b2b8:	40020488 	.word	0x40020488
 800b2bc:	400204a0 	.word	0x400204a0
 800b2c0:	400204b8 	.word	0x400204b8
 800b2c4:	58025408 	.word	0x58025408
 800b2c8:	5802541c 	.word	0x5802541c
 800b2cc:	58025430 	.word	0x58025430
 800b2d0:	58025444 	.word	0x58025444
 800b2d4:	58025458 	.word	0x58025458
 800b2d8:	5802546c 	.word	0x5802546c
 800b2dc:	58025480 	.word	0x58025480
 800b2e0:	58025494 	.word	0x58025494
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d028      	beq.n	800b33c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2f8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2fe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b304:	f003 031f 	and.w	r3, r3, #31
 800b308:	2201      	movs	r2, #1
 800b30a:	409a      	lsls	r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b318:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00c      	beq.n	800b33c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b32c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b330:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b33a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b350:	2b00      	cmp	r3, #0
 800b352:	d003      	beq.n	800b35c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop

0800b368 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b08a      	sub	sp, #40	; 0x28
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800b370:	2300      	movs	r3, #0
 800b372:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b374:	4b67      	ldr	r3, [pc, #412]	; (800b514 <HAL_DMA_IRQHandler+0x1ac>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a67      	ldr	r2, [pc, #412]	; (800b518 <HAL_DMA_IRQHandler+0x1b0>)
 800b37a:	fba2 2303 	umull	r2, r3, r2, r3
 800b37e:	0a9b      	lsrs	r3, r3, #10
 800b380:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b386:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b38c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800b38e:	6a3b      	ldr	r3, [r7, #32]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a5f      	ldr	r2, [pc, #380]	; (800b51c <HAL_DMA_IRQHandler+0x1b4>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d04a      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a5d      	ldr	r2, [pc, #372]	; (800b520 <HAL_DMA_IRQHandler+0x1b8>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d045      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a5c      	ldr	r2, [pc, #368]	; (800b524 <HAL_DMA_IRQHandler+0x1bc>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d040      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a5a      	ldr	r2, [pc, #360]	; (800b528 <HAL_DMA_IRQHandler+0x1c0>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d03b      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a59      	ldr	r2, [pc, #356]	; (800b52c <HAL_DMA_IRQHandler+0x1c4>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d036      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a57      	ldr	r2, [pc, #348]	; (800b530 <HAL_DMA_IRQHandler+0x1c8>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d031      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a56      	ldr	r2, [pc, #344]	; (800b534 <HAL_DMA_IRQHandler+0x1cc>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d02c      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a54      	ldr	r2, [pc, #336]	; (800b538 <HAL_DMA_IRQHandler+0x1d0>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d027      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a53      	ldr	r2, [pc, #332]	; (800b53c <HAL_DMA_IRQHandler+0x1d4>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d022      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a51      	ldr	r2, [pc, #324]	; (800b540 <HAL_DMA_IRQHandler+0x1d8>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d01d      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a50      	ldr	r2, [pc, #320]	; (800b544 <HAL_DMA_IRQHandler+0x1dc>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d018      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a4e      	ldr	r2, [pc, #312]	; (800b548 <HAL_DMA_IRQHandler+0x1e0>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d013      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a4d      	ldr	r2, [pc, #308]	; (800b54c <HAL_DMA_IRQHandler+0x1e4>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d00e      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a4b      	ldr	r2, [pc, #300]	; (800b550 <HAL_DMA_IRQHandler+0x1e8>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d009      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a4a      	ldr	r2, [pc, #296]	; (800b554 <HAL_DMA_IRQHandler+0x1ec>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d004      	beq.n	800b43a <HAL_DMA_IRQHandler+0xd2>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a48      	ldr	r2, [pc, #288]	; (800b558 <HAL_DMA_IRQHandler+0x1f0>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d101      	bne.n	800b43e <HAL_DMA_IRQHandler+0xd6>
 800b43a:	2301      	movs	r3, #1
 800b43c:	e000      	b.n	800b440 <HAL_DMA_IRQHandler+0xd8>
 800b43e:	2300      	movs	r3, #0
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 842b 	beq.w	800bc9c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b44a:	f003 031f 	and.w	r3, r3, #31
 800b44e:	2208      	movs	r2, #8
 800b450:	409a      	lsls	r2, r3
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	4013      	ands	r3, r2
 800b456:	2b00      	cmp	r3, #0
 800b458:	f000 80a2 	beq.w	800b5a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a2e      	ldr	r2, [pc, #184]	; (800b51c <HAL_DMA_IRQHandler+0x1b4>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d04a      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a2d      	ldr	r2, [pc, #180]	; (800b520 <HAL_DMA_IRQHandler+0x1b8>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d045      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a2b      	ldr	r2, [pc, #172]	; (800b524 <HAL_DMA_IRQHandler+0x1bc>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d040      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a2a      	ldr	r2, [pc, #168]	; (800b528 <HAL_DMA_IRQHandler+0x1c0>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d03b      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a28      	ldr	r2, [pc, #160]	; (800b52c <HAL_DMA_IRQHandler+0x1c4>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d036      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a27      	ldr	r2, [pc, #156]	; (800b530 <HAL_DMA_IRQHandler+0x1c8>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d031      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a25      	ldr	r2, [pc, #148]	; (800b534 <HAL_DMA_IRQHandler+0x1cc>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d02c      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a24      	ldr	r2, [pc, #144]	; (800b538 <HAL_DMA_IRQHandler+0x1d0>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d027      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a22      	ldr	r2, [pc, #136]	; (800b53c <HAL_DMA_IRQHandler+0x1d4>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d022      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a21      	ldr	r2, [pc, #132]	; (800b540 <HAL_DMA_IRQHandler+0x1d8>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d01d      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a1f      	ldr	r2, [pc, #124]	; (800b544 <HAL_DMA_IRQHandler+0x1dc>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d018      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a1e      	ldr	r2, [pc, #120]	; (800b548 <HAL_DMA_IRQHandler+0x1e0>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d013      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a1c      	ldr	r2, [pc, #112]	; (800b54c <HAL_DMA_IRQHandler+0x1e4>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d00e      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a1b      	ldr	r2, [pc, #108]	; (800b550 <HAL_DMA_IRQHandler+0x1e8>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d009      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a19      	ldr	r2, [pc, #100]	; (800b554 <HAL_DMA_IRQHandler+0x1ec>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d004      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x194>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a18      	ldr	r2, [pc, #96]	; (800b558 <HAL_DMA_IRQHandler+0x1f0>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d12f      	bne.n	800b55c <HAL_DMA_IRQHandler+0x1f4>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f003 0304 	and.w	r3, r3, #4
 800b506:	2b00      	cmp	r3, #0
 800b508:	bf14      	ite	ne
 800b50a:	2301      	movne	r3, #1
 800b50c:	2300      	moveq	r3, #0
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	e02e      	b.n	800b570 <HAL_DMA_IRQHandler+0x208>
 800b512:	bf00      	nop
 800b514:	20000020 	.word	0x20000020
 800b518:	1b4e81b5 	.word	0x1b4e81b5
 800b51c:	40020010 	.word	0x40020010
 800b520:	40020028 	.word	0x40020028
 800b524:	40020040 	.word	0x40020040
 800b528:	40020058 	.word	0x40020058
 800b52c:	40020070 	.word	0x40020070
 800b530:	40020088 	.word	0x40020088
 800b534:	400200a0 	.word	0x400200a0
 800b538:	400200b8 	.word	0x400200b8
 800b53c:	40020410 	.word	0x40020410
 800b540:	40020428 	.word	0x40020428
 800b544:	40020440 	.word	0x40020440
 800b548:	40020458 	.word	0x40020458
 800b54c:	40020470 	.word	0x40020470
 800b550:	40020488 	.word	0x40020488
 800b554:	400204a0 	.word	0x400204a0
 800b558:	400204b8 	.word	0x400204b8
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 0308 	and.w	r3, r3, #8
 800b566:	2b00      	cmp	r3, #0
 800b568:	bf14      	ite	ne
 800b56a:	2301      	movne	r3, #1
 800b56c:	2300      	moveq	r3, #0
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	2b00      	cmp	r3, #0
 800b572:	d015      	beq.n	800b5a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f022 0204 	bic.w	r2, r2, #4
 800b582:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b588:	f003 031f 	and.w	r3, r3, #31
 800b58c:	2208      	movs	r2, #8
 800b58e:	409a      	lsls	r2, r3
 800b590:	6a3b      	ldr	r3, [r7, #32]
 800b592:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b598:	f043 0201 	orr.w	r2, r3, #1
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5a4:	f003 031f 	and.w	r3, r3, #31
 800b5a8:	69ba      	ldr	r2, [r7, #24]
 800b5aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b5ae:	f003 0301 	and.w	r3, r3, #1
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d06e      	beq.n	800b694 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a69      	ldr	r2, [pc, #420]	; (800b760 <HAL_DMA_IRQHandler+0x3f8>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d04a      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a67      	ldr	r2, [pc, #412]	; (800b764 <HAL_DMA_IRQHandler+0x3fc>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d045      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a66      	ldr	r2, [pc, #408]	; (800b768 <HAL_DMA_IRQHandler+0x400>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d040      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a64      	ldr	r2, [pc, #400]	; (800b76c <HAL_DMA_IRQHandler+0x404>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d03b      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a63      	ldr	r2, [pc, #396]	; (800b770 <HAL_DMA_IRQHandler+0x408>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d036      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a61      	ldr	r2, [pc, #388]	; (800b774 <HAL_DMA_IRQHandler+0x40c>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d031      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a60      	ldr	r2, [pc, #384]	; (800b778 <HAL_DMA_IRQHandler+0x410>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d02c      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a5e      	ldr	r2, [pc, #376]	; (800b77c <HAL_DMA_IRQHandler+0x414>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d027      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a5d      	ldr	r2, [pc, #372]	; (800b780 <HAL_DMA_IRQHandler+0x418>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d022      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a5b      	ldr	r2, [pc, #364]	; (800b784 <HAL_DMA_IRQHandler+0x41c>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d01d      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a5a      	ldr	r2, [pc, #360]	; (800b788 <HAL_DMA_IRQHandler+0x420>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d018      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a58      	ldr	r2, [pc, #352]	; (800b78c <HAL_DMA_IRQHandler+0x424>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d013      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a57      	ldr	r2, [pc, #348]	; (800b790 <HAL_DMA_IRQHandler+0x428>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d00e      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a55      	ldr	r2, [pc, #340]	; (800b794 <HAL_DMA_IRQHandler+0x42c>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d009      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a54      	ldr	r2, [pc, #336]	; (800b798 <HAL_DMA_IRQHandler+0x430>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d004      	beq.n	800b656 <HAL_DMA_IRQHandler+0x2ee>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a52      	ldr	r2, [pc, #328]	; (800b79c <HAL_DMA_IRQHandler+0x434>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d10a      	bne.n	800b66c <HAL_DMA_IRQHandler+0x304>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b660:	2b00      	cmp	r3, #0
 800b662:	bf14      	ite	ne
 800b664:	2301      	movne	r3, #1
 800b666:	2300      	moveq	r3, #0
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	e003      	b.n	800b674 <HAL_DMA_IRQHandler+0x30c>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2300      	movs	r3, #0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00d      	beq.n	800b694 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b67c:	f003 031f 	and.w	r3, r3, #31
 800b680:	2201      	movs	r2, #1
 800b682:	409a      	lsls	r2, r3
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b68c:	f043 0202 	orr.w	r2, r3, #2
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b698:	f003 031f 	and.w	r3, r3, #31
 800b69c:	2204      	movs	r2, #4
 800b69e:	409a      	lsls	r2, r3
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	4013      	ands	r3, r2
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f000 808f 	beq.w	800b7c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a2c      	ldr	r2, [pc, #176]	; (800b760 <HAL_DMA_IRQHandler+0x3f8>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d04a      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a2a      	ldr	r2, [pc, #168]	; (800b764 <HAL_DMA_IRQHandler+0x3fc>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d045      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a29      	ldr	r2, [pc, #164]	; (800b768 <HAL_DMA_IRQHandler+0x400>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d040      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a27      	ldr	r2, [pc, #156]	; (800b76c <HAL_DMA_IRQHandler+0x404>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d03b      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a26      	ldr	r2, [pc, #152]	; (800b770 <HAL_DMA_IRQHandler+0x408>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d036      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a24      	ldr	r2, [pc, #144]	; (800b774 <HAL_DMA_IRQHandler+0x40c>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d031      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a23      	ldr	r2, [pc, #140]	; (800b778 <HAL_DMA_IRQHandler+0x410>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d02c      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a21      	ldr	r2, [pc, #132]	; (800b77c <HAL_DMA_IRQHandler+0x414>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d027      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4a20      	ldr	r2, [pc, #128]	; (800b780 <HAL_DMA_IRQHandler+0x418>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d022      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a1e      	ldr	r2, [pc, #120]	; (800b784 <HAL_DMA_IRQHandler+0x41c>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d01d      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a1d      	ldr	r2, [pc, #116]	; (800b788 <HAL_DMA_IRQHandler+0x420>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d018      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a1b      	ldr	r2, [pc, #108]	; (800b78c <HAL_DMA_IRQHandler+0x424>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d013      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a1a      	ldr	r2, [pc, #104]	; (800b790 <HAL_DMA_IRQHandler+0x428>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d00e      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a18      	ldr	r2, [pc, #96]	; (800b794 <HAL_DMA_IRQHandler+0x42c>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d009      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a17      	ldr	r2, [pc, #92]	; (800b798 <HAL_DMA_IRQHandler+0x430>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d004      	beq.n	800b74a <HAL_DMA_IRQHandler+0x3e2>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a15      	ldr	r2, [pc, #84]	; (800b79c <HAL_DMA_IRQHandler+0x434>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d12a      	bne.n	800b7a0 <HAL_DMA_IRQHandler+0x438>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 0302 	and.w	r3, r3, #2
 800b754:	2b00      	cmp	r3, #0
 800b756:	bf14      	ite	ne
 800b758:	2301      	movne	r3, #1
 800b75a:	2300      	moveq	r3, #0
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	e023      	b.n	800b7a8 <HAL_DMA_IRQHandler+0x440>
 800b760:	40020010 	.word	0x40020010
 800b764:	40020028 	.word	0x40020028
 800b768:	40020040 	.word	0x40020040
 800b76c:	40020058 	.word	0x40020058
 800b770:	40020070 	.word	0x40020070
 800b774:	40020088 	.word	0x40020088
 800b778:	400200a0 	.word	0x400200a0
 800b77c:	400200b8 	.word	0x400200b8
 800b780:	40020410 	.word	0x40020410
 800b784:	40020428 	.word	0x40020428
 800b788:	40020440 	.word	0x40020440
 800b78c:	40020458 	.word	0x40020458
 800b790:	40020470 	.word	0x40020470
 800b794:	40020488 	.word	0x40020488
 800b798:	400204a0 	.word	0x400204a0
 800b79c:	400204b8 	.word	0x400204b8
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00d      	beq.n	800b7c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7b0:	f003 031f 	and.w	r3, r3, #31
 800b7b4:	2204      	movs	r2, #4
 800b7b6:	409a      	lsls	r2, r3
 800b7b8:	6a3b      	ldr	r3, [r7, #32]
 800b7ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7c0:	f043 0204 	orr.w	r2, r3, #4
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7cc:	f003 031f 	and.w	r3, r3, #31
 800b7d0:	2210      	movs	r2, #16
 800b7d2:	409a      	lsls	r2, r3
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	4013      	ands	r3, r2
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f000 80a6 	beq.w	800b92a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a85      	ldr	r2, [pc, #532]	; (800b9f8 <HAL_DMA_IRQHandler+0x690>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d04a      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a83      	ldr	r2, [pc, #524]	; (800b9fc <HAL_DMA_IRQHandler+0x694>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d045      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a82      	ldr	r2, [pc, #520]	; (800ba00 <HAL_DMA_IRQHandler+0x698>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d040      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a80      	ldr	r2, [pc, #512]	; (800ba04 <HAL_DMA_IRQHandler+0x69c>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d03b      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a7f      	ldr	r2, [pc, #508]	; (800ba08 <HAL_DMA_IRQHandler+0x6a0>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d036      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a7d      	ldr	r2, [pc, #500]	; (800ba0c <HAL_DMA_IRQHandler+0x6a4>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d031      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a7c      	ldr	r2, [pc, #496]	; (800ba10 <HAL_DMA_IRQHandler+0x6a8>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d02c      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a7a      	ldr	r2, [pc, #488]	; (800ba14 <HAL_DMA_IRQHandler+0x6ac>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d027      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a79      	ldr	r2, [pc, #484]	; (800ba18 <HAL_DMA_IRQHandler+0x6b0>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d022      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a77      	ldr	r2, [pc, #476]	; (800ba1c <HAL_DMA_IRQHandler+0x6b4>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d01d      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a76      	ldr	r2, [pc, #472]	; (800ba20 <HAL_DMA_IRQHandler+0x6b8>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d018      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a74      	ldr	r2, [pc, #464]	; (800ba24 <HAL_DMA_IRQHandler+0x6bc>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d013      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a73      	ldr	r2, [pc, #460]	; (800ba28 <HAL_DMA_IRQHandler+0x6c0>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d00e      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a71      	ldr	r2, [pc, #452]	; (800ba2c <HAL_DMA_IRQHandler+0x6c4>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d009      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a70      	ldr	r2, [pc, #448]	; (800ba30 <HAL_DMA_IRQHandler+0x6c8>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d004      	beq.n	800b87e <HAL_DMA_IRQHandler+0x516>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a6e      	ldr	r2, [pc, #440]	; (800ba34 <HAL_DMA_IRQHandler+0x6cc>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d10a      	bne.n	800b894 <HAL_DMA_IRQHandler+0x52c>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 0308 	and.w	r3, r3, #8
 800b888:	2b00      	cmp	r3, #0
 800b88a:	bf14      	ite	ne
 800b88c:	2301      	movne	r3, #1
 800b88e:	2300      	moveq	r3, #0
 800b890:	b2db      	uxtb	r3, r3
 800b892:	e009      	b.n	800b8a8 <HAL_DMA_IRQHandler+0x540>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f003 0304 	and.w	r3, r3, #4
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	bf14      	ite	ne
 800b8a2:	2301      	movne	r3, #1
 800b8a4:	2300      	moveq	r3, #0
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d03e      	beq.n	800b92a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8b0:	f003 031f 	and.w	r3, r3, #31
 800b8b4:	2210      	movs	r2, #16
 800b8b6:	409a      	lsls	r2, r3
 800b8b8:	6a3b      	ldr	r3, [r7, #32]
 800b8ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d018      	beq.n	800b8fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d108      	bne.n	800b8ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d024      	beq.n	800b92a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	4798      	blx	r3
 800b8e8:	e01f      	b.n	800b92a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d01b      	beq.n	800b92a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	4798      	blx	r3
 800b8fa:	e016      	b.n	800b92a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b906:	2b00      	cmp	r3, #0
 800b908:	d107      	bne.n	800b91a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f022 0208 	bic.w	r2, r2, #8
 800b918:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d003      	beq.n	800b92a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b92e:	f003 031f 	and.w	r3, r3, #31
 800b932:	2220      	movs	r2, #32
 800b934:	409a      	lsls	r2, r3
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	4013      	ands	r3, r2
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f000 8110 	beq.w	800bb60 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a2c      	ldr	r2, [pc, #176]	; (800b9f8 <HAL_DMA_IRQHandler+0x690>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d04a      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a2b      	ldr	r2, [pc, #172]	; (800b9fc <HAL_DMA_IRQHandler+0x694>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d045      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a29      	ldr	r2, [pc, #164]	; (800ba00 <HAL_DMA_IRQHandler+0x698>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d040      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a28      	ldr	r2, [pc, #160]	; (800ba04 <HAL_DMA_IRQHandler+0x69c>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d03b      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a26      	ldr	r2, [pc, #152]	; (800ba08 <HAL_DMA_IRQHandler+0x6a0>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d036      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a25      	ldr	r2, [pc, #148]	; (800ba0c <HAL_DMA_IRQHandler+0x6a4>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d031      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a23      	ldr	r2, [pc, #140]	; (800ba10 <HAL_DMA_IRQHandler+0x6a8>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d02c      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a22      	ldr	r2, [pc, #136]	; (800ba14 <HAL_DMA_IRQHandler+0x6ac>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d027      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a20      	ldr	r2, [pc, #128]	; (800ba18 <HAL_DMA_IRQHandler+0x6b0>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d022      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a1f      	ldr	r2, [pc, #124]	; (800ba1c <HAL_DMA_IRQHandler+0x6b4>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d01d      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a1d      	ldr	r2, [pc, #116]	; (800ba20 <HAL_DMA_IRQHandler+0x6b8>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d018      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a1c      	ldr	r2, [pc, #112]	; (800ba24 <HAL_DMA_IRQHandler+0x6bc>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d013      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a1a      	ldr	r2, [pc, #104]	; (800ba28 <HAL_DMA_IRQHandler+0x6c0>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d00e      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a19      	ldr	r2, [pc, #100]	; (800ba2c <HAL_DMA_IRQHandler+0x6c4>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d009      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a17      	ldr	r2, [pc, #92]	; (800ba30 <HAL_DMA_IRQHandler+0x6c8>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d004      	beq.n	800b9e0 <HAL_DMA_IRQHandler+0x678>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a16      	ldr	r2, [pc, #88]	; (800ba34 <HAL_DMA_IRQHandler+0x6cc>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d12b      	bne.n	800ba38 <HAL_DMA_IRQHandler+0x6d0>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 0310 	and.w	r3, r3, #16
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	bf14      	ite	ne
 800b9ee:	2301      	movne	r3, #1
 800b9f0:	2300      	moveq	r3, #0
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	e02a      	b.n	800ba4c <HAL_DMA_IRQHandler+0x6e4>
 800b9f6:	bf00      	nop
 800b9f8:	40020010 	.word	0x40020010
 800b9fc:	40020028 	.word	0x40020028
 800ba00:	40020040 	.word	0x40020040
 800ba04:	40020058 	.word	0x40020058
 800ba08:	40020070 	.word	0x40020070
 800ba0c:	40020088 	.word	0x40020088
 800ba10:	400200a0 	.word	0x400200a0
 800ba14:	400200b8 	.word	0x400200b8
 800ba18:	40020410 	.word	0x40020410
 800ba1c:	40020428 	.word	0x40020428
 800ba20:	40020440 	.word	0x40020440
 800ba24:	40020458 	.word	0x40020458
 800ba28:	40020470 	.word	0x40020470
 800ba2c:	40020488 	.word	0x40020488
 800ba30:	400204a0 	.word	0x400204a0
 800ba34:	400204b8 	.word	0x400204b8
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 0302 	and.w	r3, r3, #2
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	bf14      	ite	ne
 800ba46:	2301      	movne	r3, #1
 800ba48:	2300      	moveq	r3, #0
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 8087 	beq.w	800bb60 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba56:	f003 031f 	and.w	r3, r3, #31
 800ba5a:	2220      	movs	r2, #32
 800ba5c:	409a      	lsls	r2, r3
 800ba5e:	6a3b      	ldr	r3, [r7, #32]
 800ba60:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b04      	cmp	r3, #4
 800ba6c:	d139      	bne.n	800bae2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f022 0216 	bic.w	r2, r2, #22
 800ba7c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	695a      	ldr	r2, [r3, #20]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba8c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d103      	bne.n	800ba9e <HAL_DMA_IRQHandler+0x736>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d007      	beq.n	800baae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f022 0208 	bic.w	r2, r2, #8
 800baac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bab2:	f003 031f 	and.w	r3, r3, #31
 800bab6:	223f      	movs	r2, #63	; 0x3f
 800bab8:	409a      	lsls	r2, r3
 800baba:	6a3b      	ldr	r3, [r7, #32]
 800babc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2201      	movs	r2, #1
 800bac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	f000 834a 	beq.w	800c16c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	4798      	blx	r3
          }
          return;
 800bae0:	e344      	b.n	800c16c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d018      	beq.n	800bb22 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d108      	bne.n	800bb10 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d02c      	beq.n	800bb60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	4798      	blx	r3
 800bb0e:	e027      	b.n	800bb60 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d023      	beq.n	800bb60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	4798      	blx	r3
 800bb20:	e01e      	b.n	800bb60 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10f      	bne.n	800bb50 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f022 0210 	bic.w	r2, r2, #16
 800bb3e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d003      	beq.n	800bb60 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f000 8306 	beq.w	800c176 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f000 8088 	beq.w	800bc88 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2204      	movs	r2, #4
 800bb7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a7a      	ldr	r2, [pc, #488]	; (800bd70 <HAL_DMA_IRQHandler+0xa08>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d04a      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a79      	ldr	r2, [pc, #484]	; (800bd74 <HAL_DMA_IRQHandler+0xa0c>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d045      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a77      	ldr	r2, [pc, #476]	; (800bd78 <HAL_DMA_IRQHandler+0xa10>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d040      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a76      	ldr	r2, [pc, #472]	; (800bd7c <HAL_DMA_IRQHandler+0xa14>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d03b      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a74      	ldr	r2, [pc, #464]	; (800bd80 <HAL_DMA_IRQHandler+0xa18>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d036      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a73      	ldr	r2, [pc, #460]	; (800bd84 <HAL_DMA_IRQHandler+0xa1c>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d031      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a71      	ldr	r2, [pc, #452]	; (800bd88 <HAL_DMA_IRQHandler+0xa20>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d02c      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a70      	ldr	r2, [pc, #448]	; (800bd8c <HAL_DMA_IRQHandler+0xa24>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d027      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a6e      	ldr	r2, [pc, #440]	; (800bd90 <HAL_DMA_IRQHandler+0xa28>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d022      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a6d      	ldr	r2, [pc, #436]	; (800bd94 <HAL_DMA_IRQHandler+0xa2c>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d01d      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a6b      	ldr	r2, [pc, #428]	; (800bd98 <HAL_DMA_IRQHandler+0xa30>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d018      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a6a      	ldr	r2, [pc, #424]	; (800bd9c <HAL_DMA_IRQHandler+0xa34>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d013      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a68      	ldr	r2, [pc, #416]	; (800bda0 <HAL_DMA_IRQHandler+0xa38>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d00e      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a67      	ldr	r2, [pc, #412]	; (800bda4 <HAL_DMA_IRQHandler+0xa3c>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d009      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a65      	ldr	r2, [pc, #404]	; (800bda8 <HAL_DMA_IRQHandler+0xa40>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d004      	beq.n	800bc20 <HAL_DMA_IRQHandler+0x8b8>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a64      	ldr	r2, [pc, #400]	; (800bdac <HAL_DMA_IRQHandler+0xa44>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d108      	bne.n	800bc32 <HAL_DMA_IRQHandler+0x8ca>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f022 0201 	bic.w	r2, r2, #1
 800bc2e:	601a      	str	r2, [r3, #0]
 800bc30:	e007      	b.n	800bc42 <HAL_DMA_IRQHandler+0x8da>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f022 0201 	bic.w	r2, r2, #1
 800bc40:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3301      	adds	r3, #1
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d307      	bcc.n	800bc5e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f003 0301 	and.w	r3, r3, #1
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1f2      	bne.n	800bc42 <HAL_DMA_IRQHandler+0x8da>
 800bc5c:	e000      	b.n	800bc60 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800bc5e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f003 0301 	and.w	r3, r3, #1
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d004      	beq.n	800bc78 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2203      	movs	r2, #3
 800bc72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800bc76:	e003      	b.n	800bc80 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f000 8272 	beq.w	800c176 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	4798      	blx	r3
 800bc9a:	e26c      	b.n	800c176 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a43      	ldr	r2, [pc, #268]	; (800bdb0 <HAL_DMA_IRQHandler+0xa48>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d022      	beq.n	800bcec <HAL_DMA_IRQHandler+0x984>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a42      	ldr	r2, [pc, #264]	; (800bdb4 <HAL_DMA_IRQHandler+0xa4c>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d01d      	beq.n	800bcec <HAL_DMA_IRQHandler+0x984>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a40      	ldr	r2, [pc, #256]	; (800bdb8 <HAL_DMA_IRQHandler+0xa50>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d018      	beq.n	800bcec <HAL_DMA_IRQHandler+0x984>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4a3f      	ldr	r2, [pc, #252]	; (800bdbc <HAL_DMA_IRQHandler+0xa54>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d013      	beq.n	800bcec <HAL_DMA_IRQHandler+0x984>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a3d      	ldr	r2, [pc, #244]	; (800bdc0 <HAL_DMA_IRQHandler+0xa58>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d00e      	beq.n	800bcec <HAL_DMA_IRQHandler+0x984>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a3c      	ldr	r2, [pc, #240]	; (800bdc4 <HAL_DMA_IRQHandler+0xa5c>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d009      	beq.n	800bcec <HAL_DMA_IRQHandler+0x984>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a3a      	ldr	r2, [pc, #232]	; (800bdc8 <HAL_DMA_IRQHandler+0xa60>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d004      	beq.n	800bcec <HAL_DMA_IRQHandler+0x984>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a39      	ldr	r2, [pc, #228]	; (800bdcc <HAL_DMA_IRQHandler+0xa64>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d101      	bne.n	800bcf0 <HAL_DMA_IRQHandler+0x988>
 800bcec:	2301      	movs	r3, #1
 800bcee:	e000      	b.n	800bcf2 <HAL_DMA_IRQHandler+0x98a>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f000 823f 	beq.w	800c176 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd04:	f003 031f 	and.w	r3, r3, #31
 800bd08:	2204      	movs	r2, #4
 800bd0a:	409a      	lsls	r2, r3
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	4013      	ands	r3, r2
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f000 80cd 	beq.w	800beb0 <HAL_DMA_IRQHandler+0xb48>
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	f003 0304 	and.w	r3, r3, #4
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f000 80c7 	beq.w	800beb0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd26:	f003 031f 	and.w	r3, r3, #31
 800bd2a:	2204      	movs	r2, #4
 800bd2c:	409a      	lsls	r2, r3
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d049      	beq.n	800bdd0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d109      	bne.n	800bd5a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f000 8210 	beq.w	800c170 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bd58:	e20a      	b.n	800c170 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f000 8206 	beq.w	800c170 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bd6c:	e200      	b.n	800c170 <HAL_DMA_IRQHandler+0xe08>
 800bd6e:	bf00      	nop
 800bd70:	40020010 	.word	0x40020010
 800bd74:	40020028 	.word	0x40020028
 800bd78:	40020040 	.word	0x40020040
 800bd7c:	40020058 	.word	0x40020058
 800bd80:	40020070 	.word	0x40020070
 800bd84:	40020088 	.word	0x40020088
 800bd88:	400200a0 	.word	0x400200a0
 800bd8c:	400200b8 	.word	0x400200b8
 800bd90:	40020410 	.word	0x40020410
 800bd94:	40020428 	.word	0x40020428
 800bd98:	40020440 	.word	0x40020440
 800bd9c:	40020458 	.word	0x40020458
 800bda0:	40020470 	.word	0x40020470
 800bda4:	40020488 	.word	0x40020488
 800bda8:	400204a0 	.word	0x400204a0
 800bdac:	400204b8 	.word	0x400204b8
 800bdb0:	58025408 	.word	0x58025408
 800bdb4:	5802541c 	.word	0x5802541c
 800bdb8:	58025430 	.word	0x58025430
 800bdbc:	58025444 	.word	0x58025444
 800bdc0:	58025458 	.word	0x58025458
 800bdc4:	5802546c 	.word	0x5802546c
 800bdc8:	58025480 	.word	0x58025480
 800bdcc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	f003 0320 	and.w	r3, r3, #32
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d160      	bne.n	800be9c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a7f      	ldr	r2, [pc, #508]	; (800bfdc <HAL_DMA_IRQHandler+0xc74>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d04a      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a7d      	ldr	r2, [pc, #500]	; (800bfe0 <HAL_DMA_IRQHandler+0xc78>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d045      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a7c      	ldr	r2, [pc, #496]	; (800bfe4 <HAL_DMA_IRQHandler+0xc7c>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d040      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a7a      	ldr	r2, [pc, #488]	; (800bfe8 <HAL_DMA_IRQHandler+0xc80>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d03b      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a79      	ldr	r2, [pc, #484]	; (800bfec <HAL_DMA_IRQHandler+0xc84>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d036      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a77      	ldr	r2, [pc, #476]	; (800bff0 <HAL_DMA_IRQHandler+0xc88>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d031      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a76      	ldr	r2, [pc, #472]	; (800bff4 <HAL_DMA_IRQHandler+0xc8c>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d02c      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a74      	ldr	r2, [pc, #464]	; (800bff8 <HAL_DMA_IRQHandler+0xc90>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d027      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a73      	ldr	r2, [pc, #460]	; (800bffc <HAL_DMA_IRQHandler+0xc94>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d022      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a71      	ldr	r2, [pc, #452]	; (800c000 <HAL_DMA_IRQHandler+0xc98>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d01d      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a70      	ldr	r2, [pc, #448]	; (800c004 <HAL_DMA_IRQHandler+0xc9c>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d018      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a6e      	ldr	r2, [pc, #440]	; (800c008 <HAL_DMA_IRQHandler+0xca0>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d013      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a6d      	ldr	r2, [pc, #436]	; (800c00c <HAL_DMA_IRQHandler+0xca4>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d00e      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a6b      	ldr	r2, [pc, #428]	; (800c010 <HAL_DMA_IRQHandler+0xca8>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d009      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a6a      	ldr	r2, [pc, #424]	; (800c014 <HAL_DMA_IRQHandler+0xcac>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d004      	beq.n	800be7a <HAL_DMA_IRQHandler+0xb12>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a68      	ldr	r2, [pc, #416]	; (800c018 <HAL_DMA_IRQHandler+0xcb0>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d108      	bne.n	800be8c <HAL_DMA_IRQHandler+0xb24>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f022 0208 	bic.w	r2, r2, #8
 800be88:	601a      	str	r2, [r3, #0]
 800be8a:	e007      	b.n	800be9c <HAL_DMA_IRQHandler+0xb34>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f022 0204 	bic.w	r2, r2, #4
 800be9a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f000 8165 	beq.w	800c170 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800beae:	e15f      	b.n	800c170 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800beb4:	f003 031f 	and.w	r3, r3, #31
 800beb8:	2202      	movs	r2, #2
 800beba:	409a      	lsls	r2, r3
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	4013      	ands	r3, r2
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f000 80c5 	beq.w	800c050 <HAL_DMA_IRQHandler+0xce8>
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	f003 0302 	and.w	r3, r3, #2
 800becc:	2b00      	cmp	r3, #0
 800bece:	f000 80bf 	beq.w	800c050 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bed6:	f003 031f 	and.w	r3, r3, #31
 800beda:	2202      	movs	r2, #2
 800bedc:	409a      	lsls	r2, r3
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d018      	beq.n	800bf1e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d109      	bne.n	800bf0a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 813a 	beq.w	800c174 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bf08:	e134      	b.n	800c174 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f000 8130 	beq.w	800c174 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bf1c:	e12a      	b.n	800c174 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	f003 0320 	and.w	r3, r3, #32
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f040 8089 	bne.w	800c03c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a2b      	ldr	r2, [pc, #172]	; (800bfdc <HAL_DMA_IRQHandler+0xc74>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d04a      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a29      	ldr	r2, [pc, #164]	; (800bfe0 <HAL_DMA_IRQHandler+0xc78>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d045      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a28      	ldr	r2, [pc, #160]	; (800bfe4 <HAL_DMA_IRQHandler+0xc7c>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d040      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a26      	ldr	r2, [pc, #152]	; (800bfe8 <HAL_DMA_IRQHandler+0xc80>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d03b      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a25      	ldr	r2, [pc, #148]	; (800bfec <HAL_DMA_IRQHandler+0xc84>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d036      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a23      	ldr	r2, [pc, #140]	; (800bff0 <HAL_DMA_IRQHandler+0xc88>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d031      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a22      	ldr	r2, [pc, #136]	; (800bff4 <HAL_DMA_IRQHandler+0xc8c>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d02c      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a20      	ldr	r2, [pc, #128]	; (800bff8 <HAL_DMA_IRQHandler+0xc90>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d027      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a1f      	ldr	r2, [pc, #124]	; (800bffc <HAL_DMA_IRQHandler+0xc94>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d022      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4a1d      	ldr	r2, [pc, #116]	; (800c000 <HAL_DMA_IRQHandler+0xc98>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d01d      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a1c      	ldr	r2, [pc, #112]	; (800c004 <HAL_DMA_IRQHandler+0xc9c>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d018      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a1a      	ldr	r2, [pc, #104]	; (800c008 <HAL_DMA_IRQHandler+0xca0>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d013      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a19      	ldr	r2, [pc, #100]	; (800c00c <HAL_DMA_IRQHandler+0xca4>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d00e      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a17      	ldr	r2, [pc, #92]	; (800c010 <HAL_DMA_IRQHandler+0xca8>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d009      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a16      	ldr	r2, [pc, #88]	; (800c014 <HAL_DMA_IRQHandler+0xcac>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d004      	beq.n	800bfca <HAL_DMA_IRQHandler+0xc62>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a14      	ldr	r2, [pc, #80]	; (800c018 <HAL_DMA_IRQHandler+0xcb0>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d128      	bne.n	800c01c <HAL_DMA_IRQHandler+0xcb4>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f022 0214 	bic.w	r2, r2, #20
 800bfd8:	601a      	str	r2, [r3, #0]
 800bfda:	e027      	b.n	800c02c <HAL_DMA_IRQHandler+0xcc4>
 800bfdc:	40020010 	.word	0x40020010
 800bfe0:	40020028 	.word	0x40020028
 800bfe4:	40020040 	.word	0x40020040
 800bfe8:	40020058 	.word	0x40020058
 800bfec:	40020070 	.word	0x40020070
 800bff0:	40020088 	.word	0x40020088
 800bff4:	400200a0 	.word	0x400200a0
 800bff8:	400200b8 	.word	0x400200b8
 800bffc:	40020410 	.word	0x40020410
 800c000:	40020428 	.word	0x40020428
 800c004:	40020440 	.word	0x40020440
 800c008:	40020458 	.word	0x40020458
 800c00c:	40020470 	.word	0x40020470
 800c010:	40020488 	.word	0x40020488
 800c014:	400204a0 	.word	0x400204a0
 800c018:	400204b8 	.word	0x400204b8
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f022 020a 	bic.w	r2, r2, #10
 800c02a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c040:	2b00      	cmp	r3, #0
 800c042:	f000 8097 	beq.w	800c174 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c04e:	e091      	b.n	800c174 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c054:	f003 031f 	and.w	r3, r3, #31
 800c058:	2208      	movs	r2, #8
 800c05a:	409a      	lsls	r2, r3
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	4013      	ands	r3, r2
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 8088 	beq.w	800c176 <HAL_DMA_IRQHandler+0xe0e>
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	f003 0308 	and.w	r3, r3, #8
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f000 8082 	beq.w	800c176 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a41      	ldr	r2, [pc, #260]	; (800c17c <HAL_DMA_IRQHandler+0xe14>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d04a      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a3f      	ldr	r2, [pc, #252]	; (800c180 <HAL_DMA_IRQHandler+0xe18>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d045      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a3e      	ldr	r2, [pc, #248]	; (800c184 <HAL_DMA_IRQHandler+0xe1c>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d040      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a3c      	ldr	r2, [pc, #240]	; (800c188 <HAL_DMA_IRQHandler+0xe20>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d03b      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a3b      	ldr	r2, [pc, #236]	; (800c18c <HAL_DMA_IRQHandler+0xe24>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d036      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a39      	ldr	r2, [pc, #228]	; (800c190 <HAL_DMA_IRQHandler+0xe28>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d031      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a38      	ldr	r2, [pc, #224]	; (800c194 <HAL_DMA_IRQHandler+0xe2c>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d02c      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a36      	ldr	r2, [pc, #216]	; (800c198 <HAL_DMA_IRQHandler+0xe30>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d027      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a35      	ldr	r2, [pc, #212]	; (800c19c <HAL_DMA_IRQHandler+0xe34>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d022      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a33      	ldr	r2, [pc, #204]	; (800c1a0 <HAL_DMA_IRQHandler+0xe38>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d01d      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a32      	ldr	r2, [pc, #200]	; (800c1a4 <HAL_DMA_IRQHandler+0xe3c>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d018      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a30      	ldr	r2, [pc, #192]	; (800c1a8 <HAL_DMA_IRQHandler+0xe40>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d013      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a2f      	ldr	r2, [pc, #188]	; (800c1ac <HAL_DMA_IRQHandler+0xe44>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d00e      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a2d      	ldr	r2, [pc, #180]	; (800c1b0 <HAL_DMA_IRQHandler+0xe48>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d009      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a2c      	ldr	r2, [pc, #176]	; (800c1b4 <HAL_DMA_IRQHandler+0xe4c>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d004      	beq.n	800c112 <HAL_DMA_IRQHandler+0xdaa>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a2a      	ldr	r2, [pc, #168]	; (800c1b8 <HAL_DMA_IRQHandler+0xe50>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d108      	bne.n	800c124 <HAL_DMA_IRQHandler+0xdbc>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f022 021c 	bic.w	r2, r2, #28
 800c120:	601a      	str	r2, [r3, #0]
 800c122:	e007      	b.n	800c134 <HAL_DMA_IRQHandler+0xdcc>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f022 020e 	bic.w	r2, r2, #14
 800c132:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c138:	f003 031f 	and.w	r3, r3, #31
 800c13c:	2201      	movs	r2, #1
 800c13e:	409a      	lsls	r2, r3
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2201      	movs	r2, #1
 800c148:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2201      	movs	r2, #1
 800c14e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d009      	beq.n	800c176 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	4798      	blx	r3
 800c16a:	e004      	b.n	800c176 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800c16c:	bf00      	nop
 800c16e:	e002      	b.n	800c176 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c170:	bf00      	nop
 800c172:	e000      	b.n	800c176 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c174:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800c176:	3728      	adds	r7, #40	; 0x28
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	40020010 	.word	0x40020010
 800c180:	40020028 	.word	0x40020028
 800c184:	40020040 	.word	0x40020040
 800c188:	40020058 	.word	0x40020058
 800c18c:	40020070 	.word	0x40020070
 800c190:	40020088 	.word	0x40020088
 800c194:	400200a0 	.word	0x400200a0
 800c198:	400200b8 	.word	0x400200b8
 800c19c:	40020410 	.word	0x40020410
 800c1a0:	40020428 	.word	0x40020428
 800c1a4:	40020440 	.word	0x40020440
 800c1a8:	40020458 	.word	0x40020458
 800c1ac:	40020470 	.word	0x40020470
 800c1b0:	40020488 	.word	0x40020488
 800c1b4:	400204a0 	.word	0x400204a0
 800c1b8:	400204b8 	.word	0x400204b8

0800c1bc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c1ca:	b2db      	uxtb	r3, r3
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b087      	sub	sp, #28
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	607a      	str	r2, [r7, #4]
 800c1e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a7f      	ldr	r2, [pc, #508]	; (800c3f4 <DMA_SetConfig+0x21c>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d072      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a7d      	ldr	r2, [pc, #500]	; (800c3f8 <DMA_SetConfig+0x220>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d06d      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a7c      	ldr	r2, [pc, #496]	; (800c3fc <DMA_SetConfig+0x224>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d068      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a7a      	ldr	r2, [pc, #488]	; (800c400 <DMA_SetConfig+0x228>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d063      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a79      	ldr	r2, [pc, #484]	; (800c404 <DMA_SetConfig+0x22c>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d05e      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a77      	ldr	r2, [pc, #476]	; (800c408 <DMA_SetConfig+0x230>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d059      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a76      	ldr	r2, [pc, #472]	; (800c40c <DMA_SetConfig+0x234>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d054      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a74      	ldr	r2, [pc, #464]	; (800c410 <DMA_SetConfig+0x238>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d04f      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a73      	ldr	r2, [pc, #460]	; (800c414 <DMA_SetConfig+0x23c>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d04a      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a71      	ldr	r2, [pc, #452]	; (800c418 <DMA_SetConfig+0x240>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d045      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a70      	ldr	r2, [pc, #448]	; (800c41c <DMA_SetConfig+0x244>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d040      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a6e      	ldr	r2, [pc, #440]	; (800c420 <DMA_SetConfig+0x248>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d03b      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a6d      	ldr	r2, [pc, #436]	; (800c424 <DMA_SetConfig+0x24c>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d036      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a6b      	ldr	r2, [pc, #428]	; (800c428 <DMA_SetConfig+0x250>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d031      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a6a      	ldr	r2, [pc, #424]	; (800c42c <DMA_SetConfig+0x254>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d02c      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a68      	ldr	r2, [pc, #416]	; (800c430 <DMA_SetConfig+0x258>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d027      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a67      	ldr	r2, [pc, #412]	; (800c434 <DMA_SetConfig+0x25c>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d022      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a65      	ldr	r2, [pc, #404]	; (800c438 <DMA_SetConfig+0x260>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d01d      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a64      	ldr	r2, [pc, #400]	; (800c43c <DMA_SetConfig+0x264>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d018      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a62      	ldr	r2, [pc, #392]	; (800c440 <DMA_SetConfig+0x268>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d013      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a61      	ldr	r2, [pc, #388]	; (800c444 <DMA_SetConfig+0x26c>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d00e      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a5f      	ldr	r2, [pc, #380]	; (800c448 <DMA_SetConfig+0x270>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d009      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a5e      	ldr	r2, [pc, #376]	; (800c44c <DMA_SetConfig+0x274>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d004      	beq.n	800c2e2 <DMA_SetConfig+0x10a>
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a5c      	ldr	r2, [pc, #368]	; (800c450 <DMA_SetConfig+0x278>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d101      	bne.n	800c2e6 <DMA_SetConfig+0x10e>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e000      	b.n	800c2e8 <DMA_SetConfig+0x110>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00d      	beq.n	800c308 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c2f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d004      	beq.n	800c308 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c306:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a39      	ldr	r2, [pc, #228]	; (800c3f4 <DMA_SetConfig+0x21c>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d04a      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a38      	ldr	r2, [pc, #224]	; (800c3f8 <DMA_SetConfig+0x220>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d045      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a36      	ldr	r2, [pc, #216]	; (800c3fc <DMA_SetConfig+0x224>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d040      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a35      	ldr	r2, [pc, #212]	; (800c400 <DMA_SetConfig+0x228>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d03b      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a33      	ldr	r2, [pc, #204]	; (800c404 <DMA_SetConfig+0x22c>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d036      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a32      	ldr	r2, [pc, #200]	; (800c408 <DMA_SetConfig+0x230>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d031      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a30      	ldr	r2, [pc, #192]	; (800c40c <DMA_SetConfig+0x234>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d02c      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a2f      	ldr	r2, [pc, #188]	; (800c410 <DMA_SetConfig+0x238>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d027      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a2d      	ldr	r2, [pc, #180]	; (800c414 <DMA_SetConfig+0x23c>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d022      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a2c      	ldr	r2, [pc, #176]	; (800c418 <DMA_SetConfig+0x240>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d01d      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a2a      	ldr	r2, [pc, #168]	; (800c41c <DMA_SetConfig+0x244>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d018      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a29      	ldr	r2, [pc, #164]	; (800c420 <DMA_SetConfig+0x248>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d013      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4a27      	ldr	r2, [pc, #156]	; (800c424 <DMA_SetConfig+0x24c>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d00e      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a26      	ldr	r2, [pc, #152]	; (800c428 <DMA_SetConfig+0x250>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d009      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a24      	ldr	r2, [pc, #144]	; (800c42c <DMA_SetConfig+0x254>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d004      	beq.n	800c3a8 <DMA_SetConfig+0x1d0>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a23      	ldr	r2, [pc, #140]	; (800c430 <DMA_SetConfig+0x258>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d101      	bne.n	800c3ac <DMA_SetConfig+0x1d4>
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e000      	b.n	800c3ae <DMA_SetConfig+0x1d6>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d059      	beq.n	800c466 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3b6:	f003 031f 	and.w	r3, r3, #31
 800c3ba:	223f      	movs	r2, #63	; 0x3f
 800c3bc:	409a      	lsls	r2, r3
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c3d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	683a      	ldr	r2, [r7, #0]
 800c3d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	2b40      	cmp	r3, #64	; 0x40
 800c3e0:	d138      	bne.n	800c454 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800c3f2:	e086      	b.n	800c502 <DMA_SetConfig+0x32a>
 800c3f4:	40020010 	.word	0x40020010
 800c3f8:	40020028 	.word	0x40020028
 800c3fc:	40020040 	.word	0x40020040
 800c400:	40020058 	.word	0x40020058
 800c404:	40020070 	.word	0x40020070
 800c408:	40020088 	.word	0x40020088
 800c40c:	400200a0 	.word	0x400200a0
 800c410:	400200b8 	.word	0x400200b8
 800c414:	40020410 	.word	0x40020410
 800c418:	40020428 	.word	0x40020428
 800c41c:	40020440 	.word	0x40020440
 800c420:	40020458 	.word	0x40020458
 800c424:	40020470 	.word	0x40020470
 800c428:	40020488 	.word	0x40020488
 800c42c:	400204a0 	.word	0x400204a0
 800c430:	400204b8 	.word	0x400204b8
 800c434:	58025408 	.word	0x58025408
 800c438:	5802541c 	.word	0x5802541c
 800c43c:	58025430 	.word	0x58025430
 800c440:	58025444 	.word	0x58025444
 800c444:	58025458 	.word	0x58025458
 800c448:	5802546c 	.word	0x5802546c
 800c44c:	58025480 	.word	0x58025480
 800c450:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	60da      	str	r2, [r3, #12]
}
 800c464:	e04d      	b.n	800c502 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a29      	ldr	r2, [pc, #164]	; (800c510 <DMA_SetConfig+0x338>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d022      	beq.n	800c4b6 <DMA_SetConfig+0x2de>
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a27      	ldr	r2, [pc, #156]	; (800c514 <DMA_SetConfig+0x33c>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d01d      	beq.n	800c4b6 <DMA_SetConfig+0x2de>
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a26      	ldr	r2, [pc, #152]	; (800c518 <DMA_SetConfig+0x340>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d018      	beq.n	800c4b6 <DMA_SetConfig+0x2de>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a24      	ldr	r2, [pc, #144]	; (800c51c <DMA_SetConfig+0x344>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d013      	beq.n	800c4b6 <DMA_SetConfig+0x2de>
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a23      	ldr	r2, [pc, #140]	; (800c520 <DMA_SetConfig+0x348>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d00e      	beq.n	800c4b6 <DMA_SetConfig+0x2de>
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a21      	ldr	r2, [pc, #132]	; (800c524 <DMA_SetConfig+0x34c>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d009      	beq.n	800c4b6 <DMA_SetConfig+0x2de>
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a20      	ldr	r2, [pc, #128]	; (800c528 <DMA_SetConfig+0x350>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d004      	beq.n	800c4b6 <DMA_SetConfig+0x2de>
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a1e      	ldr	r2, [pc, #120]	; (800c52c <DMA_SetConfig+0x354>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d101      	bne.n	800c4ba <DMA_SetConfig+0x2e2>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e000      	b.n	800c4bc <DMA_SetConfig+0x2e4>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d020      	beq.n	800c502 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4c4:	f003 031f 	and.w	r3, r3, #31
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	409a      	lsls	r2, r3
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	683a      	ldr	r2, [r7, #0]
 800c4d6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	2b40      	cmp	r3, #64	; 0x40
 800c4de:	d108      	bne.n	800c4f2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	68ba      	ldr	r2, [r7, #8]
 800c4ee:	60da      	str	r2, [r3, #12]
}
 800c4f0:	e007      	b.n	800c502 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	60da      	str	r2, [r3, #12]
}
 800c502:	bf00      	nop
 800c504:	371c      	adds	r7, #28
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	58025408 	.word	0x58025408
 800c514:	5802541c 	.word	0x5802541c
 800c518:	58025430 	.word	0x58025430
 800c51c:	58025444 	.word	0x58025444
 800c520:	58025458 	.word	0x58025458
 800c524:	5802546c 	.word	0x5802546c
 800c528:	58025480 	.word	0x58025480
 800c52c:	58025494 	.word	0x58025494

0800c530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c530:	b480      	push	{r7}
 800c532:	b085      	sub	sp, #20
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a42      	ldr	r2, [pc, #264]	; (800c648 <DMA_CalcBaseAndBitshift+0x118>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d04a      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a41      	ldr	r2, [pc, #260]	; (800c64c <DMA_CalcBaseAndBitshift+0x11c>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d045      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a3f      	ldr	r2, [pc, #252]	; (800c650 <DMA_CalcBaseAndBitshift+0x120>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d040      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a3e      	ldr	r2, [pc, #248]	; (800c654 <DMA_CalcBaseAndBitshift+0x124>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d03b      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a3c      	ldr	r2, [pc, #240]	; (800c658 <DMA_CalcBaseAndBitshift+0x128>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d036      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a3b      	ldr	r2, [pc, #236]	; (800c65c <DMA_CalcBaseAndBitshift+0x12c>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d031      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a39      	ldr	r2, [pc, #228]	; (800c660 <DMA_CalcBaseAndBitshift+0x130>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d02c      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a38      	ldr	r2, [pc, #224]	; (800c664 <DMA_CalcBaseAndBitshift+0x134>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d027      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a36      	ldr	r2, [pc, #216]	; (800c668 <DMA_CalcBaseAndBitshift+0x138>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d022      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a35      	ldr	r2, [pc, #212]	; (800c66c <DMA_CalcBaseAndBitshift+0x13c>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d01d      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a33      	ldr	r2, [pc, #204]	; (800c670 <DMA_CalcBaseAndBitshift+0x140>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d018      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a32      	ldr	r2, [pc, #200]	; (800c674 <DMA_CalcBaseAndBitshift+0x144>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d013      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a30      	ldr	r2, [pc, #192]	; (800c678 <DMA_CalcBaseAndBitshift+0x148>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d00e      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a2f      	ldr	r2, [pc, #188]	; (800c67c <DMA_CalcBaseAndBitshift+0x14c>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d009      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a2d      	ldr	r2, [pc, #180]	; (800c680 <DMA_CalcBaseAndBitshift+0x150>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d004      	beq.n	800c5d8 <DMA_CalcBaseAndBitshift+0xa8>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a2c      	ldr	r2, [pc, #176]	; (800c684 <DMA_CalcBaseAndBitshift+0x154>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d101      	bne.n	800c5dc <DMA_CalcBaseAndBitshift+0xac>
 800c5d8:	2301      	movs	r3, #1
 800c5da:	e000      	b.n	800c5de <DMA_CalcBaseAndBitshift+0xae>
 800c5dc:	2300      	movs	r3, #0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d024      	beq.n	800c62c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	3b10      	subs	r3, #16
 800c5ea:	4a27      	ldr	r2, [pc, #156]	; (800c688 <DMA_CalcBaseAndBitshift+0x158>)
 800c5ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c5f0:	091b      	lsrs	r3, r3, #4
 800c5f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f003 0307 	and.w	r3, r3, #7
 800c5fa:	4a24      	ldr	r2, [pc, #144]	; (800c68c <DMA_CalcBaseAndBitshift+0x15c>)
 800c5fc:	5cd3      	ldrb	r3, [r2, r3]
 800c5fe:	461a      	mov	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2b03      	cmp	r3, #3
 800c608:	d908      	bls.n	800c61c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	461a      	mov	r2, r3
 800c610:	4b1f      	ldr	r3, [pc, #124]	; (800c690 <DMA_CalcBaseAndBitshift+0x160>)
 800c612:	4013      	ands	r3, r2
 800c614:	1d1a      	adds	r2, r3, #4
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	659a      	str	r2, [r3, #88]	; 0x58
 800c61a:	e00d      	b.n	800c638 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	461a      	mov	r2, r3
 800c622:	4b1b      	ldr	r3, [pc, #108]	; (800c690 <DMA_CalcBaseAndBitshift+0x160>)
 800c624:	4013      	ands	r3, r2
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	6593      	str	r3, [r2, #88]	; 0x58
 800c62a:	e005      	b.n	800c638 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3714      	adds	r7, #20
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr
 800c648:	40020010 	.word	0x40020010
 800c64c:	40020028 	.word	0x40020028
 800c650:	40020040 	.word	0x40020040
 800c654:	40020058 	.word	0x40020058
 800c658:	40020070 	.word	0x40020070
 800c65c:	40020088 	.word	0x40020088
 800c660:	400200a0 	.word	0x400200a0
 800c664:	400200b8 	.word	0x400200b8
 800c668:	40020410 	.word	0x40020410
 800c66c:	40020428 	.word	0x40020428
 800c670:	40020440 	.word	0x40020440
 800c674:	40020458 	.word	0x40020458
 800c678:	40020470 	.word	0x40020470
 800c67c:	40020488 	.word	0x40020488
 800c680:	400204a0 	.word	0x400204a0
 800c684:	400204b8 	.word	0x400204b8
 800c688:	aaaaaaab 	.word	0xaaaaaaab
 800c68c:	080182e0 	.word	0x080182e0
 800c690:	fffffc00 	.word	0xfffffc00

0800c694 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c69c:	2300      	movs	r3, #0
 800c69e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	699b      	ldr	r3, [r3, #24]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d120      	bne.n	800c6ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	d858      	bhi.n	800c762 <DMA_CheckFifoParam+0xce>
 800c6b0:	a201      	add	r2, pc, #4	; (adr r2, 800c6b8 <DMA_CheckFifoParam+0x24>)
 800c6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b6:	bf00      	nop
 800c6b8:	0800c6c9 	.word	0x0800c6c9
 800c6bc:	0800c6db 	.word	0x0800c6db
 800c6c0:	0800c6c9 	.word	0x0800c6c9
 800c6c4:	0800c763 	.word	0x0800c763
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d048      	beq.n	800c766 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c6d8:	e045      	b.n	800c766 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c6e2:	d142      	bne.n	800c76a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c6e8:	e03f      	b.n	800c76a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	699b      	ldr	r3, [r3, #24]
 800c6ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6f2:	d123      	bne.n	800c73c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6f8:	2b03      	cmp	r3, #3
 800c6fa:	d838      	bhi.n	800c76e <DMA_CheckFifoParam+0xda>
 800c6fc:	a201      	add	r2, pc, #4	; (adr r2, 800c704 <DMA_CheckFifoParam+0x70>)
 800c6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c702:	bf00      	nop
 800c704:	0800c715 	.word	0x0800c715
 800c708:	0800c71b 	.word	0x0800c71b
 800c70c:	0800c715 	.word	0x0800c715
 800c710:	0800c72d 	.word	0x0800c72d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800c714:	2301      	movs	r3, #1
 800c716:	73fb      	strb	r3, [r7, #15]
        break;
 800c718:	e030      	b.n	800c77c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c722:	2b00      	cmp	r3, #0
 800c724:	d025      	beq.n	800c772 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800c726:	2301      	movs	r3, #1
 800c728:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c72a:	e022      	b.n	800c772 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c730:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c734:	d11f      	bne.n	800c776 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800c736:	2301      	movs	r3, #1
 800c738:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c73a:	e01c      	b.n	800c776 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c740:	2b02      	cmp	r3, #2
 800c742:	d902      	bls.n	800c74a <DMA_CheckFifoParam+0xb6>
 800c744:	2b03      	cmp	r3, #3
 800c746:	d003      	beq.n	800c750 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800c748:	e018      	b.n	800c77c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800c74a:	2301      	movs	r3, #1
 800c74c:	73fb      	strb	r3, [r7, #15]
        break;
 800c74e:	e015      	b.n	800c77c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00e      	beq.n	800c77a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800c75c:	2301      	movs	r3, #1
 800c75e:	73fb      	strb	r3, [r7, #15]
    break;
 800c760:	e00b      	b.n	800c77a <DMA_CheckFifoParam+0xe6>
        break;
 800c762:	bf00      	nop
 800c764:	e00a      	b.n	800c77c <DMA_CheckFifoParam+0xe8>
        break;
 800c766:	bf00      	nop
 800c768:	e008      	b.n	800c77c <DMA_CheckFifoParam+0xe8>
        break;
 800c76a:	bf00      	nop
 800c76c:	e006      	b.n	800c77c <DMA_CheckFifoParam+0xe8>
        break;
 800c76e:	bf00      	nop
 800c770:	e004      	b.n	800c77c <DMA_CheckFifoParam+0xe8>
        break;
 800c772:	bf00      	nop
 800c774:	e002      	b.n	800c77c <DMA_CheckFifoParam+0xe8>
        break;
 800c776:	bf00      	nop
 800c778:	e000      	b.n	800c77c <DMA_CheckFifoParam+0xe8>
    break;
 800c77a:	bf00      	nop
    }
  }

  return status;
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3714      	adds	r7, #20
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop

0800c78c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a38      	ldr	r2, [pc, #224]	; (800c880 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d022      	beq.n	800c7ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a36      	ldr	r2, [pc, #216]	; (800c884 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d01d      	beq.n	800c7ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a35      	ldr	r2, [pc, #212]	; (800c888 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d018      	beq.n	800c7ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a33      	ldr	r2, [pc, #204]	; (800c88c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d013      	beq.n	800c7ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a32      	ldr	r2, [pc, #200]	; (800c890 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d00e      	beq.n	800c7ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a30      	ldr	r2, [pc, #192]	; (800c894 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d009      	beq.n	800c7ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4a2f      	ldr	r2, [pc, #188]	; (800c898 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d004      	beq.n	800c7ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a2d      	ldr	r2, [pc, #180]	; (800c89c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d101      	bne.n	800c7ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e000      	b.n	800c7f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d01a      	beq.n	800c82a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	3b08      	subs	r3, #8
 800c7fc:	4a28      	ldr	r2, [pc, #160]	; (800c8a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800c7fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c802:	091b      	lsrs	r3, r3, #4
 800c804:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	4b26      	ldr	r3, [pc, #152]	; (800c8a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800c80a:	4413      	add	r3, r2
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	461a      	mov	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a24      	ldr	r2, [pc, #144]	; (800c8a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800c818:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f003 031f 	and.w	r3, r3, #31
 800c820:	2201      	movs	r2, #1
 800c822:	409a      	lsls	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800c828:	e024      	b.n	800c874 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	3b10      	subs	r3, #16
 800c832:	4a1e      	ldr	r2, [pc, #120]	; (800c8ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800c834:	fba2 2303 	umull	r2, r3, r2, r3
 800c838:	091b      	lsrs	r3, r3, #4
 800c83a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	4a1c      	ldr	r2, [pc, #112]	; (800c8b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d806      	bhi.n	800c852 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	4a1b      	ldr	r2, [pc, #108]	; (800c8b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d902      	bls.n	800c852 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	3308      	adds	r3, #8
 800c850:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	4b18      	ldr	r3, [pc, #96]	; (800c8b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	461a      	mov	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4a16      	ldr	r2, [pc, #88]	; (800c8bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800c864:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f003 031f 	and.w	r3, r3, #31
 800c86c:	2201      	movs	r2, #1
 800c86e:	409a      	lsls	r2, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c874:	bf00      	nop
 800c876:	3714      	adds	r7, #20
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr
 800c880:	58025408 	.word	0x58025408
 800c884:	5802541c 	.word	0x5802541c
 800c888:	58025430 	.word	0x58025430
 800c88c:	58025444 	.word	0x58025444
 800c890:	58025458 	.word	0x58025458
 800c894:	5802546c 	.word	0x5802546c
 800c898:	58025480 	.word	0x58025480
 800c89c:	58025494 	.word	0x58025494
 800c8a0:	cccccccd 	.word	0xcccccccd
 800c8a4:	16009600 	.word	0x16009600
 800c8a8:	58025880 	.word	0x58025880
 800c8ac:	aaaaaaab 	.word	0xaaaaaaab
 800c8b0:	400204b8 	.word	0x400204b8
 800c8b4:	4002040f 	.word	0x4002040f
 800c8b8:	10008200 	.word	0x10008200
 800c8bc:	40020880 	.word	0x40020880

0800c8c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b085      	sub	sp, #20
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d04a      	beq.n	800c96c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2b08      	cmp	r3, #8
 800c8da:	d847      	bhi.n	800c96c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a25      	ldr	r2, [pc, #148]	; (800c978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d022      	beq.n	800c92c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a24      	ldr	r2, [pc, #144]	; (800c97c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d01d      	beq.n	800c92c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a22      	ldr	r2, [pc, #136]	; (800c980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d018      	beq.n	800c92c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a21      	ldr	r2, [pc, #132]	; (800c984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d013      	beq.n	800c92c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a1f      	ldr	r2, [pc, #124]	; (800c988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d00e      	beq.n	800c92c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a1e      	ldr	r2, [pc, #120]	; (800c98c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d009      	beq.n	800c92c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a1c      	ldr	r2, [pc, #112]	; (800c990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d004      	beq.n	800c92c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a1b      	ldr	r2, [pc, #108]	; (800c994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d101      	bne.n	800c930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800c92c:	2301      	movs	r3, #1
 800c92e:	e000      	b.n	800c932 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800c930:	2300      	movs	r3, #0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00a      	beq.n	800c94c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	4b17      	ldr	r3, [pc, #92]	; (800c998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800c93a:	4413      	add	r3, r2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	461a      	mov	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4a15      	ldr	r2, [pc, #84]	; (800c99c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800c948:	671a      	str	r2, [r3, #112]	; 0x70
 800c94a:	e009      	b.n	800c960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	4b14      	ldr	r3, [pc, #80]	; (800c9a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800c950:	4413      	add	r3, r2
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	461a      	mov	r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4a11      	ldr	r2, [pc, #68]	; (800c9a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800c95e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	3b01      	subs	r3, #1
 800c964:	2201      	movs	r2, #1
 800c966:	409a      	lsls	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800c96c:	bf00      	nop
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr
 800c978:	58025408 	.word	0x58025408
 800c97c:	5802541c 	.word	0x5802541c
 800c980:	58025430 	.word	0x58025430
 800c984:	58025444 	.word	0x58025444
 800c988:	58025458 	.word	0x58025458
 800c98c:	5802546c 	.word	0x5802546c
 800c990:	58025480 	.word	0x58025480
 800c994:	58025494 	.word	0x58025494
 800c998:	1600963f 	.word	0x1600963f
 800c99c:	58025940 	.word	0x58025940
 800c9a0:	1000823f 	.word	0x1000823f
 800c9a4:	40020940 	.word	0x40020940

0800c9a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b089      	sub	sp, #36	; 0x24
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c9b6:	4b86      	ldr	r3, [pc, #536]	; (800cbd0 <HAL_GPIO_Init+0x228>)
 800c9b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c9ba:	e18c      	b.n	800ccd6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	2101      	movs	r1, #1
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f000 817e 	beq.w	800ccd0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	f003 0303 	and.w	r3, r3, #3
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d005      	beq.n	800c9ec <HAL_GPIO_Init+0x44>
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	f003 0303 	and.w	r3, r3, #3
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d130      	bne.n	800ca4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	005b      	lsls	r3, r3, #1
 800c9f6:	2203      	movs	r2, #3
 800c9f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c9fc:	43db      	mvns	r3, r3
 800c9fe:	69ba      	ldr	r2, [r7, #24]
 800ca00:	4013      	ands	r3, r2
 800ca02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	68da      	ldr	r2, [r3, #12]
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	005b      	lsls	r3, r3, #1
 800ca0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca10:	69ba      	ldr	r2, [r7, #24]
 800ca12:	4313      	orrs	r3, r2
 800ca14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	69ba      	ldr	r2, [r7, #24]
 800ca1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ca22:	2201      	movs	r2, #1
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	fa02 f303 	lsl.w	r3, r2, r3
 800ca2a:	43db      	mvns	r3, r3
 800ca2c:	69ba      	ldr	r2, [r7, #24]
 800ca2e:	4013      	ands	r3, r2
 800ca30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	091b      	lsrs	r3, r3, #4
 800ca38:	f003 0201 	and.w	r2, r3, #1
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca42:	69ba      	ldr	r2, [r7, #24]
 800ca44:	4313      	orrs	r3, r2
 800ca46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	69ba      	ldr	r2, [r7, #24]
 800ca4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	f003 0303 	and.w	r3, r3, #3
 800ca56:	2b03      	cmp	r3, #3
 800ca58:	d017      	beq.n	800ca8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	005b      	lsls	r3, r3, #1
 800ca64:	2203      	movs	r2, #3
 800ca66:	fa02 f303 	lsl.w	r3, r2, r3
 800ca6a:	43db      	mvns	r3, r3
 800ca6c:	69ba      	ldr	r2, [r7, #24]
 800ca6e:	4013      	ands	r3, r2
 800ca70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	689a      	ldr	r2, [r3, #8]
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	005b      	lsls	r3, r3, #1
 800ca7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca7e:	69ba      	ldr	r2, [r7, #24]
 800ca80:	4313      	orrs	r3, r2
 800ca82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	69ba      	ldr	r2, [r7, #24]
 800ca88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	f003 0303 	and.w	r3, r3, #3
 800ca92:	2b02      	cmp	r3, #2
 800ca94:	d123      	bne.n	800cade <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	08da      	lsrs	r2, r3, #3
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	3208      	adds	r2, #8
 800ca9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	f003 0307 	and.w	r3, r3, #7
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	220f      	movs	r2, #15
 800caae:	fa02 f303 	lsl.w	r3, r2, r3
 800cab2:	43db      	mvns	r3, r3
 800cab4:	69ba      	ldr	r2, [r7, #24]
 800cab6:	4013      	ands	r3, r2
 800cab8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	691a      	ldr	r2, [r3, #16]
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	f003 0307 	and.w	r3, r3, #7
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	fa02 f303 	lsl.w	r3, r2, r3
 800caca:	69ba      	ldr	r2, [r7, #24]
 800cacc:	4313      	orrs	r3, r2
 800cace:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	08da      	lsrs	r2, r3, #3
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	3208      	adds	r2, #8
 800cad8:	69b9      	ldr	r1, [r7, #24]
 800cada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	005b      	lsls	r3, r3, #1
 800cae8:	2203      	movs	r2, #3
 800caea:	fa02 f303 	lsl.w	r3, r2, r3
 800caee:	43db      	mvns	r3, r3
 800caf0:	69ba      	ldr	r2, [r7, #24]
 800caf2:	4013      	ands	r3, r2
 800caf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	f003 0203 	and.w	r2, r3, #3
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	005b      	lsls	r3, r3, #1
 800cb02:	fa02 f303 	lsl.w	r3, r2, r3
 800cb06:	69ba      	ldr	r2, [r7, #24]
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	69ba      	ldr	r2, [r7, #24]
 800cb10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f000 80d8 	beq.w	800ccd0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb20:	4b2c      	ldr	r3, [pc, #176]	; (800cbd4 <HAL_GPIO_Init+0x22c>)
 800cb22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cb26:	4a2b      	ldr	r2, [pc, #172]	; (800cbd4 <HAL_GPIO_Init+0x22c>)
 800cb28:	f043 0302 	orr.w	r3, r3, #2
 800cb2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800cb30:	4b28      	ldr	r3, [pc, #160]	; (800cbd4 <HAL_GPIO_Init+0x22c>)
 800cb32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cb36:	f003 0302 	and.w	r3, r3, #2
 800cb3a:	60fb      	str	r3, [r7, #12]
 800cb3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cb3e:	4a26      	ldr	r2, [pc, #152]	; (800cbd8 <HAL_GPIO_Init+0x230>)
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	089b      	lsrs	r3, r3, #2
 800cb44:	3302      	adds	r3, #2
 800cb46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	f003 0303 	and.w	r3, r3, #3
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	220f      	movs	r2, #15
 800cb56:	fa02 f303 	lsl.w	r3, r2, r3
 800cb5a:	43db      	mvns	r3, r3
 800cb5c:	69ba      	ldr	r2, [r7, #24]
 800cb5e:	4013      	ands	r3, r2
 800cb60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	4a1d      	ldr	r2, [pc, #116]	; (800cbdc <HAL_GPIO_Init+0x234>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d04a      	beq.n	800cc00 <HAL_GPIO_Init+0x258>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a1c      	ldr	r2, [pc, #112]	; (800cbe0 <HAL_GPIO_Init+0x238>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d02b      	beq.n	800cbca <HAL_GPIO_Init+0x222>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a1b      	ldr	r2, [pc, #108]	; (800cbe4 <HAL_GPIO_Init+0x23c>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d025      	beq.n	800cbc6 <HAL_GPIO_Init+0x21e>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4a1a      	ldr	r2, [pc, #104]	; (800cbe8 <HAL_GPIO_Init+0x240>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d01f      	beq.n	800cbc2 <HAL_GPIO_Init+0x21a>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4a19      	ldr	r2, [pc, #100]	; (800cbec <HAL_GPIO_Init+0x244>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d019      	beq.n	800cbbe <HAL_GPIO_Init+0x216>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4a18      	ldr	r2, [pc, #96]	; (800cbf0 <HAL_GPIO_Init+0x248>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d013      	beq.n	800cbba <HAL_GPIO_Init+0x212>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4a17      	ldr	r2, [pc, #92]	; (800cbf4 <HAL_GPIO_Init+0x24c>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d00d      	beq.n	800cbb6 <HAL_GPIO_Init+0x20e>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4a16      	ldr	r2, [pc, #88]	; (800cbf8 <HAL_GPIO_Init+0x250>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d007      	beq.n	800cbb2 <HAL_GPIO_Init+0x20a>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4a15      	ldr	r2, [pc, #84]	; (800cbfc <HAL_GPIO_Init+0x254>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d101      	bne.n	800cbae <HAL_GPIO_Init+0x206>
 800cbaa:	2309      	movs	r3, #9
 800cbac:	e029      	b.n	800cc02 <HAL_GPIO_Init+0x25a>
 800cbae:	230a      	movs	r3, #10
 800cbb0:	e027      	b.n	800cc02 <HAL_GPIO_Init+0x25a>
 800cbb2:	2307      	movs	r3, #7
 800cbb4:	e025      	b.n	800cc02 <HAL_GPIO_Init+0x25a>
 800cbb6:	2306      	movs	r3, #6
 800cbb8:	e023      	b.n	800cc02 <HAL_GPIO_Init+0x25a>
 800cbba:	2305      	movs	r3, #5
 800cbbc:	e021      	b.n	800cc02 <HAL_GPIO_Init+0x25a>
 800cbbe:	2304      	movs	r3, #4
 800cbc0:	e01f      	b.n	800cc02 <HAL_GPIO_Init+0x25a>
 800cbc2:	2303      	movs	r3, #3
 800cbc4:	e01d      	b.n	800cc02 <HAL_GPIO_Init+0x25a>
 800cbc6:	2302      	movs	r3, #2
 800cbc8:	e01b      	b.n	800cc02 <HAL_GPIO_Init+0x25a>
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e019      	b.n	800cc02 <HAL_GPIO_Init+0x25a>
 800cbce:	bf00      	nop
 800cbd0:	58000080 	.word	0x58000080
 800cbd4:	58024400 	.word	0x58024400
 800cbd8:	58000400 	.word	0x58000400
 800cbdc:	58020000 	.word	0x58020000
 800cbe0:	58020400 	.word	0x58020400
 800cbe4:	58020800 	.word	0x58020800
 800cbe8:	58020c00 	.word	0x58020c00
 800cbec:	58021000 	.word	0x58021000
 800cbf0:	58021400 	.word	0x58021400
 800cbf4:	58021800 	.word	0x58021800
 800cbf8:	58021c00 	.word	0x58021c00
 800cbfc:	58022400 	.word	0x58022400
 800cc00:	2300      	movs	r3, #0
 800cc02:	69fa      	ldr	r2, [r7, #28]
 800cc04:	f002 0203 	and.w	r2, r2, #3
 800cc08:	0092      	lsls	r2, r2, #2
 800cc0a:	4093      	lsls	r3, r2
 800cc0c:	69ba      	ldr	r2, [r7, #24]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cc12:	4938      	ldr	r1, [pc, #224]	; (800ccf4 <HAL_GPIO_Init+0x34c>)
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	089b      	lsrs	r3, r3, #2
 800cc18:	3302      	adds	r3, #2
 800cc1a:	69ba      	ldr	r2, [r7, #24]
 800cc1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cc20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	43db      	mvns	r3, r3
 800cc2c:	69ba      	ldr	r2, [r7, #24]
 800cc2e:	4013      	ands	r3, r2
 800cc30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d003      	beq.n	800cc46 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800cc3e:	69ba      	ldr	r2, [r7, #24]
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800cc46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cc4a:	69bb      	ldr	r3, [r7, #24]
 800cc4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800cc4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	43db      	mvns	r3, r3
 800cc5a:	69ba      	ldr	r2, [r7, #24]
 800cc5c:	4013      	ands	r3, r2
 800cc5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d003      	beq.n	800cc74 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800cc6c:	69ba      	ldr	r2, [r7, #24]
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	4313      	orrs	r3, r2
 800cc72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800cc74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	43db      	mvns	r3, r3
 800cc86:	69ba      	ldr	r2, [r7, #24]
 800cc88:	4013      	ands	r3, r2
 800cc8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d003      	beq.n	800cca0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800cc98:	69ba      	ldr	r2, [r7, #24]
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	69ba      	ldr	r2, [r7, #24]
 800cca4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	43db      	mvns	r3, r3
 800ccb0:	69ba      	ldr	r2, [r7, #24]
 800ccb2:	4013      	ands	r3, r2
 800ccb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d003      	beq.n	800ccca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800ccc2:	69ba      	ldr	r2, [r7, #24]
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	69ba      	ldr	r2, [r7, #24]
 800ccce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	69fb      	ldr	r3, [r7, #28]
 800ccdc:	fa22 f303 	lsr.w	r3, r2, r3
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f47f ae6b 	bne.w	800c9bc <HAL_GPIO_Init+0x14>
  }
}
 800cce6:	bf00      	nop
 800cce8:	bf00      	nop
 800ccea:	3724      	adds	r7, #36	; 0x24
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	58000400 	.word	0x58000400

0800ccf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	460b      	mov	r3, r1
 800cd02:	807b      	strh	r3, [r7, #2]
 800cd04:	4613      	mov	r3, r2
 800cd06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cd08:	787b      	ldrb	r3, [r7, #1]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d003      	beq.n	800cd16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cd0e:	887a      	ldrh	r2, [r7, #2]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800cd14:	e003      	b.n	800cd1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800cd16:	887b      	ldrh	r3, [r7, #2]
 800cd18:	041a      	lsls	r2, r3, #16
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	619a      	str	r2, [r3, #24]
}
 800cd1e:	bf00      	nop
 800cd20:	370c      	adds	r7, #12
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr

0800cd2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800cd2a:	b480      	push	{r7}
 800cd2c:	b085      	sub	sp, #20
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
 800cd32:	460b      	mov	r3, r1
 800cd34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	695b      	ldr	r3, [r3, #20]
 800cd3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cd3c:	887a      	ldrh	r2, [r7, #2]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	4013      	ands	r3, r2
 800cd42:	041a      	lsls	r2, r3, #16
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	43d9      	mvns	r1, r3
 800cd48:	887b      	ldrh	r3, [r7, #2]
 800cd4a:	400b      	ands	r3, r1
 800cd4c:	431a      	orrs	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	619a      	str	r2, [r3, #24]
}
 800cd52:	bf00      	nop
 800cd54:	3714      	adds	r7, #20
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
	...

0800cd60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d101      	bne.n	800cd72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e07f      	b.n	800ce72 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d106      	bne.n	800cd8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7f5 f8ce 	bl	8001f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2224      	movs	r2, #36	; 0x24
 800cd90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f022 0201 	bic.w	r2, r2, #1
 800cda2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	685a      	ldr	r2, [r3, #4]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cdb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	689a      	ldr	r2, [r3, #8]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cdc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d107      	bne.n	800cdda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	689a      	ldr	r2, [r3, #8]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cdd6:	609a      	str	r2, [r3, #8]
 800cdd8:	e006      	b.n	800cde8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	689a      	ldr	r2, [r3, #8]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800cde6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d104      	bne.n	800cdfa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cdf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	6859      	ldr	r1, [r3, #4]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	4b1d      	ldr	r3, [pc, #116]	; (800ce7c <HAL_I2C_Init+0x11c>)
 800ce06:	430b      	orrs	r3, r1
 800ce08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	68da      	ldr	r2, [r3, #12]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ce18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	691a      	ldr	r2, [r3, #16]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	695b      	ldr	r3, [r3, #20]
 800ce22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	699b      	ldr	r3, [r3, #24]
 800ce2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	430a      	orrs	r2, r1
 800ce32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	69d9      	ldr	r1, [r3, #28]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6a1a      	ldr	r2, [r3, #32]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	430a      	orrs	r2, r1
 800ce42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f042 0201 	orr.w	r2, r2, #1
 800ce52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2220      	movs	r2, #32
 800ce5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ce70:	2300      	movs	r3, #0
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3708      	adds	r7, #8
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	02008000 	.word	0x02008000

0800ce80 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b088      	sub	sp, #32
 800ce84:	af02      	add	r7, sp, #8
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	607a      	str	r2, [r7, #4]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	817b      	strh	r3, [r7, #10]
 800ce90:	4613      	mov	r3, r2
 800ce92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	2b20      	cmp	r3, #32
 800ce9e:	f040 80da 	bne.w	800d056 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d101      	bne.n	800ceb0 <HAL_I2C_Master_Transmit+0x30>
 800ceac:	2302      	movs	r3, #2
 800ceae:	e0d3      	b.n	800d058 <HAL_I2C_Master_Transmit+0x1d8>
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ceb8:	f7fa faa2 	bl	8007400 <HAL_GetTick>
 800cebc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	9300      	str	r3, [sp, #0]
 800cec2:	2319      	movs	r3, #25
 800cec4:	2201      	movs	r2, #1
 800cec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ceca:	68f8      	ldr	r0, [r7, #12]
 800cecc:	f000 ffcf 	bl	800de6e <I2C_WaitOnFlagUntilTimeout>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d001      	beq.n	800ceda <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800ced6:	2301      	movs	r3, #1
 800ced8:	e0be      	b.n	800d058 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2221      	movs	r2, #33	; 0x21
 800cede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2210      	movs	r2, #16
 800cee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2200      	movs	r2, #0
 800ceee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	893a      	ldrh	r2, [r7, #8]
 800cefa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2200      	movs	r2, #0
 800cf00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	2bff      	cmp	r3, #255	; 0xff
 800cf0a:	d90e      	bls.n	800cf2a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	22ff      	movs	r2, #255	; 0xff
 800cf10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf16:	b2da      	uxtb	r2, r3
 800cf18:	8979      	ldrh	r1, [r7, #10]
 800cf1a:	4b51      	ldr	r3, [pc, #324]	; (800d060 <HAL_I2C_Master_Transmit+0x1e0>)
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	f001 f9c6 	bl	800e2b4 <I2C_TransferConfig>
 800cf28:	e06c      	b.n	800d004 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf38:	b2da      	uxtb	r2, r3
 800cf3a:	8979      	ldrh	r1, [r7, #10]
 800cf3c:	4b48      	ldr	r3, [pc, #288]	; (800d060 <HAL_I2C_Master_Transmit+0x1e0>)
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf44:	68f8      	ldr	r0, [r7, #12]
 800cf46:	f001 f9b5 	bl	800e2b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800cf4a:	e05b      	b.n	800d004 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cf4c:	697a      	ldr	r2, [r7, #20]
 800cf4e:	6a39      	ldr	r1, [r7, #32]
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f000 ffcc 	bl	800deee <I2C_WaitOnTXISFlagUntilTimeout>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d001      	beq.n	800cf60 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e07b      	b.n	800d058 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf64:	781a      	ldrb	r2, [r3, #0]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf70:	1c5a      	adds	r2, r3, #1
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	3b01      	subs	r3, #1
 800cf7e:	b29a      	uxth	r2, r3
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d034      	beq.n	800d004 <HAL_I2C_Master_Transmit+0x184>
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d130      	bne.n	800d004 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	6a3b      	ldr	r3, [r7, #32]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	2180      	movs	r1, #128	; 0x80
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	f000 ff5e 	bl	800de6e <I2C_WaitOnFlagUntilTimeout>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d001      	beq.n	800cfbc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e04d      	b.n	800d058 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	2bff      	cmp	r3, #255	; 0xff
 800cfc4:	d90e      	bls.n	800cfe4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	22ff      	movs	r2, #255	; 0xff
 800cfca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfd0:	b2da      	uxtb	r2, r3
 800cfd2:	8979      	ldrh	r1, [r7, #10]
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	f001 f969 	bl	800e2b4 <I2C_TransferConfig>
 800cfe2:	e00f      	b.n	800d004 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cff2:	b2da      	uxtb	r2, r3
 800cff4:	8979      	ldrh	r1, [r7, #10]
 800cff6:	2300      	movs	r3, #0
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f001 f958 	bl	800e2b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d008:	b29b      	uxth	r3, r3
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d19e      	bne.n	800cf4c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	6a39      	ldr	r1, [r7, #32]
 800d012:	68f8      	ldr	r0, [r7, #12]
 800d014:	f000 ffab 	bl	800df6e <I2C_WaitOnSTOPFlagUntilTimeout>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d001      	beq.n	800d022 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800d01e:	2301      	movs	r3, #1
 800d020:	e01a      	b.n	800d058 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2220      	movs	r2, #32
 800d028:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	6859      	ldr	r1, [r3, #4]
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	4b0b      	ldr	r3, [pc, #44]	; (800d064 <HAL_I2C_Master_Transmit+0x1e4>)
 800d036:	400b      	ands	r3, r1
 800d038:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2220      	movs	r2, #32
 800d03e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2200      	movs	r2, #0
 800d04e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d052:	2300      	movs	r3, #0
 800d054:	e000      	b.n	800d058 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800d056:	2302      	movs	r3, #2
  }
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3718      	adds	r7, #24
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	80002000 	.word	0x80002000
 800d064:	fe00e800 	.word	0xfe00e800

0800d068 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b088      	sub	sp, #32
 800d06c:	af02      	add	r7, sp, #8
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	607a      	str	r2, [r7, #4]
 800d072:	461a      	mov	r2, r3
 800d074:	460b      	mov	r3, r1
 800d076:	817b      	strh	r3, [r7, #10]
 800d078:	4613      	mov	r3, r2
 800d07a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d082:	b2db      	uxtb	r3, r3
 800d084:	2b20      	cmp	r3, #32
 800d086:	f040 80db 	bne.w	800d240 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d090:	2b01      	cmp	r3, #1
 800d092:	d101      	bne.n	800d098 <HAL_I2C_Master_Receive+0x30>
 800d094:	2302      	movs	r3, #2
 800d096:	e0d4      	b.n	800d242 <HAL_I2C_Master_Receive+0x1da>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2201      	movs	r2, #1
 800d09c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d0a0:	f7fa f9ae 	bl	8007400 <HAL_GetTick>
 800d0a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	2319      	movs	r3, #25
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f000 fedb 	bl	800de6e <I2C_WaitOnFlagUntilTimeout>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d001      	beq.n	800d0c2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	e0bf      	b.n	800d242 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2222      	movs	r2, #34	; 0x22
 800d0c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2210      	movs	r2, #16
 800d0ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	893a      	ldrh	r2, [r7, #8]
 800d0e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	2bff      	cmp	r3, #255	; 0xff
 800d0f2:	d90e      	bls.n	800d112 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	22ff      	movs	r2, #255	; 0xff
 800d0f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0fe:	b2da      	uxtb	r2, r3
 800d100:	8979      	ldrh	r1, [r7, #10]
 800d102:	4b52      	ldr	r3, [pc, #328]	; (800d24c <HAL_I2C_Master_Receive+0x1e4>)
 800d104:	9300      	str	r3, [sp, #0]
 800d106:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f001 f8d2 	bl	800e2b4 <I2C_TransferConfig>
 800d110:	e06d      	b.n	800d1ee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d116:	b29a      	uxth	r2, r3
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d120:	b2da      	uxtb	r2, r3
 800d122:	8979      	ldrh	r1, [r7, #10]
 800d124:	4b49      	ldr	r3, [pc, #292]	; (800d24c <HAL_I2C_Master_Receive+0x1e4>)
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	f001 f8c1 	bl	800e2b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800d132:	e05c      	b.n	800d1ee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d134:	697a      	ldr	r2, [r7, #20]
 800d136:	6a39      	ldr	r1, [r7, #32]
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	f000 ff55 	bl	800dfe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d001      	beq.n	800d148 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800d144:	2301      	movs	r3, #1
 800d146:	e07c      	b.n	800d242 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d152:	b2d2      	uxtb	r2, r2
 800d154:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15a:	1c5a      	adds	r2, r3, #1
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d164:	3b01      	subs	r3, #1
 800d166:	b29a      	uxth	r2, r3
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d170:	b29b      	uxth	r3, r3
 800d172:	3b01      	subs	r3, #1
 800d174:	b29a      	uxth	r2, r3
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d17e:	b29b      	uxth	r3, r3
 800d180:	2b00      	cmp	r3, #0
 800d182:	d034      	beq.n	800d1ee <HAL_I2C_Master_Receive+0x186>
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d130      	bne.n	800d1ee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	9300      	str	r3, [sp, #0]
 800d190:	6a3b      	ldr	r3, [r7, #32]
 800d192:	2200      	movs	r2, #0
 800d194:	2180      	movs	r1, #128	; 0x80
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f000 fe69 	bl	800de6e <I2C_WaitOnFlagUntilTimeout>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d001      	beq.n	800d1a6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e04d      	b.n	800d242 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	2bff      	cmp	r3, #255	; 0xff
 800d1ae:	d90e      	bls.n	800d1ce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	22ff      	movs	r2, #255	; 0xff
 800d1b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	8979      	ldrh	r1, [r7, #10]
 800d1be:	2300      	movs	r3, #0
 800d1c0:	9300      	str	r3, [sp, #0]
 800d1c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d1c6:	68f8      	ldr	r0, [r7, #12]
 800d1c8:	f001 f874 	bl	800e2b4 <I2C_TransferConfig>
 800d1cc:	e00f      	b.n	800d1ee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	8979      	ldrh	r1, [r7, #10]
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	9300      	str	r3, [sp, #0]
 800d1e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f001 f863 	bl	800e2b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d19d      	bne.n	800d134 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d1f8:	697a      	ldr	r2, [r7, #20]
 800d1fa:	6a39      	ldr	r1, [r7, #32]
 800d1fc:	68f8      	ldr	r0, [r7, #12]
 800d1fe:	f000 feb6 	bl	800df6e <I2C_WaitOnSTOPFlagUntilTimeout>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d001      	beq.n	800d20c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800d208:	2301      	movs	r3, #1
 800d20a:	e01a      	b.n	800d242 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2220      	movs	r2, #32
 800d212:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	6859      	ldr	r1, [r3, #4]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	4b0c      	ldr	r3, [pc, #48]	; (800d250 <HAL_I2C_Master_Receive+0x1e8>)
 800d220:	400b      	ands	r3, r1
 800d222:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2220      	movs	r2, #32
 800d228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2200      	movs	r2, #0
 800d230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2200      	movs	r2, #0
 800d238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d23c:	2300      	movs	r3, #0
 800d23e:	e000      	b.n	800d242 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800d240:	2302      	movs	r3, #2
  }
}
 800d242:	4618      	mov	r0, r3
 800d244:	3718      	adds	r7, #24
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	80002400 	.word	0x80002400
 800d250:	fe00e800 	.word	0xfe00e800

0800d254 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	699b      	ldr	r3, [r3, #24]
 800d262:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	0a1b      	lsrs	r3, r3, #8
 800d270:	f003 0301 	and.w	r3, r3, #1
 800d274:	2b00      	cmp	r3, #0
 800d276:	d010      	beq.n	800d29a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	09db      	lsrs	r3, r3, #7
 800d27c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d280:	2b00      	cmp	r3, #0
 800d282:	d00a      	beq.n	800d29a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d288:	f043 0201 	orr.w	r2, r3, #1
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d298:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	0a9b      	lsrs	r3, r3, #10
 800d29e:	f003 0301 	and.w	r3, r3, #1
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d010      	beq.n	800d2c8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	09db      	lsrs	r3, r3, #7
 800d2aa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00a      	beq.n	800d2c8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2b6:	f043 0208 	orr.w	r2, r3, #8
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d2c6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	0a5b      	lsrs	r3, r3, #9
 800d2cc:	f003 0301 	and.w	r3, r3, #1
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d010      	beq.n	800d2f6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	09db      	lsrs	r3, r3, #7
 800d2d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00a      	beq.n	800d2f6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2e4:	f043 0202 	orr.w	r2, r3, #2
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2f4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2fa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f003 030b 	and.w	r3, r3, #11
 800d302:	2b00      	cmp	r3, #0
 800d304:	d003      	beq.n	800d30e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800d306:	68f9      	ldr	r1, [r7, #12]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fc77 	bl	800dbfc <I2C_ITError>
  }
}
 800d30e:	bf00      	nop
 800d310:	3718      	adds	r7, #24
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d316:	b480      	push	{r7}
 800d318:	b083      	sub	sp, #12
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d31e:	bf00      	nop
 800d320:	370c      	adds	r7, #12
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr

0800d32a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d32a:	b480      	push	{r7}
 800d32c:	b083      	sub	sp, #12
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d332:	bf00      	nop
 800d334:	370c      	adds	r7, #12
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr

0800d33e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d33e:	b480      	push	{r7}
 800d340:	b083      	sub	sp, #12
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
 800d346:	460b      	mov	r3, r1
 800d348:	70fb      	strb	r3, [r7, #3]
 800d34a:	4613      	mov	r3, r2
 800d34c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d34e:	bf00      	nop
 800d350:	370c      	adds	r7, #12
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr

0800d35a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d35a:	b480      	push	{r7}
 800d35c:	b083      	sub	sp, #12
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800d362:	bf00      	nop
 800d364:	370c      	adds	r7, #12
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr

0800d36e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d36e:	b480      	push	{r7}
 800d370:	b083      	sub	sp, #12
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d376:	bf00      	nop
 800d378:	370c      	adds	r7, #12
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr

0800d382 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d382:	b480      	push	{r7}
 800d384:	b083      	sub	sp, #12
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d38a:	bf00      	nop
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr

0800d396 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800d396:	b580      	push	{r7, lr}
 800d398:	b086      	sub	sp, #24
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	60f8      	str	r0, [r7, #12]
 800d39e:	60b9      	str	r1, [r7, #8]
 800d3a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d101      	bne.n	800d3ba <I2C_Slave_ISR_IT+0x24>
 800d3b6:	2302      	movs	r3, #2
 800d3b8:	e0ec      	b.n	800d594 <I2C_Slave_ISR_IT+0x1fe>
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2201      	movs	r2, #1
 800d3be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	095b      	lsrs	r3, r3, #5
 800d3c6:	f003 0301 	and.w	r3, r3, #1
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d009      	beq.n	800d3e2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	095b      	lsrs	r3, r3, #5
 800d3d2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d003      	beq.n	800d3e2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800d3da:	6939      	ldr	r1, [r7, #16]
 800d3dc:	68f8      	ldr	r0, [r7, #12]
 800d3de:	f000 f9bf 	bl	800d760 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	091b      	lsrs	r3, r3, #4
 800d3e6:	f003 0301 	and.w	r3, r3, #1
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d04d      	beq.n	800d48a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	091b      	lsrs	r3, r3, #4
 800d3f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d047      	beq.n	800d48a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	2b00      	cmp	r3, #0
 800d402:	d128      	bne.n	800d456 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	2b28      	cmp	r3, #40	; 0x28
 800d40e:	d108      	bne.n	800d422 <I2C_Slave_ISR_IT+0x8c>
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d416:	d104      	bne.n	800d422 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d418:	6939      	ldr	r1, [r7, #16]
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f000 fb98 	bl	800db50 <I2C_ITListenCplt>
 800d420:	e032      	b.n	800d488 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	2b29      	cmp	r3, #41	; 0x29
 800d42c:	d10e      	bne.n	800d44c <I2C_Slave_ISR_IT+0xb6>
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d434:	d00a      	beq.n	800d44c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2210      	movs	r2, #16
 800d43c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f000 fcd3 	bl	800ddea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f000 f92d 	bl	800d6a4 <I2C_ITSlaveSeqCplt>
 800d44a:	e01d      	b.n	800d488 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2210      	movs	r2, #16
 800d452:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800d454:	e096      	b.n	800d584 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	2210      	movs	r2, #16
 800d45c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d462:	f043 0204 	orr.w	r2, r3, #4
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d004      	beq.n	800d47a <I2C_Slave_ISR_IT+0xe4>
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d476:	f040 8085 	bne.w	800d584 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d47e:	4619      	mov	r1, r3
 800d480:	68f8      	ldr	r0, [r7, #12]
 800d482:	f000 fbbb 	bl	800dbfc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d486:	e07d      	b.n	800d584 <I2C_Slave_ISR_IT+0x1ee>
 800d488:	e07c      	b.n	800d584 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	089b      	lsrs	r3, r3, #2
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	2b00      	cmp	r3, #0
 800d494:	d030      	beq.n	800d4f8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	089b      	lsrs	r3, r3, #2
 800d49a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d02a      	beq.n	800d4f8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d018      	beq.n	800d4de <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b6:	b2d2      	uxtb	r2, r2
 800d4b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4be:	1c5a      	adds	r2, r3, #1
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	b29a      	uxth	r2, r3
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	3b01      	subs	r3, #1
 800d4d8:	b29a      	uxth	r2, r3
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d14f      	bne.n	800d588 <I2C_Slave_ISR_IT+0x1f2>
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d4ee:	d04b      	beq.n	800d588 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f000 f8d7 	bl	800d6a4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800d4f6:	e047      	b.n	800d588 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	08db      	lsrs	r3, r3, #3
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00a      	beq.n	800d51a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	08db      	lsrs	r3, r3, #3
 800d508:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d004      	beq.n	800d51a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800d510:	6939      	ldr	r1, [r7, #16]
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f000 f842 	bl	800d59c <I2C_ITAddrCplt>
 800d518:	e037      	b.n	800d58a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	085b      	lsrs	r3, r3, #1
 800d51e:	f003 0301 	and.w	r3, r3, #1
 800d522:	2b00      	cmp	r3, #0
 800d524:	d031      	beq.n	800d58a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	085b      	lsrs	r3, r3, #1
 800d52a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d02b      	beq.n	800d58a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d536:	b29b      	uxth	r3, r3
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d018      	beq.n	800d56e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d540:	781a      	ldrb	r2, [r3, #0]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54c:	1c5a      	adds	r2, r3, #1
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d556:	b29b      	uxth	r3, r3
 800d558:	3b01      	subs	r3, #1
 800d55a:	b29a      	uxth	r2, r3
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d564:	3b01      	subs	r3, #1
 800d566:	b29a      	uxth	r2, r3
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	851a      	strh	r2, [r3, #40]	; 0x28
 800d56c:	e00d      	b.n	800d58a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d574:	d002      	beq.n	800d57c <I2C_Slave_ISR_IT+0x1e6>
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d106      	bne.n	800d58a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f000 f891 	bl	800d6a4 <I2C_ITSlaveSeqCplt>
 800d582:	e002      	b.n	800d58a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800d584:	bf00      	nop
 800d586:	e000      	b.n	800d58a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800d588:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d592:	2300      	movs	r3, #0
}
 800d594:	4618      	mov	r0, r3
 800d596:	3718      	adds	r7, #24
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d5b2:	2b28      	cmp	r3, #40	; 0x28
 800d5b4:	d16a      	bne.n	800d68c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	699b      	ldr	r3, [r3, #24]
 800d5bc:	0c1b      	lsrs	r3, r3, #16
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	f003 0301 	and.w	r3, r3, #1
 800d5c4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	699b      	ldr	r3, [r3, #24]
 800d5cc:	0c1b      	lsrs	r3, r3, #16
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d5d4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	689b      	ldr	r3, [r3, #8]
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5e2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d5f0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	2b02      	cmp	r3, #2
 800d5f8:	d138      	bne.n	800d66c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800d5fa:	897b      	ldrh	r3, [r7, #10]
 800d5fc:	09db      	lsrs	r3, r3, #7
 800d5fe:	b29a      	uxth	r2, r3
 800d600:	89bb      	ldrh	r3, [r7, #12]
 800d602:	4053      	eors	r3, r2
 800d604:	b29b      	uxth	r3, r3
 800d606:	f003 0306 	and.w	r3, r3, #6
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d11c      	bne.n	800d648 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800d60e:	897b      	ldrh	r3, [r7, #10]
 800d610:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d616:	1c5a      	adds	r2, r3, #1
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d620:	2b02      	cmp	r3, #2
 800d622:	d13b      	bne.n	800d69c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2208      	movs	r2, #8
 800d630:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d63a:	89ba      	ldrh	r2, [r7, #12]
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
 800d63e:	4619      	mov	r1, r3
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7ff fe7c 	bl	800d33e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d646:	e029      	b.n	800d69c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800d648:	893b      	ldrh	r3, [r7, #8]
 800d64a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d64c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 fe61 	bl	800e318 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2200      	movs	r2, #0
 800d65a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d65e:	89ba      	ldrh	r2, [r7, #12]
 800d660:	7bfb      	ldrb	r3, [r7, #15]
 800d662:	4619      	mov	r1, r3
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7ff fe6a 	bl	800d33e <HAL_I2C_AddrCallback>
}
 800d66a:	e017      	b.n	800d69c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d66c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 fe51 	bl	800e318 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d67e:	89ba      	ldrh	r2, [r7, #12]
 800d680:	7bfb      	ldrb	r3, [r7, #15]
 800d682:	4619      	mov	r1, r3
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f7ff fe5a 	bl	800d33e <HAL_I2C_AddrCallback>
}
 800d68a:	e007      	b.n	800d69c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2208      	movs	r2, #8
 800d692:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800d69c:	bf00      	nop
 800d69e:	3710      	adds	r7, #16
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b084      	sub	sp, #16
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	0b9b      	lsrs	r3, r3, #14
 800d6c0:	f003 0301 	and.w	r3, r3, #1
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d008      	beq.n	800d6da <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d6d6:	601a      	str	r2, [r3, #0]
 800d6d8:	e00d      	b.n	800d6f6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	0bdb      	lsrs	r3, r3, #15
 800d6de:	f003 0301 	and.w	r3, r3, #1
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d007      	beq.n	800d6f6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d6f4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	2b29      	cmp	r3, #41	; 0x29
 800d700:	d112      	bne.n	800d728 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2228      	movs	r2, #40	; 0x28
 800d706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2221      	movs	r2, #33	; 0x21
 800d70e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d710:	2101      	movs	r1, #1
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 fe00 	bl	800e318 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2200      	movs	r2, #0
 800d71c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f7ff fdf8 	bl	800d316 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d726:	e017      	b.n	800d758 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	2b2a      	cmp	r3, #42	; 0x2a
 800d732:	d111      	bne.n	800d758 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2228      	movs	r2, #40	; 0x28
 800d738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2222      	movs	r2, #34	; 0x22
 800d740:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800d742:	2102      	movs	r1, #2
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 fde7 	bl	800e318 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2200      	movs	r2, #0
 800d74e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f7ff fde9 	bl	800d32a <HAL_I2C_SlaveRxCpltCallback>
}
 800d758:	bf00      	nop
 800d75a:	3710      	adds	r7, #16
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b086      	sub	sp, #24
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d77c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2220      	movs	r2, #32
 800d784:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d786:	7bfb      	ldrb	r3, [r7, #15]
 800d788:	2b21      	cmp	r3, #33	; 0x21
 800d78a:	d002      	beq.n	800d792 <I2C_ITSlaveCplt+0x32>
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
 800d78e:	2b29      	cmp	r3, #41	; 0x29
 800d790:	d108      	bne.n	800d7a4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800d792:	f248 0101 	movw	r1, #32769	; 0x8001
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 fdbe 	bl	800e318 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2221      	movs	r2, #33	; 0x21
 800d7a0:	631a      	str	r2, [r3, #48]	; 0x30
 800d7a2:	e00d      	b.n	800d7c0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
 800d7a6:	2b22      	cmp	r3, #34	; 0x22
 800d7a8:	d002      	beq.n	800d7b0 <I2C_ITSlaveCplt+0x50>
 800d7aa:	7bfb      	ldrb	r3, [r7, #15]
 800d7ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d7ae:	d107      	bne.n	800d7c0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800d7b0:	f248 0102 	movw	r1, #32770	; 0x8002
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f000 fdaf 	bl	800e318 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2222      	movs	r2, #34	; 0x22
 800d7be:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	685a      	ldr	r2, [r3, #4]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d7ce:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	6859      	ldr	r1, [r3, #4]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	4b80      	ldr	r3, [pc, #512]	; (800d9dc <I2C_ITSlaveCplt+0x27c>)
 800d7dc:	400b      	ands	r3, r1
 800d7de:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fb02 	bl	800ddea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	0b9b      	lsrs	r3, r3, #14
 800d7ea:	f003 0301 	and.w	r3, r3, #1
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d07a      	beq.n	800d8e8 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d800:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d806:	2b00      	cmp	r3, #0
 800d808:	f000 8111 	beq.w	800da2e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	4a73      	ldr	r2, [pc, #460]	; (800d9e0 <I2C_ITSlaveCplt+0x280>)
 800d814:	4293      	cmp	r3, r2
 800d816:	d059      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4a71      	ldr	r2, [pc, #452]	; (800d9e4 <I2C_ITSlaveCplt+0x284>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d053      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4a6f      	ldr	r2, [pc, #444]	; (800d9e8 <I2C_ITSlaveCplt+0x288>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d04d      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4a6d      	ldr	r2, [pc, #436]	; (800d9ec <I2C_ITSlaveCplt+0x28c>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	d047      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4a6b      	ldr	r2, [pc, #428]	; (800d9f0 <I2C_ITSlaveCplt+0x290>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d041      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4a69      	ldr	r2, [pc, #420]	; (800d9f4 <I2C_ITSlaveCplt+0x294>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d03b      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a67      	ldr	r2, [pc, #412]	; (800d9f8 <I2C_ITSlaveCplt+0x298>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d035      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	4a65      	ldr	r2, [pc, #404]	; (800d9fc <I2C_ITSlaveCplt+0x29c>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d02f      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4a63      	ldr	r2, [pc, #396]	; (800da00 <I2C_ITSlaveCplt+0x2a0>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d029      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	4a61      	ldr	r2, [pc, #388]	; (800da04 <I2C_ITSlaveCplt+0x2a4>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d023      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4a5f      	ldr	r2, [pc, #380]	; (800da08 <I2C_ITSlaveCplt+0x2a8>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d01d      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a5d      	ldr	r2, [pc, #372]	; (800da0c <I2C_ITSlaveCplt+0x2ac>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d017      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a5b      	ldr	r2, [pc, #364]	; (800da10 <I2C_ITSlaveCplt+0x2b0>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d011      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4a59      	ldr	r2, [pc, #356]	; (800da14 <I2C_ITSlaveCplt+0x2b4>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d00b      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4a57      	ldr	r2, [pc, #348]	; (800da18 <I2C_ITSlaveCplt+0x2b8>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d005      	beq.n	800d8cc <I2C_ITSlaveCplt+0x16c>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4a55      	ldr	r2, [pc, #340]	; (800da1c <I2C_ITSlaveCplt+0x2bc>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d105      	bne.n	800d8d8 <I2C_ITSlaveCplt+0x178>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	e004      	b.n	800d8e2 <I2C_ITSlaveCplt+0x182>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	8553      	strh	r3, [r2, #42]	; 0x2a
 800d8e6:	e0a2      	b.n	800da2e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	0bdb      	lsrs	r3, r3, #15
 800d8ec:	f003 0301 	and.w	r3, r3, #1
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	f000 809c 	beq.w	800da2e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d904:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f000 808f 	beq.w	800da2e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4a32      	ldr	r2, [pc, #200]	; (800d9e0 <I2C_ITSlaveCplt+0x280>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d059      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a30      	ldr	r2, [pc, #192]	; (800d9e4 <I2C_ITSlaveCplt+0x284>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d053      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4a2e      	ldr	r2, [pc, #184]	; (800d9e8 <I2C_ITSlaveCplt+0x288>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d04d      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4a2c      	ldr	r2, [pc, #176]	; (800d9ec <I2C_ITSlaveCplt+0x28c>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d047      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a2a      	ldr	r2, [pc, #168]	; (800d9f0 <I2C_ITSlaveCplt+0x290>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d041      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	4a28      	ldr	r2, [pc, #160]	; (800d9f4 <I2C_ITSlaveCplt+0x294>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d03b      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4a26      	ldr	r2, [pc, #152]	; (800d9f8 <I2C_ITSlaveCplt+0x298>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d035      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a24      	ldr	r2, [pc, #144]	; (800d9fc <I2C_ITSlaveCplt+0x29c>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d02f      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a22      	ldr	r2, [pc, #136]	; (800da00 <I2C_ITSlaveCplt+0x2a0>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d029      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4a20      	ldr	r2, [pc, #128]	; (800da04 <I2C_ITSlaveCplt+0x2a4>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d023      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a1e      	ldr	r2, [pc, #120]	; (800da08 <I2C_ITSlaveCplt+0x2a8>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d01d      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a1c      	ldr	r2, [pc, #112]	; (800da0c <I2C_ITSlaveCplt+0x2ac>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d017      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4a1a      	ldr	r2, [pc, #104]	; (800da10 <I2C_ITSlaveCplt+0x2b0>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d011      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4a18      	ldr	r2, [pc, #96]	; (800da14 <I2C_ITSlaveCplt+0x2b4>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d00b      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4a16      	ldr	r2, [pc, #88]	; (800da18 <I2C_ITSlaveCplt+0x2b8>)
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d005      	beq.n	800d9d0 <I2C_ITSlaveCplt+0x270>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4a14      	ldr	r2, [pc, #80]	; (800da1c <I2C_ITSlaveCplt+0x2bc>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d127      	bne.n	800da20 <I2C_ITSlaveCplt+0x2c0>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	e026      	b.n	800da2a <I2C_ITSlaveCplt+0x2ca>
 800d9dc:	fe00e800 	.word	0xfe00e800
 800d9e0:	40020010 	.word	0x40020010
 800d9e4:	40020028 	.word	0x40020028
 800d9e8:	40020040 	.word	0x40020040
 800d9ec:	40020058 	.word	0x40020058
 800d9f0:	40020070 	.word	0x40020070
 800d9f4:	40020088 	.word	0x40020088
 800d9f8:	400200a0 	.word	0x400200a0
 800d9fc:	400200b8 	.word	0x400200b8
 800da00:	40020410 	.word	0x40020410
 800da04:	40020428 	.word	0x40020428
 800da08:	40020440 	.word	0x40020440
 800da0c:	40020458 	.word	0x40020458
 800da10:	40020470 	.word	0x40020470
 800da14:	40020488 	.word	0x40020488
 800da18:	400204a0 	.word	0x400204a0
 800da1c:	400204b8 	.word	0x400204b8
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	685b      	ldr	r3, [r3, #4]
 800da28:	b29b      	uxth	r3, r3
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	089b      	lsrs	r3, r3, #2
 800da32:	f003 0301 	and.w	r3, r3, #1
 800da36:	2b00      	cmp	r3, #0
 800da38:	d020      	beq.n	800da7c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f023 0304 	bic.w	r3, r3, #4
 800da40:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4c:	b2d2      	uxtb	r2, r2
 800da4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da54:	1c5a      	adds	r2, r3, #1
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00c      	beq.n	800da7c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da66:	3b01      	subs	r3, #1
 800da68:	b29a      	uxth	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da72:	b29b      	uxth	r3, r3
 800da74:	3b01      	subs	r3, #1
 800da76:	b29a      	uxth	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da80:	b29b      	uxth	r3, r3
 800da82:	2b00      	cmp	r3, #0
 800da84:	d005      	beq.n	800da92 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da8a:	f043 0204 	orr.w	r2, r3, #4
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d010      	beq.n	800daca <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daac:	4619      	mov	r1, r3
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 f8a4 	bl	800dbfc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	2b28      	cmp	r3, #40	; 0x28
 800dabe:	d141      	bne.n	800db44 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800dac0:	6979      	ldr	r1, [r7, #20]
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 f844 	bl	800db50 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800dac8:	e03c      	b.n	800db44 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dace:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dad2:	d014      	beq.n	800dafe <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f7ff fde5 	bl	800d6a4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4a1b      	ldr	r2, [pc, #108]	; (800db4c <I2C_ITSlaveCplt+0x3ec>)
 800dade:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2220      	movs	r2, #32
 800dae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7ff fc2f 	bl	800d35a <HAL_I2C_ListenCpltCallback>
}
 800dafc:	e022      	b.n	800db44 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db04:	b2db      	uxtb	r3, r3
 800db06:	2b22      	cmp	r3, #34	; 0x22
 800db08:	d10e      	bne.n	800db28 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2220      	movs	r2, #32
 800db0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f7ff fc02 	bl	800d32a <HAL_I2C_SlaveRxCpltCallback>
}
 800db26:	e00d      	b.n	800db44 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2220      	movs	r2, #32
 800db2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2200      	movs	r2, #0
 800db3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7ff fbe9 	bl	800d316 <HAL_I2C_SlaveTxCpltCallback>
}
 800db44:	bf00      	nop
 800db46:	3718      	adds	r7, #24
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	ffff0000 	.word	0xffff0000

0800db50 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	4a26      	ldr	r2, [pc, #152]	; (800dbf8 <I2C_ITListenCplt+0xa8>)
 800db5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2220      	movs	r2, #32
 800db6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2200      	movs	r2, #0
 800db72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2200      	movs	r2, #0
 800db7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	089b      	lsrs	r3, r3, #2
 800db80:	f003 0301 	and.w	r3, r3, #1
 800db84:	2b00      	cmp	r3, #0
 800db86:	d022      	beq.n	800dbce <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db92:	b2d2      	uxtb	r2, r2
 800db94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9a:	1c5a      	adds	r2, r3, #1
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d012      	beq.n	800dbce <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbac:	3b01      	subs	r3, #1
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	b29a      	uxth	r2, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbc6:	f043 0204 	orr.w	r2, r3, #4
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800dbce:	f248 0103 	movw	r1, #32771	; 0x8003
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 fba0 	bl	800e318 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2210      	movs	r2, #16
 800dbde:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7ff fbb6 	bl	800d35a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800dbee:	bf00      	nop
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	ffff0000 	.word	0xffff0000

0800dbfc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4a5d      	ldr	r2, [pc, #372]	; (800dd90 <I2C_ITError+0x194>)
 800dc1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	431a      	orrs	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800dc2e:	7bfb      	ldrb	r3, [r7, #15]
 800dc30:	2b28      	cmp	r3, #40	; 0x28
 800dc32:	d005      	beq.n	800dc40 <I2C_ITError+0x44>
 800dc34:	7bfb      	ldrb	r3, [r7, #15]
 800dc36:	2b29      	cmp	r3, #41	; 0x29
 800dc38:	d002      	beq.n	800dc40 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800dc3a:	7bfb      	ldrb	r3, [r7, #15]
 800dc3c:	2b2a      	cmp	r3, #42	; 0x2a
 800dc3e:	d10b      	bne.n	800dc58 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800dc40:	2103      	movs	r1, #3
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 fb68 	bl	800e318 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2228      	movs	r2, #40	; 0x28
 800dc4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	4a50      	ldr	r2, [pc, #320]	; (800dd94 <I2C_ITError+0x198>)
 800dc54:	635a      	str	r2, [r3, #52]	; 0x34
 800dc56:	e011      	b.n	800dc7c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800dc58:	f248 0103 	movw	r1, #32771	; 0x8003
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 fb5b 	bl	800e318 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2b60      	cmp	r3, #96	; 0x60
 800dc6c:	d003      	beq.n	800dc76 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2220      	movs	r2, #32
 800dc72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc80:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d039      	beq.n	800dcfe <I2C_ITError+0x102>
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	2b11      	cmp	r3, #17
 800dc8e:	d002      	beq.n	800dc96 <I2C_ITError+0x9a>
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	2b21      	cmp	r3, #33	; 0x21
 800dc94:	d133      	bne.n	800dcfe <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dca4:	d107      	bne.n	800dcb6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dcb4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fe fa7e 	bl	800c1bc <HAL_DMA_GetState>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d017      	beq.n	800dcf6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcca:	4a33      	ldr	r2, [pc, #204]	; (800dd98 <I2C_ITError+0x19c>)
 800dccc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fd f8fe 	bl	800aedc <HAL_DMA_Abort_IT>
 800dce0:	4603      	mov	r3, r0
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d04d      	beq.n	800dd82 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dcf0:	4610      	mov	r0, r2
 800dcf2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800dcf4:	e045      	b.n	800dd82 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 f850 	bl	800dd9c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800dcfc:	e041      	b.n	800dd82 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d039      	beq.n	800dd7a <I2C_ITError+0x17e>
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	2b12      	cmp	r3, #18
 800dd0a:	d002      	beq.n	800dd12 <I2C_ITError+0x116>
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	2b22      	cmp	r3, #34	; 0x22
 800dd10:	d133      	bne.n	800dd7a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd20:	d107      	bne.n	800dd32 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dd30:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fe fa40 	bl	800c1bc <HAL_DMA_GetState>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d017      	beq.n	800dd72 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd46:	4a14      	ldr	r2, [pc, #80]	; (800dd98 <I2C_ITError+0x19c>)
 800dd48:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7fd f8c0 	bl	800aedc <HAL_DMA_Abort_IT>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d011      	beq.n	800dd86 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dd70:	e009      	b.n	800dd86 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 f812 	bl	800dd9c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dd78:	e005      	b.n	800dd86 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 f80e 	bl	800dd9c <I2C_TreatErrorCallback>
  }
}
 800dd80:	e002      	b.n	800dd88 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800dd82:	bf00      	nop
 800dd84:	e000      	b.n	800dd88 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dd86:	bf00      	nop
}
 800dd88:	bf00      	nop
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	ffff0000 	.word	0xffff0000
 800dd94:	0800d397 	.word	0x0800d397
 800dd98:	0800de33 	.word	0x0800de33

0800dd9c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	2b60      	cmp	r3, #96	; 0x60
 800ddae:	d10e      	bne.n	800ddce <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2220      	movs	r2, #32
 800ddb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f7ff fadb 	bl	800d382 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ddcc:	e009      	b.n	800dde2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f7ff fac6 	bl	800d36e <HAL_I2C_ErrorCallback>
}
 800dde2:	bf00      	nop
 800dde4:	3708      	adds	r7, #8
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ddea:	b480      	push	{r7}
 800ddec:	b083      	sub	sp, #12
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	699b      	ldr	r3, [r3, #24]
 800ddf8:	f003 0302 	and.w	r3, r3, #2
 800ddfc:	2b02      	cmp	r3, #2
 800ddfe:	d103      	bne.n	800de08 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2200      	movs	r2, #0
 800de06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	699b      	ldr	r3, [r3, #24]
 800de0e:	f003 0301 	and.w	r3, r3, #1
 800de12:	2b01      	cmp	r3, #1
 800de14:	d007      	beq.n	800de26 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	699a      	ldr	r2, [r3, #24]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f042 0201 	orr.w	r2, r2, #1
 800de24:	619a      	str	r2, [r3, #24]
  }
}
 800de26:	bf00      	nop
 800de28:	370c      	adds	r7, #12
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr

0800de32 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800de32:	b580      	push	{r7, lr}
 800de34:	b084      	sub	sp, #16
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de3e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de44:	2b00      	cmp	r3, #0
 800de46:	d003      	beq.n	800de50 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de4c:	2200      	movs	r2, #0
 800de4e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de54:	2b00      	cmp	r3, #0
 800de56:	d003      	beq.n	800de60 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de5c:	2200      	movs	r2, #0
 800de5e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f7ff ff9b 	bl	800dd9c <I2C_TreatErrorCallback>
}
 800de66:	bf00      	nop
 800de68:	3710      	adds	r7, #16
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}

0800de6e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800de6e:	b580      	push	{r7, lr}
 800de70:	b084      	sub	sp, #16
 800de72:	af00      	add	r7, sp, #0
 800de74:	60f8      	str	r0, [r7, #12]
 800de76:	60b9      	str	r1, [r7, #8]
 800de78:	603b      	str	r3, [r7, #0]
 800de7a:	4613      	mov	r3, r2
 800de7c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800de7e:	e022      	b.n	800dec6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de86:	d01e      	beq.n	800dec6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de88:	f7f9 faba 	bl	8007400 <HAL_GetTick>
 800de8c:	4602      	mov	r2, r0
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	1ad3      	subs	r3, r2, r3
 800de92:	683a      	ldr	r2, [r7, #0]
 800de94:	429a      	cmp	r2, r3
 800de96:	d302      	bcc.n	800de9e <I2C_WaitOnFlagUntilTimeout+0x30>
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d113      	bne.n	800dec6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dea2:	f043 0220 	orr.w	r2, r3, #32
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2220      	movs	r2, #32
 800deae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2200      	movs	r2, #0
 800deb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2200      	movs	r2, #0
 800debe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800dec2:	2301      	movs	r3, #1
 800dec4:	e00f      	b.n	800dee6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	699a      	ldr	r2, [r3, #24]
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	4013      	ands	r3, r2
 800ded0:	68ba      	ldr	r2, [r7, #8]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	bf0c      	ite	eq
 800ded6:	2301      	moveq	r3, #1
 800ded8:	2300      	movne	r3, #0
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	461a      	mov	r2, r3
 800dede:	79fb      	ldrb	r3, [r7, #7]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d0cd      	beq.n	800de80 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dee4:	2300      	movs	r3, #0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800deee:	b580      	push	{r7, lr}
 800def0:	b084      	sub	sp, #16
 800def2:	af00      	add	r7, sp, #0
 800def4:	60f8      	str	r0, [r7, #12]
 800def6:	60b9      	str	r1, [r7, #8]
 800def8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800defa:	e02c      	b.n	800df56 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	68b9      	ldr	r1, [r7, #8]
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f000 f8eb 	bl	800e0dc <I2C_IsErrorOccurred>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d001      	beq.n	800df10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800df0c:	2301      	movs	r3, #1
 800df0e:	e02a      	b.n	800df66 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df16:	d01e      	beq.n	800df56 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df18:	f7f9 fa72 	bl	8007400 <HAL_GetTick>
 800df1c:	4602      	mov	r2, r0
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	1ad3      	subs	r3, r2, r3
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	429a      	cmp	r2, r3
 800df26:	d302      	bcc.n	800df2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d113      	bne.n	800df56 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df32:	f043 0220 	orr.w	r2, r3, #32
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2220      	movs	r2, #32
 800df3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2200      	movs	r2, #0
 800df46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2200      	movs	r2, #0
 800df4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800df52:	2301      	movs	r3, #1
 800df54:	e007      	b.n	800df66 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	699b      	ldr	r3, [r3, #24]
 800df5c:	f003 0302 	and.w	r3, r3, #2
 800df60:	2b02      	cmp	r3, #2
 800df62:	d1cb      	bne.n	800defc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800df64:	2300      	movs	r3, #0
}
 800df66:	4618      	mov	r0, r3
 800df68:	3710      	adds	r7, #16
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}

0800df6e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800df6e:	b580      	push	{r7, lr}
 800df70:	b084      	sub	sp, #16
 800df72:	af00      	add	r7, sp, #0
 800df74:	60f8      	str	r0, [r7, #12]
 800df76:	60b9      	str	r1, [r7, #8]
 800df78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800df7a:	e028      	b.n	800dfce <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	68b9      	ldr	r1, [r7, #8]
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	f000 f8ab 	bl	800e0dc <I2C_IsErrorOccurred>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d001      	beq.n	800df90 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800df8c:	2301      	movs	r3, #1
 800df8e:	e026      	b.n	800dfde <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df90:	f7f9 fa36 	bl	8007400 <HAL_GetTick>
 800df94:	4602      	mov	r2, r0
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	1ad3      	subs	r3, r2, r3
 800df9a:	68ba      	ldr	r2, [r7, #8]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d302      	bcc.n	800dfa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d113      	bne.n	800dfce <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfaa:	f043 0220 	orr.w	r2, r3, #32
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2220      	movs	r2, #32
 800dfb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e007      	b.n	800dfde <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	699b      	ldr	r3, [r3, #24]
 800dfd4:	f003 0320 	and.w	r3, r3, #32
 800dfd8:	2b20      	cmp	r3, #32
 800dfda:	d1cf      	bne.n	800df7c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800dfdc:	2300      	movs	r3, #0
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
	...

0800dfe8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	60b9      	str	r1, [r7, #8]
 800dff2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dff4:	e064      	b.n	800e0c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	68b9      	ldr	r1, [r7, #8]
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f000 f86e 	bl	800e0dc <I2C_IsErrorOccurred>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	d001      	beq.n	800e00a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e006:	2301      	movs	r3, #1
 800e008:	e062      	b.n	800e0d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	699b      	ldr	r3, [r3, #24]
 800e010:	f003 0320 	and.w	r3, r3, #32
 800e014:	2b20      	cmp	r3, #32
 800e016:	d138      	bne.n	800e08a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	699b      	ldr	r3, [r3, #24]
 800e01e:	f003 0304 	and.w	r3, r3, #4
 800e022:	2b04      	cmp	r3, #4
 800e024:	d105      	bne.n	800e032 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d001      	beq.n	800e032 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800e02e:	2300      	movs	r3, #0
 800e030:	e04e      	b.n	800e0d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	699b      	ldr	r3, [r3, #24]
 800e038:	f003 0310 	and.w	r3, r3, #16
 800e03c:	2b10      	cmp	r3, #16
 800e03e:	d107      	bne.n	800e050 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	2210      	movs	r2, #16
 800e046:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2204      	movs	r2, #4
 800e04c:	645a      	str	r2, [r3, #68]	; 0x44
 800e04e:	e002      	b.n	800e056 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2200      	movs	r2, #0
 800e054:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2220      	movs	r2, #32
 800e05c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	6859      	ldr	r1, [r3, #4]
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	4b1b      	ldr	r3, [pc, #108]	; (800e0d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800e06a:	400b      	ands	r3, r1
 800e06c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2220      	movs	r2, #32
 800e072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2200      	movs	r2, #0
 800e07a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e086:	2301      	movs	r3, #1
 800e088:	e022      	b.n	800e0d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e08a:	f7f9 f9b9 	bl	8007400 <HAL_GetTick>
 800e08e:	4602      	mov	r2, r0
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	68ba      	ldr	r2, [r7, #8]
 800e096:	429a      	cmp	r2, r3
 800e098:	d302      	bcc.n	800e0a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d10f      	bne.n	800e0c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0a4:	f043 0220 	orr.w	r2, r3, #32
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2220      	movs	r2, #32
 800e0b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	e007      	b.n	800e0d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	699b      	ldr	r3, [r3, #24]
 800e0c6:	f003 0304 	and.w	r3, r3, #4
 800e0ca:	2b04      	cmp	r3, #4
 800e0cc:	d193      	bne.n	800dff6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e0ce:	2300      	movs	r3, #0
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3710      	adds	r7, #16
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	fe00e800 	.word	0xfe00e800

0800e0dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b08a      	sub	sp, #40	; 0x28
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	699b      	ldr	r3, [r3, #24]
 800e0f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	f003 0310 	and.w	r3, r3, #16
 800e104:	2b00      	cmp	r3, #0
 800e106:	d075      	beq.n	800e1f4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2210      	movs	r2, #16
 800e10e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e110:	e056      	b.n	800e1c0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e118:	d052      	beq.n	800e1c0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e11a:	f7f9 f971 	bl	8007400 <HAL_GetTick>
 800e11e:	4602      	mov	r2, r0
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	1ad3      	subs	r3, r2, r3
 800e124:	68ba      	ldr	r2, [r7, #8]
 800e126:	429a      	cmp	r2, r3
 800e128:	d302      	bcc.n	800e130 <I2C_IsErrorOccurred+0x54>
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d147      	bne.n	800e1c0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e13a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e142:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	699b      	ldr	r3, [r3, #24]
 800e14a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e14e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e152:	d12e      	bne.n	800e1b2 <I2C_IsErrorOccurred+0xd6>
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e15a:	d02a      	beq.n	800e1b2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800e15c:	7cfb      	ldrb	r3, [r7, #19]
 800e15e:	2b20      	cmp	r3, #32
 800e160:	d027      	beq.n	800e1b2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	685a      	ldr	r2, [r3, #4]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e170:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e172:	f7f9 f945 	bl	8007400 <HAL_GetTick>
 800e176:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e178:	e01b      	b.n	800e1b2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e17a:	f7f9 f941 	bl	8007400 <HAL_GetTick>
 800e17e:	4602      	mov	r2, r0
 800e180:	69fb      	ldr	r3, [r7, #28]
 800e182:	1ad3      	subs	r3, r2, r3
 800e184:	2b19      	cmp	r3, #25
 800e186:	d914      	bls.n	800e1b2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e18c:	f043 0220 	orr.w	r2, r3, #32
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2220      	movs	r2, #32
 800e198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	699b      	ldr	r3, [r3, #24]
 800e1b8:	f003 0320 	and.w	r3, r3, #32
 800e1bc:	2b20      	cmp	r3, #32
 800e1be:	d1dc      	bne.n	800e17a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	699b      	ldr	r3, [r3, #24]
 800e1c6:	f003 0320 	and.w	r3, r3, #32
 800e1ca:	2b20      	cmp	r3, #32
 800e1cc:	d003      	beq.n	800e1d6 <I2C_IsErrorOccurred+0xfa>
 800e1ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d09d      	beq.n	800e112 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e1d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d103      	bne.n	800e1e6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2220      	movs	r2, #32
 800e1e4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e1e6:	6a3b      	ldr	r3, [r7, #32]
 800e1e8:	f043 0304 	orr.w	r3, r3, #4
 800e1ec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	699b      	ldr	r3, [r3, #24]
 800e1fa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00b      	beq.n	800e21e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e206:	6a3b      	ldr	r3, [r7, #32]
 800e208:	f043 0301 	orr.w	r3, r3, #1
 800e20c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e216:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e218:	2301      	movs	r3, #1
 800e21a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e224:	2b00      	cmp	r3, #0
 800e226:	d00b      	beq.n	800e240 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e228:	6a3b      	ldr	r3, [r7, #32]
 800e22a:	f043 0308 	orr.w	r3, r3, #8
 800e22e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e238:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e23a:	2301      	movs	r3, #1
 800e23c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e246:	2b00      	cmp	r3, #0
 800e248:	d00b      	beq.n	800e262 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e24a:	6a3b      	ldr	r3, [r7, #32]
 800e24c:	f043 0302 	orr.w	r3, r3, #2
 800e250:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e25a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e25c:	2301      	movs	r3, #1
 800e25e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800e262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e266:	2b00      	cmp	r3, #0
 800e268:	d01c      	beq.n	800e2a4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e26a:	68f8      	ldr	r0, [r7, #12]
 800e26c:	f7ff fdbd 	bl	800ddea <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	6859      	ldr	r1, [r3, #4]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	4b0d      	ldr	r3, [pc, #52]	; (800e2b0 <I2C_IsErrorOccurred+0x1d4>)
 800e27c:	400b      	ands	r3, r1
 800e27e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e284:	6a3b      	ldr	r3, [r7, #32]
 800e286:	431a      	orrs	r2, r3
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2220      	movs	r2, #32
 800e290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2200      	movs	r2, #0
 800e298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800e2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3728      	adds	r7, #40	; 0x28
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	fe00e800 	.word	0xfe00e800

0800e2b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b087      	sub	sp, #28
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	60f8      	str	r0, [r7, #12]
 800e2bc:	607b      	str	r3, [r7, #4]
 800e2be:	460b      	mov	r3, r1
 800e2c0:	817b      	strh	r3, [r7, #10]
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e2c6:	897b      	ldrh	r3, [r7, #10]
 800e2c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e2cc:	7a7b      	ldrb	r3, [r7, #9]
 800e2ce:	041b      	lsls	r3, r3, #16
 800e2d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e2d4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e2da:	6a3b      	ldr	r3, [r7, #32]
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2e2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	685a      	ldr	r2, [r3, #4]
 800e2ea:	6a3b      	ldr	r3, [r7, #32]
 800e2ec:	0d5b      	lsrs	r3, r3, #21
 800e2ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e2f2:	4b08      	ldr	r3, [pc, #32]	; (800e314 <I2C_TransferConfig+0x60>)
 800e2f4:	430b      	orrs	r3, r1
 800e2f6:	43db      	mvns	r3, r3
 800e2f8:	ea02 0103 	and.w	r1, r2, r3
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	697a      	ldr	r2, [r7, #20]
 800e302:	430a      	orrs	r2, r1
 800e304:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e306:	bf00      	nop
 800e308:	371c      	adds	r7, #28
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	03ff63ff 	.word	0x03ff63ff

0800e318 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	460b      	mov	r3, r1
 800e322:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800e324:	2300      	movs	r3, #0
 800e326:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800e328:	887b      	ldrh	r3, [r7, #2]
 800e32a:	f003 0301 	and.w	r3, r3, #1
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00f      	beq.n	800e352 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800e338:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e340:	b2db      	uxtb	r3, r3
 800e342:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e346:	2b28      	cmp	r3, #40	; 0x28
 800e348:	d003      	beq.n	800e352 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800e350:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800e352:	887b      	ldrh	r3, [r7, #2]
 800e354:	f003 0302 	and.w	r3, r3, #2
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00f      	beq.n	800e37c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800e362:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e370:	2b28      	cmp	r3, #40	; 0x28
 800e372:	d003      	beq.n	800e37c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800e37a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800e37c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e380:	2b00      	cmp	r3, #0
 800e382:	da03      	bge.n	800e38c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800e38a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800e38c:	887b      	ldrh	r3, [r7, #2]
 800e38e:	2b10      	cmp	r3, #16
 800e390:	d103      	bne.n	800e39a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800e398:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e39a:	887b      	ldrh	r3, [r7, #2]
 800e39c:	2b20      	cmp	r3, #32
 800e39e:	d103      	bne.n	800e3a8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f043 0320 	orr.w	r3, r3, #32
 800e3a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800e3a8:	887b      	ldrh	r3, [r7, #2]
 800e3aa:	2b40      	cmp	r3, #64	; 0x40
 800e3ac:	d103      	bne.n	800e3b6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3b4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	6819      	ldr	r1, [r3, #0]
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	43da      	mvns	r2, r3
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	400a      	ands	r2, r1
 800e3c6:	601a      	str	r2, [r3, #0]
}
 800e3c8:	bf00      	nop
 800e3ca:	3714      	adds	r7, #20
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	2b20      	cmp	r3, #32
 800e3e8:	d138      	bne.n	800e45c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d101      	bne.n	800e3f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e3f4:	2302      	movs	r3, #2
 800e3f6:	e032      	b.n	800e45e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2224      	movs	r2, #36	; 0x24
 800e404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f022 0201 	bic.w	r2, r2, #1
 800e416:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e426:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	6819      	ldr	r1, [r3, #0]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	683a      	ldr	r2, [r7, #0]
 800e434:	430a      	orrs	r2, r1
 800e436:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f042 0201 	orr.w	r2, r2, #1
 800e446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2220      	movs	r2, #32
 800e44c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2200      	movs	r2, #0
 800e454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e458:	2300      	movs	r3, #0
 800e45a:	e000      	b.n	800e45e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e45c:	2302      	movs	r3, #2
  }
}
 800e45e:	4618      	mov	r0, r3
 800e460:	370c      	adds	r7, #12
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr

0800e46a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e46a:	b480      	push	{r7}
 800e46c:	b085      	sub	sp, #20
 800e46e:	af00      	add	r7, sp, #0
 800e470:	6078      	str	r0, [r7, #4]
 800e472:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	2b20      	cmp	r3, #32
 800e47e:	d139      	bne.n	800e4f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e486:	2b01      	cmp	r3, #1
 800e488:	d101      	bne.n	800e48e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e48a:	2302      	movs	r3, #2
 800e48c:	e033      	b.n	800e4f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2201      	movs	r2, #1
 800e492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2224      	movs	r2, #36	; 0x24
 800e49a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f022 0201 	bic.w	r2, r2, #1
 800e4ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e4bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	021b      	lsls	r3, r3, #8
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f042 0201 	orr.w	r2, r2, #1
 800e4de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2220      	movs	r2, #32
 800e4e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	e000      	b.n	800e4f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e4f4:	2302      	movs	r3, #2
  }
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3714      	adds	r7, #20
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr
	...

0800e504 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800e50c:	4b19      	ldr	r3, [pc, #100]	; (800e574 <HAL_PWREx_ConfigSupply+0x70>)
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	f003 0304 	and.w	r3, r3, #4
 800e514:	2b04      	cmp	r3, #4
 800e516:	d00a      	beq.n	800e52e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e518:	4b16      	ldr	r3, [pc, #88]	; (800e574 <HAL_PWREx_ConfigSupply+0x70>)
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	f003 0307 	and.w	r3, r3, #7
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	429a      	cmp	r2, r3
 800e524:	d001      	beq.n	800e52a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e526:	2301      	movs	r3, #1
 800e528:	e01f      	b.n	800e56a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800e52a:	2300      	movs	r3, #0
 800e52c:	e01d      	b.n	800e56a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e52e:	4b11      	ldr	r3, [pc, #68]	; (800e574 <HAL_PWREx_ConfigSupply+0x70>)
 800e530:	68db      	ldr	r3, [r3, #12]
 800e532:	f023 0207 	bic.w	r2, r3, #7
 800e536:	490f      	ldr	r1, [pc, #60]	; (800e574 <HAL_PWREx_ConfigSupply+0x70>)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	4313      	orrs	r3, r2
 800e53c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800e53e:	f7f8 ff5f 	bl	8007400 <HAL_GetTick>
 800e542:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e544:	e009      	b.n	800e55a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e546:	f7f8 ff5b 	bl	8007400 <HAL_GetTick>
 800e54a:	4602      	mov	r2, r0
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	1ad3      	subs	r3, r2, r3
 800e550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e554:	d901      	bls.n	800e55a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800e556:	2301      	movs	r3, #1
 800e558:	e007      	b.n	800e56a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e55a:	4b06      	ldr	r3, [pc, #24]	; (800e574 <HAL_PWREx_ConfigSupply+0x70>)
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e566:	d1ee      	bne.n	800e546 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800e568:	2300      	movs	r3, #0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	58024800 	.word	0x58024800

0800e578 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b08c      	sub	sp, #48	; 0x30
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d101      	bne.n	800e58a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e586:	2301      	movs	r3, #1
 800e588:	e39d      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f003 0301 	and.w	r3, r3, #1
 800e592:	2b00      	cmp	r3, #0
 800e594:	f000 8087 	beq.w	800e6a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e598:	4b88      	ldr	r3, [pc, #544]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e59a:	691b      	ldr	r3, [r3, #16]
 800e59c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e5a2:	4b86      	ldr	r3, [pc, #536]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5a6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5aa:	2b10      	cmp	r3, #16
 800e5ac:	d007      	beq.n	800e5be <HAL_RCC_OscConfig+0x46>
 800e5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b0:	2b18      	cmp	r3, #24
 800e5b2:	d110      	bne.n	800e5d6 <HAL_RCC_OscConfig+0x5e>
 800e5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b6:	f003 0303 	and.w	r3, r3, #3
 800e5ba:	2b02      	cmp	r3, #2
 800e5bc:	d10b      	bne.n	800e5d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e5be:	4b7f      	ldr	r3, [pc, #508]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d06c      	beq.n	800e6a4 <HAL_RCC_OscConfig+0x12c>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d168      	bne.n	800e6a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	e377      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5de:	d106      	bne.n	800e5ee <HAL_RCC_OscConfig+0x76>
 800e5e0:	4b76      	ldr	r3, [pc, #472]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4a75      	ldr	r2, [pc, #468]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e5e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e5ea:	6013      	str	r3, [r2, #0]
 800e5ec:	e02e      	b.n	800e64c <HAL_RCC_OscConfig+0xd4>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d10c      	bne.n	800e610 <HAL_RCC_OscConfig+0x98>
 800e5f6:	4b71      	ldr	r3, [pc, #452]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4a70      	ldr	r2, [pc, #448]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e5fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e600:	6013      	str	r3, [r2, #0]
 800e602:	4b6e      	ldr	r3, [pc, #440]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	4a6d      	ldr	r2, [pc, #436]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e60c:	6013      	str	r3, [r2, #0]
 800e60e:	e01d      	b.n	800e64c <HAL_RCC_OscConfig+0xd4>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e618:	d10c      	bne.n	800e634 <HAL_RCC_OscConfig+0xbc>
 800e61a:	4b68      	ldr	r3, [pc, #416]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a67      	ldr	r2, [pc, #412]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e624:	6013      	str	r3, [r2, #0]
 800e626:	4b65      	ldr	r3, [pc, #404]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4a64      	ldr	r2, [pc, #400]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e62c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e630:	6013      	str	r3, [r2, #0]
 800e632:	e00b      	b.n	800e64c <HAL_RCC_OscConfig+0xd4>
 800e634:	4b61      	ldr	r3, [pc, #388]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4a60      	ldr	r2, [pc, #384]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e63a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e63e:	6013      	str	r3, [r2, #0]
 800e640:	4b5e      	ldr	r3, [pc, #376]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a5d      	ldr	r2, [pc, #372]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e64a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d013      	beq.n	800e67c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e654:	f7f8 fed4 	bl	8007400 <HAL_GetTick>
 800e658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e65a:	e008      	b.n	800e66e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e65c:	f7f8 fed0 	bl	8007400 <HAL_GetTick>
 800e660:	4602      	mov	r2, r0
 800e662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e664:	1ad3      	subs	r3, r2, r3
 800e666:	2b64      	cmp	r3, #100	; 0x64
 800e668:	d901      	bls.n	800e66e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800e66a:	2303      	movs	r3, #3
 800e66c:	e32b      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e66e:	4b53      	ldr	r3, [pc, #332]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e676:	2b00      	cmp	r3, #0
 800e678:	d0f0      	beq.n	800e65c <HAL_RCC_OscConfig+0xe4>
 800e67a:	e014      	b.n	800e6a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e67c:	f7f8 fec0 	bl	8007400 <HAL_GetTick>
 800e680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e682:	e008      	b.n	800e696 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e684:	f7f8 febc 	bl	8007400 <HAL_GetTick>
 800e688:	4602      	mov	r2, r0
 800e68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68c:	1ad3      	subs	r3, r2, r3
 800e68e:	2b64      	cmp	r3, #100	; 0x64
 800e690:	d901      	bls.n	800e696 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800e692:	2303      	movs	r3, #3
 800e694:	e317      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e696:	4b49      	ldr	r3, [pc, #292]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1f0      	bne.n	800e684 <HAL_RCC_OscConfig+0x10c>
 800e6a2:	e000      	b.n	800e6a6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e6a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f003 0302 	and.w	r3, r3, #2
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	f000 808c 	beq.w	800e7cc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e6b4:	4b41      	ldr	r3, [pc, #260]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e6b6:	691b      	ldr	r3, [r3, #16]
 800e6b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e6bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e6be:	4b3f      	ldr	r3, [pc, #252]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6c2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e6c4:	6a3b      	ldr	r3, [r7, #32]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d007      	beq.n	800e6da <HAL_RCC_OscConfig+0x162>
 800e6ca:	6a3b      	ldr	r3, [r7, #32]
 800e6cc:	2b18      	cmp	r3, #24
 800e6ce:	d137      	bne.n	800e740 <HAL_RCC_OscConfig+0x1c8>
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	f003 0303 	and.w	r3, r3, #3
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d132      	bne.n	800e740 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e6da:	4b38      	ldr	r3, [pc, #224]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f003 0304 	and.w	r3, r3, #4
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d005      	beq.n	800e6f2 <HAL_RCC_OscConfig+0x17a>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	68db      	ldr	r3, [r3, #12]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d101      	bne.n	800e6f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e2e9      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e6f2:	4b32      	ldr	r3, [pc, #200]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f023 0219 	bic.w	r2, r3, #25
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	492f      	ldr	r1, [pc, #188]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e700:	4313      	orrs	r3, r2
 800e702:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e704:	f7f8 fe7c 	bl	8007400 <HAL_GetTick>
 800e708:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e70a:	e008      	b.n	800e71e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e70c:	f7f8 fe78 	bl	8007400 <HAL_GetTick>
 800e710:	4602      	mov	r2, r0
 800e712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e714:	1ad3      	subs	r3, r2, r3
 800e716:	2b02      	cmp	r3, #2
 800e718:	d901      	bls.n	800e71e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800e71a:	2303      	movs	r3, #3
 800e71c:	e2d3      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e71e:	4b27      	ldr	r3, [pc, #156]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f003 0304 	and.w	r3, r3, #4
 800e726:	2b00      	cmp	r3, #0
 800e728:	d0f0      	beq.n	800e70c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e72a:	4b24      	ldr	r3, [pc, #144]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	691b      	ldr	r3, [r3, #16]
 800e736:	061b      	lsls	r3, r3, #24
 800e738:	4920      	ldr	r1, [pc, #128]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e73a:	4313      	orrs	r3, r2
 800e73c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e73e:	e045      	b.n	800e7cc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d026      	beq.n	800e796 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e748:	4b1c      	ldr	r3, [pc, #112]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f023 0219 	bic.w	r2, r3, #25
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	68db      	ldr	r3, [r3, #12]
 800e754:	4919      	ldr	r1, [pc, #100]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e756:	4313      	orrs	r3, r2
 800e758:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e75a:	f7f8 fe51 	bl	8007400 <HAL_GetTick>
 800e75e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e760:	e008      	b.n	800e774 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e762:	f7f8 fe4d 	bl	8007400 <HAL_GetTick>
 800e766:	4602      	mov	r2, r0
 800e768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76a:	1ad3      	subs	r3, r2, r3
 800e76c:	2b02      	cmp	r3, #2
 800e76e:	d901      	bls.n	800e774 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800e770:	2303      	movs	r3, #3
 800e772:	e2a8      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e774:	4b11      	ldr	r3, [pc, #68]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f003 0304 	and.w	r3, r3, #4
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d0f0      	beq.n	800e762 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e780:	4b0e      	ldr	r3, [pc, #56]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	691b      	ldr	r3, [r3, #16]
 800e78c:	061b      	lsls	r3, r3, #24
 800e78e:	490b      	ldr	r1, [pc, #44]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e790:	4313      	orrs	r3, r2
 800e792:	604b      	str	r3, [r1, #4]
 800e794:	e01a      	b.n	800e7cc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e796:	4b09      	ldr	r3, [pc, #36]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	4a08      	ldr	r2, [pc, #32]	; (800e7bc <HAL_RCC_OscConfig+0x244>)
 800e79c:	f023 0301 	bic.w	r3, r3, #1
 800e7a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7a2:	f7f8 fe2d 	bl	8007400 <HAL_GetTick>
 800e7a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e7a8:	e00a      	b.n	800e7c0 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e7aa:	f7f8 fe29 	bl	8007400 <HAL_GetTick>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b2:	1ad3      	subs	r3, r2, r3
 800e7b4:	2b02      	cmp	r3, #2
 800e7b6:	d903      	bls.n	800e7c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800e7b8:	2303      	movs	r3, #3
 800e7ba:	e284      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
 800e7bc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e7c0:	4b96      	ldr	r3, [pc, #600]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f003 0304 	and.w	r3, r3, #4
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d1ee      	bne.n	800e7aa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f003 0310 	and.w	r3, r3, #16
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d06a      	beq.n	800e8ae <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e7d8:	4b90      	ldr	r3, [pc, #576]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e7da:	691b      	ldr	r3, [r3, #16]
 800e7dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e7e0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e7e2:	4b8e      	ldr	r3, [pc, #568]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7e6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	2b08      	cmp	r3, #8
 800e7ec:	d007      	beq.n	800e7fe <HAL_RCC_OscConfig+0x286>
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	2b18      	cmp	r3, #24
 800e7f2:	d11b      	bne.n	800e82c <HAL_RCC_OscConfig+0x2b4>
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	f003 0303 	and.w	r3, r3, #3
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d116      	bne.n	800e82c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e7fe:	4b87      	ldr	r3, [pc, #540]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e806:	2b00      	cmp	r3, #0
 800e808:	d005      	beq.n	800e816 <HAL_RCC_OscConfig+0x29e>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	69db      	ldr	r3, [r3, #28]
 800e80e:	2b80      	cmp	r3, #128	; 0x80
 800e810:	d001      	beq.n	800e816 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800e812:	2301      	movs	r3, #1
 800e814:	e257      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e816:	4b81      	ldr	r3, [pc, #516]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e818:	68db      	ldr	r3, [r3, #12]
 800e81a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6a1b      	ldr	r3, [r3, #32]
 800e822:	061b      	lsls	r3, r3, #24
 800e824:	497d      	ldr	r1, [pc, #500]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e826:	4313      	orrs	r3, r2
 800e828:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e82a:	e040      	b.n	800e8ae <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	69db      	ldr	r3, [r3, #28]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d023      	beq.n	800e87c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e834:	4b79      	ldr	r3, [pc, #484]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4a78      	ldr	r2, [pc, #480]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e83a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e83e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e840:	f7f8 fdde 	bl	8007400 <HAL_GetTick>
 800e844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e846:	e008      	b.n	800e85a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800e848:	f7f8 fdda 	bl	8007400 <HAL_GetTick>
 800e84c:	4602      	mov	r2, r0
 800e84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	2b02      	cmp	r3, #2
 800e854:	d901      	bls.n	800e85a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800e856:	2303      	movs	r3, #3
 800e858:	e235      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e85a:	4b70      	ldr	r3, [pc, #448]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e862:	2b00      	cmp	r3, #0
 800e864:	d0f0      	beq.n	800e848 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e866:	4b6d      	ldr	r3, [pc, #436]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6a1b      	ldr	r3, [r3, #32]
 800e872:	061b      	lsls	r3, r3, #24
 800e874:	4969      	ldr	r1, [pc, #420]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e876:	4313      	orrs	r3, r2
 800e878:	60cb      	str	r3, [r1, #12]
 800e87a:	e018      	b.n	800e8ae <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e87c:	4b67      	ldr	r3, [pc, #412]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a66      	ldr	r2, [pc, #408]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e888:	f7f8 fdba 	bl	8007400 <HAL_GetTick>
 800e88c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e88e:	e008      	b.n	800e8a2 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800e890:	f7f8 fdb6 	bl	8007400 <HAL_GetTick>
 800e894:	4602      	mov	r2, r0
 800e896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e898:	1ad3      	subs	r3, r2, r3
 800e89a:	2b02      	cmp	r3, #2
 800e89c:	d901      	bls.n	800e8a2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800e89e:	2303      	movs	r3, #3
 800e8a0:	e211      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e8a2:	4b5e      	ldr	r3, [pc, #376]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d1f0      	bne.n	800e890 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f003 0308 	and.w	r3, r3, #8
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d036      	beq.n	800e928 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	695b      	ldr	r3, [r3, #20]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d019      	beq.n	800e8f6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e8c2:	4b56      	ldr	r3, [pc, #344]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e8c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8c6:	4a55      	ldr	r2, [pc, #340]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e8c8:	f043 0301 	orr.w	r3, r3, #1
 800e8cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e8ce:	f7f8 fd97 	bl	8007400 <HAL_GetTick>
 800e8d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e8d4:	e008      	b.n	800e8e8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e8d6:	f7f8 fd93 	bl	8007400 <HAL_GetTick>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8de:	1ad3      	subs	r3, r2, r3
 800e8e0:	2b02      	cmp	r3, #2
 800e8e2:	d901      	bls.n	800e8e8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800e8e4:	2303      	movs	r3, #3
 800e8e6:	e1ee      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e8e8:	4b4c      	ldr	r3, [pc, #304]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e8ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8ec:	f003 0302 	and.w	r3, r3, #2
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d0f0      	beq.n	800e8d6 <HAL_RCC_OscConfig+0x35e>
 800e8f4:	e018      	b.n	800e928 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e8f6:	4b49      	ldr	r3, [pc, #292]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e8f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8fa:	4a48      	ldr	r2, [pc, #288]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e8fc:	f023 0301 	bic.w	r3, r3, #1
 800e900:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e902:	f7f8 fd7d 	bl	8007400 <HAL_GetTick>
 800e906:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e908:	e008      	b.n	800e91c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e90a:	f7f8 fd79 	bl	8007400 <HAL_GetTick>
 800e90e:	4602      	mov	r2, r0
 800e910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e912:	1ad3      	subs	r3, r2, r3
 800e914:	2b02      	cmp	r3, #2
 800e916:	d901      	bls.n	800e91c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800e918:	2303      	movs	r3, #3
 800e91a:	e1d4      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e91c:	4b3f      	ldr	r3, [pc, #252]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e91e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e920:	f003 0302 	and.w	r3, r3, #2
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1f0      	bne.n	800e90a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	f003 0320 	and.w	r3, r3, #32
 800e930:	2b00      	cmp	r3, #0
 800e932:	d036      	beq.n	800e9a2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	699b      	ldr	r3, [r3, #24]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d019      	beq.n	800e970 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e93c:	4b37      	ldr	r3, [pc, #220]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4a36      	ldr	r2, [pc, #216]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e942:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e946:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e948:	f7f8 fd5a 	bl	8007400 <HAL_GetTick>
 800e94c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e94e:	e008      	b.n	800e962 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800e950:	f7f8 fd56 	bl	8007400 <HAL_GetTick>
 800e954:	4602      	mov	r2, r0
 800e956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e958:	1ad3      	subs	r3, r2, r3
 800e95a:	2b02      	cmp	r3, #2
 800e95c:	d901      	bls.n	800e962 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800e95e:	2303      	movs	r3, #3
 800e960:	e1b1      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e962:	4b2e      	ldr	r3, [pc, #184]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d0f0      	beq.n	800e950 <HAL_RCC_OscConfig+0x3d8>
 800e96e:	e018      	b.n	800e9a2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e970:	4b2a      	ldr	r3, [pc, #168]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4a29      	ldr	r2, [pc, #164]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e97a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e97c:	f7f8 fd40 	bl	8007400 <HAL_GetTick>
 800e980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e982:	e008      	b.n	800e996 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800e984:	f7f8 fd3c 	bl	8007400 <HAL_GetTick>
 800e988:	4602      	mov	r2, r0
 800e98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	2b02      	cmp	r3, #2
 800e990:	d901      	bls.n	800e996 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800e992:	2303      	movs	r3, #3
 800e994:	e197      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e996:	4b21      	ldr	r3, [pc, #132]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d1f0      	bne.n	800e984 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f003 0304 	and.w	r3, r3, #4
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f000 8086 	beq.w	800eabc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e9b0:	4b1b      	ldr	r3, [pc, #108]	; (800ea20 <HAL_RCC_OscConfig+0x4a8>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4a1a      	ldr	r2, [pc, #104]	; (800ea20 <HAL_RCC_OscConfig+0x4a8>)
 800e9b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e9ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e9bc:	f7f8 fd20 	bl	8007400 <HAL_GetTick>
 800e9c0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e9c2:	e008      	b.n	800e9d6 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e9c4:	f7f8 fd1c 	bl	8007400 <HAL_GetTick>
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	2b64      	cmp	r3, #100	; 0x64
 800e9d0:	d901      	bls.n	800e9d6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800e9d2:	2303      	movs	r3, #3
 800e9d4:	e177      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e9d6:	4b12      	ldr	r3, [pc, #72]	; (800ea20 <HAL_RCC_OscConfig+0x4a8>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d0f0      	beq.n	800e9c4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d106      	bne.n	800e9f8 <HAL_RCC_OscConfig+0x480>
 800e9ea:	4b0c      	ldr	r3, [pc, #48]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e9ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ee:	4a0b      	ldr	r2, [pc, #44]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800e9f0:	f043 0301 	orr.w	r3, r3, #1
 800e9f4:	6713      	str	r3, [r2, #112]	; 0x70
 800e9f6:	e032      	b.n	800ea5e <HAL_RCC_OscConfig+0x4e6>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d111      	bne.n	800ea24 <HAL_RCC_OscConfig+0x4ac>
 800ea00:	4b06      	ldr	r3, [pc, #24]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800ea02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea04:	4a05      	ldr	r2, [pc, #20]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800ea06:	f023 0301 	bic.w	r3, r3, #1
 800ea0a:	6713      	str	r3, [r2, #112]	; 0x70
 800ea0c:	4b03      	ldr	r3, [pc, #12]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800ea0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea10:	4a02      	ldr	r2, [pc, #8]	; (800ea1c <HAL_RCC_OscConfig+0x4a4>)
 800ea12:	f023 0304 	bic.w	r3, r3, #4
 800ea16:	6713      	str	r3, [r2, #112]	; 0x70
 800ea18:	e021      	b.n	800ea5e <HAL_RCC_OscConfig+0x4e6>
 800ea1a:	bf00      	nop
 800ea1c:	58024400 	.word	0x58024400
 800ea20:	58024800 	.word	0x58024800
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	689b      	ldr	r3, [r3, #8]
 800ea28:	2b05      	cmp	r3, #5
 800ea2a:	d10c      	bne.n	800ea46 <HAL_RCC_OscConfig+0x4ce>
 800ea2c:	4b83      	ldr	r3, [pc, #524]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ea2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea30:	4a82      	ldr	r2, [pc, #520]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ea32:	f043 0304 	orr.w	r3, r3, #4
 800ea36:	6713      	str	r3, [r2, #112]	; 0x70
 800ea38:	4b80      	ldr	r3, [pc, #512]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ea3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea3c:	4a7f      	ldr	r2, [pc, #508]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ea3e:	f043 0301 	orr.w	r3, r3, #1
 800ea42:	6713      	str	r3, [r2, #112]	; 0x70
 800ea44:	e00b      	b.n	800ea5e <HAL_RCC_OscConfig+0x4e6>
 800ea46:	4b7d      	ldr	r3, [pc, #500]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ea48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea4a:	4a7c      	ldr	r2, [pc, #496]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ea4c:	f023 0301 	bic.w	r3, r3, #1
 800ea50:	6713      	str	r3, [r2, #112]	; 0x70
 800ea52:	4b7a      	ldr	r3, [pc, #488]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ea54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea56:	4a79      	ldr	r2, [pc, #484]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ea58:	f023 0304 	bic.w	r3, r3, #4
 800ea5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d015      	beq.n	800ea92 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea66:	f7f8 fccb 	bl	8007400 <HAL_GetTick>
 800ea6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ea6c:	e00a      	b.n	800ea84 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ea6e:	f7f8 fcc7 	bl	8007400 <HAL_GetTick>
 800ea72:	4602      	mov	r2, r0
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea76:	1ad3      	subs	r3, r2, r3
 800ea78:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d901      	bls.n	800ea84 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ea80:	2303      	movs	r3, #3
 800ea82:	e120      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ea84:	4b6d      	ldr	r3, [pc, #436]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ea86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea88:	f003 0302 	and.w	r3, r3, #2
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d0ee      	beq.n	800ea6e <HAL_RCC_OscConfig+0x4f6>
 800ea90:	e014      	b.n	800eabc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea92:	f7f8 fcb5 	bl	8007400 <HAL_GetTick>
 800ea96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ea98:	e00a      	b.n	800eab0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ea9a:	f7f8 fcb1 	bl	8007400 <HAL_GetTick>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d901      	bls.n	800eab0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800eaac:	2303      	movs	r3, #3
 800eaae:	e10a      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800eab0:	4b62      	ldr	r3, [pc, #392]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eab4:	f003 0302 	and.w	r3, r3, #2
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d1ee      	bne.n	800ea9a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f000 80ff 	beq.w	800ecc4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800eac6:	4b5d      	ldr	r3, [pc, #372]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eace:	2b18      	cmp	r3, #24
 800ead0:	f000 80ba 	beq.w	800ec48 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead8:	2b02      	cmp	r3, #2
 800eada:	f040 8095 	bne.w	800ec08 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eade:	4b57      	ldr	r3, [pc, #348]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	4a56      	ldr	r2, [pc, #344]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eae4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800eae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eaea:	f7f8 fc89 	bl	8007400 <HAL_GetTick>
 800eaee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eaf0:	e008      	b.n	800eb04 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eaf2:	f7f8 fc85 	bl	8007400 <HAL_GetTick>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafa:	1ad3      	subs	r3, r2, r3
 800eafc:	2b02      	cmp	r3, #2
 800eafe:	d901      	bls.n	800eb04 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800eb00:	2303      	movs	r3, #3
 800eb02:	e0e0      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eb04:	4b4d      	ldr	r3, [pc, #308]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d1f0      	bne.n	800eaf2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800eb10:	4b4a      	ldr	r3, [pc, #296]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eb12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb14:	4b4a      	ldr	r3, [pc, #296]	; (800ec40 <HAL_RCC_OscConfig+0x6c8>)
 800eb16:	4013      	ands	r3, r2
 800eb18:	687a      	ldr	r2, [r7, #4]
 800eb1a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800eb1c:	687a      	ldr	r2, [r7, #4]
 800eb1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800eb20:	0112      	lsls	r2, r2, #4
 800eb22:	430a      	orrs	r2, r1
 800eb24:	4945      	ldr	r1, [pc, #276]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eb26:	4313      	orrs	r3, r2
 800eb28:	628b      	str	r3, [r1, #40]	; 0x28
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb2e:	3b01      	subs	r3, #1
 800eb30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	025b      	lsls	r3, r3, #9
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	431a      	orrs	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb44:	3b01      	subs	r3, #1
 800eb46:	041b      	lsls	r3, r3, #16
 800eb48:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800eb4c:	431a      	orrs	r2, r3
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb52:	3b01      	subs	r3, #1
 800eb54:	061b      	lsls	r3, r3, #24
 800eb56:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800eb5a:	4938      	ldr	r1, [pc, #224]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800eb60:	4b36      	ldr	r3, [pc, #216]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb64:	4a35      	ldr	r2, [pc, #212]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eb66:	f023 0301 	bic.w	r3, r3, #1
 800eb6a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800eb6c:	4b33      	ldr	r3, [pc, #204]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eb6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb70:	4b34      	ldr	r3, [pc, #208]	; (800ec44 <HAL_RCC_OscConfig+0x6cc>)
 800eb72:	4013      	ands	r3, r2
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800eb78:	00d2      	lsls	r2, r2, #3
 800eb7a:	4930      	ldr	r1, [pc, #192]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800eb80:	4b2e      	ldr	r3, [pc, #184]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb84:	f023 020c 	bic.w	r2, r3, #12
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb8c:	492b      	ldr	r1, [pc, #172]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800eb92:	4b2a      	ldr	r3, [pc, #168]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb96:	f023 0202 	bic.w	r2, r3, #2
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb9e:	4927      	ldr	r1, [pc, #156]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eba0:	4313      	orrs	r3, r2
 800eba2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800eba4:	4b25      	ldr	r3, [pc, #148]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800eba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eba8:	4a24      	ldr	r2, [pc, #144]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ebaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ebae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebb0:	4b22      	ldr	r3, [pc, #136]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ebb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb4:	4a21      	ldr	r2, [pc, #132]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ebb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ebba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ebbc:	4b1f      	ldr	r3, [pc, #124]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ebbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc0:	4a1e      	ldr	r2, [pc, #120]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ebc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ebc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800ebc8:	4b1c      	ldr	r3, [pc, #112]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ebca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebcc:	4a1b      	ldr	r2, [pc, #108]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ebce:	f043 0301 	orr.w	r3, r3, #1
 800ebd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ebd4:	4b19      	ldr	r3, [pc, #100]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	4a18      	ldr	r2, [pc, #96]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ebda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ebde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ebe0:	f7f8 fc0e 	bl	8007400 <HAL_GetTick>
 800ebe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ebe6:	e008      	b.n	800ebfa <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ebe8:	f7f8 fc0a 	bl	8007400 <HAL_GetTick>
 800ebec:	4602      	mov	r2, r0
 800ebee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf0:	1ad3      	subs	r3, r2, r3
 800ebf2:	2b02      	cmp	r3, #2
 800ebf4:	d901      	bls.n	800ebfa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ebf6:	2303      	movs	r3, #3
 800ebf8:	e065      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ebfa:	4b10      	ldr	r3, [pc, #64]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d0f0      	beq.n	800ebe8 <HAL_RCC_OscConfig+0x670>
 800ec06:	e05d      	b.n	800ecc4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ec08:	4b0c      	ldr	r3, [pc, #48]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a0b      	ldr	r2, [pc, #44]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ec0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ec12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec14:	f7f8 fbf4 	bl	8007400 <HAL_GetTick>
 800ec18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ec1a:	e008      	b.n	800ec2e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ec1c:	f7f8 fbf0 	bl	8007400 <HAL_GetTick>
 800ec20:	4602      	mov	r2, r0
 800ec22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec24:	1ad3      	subs	r3, r2, r3
 800ec26:	2b02      	cmp	r3, #2
 800ec28:	d901      	bls.n	800ec2e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ec2a:	2303      	movs	r3, #3
 800ec2c:	e04b      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ec2e:	4b03      	ldr	r3, [pc, #12]	; (800ec3c <HAL_RCC_OscConfig+0x6c4>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d1f0      	bne.n	800ec1c <HAL_RCC_OscConfig+0x6a4>
 800ec3a:	e043      	b.n	800ecc4 <HAL_RCC_OscConfig+0x74c>
 800ec3c:	58024400 	.word	0x58024400
 800ec40:	fffffc0c 	.word	0xfffffc0c
 800ec44:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ec48:	4b21      	ldr	r3, [pc, #132]	; (800ecd0 <HAL_RCC_OscConfig+0x758>)
 800ec4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ec4e:	4b20      	ldr	r3, [pc, #128]	; (800ecd0 <HAL_RCC_OscConfig+0x758>)
 800ec50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec52:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d031      	beq.n	800ecc0 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	f003 0203 	and.w	r2, r3, #3
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d12a      	bne.n	800ecc0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	091b      	lsrs	r3, r3, #4
 800ec6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d122      	bne.n	800ecc0 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec84:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d11a      	bne.n	800ecc0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	0a5b      	lsrs	r3, r3, #9
 800ec8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec96:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d111      	bne.n	800ecc0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	0c1b      	lsrs	r3, r3, #16
 800eca0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eca8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d108      	bne.n	800ecc0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	0e1b      	lsrs	r3, r3, #24
 800ecb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d001      	beq.n	800ecc4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e000      	b.n	800ecc6 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800ecc4:	2300      	movs	r3, #0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3730      	adds	r7, #48	; 0x30
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	58024400 	.word	0x58024400

0800ecd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b086      	sub	sp, #24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d101      	bne.n	800ece8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ece4:	2301      	movs	r3, #1
 800ece6:	e19c      	b.n	800f022 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ece8:	4b8a      	ldr	r3, [pc, #552]	; (800ef14 <HAL_RCC_ClockConfig+0x240>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f003 030f 	and.w	r3, r3, #15
 800ecf0:	683a      	ldr	r2, [r7, #0]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d910      	bls.n	800ed18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ecf6:	4b87      	ldr	r3, [pc, #540]	; (800ef14 <HAL_RCC_ClockConfig+0x240>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f023 020f 	bic.w	r2, r3, #15
 800ecfe:	4985      	ldr	r1, [pc, #532]	; (800ef14 <HAL_RCC_ClockConfig+0x240>)
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	4313      	orrs	r3, r2
 800ed04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed06:	4b83      	ldr	r3, [pc, #524]	; (800ef14 <HAL_RCC_ClockConfig+0x240>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f003 030f 	and.w	r3, r3, #15
 800ed0e:	683a      	ldr	r2, [r7, #0]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d001      	beq.n	800ed18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ed14:	2301      	movs	r3, #1
 800ed16:	e184      	b.n	800f022 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f003 0304 	and.w	r3, r3, #4
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d010      	beq.n	800ed46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	691a      	ldr	r2, [r3, #16]
 800ed28:	4b7b      	ldr	r3, [pc, #492]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ed2a:	699b      	ldr	r3, [r3, #24]
 800ed2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d908      	bls.n	800ed46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ed34:	4b78      	ldr	r3, [pc, #480]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ed36:	699b      	ldr	r3, [r3, #24]
 800ed38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	691b      	ldr	r3, [r3, #16]
 800ed40:	4975      	ldr	r1, [pc, #468]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ed42:	4313      	orrs	r3, r2
 800ed44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f003 0308 	and.w	r3, r3, #8
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d010      	beq.n	800ed74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	695a      	ldr	r2, [r3, #20]
 800ed56:	4b70      	ldr	r3, [pc, #448]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ed58:	69db      	ldr	r3, [r3, #28]
 800ed5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d908      	bls.n	800ed74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ed62:	4b6d      	ldr	r3, [pc, #436]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ed64:	69db      	ldr	r3, [r3, #28]
 800ed66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	695b      	ldr	r3, [r3, #20]
 800ed6e:	496a      	ldr	r1, [pc, #424]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ed70:	4313      	orrs	r3, r2
 800ed72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f003 0310 	and.w	r3, r3, #16
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d010      	beq.n	800eda2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	699a      	ldr	r2, [r3, #24]
 800ed84:	4b64      	ldr	r3, [pc, #400]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ed86:	69db      	ldr	r3, [r3, #28]
 800ed88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d908      	bls.n	800eda2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ed90:	4b61      	ldr	r3, [pc, #388]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ed92:	69db      	ldr	r3, [r3, #28]
 800ed94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	699b      	ldr	r3, [r3, #24]
 800ed9c:	495e      	ldr	r1, [pc, #376]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f003 0320 	and.w	r3, r3, #32
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d010      	beq.n	800edd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	69da      	ldr	r2, [r3, #28]
 800edb2:	4b59      	ldr	r3, [pc, #356]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800edb4:	6a1b      	ldr	r3, [r3, #32]
 800edb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800edba:	429a      	cmp	r2, r3
 800edbc:	d908      	bls.n	800edd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800edbe:	4b56      	ldr	r3, [pc, #344]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800edc0:	6a1b      	ldr	r3, [r3, #32]
 800edc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	69db      	ldr	r3, [r3, #28]
 800edca:	4953      	ldr	r1, [pc, #332]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800edcc:	4313      	orrs	r3, r2
 800edce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f003 0302 	and.w	r3, r3, #2
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d010      	beq.n	800edfe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	68da      	ldr	r2, [r3, #12]
 800ede0:	4b4d      	ldr	r3, [pc, #308]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ede2:	699b      	ldr	r3, [r3, #24]
 800ede4:	f003 030f 	and.w	r3, r3, #15
 800ede8:	429a      	cmp	r2, r3
 800edea:	d908      	bls.n	800edfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800edec:	4b4a      	ldr	r3, [pc, #296]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800edee:	699b      	ldr	r3, [r3, #24]
 800edf0:	f023 020f 	bic.w	r2, r3, #15
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	4947      	ldr	r1, [pc, #284]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800edfa:	4313      	orrs	r3, r2
 800edfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f003 0301 	and.w	r3, r3, #1
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d055      	beq.n	800eeb6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ee0a:	4b43      	ldr	r3, [pc, #268]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ee0c:	699b      	ldr	r3, [r3, #24]
 800ee0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	689b      	ldr	r3, [r3, #8]
 800ee16:	4940      	ldr	r1, [pc, #256]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ee18:	4313      	orrs	r3, r2
 800ee1a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	2b02      	cmp	r3, #2
 800ee22:	d107      	bne.n	800ee34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ee24:	4b3c      	ldr	r3, [pc, #240]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d121      	bne.n	800ee74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ee30:	2301      	movs	r3, #1
 800ee32:	e0f6      	b.n	800f022 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	2b03      	cmp	r3, #3
 800ee3a:	d107      	bne.n	800ee4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ee3c:	4b36      	ldr	r3, [pc, #216]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d115      	bne.n	800ee74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e0ea      	b.n	800f022 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d107      	bne.n	800ee64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ee54:	4b30      	ldr	r3, [pc, #192]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d109      	bne.n	800ee74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ee60:	2301      	movs	r3, #1
 800ee62:	e0de      	b.n	800f022 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ee64:	4b2c      	ldr	r3, [pc, #176]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f003 0304 	and.w	r3, r3, #4
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d101      	bne.n	800ee74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ee70:	2301      	movs	r3, #1
 800ee72:	e0d6      	b.n	800f022 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ee74:	4b28      	ldr	r3, [pc, #160]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ee76:	691b      	ldr	r3, [r3, #16]
 800ee78:	f023 0207 	bic.w	r2, r3, #7
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	4925      	ldr	r1, [pc, #148]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800ee82:	4313      	orrs	r3, r2
 800ee84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee86:	f7f8 fabb 	bl	8007400 <HAL_GetTick>
 800ee8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ee8c:	e00a      	b.n	800eea4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ee8e:	f7f8 fab7 	bl	8007400 <HAL_GetTick>
 800ee92:	4602      	mov	r2, r0
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	1ad3      	subs	r3, r2, r3
 800ee98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d901      	bls.n	800eea4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800eea0:	2303      	movs	r3, #3
 800eea2:	e0be      	b.n	800f022 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eea4:	4b1c      	ldr	r3, [pc, #112]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800eea6:	691b      	ldr	r3, [r3, #16]
 800eea8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	00db      	lsls	r3, r3, #3
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d1eb      	bne.n	800ee8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f003 0302 	and.w	r3, r3, #2
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d010      	beq.n	800eee4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	68da      	ldr	r2, [r3, #12]
 800eec6:	4b14      	ldr	r3, [pc, #80]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800eec8:	699b      	ldr	r3, [r3, #24]
 800eeca:	f003 030f 	and.w	r3, r3, #15
 800eece:	429a      	cmp	r2, r3
 800eed0:	d208      	bcs.n	800eee4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eed2:	4b11      	ldr	r3, [pc, #68]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800eed4:	699b      	ldr	r3, [r3, #24]
 800eed6:	f023 020f 	bic.w	r2, r3, #15
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	490e      	ldr	r1, [pc, #56]	; (800ef18 <HAL_RCC_ClockConfig+0x244>)
 800eee0:	4313      	orrs	r3, r2
 800eee2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800eee4:	4b0b      	ldr	r3, [pc, #44]	; (800ef14 <HAL_RCC_ClockConfig+0x240>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f003 030f 	and.w	r3, r3, #15
 800eeec:	683a      	ldr	r2, [r7, #0]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d214      	bcs.n	800ef1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eef2:	4b08      	ldr	r3, [pc, #32]	; (800ef14 <HAL_RCC_ClockConfig+0x240>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f023 020f 	bic.w	r2, r3, #15
 800eefa:	4906      	ldr	r1, [pc, #24]	; (800ef14 <HAL_RCC_ClockConfig+0x240>)
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	4313      	orrs	r3, r2
 800ef00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef02:	4b04      	ldr	r3, [pc, #16]	; (800ef14 <HAL_RCC_ClockConfig+0x240>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f003 030f 	and.w	r3, r3, #15
 800ef0a:	683a      	ldr	r2, [r7, #0]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d005      	beq.n	800ef1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ef10:	2301      	movs	r3, #1
 800ef12:	e086      	b.n	800f022 <HAL_RCC_ClockConfig+0x34e>
 800ef14:	52002000 	.word	0x52002000
 800ef18:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f003 0304 	and.w	r3, r3, #4
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d010      	beq.n	800ef4a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	691a      	ldr	r2, [r3, #16]
 800ef2c:	4b3f      	ldr	r3, [pc, #252]	; (800f02c <HAL_RCC_ClockConfig+0x358>)
 800ef2e:	699b      	ldr	r3, [r3, #24]
 800ef30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d208      	bcs.n	800ef4a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ef38:	4b3c      	ldr	r3, [pc, #240]	; (800f02c <HAL_RCC_ClockConfig+0x358>)
 800ef3a:	699b      	ldr	r3, [r3, #24]
 800ef3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	691b      	ldr	r3, [r3, #16]
 800ef44:	4939      	ldr	r1, [pc, #228]	; (800f02c <HAL_RCC_ClockConfig+0x358>)
 800ef46:	4313      	orrs	r3, r2
 800ef48:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f003 0308 	and.w	r3, r3, #8
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d010      	beq.n	800ef78 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	695a      	ldr	r2, [r3, #20]
 800ef5a:	4b34      	ldr	r3, [pc, #208]	; (800f02c <HAL_RCC_ClockConfig+0x358>)
 800ef5c:	69db      	ldr	r3, [r3, #28]
 800ef5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d208      	bcs.n	800ef78 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ef66:	4b31      	ldr	r3, [pc, #196]	; (800f02c <HAL_RCC_ClockConfig+0x358>)
 800ef68:	69db      	ldr	r3, [r3, #28]
 800ef6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	695b      	ldr	r3, [r3, #20]
 800ef72:	492e      	ldr	r1, [pc, #184]	; (800f02c <HAL_RCC_ClockConfig+0x358>)
 800ef74:	4313      	orrs	r3, r2
 800ef76:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	f003 0310 	and.w	r3, r3, #16
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d010      	beq.n	800efa6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	699a      	ldr	r2, [r3, #24]
 800ef88:	4b28      	ldr	r3, [pc, #160]	; (800f02c <HAL_RCC_ClockConfig+0x358>)
 800ef8a:	69db      	ldr	r3, [r3, #28]
 800ef8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d208      	bcs.n	800efa6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ef94:	4b25      	ldr	r3, [pc, #148]	; (800f02c <HAL_RCC_ClockConfig+0x358>)
 800ef96:	69db      	ldr	r3, [r3, #28]
 800ef98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	699b      	ldr	r3, [r3, #24]
 800efa0:	4922      	ldr	r1, [pc, #136]	; (800f02c <HAL_RCC_ClockConfig+0x358>)
 800efa2:	4313      	orrs	r3, r2
 800efa4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f003 0320 	and.w	r3, r3, #32
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d010      	beq.n	800efd4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	69da      	ldr	r2, [r3, #28]
 800efb6:	4b1d      	ldr	r3, [pc, #116]	; (800f02c <HAL_RCC_ClockConfig+0x358>)
 800efb8:	6a1b      	ldr	r3, [r3, #32]
 800efba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d208      	bcs.n	800efd4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800efc2:	4b1a      	ldr	r3, [pc, #104]	; (800f02c <HAL_RCC_ClockConfig+0x358>)
 800efc4:	6a1b      	ldr	r3, [r3, #32]
 800efc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	69db      	ldr	r3, [r3, #28]
 800efce:	4917      	ldr	r1, [pc, #92]	; (800f02c <HAL_RCC_ClockConfig+0x358>)
 800efd0:	4313      	orrs	r3, r2
 800efd2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800efd4:	f000 f834 	bl	800f040 <HAL_RCC_GetSysClockFreq>
 800efd8:	4602      	mov	r2, r0
 800efda:	4b14      	ldr	r3, [pc, #80]	; (800f02c <HAL_RCC_ClockConfig+0x358>)
 800efdc:	699b      	ldr	r3, [r3, #24]
 800efde:	0a1b      	lsrs	r3, r3, #8
 800efe0:	f003 030f 	and.w	r3, r3, #15
 800efe4:	4912      	ldr	r1, [pc, #72]	; (800f030 <HAL_RCC_ClockConfig+0x35c>)
 800efe6:	5ccb      	ldrb	r3, [r1, r3]
 800efe8:	f003 031f 	and.w	r3, r3, #31
 800efec:	fa22 f303 	lsr.w	r3, r2, r3
 800eff0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800eff2:	4b0e      	ldr	r3, [pc, #56]	; (800f02c <HAL_RCC_ClockConfig+0x358>)
 800eff4:	699b      	ldr	r3, [r3, #24]
 800eff6:	f003 030f 	and.w	r3, r3, #15
 800effa:	4a0d      	ldr	r2, [pc, #52]	; (800f030 <HAL_RCC_ClockConfig+0x35c>)
 800effc:	5cd3      	ldrb	r3, [r2, r3]
 800effe:	f003 031f 	and.w	r3, r3, #31
 800f002:	693a      	ldr	r2, [r7, #16]
 800f004:	fa22 f303 	lsr.w	r3, r2, r3
 800f008:	4a0a      	ldr	r2, [pc, #40]	; (800f034 <HAL_RCC_ClockConfig+0x360>)
 800f00a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f00c:	4a0a      	ldr	r2, [pc, #40]	; (800f038 <HAL_RCC_ClockConfig+0x364>)
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800f012:	4b0a      	ldr	r3, [pc, #40]	; (800f03c <HAL_RCC_ClockConfig+0x368>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	4618      	mov	r0, r3
 800f018:	f7f8 f9a8 	bl	800736c <HAL_InitTick>
 800f01c:	4603      	mov	r3, r0
 800f01e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800f020:	7bfb      	ldrb	r3, [r7, #15]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3718      	adds	r7, #24
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	58024400 	.word	0x58024400
 800f030:	080182d0 	.word	0x080182d0
 800f034:	20000024 	.word	0x20000024
 800f038:	20000020 	.word	0x20000020
 800f03c:	20000028 	.word	0x20000028

0800f040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f040:	b480      	push	{r7}
 800f042:	b089      	sub	sp, #36	; 0x24
 800f044:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f046:	4bb3      	ldr	r3, [pc, #716]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f048:	691b      	ldr	r3, [r3, #16]
 800f04a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f04e:	2b18      	cmp	r3, #24
 800f050:	f200 8155 	bhi.w	800f2fe <HAL_RCC_GetSysClockFreq+0x2be>
 800f054:	a201      	add	r2, pc, #4	; (adr r2, 800f05c <HAL_RCC_GetSysClockFreq+0x1c>)
 800f056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f05a:	bf00      	nop
 800f05c:	0800f0c1 	.word	0x0800f0c1
 800f060:	0800f2ff 	.word	0x0800f2ff
 800f064:	0800f2ff 	.word	0x0800f2ff
 800f068:	0800f2ff 	.word	0x0800f2ff
 800f06c:	0800f2ff 	.word	0x0800f2ff
 800f070:	0800f2ff 	.word	0x0800f2ff
 800f074:	0800f2ff 	.word	0x0800f2ff
 800f078:	0800f2ff 	.word	0x0800f2ff
 800f07c:	0800f0e7 	.word	0x0800f0e7
 800f080:	0800f2ff 	.word	0x0800f2ff
 800f084:	0800f2ff 	.word	0x0800f2ff
 800f088:	0800f2ff 	.word	0x0800f2ff
 800f08c:	0800f2ff 	.word	0x0800f2ff
 800f090:	0800f2ff 	.word	0x0800f2ff
 800f094:	0800f2ff 	.word	0x0800f2ff
 800f098:	0800f2ff 	.word	0x0800f2ff
 800f09c:	0800f0ed 	.word	0x0800f0ed
 800f0a0:	0800f2ff 	.word	0x0800f2ff
 800f0a4:	0800f2ff 	.word	0x0800f2ff
 800f0a8:	0800f2ff 	.word	0x0800f2ff
 800f0ac:	0800f2ff 	.word	0x0800f2ff
 800f0b0:	0800f2ff 	.word	0x0800f2ff
 800f0b4:	0800f2ff 	.word	0x0800f2ff
 800f0b8:	0800f2ff 	.word	0x0800f2ff
 800f0bc:	0800f0f3 	.word	0x0800f0f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0c0:	4b94      	ldr	r3, [pc, #592]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f003 0320 	and.w	r3, r3, #32
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d009      	beq.n	800f0e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f0cc:	4b91      	ldr	r3, [pc, #580]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	08db      	lsrs	r3, r3, #3
 800f0d2:	f003 0303 	and.w	r3, r3, #3
 800f0d6:	4a90      	ldr	r2, [pc, #576]	; (800f318 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f0d8:	fa22 f303 	lsr.w	r3, r2, r3
 800f0dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800f0de:	e111      	b.n	800f304 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f0e0:	4b8d      	ldr	r3, [pc, #564]	; (800f318 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f0e2:	61bb      	str	r3, [r7, #24]
    break;
 800f0e4:	e10e      	b.n	800f304 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800f0e6:	4b8d      	ldr	r3, [pc, #564]	; (800f31c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f0e8:	61bb      	str	r3, [r7, #24]
    break;
 800f0ea:	e10b      	b.n	800f304 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800f0ec:	4b8c      	ldr	r3, [pc, #560]	; (800f320 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800f0ee:	61bb      	str	r3, [r7, #24]
    break;
 800f0f0:	e108      	b.n	800f304 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f0f2:	4b88      	ldr	r3, [pc, #544]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0f6:	f003 0303 	and.w	r3, r3, #3
 800f0fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f0fc:	4b85      	ldr	r3, [pc, #532]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f100:	091b      	lsrs	r3, r3, #4
 800f102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f106:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f108:	4b82      	ldr	r3, [pc, #520]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10c:	f003 0301 	and.w	r3, r3, #1
 800f110:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f112:	4b80      	ldr	r3, [pc, #512]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f116:	08db      	lsrs	r3, r3, #3
 800f118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	fb02 f303 	mul.w	r3, r2, r3
 800f122:	ee07 3a90 	vmov	s15, r3
 800f126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f12a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	2b00      	cmp	r3, #0
 800f132:	f000 80e1 	beq.w	800f2f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	2b02      	cmp	r3, #2
 800f13a:	f000 8083 	beq.w	800f244 <HAL_RCC_GetSysClockFreq+0x204>
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	2b02      	cmp	r3, #2
 800f142:	f200 80a1 	bhi.w	800f288 <HAL_RCC_GetSysClockFreq+0x248>
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d003      	beq.n	800f154 <HAL_RCC_GetSysClockFreq+0x114>
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	2b01      	cmp	r3, #1
 800f150:	d056      	beq.n	800f200 <HAL_RCC_GetSysClockFreq+0x1c0>
 800f152:	e099      	b.n	800f288 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f154:	4b6f      	ldr	r3, [pc, #444]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f003 0320 	and.w	r3, r3, #32
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d02d      	beq.n	800f1bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f160:	4b6c      	ldr	r3, [pc, #432]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	08db      	lsrs	r3, r3, #3
 800f166:	f003 0303 	and.w	r3, r3, #3
 800f16a:	4a6b      	ldr	r2, [pc, #428]	; (800f318 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f16c:	fa22 f303 	lsr.w	r3, r2, r3
 800f170:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	ee07 3a90 	vmov	s15, r3
 800f178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	ee07 3a90 	vmov	s15, r3
 800f182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f18a:	4b62      	ldr	r3, [pc, #392]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f18e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f192:	ee07 3a90 	vmov	s15, r3
 800f196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f19a:	ed97 6a02 	vldr	s12, [r7, #8]
 800f19e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800f324 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f1a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800f1ba:	e087      	b.n	800f2cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	ee07 3a90 	vmov	s15, r3
 800f1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800f328 <HAL_RCC_GetSysClockFreq+0x2e8>
 800f1ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1ce:	4b51      	ldr	r3, [pc, #324]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1d6:	ee07 3a90 	vmov	s15, r3
 800f1da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1de:	ed97 6a02 	vldr	s12, [r7, #8]
 800f1e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800f324 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f1e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f1fe:	e065      	b.n	800f2cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	ee07 3a90 	vmov	s15, r3
 800f206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f20a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800f32c <HAL_RCC_GetSysClockFreq+0x2ec>
 800f20e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f212:	4b40      	ldr	r3, [pc, #256]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f21a:	ee07 3a90 	vmov	s15, r3
 800f21e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f222:	ed97 6a02 	vldr	s12, [r7, #8]
 800f226:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800f324 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f22a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f22e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f23a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f23e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f242:	e043      	b.n	800f2cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	ee07 3a90 	vmov	s15, r3
 800f24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f24e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800f330 <HAL_RCC_GetSysClockFreq+0x2f0>
 800f252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f256:	4b2f      	ldr	r3, [pc, #188]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f25a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f25e:	ee07 3a90 	vmov	s15, r3
 800f262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f266:	ed97 6a02 	vldr	s12, [r7, #8]
 800f26a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800f324 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f26e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f27a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f27e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f286:	e021      	b.n	800f2cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	ee07 3a90 	vmov	s15, r3
 800f28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f292:	eddf 6a26 	vldr	s13, [pc, #152]	; 800f32c <HAL_RCC_GetSysClockFreq+0x2ec>
 800f296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f29a:	4b1e      	ldr	r3, [pc, #120]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f29e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2a2:	ee07 3a90 	vmov	s15, r3
 800f2a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800f2ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800f324 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f2b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f2be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f2ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800f2cc:	4b11      	ldr	r3, [pc, #68]	; (800f314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2d0:	0a5b      	lsrs	r3, r3, #9
 800f2d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	ee07 3a90 	vmov	s15, r3
 800f2e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f2e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2f0:	ee17 3a90 	vmov	r3, s15
 800f2f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800f2f6:	e005      	b.n	800f304 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	61bb      	str	r3, [r7, #24]
    break;
 800f2fc:	e002      	b.n	800f304 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800f2fe:	4b07      	ldr	r3, [pc, #28]	; (800f31c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f300:	61bb      	str	r3, [r7, #24]
    break;
 800f302:	bf00      	nop
  }

  return sysclockfreq;
 800f304:	69bb      	ldr	r3, [r7, #24]
}
 800f306:	4618      	mov	r0, r3
 800f308:	3724      	adds	r7, #36	; 0x24
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop
 800f314:	58024400 	.word	0x58024400
 800f318:	03d09000 	.word	0x03d09000
 800f31c:	003d0900 	.word	0x003d0900
 800f320:	017d7840 	.word	0x017d7840
 800f324:	46000000 	.word	0x46000000
 800f328:	4c742400 	.word	0x4c742400
 800f32c:	4a742400 	.word	0x4a742400
 800f330:	4bbebc20 	.word	0x4bbebc20

0800f334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b082      	sub	sp, #8
 800f338:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f33a:	f7ff fe81 	bl	800f040 <HAL_RCC_GetSysClockFreq>
 800f33e:	4602      	mov	r2, r0
 800f340:	4b10      	ldr	r3, [pc, #64]	; (800f384 <HAL_RCC_GetHCLKFreq+0x50>)
 800f342:	699b      	ldr	r3, [r3, #24]
 800f344:	0a1b      	lsrs	r3, r3, #8
 800f346:	f003 030f 	and.w	r3, r3, #15
 800f34a:	490f      	ldr	r1, [pc, #60]	; (800f388 <HAL_RCC_GetHCLKFreq+0x54>)
 800f34c:	5ccb      	ldrb	r3, [r1, r3]
 800f34e:	f003 031f 	and.w	r3, r3, #31
 800f352:	fa22 f303 	lsr.w	r3, r2, r3
 800f356:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f358:	4b0a      	ldr	r3, [pc, #40]	; (800f384 <HAL_RCC_GetHCLKFreq+0x50>)
 800f35a:	699b      	ldr	r3, [r3, #24]
 800f35c:	f003 030f 	and.w	r3, r3, #15
 800f360:	4a09      	ldr	r2, [pc, #36]	; (800f388 <HAL_RCC_GetHCLKFreq+0x54>)
 800f362:	5cd3      	ldrb	r3, [r2, r3]
 800f364:	f003 031f 	and.w	r3, r3, #31
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	fa22 f303 	lsr.w	r3, r2, r3
 800f36e:	4a07      	ldr	r2, [pc, #28]	; (800f38c <HAL_RCC_GetHCLKFreq+0x58>)
 800f370:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f372:	4a07      	ldr	r2, [pc, #28]	; (800f390 <HAL_RCC_GetHCLKFreq+0x5c>)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800f378:	4b04      	ldr	r3, [pc, #16]	; (800f38c <HAL_RCC_GetHCLKFreq+0x58>)
 800f37a:	681b      	ldr	r3, [r3, #0]
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3708      	adds	r7, #8
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}
 800f384:	58024400 	.word	0x58024400
 800f388:	080182d0 	.word	0x080182d0
 800f38c:	20000024 	.word	0x20000024
 800f390:	20000020 	.word	0x20000020

0800f394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800f398:	f7ff ffcc 	bl	800f334 <HAL_RCC_GetHCLKFreq>
 800f39c:	4602      	mov	r2, r0
 800f39e:	4b06      	ldr	r3, [pc, #24]	; (800f3b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f3a0:	69db      	ldr	r3, [r3, #28]
 800f3a2:	091b      	lsrs	r3, r3, #4
 800f3a4:	f003 0307 	and.w	r3, r3, #7
 800f3a8:	4904      	ldr	r1, [pc, #16]	; (800f3bc <HAL_RCC_GetPCLK1Freq+0x28>)
 800f3aa:	5ccb      	ldrb	r3, [r1, r3]
 800f3ac:	f003 031f 	and.w	r3, r3, #31
 800f3b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	bd80      	pop	{r7, pc}
 800f3b8:	58024400 	.word	0x58024400
 800f3bc:	080182d0 	.word	0x080182d0

0800f3c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800f3c4:	f7ff ffb6 	bl	800f334 <HAL_RCC_GetHCLKFreq>
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	4b06      	ldr	r3, [pc, #24]	; (800f3e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f3cc:	69db      	ldr	r3, [r3, #28]
 800f3ce:	0a1b      	lsrs	r3, r3, #8
 800f3d0:	f003 0307 	and.w	r3, r3, #7
 800f3d4:	4904      	ldr	r1, [pc, #16]	; (800f3e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f3d6:	5ccb      	ldrb	r3, [r1, r3]
 800f3d8:	f003 031f 	and.w	r3, r3, #31
 800f3dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	bd80      	pop	{r7, pc}
 800f3e4:	58024400 	.word	0x58024400
 800f3e8:	080182d0 	.word	0x080182d0

0800f3ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b086      	sub	sp, #24
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f404:	2b00      	cmp	r3, #0
 800f406:	d03f      	beq.n	800f488 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f40c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f410:	d02a      	beq.n	800f468 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800f412:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f416:	d824      	bhi.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f41c:	d018      	beq.n	800f450 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f41e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f422:	d81e      	bhi.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f424:	2b00      	cmp	r3, #0
 800f426:	d003      	beq.n	800f430 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800f428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f42c:	d007      	beq.n	800f43e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800f42e:	e018      	b.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f430:	4ba4      	ldr	r3, [pc, #656]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f434:	4aa3      	ldr	r2, [pc, #652]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f43a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800f43c:	e015      	b.n	800f46a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	3304      	adds	r3, #4
 800f442:	2102      	movs	r1, #2
 800f444:	4618      	mov	r0, r3
 800f446:	f001 ff01 	bl	801124c <RCCEx_PLL2_Config>
 800f44a:	4603      	mov	r3, r0
 800f44c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800f44e:	e00c      	b.n	800f46a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	3324      	adds	r3, #36	; 0x24
 800f454:	2102      	movs	r1, #2
 800f456:	4618      	mov	r0, r3
 800f458:	f001 ffaa 	bl	80113b0 <RCCEx_PLL3_Config>
 800f45c:	4603      	mov	r3, r0
 800f45e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800f460:	e003      	b.n	800f46a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f462:	2301      	movs	r3, #1
 800f464:	75fb      	strb	r3, [r7, #23]
      break;
 800f466:	e000      	b.n	800f46a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800f468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f46a:	7dfb      	ldrb	r3, [r7, #23]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d109      	bne.n	800f484 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f470:	4b94      	ldr	r3, [pc, #592]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f474:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f47c:	4991      	ldr	r1, [pc, #580]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f47e:	4313      	orrs	r3, r2
 800f480:	650b      	str	r3, [r1, #80]	; 0x50
 800f482:	e001      	b.n	800f488 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f484:	7dfb      	ldrb	r3, [r7, #23]
 800f486:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f490:	2b00      	cmp	r3, #0
 800f492:	d03d      	beq.n	800f510 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f498:	2b04      	cmp	r3, #4
 800f49a:	d826      	bhi.n	800f4ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800f49c:	a201      	add	r2, pc, #4	; (adr r2, 800f4a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800f49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4a2:	bf00      	nop
 800f4a4:	0800f4b9 	.word	0x0800f4b9
 800f4a8:	0800f4c7 	.word	0x0800f4c7
 800f4ac:	0800f4d9 	.word	0x0800f4d9
 800f4b0:	0800f4f1 	.word	0x0800f4f1
 800f4b4:	0800f4f1 	.word	0x0800f4f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f4b8:	4b82      	ldr	r3, [pc, #520]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4bc:	4a81      	ldr	r2, [pc, #516]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f4be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f4c4:	e015      	b.n	800f4f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	3304      	adds	r3, #4
 800f4ca:	2100      	movs	r1, #0
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f001 febd 	bl	801124c <RCCEx_PLL2_Config>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f4d6:	e00c      	b.n	800f4f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	3324      	adds	r3, #36	; 0x24
 800f4dc:	2100      	movs	r1, #0
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f001 ff66 	bl	80113b0 <RCCEx_PLL3_Config>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f4e8:	e003      	b.n	800f4f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	75fb      	strb	r3, [r7, #23]
      break;
 800f4ee:	e000      	b.n	800f4f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800f4f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f4f2:	7dfb      	ldrb	r3, [r7, #23]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d109      	bne.n	800f50c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f4f8:	4b72      	ldr	r3, [pc, #456]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f4fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4fc:	f023 0207 	bic.w	r2, r3, #7
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f504:	496f      	ldr	r1, [pc, #444]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f506:	4313      	orrs	r3, r2
 800f508:	650b      	str	r3, [r1, #80]	; 0x50
 800f50a:	e001      	b.n	800f510 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f50c:	7dfb      	ldrb	r3, [r7, #23]
 800f50e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d051      	beq.n	800f5c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f522:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800f526:	d036      	beq.n	800f596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800f528:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800f52c:	d830      	bhi.n	800f590 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800f52e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f532:	d032      	beq.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f534:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f538:	d82a      	bhi.n	800f590 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800f53a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f53e:	d02e      	beq.n	800f59e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800f540:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f544:	d824      	bhi.n	800f590 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800f546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f54a:	d018      	beq.n	800f57e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800f54c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f550:	d81e      	bhi.n	800f590 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800f552:	2b00      	cmp	r3, #0
 800f554:	d003      	beq.n	800f55e <HAL_RCCEx_PeriphCLKConfig+0x172>
 800f556:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f55a:	d007      	beq.n	800f56c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800f55c:	e018      	b.n	800f590 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f55e:	4b59      	ldr	r3, [pc, #356]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f562:	4a58      	ldr	r2, [pc, #352]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f568:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f56a:	e019      	b.n	800f5a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	3304      	adds	r3, #4
 800f570:	2100      	movs	r1, #0
 800f572:	4618      	mov	r0, r3
 800f574:	f001 fe6a 	bl	801124c <RCCEx_PLL2_Config>
 800f578:	4603      	mov	r3, r0
 800f57a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800f57c:	e010      	b.n	800f5a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	3324      	adds	r3, #36	; 0x24
 800f582:	2100      	movs	r1, #0
 800f584:	4618      	mov	r0, r3
 800f586:	f001 ff13 	bl	80113b0 <RCCEx_PLL3_Config>
 800f58a:	4603      	mov	r3, r0
 800f58c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f58e:	e007      	b.n	800f5a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800f590:	2301      	movs	r3, #1
 800f592:	75fb      	strb	r3, [r7, #23]
      break;
 800f594:	e004      	b.n	800f5a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800f596:	bf00      	nop
 800f598:	e002      	b.n	800f5a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800f59a:	bf00      	nop
 800f59c:	e000      	b.n	800f5a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800f59e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f5a0:	7dfb      	ldrb	r3, [r7, #23]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d10a      	bne.n	800f5bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f5a6:	4b47      	ldr	r3, [pc, #284]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f5a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5aa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f5b4:	4943      	ldr	r1, [pc, #268]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	658b      	str	r3, [r1, #88]	; 0x58
 800f5ba:	e001      	b.n	800f5c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5bc:	7dfb      	ldrb	r3, [r7, #23]
 800f5be:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d051      	beq.n	800f670 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f5d2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800f5d6:	d036      	beq.n	800f646 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800f5d8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800f5dc:	d830      	bhi.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800f5de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f5e2:	d032      	beq.n	800f64a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800f5e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f5e8:	d82a      	bhi.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800f5ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f5ee:	d02e      	beq.n	800f64e <HAL_RCCEx_PeriphCLKConfig+0x262>
 800f5f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f5f4:	d824      	bhi.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800f5f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f5fa:	d018      	beq.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800f5fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f600:	d81e      	bhi.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800f602:	2b00      	cmp	r3, #0
 800f604:	d003      	beq.n	800f60e <HAL_RCCEx_PeriphCLKConfig+0x222>
 800f606:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f60a:	d007      	beq.n	800f61c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800f60c:	e018      	b.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f60e:	4b2d      	ldr	r3, [pc, #180]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f612:	4a2c      	ldr	r2, [pc, #176]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f618:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f61a:	e019      	b.n	800f650 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	3304      	adds	r3, #4
 800f620:	2100      	movs	r1, #0
 800f622:	4618      	mov	r0, r3
 800f624:	f001 fe12 	bl	801124c <RCCEx_PLL2_Config>
 800f628:	4603      	mov	r3, r0
 800f62a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800f62c:	e010      	b.n	800f650 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	3324      	adds	r3, #36	; 0x24
 800f632:	2100      	movs	r1, #0
 800f634:	4618      	mov	r0, r3
 800f636:	f001 febb 	bl	80113b0 <RCCEx_PLL3_Config>
 800f63a:	4603      	mov	r3, r0
 800f63c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f63e:	e007      	b.n	800f650 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800f640:	2301      	movs	r3, #1
 800f642:	75fb      	strb	r3, [r7, #23]
      break;
 800f644:	e004      	b.n	800f650 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800f646:	bf00      	nop
 800f648:	e002      	b.n	800f650 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800f64a:	bf00      	nop
 800f64c:	e000      	b.n	800f650 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800f64e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f650:	7dfb      	ldrb	r3, [r7, #23]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d10a      	bne.n	800f66c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f656:	4b1b      	ldr	r3, [pc, #108]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f65a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f664:	4917      	ldr	r1, [pc, #92]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f666:	4313      	orrs	r3, r2
 800f668:	658b      	str	r3, [r1, #88]	; 0x58
 800f66a:	e001      	b.n	800f670 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f66c:	7dfb      	ldrb	r3, [r7, #23]
 800f66e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d035      	beq.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f680:	2b30      	cmp	r3, #48	; 0x30
 800f682:	d01c      	beq.n	800f6be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800f684:	2b30      	cmp	r3, #48	; 0x30
 800f686:	d817      	bhi.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800f688:	2b20      	cmp	r3, #32
 800f68a:	d00c      	beq.n	800f6a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800f68c:	2b20      	cmp	r3, #32
 800f68e:	d813      	bhi.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800f690:	2b00      	cmp	r3, #0
 800f692:	d019      	beq.n	800f6c8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800f694:	2b10      	cmp	r3, #16
 800f696:	d10f      	bne.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f698:	4b0a      	ldr	r3, [pc, #40]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f69c:	4a09      	ldr	r2, [pc, #36]	; (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f69e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f6a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800f6a4:	e011      	b.n	800f6ca <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	3304      	adds	r3, #4
 800f6aa:	2102      	movs	r1, #2
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f001 fdcd 	bl	801124c <RCCEx_PLL2_Config>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800f6b6:	e008      	b.n	800f6ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	75fb      	strb	r3, [r7, #23]
      break;
 800f6bc:	e005      	b.n	800f6ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800f6be:	bf00      	nop
 800f6c0:	e003      	b.n	800f6ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800f6c2:	bf00      	nop
 800f6c4:	58024400 	.word	0x58024400
      break;
 800f6c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f6ca:	7dfb      	ldrb	r3, [r7, #23]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d109      	bne.n	800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800f6d0:	4ba3      	ldr	r3, [pc, #652]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f6d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6dc:	49a0      	ldr	r1, [pc, #640]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f6de:	4313      	orrs	r3, r2
 800f6e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 800f6e2:	e001      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6e4:	7dfb      	ldrb	r3, [r7, #23]
 800f6e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d047      	beq.n	800f784 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6fc:	d030      	beq.n	800f760 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800f6fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f702:	d82a      	bhi.n	800f75a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800f704:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f708:	d02c      	beq.n	800f764 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800f70a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f70e:	d824      	bhi.n	800f75a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800f710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f714:	d018      	beq.n	800f748 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800f716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f71a:	d81e      	bhi.n	800f75a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d003      	beq.n	800f728 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800f720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f724:	d007      	beq.n	800f736 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800f726:	e018      	b.n	800f75a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f728:	4b8d      	ldr	r3, [pc, #564]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f72c:	4a8c      	ldr	r2, [pc, #560]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f72e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f732:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f734:	e017      	b.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	3304      	adds	r3, #4
 800f73a:	2100      	movs	r1, #0
 800f73c:	4618      	mov	r0, r3
 800f73e:	f001 fd85 	bl	801124c <RCCEx_PLL2_Config>
 800f742:	4603      	mov	r3, r0
 800f744:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f746:	e00e      	b.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	3324      	adds	r3, #36	; 0x24
 800f74c:	2100      	movs	r1, #0
 800f74e:	4618      	mov	r0, r3
 800f750:	f001 fe2e 	bl	80113b0 <RCCEx_PLL3_Config>
 800f754:	4603      	mov	r3, r0
 800f756:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f758:	e005      	b.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f75a:	2301      	movs	r3, #1
 800f75c:	75fb      	strb	r3, [r7, #23]
      break;
 800f75e:	e002      	b.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800f760:	bf00      	nop
 800f762:	e000      	b.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800f764:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f766:	7dfb      	ldrb	r3, [r7, #23]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d109      	bne.n	800f780 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f76c:	4b7c      	ldr	r3, [pc, #496]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f76e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f770:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f778:	4979      	ldr	r1, [pc, #484]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f77a:	4313      	orrs	r3, r2
 800f77c:	650b      	str	r3, [r1, #80]	; 0x50
 800f77e:	e001      	b.n	800f784 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f780:	7dfb      	ldrb	r3, [r7, #23]
 800f782:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d049      	beq.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f798:	d02e      	beq.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800f79a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f79e:	d828      	bhi.n	800f7f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800f7a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f7a4:	d02a      	beq.n	800f7fc <HAL_RCCEx_PeriphCLKConfig+0x410>
 800f7a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f7aa:	d822      	bhi.n	800f7f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800f7ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f7b0:	d026      	beq.n	800f800 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800f7b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f7b6:	d81c      	bhi.n	800f7f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800f7b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f7bc:	d010      	beq.n	800f7e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800f7be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f7c2:	d816      	bhi.n	800f7f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d01d      	beq.n	800f804 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800f7c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7cc:	d111      	bne.n	800f7f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	3304      	adds	r3, #4
 800f7d2:	2101      	movs	r1, #1
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f001 fd39 	bl	801124c <RCCEx_PLL2_Config>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800f7de:	e012      	b.n	800f806 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	3324      	adds	r3, #36	; 0x24
 800f7e4:	2101      	movs	r1, #1
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f001 fde2 	bl	80113b0 <RCCEx_PLL3_Config>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800f7f0:	e009      	b.n	800f806 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	75fb      	strb	r3, [r7, #23]
      break;
 800f7f6:	e006      	b.n	800f806 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800f7f8:	bf00      	nop
 800f7fa:	e004      	b.n	800f806 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800f7fc:	bf00      	nop
 800f7fe:	e002      	b.n	800f806 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800f800:	bf00      	nop
 800f802:	e000      	b.n	800f806 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800f804:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f806:	7dfb      	ldrb	r3, [r7, #23]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d109      	bne.n	800f820 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f80c:	4b54      	ldr	r3, [pc, #336]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f80e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f810:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f818:	4951      	ldr	r1, [pc, #324]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f81a:	4313      	orrs	r3, r2
 800f81c:	650b      	str	r3, [r1, #80]	; 0x50
 800f81e:	e001      	b.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f820:	7dfb      	ldrb	r3, [r7, #23]
 800f822:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d04b      	beq.n	800f8c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f836:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f83a:	d02e      	beq.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800f83c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f840:	d828      	bhi.n	800f894 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f846:	d02a      	beq.n	800f89e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800f848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f84c:	d822      	bhi.n	800f894 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f84e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f852:	d026      	beq.n	800f8a2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800f854:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f858:	d81c      	bhi.n	800f894 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f85a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f85e:	d010      	beq.n	800f882 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800f860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f864:	d816      	bhi.n	800f894 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f866:	2b00      	cmp	r3, #0
 800f868:	d01d      	beq.n	800f8a6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800f86a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f86e:	d111      	bne.n	800f894 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	3304      	adds	r3, #4
 800f874:	2101      	movs	r1, #1
 800f876:	4618      	mov	r0, r3
 800f878:	f001 fce8 	bl	801124c <RCCEx_PLL2_Config>
 800f87c:	4603      	mov	r3, r0
 800f87e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800f880:	e012      	b.n	800f8a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	3324      	adds	r3, #36	; 0x24
 800f886:	2101      	movs	r1, #1
 800f888:	4618      	mov	r0, r3
 800f88a:	f001 fd91 	bl	80113b0 <RCCEx_PLL3_Config>
 800f88e:	4603      	mov	r3, r0
 800f890:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800f892:	e009      	b.n	800f8a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800f894:	2301      	movs	r3, #1
 800f896:	75fb      	strb	r3, [r7, #23]
      break;
 800f898:	e006      	b.n	800f8a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800f89a:	bf00      	nop
 800f89c:	e004      	b.n	800f8a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800f89e:	bf00      	nop
 800f8a0:	e002      	b.n	800f8a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800f8a2:	bf00      	nop
 800f8a4:	e000      	b.n	800f8a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800f8a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f8a8:	7dfb      	ldrb	r3, [r7, #23]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d10a      	bne.n	800f8c4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f8ae:	4b2c      	ldr	r3, [pc, #176]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f8b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f8bc:	4928      	ldr	r1, [pc, #160]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	658b      	str	r3, [r1, #88]	; 0x58
 800f8c2:	e001      	b.n	800f8c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8c4:	7dfb      	ldrb	r3, [r7, #23]
 800f8c6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d02f      	beq.n	800f934 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f8d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f8dc:	d00e      	beq.n	800f8fc <HAL_RCCEx_PeriphCLKConfig+0x510>
 800f8de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f8e2:	d814      	bhi.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d015      	beq.n	800f914 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800f8e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f8ec:	d10f      	bne.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f8ee:	4b1c      	ldr	r3, [pc, #112]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8f2:	4a1b      	ldr	r2, [pc, #108]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f8f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f8f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800f8fa:	e00c      	b.n	800f916 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	3304      	adds	r3, #4
 800f900:	2101      	movs	r1, #1
 800f902:	4618      	mov	r0, r3
 800f904:	f001 fca2 	bl	801124c <RCCEx_PLL2_Config>
 800f908:	4603      	mov	r3, r0
 800f90a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800f90c:	e003      	b.n	800f916 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f90e:	2301      	movs	r3, #1
 800f910:	75fb      	strb	r3, [r7, #23]
      break;
 800f912:	e000      	b.n	800f916 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800f914:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f916:	7dfb      	ldrb	r3, [r7, #23]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d109      	bne.n	800f930 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f91c:	4b10      	ldr	r3, [pc, #64]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f91e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f920:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f928:	490d      	ldr	r1, [pc, #52]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f92a:	4313      	orrs	r3, r2
 800f92c:	650b      	str	r3, [r1, #80]	; 0x50
 800f92e:	e001      	b.n	800f934 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f930:	7dfb      	ldrb	r3, [r7, #23]
 800f932:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d034      	beq.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f944:	2b03      	cmp	r3, #3
 800f946:	d81d      	bhi.n	800f984 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800f948:	a201      	add	r2, pc, #4	; (adr r2, 800f950 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800f94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f94e:	bf00      	nop
 800f950:	0800f98b 	.word	0x0800f98b
 800f954:	0800f965 	.word	0x0800f965
 800f958:	0800f973 	.word	0x0800f973
 800f95c:	0800f98b 	.word	0x0800f98b
 800f960:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f964:	4bb1      	ldr	r3, [pc, #708]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800f966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f968:	4ab0      	ldr	r2, [pc, #704]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800f96a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f96e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800f970:	e00c      	b.n	800f98c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	3304      	adds	r3, #4
 800f976:	2102      	movs	r1, #2
 800f978:	4618      	mov	r0, r3
 800f97a:	f001 fc67 	bl	801124c <RCCEx_PLL2_Config>
 800f97e:	4603      	mov	r3, r0
 800f980:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800f982:	e003      	b.n	800f98c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800f984:	2301      	movs	r3, #1
 800f986:	75fb      	strb	r3, [r7, #23]
      break;
 800f988:	e000      	b.n	800f98c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800f98a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f98c:	7dfb      	ldrb	r3, [r7, #23]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d109      	bne.n	800f9a6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f992:	4ba6      	ldr	r3, [pc, #664]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800f994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f996:	f023 0203 	bic.w	r2, r3, #3
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f99e:	49a3      	ldr	r1, [pc, #652]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800f9a4:	e001      	b.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9a6:	7dfb      	ldrb	r3, [r7, #23]
 800f9a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	f000 8086 	beq.w	800fac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f9b8:	4b9d      	ldr	r3, [pc, #628]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	4a9c      	ldr	r2, [pc, #624]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800f9be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f9c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f9c4:	f7f7 fd1c 	bl	8007400 <HAL_GetTick>
 800f9c8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f9ca:	e009      	b.n	800f9e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f9cc:	f7f7 fd18 	bl	8007400 <HAL_GetTick>
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	693b      	ldr	r3, [r7, #16]
 800f9d4:	1ad3      	subs	r3, r2, r3
 800f9d6:	2b64      	cmp	r3, #100	; 0x64
 800f9d8:	d902      	bls.n	800f9e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800f9da:	2303      	movs	r3, #3
 800f9dc:	75fb      	strb	r3, [r7, #23]
        break;
 800f9de:	e005      	b.n	800f9ec <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f9e0:	4b93      	ldr	r3, [pc, #588]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d0ef      	beq.n	800f9cc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800f9ec:	7dfb      	ldrb	r3, [r7, #23]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d166      	bne.n	800fac0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f9f2:	4b8e      	ldr	r3, [pc, #568]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800f9f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f9fc:	4053      	eors	r3, r2
 800f9fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d013      	beq.n	800fa2e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800fa06:	4b89      	ldr	r3, [pc, #548]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fa08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa0e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800fa10:	4b86      	ldr	r3, [pc, #536]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fa12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa14:	4a85      	ldr	r2, [pc, #532]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fa16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fa1a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800fa1c:	4b83      	ldr	r3, [pc, #524]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fa1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa20:	4a82      	ldr	r2, [pc, #520]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fa22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa26:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800fa28:	4a80      	ldr	r2, [pc, #512]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fa34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa38:	d115      	bne.n	800fa66 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fa3a:	f7f7 fce1 	bl	8007400 <HAL_GetTick>
 800fa3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fa40:	e00b      	b.n	800fa5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa42:	f7f7 fcdd 	bl	8007400 <HAL_GetTick>
 800fa46:	4602      	mov	r2, r0
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	1ad3      	subs	r3, r2, r3
 800fa4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d902      	bls.n	800fa5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800fa54:	2303      	movs	r3, #3
 800fa56:	75fb      	strb	r3, [r7, #23]
            break;
 800fa58:	e005      	b.n	800fa66 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fa5a:	4b74      	ldr	r3, [pc, #464]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fa5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa5e:	f003 0302 	and.w	r3, r3, #2
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d0ed      	beq.n	800fa42 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800fa66:	7dfb      	ldrb	r3, [r7, #23]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d126      	bne.n	800faba <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fa72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fa76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa7a:	d10d      	bne.n	800fa98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800fa7c:	4b6b      	ldr	r3, [pc, #428]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fa7e:	691b      	ldr	r3, [r3, #16]
 800fa80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fa8a:	0919      	lsrs	r1, r3, #4
 800fa8c:	4b69      	ldr	r3, [pc, #420]	; (800fc34 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800fa8e:	400b      	ands	r3, r1
 800fa90:	4966      	ldr	r1, [pc, #408]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fa92:	4313      	orrs	r3, r2
 800fa94:	610b      	str	r3, [r1, #16]
 800fa96:	e005      	b.n	800faa4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800fa98:	4b64      	ldr	r3, [pc, #400]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fa9a:	691b      	ldr	r3, [r3, #16]
 800fa9c:	4a63      	ldr	r2, [pc, #396]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fa9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800faa2:	6113      	str	r3, [r2, #16]
 800faa4:	4b61      	ldr	r3, [pc, #388]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800faa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800faae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fab2:	495e      	ldr	r1, [pc, #376]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fab4:	4313      	orrs	r3, r2
 800fab6:	670b      	str	r3, [r1, #112]	; 0x70
 800fab8:	e004      	b.n	800fac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800faba:	7dfb      	ldrb	r3, [r7, #23]
 800fabc:	75bb      	strb	r3, [r7, #22]
 800fabe:	e001      	b.n	800fac4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fac0:	7dfb      	ldrb	r3, [r7, #23]
 800fac2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f003 0301 	and.w	r3, r3, #1
 800facc:	2b00      	cmp	r3, #0
 800face:	d07e      	beq.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fad4:	2b28      	cmp	r3, #40	; 0x28
 800fad6:	d867      	bhi.n	800fba8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800fad8:	a201      	add	r2, pc, #4	; (adr r2, 800fae0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800fada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fade:	bf00      	nop
 800fae0:	0800fbaf 	.word	0x0800fbaf
 800fae4:	0800fba9 	.word	0x0800fba9
 800fae8:	0800fba9 	.word	0x0800fba9
 800faec:	0800fba9 	.word	0x0800fba9
 800faf0:	0800fba9 	.word	0x0800fba9
 800faf4:	0800fba9 	.word	0x0800fba9
 800faf8:	0800fba9 	.word	0x0800fba9
 800fafc:	0800fba9 	.word	0x0800fba9
 800fb00:	0800fb85 	.word	0x0800fb85
 800fb04:	0800fba9 	.word	0x0800fba9
 800fb08:	0800fba9 	.word	0x0800fba9
 800fb0c:	0800fba9 	.word	0x0800fba9
 800fb10:	0800fba9 	.word	0x0800fba9
 800fb14:	0800fba9 	.word	0x0800fba9
 800fb18:	0800fba9 	.word	0x0800fba9
 800fb1c:	0800fba9 	.word	0x0800fba9
 800fb20:	0800fb97 	.word	0x0800fb97
 800fb24:	0800fba9 	.word	0x0800fba9
 800fb28:	0800fba9 	.word	0x0800fba9
 800fb2c:	0800fba9 	.word	0x0800fba9
 800fb30:	0800fba9 	.word	0x0800fba9
 800fb34:	0800fba9 	.word	0x0800fba9
 800fb38:	0800fba9 	.word	0x0800fba9
 800fb3c:	0800fba9 	.word	0x0800fba9
 800fb40:	0800fbaf 	.word	0x0800fbaf
 800fb44:	0800fba9 	.word	0x0800fba9
 800fb48:	0800fba9 	.word	0x0800fba9
 800fb4c:	0800fba9 	.word	0x0800fba9
 800fb50:	0800fba9 	.word	0x0800fba9
 800fb54:	0800fba9 	.word	0x0800fba9
 800fb58:	0800fba9 	.word	0x0800fba9
 800fb5c:	0800fba9 	.word	0x0800fba9
 800fb60:	0800fbaf 	.word	0x0800fbaf
 800fb64:	0800fba9 	.word	0x0800fba9
 800fb68:	0800fba9 	.word	0x0800fba9
 800fb6c:	0800fba9 	.word	0x0800fba9
 800fb70:	0800fba9 	.word	0x0800fba9
 800fb74:	0800fba9 	.word	0x0800fba9
 800fb78:	0800fba9 	.word	0x0800fba9
 800fb7c:	0800fba9 	.word	0x0800fba9
 800fb80:	0800fbaf 	.word	0x0800fbaf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	3304      	adds	r3, #4
 800fb88:	2101      	movs	r1, #1
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f001 fb5e 	bl	801124c <RCCEx_PLL2_Config>
 800fb90:	4603      	mov	r3, r0
 800fb92:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800fb94:	e00c      	b.n	800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	3324      	adds	r3, #36	; 0x24
 800fb9a:	2101      	movs	r1, #1
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f001 fc07 	bl	80113b0 <RCCEx_PLL3_Config>
 800fba2:	4603      	mov	r3, r0
 800fba4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800fba6:	e003      	b.n	800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	75fb      	strb	r3, [r7, #23]
      break;
 800fbac:	e000      	b.n	800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800fbae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fbb0:	7dfb      	ldrb	r3, [r7, #23]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d109      	bne.n	800fbca <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800fbb6:	4b1d      	ldr	r3, [pc, #116]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fbb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbc2:	491a      	ldr	r1, [pc, #104]	; (800fc2c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	654b      	str	r3, [r1, #84]	; 0x54
 800fbc8:	e001      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbca:	7dfb      	ldrb	r3, [r7, #23]
 800fbcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f003 0302 	and.w	r3, r3, #2
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d03e      	beq.n	800fc58 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbde:	2b05      	cmp	r3, #5
 800fbe0:	d820      	bhi.n	800fc24 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800fbe2:	a201      	add	r2, pc, #4	; (adr r2, 800fbe8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800fbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe8:	0800fc39 	.word	0x0800fc39
 800fbec:	0800fc01 	.word	0x0800fc01
 800fbf0:	0800fc13 	.word	0x0800fc13
 800fbf4:	0800fc39 	.word	0x0800fc39
 800fbf8:	0800fc39 	.word	0x0800fc39
 800fbfc:	0800fc39 	.word	0x0800fc39
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	3304      	adds	r3, #4
 800fc04:	2101      	movs	r1, #1
 800fc06:	4618      	mov	r0, r3
 800fc08:	f001 fb20 	bl	801124c <RCCEx_PLL2_Config>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800fc10:	e013      	b.n	800fc3a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	3324      	adds	r3, #36	; 0x24
 800fc16:	2101      	movs	r1, #1
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f001 fbc9 	bl	80113b0 <RCCEx_PLL3_Config>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800fc22:	e00a      	b.n	800fc3a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fc24:	2301      	movs	r3, #1
 800fc26:	75fb      	strb	r3, [r7, #23]
      break;
 800fc28:	e007      	b.n	800fc3a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800fc2a:	bf00      	nop
 800fc2c:	58024400 	.word	0x58024400
 800fc30:	58024800 	.word	0x58024800
 800fc34:	00ffffcf 	.word	0x00ffffcf
      break;
 800fc38:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fc3a:	7dfb      	ldrb	r3, [r7, #23]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d109      	bne.n	800fc54 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800fc40:	4b9f      	ldr	r3, [pc, #636]	; (800fec0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fc42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc44:	f023 0207 	bic.w	r2, r3, #7
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc4c:	499c      	ldr	r1, [pc, #624]	; (800fec0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	654b      	str	r3, [r1, #84]	; 0x54
 800fc52:	e001      	b.n	800fc58 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc54:	7dfb      	ldrb	r3, [r7, #23]
 800fc56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	f003 0304 	and.w	r3, r3, #4
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d039      	beq.n	800fcd8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc6a:	2b05      	cmp	r3, #5
 800fc6c:	d820      	bhi.n	800fcb0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800fc6e:	a201      	add	r2, pc, #4	; (adr r2, 800fc74 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800fc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc74:	0800fcb7 	.word	0x0800fcb7
 800fc78:	0800fc8d 	.word	0x0800fc8d
 800fc7c:	0800fc9f 	.word	0x0800fc9f
 800fc80:	0800fcb7 	.word	0x0800fcb7
 800fc84:	0800fcb7 	.word	0x0800fcb7
 800fc88:	0800fcb7 	.word	0x0800fcb7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	3304      	adds	r3, #4
 800fc90:	2101      	movs	r1, #1
 800fc92:	4618      	mov	r0, r3
 800fc94:	f001 fada 	bl	801124c <RCCEx_PLL2_Config>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800fc9c:	e00c      	b.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	3324      	adds	r3, #36	; 0x24
 800fca2:	2101      	movs	r1, #1
 800fca4:	4618      	mov	r0, r3
 800fca6:	f001 fb83 	bl	80113b0 <RCCEx_PLL3_Config>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800fcae:	e003      	b.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	75fb      	strb	r3, [r7, #23]
      break;
 800fcb4:	e000      	b.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800fcb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fcb8:	7dfb      	ldrb	r3, [r7, #23]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d10a      	bne.n	800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fcbe:	4b80      	ldr	r3, [pc, #512]	; (800fec0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fcc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcc2:	f023 0207 	bic.w	r2, r3, #7
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fccc:	497c      	ldr	r1, [pc, #496]	; (800fec0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	658b      	str	r3, [r1, #88]	; 0x58
 800fcd2:	e001      	b.n	800fcd8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcd4:	7dfb      	ldrb	r3, [r7, #23]
 800fcd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	f003 0320 	and.w	r3, r3, #32
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d04b      	beq.n	800fd7c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fcee:	d02e      	beq.n	800fd4e <HAL_RCCEx_PeriphCLKConfig+0x962>
 800fcf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fcf4:	d828      	bhi.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800fcf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcfa:	d02a      	beq.n	800fd52 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800fcfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd00:	d822      	bhi.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800fd02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fd06:	d026      	beq.n	800fd56 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800fd08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fd0c:	d81c      	bhi.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800fd0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fd12:	d010      	beq.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800fd14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fd18:	d816      	bhi.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d01d      	beq.n	800fd5a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800fd1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd22:	d111      	bne.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	3304      	adds	r3, #4
 800fd28:	2100      	movs	r1, #0
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f001 fa8e 	bl	801124c <RCCEx_PLL2_Config>
 800fd30:	4603      	mov	r3, r0
 800fd32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800fd34:	e012      	b.n	800fd5c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	3324      	adds	r3, #36	; 0x24
 800fd3a:	2102      	movs	r1, #2
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f001 fb37 	bl	80113b0 <RCCEx_PLL3_Config>
 800fd42:	4603      	mov	r3, r0
 800fd44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800fd46:	e009      	b.n	800fd5c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fd48:	2301      	movs	r3, #1
 800fd4a:	75fb      	strb	r3, [r7, #23]
      break;
 800fd4c:	e006      	b.n	800fd5c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800fd4e:	bf00      	nop
 800fd50:	e004      	b.n	800fd5c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800fd52:	bf00      	nop
 800fd54:	e002      	b.n	800fd5c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800fd56:	bf00      	nop
 800fd58:	e000      	b.n	800fd5c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800fd5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fd5c:	7dfb      	ldrb	r3, [r7, #23]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d10a      	bne.n	800fd78 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fd62:	4b57      	ldr	r3, [pc, #348]	; (800fec0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fd64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd70:	4953      	ldr	r1, [pc, #332]	; (800fec0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fd72:	4313      	orrs	r3, r2
 800fd74:	654b      	str	r3, [r1, #84]	; 0x54
 800fd76:	e001      	b.n	800fd7c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd78:	7dfb      	ldrb	r3, [r7, #23]
 800fd7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d04b      	beq.n	800fe20 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fd8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fd92:	d02e      	beq.n	800fdf2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800fd94:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fd98:	d828      	bhi.n	800fdec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800fd9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd9e:	d02a      	beq.n	800fdf6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800fda0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fda4:	d822      	bhi.n	800fdec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800fda6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fdaa:	d026      	beq.n	800fdfa <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800fdac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fdb0:	d81c      	bhi.n	800fdec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800fdb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fdb6:	d010      	beq.n	800fdda <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800fdb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fdbc:	d816      	bhi.n	800fdec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d01d      	beq.n	800fdfe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800fdc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fdc6:	d111      	bne.n	800fdec <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	3304      	adds	r3, #4
 800fdcc:	2100      	movs	r1, #0
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f001 fa3c 	bl	801124c <RCCEx_PLL2_Config>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800fdd8:	e012      	b.n	800fe00 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	3324      	adds	r3, #36	; 0x24
 800fdde:	2102      	movs	r1, #2
 800fde0:	4618      	mov	r0, r3
 800fde2:	f001 fae5 	bl	80113b0 <RCCEx_PLL3_Config>
 800fde6:	4603      	mov	r3, r0
 800fde8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800fdea:	e009      	b.n	800fe00 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fdec:	2301      	movs	r3, #1
 800fdee:	75fb      	strb	r3, [r7, #23]
      break;
 800fdf0:	e006      	b.n	800fe00 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800fdf2:	bf00      	nop
 800fdf4:	e004      	b.n	800fe00 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800fdf6:	bf00      	nop
 800fdf8:	e002      	b.n	800fe00 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800fdfa:	bf00      	nop
 800fdfc:	e000      	b.n	800fe00 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800fdfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fe00:	7dfb      	ldrb	r3, [r7, #23]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d10a      	bne.n	800fe1c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fe06:	4b2e      	ldr	r3, [pc, #184]	; (800fec0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fe08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe0a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fe14:	492a      	ldr	r1, [pc, #168]	; (800fec0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fe16:	4313      	orrs	r3, r2
 800fe18:	658b      	str	r3, [r1, #88]	; 0x58
 800fe1a:	e001      	b.n	800fe20 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe1c:	7dfb      	ldrb	r3, [r7, #23]
 800fe1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d04d      	beq.n	800fec8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fe32:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fe36:	d02e      	beq.n	800fe96 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800fe38:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fe3c:	d828      	bhi.n	800fe90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800fe3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe42:	d02a      	beq.n	800fe9a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800fe44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe48:	d822      	bhi.n	800fe90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800fe4a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fe4e:	d026      	beq.n	800fe9e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800fe50:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fe54:	d81c      	bhi.n	800fe90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800fe56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe5a:	d010      	beq.n	800fe7e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800fe5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe60:	d816      	bhi.n	800fe90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d01d      	beq.n	800fea2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800fe66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe6a:	d111      	bne.n	800fe90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	3304      	adds	r3, #4
 800fe70:	2100      	movs	r1, #0
 800fe72:	4618      	mov	r0, r3
 800fe74:	f001 f9ea 	bl	801124c <RCCEx_PLL2_Config>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800fe7c:	e012      	b.n	800fea4 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	3324      	adds	r3, #36	; 0x24
 800fe82:	2102      	movs	r1, #2
 800fe84:	4618      	mov	r0, r3
 800fe86:	f001 fa93 	bl	80113b0 <RCCEx_PLL3_Config>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800fe8e:	e009      	b.n	800fea4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fe90:	2301      	movs	r3, #1
 800fe92:	75fb      	strb	r3, [r7, #23]
      break;
 800fe94:	e006      	b.n	800fea4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800fe96:	bf00      	nop
 800fe98:	e004      	b.n	800fea4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800fe9a:	bf00      	nop
 800fe9c:	e002      	b.n	800fea4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800fe9e:	bf00      	nop
 800fea0:	e000      	b.n	800fea4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800fea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fea4:	7dfb      	ldrb	r3, [r7, #23]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d10c      	bne.n	800fec4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800feaa:	4b05      	ldr	r3, [pc, #20]	; (800fec0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800feac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800feae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800feb8:	4901      	ldr	r1, [pc, #4]	; (800fec0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800feba:	4313      	orrs	r3, r2
 800febc:	658b      	str	r3, [r1, #88]	; 0x58
 800febe:	e003      	b.n	800fec8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800fec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fec4:	7dfb      	ldrb	r3, [r7, #23]
 800fec6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f003 0308 	and.w	r3, r3, #8
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d018      	beq.n	800ff06 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fedc:	d10a      	bne.n	800fef4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	3324      	adds	r3, #36	; 0x24
 800fee2:	2102      	movs	r1, #2
 800fee4:	4618      	mov	r0, r3
 800fee6:	f001 fa63 	bl	80113b0 <RCCEx_PLL3_Config>
 800feea:	4603      	mov	r3, r0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d001      	beq.n	800fef4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800fef0:	2301      	movs	r3, #1
 800fef2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800fef4:	4b8a      	ldr	r3, [pc, #552]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800fef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fef8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff00:	4987      	ldr	r1, [pc, #540]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ff02:	4313      	orrs	r3, r2
 800ff04:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f003 0310 	and.w	r3, r3, #16
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d01a      	beq.n	800ff48 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff1c:	d10a      	bne.n	800ff34 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	3324      	adds	r3, #36	; 0x24
 800ff22:	2102      	movs	r1, #2
 800ff24:	4618      	mov	r0, r3
 800ff26:	f001 fa43 	bl	80113b0 <RCCEx_PLL3_Config>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d001      	beq.n	800ff34 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800ff30:	2301      	movs	r3, #1
 800ff32:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ff34:	4b7a      	ldr	r3, [pc, #488]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ff36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff42:	4977      	ldr	r1, [pc, #476]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ff44:	4313      	orrs	r3, r2
 800ff46:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d034      	beq.n	800ffbe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ff5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff5e:	d01d      	beq.n	800ff9c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800ff60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff64:	d817      	bhi.n	800ff96 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d003      	beq.n	800ff72 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800ff6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff6e:	d009      	beq.n	800ff84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ff70:	e011      	b.n	800ff96 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	3304      	adds	r3, #4
 800ff76:	2100      	movs	r1, #0
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f001 f967 	bl	801124c <RCCEx_PLL2_Config>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ff82:	e00c      	b.n	800ff9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	3324      	adds	r3, #36	; 0x24
 800ff88:	2102      	movs	r1, #2
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f001 fa10 	bl	80113b0 <RCCEx_PLL3_Config>
 800ff90:	4603      	mov	r3, r0
 800ff92:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ff94:	e003      	b.n	800ff9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ff96:	2301      	movs	r3, #1
 800ff98:	75fb      	strb	r3, [r7, #23]
      break;
 800ff9a:	e000      	b.n	800ff9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800ff9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ff9e:	7dfb      	ldrb	r3, [r7, #23]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d10a      	bne.n	800ffba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ffa4:	4b5e      	ldr	r3, [pc, #376]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ffa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ffb2:	495b      	ldr	r1, [pc, #364]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ffb4:	4313      	orrs	r3, r2
 800ffb6:	658b      	str	r3, [r1, #88]	; 0x58
 800ffb8:	e001      	b.n	800ffbe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ffba:	7dfb      	ldrb	r3, [r7, #23]
 800ffbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d033      	beq.n	8010032 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ffd4:	d01c      	beq.n	8010010 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ffd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ffda:	d816      	bhi.n	801000a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ffdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffe0:	d003      	beq.n	800ffea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ffe2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ffe6:	d007      	beq.n	800fff8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800ffe8:	e00f      	b.n	801000a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ffea:	4b4d      	ldr	r3, [pc, #308]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ffec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffee:	4a4c      	ldr	r2, [pc, #304]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800fff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fff4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800fff6:	e00c      	b.n	8010012 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	3324      	adds	r3, #36	; 0x24
 800fffc:	2101      	movs	r1, #1
 800fffe:	4618      	mov	r0, r3
 8010000:	f001 f9d6 	bl	80113b0 <RCCEx_PLL3_Config>
 8010004:	4603      	mov	r3, r0
 8010006:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8010008:	e003      	b.n	8010012 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801000a:	2301      	movs	r3, #1
 801000c:	75fb      	strb	r3, [r7, #23]
      break;
 801000e:	e000      	b.n	8010012 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8010010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010012:	7dfb      	ldrb	r3, [r7, #23]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d10a      	bne.n	801002e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010018:	4b41      	ldr	r3, [pc, #260]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 801001a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801001c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010026:	493e      	ldr	r1, [pc, #248]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010028:	4313      	orrs	r3, r2
 801002a:	654b      	str	r3, [r1, #84]	; 0x54
 801002c:	e001      	b.n	8010032 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801002e:	7dfb      	ldrb	r3, [r7, #23]
 8010030:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801003a:	2b00      	cmp	r3, #0
 801003c:	d029      	beq.n	8010092 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010042:	2b00      	cmp	r3, #0
 8010044:	d003      	beq.n	801004e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8010046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801004a:	d007      	beq.n	801005c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 801004c:	e00f      	b.n	801006e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801004e:	4b34      	ldr	r3, [pc, #208]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010052:	4a33      	ldr	r2, [pc, #204]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010058:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801005a:	e00b      	b.n	8010074 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	3304      	adds	r3, #4
 8010060:	2102      	movs	r1, #2
 8010062:	4618      	mov	r0, r3
 8010064:	f001 f8f2 	bl	801124c <RCCEx_PLL2_Config>
 8010068:	4603      	mov	r3, r0
 801006a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801006c:	e002      	b.n	8010074 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 801006e:	2301      	movs	r3, #1
 8010070:	75fb      	strb	r3, [r7, #23]
      break;
 8010072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010074:	7dfb      	ldrb	r3, [r7, #23]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d109      	bne.n	801008e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801007a:	4b29      	ldr	r3, [pc, #164]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 801007c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801007e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010086:	4926      	ldr	r1, [pc, #152]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010088:	4313      	orrs	r3, r2
 801008a:	64cb      	str	r3, [r1, #76]	; 0x4c
 801008c:	e001      	b.n	8010092 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801008e:	7dfb      	ldrb	r3, [r7, #23]
 8010090:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801009a:	2b00      	cmp	r3, #0
 801009c:	d00a      	beq.n	80100b4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	3324      	adds	r3, #36	; 0x24
 80100a2:	2102      	movs	r1, #2
 80100a4:	4618      	mov	r0, r3
 80100a6:	f001 f983 	bl	80113b0 <RCCEx_PLL3_Config>
 80100aa:	4603      	mov	r3, r0
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d001      	beq.n	80100b4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80100b0:	2301      	movs	r3, #1
 80100b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d033      	beq.n	8010128 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80100c8:	d017      	beq.n	80100fa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80100ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80100ce:	d811      	bhi.n	80100f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80100d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100d4:	d013      	beq.n	80100fe <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80100d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100da:	d80b      	bhi.n	80100f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d010      	beq.n	8010102 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80100e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100e4:	d106      	bne.n	80100f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80100e6:	4b0e      	ldr	r3, [pc, #56]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80100e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100ea:	4a0d      	ldr	r2, [pc, #52]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80100ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80100f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80100f2:	e007      	b.n	8010104 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80100f4:	2301      	movs	r3, #1
 80100f6:	75fb      	strb	r3, [r7, #23]
      break;
 80100f8:	e004      	b.n	8010104 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80100fa:	bf00      	nop
 80100fc:	e002      	b.n	8010104 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80100fe:	bf00      	nop
 8010100:	e000      	b.n	8010104 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8010102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010104:	7dfb      	ldrb	r3, [r7, #23]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d10c      	bne.n	8010124 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801010a:	4b05      	ldr	r3, [pc, #20]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 801010c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801010e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010116:	4902      	ldr	r1, [pc, #8]	; (8010120 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010118:	4313      	orrs	r3, r2
 801011a:	654b      	str	r3, [r1, #84]	; 0x54
 801011c:	e004      	b.n	8010128 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 801011e:	bf00      	nop
 8010120:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010124:	7dfb      	ldrb	r3, [r7, #23]
 8010126:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010130:	2b00      	cmp	r3, #0
 8010132:	d008      	beq.n	8010146 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010134:	4b29      	ldr	r3, [pc, #164]	; (80101dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8010136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010138:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010140:	4926      	ldr	r1, [pc, #152]	; (80101dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8010142:	4313      	orrs	r3, r2
 8010144:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801014e:	2b00      	cmp	r3, #0
 8010150:	d008      	beq.n	8010164 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010152:	4b22      	ldr	r3, [pc, #136]	; (80101dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8010154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010156:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801015e:	491f      	ldr	r1, [pc, #124]	; (80101dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8010160:	4313      	orrs	r3, r2
 8010162:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801016c:	2b00      	cmp	r3, #0
 801016e:	d00d      	beq.n	801018c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010170:	4b1a      	ldr	r3, [pc, #104]	; (80101dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8010172:	691b      	ldr	r3, [r3, #16]
 8010174:	4a19      	ldr	r2, [pc, #100]	; (80101dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8010176:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801017a:	6113      	str	r3, [r2, #16]
 801017c:	4b17      	ldr	r3, [pc, #92]	; (80101dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801017e:	691a      	ldr	r2, [r3, #16]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010186:	4915      	ldr	r1, [pc, #84]	; (80101dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8010188:	4313      	orrs	r3, r2
 801018a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	2b00      	cmp	r3, #0
 8010192:	da08      	bge.n	80101a6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010194:	4b11      	ldr	r3, [pc, #68]	; (80101dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8010196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010198:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101a0:	490e      	ldr	r1, [pc, #56]	; (80101dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80101a2:	4313      	orrs	r3, r2
 80101a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d009      	beq.n	80101c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80101b2:	4b0a      	ldr	r3, [pc, #40]	; (80101dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80101b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101c0:	4906      	ldr	r1, [pc, #24]	; (80101dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80101c2:	4313      	orrs	r3, r2
 80101c4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80101c6:	7dbb      	ldrb	r3, [r7, #22]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d101      	bne.n	80101d0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80101cc:	2300      	movs	r3, #0
 80101ce:	e000      	b.n	80101d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80101d0:	2301      	movs	r3, #1
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3718      	adds	r7, #24
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	bf00      	nop
 80101dc:	58024400 	.word	0x58024400

080101e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b090      	sub	sp, #64	; 0x40
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101ee:	f040 8089 	bne.w	8010304 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80101f2:	4b95      	ldr	r3, [pc, #596]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80101f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101f6:	f003 0307 	and.w	r3, r3, #7
 80101fa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80101fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101fe:	2b04      	cmp	r3, #4
 8010200:	d87d      	bhi.n	80102fe <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8010202:	a201      	add	r2, pc, #4	; (adr r2, 8010208 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8010204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010208:	0801021d 	.word	0x0801021d
 801020c:	08010241 	.word	0x08010241
 8010210:	08010265 	.word	0x08010265
 8010214:	080102f9 	.word	0x080102f9
 8010218:	08010289 	.word	0x08010289
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801021c:	4b8a      	ldr	r3, [pc, #552]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010228:	d107      	bne.n	801023a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801022a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801022e:	4618      	mov	r0, r3
 8010230:	f000 feba 	bl	8010fa8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8010234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010236:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010238:	e3ef      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 801023a:	2300      	movs	r3, #0
 801023c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801023e:	e3ec      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010240:	4b81      	ldr	r3, [pc, #516]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801024c:	d107      	bne.n	801025e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801024e:	f107 0318 	add.w	r3, r7, #24
 8010252:	4618      	mov	r0, r3
 8010254:	f000 fc00 	bl	8010a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010258:	69bb      	ldr	r3, [r7, #24]
 801025a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801025c:	e3dd      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 801025e:	2300      	movs	r3, #0
 8010260:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010262:	e3da      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010264:	4b78      	ldr	r3, [pc, #480]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801026c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010270:	d107      	bne.n	8010282 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010272:	f107 030c 	add.w	r3, r7, #12
 8010276:	4618      	mov	r0, r3
 8010278:	f000 fd42 	bl	8010d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010280:	e3cb      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010282:	2300      	movs	r3, #0
 8010284:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010286:	e3c8      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8010288:	4b6f      	ldr	r3, [pc, #444]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 801028a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801028c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010290:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010292:	4b6d      	ldr	r3, [pc, #436]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	f003 0304 	and.w	r3, r3, #4
 801029a:	2b04      	cmp	r3, #4
 801029c:	d10c      	bne.n	80102b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 801029e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d109      	bne.n	80102b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80102a4:	4b68      	ldr	r3, [pc, #416]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	08db      	lsrs	r3, r3, #3
 80102aa:	f003 0303 	and.w	r3, r3, #3
 80102ae:	4a67      	ldr	r2, [pc, #412]	; (801044c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80102b0:	fa22 f303 	lsr.w	r3, r2, r3
 80102b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102b6:	e01e      	b.n	80102f6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80102b8:	4b63      	ldr	r3, [pc, #396]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102c4:	d106      	bne.n	80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80102c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80102cc:	d102      	bne.n	80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80102ce:	4b60      	ldr	r3, [pc, #384]	; (8010450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80102d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102d2:	e010      	b.n	80102f6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80102d4:	4b5c      	ldr	r3, [pc, #368]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80102dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80102e0:	d106      	bne.n	80102f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80102e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102e8:	d102      	bne.n	80102f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80102ea:	4b5a      	ldr	r3, [pc, #360]	; (8010454 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80102ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102ee:	e002      	b.n	80102f6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80102f0:	2300      	movs	r3, #0
 80102f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80102f4:	e391      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80102f6:	e390      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80102f8:	4b57      	ldr	r3, [pc, #348]	; (8010458 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80102fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80102fc:	e38d      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 80102fe:	2300      	movs	r3, #0
 8010300:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010302:	e38a      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801030a:	f040 80a7 	bne.w	801045c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 801030e:	4b4e      	ldr	r3, [pc, #312]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010312:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8010316:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8010318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801031e:	d054      	beq.n	80103ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8010320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010322:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010326:	f200 808b 	bhi.w	8010440 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 801032a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010330:	f000 8083 	beq.w	801043a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010336:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801033a:	f200 8081 	bhi.w	8010440 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 801033e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010344:	d02f      	beq.n	80103a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8010346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801034c:	d878      	bhi.n	8010440 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 801034e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010350:	2b00      	cmp	r3, #0
 8010352:	d004      	beq.n	801035e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8010354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010356:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801035a:	d012      	beq.n	8010382 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 801035c:	e070      	b.n	8010440 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801035e:	4b3a      	ldr	r3, [pc, #232]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010366:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801036a:	d107      	bne.n	801037c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801036c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010370:	4618      	mov	r0, r3
 8010372:	f000 fe19 	bl	8010fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010378:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801037a:	e34e      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 801037c:	2300      	movs	r3, #0
 801037e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010380:	e34b      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010382:	4b31      	ldr	r3, [pc, #196]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801038a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801038e:	d107      	bne.n	80103a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010390:	f107 0318 	add.w	r3, r7, #24
 8010394:	4618      	mov	r0, r3
 8010396:	f000 fb5f 	bl	8010a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801039a:	69bb      	ldr	r3, [r7, #24]
 801039c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801039e:	e33c      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80103a0:	2300      	movs	r3, #0
 80103a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80103a4:	e339      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80103a6:	4b28      	ldr	r3, [pc, #160]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80103ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80103b2:	d107      	bne.n	80103c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103b4:	f107 030c 	add.w	r3, r7, #12
 80103b8:	4618      	mov	r0, r3
 80103ba:	f000 fca1 	bl	8010d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80103c2:	e32a      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80103c4:	2300      	movs	r3, #0
 80103c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80103c8:	e327      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80103ca:	4b1f      	ldr	r3, [pc, #124]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80103cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80103d2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80103d4:	4b1c      	ldr	r3, [pc, #112]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f003 0304 	and.w	r3, r3, #4
 80103dc:	2b04      	cmp	r3, #4
 80103de:	d10c      	bne.n	80103fa <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80103e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d109      	bne.n	80103fa <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80103e6:	4b18      	ldr	r3, [pc, #96]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	08db      	lsrs	r3, r3, #3
 80103ec:	f003 0303 	and.w	r3, r3, #3
 80103f0:	4a16      	ldr	r2, [pc, #88]	; (801044c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80103f2:	fa22 f303 	lsr.w	r3, r2, r3
 80103f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103f8:	e01e      	b.n	8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80103fa:	4b13      	ldr	r3, [pc, #76]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010406:	d106      	bne.n	8010416 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8010408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801040e:	d102      	bne.n	8010416 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8010410:	4b0f      	ldr	r3, [pc, #60]	; (8010450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8010412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010414:	e010      	b.n	8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010416:	4b0c      	ldr	r3, [pc, #48]	; (8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801041e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010422:	d106      	bne.n	8010432 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8010424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801042a:	d102      	bne.n	8010432 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 801042c:	4b09      	ldr	r3, [pc, #36]	; (8010454 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 801042e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010430:	e002      	b.n	8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8010432:	2300      	movs	r3, #0
 8010434:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8010436:	e2f0      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010438:	e2ef      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801043a:	4b07      	ldr	r3, [pc, #28]	; (8010458 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 801043c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801043e:	e2ec      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8010440:	2300      	movs	r3, #0
 8010442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010444:	e2e9      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010446:	bf00      	nop
 8010448:	58024400 	.word	0x58024400
 801044c:	03d09000 	.word	0x03d09000
 8010450:	003d0900 	.word	0x003d0900
 8010454:	017d7840 	.word	0x017d7840
 8010458:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010462:	f040 809c 	bne.w	801059e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8010466:	4b9d      	ldr	r3, [pc, #628]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801046a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801046e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8010470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010472:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010476:	d054      	beq.n	8010522 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8010478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801047a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801047e:	f200 808b 	bhi.w	8010598 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8010482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010484:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010488:	f000 8083 	beq.w	8010592 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801048c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801048e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010492:	f200 8081 	bhi.w	8010598 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8010496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010498:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801049c:	d02f      	beq.n	80104fe <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 801049e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80104a4:	d878      	bhi.n	8010598 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80104a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d004      	beq.n	80104b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80104ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80104b2:	d012      	beq.n	80104da <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80104b4:	e070      	b.n	8010598 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80104b6:	4b89      	ldr	r3, [pc, #548]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80104c2:	d107      	bne.n	80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80104c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80104c8:	4618      	mov	r0, r3
 80104ca:	f000 fd6d 	bl	8010fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80104ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80104d2:	e2a2      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80104d4:	2300      	movs	r3, #0
 80104d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80104d8:	e29f      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80104da:	4b80      	ldr	r3, [pc, #512]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80104e6:	d107      	bne.n	80104f8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104e8:	f107 0318 	add.w	r3, r7, #24
 80104ec:	4618      	mov	r0, r3
 80104ee:	f000 fab3 	bl	8010a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80104f2:	69bb      	ldr	r3, [r7, #24]
 80104f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80104f6:	e290      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80104f8:	2300      	movs	r3, #0
 80104fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80104fc:	e28d      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80104fe:	4b77      	ldr	r3, [pc, #476]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801050a:	d107      	bne.n	801051c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801050c:	f107 030c 	add.w	r3, r7, #12
 8010510:	4618      	mov	r0, r3
 8010512:	f000 fbf5 	bl	8010d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801051a:	e27e      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 801051c:	2300      	movs	r3, #0
 801051e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010520:	e27b      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8010522:	4b6e      	ldr	r3, [pc, #440]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010526:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801052a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801052c:	4b6b      	ldr	r3, [pc, #428]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f003 0304 	and.w	r3, r3, #4
 8010534:	2b04      	cmp	r3, #4
 8010536:	d10c      	bne.n	8010552 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8010538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801053a:	2b00      	cmp	r3, #0
 801053c:	d109      	bne.n	8010552 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801053e:	4b67      	ldr	r3, [pc, #412]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	08db      	lsrs	r3, r3, #3
 8010544:	f003 0303 	and.w	r3, r3, #3
 8010548:	4a65      	ldr	r2, [pc, #404]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 801054a:	fa22 f303 	lsr.w	r3, r2, r3
 801054e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010550:	e01e      	b.n	8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010552:	4b62      	ldr	r3, [pc, #392]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801055a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801055e:	d106      	bne.n	801056e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8010560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010566:	d102      	bne.n	801056e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8010568:	4b5e      	ldr	r3, [pc, #376]	; (80106e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 801056a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801056c:	e010      	b.n	8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801056e:	4b5b      	ldr	r3, [pc, #364]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801057a:	d106      	bne.n	801058a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 801057c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801057e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010582:	d102      	bne.n	801058a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8010584:	4b58      	ldr	r3, [pc, #352]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8010586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010588:	e002      	b.n	8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 801058a:	2300      	movs	r3, #0
 801058c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 801058e:	e244      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010590:	e243      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8010592:	4b56      	ldr	r3, [pc, #344]	; (80106ec <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8010594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010596:	e240      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8010598:	2300      	movs	r3, #0
 801059a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801059c:	e23d      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105a4:	f040 80a7 	bne.w	80106f6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80105a8:	4b4c      	ldr	r3, [pc, #304]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80105aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105ac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80105b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80105b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80105b8:	d055      	beq.n	8010666 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 80105ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80105c0:	f200 8096 	bhi.w	80106f0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80105c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80105ca:	f000 8084 	beq.w	80106d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80105ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80105d4:	f200 808c 	bhi.w	80106f0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80105d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105de:	d030      	beq.n	8010642 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80105e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105e6:	f200 8083 	bhi.w	80106f0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80105ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d004      	beq.n	80105fa <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 80105f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105f6:	d012      	beq.n	801061e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 80105f8:	e07a      	b.n	80106f0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80105fa:	4b38      	ldr	r3, [pc, #224]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010606:	d107      	bne.n	8010618 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801060c:	4618      	mov	r0, r3
 801060e:	f000 fccb 	bl	8010fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010614:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010616:	e200      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010618:	2300      	movs	r3, #0
 801061a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801061c:	e1fd      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801061e:	4b2f      	ldr	r3, [pc, #188]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801062a:	d107      	bne.n	801063c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801062c:	f107 0318 	add.w	r3, r7, #24
 8010630:	4618      	mov	r0, r3
 8010632:	f000 fa11 	bl	8010a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010636:	69bb      	ldr	r3, [r7, #24]
 8010638:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801063a:	e1ee      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 801063c:	2300      	movs	r3, #0
 801063e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010640:	e1eb      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010642:	4b26      	ldr	r3, [pc, #152]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801064a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801064e:	d107      	bne.n	8010660 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010650:	f107 030c 	add.w	r3, r7, #12
 8010654:	4618      	mov	r0, r3
 8010656:	f000 fb53 	bl	8010d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801065e:	e1dc      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010660:	2300      	movs	r3, #0
 8010662:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010664:	e1d9      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8010666:	4b1d      	ldr	r3, [pc, #116]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801066a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801066e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010670:	4b1a      	ldr	r3, [pc, #104]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	f003 0304 	and.w	r3, r3, #4
 8010678:	2b04      	cmp	r3, #4
 801067a:	d10c      	bne.n	8010696 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 801067c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801067e:	2b00      	cmp	r3, #0
 8010680:	d109      	bne.n	8010696 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010682:	4b16      	ldr	r3, [pc, #88]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	08db      	lsrs	r3, r3, #3
 8010688:	f003 0303 	and.w	r3, r3, #3
 801068c:	4a14      	ldr	r2, [pc, #80]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 801068e:	fa22 f303 	lsr.w	r3, r2, r3
 8010692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010694:	e01e      	b.n	80106d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010696:	4b11      	ldr	r3, [pc, #68]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801069e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106a2:	d106      	bne.n	80106b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 80106a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106aa:	d102      	bne.n	80106b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80106ac:	4b0d      	ldr	r3, [pc, #52]	; (80106e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80106ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106b0:	e010      	b.n	80106d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80106b2:	4b0a      	ldr	r3, [pc, #40]	; (80106dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106be:	d106      	bne.n	80106ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80106c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106c6:	d102      	bne.n	80106ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80106c8:	4b07      	ldr	r3, [pc, #28]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80106ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106cc:	e002      	b.n	80106d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80106ce:	2300      	movs	r3, #0
 80106d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80106d2:	e1a2      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80106d4:	e1a1      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80106d6:	4b05      	ldr	r3, [pc, #20]	; (80106ec <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80106d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80106da:	e19e      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80106dc:	58024400 	.word	0x58024400
 80106e0:	03d09000 	.word	0x03d09000
 80106e4:	003d0900 	.word	0x003d0900
 80106e8:	017d7840 	.word	0x017d7840
 80106ec:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 80106f0:	2300      	movs	r3, #0
 80106f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80106f4:	e191      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80106fc:	d173      	bne.n	80107e6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80106fe:	4b9b      	ldr	r3, [pc, #620]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010702:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010706:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8010708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801070e:	d02f      	beq.n	8010770 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8010710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010716:	d863      	bhi.n	80107e0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8010718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071a:	2b00      	cmp	r3, #0
 801071c:	d004      	beq.n	8010728 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 801071e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010724:	d012      	beq.n	801074c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8010726:	e05b      	b.n	80107e0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010728:	4b90      	ldr	r3, [pc, #576]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010734:	d107      	bne.n	8010746 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010736:	f107 0318 	add.w	r3, r7, #24
 801073a:	4618      	mov	r0, r3
 801073c:	f000 f98c 	bl	8010a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010744:	e169      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010746:	2300      	movs	r3, #0
 8010748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801074a:	e166      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801074c:	4b87      	ldr	r3, [pc, #540]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010758:	d107      	bne.n	801076a <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801075a:	f107 030c 	add.w	r3, r7, #12
 801075e:	4618      	mov	r0, r3
 8010760:	f000 face 	bl	8010d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010768:	e157      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 801076a:	2300      	movs	r3, #0
 801076c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801076e:	e154      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8010770:	4b7e      	ldr	r3, [pc, #504]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010774:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010778:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801077a:	4b7c      	ldr	r3, [pc, #496]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	f003 0304 	and.w	r3, r3, #4
 8010782:	2b04      	cmp	r3, #4
 8010784:	d10c      	bne.n	80107a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8010786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010788:	2b00      	cmp	r3, #0
 801078a:	d109      	bne.n	80107a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801078c:	4b77      	ldr	r3, [pc, #476]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	08db      	lsrs	r3, r3, #3
 8010792:	f003 0303 	and.w	r3, r3, #3
 8010796:	4a76      	ldr	r2, [pc, #472]	; (8010970 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8010798:	fa22 f303 	lsr.w	r3, r2, r3
 801079c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801079e:	e01e      	b.n	80107de <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80107a0:	4b72      	ldr	r3, [pc, #456]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107ac:	d106      	bne.n	80107bc <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 80107ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107b4:	d102      	bne.n	80107bc <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80107b6:	4b6f      	ldr	r3, [pc, #444]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80107b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107ba:	e010      	b.n	80107de <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80107bc:	4b6b      	ldr	r3, [pc, #428]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107c8:	d106      	bne.n	80107d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 80107ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107d0:	d102      	bne.n	80107d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80107d2:	4b69      	ldr	r3, [pc, #420]	; (8010978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80107d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107d6:	e002      	b.n	80107de <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80107d8:	2300      	movs	r3, #0
 80107da:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80107dc:	e11d      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80107de:	e11c      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 80107e0:	2300      	movs	r3, #0
 80107e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80107e4:	e119      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107ec:	d133      	bne.n	8010856 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80107ee:	4b5f      	ldr	r3, [pc, #380]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80107f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80107f6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80107f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d004      	beq.n	8010808 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 80107fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010804:	d012      	beq.n	801082c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8010806:	e023      	b.n	8010850 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010808:	4b58      	ldr	r3, [pc, #352]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010814:	d107      	bne.n	8010826 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801081a:	4618      	mov	r0, r3
 801081c:	f000 fbc4 	bl	8010fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010822:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010824:	e0f9      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010826:	2300      	movs	r3, #0
 8010828:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801082a:	e0f6      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801082c:	4b4f      	ldr	r3, [pc, #316]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010838:	d107      	bne.n	801084a <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801083a:	f107 0318 	add.w	r3, r7, #24
 801083e:	4618      	mov	r0, r3
 8010840:	f000 f90a 	bl	8010a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010844:	6a3b      	ldr	r3, [r7, #32]
 8010846:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010848:	e0e7      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 801084a:	2300      	movs	r3, #0
 801084c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801084e:	e0e4      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8010850:	2300      	movs	r3, #0
 8010852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010854:	e0e1      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801085c:	f040 808e 	bne.w	801097c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8010860:	4b42      	ldr	r3, [pc, #264]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010864:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010868:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801086a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010870:	d06b      	beq.n	801094a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8010872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010878:	d874      	bhi.n	8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 801087a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010880:	d056      	beq.n	8010930 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 8010882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010888:	d86c      	bhi.n	8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 801088a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010890:	d03b      	beq.n	801090a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8010892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010894:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010898:	d864      	bhi.n	8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 801089a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801089c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108a0:	d021      	beq.n	80108e6 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 80108a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108a8:	d85c      	bhi.n	8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80108aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d004      	beq.n	80108ba <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80108b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80108b6:	d004      	beq.n	80108c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 80108b8:	e054      	b.n	8010964 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80108ba:	f000 f8b7 	bl	8010a2c <HAL_RCCEx_GetD3PCLK1Freq>
 80108be:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80108c0:	e0ab      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80108c2:	4b2a      	ldr	r3, [pc, #168]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80108ce:	d107      	bne.n	80108e0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80108d0:	f107 0318 	add.w	r3, r7, #24
 80108d4:	4618      	mov	r0, r3
 80108d6:	f000 f8bf 	bl	8010a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80108da:	69fb      	ldr	r3, [r7, #28]
 80108dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80108de:	e09c      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80108e0:	2300      	movs	r3, #0
 80108e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80108e4:	e099      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80108e6:	4b21      	ldr	r3, [pc, #132]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108f2:	d107      	bne.n	8010904 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80108f4:	f107 030c 	add.w	r3, r7, #12
 80108f8:	4618      	mov	r0, r3
 80108fa:	f000 fa01 	bl	8010d00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010902:	e08a      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010904:	2300      	movs	r3, #0
 8010906:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010908:	e087      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801090a:	4b18      	ldr	r3, [pc, #96]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f003 0304 	and.w	r3, r3, #4
 8010912:	2b04      	cmp	r3, #4
 8010914:	d109      	bne.n	801092a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010916:	4b15      	ldr	r3, [pc, #84]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	08db      	lsrs	r3, r3, #3
 801091c:	f003 0303 	and.w	r3, r3, #3
 8010920:	4a13      	ldr	r2, [pc, #76]	; (8010970 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8010922:	fa22 f303 	lsr.w	r3, r2, r3
 8010926:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010928:	e077      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 801092a:	2300      	movs	r3, #0
 801092c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801092e:	e074      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010930:	4b0e      	ldr	r3, [pc, #56]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801093c:	d102      	bne.n	8010944 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 801093e:	4b0d      	ldr	r3, [pc, #52]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8010940:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010942:	e06a      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010944:	2300      	movs	r3, #0
 8010946:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010948:	e067      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801094a:	4b08      	ldr	r3, [pc, #32]	; (801096c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010956:	d102      	bne.n	801095e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 8010958:	4b07      	ldr	r3, [pc, #28]	; (8010978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 801095a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 801095c:	e05d      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 801095e:	2300      	movs	r3, #0
 8010960:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010962:	e05a      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8010964:	2300      	movs	r3, #0
 8010966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010968:	e057      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801096a:	bf00      	nop
 801096c:	58024400 	.word	0x58024400
 8010970:	03d09000 	.word	0x03d09000
 8010974:	003d0900 	.word	0x003d0900
 8010978:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010982:	d148      	bne.n	8010a16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8010984:	4b27      	ldr	r3, [pc, #156]	; (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8010986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010988:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801098c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801098e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010994:	d02a      	beq.n	80109ec <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8010996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801099c:	d838      	bhi.n	8010a10 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 801099e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d004      	beq.n	80109ae <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 80109a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80109aa:	d00d      	beq.n	80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 80109ac:	e030      	b.n	8010a10 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80109ae:	4b1d      	ldr	r3, [pc, #116]	; (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80109b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80109ba:	d102      	bne.n	80109c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 80109bc:	4b1a      	ldr	r3, [pc, #104]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80109be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80109c0:	e02b      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80109c2:	2300      	movs	r3, #0
 80109c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80109c6:	e028      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80109c8:	4b16      	ldr	r3, [pc, #88]	; (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80109d4:	d107      	bne.n	80109e6 <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80109d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80109da:	4618      	mov	r0, r3
 80109dc:	f000 fae4 	bl	8010fa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80109e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80109e4:	e019      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80109e6:	2300      	movs	r3, #0
 80109e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80109ea:	e016      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80109ec:	4b0d      	ldr	r3, [pc, #52]	; (8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80109f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80109f8:	d107      	bne.n	8010a0a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80109fa:	f107 0318 	add.w	r3, r7, #24
 80109fe:	4618      	mov	r0, r3
 8010a00:	f000 f82a 	bl	8010a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010a04:	69fb      	ldr	r3, [r7, #28]
 8010a06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010a08:	e007      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010a0e:	e004      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8010a10:	2300      	movs	r3, #0
 8010a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010a14:	e001      	b.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 8010a16:	2300      	movs	r3, #0
 8010a18:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8010a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3740      	adds	r7, #64	; 0x40
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}
 8010a24:	58024400 	.word	0x58024400
 8010a28:	017d7840 	.word	0x017d7840

08010a2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010a30:	f7fe fc80 	bl	800f334 <HAL_RCC_GetHCLKFreq>
 8010a34:	4602      	mov	r2, r0
 8010a36:	4b06      	ldr	r3, [pc, #24]	; (8010a50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010a38:	6a1b      	ldr	r3, [r3, #32]
 8010a3a:	091b      	lsrs	r3, r3, #4
 8010a3c:	f003 0307 	and.w	r3, r3, #7
 8010a40:	4904      	ldr	r1, [pc, #16]	; (8010a54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010a42:	5ccb      	ldrb	r3, [r1, r3]
 8010a44:	f003 031f 	and.w	r3, r3, #31
 8010a48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	58024400 	.word	0x58024400
 8010a54:	080182d0 	.word	0x080182d0

08010a58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b089      	sub	sp, #36	; 0x24
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010a60:	4ba1      	ldr	r3, [pc, #644]	; (8010ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a64:	f003 0303 	and.w	r3, r3, #3
 8010a68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8010a6a:	4b9f      	ldr	r3, [pc, #636]	; (8010ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a6e:	0b1b      	lsrs	r3, r3, #12
 8010a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010a76:	4b9c      	ldr	r3, [pc, #624]	; (8010ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a7a:	091b      	lsrs	r3, r3, #4
 8010a7c:	f003 0301 	and.w	r3, r3, #1
 8010a80:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8010a82:	4b99      	ldr	r3, [pc, #612]	; (8010ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a86:	08db      	lsrs	r3, r3, #3
 8010a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a8c:	693a      	ldr	r2, [r7, #16]
 8010a8e:	fb02 f303 	mul.w	r3, r2, r3
 8010a92:	ee07 3a90 	vmov	s15, r3
 8010a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	f000 8111 	beq.w	8010cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010aa6:	69bb      	ldr	r3, [r7, #24]
 8010aa8:	2b02      	cmp	r3, #2
 8010aaa:	f000 8083 	beq.w	8010bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	2b02      	cmp	r3, #2
 8010ab2:	f200 80a1 	bhi.w	8010bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010ab6:	69bb      	ldr	r3, [r7, #24]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d003      	beq.n	8010ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010abc:	69bb      	ldr	r3, [r7, #24]
 8010abe:	2b01      	cmp	r3, #1
 8010ac0:	d056      	beq.n	8010b70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010ac2:	e099      	b.n	8010bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010ac4:	4b88      	ldr	r3, [pc, #544]	; (8010ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	f003 0320 	and.w	r3, r3, #32
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d02d      	beq.n	8010b2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010ad0:	4b85      	ldr	r3, [pc, #532]	; (8010ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	08db      	lsrs	r3, r3, #3
 8010ad6:	f003 0303 	and.w	r3, r3, #3
 8010ada:	4a84      	ldr	r2, [pc, #528]	; (8010cec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010adc:	fa22 f303 	lsr.w	r3, r2, r3
 8010ae0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	ee07 3a90 	vmov	s15, r3
 8010ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	ee07 3a90 	vmov	s15, r3
 8010af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010afa:	4b7b      	ldr	r3, [pc, #492]	; (8010ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b02:	ee07 3a90 	vmov	s15, r3
 8010b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8010b2a:	e087      	b.n	8010c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	ee07 3a90 	vmov	s15, r3
 8010b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b3e:	4b6a      	ldr	r3, [pc, #424]	; (8010ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b46:	ee07 3a90 	vmov	s15, r3
 8010b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010b6e:	e065      	b.n	8010c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	ee07 3a90 	vmov	s15, r3
 8010b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b82:	4b59      	ldr	r3, [pc, #356]	; (8010ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b8a:	ee07 3a90 	vmov	s15, r3
 8010b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010bb2:	e043      	b.n	8010c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	ee07 3a90 	vmov	s15, r3
 8010bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010cfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bc6:	4b48      	ldr	r3, [pc, #288]	; (8010ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bce:	ee07 3a90 	vmov	s15, r3
 8010bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010bf6:	e021      	b.n	8010c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	ee07 3a90 	vmov	s15, r3
 8010bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c0a:	4b37      	ldr	r3, [pc, #220]	; (8010ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c12:	ee07 3a90 	vmov	s15, r3
 8010c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010c3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8010c3c:	4b2a      	ldr	r3, [pc, #168]	; (8010ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c40:	0a5b      	lsrs	r3, r3, #9
 8010c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c46:	ee07 3a90 	vmov	s15, r3
 8010c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c62:	ee17 2a90 	vmov	r2, s15
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8010c6a:	4b1f      	ldr	r3, [pc, #124]	; (8010ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c6e:	0c1b      	lsrs	r3, r3, #16
 8010c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c74:	ee07 3a90 	vmov	s15, r3
 8010c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c84:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c90:	ee17 2a90 	vmov	r2, s15
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8010c98:	4b13      	ldr	r3, [pc, #76]	; (8010ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c9c:	0e1b      	lsrs	r3, r3, #24
 8010c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ca2:	ee07 3a90 	vmov	s15, r3
 8010ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010cae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8010cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010cbe:	ee17 2a90 	vmov	r2, s15
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010cc6:	e008      	b.n	8010cda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	609a      	str	r2, [r3, #8]
}
 8010cda:	bf00      	nop
 8010cdc:	3724      	adds	r7, #36	; 0x24
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce4:	4770      	bx	lr
 8010ce6:	bf00      	nop
 8010ce8:	58024400 	.word	0x58024400
 8010cec:	03d09000 	.word	0x03d09000
 8010cf0:	46000000 	.word	0x46000000
 8010cf4:	4c742400 	.word	0x4c742400
 8010cf8:	4a742400 	.word	0x4a742400
 8010cfc:	4bbebc20 	.word	0x4bbebc20

08010d00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b089      	sub	sp, #36	; 0x24
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010d08:	4ba1      	ldr	r3, [pc, #644]	; (8010f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d0c:	f003 0303 	and.w	r3, r3, #3
 8010d10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8010d12:	4b9f      	ldr	r3, [pc, #636]	; (8010f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d16:	0d1b      	lsrs	r3, r3, #20
 8010d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010d1e:	4b9c      	ldr	r3, [pc, #624]	; (8010f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d22:	0a1b      	lsrs	r3, r3, #8
 8010d24:	f003 0301 	and.w	r3, r3, #1
 8010d28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8010d2a:	4b99      	ldr	r3, [pc, #612]	; (8010f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d2e:	08db      	lsrs	r3, r3, #3
 8010d30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d34:	693a      	ldr	r2, [r7, #16]
 8010d36:	fb02 f303 	mul.w	r3, r2, r3
 8010d3a:	ee07 3a90 	vmov	s15, r3
 8010d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	f000 8111 	beq.w	8010f70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010d4e:	69bb      	ldr	r3, [r7, #24]
 8010d50:	2b02      	cmp	r3, #2
 8010d52:	f000 8083 	beq.w	8010e5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010d56:	69bb      	ldr	r3, [r7, #24]
 8010d58:	2b02      	cmp	r3, #2
 8010d5a:	f200 80a1 	bhi.w	8010ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010d5e:	69bb      	ldr	r3, [r7, #24]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d003      	beq.n	8010d6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010d64:	69bb      	ldr	r3, [r7, #24]
 8010d66:	2b01      	cmp	r3, #1
 8010d68:	d056      	beq.n	8010e18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010d6a:	e099      	b.n	8010ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d6c:	4b88      	ldr	r3, [pc, #544]	; (8010f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	f003 0320 	and.w	r3, r3, #32
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d02d      	beq.n	8010dd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010d78:	4b85      	ldr	r3, [pc, #532]	; (8010f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	08db      	lsrs	r3, r3, #3
 8010d7e:	f003 0303 	and.w	r3, r3, #3
 8010d82:	4a84      	ldr	r2, [pc, #528]	; (8010f94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010d84:	fa22 f303 	lsr.w	r3, r2, r3
 8010d88:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	ee07 3a90 	vmov	s15, r3
 8010d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	ee07 3a90 	vmov	s15, r3
 8010d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010da2:	4b7b      	ldr	r3, [pc, #492]	; (8010f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010daa:	ee07 3a90 	vmov	s15, r3
 8010dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010db6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8010dd2:	e087      	b.n	8010ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	ee07 3a90 	vmov	s15, r3
 8010dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010de6:	4b6a      	ldr	r3, [pc, #424]	; (8010f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dee:	ee07 3a90 	vmov	s15, r3
 8010df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8010dfa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010e16:	e065      	b.n	8010ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	ee07 3a90 	vmov	s15, r3
 8010e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e2a:	4b59      	ldr	r3, [pc, #356]	; (8010f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e32:	ee07 3a90 	vmov	s15, r3
 8010e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010e5a:	e043      	b.n	8010ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	ee07 3a90 	vmov	s15, r3
 8010e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e6e:	4b48      	ldr	r3, [pc, #288]	; (8010f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e76:	ee07 3a90 	vmov	s15, r3
 8010e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010e9e:	e021      	b.n	8010ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	ee07 3a90 	vmov	s15, r3
 8010ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010eb2:	4b37      	ldr	r3, [pc, #220]	; (8010f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010eba:	ee07 3a90 	vmov	s15, r3
 8010ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ec6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ede:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010ee2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8010ee4:	4b2a      	ldr	r3, [pc, #168]	; (8010f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee8:	0a5b      	lsrs	r3, r3, #9
 8010eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010eee:	ee07 3a90 	vmov	s15, r3
 8010ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ef6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010efa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010efe:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f0a:	ee17 2a90 	vmov	r2, s15
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8010f12:	4b1f      	ldr	r3, [pc, #124]	; (8010f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f16:	0c1b      	lsrs	r3, r3, #16
 8010f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f1c:	ee07 3a90 	vmov	s15, r3
 8010f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f38:	ee17 2a90 	vmov	r2, s15
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8010f40:	4b13      	ldr	r3, [pc, #76]	; (8010f90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f44:	0e1b      	lsrs	r3, r3, #24
 8010f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f4a:	ee07 3a90 	vmov	s15, r3
 8010f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f66:	ee17 2a90 	vmov	r2, s15
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010f6e:	e008      	b.n	8010f82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2200      	movs	r2, #0
 8010f74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2200      	movs	r2, #0
 8010f7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	609a      	str	r2, [r3, #8]
}
 8010f82:	bf00      	nop
 8010f84:	3724      	adds	r7, #36	; 0x24
 8010f86:	46bd      	mov	sp, r7
 8010f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop
 8010f90:	58024400 	.word	0x58024400
 8010f94:	03d09000 	.word	0x03d09000
 8010f98:	46000000 	.word	0x46000000
 8010f9c:	4c742400 	.word	0x4c742400
 8010fa0:	4a742400 	.word	0x4a742400
 8010fa4:	4bbebc20 	.word	0x4bbebc20

08010fa8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8010fa8:	b480      	push	{r7}
 8010faa:	b089      	sub	sp, #36	; 0x24
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010fb0:	4ba0      	ldr	r3, [pc, #640]	; (8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fb4:	f003 0303 	and.w	r3, r3, #3
 8010fb8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8010fba:	4b9e      	ldr	r3, [pc, #632]	; (8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fbe:	091b      	lsrs	r3, r3, #4
 8010fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010fc4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010fc6:	4b9b      	ldr	r3, [pc, #620]	; (8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fca:	f003 0301 	and.w	r3, r3, #1
 8010fce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010fd0:	4b98      	ldr	r3, [pc, #608]	; (8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fd4:	08db      	lsrs	r3, r3, #3
 8010fd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010fda:	693a      	ldr	r2, [r7, #16]
 8010fdc:	fb02 f303 	mul.w	r3, r2, r3
 8010fe0:	ee07 3a90 	vmov	s15, r3
 8010fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fe8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	f000 8111 	beq.w	8011216 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010ff4:	69bb      	ldr	r3, [r7, #24]
 8010ff6:	2b02      	cmp	r3, #2
 8010ff8:	f000 8083 	beq.w	8011102 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010ffc:	69bb      	ldr	r3, [r7, #24]
 8010ffe:	2b02      	cmp	r3, #2
 8011000:	f200 80a1 	bhi.w	8011146 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8011004:	69bb      	ldr	r3, [r7, #24]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d003      	beq.n	8011012 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801100a:	69bb      	ldr	r3, [r7, #24]
 801100c:	2b01      	cmp	r3, #1
 801100e:	d056      	beq.n	80110be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8011010:	e099      	b.n	8011146 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011012:	4b88      	ldr	r3, [pc, #544]	; (8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	f003 0320 	and.w	r3, r3, #32
 801101a:	2b00      	cmp	r3, #0
 801101c:	d02d      	beq.n	801107a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801101e:	4b85      	ldr	r3, [pc, #532]	; (8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	08db      	lsrs	r3, r3, #3
 8011024:	f003 0303 	and.w	r3, r3, #3
 8011028:	4a83      	ldr	r2, [pc, #524]	; (8011238 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801102a:	fa22 f303 	lsr.w	r3, r2, r3
 801102e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	ee07 3a90 	vmov	s15, r3
 8011036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	ee07 3a90 	vmov	s15, r3
 8011040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011048:	4b7a      	ldr	r3, [pc, #488]	; (8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801104c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011050:	ee07 3a90 	vmov	s15, r3
 8011054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011058:	ed97 6a03 	vldr	s12, [r7, #12]
 801105c:	eddf 5a77 	vldr	s11, [pc, #476]	; 801123c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801106c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011074:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8011078:	e087      	b.n	801118a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	ee07 3a90 	vmov	s15, r3
 8011080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011084:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801108c:	4b69      	ldr	r3, [pc, #420]	; (8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011094:	ee07 3a90 	vmov	s15, r3
 8011098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801109c:	ed97 6a03 	vldr	s12, [r7, #12]
 80110a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 801123c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80110a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80110bc:	e065      	b.n	801118a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	ee07 3a90 	vmov	s15, r3
 80110c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8011244 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80110cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110d0:	4b58      	ldr	r3, [pc, #352]	; (8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110d8:	ee07 3a90 	vmov	s15, r3
 80110dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80110e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 801123c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80110e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8011100:	e043      	b.n	801118a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	ee07 3a90 	vmov	s15, r3
 8011108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801110c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8011248 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8011110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011114:	4b47      	ldr	r3, [pc, #284]	; (8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801111c:	ee07 3a90 	vmov	s15, r3
 8011120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011124:	ed97 6a03 	vldr	s12, [r7, #12]
 8011128:	eddf 5a44 	vldr	s11, [pc, #272]	; 801123c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801112c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801113c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011140:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8011144:	e021      	b.n	801118a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	ee07 3a90 	vmov	s15, r3
 801114c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011150:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011158:	4b36      	ldr	r3, [pc, #216]	; (8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801115c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011160:	ee07 3a90 	vmov	s15, r3
 8011164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011168:	ed97 6a03 	vldr	s12, [r7, #12]
 801116c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801123c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801117c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011184:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8011188:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 801118a:	4b2a      	ldr	r3, [pc, #168]	; (8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801118e:	0a5b      	lsrs	r3, r3, #9
 8011190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011194:	ee07 3a90 	vmov	s15, r3
 8011198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801119c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80111a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80111a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80111a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111b0:	ee17 2a90 	vmov	r2, s15
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80111b8:	4b1e      	ldr	r3, [pc, #120]	; (8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80111ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111bc:	0c1b      	lsrs	r3, r3, #16
 80111be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111c2:	ee07 3a90 	vmov	s15, r3
 80111c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80111ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80111d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80111d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111de:	ee17 2a90 	vmov	r2, s15
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80111e6:	4b13      	ldr	r3, [pc, #76]	; (8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80111e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111ea:	0e1b      	lsrs	r3, r3, #24
 80111ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111f0:	ee07 3a90 	vmov	s15, r3
 80111f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80111fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011200:	edd7 6a07 	vldr	s13, [r7, #28]
 8011204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801120c:	ee17 2a90 	vmov	r2, s15
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8011214:	e008      	b.n	8011228 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2200      	movs	r2, #0
 8011220:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2200      	movs	r2, #0
 8011226:	609a      	str	r2, [r3, #8]
}
 8011228:	bf00      	nop
 801122a:	3724      	adds	r7, #36	; 0x24
 801122c:	46bd      	mov	sp, r7
 801122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011232:	4770      	bx	lr
 8011234:	58024400 	.word	0x58024400
 8011238:	03d09000 	.word	0x03d09000
 801123c:	46000000 	.word	0x46000000
 8011240:	4c742400 	.word	0x4c742400
 8011244:	4a742400 	.word	0x4a742400
 8011248:	4bbebc20 	.word	0x4bbebc20

0801124c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b084      	sub	sp, #16
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011256:	2300      	movs	r3, #0
 8011258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801125a:	4b53      	ldr	r3, [pc, #332]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 801125c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801125e:	f003 0303 	and.w	r3, r3, #3
 8011262:	2b03      	cmp	r3, #3
 8011264:	d101      	bne.n	801126a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011266:	2301      	movs	r3, #1
 8011268:	e099      	b.n	801139e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801126a:	4b4f      	ldr	r3, [pc, #316]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	4a4e      	ldr	r2, [pc, #312]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 8011270:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011276:	f7f6 f8c3 	bl	8007400 <HAL_GetTick>
 801127a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801127c:	e008      	b.n	8011290 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801127e:	f7f6 f8bf 	bl	8007400 <HAL_GetTick>
 8011282:	4602      	mov	r2, r0
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	1ad3      	subs	r3, r2, r3
 8011288:	2b02      	cmp	r3, #2
 801128a:	d901      	bls.n	8011290 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801128c:	2303      	movs	r3, #3
 801128e:	e086      	b.n	801139e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011290:	4b45      	ldr	r3, [pc, #276]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011298:	2b00      	cmp	r3, #0
 801129a:	d1f0      	bne.n	801127e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801129c:	4b42      	ldr	r3, [pc, #264]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 801129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	031b      	lsls	r3, r3, #12
 80112aa:	493f      	ldr	r1, [pc, #252]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 80112ac:	4313      	orrs	r3, r2
 80112ae:	628b      	str	r3, [r1, #40]	; 0x28
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	3b01      	subs	r3, #1
 80112b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	689b      	ldr	r3, [r3, #8]
 80112be:	3b01      	subs	r3, #1
 80112c0:	025b      	lsls	r3, r3, #9
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	431a      	orrs	r2, r3
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	68db      	ldr	r3, [r3, #12]
 80112ca:	3b01      	subs	r3, #1
 80112cc:	041b      	lsls	r3, r3, #16
 80112ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80112d2:	431a      	orrs	r2, r3
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	691b      	ldr	r3, [r3, #16]
 80112d8:	3b01      	subs	r3, #1
 80112da:	061b      	lsls	r3, r3, #24
 80112dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80112e0:	4931      	ldr	r1, [pc, #196]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 80112e2:	4313      	orrs	r3, r2
 80112e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80112e6:	4b30      	ldr	r3, [pc, #192]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 80112e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	695b      	ldr	r3, [r3, #20]
 80112f2:	492d      	ldr	r1, [pc, #180]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 80112f4:	4313      	orrs	r3, r2
 80112f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80112f8:	4b2b      	ldr	r3, [pc, #172]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 80112fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112fc:	f023 0220 	bic.w	r2, r3, #32
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	699b      	ldr	r3, [r3, #24]
 8011304:	4928      	ldr	r1, [pc, #160]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 8011306:	4313      	orrs	r3, r2
 8011308:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801130a:	4b27      	ldr	r3, [pc, #156]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 801130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801130e:	4a26      	ldr	r2, [pc, #152]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 8011310:	f023 0310 	bic.w	r3, r3, #16
 8011314:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8011316:	4b24      	ldr	r3, [pc, #144]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 8011318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801131a:	4b24      	ldr	r3, [pc, #144]	; (80113ac <RCCEx_PLL2_Config+0x160>)
 801131c:	4013      	ands	r3, r2
 801131e:	687a      	ldr	r2, [r7, #4]
 8011320:	69d2      	ldr	r2, [r2, #28]
 8011322:	00d2      	lsls	r2, r2, #3
 8011324:	4920      	ldr	r1, [pc, #128]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 8011326:	4313      	orrs	r3, r2
 8011328:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801132a:	4b1f      	ldr	r3, [pc, #124]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 801132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801132e:	4a1e      	ldr	r2, [pc, #120]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 8011330:	f043 0310 	orr.w	r3, r3, #16
 8011334:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d106      	bne.n	801134a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801133c:	4b1a      	ldr	r3, [pc, #104]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 801133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011340:	4a19      	ldr	r2, [pc, #100]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 8011342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011346:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011348:	e00f      	b.n	801136a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	2b01      	cmp	r3, #1
 801134e:	d106      	bne.n	801135e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011350:	4b15      	ldr	r3, [pc, #84]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 8011352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011354:	4a14      	ldr	r2, [pc, #80]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 8011356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801135a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801135c:	e005      	b.n	801136a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801135e:	4b12      	ldr	r3, [pc, #72]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 8011360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011362:	4a11      	ldr	r2, [pc, #68]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 8011364:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011368:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801136a:	4b0f      	ldr	r3, [pc, #60]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	4a0e      	ldr	r2, [pc, #56]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 8011370:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011376:	f7f6 f843 	bl	8007400 <HAL_GetTick>
 801137a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801137c:	e008      	b.n	8011390 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801137e:	f7f6 f83f 	bl	8007400 <HAL_GetTick>
 8011382:	4602      	mov	r2, r0
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	1ad3      	subs	r3, r2, r3
 8011388:	2b02      	cmp	r3, #2
 801138a:	d901      	bls.n	8011390 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801138c:	2303      	movs	r3, #3
 801138e:	e006      	b.n	801139e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011390:	4b05      	ldr	r3, [pc, #20]	; (80113a8 <RCCEx_PLL2_Config+0x15c>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011398:	2b00      	cmp	r3, #0
 801139a:	d0f0      	beq.n	801137e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801139c:	7bfb      	ldrb	r3, [r7, #15]
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3710      	adds	r7, #16
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}
 80113a6:	bf00      	nop
 80113a8:	58024400 	.word	0x58024400
 80113ac:	ffff0007 	.word	0xffff0007

080113b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b084      	sub	sp, #16
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80113ba:	2300      	movs	r3, #0
 80113bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80113be:	4b53      	ldr	r3, [pc, #332]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 80113c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113c2:	f003 0303 	and.w	r3, r3, #3
 80113c6:	2b03      	cmp	r3, #3
 80113c8:	d101      	bne.n	80113ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80113ca:	2301      	movs	r3, #1
 80113cc:	e099      	b.n	8011502 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80113ce:	4b4f      	ldr	r3, [pc, #316]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	4a4e      	ldr	r2, [pc, #312]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 80113d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80113d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80113da:	f7f6 f811 	bl	8007400 <HAL_GetTick>
 80113de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80113e0:	e008      	b.n	80113f4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80113e2:	f7f6 f80d 	bl	8007400 <HAL_GetTick>
 80113e6:	4602      	mov	r2, r0
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	1ad3      	subs	r3, r2, r3
 80113ec:	2b02      	cmp	r3, #2
 80113ee:	d901      	bls.n	80113f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80113f0:	2303      	movs	r3, #3
 80113f2:	e086      	b.n	8011502 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80113f4:	4b45      	ldr	r3, [pc, #276]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d1f0      	bne.n	80113e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011400:	4b42      	ldr	r3, [pc, #264]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 8011402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011404:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	051b      	lsls	r3, r3, #20
 801140e:	493f      	ldr	r1, [pc, #252]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 8011410:	4313      	orrs	r3, r2
 8011412:	628b      	str	r3, [r1, #40]	; 0x28
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	3b01      	subs	r3, #1
 801141a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	689b      	ldr	r3, [r3, #8]
 8011422:	3b01      	subs	r3, #1
 8011424:	025b      	lsls	r3, r3, #9
 8011426:	b29b      	uxth	r3, r3
 8011428:	431a      	orrs	r2, r3
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	68db      	ldr	r3, [r3, #12]
 801142e:	3b01      	subs	r3, #1
 8011430:	041b      	lsls	r3, r3, #16
 8011432:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011436:	431a      	orrs	r2, r3
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	691b      	ldr	r3, [r3, #16]
 801143c:	3b01      	subs	r3, #1
 801143e:	061b      	lsls	r3, r3, #24
 8011440:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011444:	4931      	ldr	r1, [pc, #196]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 8011446:	4313      	orrs	r3, r2
 8011448:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801144a:	4b30      	ldr	r3, [pc, #192]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 801144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801144e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	695b      	ldr	r3, [r3, #20]
 8011456:	492d      	ldr	r1, [pc, #180]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 8011458:	4313      	orrs	r3, r2
 801145a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801145c:	4b2b      	ldr	r3, [pc, #172]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 801145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011460:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	699b      	ldr	r3, [r3, #24]
 8011468:	4928      	ldr	r1, [pc, #160]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 801146a:	4313      	orrs	r3, r2
 801146c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801146e:	4b27      	ldr	r3, [pc, #156]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 8011470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011472:	4a26      	ldr	r2, [pc, #152]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 8011474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011478:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801147a:	4b24      	ldr	r3, [pc, #144]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 801147c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801147e:	4b24      	ldr	r3, [pc, #144]	; (8011510 <RCCEx_PLL3_Config+0x160>)
 8011480:	4013      	ands	r3, r2
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	69d2      	ldr	r2, [r2, #28]
 8011486:	00d2      	lsls	r2, r2, #3
 8011488:	4920      	ldr	r1, [pc, #128]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 801148a:	4313      	orrs	r3, r2
 801148c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801148e:	4b1f      	ldr	r3, [pc, #124]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 8011490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011492:	4a1e      	ldr	r2, [pc, #120]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 8011494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011498:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d106      	bne.n	80114ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80114a0:	4b1a      	ldr	r3, [pc, #104]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 80114a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114a4:	4a19      	ldr	r2, [pc, #100]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 80114a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80114aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80114ac:	e00f      	b.n	80114ce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	2b01      	cmp	r3, #1
 80114b2:	d106      	bne.n	80114c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80114b4:	4b15      	ldr	r3, [pc, #84]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 80114b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b8:	4a14      	ldr	r2, [pc, #80]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 80114ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80114be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80114c0:	e005      	b.n	80114ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80114c2:	4b12      	ldr	r3, [pc, #72]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 80114c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114c6:	4a11      	ldr	r2, [pc, #68]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 80114c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80114cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80114ce:	4b0f      	ldr	r3, [pc, #60]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	4a0e      	ldr	r2, [pc, #56]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 80114d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80114d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80114da:	f7f5 ff91 	bl	8007400 <HAL_GetTick>
 80114de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80114e0:	e008      	b.n	80114f4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80114e2:	f7f5 ff8d 	bl	8007400 <HAL_GetTick>
 80114e6:	4602      	mov	r2, r0
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	1ad3      	subs	r3, r2, r3
 80114ec:	2b02      	cmp	r3, #2
 80114ee:	d901      	bls.n	80114f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80114f0:	2303      	movs	r3, #3
 80114f2:	e006      	b.n	8011502 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80114f4:	4b05      	ldr	r3, [pc, #20]	; (801150c <RCCEx_PLL3_Config+0x15c>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d0f0      	beq.n	80114e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011500:	7bfb      	ldrb	r3, [r7, #15]
}
 8011502:	4618      	mov	r0, r3
 8011504:	3710      	adds	r7, #16
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop
 801150c:	58024400 	.word	0x58024400
 8011510:	ffff0007 	.word	0xffff0007

08011514 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b084      	sub	sp, #16
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d101      	bne.n	8011526 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011522:	2301      	movs	r3, #1
 8011524:	e0f1      	b.n	801170a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2200      	movs	r2, #0
 801152a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	4a78      	ldr	r2, [pc, #480]	; (8011714 <HAL_SPI_Init+0x200>)
 8011532:	4293      	cmp	r3, r2
 8011534:	d00f      	beq.n	8011556 <HAL_SPI_Init+0x42>
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	4a77      	ldr	r2, [pc, #476]	; (8011718 <HAL_SPI_Init+0x204>)
 801153c:	4293      	cmp	r3, r2
 801153e:	d00a      	beq.n	8011556 <HAL_SPI_Init+0x42>
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	4a75      	ldr	r2, [pc, #468]	; (801171c <HAL_SPI_Init+0x208>)
 8011546:	4293      	cmp	r3, r2
 8011548:	d005      	beq.n	8011556 <HAL_SPI_Init+0x42>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	68db      	ldr	r3, [r3, #12]
 801154e:	2b0f      	cmp	r3, #15
 8011550:	d901      	bls.n	8011556 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011552:	2301      	movs	r3, #1
 8011554:	e0d9      	b.n	801170a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f000 ff66 	bl	8012428 <SPI_GetPacketSize>
 801155c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	4a6c      	ldr	r2, [pc, #432]	; (8011714 <HAL_SPI_Init+0x200>)
 8011564:	4293      	cmp	r3, r2
 8011566:	d00c      	beq.n	8011582 <HAL_SPI_Init+0x6e>
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	4a6a      	ldr	r2, [pc, #424]	; (8011718 <HAL_SPI_Init+0x204>)
 801156e:	4293      	cmp	r3, r2
 8011570:	d007      	beq.n	8011582 <HAL_SPI_Init+0x6e>
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	4a69      	ldr	r2, [pc, #420]	; (801171c <HAL_SPI_Init+0x208>)
 8011578:	4293      	cmp	r3, r2
 801157a:	d002      	beq.n	8011582 <HAL_SPI_Init+0x6e>
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	2b08      	cmp	r3, #8
 8011580:	d811      	bhi.n	80115a6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011586:	4a63      	ldr	r2, [pc, #396]	; (8011714 <HAL_SPI_Init+0x200>)
 8011588:	4293      	cmp	r3, r2
 801158a:	d009      	beq.n	80115a0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	4a61      	ldr	r2, [pc, #388]	; (8011718 <HAL_SPI_Init+0x204>)
 8011592:	4293      	cmp	r3, r2
 8011594:	d004      	beq.n	80115a0 <HAL_SPI_Init+0x8c>
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	4a60      	ldr	r2, [pc, #384]	; (801171c <HAL_SPI_Init+0x208>)
 801159c:	4293      	cmp	r3, r2
 801159e:	d104      	bne.n	80115aa <HAL_SPI_Init+0x96>
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2b10      	cmp	r3, #16
 80115a4:	d901      	bls.n	80115aa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80115a6:	2301      	movs	r3, #1
 80115a8:	e0af      	b.n	801170a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80115b0:	b2db      	uxtb	r3, r3
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d106      	bne.n	80115c4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2200      	movs	r2, #0
 80115ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f7f4 f956 	bl	8005870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	2202      	movs	r2, #2
 80115c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	681a      	ldr	r2, [r3, #0]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	f022 0201 	bic.w	r2, r2, #1
 80115da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	689b      	ldr	r3, [r3, #8]
 80115e2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80115e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	699b      	ldr	r3, [r3, #24]
 80115ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80115f0:	d119      	bne.n	8011626 <HAL_SPI_Init+0x112>
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80115fa:	d103      	bne.n	8011604 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011600:	2b00      	cmp	r3, #0
 8011602:	d008      	beq.n	8011616 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011608:	2b00      	cmp	r3, #0
 801160a:	d10c      	bne.n	8011626 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011614:	d107      	bne.n	8011626 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	681a      	ldr	r2, [r3, #0]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011624:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	69da      	ldr	r2, [r3, #28]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801162e:	431a      	orrs	r2, r3
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	431a      	orrs	r2, r3
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011638:	ea42 0103 	orr.w	r1, r2, r3
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	68da      	ldr	r2, [r3, #12]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	430a      	orrs	r2, r1
 8011646:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011650:	431a      	orrs	r2, r3
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011656:	431a      	orrs	r2, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	699b      	ldr	r3, [r3, #24]
 801165c:	431a      	orrs	r2, r3
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	691b      	ldr	r3, [r3, #16]
 8011662:	431a      	orrs	r2, r3
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	695b      	ldr	r3, [r3, #20]
 8011668:	431a      	orrs	r2, r3
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6a1b      	ldr	r3, [r3, #32]
 801166e:	431a      	orrs	r2, r3
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	431a      	orrs	r2, r3
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801167a:	431a      	orrs	r2, r3
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	689b      	ldr	r3, [r3, #8]
 8011680:	431a      	orrs	r2, r3
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011686:	ea42 0103 	orr.w	r1, r2, r3
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	430a      	orrs	r2, r1
 8011694:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d113      	bne.n	80116c6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	689b      	ldr	r3, [r3, #8]
 80116a4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80116b0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	689b      	ldr	r3, [r3, #8]
 80116b8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80116c4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f022 0201 	bic.w	r2, r2, #1
 80116d4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d00a      	beq.n	80116f8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	68db      	ldr	r3, [r3, #12]
 80116e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	430a      	orrs	r2, r1
 80116f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2200      	movs	r2, #0
 80116fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2201      	movs	r2, #1
 8011704:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011708:	2300      	movs	r3, #0
}
 801170a:	4618      	mov	r0, r3
 801170c:	3710      	adds	r7, #16
 801170e:	46bd      	mov	sp, r7
 8011710:	bd80      	pop	{r7, pc}
 8011712:	bf00      	nop
 8011714:	40013000 	.word	0x40013000
 8011718:	40003800 	.word	0x40003800
 801171c:	40003c00 	.word	0x40003c00

08011720 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b08a      	sub	sp, #40	; 0x28
 8011724:	af02      	add	r7, sp, #8
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	603b      	str	r3, [r7, #0]
 801172c:	4613      	mov	r3, r2
 801172e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	3320      	adds	r3, #32
 8011736:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011738:	2300      	movs	r3, #0
 801173a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011742:	2b01      	cmp	r3, #1
 8011744:	d101      	bne.n	801174a <HAL_SPI_Transmit+0x2a>
 8011746:	2302      	movs	r3, #2
 8011748:	e1d7      	b.n	8011afa <HAL_SPI_Transmit+0x3da>
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	2201      	movs	r2, #1
 801174e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011752:	f7f5 fe55 	bl	8007400 <HAL_GetTick>
 8011756:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801175e:	b2db      	uxtb	r3, r3
 8011760:	2b01      	cmp	r3, #1
 8011762:	d007      	beq.n	8011774 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8011764:	2302      	movs	r3, #2
 8011766:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	2200      	movs	r2, #0
 801176c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011770:	7efb      	ldrb	r3, [r7, #27]
 8011772:	e1c2      	b.n	8011afa <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d002      	beq.n	8011780 <HAL_SPI_Transmit+0x60>
 801177a:	88fb      	ldrh	r3, [r7, #6]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d107      	bne.n	8011790 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8011780:	2301      	movs	r3, #1
 8011782:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	2200      	movs	r2, #0
 8011788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801178c:	7efb      	ldrb	r3, [r7, #27]
 801178e:	e1b4      	b.n	8011afa <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2203      	movs	r2, #3
 8011794:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	2200      	movs	r2, #0
 801179c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	68ba      	ldr	r2, [r7, #8]
 80117a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	88fa      	ldrh	r2, [r7, #6]
 80117aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	88fa      	ldrh	r2, [r7, #6]
 80117b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2200      	movs	r2, #0
 80117ba:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2200      	movs	r2, #0
 80117c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	2200      	movs	r2, #0
 80117c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	2200      	movs	r2, #0
 80117d0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	2200      	movs	r2, #0
 80117d6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	689b      	ldr	r3, [r3, #8]
 80117dc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80117e0:	d107      	bne.n	80117f2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80117f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	685a      	ldr	r2, [r3, #4]
 80117f8:	4b96      	ldr	r3, [pc, #600]	; (8011a54 <HAL_SPI_Transmit+0x334>)
 80117fa:	4013      	ands	r3, r2
 80117fc:	88f9      	ldrh	r1, [r7, #6]
 80117fe:	68fa      	ldr	r2, [r7, #12]
 8011800:	6812      	ldr	r2, [r2, #0]
 8011802:	430b      	orrs	r3, r1
 8011804:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	681a      	ldr	r2, [r3, #0]
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	f042 0201 	orr.w	r2, r2, #1
 8011814:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801181e:	d107      	bne.n	8011830 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	681a      	ldr	r2, [r3, #0]
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801182e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	2b0f      	cmp	r3, #15
 8011836:	d947      	bls.n	80118c8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011838:	e03f      	b.n	80118ba <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	695b      	ldr	r3, [r3, #20]
 8011840:	f003 0302 	and.w	r3, r3, #2
 8011844:	2b02      	cmp	r3, #2
 8011846:	d114      	bne.n	8011872 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	6812      	ldr	r2, [r2, #0]
 8011852:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011858:	1d1a      	adds	r2, r3, #4
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011864:	b29b      	uxth	r3, r3
 8011866:	3b01      	subs	r3, #1
 8011868:	b29a      	uxth	r2, r3
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011870:	e023      	b.n	80118ba <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011872:	f7f5 fdc5 	bl	8007400 <HAL_GetTick>
 8011876:	4602      	mov	r2, r0
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	1ad3      	subs	r3, r2, r3
 801187c:	683a      	ldr	r2, [r7, #0]
 801187e:	429a      	cmp	r2, r3
 8011880:	d803      	bhi.n	801188a <HAL_SPI_Transmit+0x16a>
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011888:	d102      	bne.n	8011890 <HAL_SPI_Transmit+0x170>
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d114      	bne.n	80118ba <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011890:	68f8      	ldr	r0, [r7, #12]
 8011892:	f000 fcfb 	bl	801228c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	2200      	movs	r2, #0
 801189a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80118a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	2201      	movs	r2, #1
 80118b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80118b6:	2303      	movs	r3, #3
 80118b8:	e11f      	b.n	8011afa <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80118c0:	b29b      	uxth	r3, r3
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d1b9      	bne.n	801183a <HAL_SPI_Transmit+0x11a>
 80118c6:	e0f2      	b.n	8011aae <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	68db      	ldr	r3, [r3, #12]
 80118cc:	2b07      	cmp	r3, #7
 80118ce:	f240 80e7 	bls.w	8011aa0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80118d2:	e05d      	b.n	8011990 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	695b      	ldr	r3, [r3, #20]
 80118da:	f003 0302 	and.w	r3, r3, #2
 80118de:	2b02      	cmp	r3, #2
 80118e0:	d132      	bne.n	8011948 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80118e8:	b29b      	uxth	r3, r3
 80118ea:	2b01      	cmp	r3, #1
 80118ec:	d918      	bls.n	8011920 <HAL_SPI_Transmit+0x200>
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d014      	beq.n	8011920 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	6812      	ldr	r2, [r2, #0]
 8011900:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011906:	1d1a      	adds	r2, r3, #4
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011912:	b29b      	uxth	r3, r3
 8011914:	3b02      	subs	r3, #2
 8011916:	b29a      	uxth	r2, r3
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801191e:	e037      	b.n	8011990 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011924:	881a      	ldrh	r2, [r3, #0]
 8011926:	69fb      	ldr	r3, [r7, #28]
 8011928:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801192e:	1c9a      	adds	r2, r3, #2
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801193a:	b29b      	uxth	r3, r3
 801193c:	3b01      	subs	r3, #1
 801193e:	b29a      	uxth	r2, r3
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011946:	e023      	b.n	8011990 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011948:	f7f5 fd5a 	bl	8007400 <HAL_GetTick>
 801194c:	4602      	mov	r2, r0
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	1ad3      	subs	r3, r2, r3
 8011952:	683a      	ldr	r2, [r7, #0]
 8011954:	429a      	cmp	r2, r3
 8011956:	d803      	bhi.n	8011960 <HAL_SPI_Transmit+0x240>
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801195e:	d102      	bne.n	8011966 <HAL_SPI_Transmit+0x246>
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d114      	bne.n	8011990 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011966:	68f8      	ldr	r0, [r7, #12]
 8011968:	f000 fc90 	bl	801228c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	2200      	movs	r2, #0
 8011970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801197a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	2201      	movs	r2, #1
 8011988:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801198c:	2303      	movs	r3, #3
 801198e:	e0b4      	b.n	8011afa <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011996:	b29b      	uxth	r3, r3
 8011998:	2b00      	cmp	r3, #0
 801199a:	d19b      	bne.n	80118d4 <HAL_SPI_Transmit+0x1b4>
 801199c:	e087      	b.n	8011aae <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	695b      	ldr	r3, [r3, #20]
 80119a4:	f003 0302 	and.w	r3, r3, #2
 80119a8:	2b02      	cmp	r3, #2
 80119aa:	d155      	bne.n	8011a58 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	2b03      	cmp	r3, #3
 80119b6:	d918      	bls.n	80119ea <HAL_SPI_Transmit+0x2ca>
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119bc:	2b40      	cmp	r3, #64	; 0x40
 80119be:	d914      	bls.n	80119ea <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	6812      	ldr	r2, [r2, #0]
 80119ca:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119d0:	1d1a      	adds	r2, r3, #4
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80119dc:	b29b      	uxth	r3, r3
 80119de:	3b04      	subs	r3, #4
 80119e0:	b29a      	uxth	r2, r3
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80119e8:	e05a      	b.n	8011aa0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	2b01      	cmp	r3, #1
 80119f4:	d917      	bls.n	8011a26 <HAL_SPI_Transmit+0x306>
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d013      	beq.n	8011a26 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a02:	881a      	ldrh	r2, [r3, #0]
 8011a04:	69fb      	ldr	r3, [r7, #28]
 8011a06:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a0c:	1c9a      	adds	r2, r3, #2
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	3b02      	subs	r3, #2
 8011a1c:	b29a      	uxth	r2, r3
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011a24:	e03c      	b.n	8011aa0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	3320      	adds	r3, #32
 8011a30:	7812      	ldrb	r2, [r2, #0]
 8011a32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a38:	1c5a      	adds	r2, r3, #1
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	3b01      	subs	r3, #1
 8011a48:	b29a      	uxth	r2, r3
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011a50:	e026      	b.n	8011aa0 <HAL_SPI_Transmit+0x380>
 8011a52:	bf00      	nop
 8011a54:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011a58:	f7f5 fcd2 	bl	8007400 <HAL_GetTick>
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	1ad3      	subs	r3, r2, r3
 8011a62:	683a      	ldr	r2, [r7, #0]
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d803      	bhi.n	8011a70 <HAL_SPI_Transmit+0x350>
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a6e:	d102      	bne.n	8011a76 <HAL_SPI_Transmit+0x356>
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d114      	bne.n	8011aa0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011a76:	68f8      	ldr	r0, [r7, #12]
 8011a78:	f000 fc08 	bl	801228c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	2201      	movs	r2, #1
 8011a98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011a9c:	2303      	movs	r3, #3
 8011a9e:	e02c      	b.n	8011afa <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	f47f af78 	bne.w	801199e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	9300      	str	r3, [sp, #0]
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	2108      	movs	r1, #8
 8011ab8:	68f8      	ldr	r0, [r7, #12]
 8011aba:	f000 fc87 	bl	80123cc <SPI_WaitOnFlagUntilTimeout>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d007      	beq.n	8011ad4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011aca:	f043 0220 	orr.w	r2, r3, #32
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011ad4:	68f8      	ldr	r0, [r7, #12]
 8011ad6:	f000 fbd9 	bl	801228c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	2200      	movs	r2, #0
 8011ade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d001      	beq.n	8011af8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8011af4:	2301      	movs	r3, #1
 8011af6:	e000      	b.n	8011afa <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8011af8:	7efb      	ldrb	r3, [r7, #27]
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3720      	adds	r7, #32
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}
 8011b02:	bf00      	nop

08011b04 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b08a      	sub	sp, #40	; 0x28
 8011b08:	af02      	add	r7, sp, #8
 8011b0a:	60f8      	str	r0, [r7, #12]
 8011b0c:	60b9      	str	r1, [r7, #8]
 8011b0e:	603b      	str	r3, [r7, #0]
 8011b10:	4613      	mov	r3, r2
 8011b12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011b14:	2300      	movs	r3, #0
 8011b16:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	3330      	adds	r3, #48	; 0x30
 8011b1e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	685b      	ldr	r3, [r3, #4]
 8011b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011b28:	d112      	bne.n	8011b50 <HAL_SPI_Receive+0x4c>
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	689b      	ldr	r3, [r3, #8]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d10e      	bne.n	8011b50 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	2204      	movs	r2, #4
 8011b36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011b3a:	88fa      	ldrh	r2, [r7, #6]
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	9300      	str	r3, [sp, #0]
 8011b40:	4613      	mov	r3, r2
 8011b42:	68ba      	ldr	r2, [r7, #8]
 8011b44:	68b9      	ldr	r1, [r7, #8]
 8011b46:	68f8      	ldr	r0, [r7, #12]
 8011b48:	f000 f978 	bl	8011e3c <HAL_SPI_TransmitReceive>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	e16f      	b.n	8011e30 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d101      	bne.n	8011b5e <HAL_SPI_Receive+0x5a>
 8011b5a:	2302      	movs	r3, #2
 8011b5c:	e168      	b.n	8011e30 <HAL_SPI_Receive+0x32c>
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	2201      	movs	r2, #1
 8011b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011b66:	f7f5 fc4b 	bl	8007400 <HAL_GetTick>
 8011b6a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	d007      	beq.n	8011b88 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8011b78:	2302      	movs	r3, #2
 8011b7a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	2200      	movs	r2, #0
 8011b80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011b84:	7ffb      	ldrb	r3, [r7, #31]
 8011b86:	e153      	b.n	8011e30 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d002      	beq.n	8011b94 <HAL_SPI_Receive+0x90>
 8011b8e:	88fb      	ldrh	r3, [r7, #6]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d107      	bne.n	8011ba4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8011b94:	2301      	movs	r3, #1
 8011b96:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011ba0:	7ffb      	ldrb	r3, [r7, #31]
 8011ba2:	e145      	b.n	8011e30 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	2204      	movs	r2, #4
 8011ba8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	68ba      	ldr	r2, [r7, #8]
 8011bb8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	88fa      	ldrh	r2, [r7, #6]
 8011bbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	88fa      	ldrh	r2, [r7, #6]
 8011bc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	2200      	movs	r2, #0
 8011bdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	2200      	movs	r2, #0
 8011be4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2200      	movs	r2, #0
 8011bea:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	689b      	ldr	r3, [r3, #8]
 8011bf0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011bf4:	d107      	bne.n	8011c06 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	681a      	ldr	r2, [r3, #0]
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011c04:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	685a      	ldr	r2, [r3, #4]
 8011c0c:	4b8a      	ldr	r3, [pc, #552]	; (8011e38 <HAL_SPI_Receive+0x334>)
 8011c0e:	4013      	ands	r3, r2
 8011c10:	88f9      	ldrh	r1, [r7, #6]
 8011c12:	68fa      	ldr	r2, [r7, #12]
 8011c14:	6812      	ldr	r2, [r2, #0]
 8011c16:	430b      	orrs	r3, r1
 8011c18:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	681a      	ldr	r2, [r3, #0]
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	f042 0201 	orr.w	r2, r2, #1
 8011c28:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	685b      	ldr	r3, [r3, #4]
 8011c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011c32:	d107      	bne.n	8011c44 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	681a      	ldr	r2, [r3, #0]
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011c42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	2b0f      	cmp	r3, #15
 8011c4a:	d948      	bls.n	8011cde <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8011c4c:	e040      	b.n	8011cd0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	695a      	ldr	r2, [r3, #20]
 8011c54:	f248 0308 	movw	r3, #32776	; 0x8008
 8011c58:	4013      	ands	r3, r2
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d014      	beq.n	8011c88 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	681a      	ldr	r2, [r3, #0]
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011c68:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c6e:	1d1a      	adds	r2, r3, #4
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011c7a:	b29b      	uxth	r3, r3
 8011c7c:	3b01      	subs	r3, #1
 8011c7e:	b29a      	uxth	r2, r3
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011c86:	e023      	b.n	8011cd0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011c88:	f7f5 fbba 	bl	8007400 <HAL_GetTick>
 8011c8c:	4602      	mov	r2, r0
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	1ad3      	subs	r3, r2, r3
 8011c92:	683a      	ldr	r2, [r7, #0]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d803      	bhi.n	8011ca0 <HAL_SPI_Receive+0x19c>
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c9e:	d102      	bne.n	8011ca6 <HAL_SPI_Receive+0x1a2>
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d114      	bne.n	8011cd0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011ca6:	68f8      	ldr	r0, [r7, #12]
 8011ca8:	f000 faf0 	bl	801228c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011cba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011ccc:	2303      	movs	r3, #3
 8011cce:	e0af      	b.n	8011e30 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d1b8      	bne.n	8011c4e <HAL_SPI_Receive+0x14a>
 8011cdc:	e095      	b.n	8011e0a <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	2b07      	cmp	r3, #7
 8011ce4:	f240 808b 	bls.w	8011dfe <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8011ce8:	e03f      	b.n	8011d6a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	695b      	ldr	r3, [r3, #20]
 8011cf0:	f003 0301 	and.w	r3, r3, #1
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	d114      	bne.n	8011d22 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011cfc:	69ba      	ldr	r2, [r7, #24]
 8011cfe:	8812      	ldrh	r2, [r2, #0]
 8011d00:	b292      	uxth	r2, r2
 8011d02:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011d08:	1c9a      	adds	r2, r3, #2
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	3b01      	subs	r3, #1
 8011d18:	b29a      	uxth	r2, r3
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011d20:	e023      	b.n	8011d6a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011d22:	f7f5 fb6d 	bl	8007400 <HAL_GetTick>
 8011d26:	4602      	mov	r2, r0
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	1ad3      	subs	r3, r2, r3
 8011d2c:	683a      	ldr	r2, [r7, #0]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d803      	bhi.n	8011d3a <HAL_SPI_Receive+0x236>
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d38:	d102      	bne.n	8011d40 <HAL_SPI_Receive+0x23c>
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d114      	bne.n	8011d6a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011d40:	68f8      	ldr	r0, [r7, #12]
 8011d42:	f000 faa3 	bl	801228c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011d54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2201      	movs	r2, #1
 8011d62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011d66:	2303      	movs	r3, #3
 8011d68:	e062      	b.n	8011e30 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d1b9      	bne.n	8011cea <HAL_SPI_Receive+0x1e6>
 8011d76:	e048      	b.n	8011e0a <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	695b      	ldr	r3, [r3, #20]
 8011d7e:	f003 0301 	and.w	r3, r3, #1
 8011d82:	2b01      	cmp	r3, #1
 8011d84:	d117      	bne.n	8011db6 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011d92:	7812      	ldrb	r2, [r2, #0]
 8011d94:	b2d2      	uxtb	r2, r2
 8011d96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011d9c:	1c5a      	adds	r2, r3, #1
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011da8:	b29b      	uxth	r3, r3
 8011daa:	3b01      	subs	r3, #1
 8011dac:	b29a      	uxth	r2, r3
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011db4:	e023      	b.n	8011dfe <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011db6:	f7f5 fb23 	bl	8007400 <HAL_GetTick>
 8011dba:	4602      	mov	r2, r0
 8011dbc:	697b      	ldr	r3, [r7, #20]
 8011dbe:	1ad3      	subs	r3, r2, r3
 8011dc0:	683a      	ldr	r2, [r7, #0]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d803      	bhi.n	8011dce <HAL_SPI_Receive+0x2ca>
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dcc:	d102      	bne.n	8011dd4 <HAL_SPI_Receive+0x2d0>
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d114      	bne.n	8011dfe <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011dd4:	68f8      	ldr	r0, [r7, #12]
 8011dd6:	f000 fa59 	bl	801228c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011de8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	2201      	movs	r2, #1
 8011df6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011dfa:	2303      	movs	r3, #3
 8011dfc:	e018      	b.n	8011e30 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d1b6      	bne.n	8011d78 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011e0a:	68f8      	ldr	r0, [r7, #12]
 8011e0c:	f000 fa3e 	bl	801228c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	2200      	movs	r2, #0
 8011e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	2201      	movs	r2, #1
 8011e1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d001      	beq.n	8011e2e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	e000      	b.n	8011e30 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8011e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3720      	adds	r7, #32
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	ffff0000 	.word	0xffff0000

08011e3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b08e      	sub	sp, #56	; 0x38
 8011e40:	af02      	add	r7, sp, #8
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	607a      	str	r2, [r7, #4]
 8011e48:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	3320      	adds	r3, #32
 8011e56:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	3330      	adds	r3, #48	; 0x30
 8011e5e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011e66:	2b01      	cmp	r3, #1
 8011e68:	d101      	bne.n	8011e6e <HAL_SPI_TransmitReceive+0x32>
 8011e6a:	2302      	movs	r3, #2
 8011e6c:	e209      	b.n	8012282 <HAL_SPI_TransmitReceive+0x446>
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	2201      	movs	r2, #1
 8011e72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011e76:	f7f5 fac3 	bl	8007400 <HAL_GetTick>
 8011e7a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8011e7c:	887b      	ldrh	r3, [r7, #2]
 8011e7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8011e80:	887b      	ldrh	r3, [r7, #2]
 8011e82:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011e8a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011e92:	7efb      	ldrb	r3, [r7, #27]
 8011e94:	2b01      	cmp	r3, #1
 8011e96:	d014      	beq.n	8011ec2 <HAL_SPI_TransmitReceive+0x86>
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011e9e:	d106      	bne.n	8011eae <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d102      	bne.n	8011eae <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8011ea8:	7efb      	ldrb	r3, [r7, #27]
 8011eaa:	2b04      	cmp	r3, #4
 8011eac:	d009      	beq.n	8011ec2 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8011eae:	2302      	movs	r3, #2
 8011eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011ebc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011ec0:	e1df      	b.n	8012282 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d005      	beq.n	8011ed4 <HAL_SPI_TransmitReceive+0x98>
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d002      	beq.n	8011ed4 <HAL_SPI_TransmitReceive+0x98>
 8011ece:	887b      	ldrh	r3, [r7, #2]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d109      	bne.n	8011ee8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	2200      	movs	r2, #0
 8011ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011ee2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011ee6:	e1cc      	b.n	8012282 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011eee:	b2db      	uxtb	r3, r3
 8011ef0:	2b04      	cmp	r3, #4
 8011ef2:	d003      	beq.n	8011efc <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	2205      	movs	r2, #5
 8011ef8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	2200      	movs	r2, #0
 8011f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	687a      	ldr	r2, [r7, #4]
 8011f08:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	887a      	ldrh	r2, [r7, #2]
 8011f0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	887a      	ldrh	r2, [r7, #2]
 8011f16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	68ba      	ldr	r2, [r7, #8]
 8011f1e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	887a      	ldrh	r2, [r7, #2]
 8011f24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	887a      	ldrh	r2, [r7, #2]
 8011f2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	2200      	movs	r2, #0
 8011f34:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	2200      	movs	r2, #0
 8011f3a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	685a      	ldr	r2, [r3, #4]
 8011f42:	4b82      	ldr	r3, [pc, #520]	; (801214c <HAL_SPI_TransmitReceive+0x310>)
 8011f44:	4013      	ands	r3, r2
 8011f46:	8879      	ldrh	r1, [r7, #2]
 8011f48:	68fa      	ldr	r2, [r7, #12]
 8011f4a:	6812      	ldr	r2, [r2, #0]
 8011f4c:	430b      	orrs	r3, r1
 8011f4e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	681a      	ldr	r2, [r3, #0]
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	f042 0201 	orr.w	r2, r2, #1
 8011f5e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	685b      	ldr	r3, [r3, #4]
 8011f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011f68:	d107      	bne.n	8011f7a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	681a      	ldr	r2, [r3, #0]
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011f78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	2b0f      	cmp	r3, #15
 8011f80:	d970      	bls.n	8012064 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011f82:	e068      	b.n	8012056 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	695b      	ldr	r3, [r3, #20]
 8011f8a:	f003 0302 	and.w	r3, r3, #2
 8011f8e:	2b02      	cmp	r3, #2
 8011f90:	d11a      	bne.n	8011fc8 <HAL_SPI_TransmitReceive+0x18c>
 8011f92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d017      	beq.n	8011fc8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	6812      	ldr	r2, [r2, #0]
 8011fa2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011fa8:	1d1a      	adds	r2, r3, #4
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011fb4:	b29b      	uxth	r3, r3
 8011fb6:	3b01      	subs	r3, #1
 8011fb8:	b29a      	uxth	r2, r3
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011fc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	695a      	ldr	r2, [r3, #20]
 8011fce:	f248 0308 	movw	r3, #32776	; 0x8008
 8011fd2:	4013      	ands	r3, r2
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d01a      	beq.n	801200e <HAL_SPI_TransmitReceive+0x1d2>
 8011fd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d017      	beq.n	801200e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	681a      	ldr	r2, [r3, #0]
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fe6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011fe8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fee:	1d1a      	adds	r2, r3, #4
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011ffa:	b29b      	uxth	r3, r3
 8011ffc:	3b01      	subs	r3, #1
 8011ffe:	b29a      	uxth	r2, r3
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801200c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801200e:	f7f5 f9f7 	bl	8007400 <HAL_GetTick>
 8012012:	4602      	mov	r2, r0
 8012014:	69fb      	ldr	r3, [r7, #28]
 8012016:	1ad3      	subs	r3, r2, r3
 8012018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801201a:	429a      	cmp	r2, r3
 801201c:	d803      	bhi.n	8012026 <HAL_SPI_TransmitReceive+0x1ea>
 801201e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012024:	d102      	bne.n	801202c <HAL_SPI_TransmitReceive+0x1f0>
 8012026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012028:	2b00      	cmp	r3, #0
 801202a:	d114      	bne.n	8012056 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 801202c:	68f8      	ldr	r0, [r7, #12]
 801202e:	f000 f92d 	bl	801228c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	2200      	movs	r2, #0
 8012036:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012040:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	2201      	movs	r2, #1
 801204e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8012052:	2303      	movs	r3, #3
 8012054:	e115      	b.n	8012282 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8012056:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012058:	2b00      	cmp	r3, #0
 801205a:	d193      	bne.n	8011f84 <HAL_SPI_TransmitReceive+0x148>
 801205c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801205e:	2b00      	cmp	r3, #0
 8012060:	d190      	bne.n	8011f84 <HAL_SPI_TransmitReceive+0x148>
 8012062:	e0e7      	b.n	8012234 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	68db      	ldr	r3, [r3, #12]
 8012068:	2b07      	cmp	r3, #7
 801206a:	f240 80dd 	bls.w	8012228 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801206e:	e066      	b.n	801213e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	695b      	ldr	r3, [r3, #20]
 8012076:	f003 0302 	and.w	r3, r3, #2
 801207a:	2b02      	cmp	r3, #2
 801207c:	d119      	bne.n	80120b2 <HAL_SPI_TransmitReceive+0x276>
 801207e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012080:	2b00      	cmp	r3, #0
 8012082:	d016      	beq.n	80120b2 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012088:	881a      	ldrh	r2, [r3, #0]
 801208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801208c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012092:	1c9a      	adds	r2, r3, #2
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801209e:	b29b      	uxth	r3, r3
 80120a0:	3b01      	subs	r3, #1
 80120a2:	b29a      	uxth	r2, r3
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80120b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	695b      	ldr	r3, [r3, #20]
 80120b8:	f003 0301 	and.w	r3, r3, #1
 80120bc:	2b01      	cmp	r3, #1
 80120be:	d11a      	bne.n	80120f6 <HAL_SPI_TransmitReceive+0x2ba>
 80120c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d017      	beq.n	80120f6 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80120ca:	6a3a      	ldr	r2, [r7, #32]
 80120cc:	8812      	ldrh	r2, [r2, #0]
 80120ce:	b292      	uxth	r2, r2
 80120d0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80120d6:	1c9a      	adds	r2, r3, #2
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80120e2:	b29b      	uxth	r3, r3
 80120e4:	3b01      	subs	r3, #1
 80120e6:	b29a      	uxth	r2, r3
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80120f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80120f6:	f7f5 f983 	bl	8007400 <HAL_GetTick>
 80120fa:	4602      	mov	r2, r0
 80120fc:	69fb      	ldr	r3, [r7, #28]
 80120fe:	1ad3      	subs	r3, r2, r3
 8012100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012102:	429a      	cmp	r2, r3
 8012104:	d803      	bhi.n	801210e <HAL_SPI_TransmitReceive+0x2d2>
 8012106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801210c:	d102      	bne.n	8012114 <HAL_SPI_TransmitReceive+0x2d8>
 801210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012110:	2b00      	cmp	r3, #0
 8012112:	d114      	bne.n	801213e <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8012114:	68f8      	ldr	r0, [r7, #12]
 8012116:	f000 f8b9 	bl	801228c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	2200      	movs	r2, #0
 801211e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012128:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	2201      	movs	r2, #1
 8012136:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 801213a:	2303      	movs	r3, #3
 801213c:	e0a1      	b.n	8012282 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801213e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012140:	2b00      	cmp	r3, #0
 8012142:	d195      	bne.n	8012070 <HAL_SPI_TransmitReceive+0x234>
 8012144:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012146:	2b00      	cmp	r3, #0
 8012148:	d192      	bne.n	8012070 <HAL_SPI_TransmitReceive+0x234>
 801214a:	e073      	b.n	8012234 <HAL_SPI_TransmitReceive+0x3f8>
 801214c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	695b      	ldr	r3, [r3, #20]
 8012156:	f003 0302 	and.w	r3, r3, #2
 801215a:	2b02      	cmp	r3, #2
 801215c:	d11b      	bne.n	8012196 <HAL_SPI_TransmitReceive+0x35a>
 801215e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012160:	2b00      	cmp	r3, #0
 8012162:	d018      	beq.n	8012196 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	3320      	adds	r3, #32
 801216e:	7812      	ldrb	r2, [r2, #0]
 8012170:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012176:	1c5a      	adds	r2, r3, #1
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012182:	b29b      	uxth	r3, r3
 8012184:	3b01      	subs	r3, #1
 8012186:	b29a      	uxth	r2, r3
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012194:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	695b      	ldr	r3, [r3, #20]
 801219c:	f003 0301 	and.w	r3, r3, #1
 80121a0:	2b01      	cmp	r3, #1
 80121a2:	d11d      	bne.n	80121e0 <HAL_SPI_TransmitReceive+0x3a4>
 80121a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d01a      	beq.n	80121e0 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121b6:	7812      	ldrb	r2, [r2, #0]
 80121b8:	b2d2      	uxtb	r2, r2
 80121ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121c0:	1c5a      	adds	r2, r3, #1
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80121cc:	b29b      	uxth	r3, r3
 80121ce:	3b01      	subs	r3, #1
 80121d0:	b29a      	uxth	r2, r3
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80121de:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80121e0:	f7f5 f90e 	bl	8007400 <HAL_GetTick>
 80121e4:	4602      	mov	r2, r0
 80121e6:	69fb      	ldr	r3, [r7, #28]
 80121e8:	1ad3      	subs	r3, r2, r3
 80121ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d803      	bhi.n	80121f8 <HAL_SPI_TransmitReceive+0x3bc>
 80121f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121f6:	d102      	bne.n	80121fe <HAL_SPI_TransmitReceive+0x3c2>
 80121f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d114      	bne.n	8012228 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80121fe:	68f8      	ldr	r0, [r7, #12]
 8012200:	f000 f844 	bl	801228c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	2200      	movs	r2, #0
 8012208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012212:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	2201      	movs	r2, #1
 8012220:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8012224:	2303      	movs	r3, #3
 8012226:	e02c      	b.n	8012282 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8012228:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801222a:	2b00      	cmp	r3, #0
 801222c:	d190      	bne.n	8012150 <HAL_SPI_TransmitReceive+0x314>
 801222e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012230:	2b00      	cmp	r3, #0
 8012232:	d18d      	bne.n	8012150 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8012234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012236:	9300      	str	r3, [sp, #0]
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	2200      	movs	r2, #0
 801223c:	2108      	movs	r1, #8
 801223e:	68f8      	ldr	r0, [r7, #12]
 8012240:	f000 f8c4 	bl	80123cc <SPI_WaitOnFlagUntilTimeout>
 8012244:	4603      	mov	r3, r0
 8012246:	2b00      	cmp	r3, #0
 8012248:	d007      	beq.n	801225a <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012250:	f043 0220 	orr.w	r2, r3, #32
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801225a:	68f8      	ldr	r0, [r7, #12]
 801225c:	f000 f816 	bl	801228c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	2200      	movs	r2, #0
 8012264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2201      	movs	r2, #1
 801226c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012276:	2b00      	cmp	r3, #0
 8012278:	d001      	beq.n	801227e <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 801227a:	2301      	movs	r3, #1
 801227c:	e001      	b.n	8012282 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 801227e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8012282:	4618      	mov	r0, r3
 8012284:	3730      	adds	r7, #48	; 0x30
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop

0801228c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801228c:	b480      	push	{r7}
 801228e:	b085      	sub	sp, #20
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	695b      	ldr	r3, [r3, #20]
 801229a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	699a      	ldr	r2, [r3, #24]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f042 0208 	orr.w	r2, r2, #8
 80122aa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	699a      	ldr	r2, [r3, #24]
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	f042 0210 	orr.w	r2, r2, #16
 80122ba:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	681a      	ldr	r2, [r3, #0]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f022 0201 	bic.w	r2, r2, #1
 80122ca:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	6919      	ldr	r1, [r3, #16]
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681a      	ldr	r2, [r3, #0]
 80122d6:	4b3c      	ldr	r3, [pc, #240]	; (80123c8 <SPI_CloseTransfer+0x13c>)
 80122d8:	400b      	ands	r3, r1
 80122da:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	689a      	ldr	r2, [r3, #8]
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80122ea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80122f2:	b2db      	uxtb	r3, r3
 80122f4:	2b04      	cmp	r3, #4
 80122f6:	d014      	beq.n	8012322 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	f003 0320 	and.w	r3, r3, #32
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d00f      	beq.n	8012322 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012308:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	699a      	ldr	r2, [r3, #24]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	f042 0220 	orr.w	r2, r2, #32
 8012320:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012328:	b2db      	uxtb	r3, r3
 801232a:	2b03      	cmp	r3, #3
 801232c:	d014      	beq.n	8012358 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012334:	2b00      	cmp	r3, #0
 8012336:	d00f      	beq.n	8012358 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801233e:	f043 0204 	orr.w	r2, r3, #4
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	699a      	ldr	r2, [r3, #24]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012356:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801235e:	2b00      	cmp	r3, #0
 8012360:	d00f      	beq.n	8012382 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012368:	f043 0201 	orr.w	r2, r3, #1
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	699a      	ldr	r2, [r3, #24]
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012380:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012388:	2b00      	cmp	r3, #0
 801238a:	d00f      	beq.n	80123ac <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012392:	f043 0208 	orr.w	r2, r3, #8
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	699a      	ldr	r2, [r3, #24]
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80123aa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2200      	movs	r2, #0
 80123b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2200      	movs	r2, #0
 80123b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80123bc:	bf00      	nop
 80123be:	3714      	adds	r7, #20
 80123c0:	46bd      	mov	sp, r7
 80123c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c6:	4770      	bx	lr
 80123c8:	fffffc90 	.word	0xfffffc90

080123cc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b084      	sub	sp, #16
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	60f8      	str	r0, [r7, #12]
 80123d4:	60b9      	str	r1, [r7, #8]
 80123d6:	603b      	str	r3, [r7, #0]
 80123d8:	4613      	mov	r3, r2
 80123da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80123dc:	e010      	b.n	8012400 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80123de:	f7f5 f80f 	bl	8007400 <HAL_GetTick>
 80123e2:	4602      	mov	r2, r0
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	1ad3      	subs	r3, r2, r3
 80123e8:	69ba      	ldr	r2, [r7, #24]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d803      	bhi.n	80123f6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80123ee:	69bb      	ldr	r3, [r7, #24]
 80123f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123f4:	d102      	bne.n	80123fc <SPI_WaitOnFlagUntilTimeout+0x30>
 80123f6:	69bb      	ldr	r3, [r7, #24]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d101      	bne.n	8012400 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80123fc:	2303      	movs	r3, #3
 80123fe:	e00f      	b.n	8012420 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	695a      	ldr	r2, [r3, #20]
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	4013      	ands	r3, r2
 801240a:	68ba      	ldr	r2, [r7, #8]
 801240c:	429a      	cmp	r2, r3
 801240e:	bf0c      	ite	eq
 8012410:	2301      	moveq	r3, #1
 8012412:	2300      	movne	r3, #0
 8012414:	b2db      	uxtb	r3, r3
 8012416:	461a      	mov	r2, r3
 8012418:	79fb      	ldrb	r3, [r7, #7]
 801241a:	429a      	cmp	r2, r3
 801241c:	d0df      	beq.n	80123de <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801241e:	2300      	movs	r3, #0
}
 8012420:	4618      	mov	r0, r3
 8012422:	3710      	adds	r7, #16
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8012428:	b480      	push	{r7}
 801242a:	b085      	sub	sp, #20
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012434:	095b      	lsrs	r3, r3, #5
 8012436:	3301      	adds	r3, #1
 8012438:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	68db      	ldr	r3, [r3, #12]
 801243e:	3301      	adds	r3, #1
 8012440:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	3307      	adds	r3, #7
 8012446:	08db      	lsrs	r3, r3, #3
 8012448:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	68fa      	ldr	r2, [r7, #12]
 801244e:	fb02 f303 	mul.w	r3, r2, r3
}
 8012452:	4618      	mov	r0, r3
 8012454:	3714      	adds	r7, #20
 8012456:	46bd      	mov	sp, r7
 8012458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245c:	4770      	bx	lr

0801245e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801245e:	b580      	push	{r7, lr}
 8012460:	b082      	sub	sp, #8
 8012462:	af00      	add	r7, sp, #0
 8012464:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d101      	bne.n	8012470 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801246c:	2301      	movs	r3, #1
 801246e:	e049      	b.n	8012504 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012476:	b2db      	uxtb	r3, r3
 8012478:	2b00      	cmp	r3, #0
 801247a:	d106      	bne.n	801248a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2200      	movs	r2, #0
 8012480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f7f4 fabd 	bl	8006a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2202      	movs	r2, #2
 801248e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	3304      	adds	r3, #4
 801249a:	4619      	mov	r1, r3
 801249c:	4610      	mov	r0, r2
 801249e:	f001 fabf 	bl	8013a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	2201      	movs	r2, #1
 80124a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	2201      	movs	r2, #1
 80124ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2201      	movs	r2, #1
 80124b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2201      	movs	r2, #1
 80124be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2201      	movs	r2, #1
 80124c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	2201      	movs	r2, #1
 80124ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2201      	movs	r2, #1
 80124d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2201      	movs	r2, #1
 80124de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2201      	movs	r2, #1
 80124e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2201      	movs	r2, #1
 80124ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2201      	movs	r2, #1
 80124f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2201      	movs	r2, #1
 80124fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012502:	2300      	movs	r3, #0
}
 8012504:	4618      	mov	r0, r3
 8012506:	3708      	adds	r7, #8
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}

0801250c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801250c:	b480      	push	{r7}
 801250e:	b085      	sub	sp, #20
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801251a:	b2db      	uxtb	r3, r3
 801251c:	2b01      	cmp	r3, #1
 801251e:	d001      	beq.n	8012524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012520:	2301      	movs	r3, #1
 8012522:	e05e      	b.n	80125e2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2202      	movs	r2, #2
 8012528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	68da      	ldr	r2, [r3, #12]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	f042 0201 	orr.w	r2, r2, #1
 801253a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	4a2b      	ldr	r2, [pc, #172]	; (80125f0 <HAL_TIM_Base_Start_IT+0xe4>)
 8012542:	4293      	cmp	r3, r2
 8012544:	d02c      	beq.n	80125a0 <HAL_TIM_Base_Start_IT+0x94>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801254e:	d027      	beq.n	80125a0 <HAL_TIM_Base_Start_IT+0x94>
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	4a27      	ldr	r2, [pc, #156]	; (80125f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8012556:	4293      	cmp	r3, r2
 8012558:	d022      	beq.n	80125a0 <HAL_TIM_Base_Start_IT+0x94>
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	4a26      	ldr	r2, [pc, #152]	; (80125f8 <HAL_TIM_Base_Start_IT+0xec>)
 8012560:	4293      	cmp	r3, r2
 8012562:	d01d      	beq.n	80125a0 <HAL_TIM_Base_Start_IT+0x94>
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	4a24      	ldr	r2, [pc, #144]	; (80125fc <HAL_TIM_Base_Start_IT+0xf0>)
 801256a:	4293      	cmp	r3, r2
 801256c:	d018      	beq.n	80125a0 <HAL_TIM_Base_Start_IT+0x94>
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	4a23      	ldr	r2, [pc, #140]	; (8012600 <HAL_TIM_Base_Start_IT+0xf4>)
 8012574:	4293      	cmp	r3, r2
 8012576:	d013      	beq.n	80125a0 <HAL_TIM_Base_Start_IT+0x94>
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	4a21      	ldr	r2, [pc, #132]	; (8012604 <HAL_TIM_Base_Start_IT+0xf8>)
 801257e:	4293      	cmp	r3, r2
 8012580:	d00e      	beq.n	80125a0 <HAL_TIM_Base_Start_IT+0x94>
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	4a20      	ldr	r2, [pc, #128]	; (8012608 <HAL_TIM_Base_Start_IT+0xfc>)
 8012588:	4293      	cmp	r3, r2
 801258a:	d009      	beq.n	80125a0 <HAL_TIM_Base_Start_IT+0x94>
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	4a1e      	ldr	r2, [pc, #120]	; (801260c <HAL_TIM_Base_Start_IT+0x100>)
 8012592:	4293      	cmp	r3, r2
 8012594:	d004      	beq.n	80125a0 <HAL_TIM_Base_Start_IT+0x94>
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	4a1d      	ldr	r2, [pc, #116]	; (8012610 <HAL_TIM_Base_Start_IT+0x104>)
 801259c:	4293      	cmp	r3, r2
 801259e:	d115      	bne.n	80125cc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	689a      	ldr	r2, [r3, #8]
 80125a6:	4b1b      	ldr	r3, [pc, #108]	; (8012614 <HAL_TIM_Base_Start_IT+0x108>)
 80125a8:	4013      	ands	r3, r2
 80125aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	2b06      	cmp	r3, #6
 80125b0:	d015      	beq.n	80125de <HAL_TIM_Base_Start_IT+0xd2>
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125b8:	d011      	beq.n	80125de <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	681a      	ldr	r2, [r3, #0]
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	f042 0201 	orr.w	r2, r2, #1
 80125c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80125ca:	e008      	b.n	80125de <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	681a      	ldr	r2, [r3, #0]
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	f042 0201 	orr.w	r2, r2, #1
 80125da:	601a      	str	r2, [r3, #0]
 80125dc:	e000      	b.n	80125e0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80125de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80125e0:	2300      	movs	r3, #0
}
 80125e2:	4618      	mov	r0, r3
 80125e4:	3714      	adds	r7, #20
 80125e6:	46bd      	mov	sp, r7
 80125e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop
 80125f0:	40010000 	.word	0x40010000
 80125f4:	40000400 	.word	0x40000400
 80125f8:	40000800 	.word	0x40000800
 80125fc:	40000c00 	.word	0x40000c00
 8012600:	40010400 	.word	0x40010400
 8012604:	40001800 	.word	0x40001800
 8012608:	40014000 	.word	0x40014000
 801260c:	4000e000 	.word	0x4000e000
 8012610:	4000e400 	.word	0x4000e400
 8012614:	00010007 	.word	0x00010007

08012618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b082      	sub	sp, #8
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d101      	bne.n	801262a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012626:	2301      	movs	r3, #1
 8012628:	e049      	b.n	80126be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012630:	b2db      	uxtb	r3, r3
 8012632:	2b00      	cmp	r3, #0
 8012634:	d106      	bne.n	8012644 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2200      	movs	r2, #0
 801263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f7f4 f872 	bl	8006728 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2202      	movs	r2, #2
 8012648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681a      	ldr	r2, [r3, #0]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	3304      	adds	r3, #4
 8012654:	4619      	mov	r1, r3
 8012656:	4610      	mov	r0, r2
 8012658:	f001 f9e2 	bl	8013a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2201      	movs	r2, #1
 8012660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2201      	movs	r2, #1
 8012668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2201      	movs	r2, #1
 8012670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2201      	movs	r2, #1
 8012678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2201      	movs	r2, #1
 8012680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2201      	movs	r2, #1
 8012688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2201      	movs	r2, #1
 8012690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	2201      	movs	r2, #1
 8012698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2201      	movs	r2, #1
 80126a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2201      	movs	r2, #1
 80126a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	2201      	movs	r2, #1
 80126b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2201      	movs	r2, #1
 80126b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80126bc:	2300      	movs	r3, #0
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3708      	adds	r7, #8
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
	...

080126c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b084      	sub	sp, #16
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d109      	bne.n	80126ec <HAL_TIM_PWM_Start+0x24>
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80126de:	b2db      	uxtb	r3, r3
 80126e0:	2b01      	cmp	r3, #1
 80126e2:	bf14      	ite	ne
 80126e4:	2301      	movne	r3, #1
 80126e6:	2300      	moveq	r3, #0
 80126e8:	b2db      	uxtb	r3, r3
 80126ea:	e03c      	b.n	8012766 <HAL_TIM_PWM_Start+0x9e>
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	2b04      	cmp	r3, #4
 80126f0:	d109      	bne.n	8012706 <HAL_TIM_PWM_Start+0x3e>
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80126f8:	b2db      	uxtb	r3, r3
 80126fa:	2b01      	cmp	r3, #1
 80126fc:	bf14      	ite	ne
 80126fe:	2301      	movne	r3, #1
 8012700:	2300      	moveq	r3, #0
 8012702:	b2db      	uxtb	r3, r3
 8012704:	e02f      	b.n	8012766 <HAL_TIM_PWM_Start+0x9e>
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	2b08      	cmp	r3, #8
 801270a:	d109      	bne.n	8012720 <HAL_TIM_PWM_Start+0x58>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012712:	b2db      	uxtb	r3, r3
 8012714:	2b01      	cmp	r3, #1
 8012716:	bf14      	ite	ne
 8012718:	2301      	movne	r3, #1
 801271a:	2300      	moveq	r3, #0
 801271c:	b2db      	uxtb	r3, r3
 801271e:	e022      	b.n	8012766 <HAL_TIM_PWM_Start+0x9e>
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	2b0c      	cmp	r3, #12
 8012724:	d109      	bne.n	801273a <HAL_TIM_PWM_Start+0x72>
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801272c:	b2db      	uxtb	r3, r3
 801272e:	2b01      	cmp	r3, #1
 8012730:	bf14      	ite	ne
 8012732:	2301      	movne	r3, #1
 8012734:	2300      	moveq	r3, #0
 8012736:	b2db      	uxtb	r3, r3
 8012738:	e015      	b.n	8012766 <HAL_TIM_PWM_Start+0x9e>
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	2b10      	cmp	r3, #16
 801273e:	d109      	bne.n	8012754 <HAL_TIM_PWM_Start+0x8c>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012746:	b2db      	uxtb	r3, r3
 8012748:	2b01      	cmp	r3, #1
 801274a:	bf14      	ite	ne
 801274c:	2301      	movne	r3, #1
 801274e:	2300      	moveq	r3, #0
 8012750:	b2db      	uxtb	r3, r3
 8012752:	e008      	b.n	8012766 <HAL_TIM_PWM_Start+0x9e>
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801275a:	b2db      	uxtb	r3, r3
 801275c:	2b01      	cmp	r3, #1
 801275e:	bf14      	ite	ne
 8012760:	2301      	movne	r3, #1
 8012762:	2300      	moveq	r3, #0
 8012764:	b2db      	uxtb	r3, r3
 8012766:	2b00      	cmp	r3, #0
 8012768:	d001      	beq.n	801276e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801276a:	2301      	movs	r3, #1
 801276c:	e0ab      	b.n	80128c6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d104      	bne.n	801277e <HAL_TIM_PWM_Start+0xb6>
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2202      	movs	r2, #2
 8012778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801277c:	e023      	b.n	80127c6 <HAL_TIM_PWM_Start+0xfe>
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	2b04      	cmp	r3, #4
 8012782:	d104      	bne.n	801278e <HAL_TIM_PWM_Start+0xc6>
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	2202      	movs	r2, #2
 8012788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801278c:	e01b      	b.n	80127c6 <HAL_TIM_PWM_Start+0xfe>
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	2b08      	cmp	r3, #8
 8012792:	d104      	bne.n	801279e <HAL_TIM_PWM_Start+0xd6>
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2202      	movs	r2, #2
 8012798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801279c:	e013      	b.n	80127c6 <HAL_TIM_PWM_Start+0xfe>
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	2b0c      	cmp	r3, #12
 80127a2:	d104      	bne.n	80127ae <HAL_TIM_PWM_Start+0xe6>
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2202      	movs	r2, #2
 80127a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80127ac:	e00b      	b.n	80127c6 <HAL_TIM_PWM_Start+0xfe>
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	2b10      	cmp	r3, #16
 80127b2:	d104      	bne.n	80127be <HAL_TIM_PWM_Start+0xf6>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2202      	movs	r2, #2
 80127b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80127bc:	e003      	b.n	80127c6 <HAL_TIM_PWM_Start+0xfe>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2202      	movs	r2, #2
 80127c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	2201      	movs	r2, #1
 80127cc:	6839      	ldr	r1, [r7, #0]
 80127ce:	4618      	mov	r0, r3
 80127d0:	f001 fd40 	bl	8014254 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	4a3d      	ldr	r2, [pc, #244]	; (80128d0 <HAL_TIM_PWM_Start+0x208>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d013      	beq.n	8012806 <HAL_TIM_PWM_Start+0x13e>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	4a3c      	ldr	r2, [pc, #240]	; (80128d4 <HAL_TIM_PWM_Start+0x20c>)
 80127e4:	4293      	cmp	r3, r2
 80127e6:	d00e      	beq.n	8012806 <HAL_TIM_PWM_Start+0x13e>
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	4a3a      	ldr	r2, [pc, #232]	; (80128d8 <HAL_TIM_PWM_Start+0x210>)
 80127ee:	4293      	cmp	r3, r2
 80127f0:	d009      	beq.n	8012806 <HAL_TIM_PWM_Start+0x13e>
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	4a39      	ldr	r2, [pc, #228]	; (80128dc <HAL_TIM_PWM_Start+0x214>)
 80127f8:	4293      	cmp	r3, r2
 80127fa:	d004      	beq.n	8012806 <HAL_TIM_PWM_Start+0x13e>
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	4a37      	ldr	r2, [pc, #220]	; (80128e0 <HAL_TIM_PWM_Start+0x218>)
 8012802:	4293      	cmp	r3, r2
 8012804:	d101      	bne.n	801280a <HAL_TIM_PWM_Start+0x142>
 8012806:	2301      	movs	r3, #1
 8012808:	e000      	b.n	801280c <HAL_TIM_PWM_Start+0x144>
 801280a:	2300      	movs	r3, #0
 801280c:	2b00      	cmp	r3, #0
 801280e:	d007      	beq.n	8012820 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801281e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	4a2a      	ldr	r2, [pc, #168]	; (80128d0 <HAL_TIM_PWM_Start+0x208>)
 8012826:	4293      	cmp	r3, r2
 8012828:	d02c      	beq.n	8012884 <HAL_TIM_PWM_Start+0x1bc>
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012832:	d027      	beq.n	8012884 <HAL_TIM_PWM_Start+0x1bc>
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	4a2a      	ldr	r2, [pc, #168]	; (80128e4 <HAL_TIM_PWM_Start+0x21c>)
 801283a:	4293      	cmp	r3, r2
 801283c:	d022      	beq.n	8012884 <HAL_TIM_PWM_Start+0x1bc>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	4a29      	ldr	r2, [pc, #164]	; (80128e8 <HAL_TIM_PWM_Start+0x220>)
 8012844:	4293      	cmp	r3, r2
 8012846:	d01d      	beq.n	8012884 <HAL_TIM_PWM_Start+0x1bc>
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	4a27      	ldr	r2, [pc, #156]	; (80128ec <HAL_TIM_PWM_Start+0x224>)
 801284e:	4293      	cmp	r3, r2
 8012850:	d018      	beq.n	8012884 <HAL_TIM_PWM_Start+0x1bc>
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	4a1f      	ldr	r2, [pc, #124]	; (80128d4 <HAL_TIM_PWM_Start+0x20c>)
 8012858:	4293      	cmp	r3, r2
 801285a:	d013      	beq.n	8012884 <HAL_TIM_PWM_Start+0x1bc>
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	4a23      	ldr	r2, [pc, #140]	; (80128f0 <HAL_TIM_PWM_Start+0x228>)
 8012862:	4293      	cmp	r3, r2
 8012864:	d00e      	beq.n	8012884 <HAL_TIM_PWM_Start+0x1bc>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	4a1b      	ldr	r2, [pc, #108]	; (80128d8 <HAL_TIM_PWM_Start+0x210>)
 801286c:	4293      	cmp	r3, r2
 801286e:	d009      	beq.n	8012884 <HAL_TIM_PWM_Start+0x1bc>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	4a1f      	ldr	r2, [pc, #124]	; (80128f4 <HAL_TIM_PWM_Start+0x22c>)
 8012876:	4293      	cmp	r3, r2
 8012878:	d004      	beq.n	8012884 <HAL_TIM_PWM_Start+0x1bc>
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	4a1e      	ldr	r2, [pc, #120]	; (80128f8 <HAL_TIM_PWM_Start+0x230>)
 8012880:	4293      	cmp	r3, r2
 8012882:	d115      	bne.n	80128b0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	689a      	ldr	r2, [r3, #8]
 801288a:	4b1c      	ldr	r3, [pc, #112]	; (80128fc <HAL_TIM_PWM_Start+0x234>)
 801288c:	4013      	ands	r3, r2
 801288e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	2b06      	cmp	r3, #6
 8012894:	d015      	beq.n	80128c2 <HAL_TIM_PWM_Start+0x1fa>
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801289c:	d011      	beq.n	80128c2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f042 0201 	orr.w	r2, r2, #1
 80128ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80128ae:	e008      	b.n	80128c2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	681a      	ldr	r2, [r3, #0]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	f042 0201 	orr.w	r2, r2, #1
 80128be:	601a      	str	r2, [r3, #0]
 80128c0:	e000      	b.n	80128c4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80128c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80128c4:	2300      	movs	r3, #0
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3710      	adds	r7, #16
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}
 80128ce:	bf00      	nop
 80128d0:	40010000 	.word	0x40010000
 80128d4:	40010400 	.word	0x40010400
 80128d8:	40014000 	.word	0x40014000
 80128dc:	40014400 	.word	0x40014400
 80128e0:	40014800 	.word	0x40014800
 80128e4:	40000400 	.word	0x40000400
 80128e8:	40000800 	.word	0x40000800
 80128ec:	40000c00 	.word	0x40000c00
 80128f0:	40001800 	.word	0x40001800
 80128f4:	4000e000 	.word	0x4000e000
 80128f8:	4000e400 	.word	0x4000e400
 80128fc:	00010007 	.word	0x00010007

08012900 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b086      	sub	sp, #24
 8012904:	af00      	add	r7, sp, #0
 8012906:	60f8      	str	r0, [r7, #12]
 8012908:	60b9      	str	r1, [r7, #8]
 801290a:	607a      	str	r2, [r7, #4]
 801290c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 801290e:	2300      	movs	r3, #0
 8012910:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d109      	bne.n	801292c <HAL_TIM_PWM_Start_DMA+0x2c>
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801291e:	b2db      	uxtb	r3, r3
 8012920:	2b02      	cmp	r3, #2
 8012922:	bf0c      	ite	eq
 8012924:	2301      	moveq	r3, #1
 8012926:	2300      	movne	r3, #0
 8012928:	b2db      	uxtb	r3, r3
 801292a:	e03c      	b.n	80129a6 <HAL_TIM_PWM_Start_DMA+0xa6>
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	2b04      	cmp	r3, #4
 8012930:	d109      	bne.n	8012946 <HAL_TIM_PWM_Start_DMA+0x46>
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012938:	b2db      	uxtb	r3, r3
 801293a:	2b02      	cmp	r3, #2
 801293c:	bf0c      	ite	eq
 801293e:	2301      	moveq	r3, #1
 8012940:	2300      	movne	r3, #0
 8012942:	b2db      	uxtb	r3, r3
 8012944:	e02f      	b.n	80129a6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	2b08      	cmp	r3, #8
 801294a:	d109      	bne.n	8012960 <HAL_TIM_PWM_Start_DMA+0x60>
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012952:	b2db      	uxtb	r3, r3
 8012954:	2b02      	cmp	r3, #2
 8012956:	bf0c      	ite	eq
 8012958:	2301      	moveq	r3, #1
 801295a:	2300      	movne	r3, #0
 801295c:	b2db      	uxtb	r3, r3
 801295e:	e022      	b.n	80129a6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	2b0c      	cmp	r3, #12
 8012964:	d109      	bne.n	801297a <HAL_TIM_PWM_Start_DMA+0x7a>
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801296c:	b2db      	uxtb	r3, r3
 801296e:	2b02      	cmp	r3, #2
 8012970:	bf0c      	ite	eq
 8012972:	2301      	moveq	r3, #1
 8012974:	2300      	movne	r3, #0
 8012976:	b2db      	uxtb	r3, r3
 8012978:	e015      	b.n	80129a6 <HAL_TIM_PWM_Start_DMA+0xa6>
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	2b10      	cmp	r3, #16
 801297e:	d109      	bne.n	8012994 <HAL_TIM_PWM_Start_DMA+0x94>
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012986:	b2db      	uxtb	r3, r3
 8012988:	2b02      	cmp	r3, #2
 801298a:	bf0c      	ite	eq
 801298c:	2301      	moveq	r3, #1
 801298e:	2300      	movne	r3, #0
 8012990:	b2db      	uxtb	r3, r3
 8012992:	e008      	b.n	80129a6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801299a:	b2db      	uxtb	r3, r3
 801299c:	2b02      	cmp	r3, #2
 801299e:	bf0c      	ite	eq
 80129a0:	2301      	moveq	r3, #1
 80129a2:	2300      	movne	r3, #0
 80129a4:	b2db      	uxtb	r3, r3
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d001      	beq.n	80129ae <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80129aa:	2302      	movs	r3, #2
 80129ac:	e1ba      	b.n	8012d24 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d109      	bne.n	80129c8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	2b01      	cmp	r3, #1
 80129be:	bf0c      	ite	eq
 80129c0:	2301      	moveq	r3, #1
 80129c2:	2300      	movne	r3, #0
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	e03c      	b.n	8012a42 <HAL_TIM_PWM_Start_DMA+0x142>
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	2b04      	cmp	r3, #4
 80129cc:	d109      	bne.n	80129e2 <HAL_TIM_PWM_Start_DMA+0xe2>
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80129d4:	b2db      	uxtb	r3, r3
 80129d6:	2b01      	cmp	r3, #1
 80129d8:	bf0c      	ite	eq
 80129da:	2301      	moveq	r3, #1
 80129dc:	2300      	movne	r3, #0
 80129de:	b2db      	uxtb	r3, r3
 80129e0:	e02f      	b.n	8012a42 <HAL_TIM_PWM_Start_DMA+0x142>
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	2b08      	cmp	r3, #8
 80129e6:	d109      	bne.n	80129fc <HAL_TIM_PWM_Start_DMA+0xfc>
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80129ee:	b2db      	uxtb	r3, r3
 80129f0:	2b01      	cmp	r3, #1
 80129f2:	bf0c      	ite	eq
 80129f4:	2301      	moveq	r3, #1
 80129f6:	2300      	movne	r3, #0
 80129f8:	b2db      	uxtb	r3, r3
 80129fa:	e022      	b.n	8012a42 <HAL_TIM_PWM_Start_DMA+0x142>
 80129fc:	68bb      	ldr	r3, [r7, #8]
 80129fe:	2b0c      	cmp	r3, #12
 8012a00:	d109      	bne.n	8012a16 <HAL_TIM_PWM_Start_DMA+0x116>
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012a08:	b2db      	uxtb	r3, r3
 8012a0a:	2b01      	cmp	r3, #1
 8012a0c:	bf0c      	ite	eq
 8012a0e:	2301      	moveq	r3, #1
 8012a10:	2300      	movne	r3, #0
 8012a12:	b2db      	uxtb	r3, r3
 8012a14:	e015      	b.n	8012a42 <HAL_TIM_PWM_Start_DMA+0x142>
 8012a16:	68bb      	ldr	r3, [r7, #8]
 8012a18:	2b10      	cmp	r3, #16
 8012a1a:	d109      	bne.n	8012a30 <HAL_TIM_PWM_Start_DMA+0x130>
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a22:	b2db      	uxtb	r3, r3
 8012a24:	2b01      	cmp	r3, #1
 8012a26:	bf0c      	ite	eq
 8012a28:	2301      	moveq	r3, #1
 8012a2a:	2300      	movne	r3, #0
 8012a2c:	b2db      	uxtb	r3, r3
 8012a2e:	e008      	b.n	8012a42 <HAL_TIM_PWM_Start_DMA+0x142>
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012a36:	b2db      	uxtb	r3, r3
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	bf0c      	ite	eq
 8012a3c:	2301      	moveq	r3, #1
 8012a3e:	2300      	movne	r3, #0
 8012a40:	b2db      	uxtb	r3, r3
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d034      	beq.n	8012ab0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d104      	bne.n	8012a56 <HAL_TIM_PWM_Start_DMA+0x156>
 8012a4c:	887b      	ldrh	r3, [r7, #2]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d001      	beq.n	8012a56 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8012a52:	2301      	movs	r3, #1
 8012a54:	e166      	b.n	8012d24 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d104      	bne.n	8012a66 <HAL_TIM_PWM_Start_DMA+0x166>
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	2202      	movs	r2, #2
 8012a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012a64:	e026      	b.n	8012ab4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	2b04      	cmp	r3, #4
 8012a6a:	d104      	bne.n	8012a76 <HAL_TIM_PWM_Start_DMA+0x176>
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	2202      	movs	r2, #2
 8012a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012a74:	e01e      	b.n	8012ab4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	2b08      	cmp	r3, #8
 8012a7a:	d104      	bne.n	8012a86 <HAL_TIM_PWM_Start_DMA+0x186>
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	2202      	movs	r2, #2
 8012a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012a84:	e016      	b.n	8012ab4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	2b0c      	cmp	r3, #12
 8012a8a:	d104      	bne.n	8012a96 <HAL_TIM_PWM_Start_DMA+0x196>
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	2202      	movs	r2, #2
 8012a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012a94:	e00e      	b.n	8012ab4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	2b10      	cmp	r3, #16
 8012a9a:	d104      	bne.n	8012aa6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	2202      	movs	r2, #2
 8012aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012aa4:	e006      	b.n	8012ab4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	2202      	movs	r2, #2
 8012aaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012aae:	e001      	b.n	8012ab4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	e137      	b.n	8012d24 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	2b0c      	cmp	r3, #12
 8012ab8:	f200 80ae 	bhi.w	8012c18 <HAL_TIM_PWM_Start_DMA+0x318>
 8012abc:	a201      	add	r2, pc, #4	; (adr r2, 8012ac4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8012abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ac2:	bf00      	nop
 8012ac4:	08012af9 	.word	0x08012af9
 8012ac8:	08012c19 	.word	0x08012c19
 8012acc:	08012c19 	.word	0x08012c19
 8012ad0:	08012c19 	.word	0x08012c19
 8012ad4:	08012b41 	.word	0x08012b41
 8012ad8:	08012c19 	.word	0x08012c19
 8012adc:	08012c19 	.word	0x08012c19
 8012ae0:	08012c19 	.word	0x08012c19
 8012ae4:	08012b89 	.word	0x08012b89
 8012ae8:	08012c19 	.word	0x08012c19
 8012aec:	08012c19 	.word	0x08012c19
 8012af0:	08012c19 	.word	0x08012c19
 8012af4:	08012bd1 	.word	0x08012bd1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012afc:	4a8b      	ldr	r2, [pc, #556]	; (8012d2c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012afe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b04:	4a8a      	ldr	r2, [pc, #552]	; (8012d30 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012b06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b0c:	4a89      	ldr	r2, [pc, #548]	; (8012d34 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012b0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012b14:	6879      	ldr	r1, [r7, #4]
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	3334      	adds	r3, #52	; 0x34
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	887b      	ldrh	r3, [r7, #2]
 8012b20:	f7f7 fc54 	bl	800a3cc <HAL_DMA_Start_IT>
 8012b24:	4603      	mov	r3, r0
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d001      	beq.n	8012b2e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	e0fa      	b.n	8012d24 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	68da      	ldr	r2, [r3, #12]
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012b3c:	60da      	str	r2, [r3, #12]
      break;
 8012b3e:	e06e      	b.n	8012c1e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b44:	4a79      	ldr	r2, [pc, #484]	; (8012d2c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012b46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b4c:	4a78      	ldr	r2, [pc, #480]	; (8012d30 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012b4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b54:	4a77      	ldr	r2, [pc, #476]	; (8012d34 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012b56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8012b5c:	6879      	ldr	r1, [r7, #4]
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	3338      	adds	r3, #56	; 0x38
 8012b64:	461a      	mov	r2, r3
 8012b66:	887b      	ldrh	r3, [r7, #2]
 8012b68:	f7f7 fc30 	bl	800a3cc <HAL_DMA_Start_IT>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d001      	beq.n	8012b76 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012b72:	2301      	movs	r3, #1
 8012b74:	e0d6      	b.n	8012d24 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	68da      	ldr	r2, [r3, #12]
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012b84:	60da      	str	r2, [r3, #12]
      break;
 8012b86:	e04a      	b.n	8012c1e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b8c:	4a67      	ldr	r2, [pc, #412]	; (8012d2c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012b8e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b94:	4a66      	ldr	r2, [pc, #408]	; (8012d30 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012b96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b9c:	4a65      	ldr	r2, [pc, #404]	; (8012d34 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012b9e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012ba4:	6879      	ldr	r1, [r7, #4]
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	333c      	adds	r3, #60	; 0x3c
 8012bac:	461a      	mov	r2, r3
 8012bae:	887b      	ldrh	r3, [r7, #2]
 8012bb0:	f7f7 fc0c 	bl	800a3cc <HAL_DMA_Start_IT>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d001      	beq.n	8012bbe <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012bba:	2301      	movs	r3, #1
 8012bbc:	e0b2      	b.n	8012d24 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	68da      	ldr	r2, [r3, #12]
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012bcc:	60da      	str	r2, [r3, #12]
      break;
 8012bce:	e026      	b.n	8012c1e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bd4:	4a55      	ldr	r2, [pc, #340]	; (8012d2c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012bd6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bdc:	4a54      	ldr	r2, [pc, #336]	; (8012d30 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012bde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012be4:	4a53      	ldr	r2, [pc, #332]	; (8012d34 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012be6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012bec:	6879      	ldr	r1, [r7, #4]
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	3340      	adds	r3, #64	; 0x40
 8012bf4:	461a      	mov	r2, r3
 8012bf6:	887b      	ldrh	r3, [r7, #2]
 8012bf8:	f7f7 fbe8 	bl	800a3cc <HAL_DMA_Start_IT>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d001      	beq.n	8012c06 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012c02:	2301      	movs	r3, #1
 8012c04:	e08e      	b.n	8012d24 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	68da      	ldr	r2, [r3, #12]
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012c14:	60da      	str	r2, [r3, #12]
      break;
 8012c16:	e002      	b.n	8012c1e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8012c1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8012c1e:	7dfb      	ldrb	r3, [r7, #23]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d17e      	bne.n	8012d22 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	2201      	movs	r2, #1
 8012c2a:	68b9      	ldr	r1, [r7, #8]
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f001 fb11 	bl	8014254 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	4a40      	ldr	r2, [pc, #256]	; (8012d38 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012c38:	4293      	cmp	r3, r2
 8012c3a:	d013      	beq.n	8012c64 <HAL_TIM_PWM_Start_DMA+0x364>
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	4a3e      	ldr	r2, [pc, #248]	; (8012d3c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8012c42:	4293      	cmp	r3, r2
 8012c44:	d00e      	beq.n	8012c64 <HAL_TIM_PWM_Start_DMA+0x364>
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	4a3d      	ldr	r2, [pc, #244]	; (8012d40 <HAL_TIM_PWM_Start_DMA+0x440>)
 8012c4c:	4293      	cmp	r3, r2
 8012c4e:	d009      	beq.n	8012c64 <HAL_TIM_PWM_Start_DMA+0x364>
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	4a3b      	ldr	r2, [pc, #236]	; (8012d44 <HAL_TIM_PWM_Start_DMA+0x444>)
 8012c56:	4293      	cmp	r3, r2
 8012c58:	d004      	beq.n	8012c64 <HAL_TIM_PWM_Start_DMA+0x364>
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	4a3a      	ldr	r2, [pc, #232]	; (8012d48 <HAL_TIM_PWM_Start_DMA+0x448>)
 8012c60:	4293      	cmp	r3, r2
 8012c62:	d101      	bne.n	8012c68 <HAL_TIM_PWM_Start_DMA+0x368>
 8012c64:	2301      	movs	r3, #1
 8012c66:	e000      	b.n	8012c6a <HAL_TIM_PWM_Start_DMA+0x36a>
 8012c68:	2300      	movs	r3, #0
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d007      	beq.n	8012c7e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012c7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	4a2d      	ldr	r2, [pc, #180]	; (8012d38 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012c84:	4293      	cmp	r3, r2
 8012c86:	d02c      	beq.n	8012ce2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012c90:	d027      	beq.n	8012ce2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	4a2d      	ldr	r2, [pc, #180]	; (8012d4c <HAL_TIM_PWM_Start_DMA+0x44c>)
 8012c98:	4293      	cmp	r3, r2
 8012c9a:	d022      	beq.n	8012ce2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	4a2b      	ldr	r2, [pc, #172]	; (8012d50 <HAL_TIM_PWM_Start_DMA+0x450>)
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	d01d      	beq.n	8012ce2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	4a2a      	ldr	r2, [pc, #168]	; (8012d54 <HAL_TIM_PWM_Start_DMA+0x454>)
 8012cac:	4293      	cmp	r3, r2
 8012cae:	d018      	beq.n	8012ce2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	4a21      	ldr	r2, [pc, #132]	; (8012d3c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	d013      	beq.n	8012ce2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	4a26      	ldr	r2, [pc, #152]	; (8012d58 <HAL_TIM_PWM_Start_DMA+0x458>)
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	d00e      	beq.n	8012ce2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	4a1d      	ldr	r2, [pc, #116]	; (8012d40 <HAL_TIM_PWM_Start_DMA+0x440>)
 8012cca:	4293      	cmp	r3, r2
 8012ccc:	d009      	beq.n	8012ce2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	4a22      	ldr	r2, [pc, #136]	; (8012d5c <HAL_TIM_PWM_Start_DMA+0x45c>)
 8012cd4:	4293      	cmp	r3, r2
 8012cd6:	d004      	beq.n	8012ce2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	4a20      	ldr	r2, [pc, #128]	; (8012d60 <HAL_TIM_PWM_Start_DMA+0x460>)
 8012cde:	4293      	cmp	r3, r2
 8012ce0:	d115      	bne.n	8012d0e <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	689a      	ldr	r2, [r3, #8]
 8012ce8:	4b1e      	ldr	r3, [pc, #120]	; (8012d64 <HAL_TIM_PWM_Start_DMA+0x464>)
 8012cea:	4013      	ands	r3, r2
 8012cec:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	2b06      	cmp	r3, #6
 8012cf2:	d015      	beq.n	8012d20 <HAL_TIM_PWM_Start_DMA+0x420>
 8012cf4:	693b      	ldr	r3, [r7, #16]
 8012cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cfa:	d011      	beq.n	8012d20 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	681a      	ldr	r2, [r3, #0]
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	f042 0201 	orr.w	r2, r2, #1
 8012d0a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d0c:	e008      	b.n	8012d20 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	681a      	ldr	r2, [r3, #0]
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	f042 0201 	orr.w	r2, r2, #1
 8012d1c:	601a      	str	r2, [r3, #0]
 8012d1e:	e000      	b.n	8012d22 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d20:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d24:	4618      	mov	r0, r3
 8012d26:	3718      	adds	r7, #24
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bd80      	pop	{r7, pc}
 8012d2c:	0801390f 	.word	0x0801390f
 8012d30:	080139b7 	.word	0x080139b7
 8012d34:	0801387d 	.word	0x0801387d
 8012d38:	40010000 	.word	0x40010000
 8012d3c:	40010400 	.word	0x40010400
 8012d40:	40014000 	.word	0x40014000
 8012d44:	40014400 	.word	0x40014400
 8012d48:	40014800 	.word	0x40014800
 8012d4c:	40000400 	.word	0x40000400
 8012d50:	40000800 	.word	0x40000800
 8012d54:	40000c00 	.word	0x40000c00
 8012d58:	40001800 	.word	0x40001800
 8012d5c:	4000e000 	.word	0x4000e000
 8012d60:	4000e400 	.word	0x4000e400
 8012d64:	00010007 	.word	0x00010007

08012d68 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012d72:	2300      	movs	r3, #0
 8012d74:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	2b0c      	cmp	r3, #12
 8012d7a:	d855      	bhi.n	8012e28 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8012d7c:	a201      	add	r2, pc, #4	; (adr r2, 8012d84 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8012d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d82:	bf00      	nop
 8012d84:	08012db9 	.word	0x08012db9
 8012d88:	08012e29 	.word	0x08012e29
 8012d8c:	08012e29 	.word	0x08012e29
 8012d90:	08012e29 	.word	0x08012e29
 8012d94:	08012dd5 	.word	0x08012dd5
 8012d98:	08012e29 	.word	0x08012e29
 8012d9c:	08012e29 	.word	0x08012e29
 8012da0:	08012e29 	.word	0x08012e29
 8012da4:	08012df1 	.word	0x08012df1
 8012da8:	08012e29 	.word	0x08012e29
 8012dac:	08012e29 	.word	0x08012e29
 8012db0:	08012e29 	.word	0x08012e29
 8012db4:	08012e0d 	.word	0x08012e0d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	68da      	ldr	r2, [r3, #12]
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012dc6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7f8 f885 	bl	800aedc <HAL_DMA_Abort_IT>
      break;
 8012dd2:	e02c      	b.n	8012e2e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	68da      	ldr	r2, [r3, #12]
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012de2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7f8 f877 	bl	800aedc <HAL_DMA_Abort_IT>
      break;
 8012dee:	e01e      	b.n	8012e2e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	68da      	ldr	r2, [r3, #12]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012dfe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7f8 f869 	bl	800aedc <HAL_DMA_Abort_IT>
      break;
 8012e0a:	e010      	b.n	8012e2e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	68da      	ldr	r2, [r3, #12]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012e1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7f8 f85b 	bl	800aedc <HAL_DMA_Abort_IT>
      break;
 8012e26:	e002      	b.n	8012e2e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8012e28:	2301      	movs	r3, #1
 8012e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8012e2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8012e2e:	7bfb      	ldrb	r3, [r7, #15]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	f040 8081 	bne.w	8012f38 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	6839      	ldr	r1, [r7, #0]
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f001 fa08 	bl	8014254 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	4a3e      	ldr	r2, [pc, #248]	; (8012f44 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8012e4a:	4293      	cmp	r3, r2
 8012e4c:	d013      	beq.n	8012e76 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	4a3d      	ldr	r2, [pc, #244]	; (8012f48 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8012e54:	4293      	cmp	r3, r2
 8012e56:	d00e      	beq.n	8012e76 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	4a3b      	ldr	r2, [pc, #236]	; (8012f4c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8012e5e:	4293      	cmp	r3, r2
 8012e60:	d009      	beq.n	8012e76 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	4a3a      	ldr	r2, [pc, #232]	; (8012f50 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8012e68:	4293      	cmp	r3, r2
 8012e6a:	d004      	beq.n	8012e76 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	4a38      	ldr	r2, [pc, #224]	; (8012f54 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8012e72:	4293      	cmp	r3, r2
 8012e74:	d101      	bne.n	8012e7a <HAL_TIM_PWM_Stop_DMA+0x112>
 8012e76:	2301      	movs	r3, #1
 8012e78:	e000      	b.n	8012e7c <HAL_TIM_PWM_Stop_DMA+0x114>
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d017      	beq.n	8012eb0 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	6a1a      	ldr	r2, [r3, #32]
 8012e86:	f241 1311 	movw	r3, #4369	; 0x1111
 8012e8a:	4013      	ands	r3, r2
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d10f      	bne.n	8012eb0 <HAL_TIM_PWM_Stop_DMA+0x148>
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	6a1a      	ldr	r2, [r3, #32]
 8012e96:	f240 4344 	movw	r3, #1092	; 0x444
 8012e9a:	4013      	ands	r3, r2
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d107      	bne.n	8012eb0 <HAL_TIM_PWM_Stop_DMA+0x148>
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012eae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	6a1a      	ldr	r2, [r3, #32]
 8012eb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8012eba:	4013      	ands	r3, r2
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d10f      	bne.n	8012ee0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	6a1a      	ldr	r2, [r3, #32]
 8012ec6:	f240 4344 	movw	r3, #1092	; 0x444
 8012eca:	4013      	ands	r3, r2
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d107      	bne.n	8012ee0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	f022 0201 	bic.w	r2, r2, #1
 8012ede:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d104      	bne.n	8012ef0 <HAL_TIM_PWM_Stop_DMA+0x188>
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2201      	movs	r2, #1
 8012eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012eee:	e023      	b.n	8012f38 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	2b04      	cmp	r3, #4
 8012ef4:	d104      	bne.n	8012f00 <HAL_TIM_PWM_Stop_DMA+0x198>
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2201      	movs	r2, #1
 8012efa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012efe:	e01b      	b.n	8012f38 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	2b08      	cmp	r3, #8
 8012f04:	d104      	bne.n	8012f10 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2201      	movs	r2, #1
 8012f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012f0e:	e013      	b.n	8012f38 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	2b0c      	cmp	r3, #12
 8012f14:	d104      	bne.n	8012f20 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2201      	movs	r2, #1
 8012f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012f1e:	e00b      	b.n	8012f38 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	2b10      	cmp	r3, #16
 8012f24:	d104      	bne.n	8012f30 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2201      	movs	r2, #1
 8012f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012f2e:	e003      	b.n	8012f38 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2201      	movs	r2, #1
 8012f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8012f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3710      	adds	r7, #16
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
 8012f42:	bf00      	nop
 8012f44:	40010000 	.word	0x40010000
 8012f48:	40010400 	.word	0x40010400
 8012f4c:	40014000 	.word	0x40014000
 8012f50:	40014400 	.word	0x40014400
 8012f54:	40014800 	.word	0x40014800

08012f58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b086      	sub	sp, #24
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d101      	bne.n	8012f6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8012f68:	2301      	movs	r3, #1
 8012f6a:	e08f      	b.n	801308c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012f72:	b2db      	uxtb	r3, r3
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d106      	bne.n	8012f86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f7f3 fc65 	bl	8006850 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2202      	movs	r2, #2
 8012f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	6899      	ldr	r1, [r3, #8]
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681a      	ldr	r2, [r3, #0]
 8012f98:	4b3e      	ldr	r3, [pc, #248]	; (8013094 <HAL_TIM_Encoder_Init+0x13c>)
 8012f9a:	400b      	ands	r3, r1
 8012f9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681a      	ldr	r2, [r3, #0]
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	3304      	adds	r3, #4
 8012fa6:	4619      	mov	r1, r3
 8012fa8:	4610      	mov	r0, r2
 8012faa:	f000 fd39 	bl	8013a20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	689b      	ldr	r3, [r3, #8]
 8012fb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	699b      	ldr	r3, [r3, #24]
 8012fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	6a1b      	ldr	r3, [r3, #32]
 8012fc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	697a      	ldr	r2, [r7, #20]
 8012fcc:	4313      	orrs	r3, r2
 8012fce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8012fd0:	693a      	ldr	r2, [r7, #16]
 8012fd2:	4b31      	ldr	r3, [pc, #196]	; (8013098 <HAL_TIM_Encoder_Init+0x140>)
 8012fd4:	4013      	ands	r3, r2
 8012fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	689a      	ldr	r2, [r3, #8]
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	699b      	ldr	r3, [r3, #24]
 8012fe0:	021b      	lsls	r3, r3, #8
 8012fe2:	4313      	orrs	r3, r2
 8012fe4:	693a      	ldr	r2, [r7, #16]
 8012fe6:	4313      	orrs	r3, r2
 8012fe8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8012fea:	693a      	ldr	r2, [r7, #16]
 8012fec:	4b2b      	ldr	r3, [pc, #172]	; (801309c <HAL_TIM_Encoder_Init+0x144>)
 8012fee:	4013      	ands	r3, r2
 8012ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8012ff2:	693a      	ldr	r2, [r7, #16]
 8012ff4:	4b2a      	ldr	r3, [pc, #168]	; (80130a0 <HAL_TIM_Encoder_Init+0x148>)
 8012ff6:	4013      	ands	r3, r2
 8012ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	68da      	ldr	r2, [r3, #12]
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	69db      	ldr	r3, [r3, #28]
 8013002:	021b      	lsls	r3, r3, #8
 8013004:	4313      	orrs	r3, r2
 8013006:	693a      	ldr	r2, [r7, #16]
 8013008:	4313      	orrs	r3, r2
 801300a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	691b      	ldr	r3, [r3, #16]
 8013010:	011a      	lsls	r2, r3, #4
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	6a1b      	ldr	r3, [r3, #32]
 8013016:	031b      	lsls	r3, r3, #12
 8013018:	4313      	orrs	r3, r2
 801301a:	693a      	ldr	r2, [r7, #16]
 801301c:	4313      	orrs	r3, r2
 801301e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8013026:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801302e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	685a      	ldr	r2, [r3, #4]
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	695b      	ldr	r3, [r3, #20]
 8013038:	011b      	lsls	r3, r3, #4
 801303a:	4313      	orrs	r3, r2
 801303c:	68fa      	ldr	r2, [r7, #12]
 801303e:	4313      	orrs	r3, r2
 8013040:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	697a      	ldr	r2, [r7, #20]
 8013048:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	693a      	ldr	r2, [r7, #16]
 8013050:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	68fa      	ldr	r2, [r7, #12]
 8013058:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2201      	movs	r2, #1
 801305e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	2201      	movs	r2, #1
 8013066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2201      	movs	r2, #1
 801306e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	2201      	movs	r2, #1
 8013076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2201      	movs	r2, #1
 801307e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	2201      	movs	r2, #1
 8013086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801308a:	2300      	movs	r3, #0
}
 801308c:	4618      	mov	r0, r3
 801308e:	3718      	adds	r7, #24
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}
 8013094:	fffebff8 	.word	0xfffebff8
 8013098:	fffffcfc 	.word	0xfffffcfc
 801309c:	fffff3f3 	.word	0xfffff3f3
 80130a0:	ffff0f0f 	.word	0xffff0f0f

080130a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b084      	sub	sp, #16
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80130b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80130bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80130c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80130cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d110      	bne.n	80130f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80130d4:	7bfb      	ldrb	r3, [r7, #15]
 80130d6:	2b01      	cmp	r3, #1
 80130d8:	d102      	bne.n	80130e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80130da:	7b7b      	ldrb	r3, [r7, #13]
 80130dc:	2b01      	cmp	r3, #1
 80130de:	d001      	beq.n	80130e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80130e0:	2301      	movs	r3, #1
 80130e2:	e069      	b.n	80131b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2202      	movs	r2, #2
 80130e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2202      	movs	r2, #2
 80130f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80130f4:	e031      	b.n	801315a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	2b04      	cmp	r3, #4
 80130fa:	d110      	bne.n	801311e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80130fc:	7bbb      	ldrb	r3, [r7, #14]
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d102      	bne.n	8013108 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8013102:	7b3b      	ldrb	r3, [r7, #12]
 8013104:	2b01      	cmp	r3, #1
 8013106:	d001      	beq.n	801310c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8013108:	2301      	movs	r3, #1
 801310a:	e055      	b.n	80131b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2202      	movs	r2, #2
 8013110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	2202      	movs	r2, #2
 8013118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801311c:	e01d      	b.n	801315a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801311e:	7bfb      	ldrb	r3, [r7, #15]
 8013120:	2b01      	cmp	r3, #1
 8013122:	d108      	bne.n	8013136 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8013124:	7bbb      	ldrb	r3, [r7, #14]
 8013126:	2b01      	cmp	r3, #1
 8013128:	d105      	bne.n	8013136 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801312a:	7b7b      	ldrb	r3, [r7, #13]
 801312c:	2b01      	cmp	r3, #1
 801312e:	d102      	bne.n	8013136 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8013130:	7b3b      	ldrb	r3, [r7, #12]
 8013132:	2b01      	cmp	r3, #1
 8013134:	d001      	beq.n	801313a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8013136:	2301      	movs	r3, #1
 8013138:	e03e      	b.n	80131b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2202      	movs	r2, #2
 801313e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	2202      	movs	r2, #2
 8013146:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2202      	movs	r2, #2
 801314e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2202      	movs	r2, #2
 8013156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d003      	beq.n	8013168 <HAL_TIM_Encoder_Start+0xc4>
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	2b04      	cmp	r3, #4
 8013164:	d008      	beq.n	8013178 <HAL_TIM_Encoder_Start+0xd4>
 8013166:	e00f      	b.n	8013188 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	2201      	movs	r2, #1
 801316e:	2100      	movs	r1, #0
 8013170:	4618      	mov	r0, r3
 8013172:	f001 f86f 	bl	8014254 <TIM_CCxChannelCmd>
      break;
 8013176:	e016      	b.n	80131a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	2201      	movs	r2, #1
 801317e:	2104      	movs	r1, #4
 8013180:	4618      	mov	r0, r3
 8013182:	f001 f867 	bl	8014254 <TIM_CCxChannelCmd>
      break;
 8013186:	e00e      	b.n	80131a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	2201      	movs	r2, #1
 801318e:	2100      	movs	r1, #0
 8013190:	4618      	mov	r0, r3
 8013192:	f001 f85f 	bl	8014254 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	2201      	movs	r2, #1
 801319c:	2104      	movs	r1, #4
 801319e:	4618      	mov	r0, r3
 80131a0:	f001 f858 	bl	8014254 <TIM_CCxChannelCmd>
      break;
 80131a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	f042 0201 	orr.w	r2, r2, #1
 80131b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80131b6:	2300      	movs	r3, #0
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3710      	adds	r7, #16
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}

080131c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b082      	sub	sp, #8
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	691b      	ldr	r3, [r3, #16]
 80131ce:	f003 0302 	and.w	r3, r3, #2
 80131d2:	2b02      	cmp	r3, #2
 80131d4:	d122      	bne.n	801321c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	68db      	ldr	r3, [r3, #12]
 80131dc:	f003 0302 	and.w	r3, r3, #2
 80131e0:	2b02      	cmp	r3, #2
 80131e2:	d11b      	bne.n	801321c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	f06f 0202 	mvn.w	r2, #2
 80131ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	2201      	movs	r2, #1
 80131f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	699b      	ldr	r3, [r3, #24]
 80131fa:	f003 0303 	and.w	r3, r3, #3
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d003      	beq.n	801320a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f000 fb12 	bl	801382c <HAL_TIM_IC_CaptureCallback>
 8013208:	e005      	b.n	8013216 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f000 fb04 	bl	8013818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013210:	6878      	ldr	r0, [r7, #4]
 8013212:	f7f0 fa41 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2200      	movs	r2, #0
 801321a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	691b      	ldr	r3, [r3, #16]
 8013222:	f003 0304 	and.w	r3, r3, #4
 8013226:	2b04      	cmp	r3, #4
 8013228:	d122      	bne.n	8013270 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	68db      	ldr	r3, [r3, #12]
 8013230:	f003 0304 	and.w	r3, r3, #4
 8013234:	2b04      	cmp	r3, #4
 8013236:	d11b      	bne.n	8013270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	f06f 0204 	mvn.w	r2, #4
 8013240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2202      	movs	r2, #2
 8013246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	699b      	ldr	r3, [r3, #24]
 801324e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013252:	2b00      	cmp	r3, #0
 8013254:	d003      	beq.n	801325e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	f000 fae8 	bl	801382c <HAL_TIM_IC_CaptureCallback>
 801325c:	e005      	b.n	801326a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f000 fada 	bl	8013818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f7f0 fa17 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	2200      	movs	r2, #0
 801326e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	691b      	ldr	r3, [r3, #16]
 8013276:	f003 0308 	and.w	r3, r3, #8
 801327a:	2b08      	cmp	r3, #8
 801327c:	d122      	bne.n	80132c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	68db      	ldr	r3, [r3, #12]
 8013284:	f003 0308 	and.w	r3, r3, #8
 8013288:	2b08      	cmp	r3, #8
 801328a:	d11b      	bne.n	80132c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	f06f 0208 	mvn.w	r2, #8
 8013294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2204      	movs	r2, #4
 801329a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	69db      	ldr	r3, [r3, #28]
 80132a2:	f003 0303 	and.w	r3, r3, #3
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d003      	beq.n	80132b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f000 fabe 	bl	801382c <HAL_TIM_IC_CaptureCallback>
 80132b0:	e005      	b.n	80132be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f000 fab0 	bl	8013818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80132b8:	6878      	ldr	r0, [r7, #4]
 80132ba:	f7f0 f9ed 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	2200      	movs	r2, #0
 80132c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	691b      	ldr	r3, [r3, #16]
 80132ca:	f003 0310 	and.w	r3, r3, #16
 80132ce:	2b10      	cmp	r3, #16
 80132d0:	d122      	bne.n	8013318 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	68db      	ldr	r3, [r3, #12]
 80132d8:	f003 0310 	and.w	r3, r3, #16
 80132dc:	2b10      	cmp	r3, #16
 80132de:	d11b      	bne.n	8013318 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	f06f 0210 	mvn.w	r2, #16
 80132e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2208      	movs	r2, #8
 80132ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	69db      	ldr	r3, [r3, #28]
 80132f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d003      	beq.n	8013306 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f000 fa94 	bl	801382c <HAL_TIM_IC_CaptureCallback>
 8013304:	e005      	b.n	8013312 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f000 fa86 	bl	8013818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f7f0 f9c3 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	2200      	movs	r2, #0
 8013316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	691b      	ldr	r3, [r3, #16]
 801331e:	f003 0301 	and.w	r3, r3, #1
 8013322:	2b01      	cmp	r3, #1
 8013324:	d10e      	bne.n	8013344 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	68db      	ldr	r3, [r3, #12]
 801332c:	f003 0301 	and.w	r3, r3, #1
 8013330:	2b01      	cmp	r3, #1
 8013332:	d107      	bne.n	8013344 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	f06f 0201 	mvn.w	r2, #1
 801333c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f7f0 f9f6 	bl	8003730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	691b      	ldr	r3, [r3, #16]
 801334a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801334e:	2b80      	cmp	r3, #128	; 0x80
 8013350:	d10e      	bne.n	8013370 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	68db      	ldr	r3, [r3, #12]
 8013358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801335c:	2b80      	cmp	r3, #128	; 0x80
 801335e:	d107      	bne.n	8013370 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8013368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	f001 f8de 	bl	801452c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	691b      	ldr	r3, [r3, #16]
 8013376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801337a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801337e:	d10e      	bne.n	801339e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	68db      	ldr	r3, [r3, #12]
 8013386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801338a:	2b80      	cmp	r3, #128	; 0x80
 801338c:	d107      	bne.n	801339e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8013396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8013398:	6878      	ldr	r0, [r7, #4]
 801339a:	f001 f8d1 	bl	8014540 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	691b      	ldr	r3, [r3, #16]
 80133a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133a8:	2b40      	cmp	r3, #64	; 0x40
 80133aa:	d10e      	bne.n	80133ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	68db      	ldr	r3, [r3, #12]
 80133b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133b6:	2b40      	cmp	r3, #64	; 0x40
 80133b8:	d107      	bne.n	80133ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80133c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80133c4:	6878      	ldr	r0, [r7, #4]
 80133c6:	f000 fa45 	bl	8013854 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	691b      	ldr	r3, [r3, #16]
 80133d0:	f003 0320 	and.w	r3, r3, #32
 80133d4:	2b20      	cmp	r3, #32
 80133d6:	d10e      	bne.n	80133f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	68db      	ldr	r3, [r3, #12]
 80133de:	f003 0320 	and.w	r3, r3, #32
 80133e2:	2b20      	cmp	r3, #32
 80133e4:	d107      	bne.n	80133f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	f06f 0220 	mvn.w	r2, #32
 80133ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f001 f891 	bl	8014518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80133f6:	bf00      	nop
 80133f8:	3708      	adds	r7, #8
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}
	...

08013400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b086      	sub	sp, #24
 8013404:	af00      	add	r7, sp, #0
 8013406:	60f8      	str	r0, [r7, #12]
 8013408:	60b9      	str	r1, [r7, #8]
 801340a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801340c:	2300      	movs	r3, #0
 801340e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013416:	2b01      	cmp	r3, #1
 8013418:	d101      	bne.n	801341e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801341a:	2302      	movs	r3, #2
 801341c:	e0ff      	b.n	801361e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	2201      	movs	r2, #1
 8013422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2b14      	cmp	r3, #20
 801342a:	f200 80f0 	bhi.w	801360e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801342e:	a201      	add	r2, pc, #4	; (adr r2, 8013434 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013434:	08013489 	.word	0x08013489
 8013438:	0801360f 	.word	0x0801360f
 801343c:	0801360f 	.word	0x0801360f
 8013440:	0801360f 	.word	0x0801360f
 8013444:	080134c9 	.word	0x080134c9
 8013448:	0801360f 	.word	0x0801360f
 801344c:	0801360f 	.word	0x0801360f
 8013450:	0801360f 	.word	0x0801360f
 8013454:	0801350b 	.word	0x0801350b
 8013458:	0801360f 	.word	0x0801360f
 801345c:	0801360f 	.word	0x0801360f
 8013460:	0801360f 	.word	0x0801360f
 8013464:	0801354b 	.word	0x0801354b
 8013468:	0801360f 	.word	0x0801360f
 801346c:	0801360f 	.word	0x0801360f
 8013470:	0801360f 	.word	0x0801360f
 8013474:	0801358d 	.word	0x0801358d
 8013478:	0801360f 	.word	0x0801360f
 801347c:	0801360f 	.word	0x0801360f
 8013480:	0801360f 	.word	0x0801360f
 8013484:	080135cd 	.word	0x080135cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	68b9      	ldr	r1, [r7, #8]
 801348e:	4618      	mov	r0, r3
 8013490:	f000 fb6c 	bl	8013b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	699a      	ldr	r2, [r3, #24]
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	f042 0208 	orr.w	r2, r2, #8
 80134a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	699a      	ldr	r2, [r3, #24]
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	f022 0204 	bic.w	r2, r2, #4
 80134b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	6999      	ldr	r1, [r3, #24]
 80134ba:	68bb      	ldr	r3, [r7, #8]
 80134bc:	691a      	ldr	r2, [r3, #16]
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	430a      	orrs	r2, r1
 80134c4:	619a      	str	r2, [r3, #24]
      break;
 80134c6:	e0a5      	b.n	8013614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	68b9      	ldr	r1, [r7, #8]
 80134ce:	4618      	mov	r0, r3
 80134d0:	f000 fbdc 	bl	8013c8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	699a      	ldr	r2, [r3, #24]
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80134e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	699a      	ldr	r2, [r3, #24]
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80134f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	6999      	ldr	r1, [r3, #24]
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	691b      	ldr	r3, [r3, #16]
 80134fe:	021a      	lsls	r2, r3, #8
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	430a      	orrs	r2, r1
 8013506:	619a      	str	r2, [r3, #24]
      break;
 8013508:	e084      	b.n	8013614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	68b9      	ldr	r1, [r7, #8]
 8013510:	4618      	mov	r0, r3
 8013512:	f000 fc45 	bl	8013da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	69da      	ldr	r2, [r3, #28]
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	f042 0208 	orr.w	r2, r2, #8
 8013524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	69da      	ldr	r2, [r3, #28]
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f022 0204 	bic.w	r2, r2, #4
 8013534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	69d9      	ldr	r1, [r3, #28]
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	691a      	ldr	r2, [r3, #16]
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	430a      	orrs	r2, r1
 8013546:	61da      	str	r2, [r3, #28]
      break;
 8013548:	e064      	b.n	8013614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	68b9      	ldr	r1, [r7, #8]
 8013550:	4618      	mov	r0, r3
 8013552:	f000 fcad 	bl	8013eb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	69da      	ldr	r2, [r3, #28]
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	69da      	ldr	r2, [r3, #28]
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	69d9      	ldr	r1, [r3, #28]
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	691b      	ldr	r3, [r3, #16]
 8013580:	021a      	lsls	r2, r3, #8
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	430a      	orrs	r2, r1
 8013588:	61da      	str	r2, [r3, #28]
      break;
 801358a:	e043      	b.n	8013614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	68b9      	ldr	r1, [r7, #8]
 8013592:	4618      	mov	r0, r3
 8013594:	f000 fcf6 	bl	8013f84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	f042 0208 	orr.w	r2, r2, #8
 80135a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	f022 0204 	bic.w	r2, r2, #4
 80135b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	691a      	ldr	r2, [r3, #16]
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	430a      	orrs	r2, r1
 80135c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80135ca:	e023      	b.n	8013614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	68b9      	ldr	r1, [r7, #8]
 80135d2:	4618      	mov	r0, r3
 80135d4:	f000 fd3a 	bl	801404c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80135e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80135f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80135fe:	68bb      	ldr	r3, [r7, #8]
 8013600:	691b      	ldr	r3, [r3, #16]
 8013602:	021a      	lsls	r2, r3, #8
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	430a      	orrs	r2, r1
 801360a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801360c:	e002      	b.n	8013614 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801360e:	2301      	movs	r3, #1
 8013610:	75fb      	strb	r3, [r7, #23]
      break;
 8013612:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	2200      	movs	r2, #0
 8013618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801361c:	7dfb      	ldrb	r3, [r7, #23]
}
 801361e:	4618      	mov	r0, r3
 8013620:	3718      	adds	r7, #24
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
 8013626:	bf00      	nop

08013628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b084      	sub	sp, #16
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013632:	2300      	movs	r3, #0
 8013634:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801363c:	2b01      	cmp	r3, #1
 801363e:	d101      	bne.n	8013644 <HAL_TIM_ConfigClockSource+0x1c>
 8013640:	2302      	movs	r3, #2
 8013642:	e0dc      	b.n	80137fe <HAL_TIM_ConfigClockSource+0x1d6>
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2201      	movs	r2, #1
 8013648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2202      	movs	r2, #2
 8013650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	689b      	ldr	r3, [r3, #8]
 801365a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801365c:	68ba      	ldr	r2, [r7, #8]
 801365e:	4b6a      	ldr	r3, [pc, #424]	; (8013808 <HAL_TIM_ConfigClockSource+0x1e0>)
 8013660:	4013      	ands	r3, r2
 8013662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801366a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	68ba      	ldr	r2, [r7, #8]
 8013672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013674:	683b      	ldr	r3, [r7, #0]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	4a64      	ldr	r2, [pc, #400]	; (801380c <HAL_TIM_ConfigClockSource+0x1e4>)
 801367a:	4293      	cmp	r3, r2
 801367c:	f000 80a9 	beq.w	80137d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013680:	4a62      	ldr	r2, [pc, #392]	; (801380c <HAL_TIM_ConfigClockSource+0x1e4>)
 8013682:	4293      	cmp	r3, r2
 8013684:	f200 80ae 	bhi.w	80137e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013688:	4a61      	ldr	r2, [pc, #388]	; (8013810 <HAL_TIM_ConfigClockSource+0x1e8>)
 801368a:	4293      	cmp	r3, r2
 801368c:	f000 80a1 	beq.w	80137d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013690:	4a5f      	ldr	r2, [pc, #380]	; (8013810 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013692:	4293      	cmp	r3, r2
 8013694:	f200 80a6 	bhi.w	80137e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013698:	4a5e      	ldr	r2, [pc, #376]	; (8013814 <HAL_TIM_ConfigClockSource+0x1ec>)
 801369a:	4293      	cmp	r3, r2
 801369c:	f000 8099 	beq.w	80137d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80136a0:	4a5c      	ldr	r2, [pc, #368]	; (8013814 <HAL_TIM_ConfigClockSource+0x1ec>)
 80136a2:	4293      	cmp	r3, r2
 80136a4:	f200 809e 	bhi.w	80137e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80136a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80136ac:	f000 8091 	beq.w	80137d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80136b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80136b4:	f200 8096 	bhi.w	80137e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80136b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80136bc:	f000 8089 	beq.w	80137d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80136c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80136c4:	f200 808e 	bhi.w	80137e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80136c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80136cc:	d03e      	beq.n	801374c <HAL_TIM_ConfigClockSource+0x124>
 80136ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80136d2:	f200 8087 	bhi.w	80137e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80136d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80136da:	f000 8086 	beq.w	80137ea <HAL_TIM_ConfigClockSource+0x1c2>
 80136de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80136e2:	d87f      	bhi.n	80137e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80136e4:	2b70      	cmp	r3, #112	; 0x70
 80136e6:	d01a      	beq.n	801371e <HAL_TIM_ConfigClockSource+0xf6>
 80136e8:	2b70      	cmp	r3, #112	; 0x70
 80136ea:	d87b      	bhi.n	80137e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80136ec:	2b60      	cmp	r3, #96	; 0x60
 80136ee:	d050      	beq.n	8013792 <HAL_TIM_ConfigClockSource+0x16a>
 80136f0:	2b60      	cmp	r3, #96	; 0x60
 80136f2:	d877      	bhi.n	80137e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80136f4:	2b50      	cmp	r3, #80	; 0x50
 80136f6:	d03c      	beq.n	8013772 <HAL_TIM_ConfigClockSource+0x14a>
 80136f8:	2b50      	cmp	r3, #80	; 0x50
 80136fa:	d873      	bhi.n	80137e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80136fc:	2b40      	cmp	r3, #64	; 0x40
 80136fe:	d058      	beq.n	80137b2 <HAL_TIM_ConfigClockSource+0x18a>
 8013700:	2b40      	cmp	r3, #64	; 0x40
 8013702:	d86f      	bhi.n	80137e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013704:	2b30      	cmp	r3, #48	; 0x30
 8013706:	d064      	beq.n	80137d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013708:	2b30      	cmp	r3, #48	; 0x30
 801370a:	d86b      	bhi.n	80137e4 <HAL_TIM_ConfigClockSource+0x1bc>
 801370c:	2b20      	cmp	r3, #32
 801370e:	d060      	beq.n	80137d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013710:	2b20      	cmp	r3, #32
 8013712:	d867      	bhi.n	80137e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013714:	2b00      	cmp	r3, #0
 8013716:	d05c      	beq.n	80137d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013718:	2b10      	cmp	r3, #16
 801371a:	d05a      	beq.n	80137d2 <HAL_TIM_ConfigClockSource+0x1aa>
 801371c:	e062      	b.n	80137e4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	6818      	ldr	r0, [r3, #0]
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	6899      	ldr	r1, [r3, #8]
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	685a      	ldr	r2, [r3, #4]
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	68db      	ldr	r3, [r3, #12]
 801372e:	f000 fd71 	bl	8014214 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	689b      	ldr	r3, [r3, #8]
 8013738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801373a:	68bb      	ldr	r3, [r7, #8]
 801373c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	68ba      	ldr	r2, [r7, #8]
 8013748:	609a      	str	r2, [r3, #8]
      break;
 801374a:	e04f      	b.n	80137ec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	6818      	ldr	r0, [r3, #0]
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	6899      	ldr	r1, [r3, #8]
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	685a      	ldr	r2, [r3, #4]
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	68db      	ldr	r3, [r3, #12]
 801375c:	f000 fd5a 	bl	8014214 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	689a      	ldr	r2, [r3, #8]
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801376e:	609a      	str	r2, [r3, #8]
      break;
 8013770:	e03c      	b.n	80137ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	6818      	ldr	r0, [r3, #0]
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	6859      	ldr	r1, [r3, #4]
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	68db      	ldr	r3, [r3, #12]
 801377e:	461a      	mov	r2, r3
 8013780:	f000 fcca 	bl	8014118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	2150      	movs	r1, #80	; 0x50
 801378a:	4618      	mov	r0, r3
 801378c:	f000 fd24 	bl	80141d8 <TIM_ITRx_SetConfig>
      break;
 8013790:	e02c      	b.n	80137ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6818      	ldr	r0, [r3, #0]
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	6859      	ldr	r1, [r3, #4]
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	68db      	ldr	r3, [r3, #12]
 801379e:	461a      	mov	r2, r3
 80137a0:	f000 fce9 	bl	8014176 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	2160      	movs	r1, #96	; 0x60
 80137aa:	4618      	mov	r0, r3
 80137ac:	f000 fd14 	bl	80141d8 <TIM_ITRx_SetConfig>
      break;
 80137b0:	e01c      	b.n	80137ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	6818      	ldr	r0, [r3, #0]
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	6859      	ldr	r1, [r3, #4]
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	68db      	ldr	r3, [r3, #12]
 80137be:	461a      	mov	r2, r3
 80137c0:	f000 fcaa 	bl	8014118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2140      	movs	r1, #64	; 0x40
 80137ca:	4618      	mov	r0, r3
 80137cc:	f000 fd04 	bl	80141d8 <TIM_ITRx_SetConfig>
      break;
 80137d0:	e00c      	b.n	80137ec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	681a      	ldr	r2, [r3, #0]
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	4619      	mov	r1, r3
 80137dc:	4610      	mov	r0, r2
 80137de:	f000 fcfb 	bl	80141d8 <TIM_ITRx_SetConfig>
      break;
 80137e2:	e003      	b.n	80137ec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80137e4:	2301      	movs	r3, #1
 80137e6:	73fb      	strb	r3, [r7, #15]
      break;
 80137e8:	e000      	b.n	80137ec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80137ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	2201      	movs	r2, #1
 80137f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	2200      	movs	r2, #0
 80137f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80137fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80137fe:	4618      	mov	r0, r3
 8013800:	3710      	adds	r7, #16
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}
 8013806:	bf00      	nop
 8013808:	ffceff88 	.word	0xffceff88
 801380c:	00100040 	.word	0x00100040
 8013810:	00100030 	.word	0x00100030
 8013814:	00100020 	.word	0x00100020

08013818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013818:	b480      	push	{r7}
 801381a:	b083      	sub	sp, #12
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013820:	bf00      	nop
 8013822:	370c      	adds	r7, #12
 8013824:	46bd      	mov	sp, r7
 8013826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382a:	4770      	bx	lr

0801382c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801382c:	b480      	push	{r7}
 801382e:	b083      	sub	sp, #12
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013834:	bf00      	nop
 8013836:	370c      	adds	r7, #12
 8013838:	46bd      	mov	sp, r7
 801383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383e:	4770      	bx	lr

08013840 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8013840:	b480      	push	{r7}
 8013842:	b083      	sub	sp, #12
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8013848:	bf00      	nop
 801384a:	370c      	adds	r7, #12
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr

08013854 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013854:	b480      	push	{r7}
 8013856:	b083      	sub	sp, #12
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801385c:	bf00      	nop
 801385e:	370c      	adds	r7, #12
 8013860:	46bd      	mov	sp, r7
 8013862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013866:	4770      	bx	lr

08013868 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8013868:	b480      	push	{r7}
 801386a:	b083      	sub	sp, #12
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8013870:	bf00      	nop
 8013872:	370c      	adds	r7, #12
 8013874:	46bd      	mov	sp, r7
 8013876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387a:	4770      	bx	lr

0801387c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b084      	sub	sp, #16
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013888:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801388e:	687a      	ldr	r2, [r7, #4]
 8013890:	429a      	cmp	r2, r3
 8013892:	d107      	bne.n	80138a4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	2201      	movs	r2, #1
 8013898:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	2201      	movs	r2, #1
 801389e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80138a2:	e02a      	b.n	80138fa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138a8:	687a      	ldr	r2, [r7, #4]
 80138aa:	429a      	cmp	r2, r3
 80138ac:	d107      	bne.n	80138be <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	2202      	movs	r2, #2
 80138b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	2201      	movs	r2, #1
 80138b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80138bc:	e01d      	b.n	80138fa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138c2:	687a      	ldr	r2, [r7, #4]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d107      	bne.n	80138d8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	2204      	movs	r2, #4
 80138cc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	2201      	movs	r2, #1
 80138d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80138d6:	e010      	b.n	80138fa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138dc:	687a      	ldr	r2, [r7, #4]
 80138de:	429a      	cmp	r2, r3
 80138e0:	d107      	bne.n	80138f2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2208      	movs	r2, #8
 80138e6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	2201      	movs	r2, #1
 80138ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80138f0:	e003      	b.n	80138fa <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	2201      	movs	r2, #1
 80138f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80138fa:	68f8      	ldr	r0, [r7, #12]
 80138fc:	f7ff ffb4 	bl	8013868 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	2200      	movs	r2, #0
 8013904:	771a      	strb	r2, [r3, #28]
}
 8013906:	bf00      	nop
 8013908:	3710      	adds	r7, #16
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}

0801390e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801390e:	b580      	push	{r7, lr}
 8013910:	b084      	sub	sp, #16
 8013912:	af00      	add	r7, sp, #0
 8013914:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801391a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013920:	687a      	ldr	r2, [r7, #4]
 8013922:	429a      	cmp	r2, r3
 8013924:	d10b      	bne.n	801393e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	2201      	movs	r2, #1
 801392a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	69db      	ldr	r3, [r3, #28]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d136      	bne.n	80139a2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	2201      	movs	r2, #1
 8013938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801393c:	e031      	b.n	80139a2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013942:	687a      	ldr	r2, [r7, #4]
 8013944:	429a      	cmp	r2, r3
 8013946:	d10b      	bne.n	8013960 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	2202      	movs	r2, #2
 801394c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	69db      	ldr	r3, [r3, #28]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d125      	bne.n	80139a2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	2201      	movs	r2, #1
 801395a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801395e:	e020      	b.n	80139a2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013964:	687a      	ldr	r2, [r7, #4]
 8013966:	429a      	cmp	r2, r3
 8013968:	d10b      	bne.n	8013982 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	2204      	movs	r2, #4
 801396e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	69db      	ldr	r3, [r3, #28]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d114      	bne.n	80139a2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	2201      	movs	r2, #1
 801397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013980:	e00f      	b.n	80139a2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013986:	687a      	ldr	r2, [r7, #4]
 8013988:	429a      	cmp	r2, r3
 801398a:	d10a      	bne.n	80139a2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	2208      	movs	r2, #8
 8013990:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	69db      	ldr	r3, [r3, #28]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d103      	bne.n	80139a2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	2201      	movs	r2, #1
 801399e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80139a2:	68f8      	ldr	r0, [r7, #12]
 80139a4:	f7ef fe78 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	2200      	movs	r2, #0
 80139ac:	771a      	strb	r2, [r3, #28]
}
 80139ae:	bf00      	nop
 80139b0:	3710      	adds	r7, #16
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}

080139b6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80139b6:	b580      	push	{r7, lr}
 80139b8:	b084      	sub	sp, #16
 80139ba:	af00      	add	r7, sp, #0
 80139bc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139c2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139c8:	687a      	ldr	r2, [r7, #4]
 80139ca:	429a      	cmp	r2, r3
 80139cc:	d103      	bne.n	80139d6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	2201      	movs	r2, #1
 80139d2:	771a      	strb	r2, [r3, #28]
 80139d4:	e019      	b.n	8013a0a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139da:	687a      	ldr	r2, [r7, #4]
 80139dc:	429a      	cmp	r2, r3
 80139de:	d103      	bne.n	80139e8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	2202      	movs	r2, #2
 80139e4:	771a      	strb	r2, [r3, #28]
 80139e6:	e010      	b.n	8013a0a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139ec:	687a      	ldr	r2, [r7, #4]
 80139ee:	429a      	cmp	r2, r3
 80139f0:	d103      	bne.n	80139fa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	2204      	movs	r2, #4
 80139f6:	771a      	strb	r2, [r3, #28]
 80139f8:	e007      	b.n	8013a0a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139fe:	687a      	ldr	r2, [r7, #4]
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d102      	bne.n	8013a0a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2208      	movs	r2, #8
 8013a08:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8013a0a:	68f8      	ldr	r0, [r7, #12]
 8013a0c:	f7ff ff18 	bl	8013840 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	2200      	movs	r2, #0
 8013a14:	771a      	strb	r2, [r3, #28]
}
 8013a16:	bf00      	nop
 8013a18:	3710      	adds	r7, #16
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
	...

08013a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013a20:	b480      	push	{r7}
 8013a22:	b085      	sub	sp, #20
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
 8013a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	4a44      	ldr	r2, [pc, #272]	; (8013b44 <TIM_Base_SetConfig+0x124>)
 8013a34:	4293      	cmp	r3, r2
 8013a36:	d013      	beq.n	8013a60 <TIM_Base_SetConfig+0x40>
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013a3e:	d00f      	beq.n	8013a60 <TIM_Base_SetConfig+0x40>
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	4a41      	ldr	r2, [pc, #260]	; (8013b48 <TIM_Base_SetConfig+0x128>)
 8013a44:	4293      	cmp	r3, r2
 8013a46:	d00b      	beq.n	8013a60 <TIM_Base_SetConfig+0x40>
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	4a40      	ldr	r2, [pc, #256]	; (8013b4c <TIM_Base_SetConfig+0x12c>)
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	d007      	beq.n	8013a60 <TIM_Base_SetConfig+0x40>
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	4a3f      	ldr	r2, [pc, #252]	; (8013b50 <TIM_Base_SetConfig+0x130>)
 8013a54:	4293      	cmp	r3, r2
 8013a56:	d003      	beq.n	8013a60 <TIM_Base_SetConfig+0x40>
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	4a3e      	ldr	r2, [pc, #248]	; (8013b54 <TIM_Base_SetConfig+0x134>)
 8013a5c:	4293      	cmp	r3, r2
 8013a5e:	d108      	bne.n	8013a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	685b      	ldr	r3, [r3, #4]
 8013a6c:	68fa      	ldr	r2, [r7, #12]
 8013a6e:	4313      	orrs	r3, r2
 8013a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	4a33      	ldr	r2, [pc, #204]	; (8013b44 <TIM_Base_SetConfig+0x124>)
 8013a76:	4293      	cmp	r3, r2
 8013a78:	d027      	beq.n	8013aca <TIM_Base_SetConfig+0xaa>
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013a80:	d023      	beq.n	8013aca <TIM_Base_SetConfig+0xaa>
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	4a30      	ldr	r2, [pc, #192]	; (8013b48 <TIM_Base_SetConfig+0x128>)
 8013a86:	4293      	cmp	r3, r2
 8013a88:	d01f      	beq.n	8013aca <TIM_Base_SetConfig+0xaa>
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	4a2f      	ldr	r2, [pc, #188]	; (8013b4c <TIM_Base_SetConfig+0x12c>)
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	d01b      	beq.n	8013aca <TIM_Base_SetConfig+0xaa>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	4a2e      	ldr	r2, [pc, #184]	; (8013b50 <TIM_Base_SetConfig+0x130>)
 8013a96:	4293      	cmp	r3, r2
 8013a98:	d017      	beq.n	8013aca <TIM_Base_SetConfig+0xaa>
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	4a2d      	ldr	r2, [pc, #180]	; (8013b54 <TIM_Base_SetConfig+0x134>)
 8013a9e:	4293      	cmp	r3, r2
 8013aa0:	d013      	beq.n	8013aca <TIM_Base_SetConfig+0xaa>
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	4a2c      	ldr	r2, [pc, #176]	; (8013b58 <TIM_Base_SetConfig+0x138>)
 8013aa6:	4293      	cmp	r3, r2
 8013aa8:	d00f      	beq.n	8013aca <TIM_Base_SetConfig+0xaa>
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	4a2b      	ldr	r2, [pc, #172]	; (8013b5c <TIM_Base_SetConfig+0x13c>)
 8013aae:	4293      	cmp	r3, r2
 8013ab0:	d00b      	beq.n	8013aca <TIM_Base_SetConfig+0xaa>
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	4a2a      	ldr	r2, [pc, #168]	; (8013b60 <TIM_Base_SetConfig+0x140>)
 8013ab6:	4293      	cmp	r3, r2
 8013ab8:	d007      	beq.n	8013aca <TIM_Base_SetConfig+0xaa>
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	4a29      	ldr	r2, [pc, #164]	; (8013b64 <TIM_Base_SetConfig+0x144>)
 8013abe:	4293      	cmp	r3, r2
 8013ac0:	d003      	beq.n	8013aca <TIM_Base_SetConfig+0xaa>
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	4a28      	ldr	r2, [pc, #160]	; (8013b68 <TIM_Base_SetConfig+0x148>)
 8013ac6:	4293      	cmp	r3, r2
 8013ac8:	d108      	bne.n	8013adc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	68db      	ldr	r3, [r3, #12]
 8013ad6:	68fa      	ldr	r2, [r7, #12]
 8013ad8:	4313      	orrs	r3, r2
 8013ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	695b      	ldr	r3, [r3, #20]
 8013ae6:	4313      	orrs	r3, r2
 8013ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	68fa      	ldr	r2, [r7, #12]
 8013aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	689a      	ldr	r2, [r3, #8]
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	681a      	ldr	r2, [r3, #0]
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	4a10      	ldr	r2, [pc, #64]	; (8013b44 <TIM_Base_SetConfig+0x124>)
 8013b04:	4293      	cmp	r3, r2
 8013b06:	d00f      	beq.n	8013b28 <TIM_Base_SetConfig+0x108>
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	4a12      	ldr	r2, [pc, #72]	; (8013b54 <TIM_Base_SetConfig+0x134>)
 8013b0c:	4293      	cmp	r3, r2
 8013b0e:	d00b      	beq.n	8013b28 <TIM_Base_SetConfig+0x108>
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	4a11      	ldr	r2, [pc, #68]	; (8013b58 <TIM_Base_SetConfig+0x138>)
 8013b14:	4293      	cmp	r3, r2
 8013b16:	d007      	beq.n	8013b28 <TIM_Base_SetConfig+0x108>
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	4a10      	ldr	r2, [pc, #64]	; (8013b5c <TIM_Base_SetConfig+0x13c>)
 8013b1c:	4293      	cmp	r3, r2
 8013b1e:	d003      	beq.n	8013b28 <TIM_Base_SetConfig+0x108>
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	4a0f      	ldr	r2, [pc, #60]	; (8013b60 <TIM_Base_SetConfig+0x140>)
 8013b24:	4293      	cmp	r3, r2
 8013b26:	d103      	bne.n	8013b30 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013b28:	683b      	ldr	r3, [r7, #0]
 8013b2a:	691a      	ldr	r2, [r3, #16]
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2201      	movs	r2, #1
 8013b34:	615a      	str	r2, [r3, #20]
}
 8013b36:	bf00      	nop
 8013b38:	3714      	adds	r7, #20
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b40:	4770      	bx	lr
 8013b42:	bf00      	nop
 8013b44:	40010000 	.word	0x40010000
 8013b48:	40000400 	.word	0x40000400
 8013b4c:	40000800 	.word	0x40000800
 8013b50:	40000c00 	.word	0x40000c00
 8013b54:	40010400 	.word	0x40010400
 8013b58:	40014000 	.word	0x40014000
 8013b5c:	40014400 	.word	0x40014400
 8013b60:	40014800 	.word	0x40014800
 8013b64:	4000e000 	.word	0x4000e000
 8013b68:	4000e400 	.word	0x4000e400

08013b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b087      	sub	sp, #28
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6a1b      	ldr	r3, [r3, #32]
 8013b7a:	f023 0201 	bic.w	r2, r3, #1
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	6a1b      	ldr	r3, [r3, #32]
 8013b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	685b      	ldr	r3, [r3, #4]
 8013b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	699b      	ldr	r3, [r3, #24]
 8013b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013b94:	68fa      	ldr	r2, [r7, #12]
 8013b96:	4b37      	ldr	r3, [pc, #220]	; (8013c74 <TIM_OC1_SetConfig+0x108>)
 8013b98:	4013      	ands	r3, r2
 8013b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	f023 0303 	bic.w	r3, r3, #3
 8013ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	4313      	orrs	r3, r2
 8013bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	f023 0302 	bic.w	r3, r3, #2
 8013bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	689b      	ldr	r3, [r3, #8]
 8013bba:	697a      	ldr	r2, [r7, #20]
 8013bbc:	4313      	orrs	r3, r2
 8013bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	4a2d      	ldr	r2, [pc, #180]	; (8013c78 <TIM_OC1_SetConfig+0x10c>)
 8013bc4:	4293      	cmp	r3, r2
 8013bc6:	d00f      	beq.n	8013be8 <TIM_OC1_SetConfig+0x7c>
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	4a2c      	ldr	r2, [pc, #176]	; (8013c7c <TIM_OC1_SetConfig+0x110>)
 8013bcc:	4293      	cmp	r3, r2
 8013bce:	d00b      	beq.n	8013be8 <TIM_OC1_SetConfig+0x7c>
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	4a2b      	ldr	r2, [pc, #172]	; (8013c80 <TIM_OC1_SetConfig+0x114>)
 8013bd4:	4293      	cmp	r3, r2
 8013bd6:	d007      	beq.n	8013be8 <TIM_OC1_SetConfig+0x7c>
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	4a2a      	ldr	r2, [pc, #168]	; (8013c84 <TIM_OC1_SetConfig+0x118>)
 8013bdc:	4293      	cmp	r3, r2
 8013bde:	d003      	beq.n	8013be8 <TIM_OC1_SetConfig+0x7c>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	4a29      	ldr	r2, [pc, #164]	; (8013c88 <TIM_OC1_SetConfig+0x11c>)
 8013be4:	4293      	cmp	r3, r2
 8013be6:	d10c      	bne.n	8013c02 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	f023 0308 	bic.w	r3, r3, #8
 8013bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	68db      	ldr	r3, [r3, #12]
 8013bf4:	697a      	ldr	r2, [r7, #20]
 8013bf6:	4313      	orrs	r3, r2
 8013bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013bfa:	697b      	ldr	r3, [r7, #20]
 8013bfc:	f023 0304 	bic.w	r3, r3, #4
 8013c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	4a1c      	ldr	r2, [pc, #112]	; (8013c78 <TIM_OC1_SetConfig+0x10c>)
 8013c06:	4293      	cmp	r3, r2
 8013c08:	d00f      	beq.n	8013c2a <TIM_OC1_SetConfig+0xbe>
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	4a1b      	ldr	r2, [pc, #108]	; (8013c7c <TIM_OC1_SetConfig+0x110>)
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	d00b      	beq.n	8013c2a <TIM_OC1_SetConfig+0xbe>
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	4a1a      	ldr	r2, [pc, #104]	; (8013c80 <TIM_OC1_SetConfig+0x114>)
 8013c16:	4293      	cmp	r3, r2
 8013c18:	d007      	beq.n	8013c2a <TIM_OC1_SetConfig+0xbe>
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	4a19      	ldr	r2, [pc, #100]	; (8013c84 <TIM_OC1_SetConfig+0x118>)
 8013c1e:	4293      	cmp	r3, r2
 8013c20:	d003      	beq.n	8013c2a <TIM_OC1_SetConfig+0xbe>
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	4a18      	ldr	r2, [pc, #96]	; (8013c88 <TIM_OC1_SetConfig+0x11c>)
 8013c26:	4293      	cmp	r3, r2
 8013c28:	d111      	bne.n	8013c4e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013c2a:	693b      	ldr	r3, [r7, #16]
 8013c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013c32:	693b      	ldr	r3, [r7, #16]
 8013c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	695b      	ldr	r3, [r3, #20]
 8013c3e:	693a      	ldr	r2, [r7, #16]
 8013c40:	4313      	orrs	r3, r2
 8013c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	699b      	ldr	r3, [r3, #24]
 8013c48:	693a      	ldr	r2, [r7, #16]
 8013c4a:	4313      	orrs	r3, r2
 8013c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	693a      	ldr	r2, [r7, #16]
 8013c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	68fa      	ldr	r2, [r7, #12]
 8013c58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	685a      	ldr	r2, [r3, #4]
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	697a      	ldr	r2, [r7, #20]
 8013c66:	621a      	str	r2, [r3, #32]
}
 8013c68:	bf00      	nop
 8013c6a:	371c      	adds	r7, #28
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr
 8013c74:	fffeff8f 	.word	0xfffeff8f
 8013c78:	40010000 	.word	0x40010000
 8013c7c:	40010400 	.word	0x40010400
 8013c80:	40014000 	.word	0x40014000
 8013c84:	40014400 	.word	0x40014400
 8013c88:	40014800 	.word	0x40014800

08013c8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	b087      	sub	sp, #28
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
 8013c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	6a1b      	ldr	r3, [r3, #32]
 8013c9a:	f023 0210 	bic.w	r2, r3, #16
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6a1b      	ldr	r3, [r3, #32]
 8013ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	685b      	ldr	r3, [r3, #4]
 8013cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	699b      	ldr	r3, [r3, #24]
 8013cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013cb4:	68fa      	ldr	r2, [r7, #12]
 8013cb6:	4b34      	ldr	r3, [pc, #208]	; (8013d88 <TIM_OC2_SetConfig+0xfc>)
 8013cb8:	4013      	ands	r3, r2
 8013cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	021b      	lsls	r3, r3, #8
 8013cca:	68fa      	ldr	r2, [r7, #12]
 8013ccc:	4313      	orrs	r3, r2
 8013cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	f023 0320 	bic.w	r3, r3, #32
 8013cd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013cd8:	683b      	ldr	r3, [r7, #0]
 8013cda:	689b      	ldr	r3, [r3, #8]
 8013cdc:	011b      	lsls	r3, r3, #4
 8013cde:	697a      	ldr	r2, [r7, #20]
 8013ce0:	4313      	orrs	r3, r2
 8013ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	4a29      	ldr	r2, [pc, #164]	; (8013d8c <TIM_OC2_SetConfig+0x100>)
 8013ce8:	4293      	cmp	r3, r2
 8013cea:	d003      	beq.n	8013cf4 <TIM_OC2_SetConfig+0x68>
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	4a28      	ldr	r2, [pc, #160]	; (8013d90 <TIM_OC2_SetConfig+0x104>)
 8013cf0:	4293      	cmp	r3, r2
 8013cf2:	d10d      	bne.n	8013d10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013cf4:	697b      	ldr	r3, [r7, #20]
 8013cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013cfc:	683b      	ldr	r3, [r7, #0]
 8013cfe:	68db      	ldr	r3, [r3, #12]
 8013d00:	011b      	lsls	r3, r3, #4
 8013d02:	697a      	ldr	r2, [r7, #20]
 8013d04:	4313      	orrs	r3, r2
 8013d06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013d08:	697b      	ldr	r3, [r7, #20]
 8013d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013d0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	4a1e      	ldr	r2, [pc, #120]	; (8013d8c <TIM_OC2_SetConfig+0x100>)
 8013d14:	4293      	cmp	r3, r2
 8013d16:	d00f      	beq.n	8013d38 <TIM_OC2_SetConfig+0xac>
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	4a1d      	ldr	r2, [pc, #116]	; (8013d90 <TIM_OC2_SetConfig+0x104>)
 8013d1c:	4293      	cmp	r3, r2
 8013d1e:	d00b      	beq.n	8013d38 <TIM_OC2_SetConfig+0xac>
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	4a1c      	ldr	r2, [pc, #112]	; (8013d94 <TIM_OC2_SetConfig+0x108>)
 8013d24:	4293      	cmp	r3, r2
 8013d26:	d007      	beq.n	8013d38 <TIM_OC2_SetConfig+0xac>
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	4a1b      	ldr	r2, [pc, #108]	; (8013d98 <TIM_OC2_SetConfig+0x10c>)
 8013d2c:	4293      	cmp	r3, r2
 8013d2e:	d003      	beq.n	8013d38 <TIM_OC2_SetConfig+0xac>
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	4a1a      	ldr	r2, [pc, #104]	; (8013d9c <TIM_OC2_SetConfig+0x110>)
 8013d34:	4293      	cmp	r3, r2
 8013d36:	d113      	bne.n	8013d60 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013d38:	693b      	ldr	r3, [r7, #16]
 8013d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013d40:	693b      	ldr	r3, [r7, #16]
 8013d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	695b      	ldr	r3, [r3, #20]
 8013d4c:	009b      	lsls	r3, r3, #2
 8013d4e:	693a      	ldr	r2, [r7, #16]
 8013d50:	4313      	orrs	r3, r2
 8013d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	699b      	ldr	r3, [r3, #24]
 8013d58:	009b      	lsls	r3, r3, #2
 8013d5a:	693a      	ldr	r2, [r7, #16]
 8013d5c:	4313      	orrs	r3, r2
 8013d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	693a      	ldr	r2, [r7, #16]
 8013d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	68fa      	ldr	r2, [r7, #12]
 8013d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013d6c:	683b      	ldr	r3, [r7, #0]
 8013d6e:	685a      	ldr	r2, [r3, #4]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	697a      	ldr	r2, [r7, #20]
 8013d78:	621a      	str	r2, [r3, #32]
}
 8013d7a:	bf00      	nop
 8013d7c:	371c      	adds	r7, #28
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d84:	4770      	bx	lr
 8013d86:	bf00      	nop
 8013d88:	feff8fff 	.word	0xfeff8fff
 8013d8c:	40010000 	.word	0x40010000
 8013d90:	40010400 	.word	0x40010400
 8013d94:	40014000 	.word	0x40014000
 8013d98:	40014400 	.word	0x40014400
 8013d9c:	40014800 	.word	0x40014800

08013da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013da0:	b480      	push	{r7}
 8013da2:	b087      	sub	sp, #28
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	6a1b      	ldr	r3, [r3, #32]
 8013dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6a1b      	ldr	r3, [r3, #32]
 8013dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	685b      	ldr	r3, [r3, #4]
 8013dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	69db      	ldr	r3, [r3, #28]
 8013dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013dc8:	68fa      	ldr	r2, [r7, #12]
 8013dca:	4b33      	ldr	r3, [pc, #204]	; (8013e98 <TIM_OC3_SetConfig+0xf8>)
 8013dcc:	4013      	ands	r3, r2
 8013dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	f023 0303 	bic.w	r3, r3, #3
 8013dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013dd8:	683b      	ldr	r3, [r7, #0]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	68fa      	ldr	r2, [r7, #12]
 8013dde:	4313      	orrs	r3, r2
 8013de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013de2:	697b      	ldr	r3, [r7, #20]
 8013de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	689b      	ldr	r3, [r3, #8]
 8013dee:	021b      	lsls	r3, r3, #8
 8013df0:	697a      	ldr	r2, [r7, #20]
 8013df2:	4313      	orrs	r3, r2
 8013df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	4a28      	ldr	r2, [pc, #160]	; (8013e9c <TIM_OC3_SetConfig+0xfc>)
 8013dfa:	4293      	cmp	r3, r2
 8013dfc:	d003      	beq.n	8013e06 <TIM_OC3_SetConfig+0x66>
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	4a27      	ldr	r2, [pc, #156]	; (8013ea0 <TIM_OC3_SetConfig+0x100>)
 8013e02:	4293      	cmp	r3, r2
 8013e04:	d10d      	bne.n	8013e22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013e0e:	683b      	ldr	r3, [r7, #0]
 8013e10:	68db      	ldr	r3, [r3, #12]
 8013e12:	021b      	lsls	r3, r3, #8
 8013e14:	697a      	ldr	r2, [r7, #20]
 8013e16:	4313      	orrs	r3, r2
 8013e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	4a1d      	ldr	r2, [pc, #116]	; (8013e9c <TIM_OC3_SetConfig+0xfc>)
 8013e26:	4293      	cmp	r3, r2
 8013e28:	d00f      	beq.n	8013e4a <TIM_OC3_SetConfig+0xaa>
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	4a1c      	ldr	r2, [pc, #112]	; (8013ea0 <TIM_OC3_SetConfig+0x100>)
 8013e2e:	4293      	cmp	r3, r2
 8013e30:	d00b      	beq.n	8013e4a <TIM_OC3_SetConfig+0xaa>
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	4a1b      	ldr	r2, [pc, #108]	; (8013ea4 <TIM_OC3_SetConfig+0x104>)
 8013e36:	4293      	cmp	r3, r2
 8013e38:	d007      	beq.n	8013e4a <TIM_OC3_SetConfig+0xaa>
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	4a1a      	ldr	r2, [pc, #104]	; (8013ea8 <TIM_OC3_SetConfig+0x108>)
 8013e3e:	4293      	cmp	r3, r2
 8013e40:	d003      	beq.n	8013e4a <TIM_OC3_SetConfig+0xaa>
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	4a19      	ldr	r2, [pc, #100]	; (8013eac <TIM_OC3_SetConfig+0x10c>)
 8013e46:	4293      	cmp	r3, r2
 8013e48:	d113      	bne.n	8013e72 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	695b      	ldr	r3, [r3, #20]
 8013e5e:	011b      	lsls	r3, r3, #4
 8013e60:	693a      	ldr	r2, [r7, #16]
 8013e62:	4313      	orrs	r3, r2
 8013e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013e66:	683b      	ldr	r3, [r7, #0]
 8013e68:	699b      	ldr	r3, [r3, #24]
 8013e6a:	011b      	lsls	r3, r3, #4
 8013e6c:	693a      	ldr	r2, [r7, #16]
 8013e6e:	4313      	orrs	r3, r2
 8013e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	693a      	ldr	r2, [r7, #16]
 8013e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	68fa      	ldr	r2, [r7, #12]
 8013e7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	685a      	ldr	r2, [r3, #4]
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	697a      	ldr	r2, [r7, #20]
 8013e8a:	621a      	str	r2, [r3, #32]
}
 8013e8c:	bf00      	nop
 8013e8e:	371c      	adds	r7, #28
 8013e90:	46bd      	mov	sp, r7
 8013e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e96:	4770      	bx	lr
 8013e98:	fffeff8f 	.word	0xfffeff8f
 8013e9c:	40010000 	.word	0x40010000
 8013ea0:	40010400 	.word	0x40010400
 8013ea4:	40014000 	.word	0x40014000
 8013ea8:	40014400 	.word	0x40014400
 8013eac:	40014800 	.word	0x40014800

08013eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013eb0:	b480      	push	{r7}
 8013eb2:	b087      	sub	sp, #28
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
 8013eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	6a1b      	ldr	r3, [r3, #32]
 8013ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	6a1b      	ldr	r3, [r3, #32]
 8013eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	69db      	ldr	r3, [r3, #28]
 8013ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013ed8:	68fa      	ldr	r2, [r7, #12]
 8013eda:	4b24      	ldr	r3, [pc, #144]	; (8013f6c <TIM_OC4_SetConfig+0xbc>)
 8013edc:	4013      	ands	r3, r2
 8013ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013ee8:	683b      	ldr	r3, [r7, #0]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	021b      	lsls	r3, r3, #8
 8013eee:	68fa      	ldr	r2, [r7, #12]
 8013ef0:	4313      	orrs	r3, r2
 8013ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013ef4:	693b      	ldr	r3, [r7, #16]
 8013ef6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013efc:	683b      	ldr	r3, [r7, #0]
 8013efe:	689b      	ldr	r3, [r3, #8]
 8013f00:	031b      	lsls	r3, r3, #12
 8013f02:	693a      	ldr	r2, [r7, #16]
 8013f04:	4313      	orrs	r3, r2
 8013f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	4a19      	ldr	r2, [pc, #100]	; (8013f70 <TIM_OC4_SetConfig+0xc0>)
 8013f0c:	4293      	cmp	r3, r2
 8013f0e:	d00f      	beq.n	8013f30 <TIM_OC4_SetConfig+0x80>
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	4a18      	ldr	r2, [pc, #96]	; (8013f74 <TIM_OC4_SetConfig+0xc4>)
 8013f14:	4293      	cmp	r3, r2
 8013f16:	d00b      	beq.n	8013f30 <TIM_OC4_SetConfig+0x80>
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	4a17      	ldr	r2, [pc, #92]	; (8013f78 <TIM_OC4_SetConfig+0xc8>)
 8013f1c:	4293      	cmp	r3, r2
 8013f1e:	d007      	beq.n	8013f30 <TIM_OC4_SetConfig+0x80>
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	4a16      	ldr	r2, [pc, #88]	; (8013f7c <TIM_OC4_SetConfig+0xcc>)
 8013f24:	4293      	cmp	r3, r2
 8013f26:	d003      	beq.n	8013f30 <TIM_OC4_SetConfig+0x80>
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	4a15      	ldr	r2, [pc, #84]	; (8013f80 <TIM_OC4_SetConfig+0xd0>)
 8013f2c:	4293      	cmp	r3, r2
 8013f2e:	d109      	bne.n	8013f44 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013f30:	697b      	ldr	r3, [r7, #20]
 8013f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013f36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	695b      	ldr	r3, [r3, #20]
 8013f3c:	019b      	lsls	r3, r3, #6
 8013f3e:	697a      	ldr	r2, [r7, #20]
 8013f40:	4313      	orrs	r3, r2
 8013f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	697a      	ldr	r2, [r7, #20]
 8013f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	68fa      	ldr	r2, [r7, #12]
 8013f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	685a      	ldr	r2, [r3, #4]
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	693a      	ldr	r2, [r7, #16]
 8013f5c:	621a      	str	r2, [r3, #32]
}
 8013f5e:	bf00      	nop
 8013f60:	371c      	adds	r7, #28
 8013f62:	46bd      	mov	sp, r7
 8013f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f68:	4770      	bx	lr
 8013f6a:	bf00      	nop
 8013f6c:	feff8fff 	.word	0xfeff8fff
 8013f70:	40010000 	.word	0x40010000
 8013f74:	40010400 	.word	0x40010400
 8013f78:	40014000 	.word	0x40014000
 8013f7c:	40014400 	.word	0x40014400
 8013f80:	40014800 	.word	0x40014800

08013f84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8013f84:	b480      	push	{r7}
 8013f86:	b087      	sub	sp, #28
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
 8013f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6a1b      	ldr	r3, [r3, #32]
 8013f92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	6a1b      	ldr	r3, [r3, #32]
 8013f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	685b      	ldr	r3, [r3, #4]
 8013fa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013fac:	68fa      	ldr	r2, [r7, #12]
 8013fae:	4b21      	ldr	r3, [pc, #132]	; (8014034 <TIM_OC5_SetConfig+0xb0>)
 8013fb0:	4013      	ands	r3, r2
 8013fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	68fa      	ldr	r2, [r7, #12]
 8013fba:	4313      	orrs	r3, r2
 8013fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013fbe:	693b      	ldr	r3, [r7, #16]
 8013fc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013fc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	689b      	ldr	r3, [r3, #8]
 8013fca:	041b      	lsls	r3, r3, #16
 8013fcc:	693a      	ldr	r2, [r7, #16]
 8013fce:	4313      	orrs	r3, r2
 8013fd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	4a18      	ldr	r2, [pc, #96]	; (8014038 <TIM_OC5_SetConfig+0xb4>)
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	d00f      	beq.n	8013ffa <TIM_OC5_SetConfig+0x76>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	4a17      	ldr	r2, [pc, #92]	; (801403c <TIM_OC5_SetConfig+0xb8>)
 8013fde:	4293      	cmp	r3, r2
 8013fe0:	d00b      	beq.n	8013ffa <TIM_OC5_SetConfig+0x76>
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	4a16      	ldr	r2, [pc, #88]	; (8014040 <TIM_OC5_SetConfig+0xbc>)
 8013fe6:	4293      	cmp	r3, r2
 8013fe8:	d007      	beq.n	8013ffa <TIM_OC5_SetConfig+0x76>
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	4a15      	ldr	r2, [pc, #84]	; (8014044 <TIM_OC5_SetConfig+0xc0>)
 8013fee:	4293      	cmp	r3, r2
 8013ff0:	d003      	beq.n	8013ffa <TIM_OC5_SetConfig+0x76>
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	4a14      	ldr	r2, [pc, #80]	; (8014048 <TIM_OC5_SetConfig+0xc4>)
 8013ff6:	4293      	cmp	r3, r2
 8013ff8:	d109      	bne.n	801400e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014000:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8014002:	683b      	ldr	r3, [r7, #0]
 8014004:	695b      	ldr	r3, [r3, #20]
 8014006:	021b      	lsls	r3, r3, #8
 8014008:	697a      	ldr	r2, [r7, #20]
 801400a:	4313      	orrs	r3, r2
 801400c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	697a      	ldr	r2, [r7, #20]
 8014012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	68fa      	ldr	r2, [r7, #12]
 8014018:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	685a      	ldr	r2, [r3, #4]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	693a      	ldr	r2, [r7, #16]
 8014026:	621a      	str	r2, [r3, #32]
}
 8014028:	bf00      	nop
 801402a:	371c      	adds	r7, #28
 801402c:	46bd      	mov	sp, r7
 801402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014032:	4770      	bx	lr
 8014034:	fffeff8f 	.word	0xfffeff8f
 8014038:	40010000 	.word	0x40010000
 801403c:	40010400 	.word	0x40010400
 8014040:	40014000 	.word	0x40014000
 8014044:	40014400 	.word	0x40014400
 8014048:	40014800 	.word	0x40014800

0801404c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801404c:	b480      	push	{r7}
 801404e:	b087      	sub	sp, #28
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
 8014054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	6a1b      	ldr	r3, [r3, #32]
 801405a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	6a1b      	ldr	r3, [r3, #32]
 8014066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	685b      	ldr	r3, [r3, #4]
 801406c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8014074:	68fa      	ldr	r2, [r7, #12]
 8014076:	4b22      	ldr	r3, [pc, #136]	; (8014100 <TIM_OC6_SetConfig+0xb4>)
 8014078:	4013      	ands	r3, r2
 801407a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801407c:	683b      	ldr	r3, [r7, #0]
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	021b      	lsls	r3, r3, #8
 8014082:	68fa      	ldr	r2, [r7, #12]
 8014084:	4313      	orrs	r3, r2
 8014086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8014088:	693b      	ldr	r3, [r7, #16]
 801408a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801408e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	689b      	ldr	r3, [r3, #8]
 8014094:	051b      	lsls	r3, r3, #20
 8014096:	693a      	ldr	r2, [r7, #16]
 8014098:	4313      	orrs	r3, r2
 801409a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	4a19      	ldr	r2, [pc, #100]	; (8014104 <TIM_OC6_SetConfig+0xb8>)
 80140a0:	4293      	cmp	r3, r2
 80140a2:	d00f      	beq.n	80140c4 <TIM_OC6_SetConfig+0x78>
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	4a18      	ldr	r2, [pc, #96]	; (8014108 <TIM_OC6_SetConfig+0xbc>)
 80140a8:	4293      	cmp	r3, r2
 80140aa:	d00b      	beq.n	80140c4 <TIM_OC6_SetConfig+0x78>
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	4a17      	ldr	r2, [pc, #92]	; (801410c <TIM_OC6_SetConfig+0xc0>)
 80140b0:	4293      	cmp	r3, r2
 80140b2:	d007      	beq.n	80140c4 <TIM_OC6_SetConfig+0x78>
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	4a16      	ldr	r2, [pc, #88]	; (8014110 <TIM_OC6_SetConfig+0xc4>)
 80140b8:	4293      	cmp	r3, r2
 80140ba:	d003      	beq.n	80140c4 <TIM_OC6_SetConfig+0x78>
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	4a15      	ldr	r2, [pc, #84]	; (8014114 <TIM_OC6_SetConfig+0xc8>)
 80140c0:	4293      	cmp	r3, r2
 80140c2:	d109      	bne.n	80140d8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80140c4:	697b      	ldr	r3, [r7, #20]
 80140c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80140ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	695b      	ldr	r3, [r3, #20]
 80140d0:	029b      	lsls	r3, r3, #10
 80140d2:	697a      	ldr	r2, [r7, #20]
 80140d4:	4313      	orrs	r3, r2
 80140d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	697a      	ldr	r2, [r7, #20]
 80140dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	68fa      	ldr	r2, [r7, #12]
 80140e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	685a      	ldr	r2, [r3, #4]
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	693a      	ldr	r2, [r7, #16]
 80140f0:	621a      	str	r2, [r3, #32]
}
 80140f2:	bf00      	nop
 80140f4:	371c      	adds	r7, #28
 80140f6:	46bd      	mov	sp, r7
 80140f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fc:	4770      	bx	lr
 80140fe:	bf00      	nop
 8014100:	feff8fff 	.word	0xfeff8fff
 8014104:	40010000 	.word	0x40010000
 8014108:	40010400 	.word	0x40010400
 801410c:	40014000 	.word	0x40014000
 8014110:	40014400 	.word	0x40014400
 8014114:	40014800 	.word	0x40014800

08014118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014118:	b480      	push	{r7}
 801411a:	b087      	sub	sp, #28
 801411c:	af00      	add	r7, sp, #0
 801411e:	60f8      	str	r0, [r7, #12]
 8014120:	60b9      	str	r1, [r7, #8]
 8014122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	6a1b      	ldr	r3, [r3, #32]
 8014128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	6a1b      	ldr	r3, [r3, #32]
 801412e:	f023 0201 	bic.w	r2, r3, #1
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	699b      	ldr	r3, [r3, #24]
 801413a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801413c:	693b      	ldr	r3, [r7, #16]
 801413e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	011b      	lsls	r3, r3, #4
 8014148:	693a      	ldr	r2, [r7, #16]
 801414a:	4313      	orrs	r3, r2
 801414c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	f023 030a 	bic.w	r3, r3, #10
 8014154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014156:	697a      	ldr	r2, [r7, #20]
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	4313      	orrs	r3, r2
 801415c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	693a      	ldr	r2, [r7, #16]
 8014162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	697a      	ldr	r2, [r7, #20]
 8014168:	621a      	str	r2, [r3, #32]
}
 801416a:	bf00      	nop
 801416c:	371c      	adds	r7, #28
 801416e:	46bd      	mov	sp, r7
 8014170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014174:	4770      	bx	lr

08014176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014176:	b480      	push	{r7}
 8014178:	b087      	sub	sp, #28
 801417a:	af00      	add	r7, sp, #0
 801417c:	60f8      	str	r0, [r7, #12]
 801417e:	60b9      	str	r1, [r7, #8]
 8014180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	6a1b      	ldr	r3, [r3, #32]
 8014186:	f023 0210 	bic.w	r2, r3, #16
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	699b      	ldr	r3, [r3, #24]
 8014192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	6a1b      	ldr	r3, [r3, #32]
 8014198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80141a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	031b      	lsls	r3, r3, #12
 80141a6:	697a      	ldr	r2, [r7, #20]
 80141a8:	4313      	orrs	r3, r2
 80141aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80141ac:	693b      	ldr	r3, [r7, #16]
 80141ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80141b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	011b      	lsls	r3, r3, #4
 80141b8:	693a      	ldr	r2, [r7, #16]
 80141ba:	4313      	orrs	r3, r2
 80141bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	697a      	ldr	r2, [r7, #20]
 80141c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	693a      	ldr	r2, [r7, #16]
 80141c8:	621a      	str	r2, [r3, #32]
}
 80141ca:	bf00      	nop
 80141cc:	371c      	adds	r7, #28
 80141ce:	46bd      	mov	sp, r7
 80141d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d4:	4770      	bx	lr
	...

080141d8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80141d8:	b480      	push	{r7}
 80141da:	b085      	sub	sp, #20
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
 80141e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	689b      	ldr	r3, [r3, #8]
 80141e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80141e8:	68fa      	ldr	r2, [r7, #12]
 80141ea:	4b09      	ldr	r3, [pc, #36]	; (8014210 <TIM_ITRx_SetConfig+0x38>)
 80141ec:	4013      	ands	r3, r2
 80141ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80141f0:	683a      	ldr	r2, [r7, #0]
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	4313      	orrs	r3, r2
 80141f6:	f043 0307 	orr.w	r3, r3, #7
 80141fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	68fa      	ldr	r2, [r7, #12]
 8014200:	609a      	str	r2, [r3, #8]
}
 8014202:	bf00      	nop
 8014204:	3714      	adds	r7, #20
 8014206:	46bd      	mov	sp, r7
 8014208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420c:	4770      	bx	lr
 801420e:	bf00      	nop
 8014210:	ffcfff8f 	.word	0xffcfff8f

08014214 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014214:	b480      	push	{r7}
 8014216:	b087      	sub	sp, #28
 8014218:	af00      	add	r7, sp, #0
 801421a:	60f8      	str	r0, [r7, #12]
 801421c:	60b9      	str	r1, [r7, #8]
 801421e:	607a      	str	r2, [r7, #4]
 8014220:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	689b      	ldr	r3, [r3, #8]
 8014226:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014228:	697b      	ldr	r3, [r7, #20]
 801422a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801422e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	021a      	lsls	r2, r3, #8
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	431a      	orrs	r2, r3
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	4313      	orrs	r3, r2
 801423c:	697a      	ldr	r2, [r7, #20]
 801423e:	4313      	orrs	r3, r2
 8014240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	697a      	ldr	r2, [r7, #20]
 8014246:	609a      	str	r2, [r3, #8]
}
 8014248:	bf00      	nop
 801424a:	371c      	adds	r7, #28
 801424c:	46bd      	mov	sp, r7
 801424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014252:	4770      	bx	lr

08014254 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014254:	b480      	push	{r7}
 8014256:	b087      	sub	sp, #28
 8014258:	af00      	add	r7, sp, #0
 801425a:	60f8      	str	r0, [r7, #12]
 801425c:	60b9      	str	r1, [r7, #8]
 801425e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	f003 031f 	and.w	r3, r3, #31
 8014266:	2201      	movs	r2, #1
 8014268:	fa02 f303 	lsl.w	r3, r2, r3
 801426c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	6a1a      	ldr	r2, [r3, #32]
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	43db      	mvns	r3, r3
 8014276:	401a      	ands	r2, r3
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	6a1a      	ldr	r2, [r3, #32]
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	f003 031f 	and.w	r3, r3, #31
 8014286:	6879      	ldr	r1, [r7, #4]
 8014288:	fa01 f303 	lsl.w	r3, r1, r3
 801428c:	431a      	orrs	r2, r3
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	621a      	str	r2, [r3, #32]
}
 8014292:	bf00      	nop
 8014294:	371c      	adds	r7, #28
 8014296:	46bd      	mov	sp, r7
 8014298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429c:	4770      	bx	lr
	...

080142a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80142a0:	b480      	push	{r7}
 80142a2:	b085      	sub	sp, #20
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
 80142a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80142b0:	2b01      	cmp	r3, #1
 80142b2:	d101      	bne.n	80142b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80142b4:	2302      	movs	r3, #2
 80142b6:	e077      	b.n	80143a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2201      	movs	r2, #1
 80142bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2202      	movs	r2, #2
 80142c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	685b      	ldr	r3, [r3, #4]
 80142ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	689b      	ldr	r3, [r3, #8]
 80142d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	4a35      	ldr	r2, [pc, #212]	; (80143b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80142de:	4293      	cmp	r3, r2
 80142e0:	d004      	beq.n	80142ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	4a34      	ldr	r2, [pc, #208]	; (80143b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80142e8:	4293      	cmp	r3, r2
 80142ea:	d108      	bne.n	80142fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80142f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80142f4:	683b      	ldr	r3, [r7, #0]
 80142f6:	685b      	ldr	r3, [r3, #4]
 80142f8:	68fa      	ldr	r2, [r7, #12]
 80142fa:	4313      	orrs	r3, r2
 80142fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014304:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	68fa      	ldr	r2, [r7, #12]
 801430c:	4313      	orrs	r3, r2
 801430e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	68fa      	ldr	r2, [r7, #12]
 8014316:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	4a25      	ldr	r2, [pc, #148]	; (80143b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801431e:	4293      	cmp	r3, r2
 8014320:	d02c      	beq.n	801437c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801432a:	d027      	beq.n	801437c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	4a22      	ldr	r2, [pc, #136]	; (80143bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8014332:	4293      	cmp	r3, r2
 8014334:	d022      	beq.n	801437c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	4a21      	ldr	r2, [pc, #132]	; (80143c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801433c:	4293      	cmp	r3, r2
 801433e:	d01d      	beq.n	801437c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	4a1f      	ldr	r2, [pc, #124]	; (80143c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8014346:	4293      	cmp	r3, r2
 8014348:	d018      	beq.n	801437c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	4a1a      	ldr	r2, [pc, #104]	; (80143b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8014350:	4293      	cmp	r3, r2
 8014352:	d013      	beq.n	801437c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	4a1b      	ldr	r2, [pc, #108]	; (80143c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801435a:	4293      	cmp	r3, r2
 801435c:	d00e      	beq.n	801437c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	4a1a      	ldr	r2, [pc, #104]	; (80143cc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8014364:	4293      	cmp	r3, r2
 8014366:	d009      	beq.n	801437c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	4a18      	ldr	r2, [pc, #96]	; (80143d0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801436e:	4293      	cmp	r3, r2
 8014370:	d004      	beq.n	801437c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	4a17      	ldr	r2, [pc, #92]	; (80143d4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8014378:	4293      	cmp	r3, r2
 801437a:	d10c      	bne.n	8014396 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801437c:	68bb      	ldr	r3, [r7, #8]
 801437e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014382:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	689b      	ldr	r3, [r3, #8]
 8014388:	68ba      	ldr	r2, [r7, #8]
 801438a:	4313      	orrs	r3, r2
 801438c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	68ba      	ldr	r2, [r7, #8]
 8014394:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	2201      	movs	r2, #1
 801439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2200      	movs	r2, #0
 80143a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80143a6:	2300      	movs	r3, #0
}
 80143a8:	4618      	mov	r0, r3
 80143aa:	3714      	adds	r7, #20
 80143ac:	46bd      	mov	sp, r7
 80143ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b2:	4770      	bx	lr
 80143b4:	40010000 	.word	0x40010000
 80143b8:	40010400 	.word	0x40010400
 80143bc:	40000400 	.word	0x40000400
 80143c0:	40000800 	.word	0x40000800
 80143c4:	40000c00 	.word	0x40000c00
 80143c8:	40001800 	.word	0x40001800
 80143cc:	40014000 	.word	0x40014000
 80143d0:	4000e000 	.word	0x4000e000
 80143d4:	4000e400 	.word	0x4000e400

080143d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80143d8:	b480      	push	{r7}
 80143da:	b085      	sub	sp, #20
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
 80143e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80143e2:	2300      	movs	r3, #0
 80143e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80143ec:	2b01      	cmp	r3, #1
 80143ee:	d101      	bne.n	80143f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80143f0:	2302      	movs	r3, #2
 80143f2:	e087      	b.n	8014504 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2201      	movs	r2, #1
 80143f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	68db      	ldr	r3, [r3, #12]
 8014406:	4313      	orrs	r3, r2
 8014408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	689b      	ldr	r3, [r3, #8]
 8014414:	4313      	orrs	r3, r2
 8014416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801441e:	683b      	ldr	r3, [r7, #0]
 8014420:	685b      	ldr	r3, [r3, #4]
 8014422:	4313      	orrs	r3, r2
 8014424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801442c:	683b      	ldr	r3, [r7, #0]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	4313      	orrs	r3, r2
 8014432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	691b      	ldr	r3, [r3, #16]
 801443e:	4313      	orrs	r3, r2
 8014440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	695b      	ldr	r3, [r3, #20]
 801444c:	4313      	orrs	r3, r2
 801444e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8014456:	683b      	ldr	r3, [r7, #0]
 8014458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801445a:	4313      	orrs	r3, r2
 801445c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8014464:	683b      	ldr	r3, [r7, #0]
 8014466:	699b      	ldr	r3, [r3, #24]
 8014468:	041b      	lsls	r3, r3, #16
 801446a:	4313      	orrs	r3, r2
 801446c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	4a27      	ldr	r2, [pc, #156]	; (8014510 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8014474:	4293      	cmp	r3, r2
 8014476:	d004      	beq.n	8014482 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	4a25      	ldr	r2, [pc, #148]	; (8014514 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801447e:	4293      	cmp	r3, r2
 8014480:	d106      	bne.n	8014490 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	69db      	ldr	r3, [r3, #28]
 801448c:	4313      	orrs	r3, r2
 801448e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	4a1e      	ldr	r2, [pc, #120]	; (8014510 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8014496:	4293      	cmp	r3, r2
 8014498:	d004      	beq.n	80144a4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	4a1d      	ldr	r2, [pc, #116]	; (8014514 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80144a0:	4293      	cmp	r3, r2
 80144a2:	d126      	bne.n	80144f2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144ae:	051b      	lsls	r3, r3, #20
 80144b0:	4313      	orrs	r3, r2
 80144b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	6a1b      	ldr	r3, [r3, #32]
 80144be:	4313      	orrs	r3, r2
 80144c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144cc:	4313      	orrs	r3, r2
 80144ce:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	4a0e      	ldr	r2, [pc, #56]	; (8014510 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80144d6:	4293      	cmp	r3, r2
 80144d8:	d004      	beq.n	80144e4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	4a0d      	ldr	r2, [pc, #52]	; (8014514 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80144e0:	4293      	cmp	r3, r2
 80144e2:	d106      	bne.n	80144f2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ee:	4313      	orrs	r3, r2
 80144f0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	68fa      	ldr	r2, [r7, #12]
 80144f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	2200      	movs	r2, #0
 80144fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014502:	2300      	movs	r3, #0
}
 8014504:	4618      	mov	r0, r3
 8014506:	3714      	adds	r7, #20
 8014508:	46bd      	mov	sp, r7
 801450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450e:	4770      	bx	lr
 8014510:	40010000 	.word	0x40010000
 8014514:	40010400 	.word	0x40010400

08014518 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014518:	b480      	push	{r7}
 801451a:	b083      	sub	sp, #12
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014520:	bf00      	nop
 8014522:	370c      	adds	r7, #12
 8014524:	46bd      	mov	sp, r7
 8014526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452a:	4770      	bx	lr

0801452c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801452c:	b480      	push	{r7}
 801452e:	b083      	sub	sp, #12
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014534:	bf00      	nop
 8014536:	370c      	adds	r7, #12
 8014538:	46bd      	mov	sp, r7
 801453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453e:	4770      	bx	lr

08014540 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8014540:	b480      	push	{r7}
 8014542:	b083      	sub	sp, #12
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8014548:	bf00      	nop
 801454a:	370c      	adds	r7, #12
 801454c:	46bd      	mov	sp, r7
 801454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014552:	4770      	bx	lr

08014554 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b082      	sub	sp, #8
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d101      	bne.n	8014566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014562:	2301      	movs	r3, #1
 8014564:	e042      	b.n	80145ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801456c:	2b00      	cmp	r3, #0
 801456e:	d106      	bne.n	801457e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	2200      	movs	r2, #0
 8014574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014578:	6878      	ldr	r0, [r7, #4]
 801457a:	f7f2 fd61 	bl	8007040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2224      	movs	r2, #36	; 0x24
 8014582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	681a      	ldr	r2, [r3, #0]
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	f022 0201 	bic.w	r2, r2, #1
 8014594:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f000 fce8 	bl	8014f6c <UART_SetConfig>
 801459c:	4603      	mov	r3, r0
 801459e:	2b01      	cmp	r3, #1
 80145a0:	d101      	bne.n	80145a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80145a2:	2301      	movs	r3, #1
 80145a4:	e022      	b.n	80145ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d002      	beq.n	80145b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80145ae:	6878      	ldr	r0, [r7, #4]
 80145b0:	f001 fb48 	bl	8015c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	685a      	ldr	r2, [r3, #4]
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80145c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	689a      	ldr	r2, [r3, #8]
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80145d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	681a      	ldr	r2, [r3, #0]
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	f042 0201 	orr.w	r2, r2, #1
 80145e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f001 fbcf 	bl	8015d88 <UART_CheckIdleState>
 80145ea:	4603      	mov	r3, r0
}
 80145ec:	4618      	mov	r0, r3
 80145ee:	3708      	adds	r7, #8
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}

080145f4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80145f4:	b480      	push	{r7}
 80145f6:	b091      	sub	sp, #68	; 0x44
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	60f8      	str	r0, [r7, #12]
 80145fc:	60b9      	str	r1, [r7, #8]
 80145fe:	4613      	mov	r3, r2
 8014600:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014608:	2b20      	cmp	r3, #32
 801460a:	f040 808c 	bne.w	8014726 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 801460e:	68bb      	ldr	r3, [r7, #8]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d002      	beq.n	801461a <HAL_UART_Transmit_IT+0x26>
 8014614:	88fb      	ldrh	r3, [r7, #6]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d101      	bne.n	801461e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 801461a:	2301      	movs	r3, #1
 801461c:	e084      	b.n	8014728 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014624:	2b01      	cmp	r3, #1
 8014626:	d101      	bne.n	801462c <HAL_UART_Transmit_IT+0x38>
 8014628:	2302      	movs	r3, #2
 801462a:	e07d      	b.n	8014728 <HAL_UART_Transmit_IT+0x134>
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	2201      	movs	r2, #1
 8014630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	68ba      	ldr	r2, [r7, #8]
 8014638:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	88fa      	ldrh	r2, [r7, #6]
 801463e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	88fa      	ldrh	r2, [r7, #6]
 8014646:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	2200      	movs	r2, #0
 801464e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	2200      	movs	r2, #0
 8014654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	2221      	movs	r2, #33	; 0x21
 801465c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014668:	d12e      	bne.n	80146c8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	689b      	ldr	r3, [r3, #8]
 801466e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014672:	d107      	bne.n	8014684 <HAL_UART_Transmit_IT+0x90>
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	691b      	ldr	r3, [r3, #16]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d103      	bne.n	8014684 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	4a2d      	ldr	r2, [pc, #180]	; (8014734 <HAL_UART_Transmit_IT+0x140>)
 8014680:	675a      	str	r2, [r3, #116]	; 0x74
 8014682:	e002      	b.n	801468a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	4a2c      	ldr	r2, [pc, #176]	; (8014738 <HAL_UART_Transmit_IT+0x144>)
 8014688:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	2200      	movs	r2, #0
 801468e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	3308      	adds	r3, #8
 8014698:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801469c:	e853 3f00 	ldrex	r3, [r3]
 80146a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80146a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80146a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	3308      	adds	r3, #8
 80146b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80146b2:	637a      	str	r2, [r7, #52]	; 0x34
 80146b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80146b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80146ba:	e841 2300 	strex	r3, r2, [r1]
 80146be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80146c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d1e5      	bne.n	8014692 <HAL_UART_Transmit_IT+0x9e>
 80146c6:	e02c      	b.n	8014722 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	689b      	ldr	r3, [r3, #8]
 80146cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80146d0:	d107      	bne.n	80146e2 <HAL_UART_Transmit_IT+0xee>
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	691b      	ldr	r3, [r3, #16]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d103      	bne.n	80146e2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	4a17      	ldr	r2, [pc, #92]	; (801473c <HAL_UART_Transmit_IT+0x148>)
 80146de:	675a      	str	r2, [r3, #116]	; 0x74
 80146e0:	e002      	b.n	80146e8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	4a16      	ldr	r2, [pc, #88]	; (8014740 <HAL_UART_Transmit_IT+0x14c>)
 80146e6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	2200      	movs	r2, #0
 80146ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	e853 3f00 	ldrex	r3, [r3]
 80146fc:	613b      	str	r3, [r7, #16]
   return(result);
 80146fe:	693b      	ldr	r3, [r7, #16]
 8014700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	461a      	mov	r2, r3
 801470c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801470e:	623b      	str	r3, [r7, #32]
 8014710:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014712:	69f9      	ldr	r1, [r7, #28]
 8014714:	6a3a      	ldr	r2, [r7, #32]
 8014716:	e841 2300 	strex	r3, r2, [r1]
 801471a:	61bb      	str	r3, [r7, #24]
   return(result);
 801471c:	69bb      	ldr	r3, [r7, #24]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d1e6      	bne.n	80146f0 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8014722:	2300      	movs	r3, #0
 8014724:	e000      	b.n	8014728 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8014726:	2302      	movs	r3, #2
  }
}
 8014728:	4618      	mov	r0, r3
 801472a:	3744      	adds	r7, #68	; 0x44
 801472c:	46bd      	mov	sp, r7
 801472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014732:	4770      	bx	lr
 8014734:	08016557 	.word	0x08016557
 8014738:	08016477 	.word	0x08016477
 801473c:	080163b5 	.word	0x080163b5
 8014740:	080162fd 	.word	0x080162fd

08014744 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b08a      	sub	sp, #40	; 0x28
 8014748:	af00      	add	r7, sp, #0
 801474a:	60f8      	str	r0, [r7, #12]
 801474c:	60b9      	str	r1, [r7, #8]
 801474e:	4613      	mov	r3, r2
 8014750:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014758:	2b20      	cmp	r3, #32
 801475a:	d142      	bne.n	80147e2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801475c:	68bb      	ldr	r3, [r7, #8]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d002      	beq.n	8014768 <HAL_UART_Receive_IT+0x24>
 8014762:	88fb      	ldrh	r3, [r7, #6]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d101      	bne.n	801476c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8014768:	2301      	movs	r3, #1
 801476a:	e03b      	b.n	80147e4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014772:	2b01      	cmp	r3, #1
 8014774:	d101      	bne.n	801477a <HAL_UART_Receive_IT+0x36>
 8014776:	2302      	movs	r3, #2
 8014778:	e034      	b.n	80147e4 <HAL_UART_Receive_IT+0xa0>
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	2201      	movs	r2, #1
 801477e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	2200      	movs	r2, #0
 8014786:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	4a17      	ldr	r2, [pc, #92]	; (80147ec <HAL_UART_Receive_IT+0xa8>)
 801478e:	4293      	cmp	r3, r2
 8014790:	d01f      	beq.n	80147d2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	685b      	ldr	r3, [r3, #4]
 8014798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801479c:	2b00      	cmp	r3, #0
 801479e:	d018      	beq.n	80147d2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	e853 3f00 	ldrex	r3, [r3]
 80147ac:	613b      	str	r3, [r7, #16]
   return(result);
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80147b4:	627b      	str	r3, [r7, #36]	; 0x24
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	461a      	mov	r2, r3
 80147bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147be:	623b      	str	r3, [r7, #32]
 80147c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147c2:	69f9      	ldr	r1, [r7, #28]
 80147c4:	6a3a      	ldr	r2, [r7, #32]
 80147c6:	e841 2300 	strex	r3, r2, [r1]
 80147ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80147cc:	69bb      	ldr	r3, [r7, #24]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d1e6      	bne.n	80147a0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80147d2:	88fb      	ldrh	r3, [r7, #6]
 80147d4:	461a      	mov	r2, r3
 80147d6:	68b9      	ldr	r1, [r7, #8]
 80147d8:	68f8      	ldr	r0, [r7, #12]
 80147da:	f001 fbe9 	bl	8015fb0 <UART_Start_Receive_IT>
 80147de:	4603      	mov	r3, r0
 80147e0:	e000      	b.n	80147e4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80147e2:	2302      	movs	r3, #2
  }
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3728      	adds	r7, #40	; 0x28
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}
 80147ec:	58000c00 	.word	0x58000c00

080147f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b0ba      	sub	sp, #232	; 0xe8
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	69db      	ldr	r3, [r3, #28]
 80147fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	689b      	ldr	r3, [r3, #8]
 8014812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8014816:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801481a:	f640 030f 	movw	r3, #2063	; 0x80f
 801481e:	4013      	ands	r3, r2
 8014820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8014824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014828:	2b00      	cmp	r3, #0
 801482a:	d11b      	bne.n	8014864 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801482c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014830:	f003 0320 	and.w	r3, r3, #32
 8014834:	2b00      	cmp	r3, #0
 8014836:	d015      	beq.n	8014864 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801483c:	f003 0320 	and.w	r3, r3, #32
 8014840:	2b00      	cmp	r3, #0
 8014842:	d105      	bne.n	8014850 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801484c:	2b00      	cmp	r3, #0
 801484e:	d009      	beq.n	8014864 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014854:	2b00      	cmp	r3, #0
 8014856:	f000 835a 	beq.w	8014f0e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801485e:	6878      	ldr	r0, [r7, #4]
 8014860:	4798      	blx	r3
      }
      return;
 8014862:	e354      	b.n	8014f0e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8014864:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014868:	2b00      	cmp	r3, #0
 801486a:	f000 811f 	beq.w	8014aac <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801486e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014872:	4b8b      	ldr	r3, [pc, #556]	; (8014aa0 <HAL_UART_IRQHandler+0x2b0>)
 8014874:	4013      	ands	r3, r2
 8014876:	2b00      	cmp	r3, #0
 8014878:	d106      	bne.n	8014888 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801487a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801487e:	4b89      	ldr	r3, [pc, #548]	; (8014aa4 <HAL_UART_IRQHandler+0x2b4>)
 8014880:	4013      	ands	r3, r2
 8014882:	2b00      	cmp	r3, #0
 8014884:	f000 8112 	beq.w	8014aac <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801488c:	f003 0301 	and.w	r3, r3, #1
 8014890:	2b00      	cmp	r3, #0
 8014892:	d011      	beq.n	80148b8 <HAL_UART_IRQHandler+0xc8>
 8014894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801489c:	2b00      	cmp	r3, #0
 801489e:	d00b      	beq.n	80148b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	2201      	movs	r2, #1
 80148a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80148ae:	f043 0201 	orr.w	r2, r3, #1
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80148b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80148bc:	f003 0302 	and.w	r3, r3, #2
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d011      	beq.n	80148e8 <HAL_UART_IRQHandler+0xf8>
 80148c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80148c8:	f003 0301 	and.w	r3, r3, #1
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d00b      	beq.n	80148e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	2202      	movs	r2, #2
 80148d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80148de:	f043 0204 	orr.w	r2, r3, #4
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80148e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80148ec:	f003 0304 	and.w	r3, r3, #4
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d011      	beq.n	8014918 <HAL_UART_IRQHandler+0x128>
 80148f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80148f8:	f003 0301 	and.w	r3, r3, #1
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d00b      	beq.n	8014918 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	2204      	movs	r2, #4
 8014906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801490e:	f043 0202 	orr.w	r2, r3, #2
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801491c:	f003 0308 	and.w	r3, r3, #8
 8014920:	2b00      	cmp	r3, #0
 8014922:	d017      	beq.n	8014954 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014928:	f003 0320 	and.w	r3, r3, #32
 801492c:	2b00      	cmp	r3, #0
 801492e:	d105      	bne.n	801493c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014930:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014934:	4b5a      	ldr	r3, [pc, #360]	; (8014aa0 <HAL_UART_IRQHandler+0x2b0>)
 8014936:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014938:	2b00      	cmp	r3, #0
 801493a:	d00b      	beq.n	8014954 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	2208      	movs	r2, #8
 8014942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801494a:	f043 0208 	orr.w	r2, r3, #8
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801495c:	2b00      	cmp	r3, #0
 801495e:	d012      	beq.n	8014986 <HAL_UART_IRQHandler+0x196>
 8014960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014964:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014968:	2b00      	cmp	r3, #0
 801496a:	d00c      	beq.n	8014986 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014974:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801497c:	f043 0220 	orr.w	r2, r3, #32
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801498c:	2b00      	cmp	r3, #0
 801498e:	f000 82c0 	beq.w	8014f12 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014996:	f003 0320 	and.w	r3, r3, #32
 801499a:	2b00      	cmp	r3, #0
 801499c:	d013      	beq.n	80149c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801499e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80149a2:	f003 0320 	and.w	r3, r3, #32
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d105      	bne.n	80149b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80149aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80149ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d007      	beq.n	80149c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d003      	beq.n	80149c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149c2:	6878      	ldr	r0, [r7, #4]
 80149c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80149cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	689b      	ldr	r3, [r3, #8]
 80149d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149da:	2b40      	cmp	r3, #64	; 0x40
 80149dc:	d005      	beq.n	80149ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80149de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80149e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d04f      	beq.n	8014a8a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80149ea:	6878      	ldr	r0, [r7, #4]
 80149ec:	f001 fc0a 	bl	8016204 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	689b      	ldr	r3, [r3, #8]
 80149f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149fa:	2b40      	cmp	r3, #64	; 0x40
 80149fc:	d141      	bne.n	8014a82 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	3308      	adds	r3, #8
 8014a04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014a0c:	e853 3f00 	ldrex	r3, [r3]
 8014a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	3308      	adds	r3, #8
 8014a26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014a2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014a36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014a3a:	e841 2300 	strex	r3, r2, [r1]
 8014a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d1d9      	bne.n	80149fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d013      	beq.n	8014a7a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a56:	4a14      	ldr	r2, [pc, #80]	; (8014aa8 <HAL_UART_IRQHandler+0x2b8>)
 8014a58:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f7f6 fa3c 	bl	800aedc <HAL_DMA_Abort_IT>
 8014a64:	4603      	mov	r3, r0
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d017      	beq.n	8014a9a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a70:	687a      	ldr	r2, [r7, #4]
 8014a72:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8014a74:	4610      	mov	r0, r2
 8014a76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014a78:	e00f      	b.n	8014a9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014a7a:	6878      	ldr	r0, [r7, #4]
 8014a7c:	f000 fa60 	bl	8014f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014a80:	e00b      	b.n	8014a9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f000 fa5c 	bl	8014f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014a88:	e007      	b.n	8014a9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014a8a:	6878      	ldr	r0, [r7, #4]
 8014a8c:	f000 fa58 	bl	8014f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	2200      	movs	r2, #0
 8014a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8014a98:	e23b      	b.n	8014f12 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014a9a:	bf00      	nop
    return;
 8014a9c:	e239      	b.n	8014f12 <HAL_UART_IRQHandler+0x722>
 8014a9e:	bf00      	nop
 8014aa0:	10000001 	.word	0x10000001
 8014aa4:	04000120 	.word	0x04000120
 8014aa8:	080162d1 	.word	0x080162d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ab0:	2b01      	cmp	r3, #1
 8014ab2:	f040 81ce 	bne.w	8014e52 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014aba:	f003 0310 	and.w	r3, r3, #16
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	f000 81c7 	beq.w	8014e52 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ac8:	f003 0310 	and.w	r3, r3, #16
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	f000 81c0 	beq.w	8014e52 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	2210      	movs	r2, #16
 8014ad8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	689b      	ldr	r3, [r3, #8]
 8014ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ae4:	2b40      	cmp	r3, #64	; 0x40
 8014ae6:	f040 813b 	bne.w	8014d60 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	4a8b      	ldr	r2, [pc, #556]	; (8014d20 <HAL_UART_IRQHandler+0x530>)
 8014af2:	4293      	cmp	r3, r2
 8014af4:	d059      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	4a89      	ldr	r2, [pc, #548]	; (8014d24 <HAL_UART_IRQHandler+0x534>)
 8014afe:	4293      	cmp	r3, r2
 8014b00:	d053      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	4a87      	ldr	r2, [pc, #540]	; (8014d28 <HAL_UART_IRQHandler+0x538>)
 8014b0a:	4293      	cmp	r3, r2
 8014b0c:	d04d      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	4a85      	ldr	r2, [pc, #532]	; (8014d2c <HAL_UART_IRQHandler+0x53c>)
 8014b16:	4293      	cmp	r3, r2
 8014b18:	d047      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	4a83      	ldr	r2, [pc, #524]	; (8014d30 <HAL_UART_IRQHandler+0x540>)
 8014b22:	4293      	cmp	r3, r2
 8014b24:	d041      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	4a81      	ldr	r2, [pc, #516]	; (8014d34 <HAL_UART_IRQHandler+0x544>)
 8014b2e:	4293      	cmp	r3, r2
 8014b30:	d03b      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	4a7f      	ldr	r2, [pc, #508]	; (8014d38 <HAL_UART_IRQHandler+0x548>)
 8014b3a:	4293      	cmp	r3, r2
 8014b3c:	d035      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	4a7d      	ldr	r2, [pc, #500]	; (8014d3c <HAL_UART_IRQHandler+0x54c>)
 8014b46:	4293      	cmp	r3, r2
 8014b48:	d02f      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	4a7b      	ldr	r2, [pc, #492]	; (8014d40 <HAL_UART_IRQHandler+0x550>)
 8014b52:	4293      	cmp	r3, r2
 8014b54:	d029      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	4a79      	ldr	r2, [pc, #484]	; (8014d44 <HAL_UART_IRQHandler+0x554>)
 8014b5e:	4293      	cmp	r3, r2
 8014b60:	d023      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	4a77      	ldr	r2, [pc, #476]	; (8014d48 <HAL_UART_IRQHandler+0x558>)
 8014b6a:	4293      	cmp	r3, r2
 8014b6c:	d01d      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	4a75      	ldr	r2, [pc, #468]	; (8014d4c <HAL_UART_IRQHandler+0x55c>)
 8014b76:	4293      	cmp	r3, r2
 8014b78:	d017      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	4a73      	ldr	r2, [pc, #460]	; (8014d50 <HAL_UART_IRQHandler+0x560>)
 8014b82:	4293      	cmp	r3, r2
 8014b84:	d011      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	4a71      	ldr	r2, [pc, #452]	; (8014d54 <HAL_UART_IRQHandler+0x564>)
 8014b8e:	4293      	cmp	r3, r2
 8014b90:	d00b      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	4a6f      	ldr	r2, [pc, #444]	; (8014d58 <HAL_UART_IRQHandler+0x568>)
 8014b9a:	4293      	cmp	r3, r2
 8014b9c:	d005      	beq.n	8014baa <HAL_UART_IRQHandler+0x3ba>
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	4a6d      	ldr	r2, [pc, #436]	; (8014d5c <HAL_UART_IRQHandler+0x56c>)
 8014ba6:	4293      	cmp	r3, r2
 8014ba8:	d105      	bne.n	8014bb6 <HAL_UART_IRQHandler+0x3c6>
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	685b      	ldr	r3, [r3, #4]
 8014bb2:	b29b      	uxth	r3, r3
 8014bb4:	e004      	b.n	8014bc0 <HAL_UART_IRQHandler+0x3d0>
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	b29b      	uxth	r3, r3
 8014bc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014bc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	f000 81a4 	beq.w	8014f16 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014bd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014bd8:	429a      	cmp	r2, r3
 8014bda:	f080 819c 	bcs.w	8014f16 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014be4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014bec:	69db      	ldr	r3, [r3, #28]
 8014bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014bf2:	f000 8086 	beq.w	8014d02 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014c02:	e853 3f00 	ldrex	r3, [r3]
 8014c06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014c12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	461a      	mov	r2, r3
 8014c1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014c20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014c24:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014c2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014c30:	e841 2300 	strex	r3, r2, [r1]
 8014c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d1da      	bne.n	8014bf6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	3308      	adds	r3, #8
 8014c46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014c4a:	e853 3f00 	ldrex	r3, [r3]
 8014c4e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c52:	f023 0301 	bic.w	r3, r3, #1
 8014c56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	3308      	adds	r3, #8
 8014c60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014c64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014c68:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014c6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014c70:	e841 2300 	strex	r3, r2, [r1]
 8014c74:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d1e1      	bne.n	8014c40 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	3308      	adds	r3, #8
 8014c82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014c86:	e853 3f00 	ldrex	r3, [r3]
 8014c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	3308      	adds	r3, #8
 8014c9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014ca0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014ca2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ca4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014ca6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014ca8:	e841 2300 	strex	r3, r2, [r1]
 8014cac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d1e3      	bne.n	8014c7c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	2220      	movs	r2, #32
 8014cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cca:	e853 3f00 	ldrex	r3, [r3]
 8014cce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014cd2:	f023 0310 	bic.w	r3, r3, #16
 8014cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	461a      	mov	r2, r3
 8014ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014ce4:	65bb      	str	r3, [r7, #88]	; 0x58
 8014ce6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ce8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014cea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014cec:	e841 2300 	strex	r3, r2, [r1]
 8014cf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d1e4      	bne.n	8014cc2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7f5 fdcf 	bl	800a8a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014d0e:	b29b      	uxth	r3, r3
 8014d10:	1ad3      	subs	r3, r2, r3
 8014d12:	b29b      	uxth	r3, r3
 8014d14:	4619      	mov	r1, r3
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f000 f91c 	bl	8014f54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014d1c:	e0fb      	b.n	8014f16 <HAL_UART_IRQHandler+0x726>
 8014d1e:	bf00      	nop
 8014d20:	40020010 	.word	0x40020010
 8014d24:	40020028 	.word	0x40020028
 8014d28:	40020040 	.word	0x40020040
 8014d2c:	40020058 	.word	0x40020058
 8014d30:	40020070 	.word	0x40020070
 8014d34:	40020088 	.word	0x40020088
 8014d38:	400200a0 	.word	0x400200a0
 8014d3c:	400200b8 	.word	0x400200b8
 8014d40:	40020410 	.word	0x40020410
 8014d44:	40020428 	.word	0x40020428
 8014d48:	40020440 	.word	0x40020440
 8014d4c:	40020458 	.word	0x40020458
 8014d50:	40020470 	.word	0x40020470
 8014d54:	40020488 	.word	0x40020488
 8014d58:	400204a0 	.word	0x400204a0
 8014d5c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014d6c:	b29b      	uxth	r3, r3
 8014d6e:	1ad3      	subs	r3, r2, r3
 8014d70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014d7a:	b29b      	uxth	r3, r3
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	f000 80cc 	beq.w	8014f1a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8014d82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	f000 80c7 	beq.w	8014f1a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d94:	e853 3f00 	ldrex	r3, [r3]
 8014d98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014da0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	461a      	mov	r2, r3
 8014daa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014dae:	647b      	str	r3, [r7, #68]	; 0x44
 8014db0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014db2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014db4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014db6:	e841 2300 	strex	r3, r2, [r1]
 8014dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d1e4      	bne.n	8014d8c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	3308      	adds	r3, #8
 8014dc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dcc:	e853 3f00 	ldrex	r3, [r3]
 8014dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8014dd2:	6a3a      	ldr	r2, [r7, #32]
 8014dd4:	4b54      	ldr	r3, [pc, #336]	; (8014f28 <HAL_UART_IRQHandler+0x738>)
 8014dd6:	4013      	ands	r3, r2
 8014dd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	3308      	adds	r3, #8
 8014de2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014de6:	633a      	str	r2, [r7, #48]	; 0x30
 8014de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dee:	e841 2300 	strex	r3, r2, [r1]
 8014df2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d1e3      	bne.n	8014dc2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	2220      	movs	r2, #32
 8014dfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2200      	movs	r2, #0
 8014e06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e14:	693b      	ldr	r3, [r7, #16]
 8014e16:	e853 3f00 	ldrex	r3, [r3]
 8014e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	f023 0310 	bic.w	r3, r3, #16
 8014e22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	461a      	mov	r2, r3
 8014e2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014e30:	61fb      	str	r3, [r7, #28]
 8014e32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e34:	69b9      	ldr	r1, [r7, #24]
 8014e36:	69fa      	ldr	r2, [r7, #28]
 8014e38:	e841 2300 	strex	r3, r2, [r1]
 8014e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8014e3e:	697b      	ldr	r3, [r7, #20]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d1e4      	bne.n	8014e0e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014e48:	4619      	mov	r1, r3
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	f000 f882 	bl	8014f54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014e50:	e063      	b.n	8014f1a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d00e      	beq.n	8014e7c <HAL_UART_IRQHandler+0x68c>
 8014e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d008      	beq.n	8014e7c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014e72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f002 f86b 	bl	8016f50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014e7a:	e051      	b.n	8014f20 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d014      	beq.n	8014eb2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d105      	bne.n	8014ea0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d008      	beq.n	8014eb2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d03a      	beq.n	8014f1e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014eac:	6878      	ldr	r0, [r7, #4]
 8014eae:	4798      	blx	r3
    }
    return;
 8014eb0:	e035      	b.n	8014f1e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d009      	beq.n	8014ed2 <HAL_UART_IRQHandler+0x6e2>
 8014ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d003      	beq.n	8014ed2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	f001 fbb8 	bl	8016640 <UART_EndTransmit_IT>
    return;
 8014ed0:	e026      	b.n	8014f20 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d009      	beq.n	8014ef2 <HAL_UART_IRQHandler+0x702>
 8014ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ee2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d003      	beq.n	8014ef2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014eea:	6878      	ldr	r0, [r7, #4]
 8014eec:	f002 f844 	bl	8016f78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014ef0:	e016      	b.n	8014f20 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d010      	beq.n	8014f20 <HAL_UART_IRQHandler+0x730>
 8014efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	da0c      	bge.n	8014f20 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014f06:	6878      	ldr	r0, [r7, #4]
 8014f08:	f002 f82c 	bl	8016f64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014f0c:	e008      	b.n	8014f20 <HAL_UART_IRQHandler+0x730>
      return;
 8014f0e:	bf00      	nop
 8014f10:	e006      	b.n	8014f20 <HAL_UART_IRQHandler+0x730>
    return;
 8014f12:	bf00      	nop
 8014f14:	e004      	b.n	8014f20 <HAL_UART_IRQHandler+0x730>
      return;
 8014f16:	bf00      	nop
 8014f18:	e002      	b.n	8014f20 <HAL_UART_IRQHandler+0x730>
      return;
 8014f1a:	bf00      	nop
 8014f1c:	e000      	b.n	8014f20 <HAL_UART_IRQHandler+0x730>
    return;
 8014f1e:	bf00      	nop
  }
}
 8014f20:	37e8      	adds	r7, #232	; 0xe8
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}
 8014f26:	bf00      	nop
 8014f28:	effffffe 	.word	0xeffffffe

08014f2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b083      	sub	sp, #12
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014f34:	bf00      	nop
 8014f36:	370c      	adds	r7, #12
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3e:	4770      	bx	lr

08014f40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014f40:	b480      	push	{r7}
 8014f42:	b083      	sub	sp, #12
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014f48:	bf00      	nop
 8014f4a:	370c      	adds	r7, #12
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f52:	4770      	bx	lr

08014f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014f54:	b480      	push	{r7}
 8014f56:	b083      	sub	sp, #12
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
 8014f5c:	460b      	mov	r3, r1
 8014f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014f60:	bf00      	nop
 8014f62:	370c      	adds	r7, #12
 8014f64:	46bd      	mov	sp, r7
 8014f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6a:	4770      	bx	lr

08014f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014f70:	b092      	sub	sp, #72	; 0x48
 8014f72:	af00      	add	r7, sp, #0
 8014f74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014f76:	2300      	movs	r3, #0
 8014f78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014f7c:	697b      	ldr	r3, [r7, #20]
 8014f7e:	689a      	ldr	r2, [r3, #8]
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	691b      	ldr	r3, [r3, #16]
 8014f84:	431a      	orrs	r2, r3
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	695b      	ldr	r3, [r3, #20]
 8014f8a:	431a      	orrs	r2, r3
 8014f8c:	697b      	ldr	r3, [r7, #20]
 8014f8e:	69db      	ldr	r3, [r3, #28]
 8014f90:	4313      	orrs	r3, r2
 8014f92:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	681a      	ldr	r2, [r3, #0]
 8014f9a:	4bbe      	ldr	r3, [pc, #760]	; (8015294 <UART_SetConfig+0x328>)
 8014f9c:	4013      	ands	r3, r2
 8014f9e:	697a      	ldr	r2, [r7, #20]
 8014fa0:	6812      	ldr	r2, [r2, #0]
 8014fa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014fa4:	430b      	orrs	r3, r1
 8014fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014fa8:	697b      	ldr	r3, [r7, #20]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	685b      	ldr	r3, [r3, #4]
 8014fae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	68da      	ldr	r2, [r3, #12]
 8014fb6:	697b      	ldr	r3, [r7, #20]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	430a      	orrs	r2, r1
 8014fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014fbe:	697b      	ldr	r3, [r7, #20]
 8014fc0:	699b      	ldr	r3, [r3, #24]
 8014fc2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014fc4:	697b      	ldr	r3, [r7, #20]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	4ab3      	ldr	r2, [pc, #716]	; (8015298 <UART_SetConfig+0x32c>)
 8014fca:	4293      	cmp	r3, r2
 8014fcc:	d004      	beq.n	8014fd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014fce:	697b      	ldr	r3, [r7, #20]
 8014fd0:	6a1b      	ldr	r3, [r3, #32]
 8014fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014fd4:	4313      	orrs	r3, r2
 8014fd6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014fd8:	697b      	ldr	r3, [r7, #20]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	689a      	ldr	r2, [r3, #8]
 8014fde:	4baf      	ldr	r3, [pc, #700]	; (801529c <UART_SetConfig+0x330>)
 8014fe0:	4013      	ands	r3, r2
 8014fe2:	697a      	ldr	r2, [r7, #20]
 8014fe4:	6812      	ldr	r2, [r2, #0]
 8014fe6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014fe8:	430b      	orrs	r3, r1
 8014fea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ff2:	f023 010f 	bic.w	r1, r3, #15
 8014ff6:	697b      	ldr	r3, [r7, #20]
 8014ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	430a      	orrs	r2, r1
 8015000:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015002:	697b      	ldr	r3, [r7, #20]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	4aa6      	ldr	r2, [pc, #664]	; (80152a0 <UART_SetConfig+0x334>)
 8015008:	4293      	cmp	r3, r2
 801500a:	d177      	bne.n	80150fc <UART_SetConfig+0x190>
 801500c:	4ba5      	ldr	r3, [pc, #660]	; (80152a4 <UART_SetConfig+0x338>)
 801500e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015010:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015014:	2b28      	cmp	r3, #40	; 0x28
 8015016:	d86d      	bhi.n	80150f4 <UART_SetConfig+0x188>
 8015018:	a201      	add	r2, pc, #4	; (adr r2, 8015020 <UART_SetConfig+0xb4>)
 801501a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801501e:	bf00      	nop
 8015020:	080150c5 	.word	0x080150c5
 8015024:	080150f5 	.word	0x080150f5
 8015028:	080150f5 	.word	0x080150f5
 801502c:	080150f5 	.word	0x080150f5
 8015030:	080150f5 	.word	0x080150f5
 8015034:	080150f5 	.word	0x080150f5
 8015038:	080150f5 	.word	0x080150f5
 801503c:	080150f5 	.word	0x080150f5
 8015040:	080150cd 	.word	0x080150cd
 8015044:	080150f5 	.word	0x080150f5
 8015048:	080150f5 	.word	0x080150f5
 801504c:	080150f5 	.word	0x080150f5
 8015050:	080150f5 	.word	0x080150f5
 8015054:	080150f5 	.word	0x080150f5
 8015058:	080150f5 	.word	0x080150f5
 801505c:	080150f5 	.word	0x080150f5
 8015060:	080150d5 	.word	0x080150d5
 8015064:	080150f5 	.word	0x080150f5
 8015068:	080150f5 	.word	0x080150f5
 801506c:	080150f5 	.word	0x080150f5
 8015070:	080150f5 	.word	0x080150f5
 8015074:	080150f5 	.word	0x080150f5
 8015078:	080150f5 	.word	0x080150f5
 801507c:	080150f5 	.word	0x080150f5
 8015080:	080150dd 	.word	0x080150dd
 8015084:	080150f5 	.word	0x080150f5
 8015088:	080150f5 	.word	0x080150f5
 801508c:	080150f5 	.word	0x080150f5
 8015090:	080150f5 	.word	0x080150f5
 8015094:	080150f5 	.word	0x080150f5
 8015098:	080150f5 	.word	0x080150f5
 801509c:	080150f5 	.word	0x080150f5
 80150a0:	080150e5 	.word	0x080150e5
 80150a4:	080150f5 	.word	0x080150f5
 80150a8:	080150f5 	.word	0x080150f5
 80150ac:	080150f5 	.word	0x080150f5
 80150b0:	080150f5 	.word	0x080150f5
 80150b4:	080150f5 	.word	0x080150f5
 80150b8:	080150f5 	.word	0x080150f5
 80150bc:	080150f5 	.word	0x080150f5
 80150c0:	080150ed 	.word	0x080150ed
 80150c4:	2301      	movs	r3, #1
 80150c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ca:	e326      	b.n	801571a <UART_SetConfig+0x7ae>
 80150cc:	2304      	movs	r3, #4
 80150ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150d2:	e322      	b.n	801571a <UART_SetConfig+0x7ae>
 80150d4:	2308      	movs	r3, #8
 80150d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150da:	e31e      	b.n	801571a <UART_SetConfig+0x7ae>
 80150dc:	2310      	movs	r3, #16
 80150de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150e2:	e31a      	b.n	801571a <UART_SetConfig+0x7ae>
 80150e4:	2320      	movs	r3, #32
 80150e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ea:	e316      	b.n	801571a <UART_SetConfig+0x7ae>
 80150ec:	2340      	movs	r3, #64	; 0x40
 80150ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150f2:	e312      	b.n	801571a <UART_SetConfig+0x7ae>
 80150f4:	2380      	movs	r3, #128	; 0x80
 80150f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150fa:	e30e      	b.n	801571a <UART_SetConfig+0x7ae>
 80150fc:	697b      	ldr	r3, [r7, #20]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	4a69      	ldr	r2, [pc, #420]	; (80152a8 <UART_SetConfig+0x33c>)
 8015102:	4293      	cmp	r3, r2
 8015104:	d130      	bne.n	8015168 <UART_SetConfig+0x1fc>
 8015106:	4b67      	ldr	r3, [pc, #412]	; (80152a4 <UART_SetConfig+0x338>)
 8015108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801510a:	f003 0307 	and.w	r3, r3, #7
 801510e:	2b05      	cmp	r3, #5
 8015110:	d826      	bhi.n	8015160 <UART_SetConfig+0x1f4>
 8015112:	a201      	add	r2, pc, #4	; (adr r2, 8015118 <UART_SetConfig+0x1ac>)
 8015114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015118:	08015131 	.word	0x08015131
 801511c:	08015139 	.word	0x08015139
 8015120:	08015141 	.word	0x08015141
 8015124:	08015149 	.word	0x08015149
 8015128:	08015151 	.word	0x08015151
 801512c:	08015159 	.word	0x08015159
 8015130:	2300      	movs	r3, #0
 8015132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015136:	e2f0      	b.n	801571a <UART_SetConfig+0x7ae>
 8015138:	2304      	movs	r3, #4
 801513a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801513e:	e2ec      	b.n	801571a <UART_SetConfig+0x7ae>
 8015140:	2308      	movs	r3, #8
 8015142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015146:	e2e8      	b.n	801571a <UART_SetConfig+0x7ae>
 8015148:	2310      	movs	r3, #16
 801514a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801514e:	e2e4      	b.n	801571a <UART_SetConfig+0x7ae>
 8015150:	2320      	movs	r3, #32
 8015152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015156:	e2e0      	b.n	801571a <UART_SetConfig+0x7ae>
 8015158:	2340      	movs	r3, #64	; 0x40
 801515a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801515e:	e2dc      	b.n	801571a <UART_SetConfig+0x7ae>
 8015160:	2380      	movs	r3, #128	; 0x80
 8015162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015166:	e2d8      	b.n	801571a <UART_SetConfig+0x7ae>
 8015168:	697b      	ldr	r3, [r7, #20]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	4a4f      	ldr	r2, [pc, #316]	; (80152ac <UART_SetConfig+0x340>)
 801516e:	4293      	cmp	r3, r2
 8015170:	d130      	bne.n	80151d4 <UART_SetConfig+0x268>
 8015172:	4b4c      	ldr	r3, [pc, #304]	; (80152a4 <UART_SetConfig+0x338>)
 8015174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015176:	f003 0307 	and.w	r3, r3, #7
 801517a:	2b05      	cmp	r3, #5
 801517c:	d826      	bhi.n	80151cc <UART_SetConfig+0x260>
 801517e:	a201      	add	r2, pc, #4	; (adr r2, 8015184 <UART_SetConfig+0x218>)
 8015180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015184:	0801519d 	.word	0x0801519d
 8015188:	080151a5 	.word	0x080151a5
 801518c:	080151ad 	.word	0x080151ad
 8015190:	080151b5 	.word	0x080151b5
 8015194:	080151bd 	.word	0x080151bd
 8015198:	080151c5 	.word	0x080151c5
 801519c:	2300      	movs	r3, #0
 801519e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151a2:	e2ba      	b.n	801571a <UART_SetConfig+0x7ae>
 80151a4:	2304      	movs	r3, #4
 80151a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151aa:	e2b6      	b.n	801571a <UART_SetConfig+0x7ae>
 80151ac:	2308      	movs	r3, #8
 80151ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151b2:	e2b2      	b.n	801571a <UART_SetConfig+0x7ae>
 80151b4:	2310      	movs	r3, #16
 80151b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151ba:	e2ae      	b.n	801571a <UART_SetConfig+0x7ae>
 80151bc:	2320      	movs	r3, #32
 80151be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151c2:	e2aa      	b.n	801571a <UART_SetConfig+0x7ae>
 80151c4:	2340      	movs	r3, #64	; 0x40
 80151c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151ca:	e2a6      	b.n	801571a <UART_SetConfig+0x7ae>
 80151cc:	2380      	movs	r3, #128	; 0x80
 80151ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151d2:	e2a2      	b.n	801571a <UART_SetConfig+0x7ae>
 80151d4:	697b      	ldr	r3, [r7, #20]
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	4a35      	ldr	r2, [pc, #212]	; (80152b0 <UART_SetConfig+0x344>)
 80151da:	4293      	cmp	r3, r2
 80151dc:	d130      	bne.n	8015240 <UART_SetConfig+0x2d4>
 80151de:	4b31      	ldr	r3, [pc, #196]	; (80152a4 <UART_SetConfig+0x338>)
 80151e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80151e2:	f003 0307 	and.w	r3, r3, #7
 80151e6:	2b05      	cmp	r3, #5
 80151e8:	d826      	bhi.n	8015238 <UART_SetConfig+0x2cc>
 80151ea:	a201      	add	r2, pc, #4	; (adr r2, 80151f0 <UART_SetConfig+0x284>)
 80151ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151f0:	08015209 	.word	0x08015209
 80151f4:	08015211 	.word	0x08015211
 80151f8:	08015219 	.word	0x08015219
 80151fc:	08015221 	.word	0x08015221
 8015200:	08015229 	.word	0x08015229
 8015204:	08015231 	.word	0x08015231
 8015208:	2300      	movs	r3, #0
 801520a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801520e:	e284      	b.n	801571a <UART_SetConfig+0x7ae>
 8015210:	2304      	movs	r3, #4
 8015212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015216:	e280      	b.n	801571a <UART_SetConfig+0x7ae>
 8015218:	2308      	movs	r3, #8
 801521a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801521e:	e27c      	b.n	801571a <UART_SetConfig+0x7ae>
 8015220:	2310      	movs	r3, #16
 8015222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015226:	e278      	b.n	801571a <UART_SetConfig+0x7ae>
 8015228:	2320      	movs	r3, #32
 801522a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801522e:	e274      	b.n	801571a <UART_SetConfig+0x7ae>
 8015230:	2340      	movs	r3, #64	; 0x40
 8015232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015236:	e270      	b.n	801571a <UART_SetConfig+0x7ae>
 8015238:	2380      	movs	r3, #128	; 0x80
 801523a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801523e:	e26c      	b.n	801571a <UART_SetConfig+0x7ae>
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	4a1b      	ldr	r2, [pc, #108]	; (80152b4 <UART_SetConfig+0x348>)
 8015246:	4293      	cmp	r3, r2
 8015248:	d142      	bne.n	80152d0 <UART_SetConfig+0x364>
 801524a:	4b16      	ldr	r3, [pc, #88]	; (80152a4 <UART_SetConfig+0x338>)
 801524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801524e:	f003 0307 	and.w	r3, r3, #7
 8015252:	2b05      	cmp	r3, #5
 8015254:	d838      	bhi.n	80152c8 <UART_SetConfig+0x35c>
 8015256:	a201      	add	r2, pc, #4	; (adr r2, 801525c <UART_SetConfig+0x2f0>)
 8015258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801525c:	08015275 	.word	0x08015275
 8015260:	0801527d 	.word	0x0801527d
 8015264:	08015285 	.word	0x08015285
 8015268:	0801528d 	.word	0x0801528d
 801526c:	080152b9 	.word	0x080152b9
 8015270:	080152c1 	.word	0x080152c1
 8015274:	2300      	movs	r3, #0
 8015276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801527a:	e24e      	b.n	801571a <UART_SetConfig+0x7ae>
 801527c:	2304      	movs	r3, #4
 801527e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015282:	e24a      	b.n	801571a <UART_SetConfig+0x7ae>
 8015284:	2308      	movs	r3, #8
 8015286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801528a:	e246      	b.n	801571a <UART_SetConfig+0x7ae>
 801528c:	2310      	movs	r3, #16
 801528e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015292:	e242      	b.n	801571a <UART_SetConfig+0x7ae>
 8015294:	cfff69f3 	.word	0xcfff69f3
 8015298:	58000c00 	.word	0x58000c00
 801529c:	11fff4ff 	.word	0x11fff4ff
 80152a0:	40011000 	.word	0x40011000
 80152a4:	58024400 	.word	0x58024400
 80152a8:	40004400 	.word	0x40004400
 80152ac:	40004800 	.word	0x40004800
 80152b0:	40004c00 	.word	0x40004c00
 80152b4:	40005000 	.word	0x40005000
 80152b8:	2320      	movs	r3, #32
 80152ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152be:	e22c      	b.n	801571a <UART_SetConfig+0x7ae>
 80152c0:	2340      	movs	r3, #64	; 0x40
 80152c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152c6:	e228      	b.n	801571a <UART_SetConfig+0x7ae>
 80152c8:	2380      	movs	r3, #128	; 0x80
 80152ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152ce:	e224      	b.n	801571a <UART_SetConfig+0x7ae>
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	4ab1      	ldr	r2, [pc, #708]	; (801559c <UART_SetConfig+0x630>)
 80152d6:	4293      	cmp	r3, r2
 80152d8:	d176      	bne.n	80153c8 <UART_SetConfig+0x45c>
 80152da:	4bb1      	ldr	r3, [pc, #708]	; (80155a0 <UART_SetConfig+0x634>)
 80152dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80152e2:	2b28      	cmp	r3, #40	; 0x28
 80152e4:	d86c      	bhi.n	80153c0 <UART_SetConfig+0x454>
 80152e6:	a201      	add	r2, pc, #4	; (adr r2, 80152ec <UART_SetConfig+0x380>)
 80152e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152ec:	08015391 	.word	0x08015391
 80152f0:	080153c1 	.word	0x080153c1
 80152f4:	080153c1 	.word	0x080153c1
 80152f8:	080153c1 	.word	0x080153c1
 80152fc:	080153c1 	.word	0x080153c1
 8015300:	080153c1 	.word	0x080153c1
 8015304:	080153c1 	.word	0x080153c1
 8015308:	080153c1 	.word	0x080153c1
 801530c:	08015399 	.word	0x08015399
 8015310:	080153c1 	.word	0x080153c1
 8015314:	080153c1 	.word	0x080153c1
 8015318:	080153c1 	.word	0x080153c1
 801531c:	080153c1 	.word	0x080153c1
 8015320:	080153c1 	.word	0x080153c1
 8015324:	080153c1 	.word	0x080153c1
 8015328:	080153c1 	.word	0x080153c1
 801532c:	080153a1 	.word	0x080153a1
 8015330:	080153c1 	.word	0x080153c1
 8015334:	080153c1 	.word	0x080153c1
 8015338:	080153c1 	.word	0x080153c1
 801533c:	080153c1 	.word	0x080153c1
 8015340:	080153c1 	.word	0x080153c1
 8015344:	080153c1 	.word	0x080153c1
 8015348:	080153c1 	.word	0x080153c1
 801534c:	080153a9 	.word	0x080153a9
 8015350:	080153c1 	.word	0x080153c1
 8015354:	080153c1 	.word	0x080153c1
 8015358:	080153c1 	.word	0x080153c1
 801535c:	080153c1 	.word	0x080153c1
 8015360:	080153c1 	.word	0x080153c1
 8015364:	080153c1 	.word	0x080153c1
 8015368:	080153c1 	.word	0x080153c1
 801536c:	080153b1 	.word	0x080153b1
 8015370:	080153c1 	.word	0x080153c1
 8015374:	080153c1 	.word	0x080153c1
 8015378:	080153c1 	.word	0x080153c1
 801537c:	080153c1 	.word	0x080153c1
 8015380:	080153c1 	.word	0x080153c1
 8015384:	080153c1 	.word	0x080153c1
 8015388:	080153c1 	.word	0x080153c1
 801538c:	080153b9 	.word	0x080153b9
 8015390:	2301      	movs	r3, #1
 8015392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015396:	e1c0      	b.n	801571a <UART_SetConfig+0x7ae>
 8015398:	2304      	movs	r3, #4
 801539a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801539e:	e1bc      	b.n	801571a <UART_SetConfig+0x7ae>
 80153a0:	2308      	movs	r3, #8
 80153a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153a6:	e1b8      	b.n	801571a <UART_SetConfig+0x7ae>
 80153a8:	2310      	movs	r3, #16
 80153aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153ae:	e1b4      	b.n	801571a <UART_SetConfig+0x7ae>
 80153b0:	2320      	movs	r3, #32
 80153b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153b6:	e1b0      	b.n	801571a <UART_SetConfig+0x7ae>
 80153b8:	2340      	movs	r3, #64	; 0x40
 80153ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153be:	e1ac      	b.n	801571a <UART_SetConfig+0x7ae>
 80153c0:	2380      	movs	r3, #128	; 0x80
 80153c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153c6:	e1a8      	b.n	801571a <UART_SetConfig+0x7ae>
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	4a75      	ldr	r2, [pc, #468]	; (80155a4 <UART_SetConfig+0x638>)
 80153ce:	4293      	cmp	r3, r2
 80153d0:	d130      	bne.n	8015434 <UART_SetConfig+0x4c8>
 80153d2:	4b73      	ldr	r3, [pc, #460]	; (80155a0 <UART_SetConfig+0x634>)
 80153d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80153d6:	f003 0307 	and.w	r3, r3, #7
 80153da:	2b05      	cmp	r3, #5
 80153dc:	d826      	bhi.n	801542c <UART_SetConfig+0x4c0>
 80153de:	a201      	add	r2, pc, #4	; (adr r2, 80153e4 <UART_SetConfig+0x478>)
 80153e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153e4:	080153fd 	.word	0x080153fd
 80153e8:	08015405 	.word	0x08015405
 80153ec:	0801540d 	.word	0x0801540d
 80153f0:	08015415 	.word	0x08015415
 80153f4:	0801541d 	.word	0x0801541d
 80153f8:	08015425 	.word	0x08015425
 80153fc:	2300      	movs	r3, #0
 80153fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015402:	e18a      	b.n	801571a <UART_SetConfig+0x7ae>
 8015404:	2304      	movs	r3, #4
 8015406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801540a:	e186      	b.n	801571a <UART_SetConfig+0x7ae>
 801540c:	2308      	movs	r3, #8
 801540e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015412:	e182      	b.n	801571a <UART_SetConfig+0x7ae>
 8015414:	2310      	movs	r3, #16
 8015416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801541a:	e17e      	b.n	801571a <UART_SetConfig+0x7ae>
 801541c:	2320      	movs	r3, #32
 801541e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015422:	e17a      	b.n	801571a <UART_SetConfig+0x7ae>
 8015424:	2340      	movs	r3, #64	; 0x40
 8015426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801542a:	e176      	b.n	801571a <UART_SetConfig+0x7ae>
 801542c:	2380      	movs	r3, #128	; 0x80
 801542e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015432:	e172      	b.n	801571a <UART_SetConfig+0x7ae>
 8015434:	697b      	ldr	r3, [r7, #20]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	4a5b      	ldr	r2, [pc, #364]	; (80155a8 <UART_SetConfig+0x63c>)
 801543a:	4293      	cmp	r3, r2
 801543c:	d130      	bne.n	80154a0 <UART_SetConfig+0x534>
 801543e:	4b58      	ldr	r3, [pc, #352]	; (80155a0 <UART_SetConfig+0x634>)
 8015440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015442:	f003 0307 	and.w	r3, r3, #7
 8015446:	2b05      	cmp	r3, #5
 8015448:	d826      	bhi.n	8015498 <UART_SetConfig+0x52c>
 801544a:	a201      	add	r2, pc, #4	; (adr r2, 8015450 <UART_SetConfig+0x4e4>)
 801544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015450:	08015469 	.word	0x08015469
 8015454:	08015471 	.word	0x08015471
 8015458:	08015479 	.word	0x08015479
 801545c:	08015481 	.word	0x08015481
 8015460:	08015489 	.word	0x08015489
 8015464:	08015491 	.word	0x08015491
 8015468:	2300      	movs	r3, #0
 801546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801546e:	e154      	b.n	801571a <UART_SetConfig+0x7ae>
 8015470:	2304      	movs	r3, #4
 8015472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015476:	e150      	b.n	801571a <UART_SetConfig+0x7ae>
 8015478:	2308      	movs	r3, #8
 801547a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801547e:	e14c      	b.n	801571a <UART_SetConfig+0x7ae>
 8015480:	2310      	movs	r3, #16
 8015482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015486:	e148      	b.n	801571a <UART_SetConfig+0x7ae>
 8015488:	2320      	movs	r3, #32
 801548a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801548e:	e144      	b.n	801571a <UART_SetConfig+0x7ae>
 8015490:	2340      	movs	r3, #64	; 0x40
 8015492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015496:	e140      	b.n	801571a <UART_SetConfig+0x7ae>
 8015498:	2380      	movs	r3, #128	; 0x80
 801549a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801549e:	e13c      	b.n	801571a <UART_SetConfig+0x7ae>
 80154a0:	697b      	ldr	r3, [r7, #20]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	4a41      	ldr	r2, [pc, #260]	; (80155ac <UART_SetConfig+0x640>)
 80154a6:	4293      	cmp	r3, r2
 80154a8:	f040 8082 	bne.w	80155b0 <UART_SetConfig+0x644>
 80154ac:	4b3c      	ldr	r3, [pc, #240]	; (80155a0 <UART_SetConfig+0x634>)
 80154ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80154b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80154b4:	2b28      	cmp	r3, #40	; 0x28
 80154b6:	d86d      	bhi.n	8015594 <UART_SetConfig+0x628>
 80154b8:	a201      	add	r2, pc, #4	; (adr r2, 80154c0 <UART_SetConfig+0x554>)
 80154ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154be:	bf00      	nop
 80154c0:	08015565 	.word	0x08015565
 80154c4:	08015595 	.word	0x08015595
 80154c8:	08015595 	.word	0x08015595
 80154cc:	08015595 	.word	0x08015595
 80154d0:	08015595 	.word	0x08015595
 80154d4:	08015595 	.word	0x08015595
 80154d8:	08015595 	.word	0x08015595
 80154dc:	08015595 	.word	0x08015595
 80154e0:	0801556d 	.word	0x0801556d
 80154e4:	08015595 	.word	0x08015595
 80154e8:	08015595 	.word	0x08015595
 80154ec:	08015595 	.word	0x08015595
 80154f0:	08015595 	.word	0x08015595
 80154f4:	08015595 	.word	0x08015595
 80154f8:	08015595 	.word	0x08015595
 80154fc:	08015595 	.word	0x08015595
 8015500:	08015575 	.word	0x08015575
 8015504:	08015595 	.word	0x08015595
 8015508:	08015595 	.word	0x08015595
 801550c:	08015595 	.word	0x08015595
 8015510:	08015595 	.word	0x08015595
 8015514:	08015595 	.word	0x08015595
 8015518:	08015595 	.word	0x08015595
 801551c:	08015595 	.word	0x08015595
 8015520:	0801557d 	.word	0x0801557d
 8015524:	08015595 	.word	0x08015595
 8015528:	08015595 	.word	0x08015595
 801552c:	08015595 	.word	0x08015595
 8015530:	08015595 	.word	0x08015595
 8015534:	08015595 	.word	0x08015595
 8015538:	08015595 	.word	0x08015595
 801553c:	08015595 	.word	0x08015595
 8015540:	08015585 	.word	0x08015585
 8015544:	08015595 	.word	0x08015595
 8015548:	08015595 	.word	0x08015595
 801554c:	08015595 	.word	0x08015595
 8015550:	08015595 	.word	0x08015595
 8015554:	08015595 	.word	0x08015595
 8015558:	08015595 	.word	0x08015595
 801555c:	08015595 	.word	0x08015595
 8015560:	0801558d 	.word	0x0801558d
 8015564:	2301      	movs	r3, #1
 8015566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801556a:	e0d6      	b.n	801571a <UART_SetConfig+0x7ae>
 801556c:	2304      	movs	r3, #4
 801556e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015572:	e0d2      	b.n	801571a <UART_SetConfig+0x7ae>
 8015574:	2308      	movs	r3, #8
 8015576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801557a:	e0ce      	b.n	801571a <UART_SetConfig+0x7ae>
 801557c:	2310      	movs	r3, #16
 801557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015582:	e0ca      	b.n	801571a <UART_SetConfig+0x7ae>
 8015584:	2320      	movs	r3, #32
 8015586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801558a:	e0c6      	b.n	801571a <UART_SetConfig+0x7ae>
 801558c:	2340      	movs	r3, #64	; 0x40
 801558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015592:	e0c2      	b.n	801571a <UART_SetConfig+0x7ae>
 8015594:	2380      	movs	r3, #128	; 0x80
 8015596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801559a:	e0be      	b.n	801571a <UART_SetConfig+0x7ae>
 801559c:	40011400 	.word	0x40011400
 80155a0:	58024400 	.word	0x58024400
 80155a4:	40007800 	.word	0x40007800
 80155a8:	40007c00 	.word	0x40007c00
 80155ac:	40011800 	.word	0x40011800
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	4aad      	ldr	r2, [pc, #692]	; (801586c <UART_SetConfig+0x900>)
 80155b6:	4293      	cmp	r3, r2
 80155b8:	d176      	bne.n	80156a8 <UART_SetConfig+0x73c>
 80155ba:	4bad      	ldr	r3, [pc, #692]	; (8015870 <UART_SetConfig+0x904>)
 80155bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80155c2:	2b28      	cmp	r3, #40	; 0x28
 80155c4:	d86c      	bhi.n	80156a0 <UART_SetConfig+0x734>
 80155c6:	a201      	add	r2, pc, #4	; (adr r2, 80155cc <UART_SetConfig+0x660>)
 80155c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155cc:	08015671 	.word	0x08015671
 80155d0:	080156a1 	.word	0x080156a1
 80155d4:	080156a1 	.word	0x080156a1
 80155d8:	080156a1 	.word	0x080156a1
 80155dc:	080156a1 	.word	0x080156a1
 80155e0:	080156a1 	.word	0x080156a1
 80155e4:	080156a1 	.word	0x080156a1
 80155e8:	080156a1 	.word	0x080156a1
 80155ec:	08015679 	.word	0x08015679
 80155f0:	080156a1 	.word	0x080156a1
 80155f4:	080156a1 	.word	0x080156a1
 80155f8:	080156a1 	.word	0x080156a1
 80155fc:	080156a1 	.word	0x080156a1
 8015600:	080156a1 	.word	0x080156a1
 8015604:	080156a1 	.word	0x080156a1
 8015608:	080156a1 	.word	0x080156a1
 801560c:	08015681 	.word	0x08015681
 8015610:	080156a1 	.word	0x080156a1
 8015614:	080156a1 	.word	0x080156a1
 8015618:	080156a1 	.word	0x080156a1
 801561c:	080156a1 	.word	0x080156a1
 8015620:	080156a1 	.word	0x080156a1
 8015624:	080156a1 	.word	0x080156a1
 8015628:	080156a1 	.word	0x080156a1
 801562c:	08015689 	.word	0x08015689
 8015630:	080156a1 	.word	0x080156a1
 8015634:	080156a1 	.word	0x080156a1
 8015638:	080156a1 	.word	0x080156a1
 801563c:	080156a1 	.word	0x080156a1
 8015640:	080156a1 	.word	0x080156a1
 8015644:	080156a1 	.word	0x080156a1
 8015648:	080156a1 	.word	0x080156a1
 801564c:	08015691 	.word	0x08015691
 8015650:	080156a1 	.word	0x080156a1
 8015654:	080156a1 	.word	0x080156a1
 8015658:	080156a1 	.word	0x080156a1
 801565c:	080156a1 	.word	0x080156a1
 8015660:	080156a1 	.word	0x080156a1
 8015664:	080156a1 	.word	0x080156a1
 8015668:	080156a1 	.word	0x080156a1
 801566c:	08015699 	.word	0x08015699
 8015670:	2301      	movs	r3, #1
 8015672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015676:	e050      	b.n	801571a <UART_SetConfig+0x7ae>
 8015678:	2304      	movs	r3, #4
 801567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801567e:	e04c      	b.n	801571a <UART_SetConfig+0x7ae>
 8015680:	2308      	movs	r3, #8
 8015682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015686:	e048      	b.n	801571a <UART_SetConfig+0x7ae>
 8015688:	2310      	movs	r3, #16
 801568a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801568e:	e044      	b.n	801571a <UART_SetConfig+0x7ae>
 8015690:	2320      	movs	r3, #32
 8015692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015696:	e040      	b.n	801571a <UART_SetConfig+0x7ae>
 8015698:	2340      	movs	r3, #64	; 0x40
 801569a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801569e:	e03c      	b.n	801571a <UART_SetConfig+0x7ae>
 80156a0:	2380      	movs	r3, #128	; 0x80
 80156a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156a6:	e038      	b.n	801571a <UART_SetConfig+0x7ae>
 80156a8:	697b      	ldr	r3, [r7, #20]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	4a71      	ldr	r2, [pc, #452]	; (8015874 <UART_SetConfig+0x908>)
 80156ae:	4293      	cmp	r3, r2
 80156b0:	d130      	bne.n	8015714 <UART_SetConfig+0x7a8>
 80156b2:	4b6f      	ldr	r3, [pc, #444]	; (8015870 <UART_SetConfig+0x904>)
 80156b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156b6:	f003 0307 	and.w	r3, r3, #7
 80156ba:	2b05      	cmp	r3, #5
 80156bc:	d826      	bhi.n	801570c <UART_SetConfig+0x7a0>
 80156be:	a201      	add	r2, pc, #4	; (adr r2, 80156c4 <UART_SetConfig+0x758>)
 80156c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156c4:	080156dd 	.word	0x080156dd
 80156c8:	080156e5 	.word	0x080156e5
 80156cc:	080156ed 	.word	0x080156ed
 80156d0:	080156f5 	.word	0x080156f5
 80156d4:	080156fd 	.word	0x080156fd
 80156d8:	08015705 	.word	0x08015705
 80156dc:	2302      	movs	r3, #2
 80156de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156e2:	e01a      	b.n	801571a <UART_SetConfig+0x7ae>
 80156e4:	2304      	movs	r3, #4
 80156e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156ea:	e016      	b.n	801571a <UART_SetConfig+0x7ae>
 80156ec:	2308      	movs	r3, #8
 80156ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156f2:	e012      	b.n	801571a <UART_SetConfig+0x7ae>
 80156f4:	2310      	movs	r3, #16
 80156f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156fa:	e00e      	b.n	801571a <UART_SetConfig+0x7ae>
 80156fc:	2320      	movs	r3, #32
 80156fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015702:	e00a      	b.n	801571a <UART_SetConfig+0x7ae>
 8015704:	2340      	movs	r3, #64	; 0x40
 8015706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801570a:	e006      	b.n	801571a <UART_SetConfig+0x7ae>
 801570c:	2380      	movs	r3, #128	; 0x80
 801570e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015712:	e002      	b.n	801571a <UART_SetConfig+0x7ae>
 8015714:	2380      	movs	r3, #128	; 0x80
 8015716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	4a55      	ldr	r2, [pc, #340]	; (8015874 <UART_SetConfig+0x908>)
 8015720:	4293      	cmp	r3, r2
 8015722:	f040 80f8 	bne.w	8015916 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015726:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801572a:	2b20      	cmp	r3, #32
 801572c:	dc46      	bgt.n	80157bc <UART_SetConfig+0x850>
 801572e:	2b02      	cmp	r3, #2
 8015730:	db75      	blt.n	801581e <UART_SetConfig+0x8b2>
 8015732:	3b02      	subs	r3, #2
 8015734:	2b1e      	cmp	r3, #30
 8015736:	d872      	bhi.n	801581e <UART_SetConfig+0x8b2>
 8015738:	a201      	add	r2, pc, #4	; (adr r2, 8015740 <UART_SetConfig+0x7d4>)
 801573a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801573e:	bf00      	nop
 8015740:	080157c3 	.word	0x080157c3
 8015744:	0801581f 	.word	0x0801581f
 8015748:	080157cb 	.word	0x080157cb
 801574c:	0801581f 	.word	0x0801581f
 8015750:	0801581f 	.word	0x0801581f
 8015754:	0801581f 	.word	0x0801581f
 8015758:	080157db 	.word	0x080157db
 801575c:	0801581f 	.word	0x0801581f
 8015760:	0801581f 	.word	0x0801581f
 8015764:	0801581f 	.word	0x0801581f
 8015768:	0801581f 	.word	0x0801581f
 801576c:	0801581f 	.word	0x0801581f
 8015770:	0801581f 	.word	0x0801581f
 8015774:	0801581f 	.word	0x0801581f
 8015778:	080157eb 	.word	0x080157eb
 801577c:	0801581f 	.word	0x0801581f
 8015780:	0801581f 	.word	0x0801581f
 8015784:	0801581f 	.word	0x0801581f
 8015788:	0801581f 	.word	0x0801581f
 801578c:	0801581f 	.word	0x0801581f
 8015790:	0801581f 	.word	0x0801581f
 8015794:	0801581f 	.word	0x0801581f
 8015798:	0801581f 	.word	0x0801581f
 801579c:	0801581f 	.word	0x0801581f
 80157a0:	0801581f 	.word	0x0801581f
 80157a4:	0801581f 	.word	0x0801581f
 80157a8:	0801581f 	.word	0x0801581f
 80157ac:	0801581f 	.word	0x0801581f
 80157b0:	0801581f 	.word	0x0801581f
 80157b4:	0801581f 	.word	0x0801581f
 80157b8:	08015811 	.word	0x08015811
 80157bc:	2b40      	cmp	r3, #64	; 0x40
 80157be:	d02a      	beq.n	8015816 <UART_SetConfig+0x8aa>
 80157c0:	e02d      	b.n	801581e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80157c2:	f7fb f933 	bl	8010a2c <HAL_RCCEx_GetD3PCLK1Freq>
 80157c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80157c8:	e02f      	b.n	801582a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80157ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80157ce:	4618      	mov	r0, r3
 80157d0:	f7fb f942 	bl	8010a58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80157d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80157d8:	e027      	b.n	801582a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80157da:	f107 0318 	add.w	r3, r7, #24
 80157de:	4618      	mov	r0, r3
 80157e0:	f7fb fa8e 	bl	8010d00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80157e4:	69fb      	ldr	r3, [r7, #28]
 80157e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80157e8:	e01f      	b.n	801582a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80157ea:	4b21      	ldr	r3, [pc, #132]	; (8015870 <UART_SetConfig+0x904>)
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	f003 0320 	and.w	r3, r3, #32
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d009      	beq.n	801580a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80157f6:	4b1e      	ldr	r3, [pc, #120]	; (8015870 <UART_SetConfig+0x904>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	08db      	lsrs	r3, r3, #3
 80157fc:	f003 0303 	and.w	r3, r3, #3
 8015800:	4a1d      	ldr	r2, [pc, #116]	; (8015878 <UART_SetConfig+0x90c>)
 8015802:	fa22 f303 	lsr.w	r3, r2, r3
 8015806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015808:	e00f      	b.n	801582a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801580a:	4b1b      	ldr	r3, [pc, #108]	; (8015878 <UART_SetConfig+0x90c>)
 801580c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801580e:	e00c      	b.n	801582a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015810:	4b1a      	ldr	r3, [pc, #104]	; (801587c <UART_SetConfig+0x910>)
 8015812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015814:	e009      	b.n	801582a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801581a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801581c:	e005      	b.n	801582a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801581e:	2300      	movs	r3, #0
 8015820:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015822:	2301      	movs	r3, #1
 8015824:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015828:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801582a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801582c:	2b00      	cmp	r3, #0
 801582e:	f000 81ee 	beq.w	8015c0e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015836:	4a12      	ldr	r2, [pc, #72]	; (8015880 <UART_SetConfig+0x914>)
 8015838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801583c:	461a      	mov	r2, r3
 801583e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015840:	fbb3 f3f2 	udiv	r3, r3, r2
 8015844:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015846:	697b      	ldr	r3, [r7, #20]
 8015848:	685a      	ldr	r2, [r3, #4]
 801584a:	4613      	mov	r3, r2
 801584c:	005b      	lsls	r3, r3, #1
 801584e:	4413      	add	r3, r2
 8015850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015852:	429a      	cmp	r2, r3
 8015854:	d305      	bcc.n	8015862 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015856:	697b      	ldr	r3, [r7, #20]
 8015858:	685b      	ldr	r3, [r3, #4]
 801585a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801585c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801585e:	429a      	cmp	r2, r3
 8015860:	d910      	bls.n	8015884 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8015862:	2301      	movs	r3, #1
 8015864:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015868:	e1d1      	b.n	8015c0e <UART_SetConfig+0xca2>
 801586a:	bf00      	nop
 801586c:	40011c00 	.word	0x40011c00
 8015870:	58024400 	.word	0x58024400
 8015874:	58000c00 	.word	0x58000c00
 8015878:	03d09000 	.word	0x03d09000
 801587c:	003d0900 	.word	0x003d0900
 8015880:	080182e8 	.word	0x080182e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015886:	2200      	movs	r2, #0
 8015888:	60bb      	str	r3, [r7, #8]
 801588a:	60fa      	str	r2, [r7, #12]
 801588c:	697b      	ldr	r3, [r7, #20]
 801588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015890:	4ac0      	ldr	r2, [pc, #768]	; (8015b94 <UART_SetConfig+0xc28>)
 8015892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015896:	b29b      	uxth	r3, r3
 8015898:	2200      	movs	r2, #0
 801589a:	603b      	str	r3, [r7, #0]
 801589c:	607a      	str	r2, [r7, #4]
 801589e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80158a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80158a6:	f7ea fd33 	bl	8000310 <__aeabi_uldivmod>
 80158aa:	4602      	mov	r2, r0
 80158ac:	460b      	mov	r3, r1
 80158ae:	4610      	mov	r0, r2
 80158b0:	4619      	mov	r1, r3
 80158b2:	f04f 0200 	mov.w	r2, #0
 80158b6:	f04f 0300 	mov.w	r3, #0
 80158ba:	020b      	lsls	r3, r1, #8
 80158bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80158c0:	0202      	lsls	r2, r0, #8
 80158c2:	6979      	ldr	r1, [r7, #20]
 80158c4:	6849      	ldr	r1, [r1, #4]
 80158c6:	0849      	lsrs	r1, r1, #1
 80158c8:	2000      	movs	r0, #0
 80158ca:	460c      	mov	r4, r1
 80158cc:	4605      	mov	r5, r0
 80158ce:	eb12 0804 	adds.w	r8, r2, r4
 80158d2:	eb43 0905 	adc.w	r9, r3, r5
 80158d6:	697b      	ldr	r3, [r7, #20]
 80158d8:	685b      	ldr	r3, [r3, #4]
 80158da:	2200      	movs	r2, #0
 80158dc:	469a      	mov	sl, r3
 80158de:	4693      	mov	fp, r2
 80158e0:	4652      	mov	r2, sl
 80158e2:	465b      	mov	r3, fp
 80158e4:	4640      	mov	r0, r8
 80158e6:	4649      	mov	r1, r9
 80158e8:	f7ea fd12 	bl	8000310 <__aeabi_uldivmod>
 80158ec:	4602      	mov	r2, r0
 80158ee:	460b      	mov	r3, r1
 80158f0:	4613      	mov	r3, r2
 80158f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80158f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80158fa:	d308      	bcc.n	801590e <UART_SetConfig+0x9a2>
 80158fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015902:	d204      	bcs.n	801590e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8015904:	697b      	ldr	r3, [r7, #20]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801590a:	60da      	str	r2, [r3, #12]
 801590c:	e17f      	b.n	8015c0e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801590e:	2301      	movs	r3, #1
 8015910:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015914:	e17b      	b.n	8015c0e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	69db      	ldr	r3, [r3, #28]
 801591a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801591e:	f040 80bd 	bne.w	8015a9c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8015922:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015926:	2b20      	cmp	r3, #32
 8015928:	dc48      	bgt.n	80159bc <UART_SetConfig+0xa50>
 801592a:	2b00      	cmp	r3, #0
 801592c:	db7b      	blt.n	8015a26 <UART_SetConfig+0xaba>
 801592e:	2b20      	cmp	r3, #32
 8015930:	d879      	bhi.n	8015a26 <UART_SetConfig+0xaba>
 8015932:	a201      	add	r2, pc, #4	; (adr r2, 8015938 <UART_SetConfig+0x9cc>)
 8015934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015938:	080159c3 	.word	0x080159c3
 801593c:	080159cb 	.word	0x080159cb
 8015940:	08015a27 	.word	0x08015a27
 8015944:	08015a27 	.word	0x08015a27
 8015948:	080159d3 	.word	0x080159d3
 801594c:	08015a27 	.word	0x08015a27
 8015950:	08015a27 	.word	0x08015a27
 8015954:	08015a27 	.word	0x08015a27
 8015958:	080159e3 	.word	0x080159e3
 801595c:	08015a27 	.word	0x08015a27
 8015960:	08015a27 	.word	0x08015a27
 8015964:	08015a27 	.word	0x08015a27
 8015968:	08015a27 	.word	0x08015a27
 801596c:	08015a27 	.word	0x08015a27
 8015970:	08015a27 	.word	0x08015a27
 8015974:	08015a27 	.word	0x08015a27
 8015978:	080159f3 	.word	0x080159f3
 801597c:	08015a27 	.word	0x08015a27
 8015980:	08015a27 	.word	0x08015a27
 8015984:	08015a27 	.word	0x08015a27
 8015988:	08015a27 	.word	0x08015a27
 801598c:	08015a27 	.word	0x08015a27
 8015990:	08015a27 	.word	0x08015a27
 8015994:	08015a27 	.word	0x08015a27
 8015998:	08015a27 	.word	0x08015a27
 801599c:	08015a27 	.word	0x08015a27
 80159a0:	08015a27 	.word	0x08015a27
 80159a4:	08015a27 	.word	0x08015a27
 80159a8:	08015a27 	.word	0x08015a27
 80159ac:	08015a27 	.word	0x08015a27
 80159b0:	08015a27 	.word	0x08015a27
 80159b4:	08015a27 	.word	0x08015a27
 80159b8:	08015a19 	.word	0x08015a19
 80159bc:	2b40      	cmp	r3, #64	; 0x40
 80159be:	d02e      	beq.n	8015a1e <UART_SetConfig+0xab2>
 80159c0:	e031      	b.n	8015a26 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80159c2:	f7f9 fce7 	bl	800f394 <HAL_RCC_GetPCLK1Freq>
 80159c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80159c8:	e033      	b.n	8015a32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80159ca:	f7f9 fcf9 	bl	800f3c0 <HAL_RCC_GetPCLK2Freq>
 80159ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80159d0:	e02f      	b.n	8015a32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80159d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80159d6:	4618      	mov	r0, r3
 80159d8:	f7fb f83e 	bl	8010a58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80159dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80159e0:	e027      	b.n	8015a32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80159e2:	f107 0318 	add.w	r3, r7, #24
 80159e6:	4618      	mov	r0, r3
 80159e8:	f7fb f98a 	bl	8010d00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80159ec:	69fb      	ldr	r3, [r7, #28]
 80159ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80159f0:	e01f      	b.n	8015a32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80159f2:	4b69      	ldr	r3, [pc, #420]	; (8015b98 <UART_SetConfig+0xc2c>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	f003 0320 	and.w	r3, r3, #32
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d009      	beq.n	8015a12 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80159fe:	4b66      	ldr	r3, [pc, #408]	; (8015b98 <UART_SetConfig+0xc2c>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	08db      	lsrs	r3, r3, #3
 8015a04:	f003 0303 	and.w	r3, r3, #3
 8015a08:	4a64      	ldr	r2, [pc, #400]	; (8015b9c <UART_SetConfig+0xc30>)
 8015a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8015a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015a10:	e00f      	b.n	8015a32 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8015a12:	4b62      	ldr	r3, [pc, #392]	; (8015b9c <UART_SetConfig+0xc30>)
 8015a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015a16:	e00c      	b.n	8015a32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015a18:	4b61      	ldr	r3, [pc, #388]	; (8015ba0 <UART_SetConfig+0xc34>)
 8015a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015a1c:	e009      	b.n	8015a32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015a24:	e005      	b.n	8015a32 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8015a26:	2300      	movs	r3, #0
 8015a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015a2a:	2301      	movs	r3, #1
 8015a2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015a30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	f000 80ea 	beq.w	8015c0e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015a3a:	697b      	ldr	r3, [r7, #20]
 8015a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a3e:	4a55      	ldr	r2, [pc, #340]	; (8015b94 <UART_SetConfig+0xc28>)
 8015a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015a44:	461a      	mov	r2, r3
 8015a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8015a4c:	005a      	lsls	r2, r3, #1
 8015a4e:	697b      	ldr	r3, [r7, #20]
 8015a50:	685b      	ldr	r3, [r3, #4]
 8015a52:	085b      	lsrs	r3, r3, #1
 8015a54:	441a      	add	r2, r3
 8015a56:	697b      	ldr	r3, [r7, #20]
 8015a58:	685b      	ldr	r3, [r3, #4]
 8015a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a62:	2b0f      	cmp	r3, #15
 8015a64:	d916      	bls.n	8015a94 <UART_SetConfig+0xb28>
 8015a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a6c:	d212      	bcs.n	8015a94 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a70:	b29b      	uxth	r3, r3
 8015a72:	f023 030f 	bic.w	r3, r3, #15
 8015a76:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a7a:	085b      	lsrs	r3, r3, #1
 8015a7c:	b29b      	uxth	r3, r3
 8015a7e:	f003 0307 	and.w	r3, r3, #7
 8015a82:	b29a      	uxth	r2, r3
 8015a84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015a86:	4313      	orrs	r3, r2
 8015a88:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8015a8a:	697b      	ldr	r3, [r7, #20]
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015a90:	60da      	str	r2, [r3, #12]
 8015a92:	e0bc      	b.n	8015c0e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8015a94:	2301      	movs	r3, #1
 8015a96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015a9a:	e0b8      	b.n	8015c0e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015a9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015aa0:	2b20      	cmp	r3, #32
 8015aa2:	dc4b      	bgt.n	8015b3c <UART_SetConfig+0xbd0>
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	f2c0 8087 	blt.w	8015bb8 <UART_SetConfig+0xc4c>
 8015aaa:	2b20      	cmp	r3, #32
 8015aac:	f200 8084 	bhi.w	8015bb8 <UART_SetConfig+0xc4c>
 8015ab0:	a201      	add	r2, pc, #4	; (adr r2, 8015ab8 <UART_SetConfig+0xb4c>)
 8015ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ab6:	bf00      	nop
 8015ab8:	08015b43 	.word	0x08015b43
 8015abc:	08015b4b 	.word	0x08015b4b
 8015ac0:	08015bb9 	.word	0x08015bb9
 8015ac4:	08015bb9 	.word	0x08015bb9
 8015ac8:	08015b53 	.word	0x08015b53
 8015acc:	08015bb9 	.word	0x08015bb9
 8015ad0:	08015bb9 	.word	0x08015bb9
 8015ad4:	08015bb9 	.word	0x08015bb9
 8015ad8:	08015b63 	.word	0x08015b63
 8015adc:	08015bb9 	.word	0x08015bb9
 8015ae0:	08015bb9 	.word	0x08015bb9
 8015ae4:	08015bb9 	.word	0x08015bb9
 8015ae8:	08015bb9 	.word	0x08015bb9
 8015aec:	08015bb9 	.word	0x08015bb9
 8015af0:	08015bb9 	.word	0x08015bb9
 8015af4:	08015bb9 	.word	0x08015bb9
 8015af8:	08015b73 	.word	0x08015b73
 8015afc:	08015bb9 	.word	0x08015bb9
 8015b00:	08015bb9 	.word	0x08015bb9
 8015b04:	08015bb9 	.word	0x08015bb9
 8015b08:	08015bb9 	.word	0x08015bb9
 8015b0c:	08015bb9 	.word	0x08015bb9
 8015b10:	08015bb9 	.word	0x08015bb9
 8015b14:	08015bb9 	.word	0x08015bb9
 8015b18:	08015bb9 	.word	0x08015bb9
 8015b1c:	08015bb9 	.word	0x08015bb9
 8015b20:	08015bb9 	.word	0x08015bb9
 8015b24:	08015bb9 	.word	0x08015bb9
 8015b28:	08015bb9 	.word	0x08015bb9
 8015b2c:	08015bb9 	.word	0x08015bb9
 8015b30:	08015bb9 	.word	0x08015bb9
 8015b34:	08015bb9 	.word	0x08015bb9
 8015b38:	08015bab 	.word	0x08015bab
 8015b3c:	2b40      	cmp	r3, #64	; 0x40
 8015b3e:	d037      	beq.n	8015bb0 <UART_SetConfig+0xc44>
 8015b40:	e03a      	b.n	8015bb8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015b42:	f7f9 fc27 	bl	800f394 <HAL_RCC_GetPCLK1Freq>
 8015b46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015b48:	e03c      	b.n	8015bc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015b4a:	f7f9 fc39 	bl	800f3c0 <HAL_RCC_GetPCLK2Freq>
 8015b4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015b50:	e038      	b.n	8015bc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015b56:	4618      	mov	r0, r3
 8015b58:	f7fa ff7e 	bl	8010a58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b60:	e030      	b.n	8015bc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015b62:	f107 0318 	add.w	r3, r7, #24
 8015b66:	4618      	mov	r0, r3
 8015b68:	f7fb f8ca 	bl	8010d00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015b6c:	69fb      	ldr	r3, [r7, #28]
 8015b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b70:	e028      	b.n	8015bc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015b72:	4b09      	ldr	r3, [pc, #36]	; (8015b98 <UART_SetConfig+0xc2c>)
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	f003 0320 	and.w	r3, r3, #32
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d012      	beq.n	8015ba4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015b7e:	4b06      	ldr	r3, [pc, #24]	; (8015b98 <UART_SetConfig+0xc2c>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	08db      	lsrs	r3, r3, #3
 8015b84:	f003 0303 	and.w	r3, r3, #3
 8015b88:	4a04      	ldr	r2, [pc, #16]	; (8015b9c <UART_SetConfig+0xc30>)
 8015b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8015b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015b90:	e018      	b.n	8015bc4 <UART_SetConfig+0xc58>
 8015b92:	bf00      	nop
 8015b94:	080182e8 	.word	0x080182e8
 8015b98:	58024400 	.word	0x58024400
 8015b9c:	03d09000 	.word	0x03d09000
 8015ba0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8015ba4:	4b24      	ldr	r3, [pc, #144]	; (8015c38 <UART_SetConfig+0xccc>)
 8015ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ba8:	e00c      	b.n	8015bc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015baa:	4b24      	ldr	r3, [pc, #144]	; (8015c3c <UART_SetConfig+0xcd0>)
 8015bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015bae:	e009      	b.n	8015bc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015bb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015bb6:	e005      	b.n	8015bc4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015bc2:	bf00      	nop
    }

    if (pclk != 0U)
 8015bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d021      	beq.n	8015c0e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015bca:	697b      	ldr	r3, [r7, #20]
 8015bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bce:	4a1c      	ldr	r2, [pc, #112]	; (8015c40 <UART_SetConfig+0xcd4>)
 8015bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015bd4:	461a      	mov	r2, r3
 8015bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bd8:	fbb3 f2f2 	udiv	r2, r3, r2
 8015bdc:	697b      	ldr	r3, [r7, #20]
 8015bde:	685b      	ldr	r3, [r3, #4]
 8015be0:	085b      	lsrs	r3, r3, #1
 8015be2:	441a      	add	r2, r3
 8015be4:	697b      	ldr	r3, [r7, #20]
 8015be6:	685b      	ldr	r3, [r3, #4]
 8015be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8015bec:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bf0:	2b0f      	cmp	r3, #15
 8015bf2:	d909      	bls.n	8015c08 <UART_SetConfig+0xc9c>
 8015bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015bfa:	d205      	bcs.n	8015c08 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bfe:	b29a      	uxth	r2, r3
 8015c00:	697b      	ldr	r3, [r7, #20]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	60da      	str	r2, [r3, #12]
 8015c06:	e002      	b.n	8015c0e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8015c08:	2301      	movs	r3, #1
 8015c0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015c0e:	697b      	ldr	r3, [r7, #20]
 8015c10:	2201      	movs	r2, #1
 8015c12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015c16:	697b      	ldr	r3, [r7, #20]
 8015c18:	2201      	movs	r2, #1
 8015c1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015c1e:	697b      	ldr	r3, [r7, #20]
 8015c20:	2200      	movs	r2, #0
 8015c22:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8015c24:	697b      	ldr	r3, [r7, #20]
 8015c26:	2200      	movs	r2, #0
 8015c28:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8015c2a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015c2e:	4618      	mov	r0, r3
 8015c30:	3748      	adds	r7, #72	; 0x48
 8015c32:	46bd      	mov	sp, r7
 8015c34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015c38:	03d09000 	.word	0x03d09000
 8015c3c:	003d0900 	.word	0x003d0900
 8015c40:	080182e8 	.word	0x080182e8

08015c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015c44:	b480      	push	{r7}
 8015c46:	b083      	sub	sp, #12
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c50:	f003 0301 	and.w	r3, r3, #1
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d00a      	beq.n	8015c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	685b      	ldr	r3, [r3, #4]
 8015c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	430a      	orrs	r2, r1
 8015c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c72:	f003 0302 	and.w	r3, r3, #2
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d00a      	beq.n	8015c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	685b      	ldr	r3, [r3, #4]
 8015c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	430a      	orrs	r2, r1
 8015c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c94:	f003 0304 	and.w	r3, r3, #4
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d00a      	beq.n	8015cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	685b      	ldr	r3, [r3, #4]
 8015ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	430a      	orrs	r2, r1
 8015cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cb6:	f003 0308 	and.w	r3, r3, #8
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d00a      	beq.n	8015cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	685b      	ldr	r3, [r3, #4]
 8015cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	430a      	orrs	r2, r1
 8015cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cd8:	f003 0310 	and.w	r3, r3, #16
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d00a      	beq.n	8015cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	689b      	ldr	r3, [r3, #8]
 8015ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	430a      	orrs	r2, r1
 8015cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cfa:	f003 0320 	and.w	r3, r3, #32
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d00a      	beq.n	8015d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	689b      	ldr	r3, [r3, #8]
 8015d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	430a      	orrs	r2, r1
 8015d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d01a      	beq.n	8015d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	685b      	ldr	r3, [r3, #4]
 8015d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	430a      	orrs	r2, r1
 8015d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015d42:	d10a      	bne.n	8015d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	685b      	ldr	r3, [r3, #4]
 8015d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	430a      	orrs	r2, r1
 8015d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d00a      	beq.n	8015d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	685b      	ldr	r3, [r3, #4]
 8015d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	430a      	orrs	r2, r1
 8015d7a:	605a      	str	r2, [r3, #4]
  }
}
 8015d7c:	bf00      	nop
 8015d7e:	370c      	adds	r7, #12
 8015d80:	46bd      	mov	sp, r7
 8015d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d86:	4770      	bx	lr

08015d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b086      	sub	sp, #24
 8015d8c:	af02      	add	r7, sp, #8
 8015d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2200      	movs	r2, #0
 8015d94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015d98:	f7f1 fb32 	bl	8007400 <HAL_GetTick>
 8015d9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	f003 0308 	and.w	r3, r3, #8
 8015da8:	2b08      	cmp	r3, #8
 8015daa:	d10e      	bne.n	8015dca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015db0:	9300      	str	r3, [sp, #0]
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	2200      	movs	r2, #0
 8015db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015dba:	6878      	ldr	r0, [r7, #4]
 8015dbc:	f000 f82f 	bl	8015e1e <UART_WaitOnFlagUntilTimeout>
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d001      	beq.n	8015dca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015dc6:	2303      	movs	r3, #3
 8015dc8:	e025      	b.n	8015e16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	f003 0304 	and.w	r3, r3, #4
 8015dd4:	2b04      	cmp	r3, #4
 8015dd6:	d10e      	bne.n	8015df6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015ddc:	9300      	str	r3, [sp, #0]
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	2200      	movs	r2, #0
 8015de2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015de6:	6878      	ldr	r0, [r7, #4]
 8015de8:	f000 f819 	bl	8015e1e <UART_WaitOnFlagUntilTimeout>
 8015dec:	4603      	mov	r3, r0
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d001      	beq.n	8015df6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015df2:	2303      	movs	r3, #3
 8015df4:	e00f      	b.n	8015e16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2220      	movs	r2, #32
 8015dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	2220      	movs	r2, #32
 8015e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	2200      	movs	r2, #0
 8015e0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	2200      	movs	r2, #0
 8015e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015e14:	2300      	movs	r3, #0
}
 8015e16:	4618      	mov	r0, r3
 8015e18:	3710      	adds	r7, #16
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}

08015e1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015e1e:	b580      	push	{r7, lr}
 8015e20:	b09c      	sub	sp, #112	; 0x70
 8015e22:	af00      	add	r7, sp, #0
 8015e24:	60f8      	str	r0, [r7, #12]
 8015e26:	60b9      	str	r1, [r7, #8]
 8015e28:	603b      	str	r3, [r7, #0]
 8015e2a:	4613      	mov	r3, r2
 8015e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015e2e:	e0a9      	b.n	8015f84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e36:	f000 80a5 	beq.w	8015f84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015e3a:	f7f1 fae1 	bl	8007400 <HAL_GetTick>
 8015e3e:	4602      	mov	r2, r0
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	1ad3      	subs	r3, r2, r3
 8015e44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015e46:	429a      	cmp	r2, r3
 8015e48:	d302      	bcc.n	8015e50 <UART_WaitOnFlagUntilTimeout+0x32>
 8015e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d140      	bne.n	8015ed2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e58:	e853 3f00 	ldrex	r3, [r3]
 8015e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8015e64:	667b      	str	r3, [r7, #100]	; 0x64
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	461a      	mov	r2, r3
 8015e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015e70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015e74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015e76:	e841 2300 	strex	r3, r2, [r1]
 8015e7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d1e6      	bne.n	8015e50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	3308      	adds	r3, #8
 8015e88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e8c:	e853 3f00 	ldrex	r3, [r3]
 8015e90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e94:	f023 0301 	bic.w	r3, r3, #1
 8015e98:	663b      	str	r3, [r7, #96]	; 0x60
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	3308      	adds	r3, #8
 8015ea0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015ea2:	64ba      	str	r2, [r7, #72]	; 0x48
 8015ea4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ea6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015eaa:	e841 2300 	strex	r3, r2, [r1]
 8015eae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d1e5      	bne.n	8015e82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	2220      	movs	r2, #32
 8015eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	2220      	movs	r2, #32
 8015ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	2200      	movs	r2, #0
 8015eca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8015ece:	2303      	movs	r3, #3
 8015ed0:	e069      	b.n	8015fa6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	f003 0304 	and.w	r3, r3, #4
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d051      	beq.n	8015f84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	69db      	ldr	r3, [r3, #28]
 8015ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015eee:	d149      	bne.n	8015f84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015ef8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f02:	e853 3f00 	ldrex	r3, [r3]
 8015f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8015f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	461a      	mov	r2, r3
 8015f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f18:	637b      	str	r3, [r7, #52]	; 0x34
 8015f1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015f20:	e841 2300 	strex	r3, r2, [r1]
 8015f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d1e6      	bne.n	8015efa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	3308      	adds	r3, #8
 8015f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f34:	697b      	ldr	r3, [r7, #20]
 8015f36:	e853 3f00 	ldrex	r3, [r3]
 8015f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8015f3c:	693b      	ldr	r3, [r7, #16]
 8015f3e:	f023 0301 	bic.w	r3, r3, #1
 8015f42:	66bb      	str	r3, [r7, #104]	; 0x68
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	3308      	adds	r3, #8
 8015f4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015f4c:	623a      	str	r2, [r7, #32]
 8015f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f50:	69f9      	ldr	r1, [r7, #28]
 8015f52:	6a3a      	ldr	r2, [r7, #32]
 8015f54:	e841 2300 	strex	r3, r2, [r1]
 8015f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8015f5a:	69bb      	ldr	r3, [r7, #24]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d1e5      	bne.n	8015f2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	2220      	movs	r2, #32
 8015f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	2220      	movs	r2, #32
 8015f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	2220      	movs	r2, #32
 8015f74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8015f80:	2303      	movs	r3, #3
 8015f82:	e010      	b.n	8015fa6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	69da      	ldr	r2, [r3, #28]
 8015f8a:	68bb      	ldr	r3, [r7, #8]
 8015f8c:	4013      	ands	r3, r2
 8015f8e:	68ba      	ldr	r2, [r7, #8]
 8015f90:	429a      	cmp	r2, r3
 8015f92:	bf0c      	ite	eq
 8015f94:	2301      	moveq	r3, #1
 8015f96:	2300      	movne	r3, #0
 8015f98:	b2db      	uxtb	r3, r3
 8015f9a:	461a      	mov	r2, r3
 8015f9c:	79fb      	ldrb	r3, [r7, #7]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	f43f af46 	beq.w	8015e30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015fa4:	2300      	movs	r3, #0
}
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	3770      	adds	r7, #112	; 0x70
 8015faa:	46bd      	mov	sp, r7
 8015fac:	bd80      	pop	{r7, pc}
	...

08015fb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015fb0:	b480      	push	{r7}
 8015fb2:	b0a3      	sub	sp, #140	; 0x8c
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	60f8      	str	r0, [r7, #12]
 8015fb8:	60b9      	str	r1, [r7, #8]
 8015fba:	4613      	mov	r3, r2
 8015fbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	68ba      	ldr	r2, [r7, #8]
 8015fc2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	88fa      	ldrh	r2, [r7, #6]
 8015fc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	88fa      	ldrh	r2, [r7, #6]
 8015fd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	689b      	ldr	r3, [r3, #8]
 8015fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015fe2:	d10e      	bne.n	8016002 <UART_Start_Receive_IT+0x52>
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	691b      	ldr	r3, [r3, #16]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d105      	bne.n	8015ff8 <UART_Start_Receive_IT+0x48>
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015ff2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015ff6:	e02d      	b.n	8016054 <UART_Start_Receive_IT+0xa4>
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	22ff      	movs	r2, #255	; 0xff
 8015ffc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016000:	e028      	b.n	8016054 <UART_Start_Receive_IT+0xa4>
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	689b      	ldr	r3, [r3, #8]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d10d      	bne.n	8016026 <UART_Start_Receive_IT+0x76>
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	691b      	ldr	r3, [r3, #16]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d104      	bne.n	801601c <UART_Start_Receive_IT+0x6c>
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	22ff      	movs	r2, #255	; 0xff
 8016016:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801601a:	e01b      	b.n	8016054 <UART_Start_Receive_IT+0xa4>
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	227f      	movs	r2, #127	; 0x7f
 8016020:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016024:	e016      	b.n	8016054 <UART_Start_Receive_IT+0xa4>
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	689b      	ldr	r3, [r3, #8]
 801602a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801602e:	d10d      	bne.n	801604c <UART_Start_Receive_IT+0x9c>
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	691b      	ldr	r3, [r3, #16]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d104      	bne.n	8016042 <UART_Start_Receive_IT+0x92>
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	227f      	movs	r2, #127	; 0x7f
 801603c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016040:	e008      	b.n	8016054 <UART_Start_Receive_IT+0xa4>
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	223f      	movs	r2, #63	; 0x3f
 8016046:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801604a:	e003      	b.n	8016054 <UART_Start_Receive_IT+0xa4>
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	2200      	movs	r2, #0
 8016050:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	2200      	movs	r2, #0
 8016058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	2222      	movs	r2, #34	; 0x22
 8016060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	3308      	adds	r3, #8
 801606a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801606c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801606e:	e853 3f00 	ldrex	r3, [r3]
 8016072:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016074:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016076:	f043 0301 	orr.w	r3, r3, #1
 801607a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	3308      	adds	r3, #8
 8016084:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016088:	673a      	str	r2, [r7, #112]	; 0x70
 801608a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801608c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801608e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016090:	e841 2300 	strex	r3, r2, [r1]
 8016094:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8016096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016098:	2b00      	cmp	r3, #0
 801609a:	d1e3      	bne.n	8016064 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80160a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80160a4:	d153      	bne.n	801614e <UART_Start_Receive_IT+0x19e>
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80160ac:	88fa      	ldrh	r2, [r7, #6]
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d34d      	bcc.n	801614e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	689b      	ldr	r3, [r3, #8]
 80160b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80160ba:	d107      	bne.n	80160cc <UART_Start_Receive_IT+0x11c>
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	691b      	ldr	r3, [r3, #16]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d103      	bne.n	80160cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	4a4b      	ldr	r2, [pc, #300]	; (80161f4 <UART_Start_Receive_IT+0x244>)
 80160c8:	671a      	str	r2, [r3, #112]	; 0x70
 80160ca:	e002      	b.n	80160d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	4a4a      	ldr	r2, [pc, #296]	; (80161f8 <UART_Start_Receive_IT+0x248>)
 80160d0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	2200      	movs	r2, #0
 80160d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	691b      	ldr	r3, [r3, #16]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d01a      	beq.n	8016118 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160ea:	e853 3f00 	ldrex	r3, [r3]
 80160ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80160f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80160f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80160f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	461a      	mov	r2, r3
 8016100:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016106:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016108:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801610a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801610c:	e841 2300 	strex	r3, r2, [r1]
 8016110:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8016112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016114:	2b00      	cmp	r3, #0
 8016116:	d1e4      	bne.n	80160e2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	3308      	adds	r3, #8
 801611e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016122:	e853 3f00 	ldrex	r3, [r3]
 8016126:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801612a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801612e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	3308      	adds	r3, #8
 8016136:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016138:	64ba      	str	r2, [r7, #72]	; 0x48
 801613a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801613c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801613e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016140:	e841 2300 	strex	r3, r2, [r1]
 8016144:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8016146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016148:	2b00      	cmp	r3, #0
 801614a:	d1e5      	bne.n	8016118 <UART_Start_Receive_IT+0x168>
 801614c:	e04a      	b.n	80161e4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	689b      	ldr	r3, [r3, #8]
 8016152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016156:	d107      	bne.n	8016168 <UART_Start_Receive_IT+0x1b8>
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	691b      	ldr	r3, [r3, #16]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d103      	bne.n	8016168 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	4a26      	ldr	r2, [pc, #152]	; (80161fc <UART_Start_Receive_IT+0x24c>)
 8016164:	671a      	str	r2, [r3, #112]	; 0x70
 8016166:	e002      	b.n	801616e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	4a25      	ldr	r2, [pc, #148]	; (8016200 <UART_Start_Receive_IT+0x250>)
 801616c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	2200      	movs	r2, #0
 8016172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	691b      	ldr	r3, [r3, #16]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d019      	beq.n	80161b2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016186:	e853 3f00 	ldrex	r3, [r3]
 801618a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801618e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8016192:	677b      	str	r3, [r7, #116]	; 0x74
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	461a      	mov	r2, r3
 801619a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801619c:	637b      	str	r3, [r7, #52]	; 0x34
 801619e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80161a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80161a4:	e841 2300 	strex	r3, r2, [r1]
 80161a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80161aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d1e6      	bne.n	801617e <UART_Start_Receive_IT+0x1ce>
 80161b0:	e018      	b.n	80161e4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161b8:	697b      	ldr	r3, [r7, #20]
 80161ba:	e853 3f00 	ldrex	r3, [r3]
 80161be:	613b      	str	r3, [r7, #16]
   return(result);
 80161c0:	693b      	ldr	r3, [r7, #16]
 80161c2:	f043 0320 	orr.w	r3, r3, #32
 80161c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	461a      	mov	r2, r3
 80161ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80161d0:	623b      	str	r3, [r7, #32]
 80161d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161d4:	69f9      	ldr	r1, [r7, #28]
 80161d6:	6a3a      	ldr	r2, [r7, #32]
 80161d8:	e841 2300 	strex	r3, r2, [r1]
 80161dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80161de:	69bb      	ldr	r3, [r7, #24]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d1e6      	bne.n	80161b2 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 80161e4:	2300      	movs	r3, #0
}
 80161e6:	4618      	mov	r0, r3
 80161e8:	378c      	adds	r7, #140	; 0x8c
 80161ea:	46bd      	mov	sp, r7
 80161ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f0:	4770      	bx	lr
 80161f2:	bf00      	nop
 80161f4:	08016c51 	.word	0x08016c51
 80161f8:	08016959 	.word	0x08016959
 80161fc:	080167f7 	.word	0x080167f7
 8016200:	08016697 	.word	0x08016697

08016204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016204:	b480      	push	{r7}
 8016206:	b095      	sub	sp, #84	; 0x54
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016214:	e853 3f00 	ldrex	r3, [r3]
 8016218:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801621c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016220:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	461a      	mov	r2, r3
 8016228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801622a:	643b      	str	r3, [r7, #64]	; 0x40
 801622c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801622e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016230:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016232:	e841 2300 	strex	r3, r2, [r1]
 8016236:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801623a:	2b00      	cmp	r3, #0
 801623c:	d1e6      	bne.n	801620c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	3308      	adds	r3, #8
 8016244:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016246:	6a3b      	ldr	r3, [r7, #32]
 8016248:	e853 3f00 	ldrex	r3, [r3]
 801624c:	61fb      	str	r3, [r7, #28]
   return(result);
 801624e:	69fa      	ldr	r2, [r7, #28]
 8016250:	4b1e      	ldr	r3, [pc, #120]	; (80162cc <UART_EndRxTransfer+0xc8>)
 8016252:	4013      	ands	r3, r2
 8016254:	64bb      	str	r3, [r7, #72]	; 0x48
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	3308      	adds	r3, #8
 801625c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801625e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016260:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016266:	e841 2300 	strex	r3, r2, [r1]
 801626a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801626e:	2b00      	cmp	r3, #0
 8016270:	d1e5      	bne.n	801623e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016276:	2b01      	cmp	r3, #1
 8016278:	d118      	bne.n	80162ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	e853 3f00 	ldrex	r3, [r3]
 8016286:	60bb      	str	r3, [r7, #8]
   return(result);
 8016288:	68bb      	ldr	r3, [r7, #8]
 801628a:	f023 0310 	bic.w	r3, r3, #16
 801628e:	647b      	str	r3, [r7, #68]	; 0x44
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	461a      	mov	r2, r3
 8016296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016298:	61bb      	str	r3, [r7, #24]
 801629a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801629c:	6979      	ldr	r1, [r7, #20]
 801629e:	69ba      	ldr	r2, [r7, #24]
 80162a0:	e841 2300 	strex	r3, r2, [r1]
 80162a4:	613b      	str	r3, [r7, #16]
   return(result);
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d1e6      	bne.n	801627a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2220      	movs	r2, #32
 80162b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2200      	movs	r2, #0
 80162b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	2200      	movs	r2, #0
 80162be:	671a      	str	r2, [r3, #112]	; 0x70
}
 80162c0:	bf00      	nop
 80162c2:	3754      	adds	r7, #84	; 0x54
 80162c4:	46bd      	mov	sp, r7
 80162c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ca:	4770      	bx	lr
 80162cc:	effffffe 	.word	0xeffffffe

080162d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b084      	sub	sp, #16
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	2200      	movs	r2, #0
 80162e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	2200      	movs	r2, #0
 80162ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80162ee:	68f8      	ldr	r0, [r7, #12]
 80162f0:	f7fe fe26 	bl	8014f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80162f4:	bf00      	nop
 80162f6:	3710      	adds	r7, #16
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}

080162fc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80162fc:	b480      	push	{r7}
 80162fe:	b08f      	sub	sp, #60	; 0x3c
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801630a:	2b21      	cmp	r3, #33	; 0x21
 801630c:	d14c      	bne.n	80163a8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016314:	b29b      	uxth	r3, r3
 8016316:	2b00      	cmp	r3, #0
 8016318:	d132      	bne.n	8016380 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016320:	6a3b      	ldr	r3, [r7, #32]
 8016322:	e853 3f00 	ldrex	r3, [r3]
 8016326:	61fb      	str	r3, [r7, #28]
   return(result);
 8016328:	69fb      	ldr	r3, [r7, #28]
 801632a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801632e:	637b      	str	r3, [r7, #52]	; 0x34
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	461a      	mov	r2, r3
 8016336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016338:	62fb      	str	r3, [r7, #44]	; 0x2c
 801633a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801633c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801633e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016340:	e841 2300 	strex	r3, r2, [r1]
 8016344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016348:	2b00      	cmp	r3, #0
 801634a:	d1e6      	bne.n	801631a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	e853 3f00 	ldrex	r3, [r3]
 8016358:	60bb      	str	r3, [r7, #8]
   return(result);
 801635a:	68bb      	ldr	r3, [r7, #8]
 801635c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016360:	633b      	str	r3, [r7, #48]	; 0x30
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	461a      	mov	r2, r3
 8016368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801636a:	61bb      	str	r3, [r7, #24]
 801636c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801636e:	6979      	ldr	r1, [r7, #20]
 8016370:	69ba      	ldr	r2, [r7, #24]
 8016372:	e841 2300 	strex	r3, r2, [r1]
 8016376:	613b      	str	r3, [r7, #16]
   return(result);
 8016378:	693b      	ldr	r3, [r7, #16]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d1e6      	bne.n	801634c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801637e:	e013      	b.n	80163a8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016384:	781a      	ldrb	r2, [r3, #0]
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016390:	1c5a      	adds	r2, r3, #1
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801639c:	b29b      	uxth	r3, r3
 801639e:	3b01      	subs	r3, #1
 80163a0:	b29a      	uxth	r2, r3
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80163a8:	bf00      	nop
 80163aa:	373c      	adds	r7, #60	; 0x3c
 80163ac:	46bd      	mov	sp, r7
 80163ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b2:	4770      	bx	lr

080163b4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80163b4:	b480      	push	{r7}
 80163b6:	b091      	sub	sp, #68	; 0x44
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80163c2:	2b21      	cmp	r3, #33	; 0x21
 80163c4:	d151      	bne.n	801646a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80163cc:	b29b      	uxth	r3, r3
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d132      	bne.n	8016438 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163da:	e853 3f00 	ldrex	r3, [r3]
 80163de:	623b      	str	r3, [r7, #32]
   return(result);
 80163e0:	6a3b      	ldr	r3, [r7, #32]
 80163e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80163e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	461a      	mov	r2, r3
 80163ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163f0:	633b      	str	r3, [r7, #48]	; 0x30
 80163f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80163f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163f8:	e841 2300 	strex	r3, r2, [r1]
 80163fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80163fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016400:	2b00      	cmp	r3, #0
 8016402:	d1e6      	bne.n	80163d2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801640a:	693b      	ldr	r3, [r7, #16]
 801640c:	e853 3f00 	ldrex	r3, [r3]
 8016410:	60fb      	str	r3, [r7, #12]
   return(result);
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016418:	637b      	str	r3, [r7, #52]	; 0x34
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	461a      	mov	r2, r3
 8016420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016422:	61fb      	str	r3, [r7, #28]
 8016424:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016426:	69b9      	ldr	r1, [r7, #24]
 8016428:	69fa      	ldr	r2, [r7, #28]
 801642a:	e841 2300 	strex	r3, r2, [r1]
 801642e:	617b      	str	r3, [r7, #20]
   return(result);
 8016430:	697b      	ldr	r3, [r7, #20]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d1e6      	bne.n	8016404 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8016436:	e018      	b.n	801646a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801643c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801643e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016440:	881b      	ldrh	r3, [r3, #0]
 8016442:	461a      	mov	r2, r3
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801644c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016452:	1c9a      	adds	r2, r3, #2
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801645e:	b29b      	uxth	r3, r3
 8016460:	3b01      	subs	r3, #1
 8016462:	b29a      	uxth	r2, r3
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 801646a:	bf00      	nop
 801646c:	3744      	adds	r7, #68	; 0x44
 801646e:	46bd      	mov	sp, r7
 8016470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016474:	4770      	bx	lr

08016476 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016476:	b480      	push	{r7}
 8016478:	b091      	sub	sp, #68	; 0x44
 801647a:	af00      	add	r7, sp, #0
 801647c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016484:	2b21      	cmp	r3, #33	; 0x21
 8016486:	d160      	bne.n	801654a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801648e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8016490:	e057      	b.n	8016542 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016498:	b29b      	uxth	r3, r3
 801649a:	2b00      	cmp	r3, #0
 801649c:	d133      	bne.n	8016506 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	3308      	adds	r3, #8
 80164a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a8:	e853 3f00 	ldrex	r3, [r3]
 80164ac:	623b      	str	r3, [r7, #32]
   return(result);
 80164ae:	6a3b      	ldr	r3, [r7, #32]
 80164b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80164b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	3308      	adds	r3, #8
 80164bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80164be:	633a      	str	r2, [r7, #48]	; 0x30
 80164c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80164c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164c6:	e841 2300 	strex	r3, r2, [r1]
 80164ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80164cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d1e5      	bne.n	801649e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164d8:	693b      	ldr	r3, [r7, #16]
 80164da:	e853 3f00 	ldrex	r3, [r3]
 80164de:	60fb      	str	r3, [r7, #12]
   return(result);
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80164e6:	637b      	str	r3, [r7, #52]	; 0x34
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	461a      	mov	r2, r3
 80164ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164f0:	61fb      	str	r3, [r7, #28]
 80164f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164f4:	69b9      	ldr	r1, [r7, #24]
 80164f6:	69fa      	ldr	r2, [r7, #28]
 80164f8:	e841 2300 	strex	r3, r2, [r1]
 80164fc:	617b      	str	r3, [r7, #20]
   return(result);
 80164fe:	697b      	ldr	r3, [r7, #20]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d1e6      	bne.n	80164d2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8016504:	e021      	b.n	801654a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	69db      	ldr	r3, [r3, #28]
 801650c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016510:	2b00      	cmp	r3, #0
 8016512:	d013      	beq.n	801653c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016518:	781a      	ldrb	r2, [r3, #0]
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016524:	1c5a      	adds	r2, r3, #1
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016530:	b29b      	uxth	r3, r3
 8016532:	3b01      	subs	r3, #1
 8016534:	b29a      	uxth	r2, r3
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801653c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801653e:	3b01      	subs	r3, #1
 8016540:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8016542:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016544:	2b00      	cmp	r3, #0
 8016546:	d1a4      	bne.n	8016492 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8016548:	e7ff      	b.n	801654a <UART_TxISR_8BIT_FIFOEN+0xd4>
 801654a:	bf00      	nop
 801654c:	3744      	adds	r7, #68	; 0x44
 801654e:	46bd      	mov	sp, r7
 8016550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016554:	4770      	bx	lr

08016556 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016556:	b480      	push	{r7}
 8016558:	b091      	sub	sp, #68	; 0x44
 801655a:	af00      	add	r7, sp, #0
 801655c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016564:	2b21      	cmp	r3, #33	; 0x21
 8016566:	d165      	bne.n	8016634 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801656e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8016570:	e05c      	b.n	801662c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016578:	b29b      	uxth	r3, r3
 801657a:	2b00      	cmp	r3, #0
 801657c:	d133      	bne.n	80165e6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	3308      	adds	r3, #8
 8016584:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016586:	6a3b      	ldr	r3, [r7, #32]
 8016588:	e853 3f00 	ldrex	r3, [r3]
 801658c:	61fb      	str	r3, [r7, #28]
   return(result);
 801658e:	69fb      	ldr	r3, [r7, #28]
 8016590:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8016594:	637b      	str	r3, [r7, #52]	; 0x34
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	3308      	adds	r3, #8
 801659c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801659e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80165a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80165a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165a6:	e841 2300 	strex	r3, r2, [r1]
 80165aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80165ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d1e5      	bne.n	801657e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	e853 3f00 	ldrex	r3, [r3]
 80165be:	60bb      	str	r3, [r7, #8]
   return(result);
 80165c0:	68bb      	ldr	r3, [r7, #8]
 80165c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165c6:	633b      	str	r3, [r7, #48]	; 0x30
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	461a      	mov	r2, r3
 80165ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165d0:	61bb      	str	r3, [r7, #24]
 80165d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165d4:	6979      	ldr	r1, [r7, #20]
 80165d6:	69ba      	ldr	r2, [r7, #24]
 80165d8:	e841 2300 	strex	r3, r2, [r1]
 80165dc:	613b      	str	r3, [r7, #16]
   return(result);
 80165de:	693b      	ldr	r3, [r7, #16]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d1e6      	bne.n	80165b2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80165e4:	e026      	b.n	8016634 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	69db      	ldr	r3, [r3, #28]
 80165ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d018      	beq.n	8016626 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80165f8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80165fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165fc:	881b      	ldrh	r3, [r3, #0]
 80165fe:	461a      	mov	r2, r3
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016608:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801660e:	1c9a      	adds	r2, r3, #2
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801661a:	b29b      	uxth	r3, r3
 801661c:	3b01      	subs	r3, #1
 801661e:	b29a      	uxth	r2, r3
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8016626:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016628:	3b01      	subs	r3, #1
 801662a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801662c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801662e:	2b00      	cmp	r3, #0
 8016630:	d19f      	bne.n	8016572 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8016632:	e7ff      	b.n	8016634 <UART_TxISR_16BIT_FIFOEN+0xde>
 8016634:	bf00      	nop
 8016636:	3744      	adds	r7, #68	; 0x44
 8016638:	46bd      	mov	sp, r7
 801663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663e:	4770      	bx	lr

08016640 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b088      	sub	sp, #32
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	e853 3f00 	ldrex	r3, [r3]
 8016654:	60bb      	str	r3, [r7, #8]
   return(result);
 8016656:	68bb      	ldr	r3, [r7, #8]
 8016658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801665c:	61fb      	str	r3, [r7, #28]
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	461a      	mov	r2, r3
 8016664:	69fb      	ldr	r3, [r7, #28]
 8016666:	61bb      	str	r3, [r7, #24]
 8016668:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801666a:	6979      	ldr	r1, [r7, #20]
 801666c:	69ba      	ldr	r2, [r7, #24]
 801666e:	e841 2300 	strex	r3, r2, [r1]
 8016672:	613b      	str	r3, [r7, #16]
   return(result);
 8016674:	693b      	ldr	r3, [r7, #16]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d1e6      	bne.n	8016648 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	2220      	movs	r2, #32
 801667e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	2200      	movs	r2, #0
 8016686:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8016688:	6878      	ldr	r0, [r7, #4]
 801668a:	f7fe fc4f 	bl	8014f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801668e:	bf00      	nop
 8016690:	3720      	adds	r7, #32
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}

08016696 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8016696:	b580      	push	{r7, lr}
 8016698:	b096      	sub	sp, #88	; 0x58
 801669a:	af00      	add	r7, sp, #0
 801669c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80166a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80166ae:	2b22      	cmp	r3, #34	; 0x22
 80166b0:	f040 8095 	bne.w	80167de <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166ba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80166be:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80166c2:	b2d9      	uxtb	r1, r3
 80166c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80166c8:	b2da      	uxtb	r2, r3
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80166ce:	400a      	ands	r2, r1
 80166d0:	b2d2      	uxtb	r2, r2
 80166d2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80166d8:	1c5a      	adds	r2, r3, #1
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80166e4:	b29b      	uxth	r3, r3
 80166e6:	3b01      	subs	r3, #1
 80166e8:	b29a      	uxth	r2, r3
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80166f6:	b29b      	uxth	r3, r3
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d178      	bne.n	80167ee <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016704:	e853 3f00 	ldrex	r3, [r3]
 8016708:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801670a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801670c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016710:	653b      	str	r3, [r7, #80]	; 0x50
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	461a      	mov	r2, r3
 8016718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801671a:	647b      	str	r3, [r7, #68]	; 0x44
 801671c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801671e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016722:	e841 2300 	strex	r3, r2, [r1]
 8016726:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801672a:	2b00      	cmp	r3, #0
 801672c:	d1e6      	bne.n	80166fc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	3308      	adds	r3, #8
 8016734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016738:	e853 3f00 	ldrex	r3, [r3]
 801673c:	623b      	str	r3, [r7, #32]
   return(result);
 801673e:	6a3b      	ldr	r3, [r7, #32]
 8016740:	f023 0301 	bic.w	r3, r3, #1
 8016744:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	3308      	adds	r3, #8
 801674c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801674e:	633a      	str	r2, [r7, #48]	; 0x30
 8016750:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016756:	e841 2300 	strex	r3, r2, [r1]
 801675a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801675e:	2b00      	cmp	r3, #0
 8016760:	d1e5      	bne.n	801672e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	2220      	movs	r2, #32
 8016766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	2200      	movs	r2, #0
 801676e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016774:	2b01      	cmp	r3, #1
 8016776:	d12e      	bne.n	80167d6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	2200      	movs	r2, #0
 801677c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016784:	693b      	ldr	r3, [r7, #16]
 8016786:	e853 3f00 	ldrex	r3, [r3]
 801678a:	60fb      	str	r3, [r7, #12]
   return(result);
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	f023 0310 	bic.w	r3, r3, #16
 8016792:	64bb      	str	r3, [r7, #72]	; 0x48
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	461a      	mov	r2, r3
 801679a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801679c:	61fb      	str	r3, [r7, #28]
 801679e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167a0:	69b9      	ldr	r1, [r7, #24]
 80167a2:	69fa      	ldr	r2, [r7, #28]
 80167a4:	e841 2300 	strex	r3, r2, [r1]
 80167a8:	617b      	str	r3, [r7, #20]
   return(result);
 80167aa:	697b      	ldr	r3, [r7, #20]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d1e6      	bne.n	801677e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	69db      	ldr	r3, [r3, #28]
 80167b6:	f003 0310 	and.w	r3, r3, #16
 80167ba:	2b10      	cmp	r3, #16
 80167bc:	d103      	bne.n	80167c6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	2210      	movs	r2, #16
 80167c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80167cc:	4619      	mov	r1, r3
 80167ce:	6878      	ldr	r0, [r7, #4]
 80167d0:	f7fe fbc0 	bl	8014f54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80167d4:	e00b      	b.n	80167ee <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80167d6:	6878      	ldr	r0, [r7, #4]
 80167d8:	f7ec ff48 	bl	800366c <HAL_UART_RxCpltCallback>
}
 80167dc:	e007      	b.n	80167ee <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	699a      	ldr	r2, [r3, #24]
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	f042 0208 	orr.w	r2, r2, #8
 80167ec:	619a      	str	r2, [r3, #24]
}
 80167ee:	bf00      	nop
 80167f0:	3758      	adds	r7, #88	; 0x58
 80167f2:	46bd      	mov	sp, r7
 80167f4:	bd80      	pop	{r7, pc}

080167f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80167f6:	b580      	push	{r7, lr}
 80167f8:	b096      	sub	sp, #88	; 0x58
 80167fa:	af00      	add	r7, sp, #0
 80167fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016804:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801680e:	2b22      	cmp	r3, #34	; 0x22
 8016810:	f040 8095 	bne.w	801693e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801681a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016822:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8016824:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8016828:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801682c:	4013      	ands	r3, r2
 801682e:	b29a      	uxth	r2, r3
 8016830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016832:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016838:	1c9a      	adds	r2, r3, #2
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016844:	b29b      	uxth	r3, r3
 8016846:	3b01      	subs	r3, #1
 8016848:	b29a      	uxth	r2, r3
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016856:	b29b      	uxth	r3, r3
 8016858:	2b00      	cmp	r3, #0
 801685a:	d178      	bne.n	801694e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016864:	e853 3f00 	ldrex	r3, [r3]
 8016868:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801686c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016870:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	461a      	mov	r2, r3
 8016878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801687a:	643b      	str	r3, [r7, #64]	; 0x40
 801687c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801687e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016880:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016882:	e841 2300 	strex	r3, r2, [r1]
 8016886:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801688a:	2b00      	cmp	r3, #0
 801688c:	d1e6      	bne.n	801685c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	3308      	adds	r3, #8
 8016894:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016896:	6a3b      	ldr	r3, [r7, #32]
 8016898:	e853 3f00 	ldrex	r3, [r3]
 801689c:	61fb      	str	r3, [r7, #28]
   return(result);
 801689e:	69fb      	ldr	r3, [r7, #28]
 80168a0:	f023 0301 	bic.w	r3, r3, #1
 80168a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	3308      	adds	r3, #8
 80168ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80168ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80168b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80168b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168b6:	e841 2300 	strex	r3, r2, [r1]
 80168ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80168bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d1e5      	bne.n	801688e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2220      	movs	r2, #32
 80168c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	2200      	movs	r2, #0
 80168ce:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168d4:	2b01      	cmp	r3, #1
 80168d6:	d12e      	bne.n	8016936 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	2200      	movs	r2, #0
 80168dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	e853 3f00 	ldrex	r3, [r3]
 80168ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80168ec:	68bb      	ldr	r3, [r7, #8]
 80168ee:	f023 0310 	bic.w	r3, r3, #16
 80168f2:	647b      	str	r3, [r7, #68]	; 0x44
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	461a      	mov	r2, r3
 80168fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168fc:	61bb      	str	r3, [r7, #24]
 80168fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016900:	6979      	ldr	r1, [r7, #20]
 8016902:	69ba      	ldr	r2, [r7, #24]
 8016904:	e841 2300 	strex	r3, r2, [r1]
 8016908:	613b      	str	r3, [r7, #16]
   return(result);
 801690a:	693b      	ldr	r3, [r7, #16]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d1e6      	bne.n	80168de <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	69db      	ldr	r3, [r3, #28]
 8016916:	f003 0310 	and.w	r3, r3, #16
 801691a:	2b10      	cmp	r3, #16
 801691c:	d103      	bne.n	8016926 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	2210      	movs	r2, #16
 8016924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801692c:	4619      	mov	r1, r3
 801692e:	6878      	ldr	r0, [r7, #4]
 8016930:	f7fe fb10 	bl	8014f54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016934:	e00b      	b.n	801694e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8016936:	6878      	ldr	r0, [r7, #4]
 8016938:	f7ec fe98 	bl	800366c <HAL_UART_RxCpltCallback>
}
 801693c:	e007      	b.n	801694e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	699a      	ldr	r2, [r3, #24]
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	f042 0208 	orr.w	r2, r2, #8
 801694c:	619a      	str	r2, [r3, #24]
}
 801694e:	bf00      	nop
 8016950:	3758      	adds	r7, #88	; 0x58
 8016952:	46bd      	mov	sp, r7
 8016954:	bd80      	pop	{r7, pc}
	...

08016958 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b0a6      	sub	sp, #152	; 0x98
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016966:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	69db      	ldr	r3, [r3, #28]
 8016970:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	689b      	ldr	r3, [r3, #8]
 8016984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801698e:	2b22      	cmp	r3, #34	; 0x22
 8016990:	f040 814d 	bne.w	8016c2e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801699a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801699e:	e0f4      	b.n	8016b8a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169a6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80169aa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80169ae:	b2d9      	uxtb	r1, r3
 80169b0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80169b4:	b2da      	uxtb	r2, r3
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169ba:	400a      	ands	r2, r1
 80169bc:	b2d2      	uxtb	r2, r2
 80169be:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169c4:	1c5a      	adds	r2, r3, #1
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80169d0:	b29b      	uxth	r3, r3
 80169d2:	3b01      	subs	r3, #1
 80169d4:	b29a      	uxth	r2, r3
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	69db      	ldr	r3, [r3, #28]
 80169e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80169e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80169ea:	f003 0307 	and.w	r3, r3, #7
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d053      	beq.n	8016a9a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80169f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80169f6:	f003 0301 	and.w	r3, r3, #1
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d011      	beq.n	8016a22 <UART_RxISR_8BIT_FIFOEN+0xca>
 80169fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d00b      	beq.n	8016a22 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	2201      	movs	r2, #1
 8016a10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016a18:	f043 0201 	orr.w	r2, r3, #1
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016a22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016a26:	f003 0302 	and.w	r3, r3, #2
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d011      	beq.n	8016a52 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8016a2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016a32:	f003 0301 	and.w	r3, r3, #1
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d00b      	beq.n	8016a52 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	2202      	movs	r2, #2
 8016a40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016a48:	f043 0204 	orr.w	r2, r3, #4
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016a52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016a56:	f003 0304 	and.w	r3, r3, #4
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d011      	beq.n	8016a82 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8016a5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016a62:	f003 0301 	and.w	r3, r3, #1
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d00b      	beq.n	8016a82 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	2204      	movs	r2, #4
 8016a70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016a78:	f043 0202 	orr.w	r2, r3, #2
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d006      	beq.n	8016a9a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016a8c:	6878      	ldr	r0, [r7, #4]
 8016a8e:	f7fe fa57 	bl	8014f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	2200      	movs	r2, #0
 8016a96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016aa0:	b29b      	uxth	r3, r3
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d171      	bne.n	8016b8a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016aae:	e853 3f00 	ldrex	r3, [r3]
 8016ab2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8016ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016aba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	461a      	mov	r2, r3
 8016ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016ac8:	66bb      	str	r3, [r7, #104]	; 0x68
 8016aca:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016acc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016ace:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016ad0:	e841 2300 	strex	r3, r2, [r1]
 8016ad4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d1e4      	bne.n	8016aa6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	3308      	adds	r3, #8
 8016ae2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016ae6:	e853 3f00 	ldrex	r3, [r3]
 8016aea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016aec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016aee:	4b56      	ldr	r3, [pc, #344]	; (8016c48 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8016af0:	4013      	ands	r3, r2
 8016af2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	3308      	adds	r3, #8
 8016afa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016afc:	657a      	str	r2, [r7, #84]	; 0x54
 8016afe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016b02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016b04:	e841 2300 	strex	r3, r2, [r1]
 8016b08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d1e5      	bne.n	8016adc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	2220      	movs	r2, #32
 8016b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b22:	2b01      	cmp	r3, #1
 8016b24:	d12e      	bne.n	8016b84 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	2200      	movs	r2, #0
 8016b2a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b34:	e853 3f00 	ldrex	r3, [r3]
 8016b38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b3c:	f023 0310 	bic.w	r3, r3, #16
 8016b40:	67bb      	str	r3, [r7, #120]	; 0x78
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	461a      	mov	r2, r3
 8016b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8016b4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016b50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016b52:	e841 2300 	strex	r3, r2, [r1]
 8016b56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d1e6      	bne.n	8016b2c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	69db      	ldr	r3, [r3, #28]
 8016b64:	f003 0310 	and.w	r3, r3, #16
 8016b68:	2b10      	cmp	r3, #16
 8016b6a:	d103      	bne.n	8016b74 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	2210      	movs	r2, #16
 8016b72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	f7fe f9e9 	bl	8014f54 <HAL_UARTEx_RxEventCallback>
 8016b82:	e002      	b.n	8016b8a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	f7ec fd71 	bl	800366c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016b8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d006      	beq.n	8016ba0 <UART_RxISR_8BIT_FIFOEN+0x248>
 8016b92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b96:	f003 0320 	and.w	r3, r3, #32
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	f47f af00 	bne.w	80169a0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016ba6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016baa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d045      	beq.n	8016c3e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016bb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8016bbc:	429a      	cmp	r2, r3
 8016bbe:	d23e      	bcs.n	8016c3e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	3308      	adds	r3, #8
 8016bc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bc8:	6a3b      	ldr	r3, [r7, #32]
 8016bca:	e853 3f00 	ldrex	r3, [r3]
 8016bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8016bd0:	69fb      	ldr	r3, [r7, #28]
 8016bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016bd6:	673b      	str	r3, [r7, #112]	; 0x70
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	3308      	adds	r3, #8
 8016bde:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016be0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016be2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016be4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016be8:	e841 2300 	strex	r3, r2, [r1]
 8016bec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d1e5      	bne.n	8016bc0 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	4a15      	ldr	r2, [pc, #84]	; (8016c4c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8016bf8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	e853 3f00 	ldrex	r3, [r3]
 8016c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	f043 0320 	orr.w	r3, r3, #32
 8016c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	461a      	mov	r2, r3
 8016c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016c18:	61bb      	str	r3, [r7, #24]
 8016c1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c1c:	6979      	ldr	r1, [r7, #20]
 8016c1e:	69ba      	ldr	r2, [r7, #24]
 8016c20:	e841 2300 	strex	r3, r2, [r1]
 8016c24:	613b      	str	r3, [r7, #16]
   return(result);
 8016c26:	693b      	ldr	r3, [r7, #16]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d1e6      	bne.n	8016bfa <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016c2c:	e007      	b.n	8016c3e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	699a      	ldr	r2, [r3, #24]
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	f042 0208 	orr.w	r2, r2, #8
 8016c3c:	619a      	str	r2, [r3, #24]
}
 8016c3e:	bf00      	nop
 8016c40:	3798      	adds	r7, #152	; 0x98
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd80      	pop	{r7, pc}
 8016c46:	bf00      	nop
 8016c48:	effffffe 	.word	0xeffffffe
 8016c4c:	08016697 	.word	0x08016697

08016c50 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b0a8      	sub	sp, #160	; 0xa0
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016c5e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	69db      	ldr	r3, [r3, #28]
 8016c68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	689b      	ldr	r3, [r3, #8]
 8016c7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016c86:	2b22      	cmp	r3, #34	; 0x22
 8016c88:	f040 8151 	bne.w	8016f2e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016c92:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016c96:	e0f8      	b.n	8016e8a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c9e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8016caa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8016cae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8016cb2:	4013      	ands	r3, r2
 8016cb4:	b29a      	uxth	r2, r3
 8016cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016cba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016cc0:	1c9a      	adds	r2, r3, #2
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	3b01      	subs	r3, #1
 8016cd0:	b29a      	uxth	r2, r3
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	69db      	ldr	r3, [r3, #28]
 8016cde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016ce2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016ce6:	f003 0307 	and.w	r3, r3, #7
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d053      	beq.n	8016d96 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016cee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016cf2:	f003 0301 	and.w	r3, r3, #1
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d011      	beq.n	8016d1e <UART_RxISR_16BIT_FIFOEN+0xce>
 8016cfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d00b      	beq.n	8016d1e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	2201      	movs	r2, #1
 8016d0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016d14:	f043 0201 	orr.w	r2, r3, #1
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016d1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016d22:	f003 0302 	and.w	r3, r3, #2
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d011      	beq.n	8016d4e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8016d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016d2e:	f003 0301 	and.w	r3, r3, #1
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d00b      	beq.n	8016d4e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	2202      	movs	r2, #2
 8016d3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016d44:	f043 0204 	orr.w	r2, r3, #4
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016d4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016d52:	f003 0304 	and.w	r3, r3, #4
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d011      	beq.n	8016d7e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8016d5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016d5e:	f003 0301 	and.w	r3, r3, #1
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d00b      	beq.n	8016d7e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	2204      	movs	r2, #4
 8016d6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016d74:	f043 0202 	orr.w	r2, r3, #2
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d006      	beq.n	8016d96 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016d88:	6878      	ldr	r0, [r7, #4]
 8016d8a:	f7fe f8d9 	bl	8014f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	2200      	movs	r2, #0
 8016d92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016d9c:	b29b      	uxth	r3, r3
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d173      	bne.n	8016e8a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016daa:	e853 3f00 	ldrex	r3, [r3]
 8016dae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016db2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016db6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	461a      	mov	r2, r3
 8016dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016dc6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016dc8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016dca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016dcc:	e841 2300 	strex	r3, r2, [r1]
 8016dd0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d1e4      	bne.n	8016da2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	3308      	adds	r3, #8
 8016dde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016de2:	e853 3f00 	ldrex	r3, [r3]
 8016de6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016de8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016dea:	4b57      	ldr	r3, [pc, #348]	; (8016f48 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8016dec:	4013      	ands	r3, r2
 8016dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	3308      	adds	r3, #8
 8016df8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016dfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8016dfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016e02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016e04:	e841 2300 	strex	r3, r2, [r1]
 8016e08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d1e3      	bne.n	8016dd8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	2220      	movs	r2, #32
 8016e14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e22:	2b01      	cmp	r3, #1
 8016e24:	d12e      	bne.n	8016e84 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	2200      	movs	r2, #0
 8016e2a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e34:	e853 3f00 	ldrex	r3, [r3]
 8016e38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e3c:	f023 0310 	bic.w	r3, r3, #16
 8016e40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	461a      	mov	r2, r3
 8016e48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8016e4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e52:	e841 2300 	strex	r3, r2, [r1]
 8016e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d1e6      	bne.n	8016e2c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	69db      	ldr	r3, [r3, #28]
 8016e64:	f003 0310 	and.w	r3, r3, #16
 8016e68:	2b10      	cmp	r3, #16
 8016e6a:	d103      	bne.n	8016e74 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	2210      	movs	r2, #16
 8016e72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016e7a:	4619      	mov	r1, r3
 8016e7c:	6878      	ldr	r0, [r7, #4]
 8016e7e:	f7fe f869 	bl	8014f54 <HAL_UARTEx_RxEventCallback>
 8016e82:	e002      	b.n	8016e8a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016e84:	6878      	ldr	r0, [r7, #4]
 8016e86:	f7ec fbf1 	bl	800366c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016e8a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d006      	beq.n	8016ea0 <UART_RxISR_16BIT_FIFOEN+0x250>
 8016e92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e96:	f003 0320 	and.w	r3, r3, #32
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	f47f aefc 	bne.w	8016c98 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016ea6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016eaa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d045      	beq.n	8016f3e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016eb8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8016ebc:	429a      	cmp	r2, r3
 8016ebe:	d23e      	bcs.n	8016f3e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	3308      	adds	r3, #8
 8016ec6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eca:	e853 3f00 	ldrex	r3, [r3]
 8016ece:	623b      	str	r3, [r7, #32]
   return(result);
 8016ed0:	6a3b      	ldr	r3, [r7, #32]
 8016ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016ed6:	677b      	str	r3, [r7, #116]	; 0x74
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	3308      	adds	r3, #8
 8016ede:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016ee0:	633a      	str	r2, [r7, #48]	; 0x30
 8016ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ee4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ee8:	e841 2300 	strex	r3, r2, [r1]
 8016eec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d1e5      	bne.n	8016ec0 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	4a15      	ldr	r2, [pc, #84]	; (8016f4c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8016ef8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f00:	693b      	ldr	r3, [r7, #16]
 8016f02:	e853 3f00 	ldrex	r3, [r3]
 8016f06:	60fb      	str	r3, [r7, #12]
   return(result);
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	f043 0320 	orr.w	r3, r3, #32
 8016f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	461a      	mov	r2, r3
 8016f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016f18:	61fb      	str	r3, [r7, #28]
 8016f1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f1c:	69b9      	ldr	r1, [r7, #24]
 8016f1e:	69fa      	ldr	r2, [r7, #28]
 8016f20:	e841 2300 	strex	r3, r2, [r1]
 8016f24:	617b      	str	r3, [r7, #20]
   return(result);
 8016f26:	697b      	ldr	r3, [r7, #20]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d1e6      	bne.n	8016efa <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016f2c:	e007      	b.n	8016f3e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	699a      	ldr	r2, [r3, #24]
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	f042 0208 	orr.w	r2, r2, #8
 8016f3c:	619a      	str	r2, [r3, #24]
}
 8016f3e:	bf00      	nop
 8016f40:	37a0      	adds	r7, #160	; 0xa0
 8016f42:	46bd      	mov	sp, r7
 8016f44:	bd80      	pop	{r7, pc}
 8016f46:	bf00      	nop
 8016f48:	effffffe 	.word	0xeffffffe
 8016f4c:	080167f7 	.word	0x080167f7

08016f50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016f50:	b480      	push	{r7}
 8016f52:	b083      	sub	sp, #12
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8016f58:	bf00      	nop
 8016f5a:	370c      	adds	r7, #12
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f62:	4770      	bx	lr

08016f64 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8016f64:	b480      	push	{r7}
 8016f66:	b083      	sub	sp, #12
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8016f6c:	bf00      	nop
 8016f6e:	370c      	adds	r7, #12
 8016f70:	46bd      	mov	sp, r7
 8016f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f76:	4770      	bx	lr

08016f78 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8016f78:	b480      	push	{r7}
 8016f7a:	b083      	sub	sp, #12
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016f80:	bf00      	nop
 8016f82:	370c      	adds	r7, #12
 8016f84:	46bd      	mov	sp, r7
 8016f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f8a:	4770      	bx	lr

08016f8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016f8c:	b480      	push	{r7}
 8016f8e:	b085      	sub	sp, #20
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8016f9a:	2b01      	cmp	r3, #1
 8016f9c:	d101      	bne.n	8016fa2 <HAL_UARTEx_DisableFifoMode+0x16>
 8016f9e:	2302      	movs	r3, #2
 8016fa0:	e027      	b.n	8016ff2 <HAL_UARTEx_DisableFifoMode+0x66>
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	2201      	movs	r2, #1
 8016fa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	2224      	movs	r2, #36	; 0x24
 8016fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	681a      	ldr	r2, [r3, #0]
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	f022 0201 	bic.w	r2, r2, #1
 8016fc8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8016fd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	68fa      	ldr	r2, [r7, #12]
 8016fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	2220      	movs	r2, #32
 8016fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	2200      	movs	r2, #0
 8016fec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8016ff0:	2300      	movs	r3, #0
}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	3714      	adds	r7, #20
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffc:	4770      	bx	lr

08016ffe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016ffe:	b580      	push	{r7, lr}
 8017000:	b084      	sub	sp, #16
 8017002:	af00      	add	r7, sp, #0
 8017004:	6078      	str	r0, [r7, #4]
 8017006:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801700e:	2b01      	cmp	r3, #1
 8017010:	d101      	bne.n	8017016 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8017012:	2302      	movs	r3, #2
 8017014:	e02d      	b.n	8017072 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	2201      	movs	r2, #1
 801701a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	2224      	movs	r2, #36	; 0x24
 8017022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	681a      	ldr	r2, [r3, #0]
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	f022 0201 	bic.w	r2, r2, #1
 801703c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	689b      	ldr	r3, [r3, #8]
 8017044:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	683a      	ldr	r2, [r7, #0]
 801704e:	430a      	orrs	r2, r1
 8017050:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017052:	6878      	ldr	r0, [r7, #4]
 8017054:	f000 f850 	bl	80170f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	68fa      	ldr	r2, [r7, #12]
 801705e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	2220      	movs	r2, #32
 8017064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	2200      	movs	r2, #0
 801706c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8017070:	2300      	movs	r3, #0
}
 8017072:	4618      	mov	r0, r3
 8017074:	3710      	adds	r7, #16
 8017076:	46bd      	mov	sp, r7
 8017078:	bd80      	pop	{r7, pc}

0801707a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801707a:	b580      	push	{r7, lr}
 801707c:	b084      	sub	sp, #16
 801707e:	af00      	add	r7, sp, #0
 8017080:	6078      	str	r0, [r7, #4]
 8017082:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801708a:	2b01      	cmp	r3, #1
 801708c:	d101      	bne.n	8017092 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801708e:	2302      	movs	r3, #2
 8017090:	e02d      	b.n	80170ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	2201      	movs	r2, #1
 8017096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	2224      	movs	r2, #36	; 0x24
 801709e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	681a      	ldr	r2, [r3, #0]
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	f022 0201 	bic.w	r2, r2, #1
 80170b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	689b      	ldr	r3, [r3, #8]
 80170c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	683a      	ldr	r2, [r7, #0]
 80170ca:	430a      	orrs	r2, r1
 80170cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80170ce:	6878      	ldr	r0, [r7, #4]
 80170d0:	f000 f812 	bl	80170f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	68fa      	ldr	r2, [r7, #12]
 80170da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	2220      	movs	r2, #32
 80170e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	2200      	movs	r2, #0
 80170e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80170ec:	2300      	movs	r3, #0
}
 80170ee:	4618      	mov	r0, r3
 80170f0:	3710      	adds	r7, #16
 80170f2:	46bd      	mov	sp, r7
 80170f4:	bd80      	pop	{r7, pc}
	...

080170f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80170f8:	b480      	push	{r7}
 80170fa:	b085      	sub	sp, #20
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017104:	2b00      	cmp	r3, #0
 8017106:	d108      	bne.n	801711a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	2201      	movs	r2, #1
 801710c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	2201      	movs	r2, #1
 8017114:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8017118:	e031      	b.n	801717e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801711a:	2310      	movs	r3, #16
 801711c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801711e:	2310      	movs	r3, #16
 8017120:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	689b      	ldr	r3, [r3, #8]
 8017128:	0e5b      	lsrs	r3, r3, #25
 801712a:	b2db      	uxtb	r3, r3
 801712c:	f003 0307 	and.w	r3, r3, #7
 8017130:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	689b      	ldr	r3, [r3, #8]
 8017138:	0f5b      	lsrs	r3, r3, #29
 801713a:	b2db      	uxtb	r3, r3
 801713c:	f003 0307 	and.w	r3, r3, #7
 8017140:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017142:	7bbb      	ldrb	r3, [r7, #14]
 8017144:	7b3a      	ldrb	r2, [r7, #12]
 8017146:	4911      	ldr	r1, [pc, #68]	; (801718c <UARTEx_SetNbDataToProcess+0x94>)
 8017148:	5c8a      	ldrb	r2, [r1, r2]
 801714a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801714e:	7b3a      	ldrb	r2, [r7, #12]
 8017150:	490f      	ldr	r1, [pc, #60]	; (8017190 <UARTEx_SetNbDataToProcess+0x98>)
 8017152:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017154:	fb93 f3f2 	sdiv	r3, r3, r2
 8017158:	b29a      	uxth	r2, r3
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017160:	7bfb      	ldrb	r3, [r7, #15]
 8017162:	7b7a      	ldrb	r2, [r7, #13]
 8017164:	4909      	ldr	r1, [pc, #36]	; (801718c <UARTEx_SetNbDataToProcess+0x94>)
 8017166:	5c8a      	ldrb	r2, [r1, r2]
 8017168:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801716c:	7b7a      	ldrb	r2, [r7, #13]
 801716e:	4908      	ldr	r1, [pc, #32]	; (8017190 <UARTEx_SetNbDataToProcess+0x98>)
 8017170:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017172:	fb93 f3f2 	sdiv	r3, r3, r2
 8017176:	b29a      	uxth	r2, r3
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801717e:	bf00      	nop
 8017180:	3714      	adds	r7, #20
 8017182:	46bd      	mov	sp, r7
 8017184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017188:	4770      	bx	lr
 801718a:	bf00      	nop
 801718c:	08018300 	.word	0x08018300
 8017190:	08018308 	.word	0x08018308

08017194 <__errno>:
 8017194:	4b01      	ldr	r3, [pc, #4]	; (801719c <__errno+0x8>)
 8017196:	6818      	ldr	r0, [r3, #0]
 8017198:	4770      	bx	lr
 801719a:	bf00      	nop
 801719c:	20000030 	.word	0x20000030

080171a0 <__libc_init_array>:
 80171a0:	b570      	push	{r4, r5, r6, lr}
 80171a2:	4d0d      	ldr	r5, [pc, #52]	; (80171d8 <__libc_init_array+0x38>)
 80171a4:	4c0d      	ldr	r4, [pc, #52]	; (80171dc <__libc_init_array+0x3c>)
 80171a6:	1b64      	subs	r4, r4, r5
 80171a8:	10a4      	asrs	r4, r4, #2
 80171aa:	2600      	movs	r6, #0
 80171ac:	42a6      	cmp	r6, r4
 80171ae:	d109      	bne.n	80171c4 <__libc_init_array+0x24>
 80171b0:	4d0b      	ldr	r5, [pc, #44]	; (80171e0 <__libc_init_array+0x40>)
 80171b2:	4c0c      	ldr	r4, [pc, #48]	; (80171e4 <__libc_init_array+0x44>)
 80171b4:	f001 f846 	bl	8018244 <_init>
 80171b8:	1b64      	subs	r4, r4, r5
 80171ba:	10a4      	asrs	r4, r4, #2
 80171bc:	2600      	movs	r6, #0
 80171be:	42a6      	cmp	r6, r4
 80171c0:	d105      	bne.n	80171ce <__libc_init_array+0x2e>
 80171c2:	bd70      	pop	{r4, r5, r6, pc}
 80171c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80171c8:	4798      	blx	r3
 80171ca:	3601      	adds	r6, #1
 80171cc:	e7ee      	b.n	80171ac <__libc_init_array+0xc>
 80171ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80171d2:	4798      	blx	r3
 80171d4:	3601      	adds	r6, #1
 80171d6:	e7f2      	b.n	80171be <__libc_init_array+0x1e>
 80171d8:	08018560 	.word	0x08018560
 80171dc:	08018560 	.word	0x08018560
 80171e0:	08018560 	.word	0x08018560
 80171e4:	08018564 	.word	0x08018564

080171e8 <memset>:
 80171e8:	4402      	add	r2, r0
 80171ea:	4603      	mov	r3, r0
 80171ec:	4293      	cmp	r3, r2
 80171ee:	d100      	bne.n	80171f2 <memset+0xa>
 80171f0:	4770      	bx	lr
 80171f2:	f803 1b01 	strb.w	r1, [r3], #1
 80171f6:	e7f9      	b.n	80171ec <memset+0x4>

080171f8 <cos>:
 80171f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80171fa:	eeb0 7b40 	vmov.f64	d7, d0
 80171fe:	ee17 3a90 	vmov	r3, s15
 8017202:	4a21      	ldr	r2, [pc, #132]	; (8017288 <cos+0x90>)
 8017204:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017208:	4293      	cmp	r3, r2
 801720a:	dc06      	bgt.n	801721a <cos+0x22>
 801720c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8017280 <cos+0x88>
 8017210:	b005      	add	sp, #20
 8017212:	f85d eb04 	ldr.w	lr, [sp], #4
 8017216:	f000 bab7 	b.w	8017788 <__kernel_cos>
 801721a:	4a1c      	ldr	r2, [pc, #112]	; (801728c <cos+0x94>)
 801721c:	4293      	cmp	r3, r2
 801721e:	dd04      	ble.n	801722a <cos+0x32>
 8017220:	ee30 0b40 	vsub.f64	d0, d0, d0
 8017224:	b005      	add	sp, #20
 8017226:	f85d fb04 	ldr.w	pc, [sp], #4
 801722a:	4668      	mov	r0, sp
 801722c:	f000 f964 	bl	80174f8 <__ieee754_rem_pio2>
 8017230:	f000 0003 	and.w	r0, r0, #3
 8017234:	2801      	cmp	r0, #1
 8017236:	d009      	beq.n	801724c <cos+0x54>
 8017238:	2802      	cmp	r0, #2
 801723a:	d010      	beq.n	801725e <cos+0x66>
 801723c:	b9b0      	cbnz	r0, 801726c <cos+0x74>
 801723e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017242:	ed9d 0b00 	vldr	d0, [sp]
 8017246:	f000 fa9f 	bl	8017788 <__kernel_cos>
 801724a:	e7eb      	b.n	8017224 <cos+0x2c>
 801724c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017250:	ed9d 0b00 	vldr	d0, [sp]
 8017254:	f000 fd9c 	bl	8017d90 <__kernel_sin>
 8017258:	eeb1 0b40 	vneg.f64	d0, d0
 801725c:	e7e2      	b.n	8017224 <cos+0x2c>
 801725e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017262:	ed9d 0b00 	vldr	d0, [sp]
 8017266:	f000 fa8f 	bl	8017788 <__kernel_cos>
 801726a:	e7f5      	b.n	8017258 <cos+0x60>
 801726c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017270:	ed9d 0b00 	vldr	d0, [sp]
 8017274:	2001      	movs	r0, #1
 8017276:	f000 fd8b 	bl	8017d90 <__kernel_sin>
 801727a:	e7d3      	b.n	8017224 <cos+0x2c>
 801727c:	f3af 8000 	nop.w
	...
 8017288:	3fe921fb 	.word	0x3fe921fb
 801728c:	7fefffff 	.word	0x7fefffff

08017290 <sin>:
 8017290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017292:	eeb0 7b40 	vmov.f64	d7, d0
 8017296:	ee17 3a90 	vmov	r3, s15
 801729a:	4a21      	ldr	r2, [pc, #132]	; (8017320 <sin+0x90>)
 801729c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80172a0:	4293      	cmp	r3, r2
 80172a2:	dc07      	bgt.n	80172b4 <sin+0x24>
 80172a4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8017318 <sin+0x88>
 80172a8:	2000      	movs	r0, #0
 80172aa:	b005      	add	sp, #20
 80172ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80172b0:	f000 bd6e 	b.w	8017d90 <__kernel_sin>
 80172b4:	4a1b      	ldr	r2, [pc, #108]	; (8017324 <sin+0x94>)
 80172b6:	4293      	cmp	r3, r2
 80172b8:	dd04      	ble.n	80172c4 <sin+0x34>
 80172ba:	ee30 0b40 	vsub.f64	d0, d0, d0
 80172be:	b005      	add	sp, #20
 80172c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80172c4:	4668      	mov	r0, sp
 80172c6:	f000 f917 	bl	80174f8 <__ieee754_rem_pio2>
 80172ca:	f000 0003 	and.w	r0, r0, #3
 80172ce:	2801      	cmp	r0, #1
 80172d0:	d00a      	beq.n	80172e8 <sin+0x58>
 80172d2:	2802      	cmp	r0, #2
 80172d4:	d00f      	beq.n	80172f6 <sin+0x66>
 80172d6:	b9c0      	cbnz	r0, 801730a <sin+0x7a>
 80172d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80172dc:	ed9d 0b00 	vldr	d0, [sp]
 80172e0:	2001      	movs	r0, #1
 80172e2:	f000 fd55 	bl	8017d90 <__kernel_sin>
 80172e6:	e7ea      	b.n	80172be <sin+0x2e>
 80172e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80172ec:	ed9d 0b00 	vldr	d0, [sp]
 80172f0:	f000 fa4a 	bl	8017788 <__kernel_cos>
 80172f4:	e7e3      	b.n	80172be <sin+0x2e>
 80172f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80172fa:	ed9d 0b00 	vldr	d0, [sp]
 80172fe:	2001      	movs	r0, #1
 8017300:	f000 fd46 	bl	8017d90 <__kernel_sin>
 8017304:	eeb1 0b40 	vneg.f64	d0, d0
 8017308:	e7d9      	b.n	80172be <sin+0x2e>
 801730a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801730e:	ed9d 0b00 	vldr	d0, [sp]
 8017312:	f000 fa39 	bl	8017788 <__kernel_cos>
 8017316:	e7f5      	b.n	8017304 <sin+0x74>
	...
 8017320:	3fe921fb 	.word	0x3fe921fb
 8017324:	7fefffff 	.word	0x7fefffff

08017328 <atan2>:
 8017328:	f000 b822 	b.w	8017370 <__ieee754_atan2>
 801732c:	0000      	movs	r0, r0
	...

08017330 <sqrt>:
 8017330:	b508      	push	{r3, lr}
 8017332:	ed2d 8b04 	vpush	{d8-d9}
 8017336:	eeb0 8b40 	vmov.f64	d8, d0
 801733a:	f000 fa21 	bl	8017780 <__ieee754_sqrt>
 801733e:	eeb4 8b48 	vcmp.f64	d8, d8
 8017342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017346:	d60c      	bvs.n	8017362 <sqrt+0x32>
 8017348:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8017368 <sqrt+0x38>
 801734c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8017350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017354:	d505      	bpl.n	8017362 <sqrt+0x32>
 8017356:	f7ff ff1d 	bl	8017194 <__errno>
 801735a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801735e:	2321      	movs	r3, #33	; 0x21
 8017360:	6003      	str	r3, [r0, #0]
 8017362:	ecbd 8b04 	vpop	{d8-d9}
 8017366:	bd08      	pop	{r3, pc}
	...

08017370 <__ieee754_atan2>:
 8017370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017372:	eeb0 7b40 	vmov.f64	d7, d0
 8017376:	ee11 6a10 	vmov	r6, s2
 801737a:	ee11 0a90 	vmov	r0, s3
 801737e:	4273      	negs	r3, r6
 8017380:	4f59      	ldr	r7, [pc, #356]	; (80174e8 <__ieee754_atan2+0x178>)
 8017382:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8017386:	4333      	orrs	r3, r6
 8017388:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801738c:	42bb      	cmp	r3, r7
 801738e:	d80d      	bhi.n	80173ac <__ieee754_atan2+0x3c>
 8017390:	ee10 ca10 	vmov	ip, s0
 8017394:	ee17 5a90 	vmov	r5, s15
 8017398:	f1cc 0100 	rsb	r1, ip, #0
 801739c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80173a0:	ea41 010c 	orr.w	r1, r1, ip
 80173a4:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80173a8:	42b9      	cmp	r1, r7
 80173aa:	d904      	bls.n	80173b6 <__ieee754_atan2+0x46>
 80173ac:	ee37 7b01 	vadd.f64	d7, d7, d1
 80173b0:	eeb0 0b47 	vmov.f64	d0, d7
 80173b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173b6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 80173ba:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80173be:	4331      	orrs	r1, r6
 80173c0:	d103      	bne.n	80173ca <__ieee754_atan2+0x5a>
 80173c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80173c6:	f000 bd3b 	b.w	8017e40 <atan>
 80173ca:	1784      	asrs	r4, r0, #30
 80173cc:	f004 0402 	and.w	r4, r4, #2
 80173d0:	ea53 010c 	orrs.w	r1, r3, ip
 80173d4:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 80173d8:	d107      	bne.n	80173ea <__ieee754_atan2+0x7a>
 80173da:	2c02      	cmp	r4, #2
 80173dc:	d05d      	beq.n	801749a <__ieee754_atan2+0x12a>
 80173de:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80174b0 <__ieee754_atan2+0x140>
 80173e2:	2c03      	cmp	r4, #3
 80173e4:	fe06 7b00 	vseleq.f64	d7, d6, d0
 80173e8:	e7e2      	b.n	80173b0 <__ieee754_atan2+0x40>
 80173ea:	ea52 0106 	orrs.w	r1, r2, r6
 80173ee:	d107      	bne.n	8017400 <__ieee754_atan2+0x90>
 80173f0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80174b8 <__ieee754_atan2+0x148>
 80173f4:	ed9f 0b32 	vldr	d0, [pc, #200]	; 80174c0 <__ieee754_atan2+0x150>
 80173f8:	2d00      	cmp	r5, #0
 80173fa:	fe27 7b00 	vselge.f64	d7, d7, d0
 80173fe:	e7d7      	b.n	80173b0 <__ieee754_atan2+0x40>
 8017400:	42ba      	cmp	r2, r7
 8017402:	d10f      	bne.n	8017424 <__ieee754_atan2+0xb4>
 8017404:	4293      	cmp	r3, r2
 8017406:	f104 34ff 	add.w	r4, r4, #4294967295
 801740a:	d107      	bne.n	801741c <__ieee754_atan2+0xac>
 801740c:	2c02      	cmp	r4, #2
 801740e:	d847      	bhi.n	80174a0 <__ieee754_atan2+0x130>
 8017410:	4b36      	ldr	r3, [pc, #216]	; (80174ec <__ieee754_atan2+0x17c>)
 8017412:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8017416:	ed94 7b00 	vldr	d7, [r4]
 801741a:	e7c9      	b.n	80173b0 <__ieee754_atan2+0x40>
 801741c:	2c02      	cmp	r4, #2
 801741e:	d842      	bhi.n	80174a6 <__ieee754_atan2+0x136>
 8017420:	4b33      	ldr	r3, [pc, #204]	; (80174f0 <__ieee754_atan2+0x180>)
 8017422:	e7f6      	b.n	8017412 <__ieee754_atan2+0xa2>
 8017424:	42bb      	cmp	r3, r7
 8017426:	d0e3      	beq.n	80173f0 <__ieee754_atan2+0x80>
 8017428:	1a9b      	subs	r3, r3, r2
 801742a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801742e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017432:	da1a      	bge.n	801746a <__ieee754_atan2+0xfa>
 8017434:	2800      	cmp	r0, #0
 8017436:	da01      	bge.n	801743c <__ieee754_atan2+0xcc>
 8017438:	323c      	adds	r2, #60	; 0x3c
 801743a:	db19      	blt.n	8017470 <__ieee754_atan2+0x100>
 801743c:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8017440:	f000 fdf8 	bl	8018034 <fabs>
 8017444:	f000 fcfc 	bl	8017e40 <atan>
 8017448:	eeb0 7b40 	vmov.f64	d7, d0
 801744c:	2c01      	cmp	r4, #1
 801744e:	d012      	beq.n	8017476 <__ieee754_atan2+0x106>
 8017450:	2c02      	cmp	r4, #2
 8017452:	d019      	beq.n	8017488 <__ieee754_atan2+0x118>
 8017454:	2c00      	cmp	r4, #0
 8017456:	d0ab      	beq.n	80173b0 <__ieee754_atan2+0x40>
 8017458:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 80174c8 <__ieee754_atan2+0x158>
 801745c:	ee37 7b40 	vsub.f64	d7, d7, d0
 8017460:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 80174d0 <__ieee754_atan2+0x160>
 8017464:	ee37 7b40 	vsub.f64	d7, d7, d0
 8017468:	e7a2      	b.n	80173b0 <__ieee754_atan2+0x40>
 801746a:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80174b8 <__ieee754_atan2+0x148>
 801746e:	e7ed      	b.n	801744c <__ieee754_atan2+0xdc>
 8017470:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80174d8 <__ieee754_atan2+0x168>
 8017474:	e7ea      	b.n	801744c <__ieee754_atan2+0xdc>
 8017476:	ee17 1a90 	vmov	r1, s15
 801747a:	ec53 2b17 	vmov	r2, r3, d7
 801747e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017482:	ec43 2b17 	vmov	d7, r2, r3
 8017486:	e793      	b.n	80173b0 <__ieee754_atan2+0x40>
 8017488:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80174c8 <__ieee754_atan2+0x158>
 801748c:	ee37 7b40 	vsub.f64	d7, d7, d0
 8017490:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80174d0 <__ieee754_atan2+0x160>
 8017494:	ee30 7b47 	vsub.f64	d7, d0, d7
 8017498:	e78a      	b.n	80173b0 <__ieee754_atan2+0x40>
 801749a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80174d0 <__ieee754_atan2+0x160>
 801749e:	e787      	b.n	80173b0 <__ieee754_atan2+0x40>
 80174a0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80174e0 <__ieee754_atan2+0x170>
 80174a4:	e784      	b.n	80173b0 <__ieee754_atan2+0x40>
 80174a6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80174d8 <__ieee754_atan2+0x168>
 80174aa:	e781      	b.n	80173b0 <__ieee754_atan2+0x40>
 80174ac:	f3af 8000 	nop.w
 80174b0:	54442d18 	.word	0x54442d18
 80174b4:	c00921fb 	.word	0xc00921fb
 80174b8:	54442d18 	.word	0x54442d18
 80174bc:	3ff921fb 	.word	0x3ff921fb
 80174c0:	54442d18 	.word	0x54442d18
 80174c4:	bff921fb 	.word	0xbff921fb
 80174c8:	33145c07 	.word	0x33145c07
 80174cc:	3ca1a626 	.word	0x3ca1a626
 80174d0:	54442d18 	.word	0x54442d18
 80174d4:	400921fb 	.word	0x400921fb
	...
 80174e0:	54442d18 	.word	0x54442d18
 80174e4:	3fe921fb 	.word	0x3fe921fb
 80174e8:	7ff00000 	.word	0x7ff00000
 80174ec:	08018310 	.word	0x08018310
 80174f0:	08018328 	.word	0x08018328
 80174f4:	00000000 	.word	0x00000000

080174f8 <__ieee754_rem_pio2>:
 80174f8:	b570      	push	{r4, r5, r6, lr}
 80174fa:	eeb0 7b40 	vmov.f64	d7, d0
 80174fe:	ee17 5a90 	vmov	r5, s15
 8017502:	4b99      	ldr	r3, [pc, #612]	; (8017768 <__ieee754_rem_pio2+0x270>)
 8017504:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017508:	429e      	cmp	r6, r3
 801750a:	b088      	sub	sp, #32
 801750c:	4604      	mov	r4, r0
 801750e:	dc07      	bgt.n	8017520 <__ieee754_rem_pio2+0x28>
 8017510:	2200      	movs	r2, #0
 8017512:	2300      	movs	r3, #0
 8017514:	ed84 0b00 	vstr	d0, [r4]
 8017518:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801751c:	2000      	movs	r0, #0
 801751e:	e01b      	b.n	8017558 <__ieee754_rem_pio2+0x60>
 8017520:	4b92      	ldr	r3, [pc, #584]	; (801776c <__ieee754_rem_pio2+0x274>)
 8017522:	429e      	cmp	r6, r3
 8017524:	dc3b      	bgt.n	801759e <__ieee754_rem_pio2+0xa6>
 8017526:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801752a:	2d00      	cmp	r5, #0
 801752c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8017728 <__ieee754_rem_pio2+0x230>
 8017530:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8017534:	dd19      	ble.n	801756a <__ieee754_rem_pio2+0x72>
 8017536:	ee30 7b46 	vsub.f64	d7, d0, d6
 801753a:	429e      	cmp	r6, r3
 801753c:	d00e      	beq.n	801755c <__ieee754_rem_pio2+0x64>
 801753e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8017730 <__ieee754_rem_pio2+0x238>
 8017542:	ee37 5b46 	vsub.f64	d5, d7, d6
 8017546:	ee37 7b45 	vsub.f64	d7, d7, d5
 801754a:	ed84 5b00 	vstr	d5, [r4]
 801754e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017552:	ed84 7b02 	vstr	d7, [r4, #8]
 8017556:	2001      	movs	r0, #1
 8017558:	b008      	add	sp, #32
 801755a:	bd70      	pop	{r4, r5, r6, pc}
 801755c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8017738 <__ieee754_rem_pio2+0x240>
 8017560:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017564:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8017740 <__ieee754_rem_pio2+0x248>
 8017568:	e7eb      	b.n	8017542 <__ieee754_rem_pio2+0x4a>
 801756a:	429e      	cmp	r6, r3
 801756c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8017570:	d00e      	beq.n	8017590 <__ieee754_rem_pio2+0x98>
 8017572:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8017730 <__ieee754_rem_pio2+0x238>
 8017576:	ee37 5b06 	vadd.f64	d5, d7, d6
 801757a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801757e:	ed84 5b00 	vstr	d5, [r4]
 8017582:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017586:	f04f 30ff 	mov.w	r0, #4294967295
 801758a:	ed84 7b02 	vstr	d7, [r4, #8]
 801758e:	e7e3      	b.n	8017558 <__ieee754_rem_pio2+0x60>
 8017590:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017738 <__ieee754_rem_pio2+0x240>
 8017594:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017598:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017740 <__ieee754_rem_pio2+0x248>
 801759c:	e7eb      	b.n	8017576 <__ieee754_rem_pio2+0x7e>
 801759e:	4b74      	ldr	r3, [pc, #464]	; (8017770 <__ieee754_rem_pio2+0x278>)
 80175a0:	429e      	cmp	r6, r3
 80175a2:	dc70      	bgt.n	8017686 <__ieee754_rem_pio2+0x18e>
 80175a4:	f000 fd46 	bl	8018034 <fabs>
 80175a8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80175ac:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8017748 <__ieee754_rem_pio2+0x250>
 80175b0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80175b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80175b8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80175bc:	ee17 0a90 	vmov	r0, s15
 80175c0:	eeb1 4b45 	vneg.f64	d4, d5
 80175c4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8017728 <__ieee754_rem_pio2+0x230>
 80175c8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80175cc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8017730 <__ieee754_rem_pio2+0x238>
 80175d0:	281f      	cmp	r0, #31
 80175d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80175d6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80175da:	dc08      	bgt.n	80175ee <__ieee754_rem_pio2+0xf6>
 80175dc:	4b65      	ldr	r3, [pc, #404]	; (8017774 <__ieee754_rem_pio2+0x27c>)
 80175de:	1e42      	subs	r2, r0, #1
 80175e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80175e4:	42b3      	cmp	r3, r6
 80175e6:	d002      	beq.n	80175ee <__ieee754_rem_pio2+0xf6>
 80175e8:	ed84 6b00 	vstr	d6, [r4]
 80175ec:	e026      	b.n	801763c <__ieee754_rem_pio2+0x144>
 80175ee:	ee16 3a90 	vmov	r3, s13
 80175f2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80175f6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80175fa:	2b10      	cmp	r3, #16
 80175fc:	ea4f 5226 	mov.w	r2, r6, asr #20
 8017600:	ddf2      	ble.n	80175e8 <__ieee754_rem_pio2+0xf0>
 8017602:	eeb0 6b40 	vmov.f64	d6, d0
 8017606:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8017738 <__ieee754_rem_pio2+0x240>
 801760a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8017740 <__ieee754_rem_pio2+0x248>
 801760e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8017612:	ee30 0b46 	vsub.f64	d0, d0, d6
 8017616:	eea4 0b07 	vfma.f64	d0, d4, d7
 801761a:	eeb0 7b40 	vmov.f64	d7, d0
 801761e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8017622:	ee36 3b47 	vsub.f64	d3, d6, d7
 8017626:	ee13 3a90 	vmov	r3, s7
 801762a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801762e:	1ad3      	subs	r3, r2, r3
 8017630:	2b31      	cmp	r3, #49	; 0x31
 8017632:	dc17      	bgt.n	8017664 <__ieee754_rem_pio2+0x16c>
 8017634:	eeb0 0b46 	vmov.f64	d0, d6
 8017638:	ed84 3b00 	vstr	d3, [r4]
 801763c:	ed94 6b00 	vldr	d6, [r4]
 8017640:	2d00      	cmp	r5, #0
 8017642:	ee30 0b46 	vsub.f64	d0, d0, d6
 8017646:	ee30 0b47 	vsub.f64	d0, d0, d7
 801764a:	ed84 0b02 	vstr	d0, [r4, #8]
 801764e:	da83      	bge.n	8017558 <__ieee754_rem_pio2+0x60>
 8017650:	eeb1 6b46 	vneg.f64	d6, d6
 8017654:	eeb1 0b40 	vneg.f64	d0, d0
 8017658:	ed84 6b00 	vstr	d6, [r4]
 801765c:	ed84 0b02 	vstr	d0, [r4, #8]
 8017660:	4240      	negs	r0, r0
 8017662:	e779      	b.n	8017558 <__ieee754_rem_pio2+0x60>
 8017664:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8017750 <__ieee754_rem_pio2+0x258>
 8017668:	eeb0 0b46 	vmov.f64	d0, d6
 801766c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8017670:	ee36 7b40 	vsub.f64	d7, d6, d0
 8017674:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8017758 <__ieee754_rem_pio2+0x260>
 8017678:	eea4 7b03 	vfma.f64	d7, d4, d3
 801767c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8017680:	ee30 6b47 	vsub.f64	d6, d0, d7
 8017684:	e7b0      	b.n	80175e8 <__ieee754_rem_pio2+0xf0>
 8017686:	4b3c      	ldr	r3, [pc, #240]	; (8017778 <__ieee754_rem_pio2+0x280>)
 8017688:	429e      	cmp	r6, r3
 801768a:	dd06      	ble.n	801769a <__ieee754_rem_pio2+0x1a2>
 801768c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8017690:	ed80 7b02 	vstr	d7, [r0, #8]
 8017694:	ed80 7b00 	vstr	d7, [r0]
 8017698:	e740      	b.n	801751c <__ieee754_rem_pio2+0x24>
 801769a:	1532      	asrs	r2, r6, #20
 801769c:	ee10 0a10 	vmov	r0, s0
 80176a0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80176a4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80176a8:	ec41 0b17 	vmov	d7, r0, r1
 80176ac:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80176b0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8017760 <__ieee754_rem_pio2+0x268>
 80176b4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80176b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80176bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80176c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80176c4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80176c8:	a902      	add	r1, sp, #8
 80176ca:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80176ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80176d2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80176d6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80176da:	ed8d 7b06 	vstr	d7, [sp, #24]
 80176de:	2603      	movs	r6, #3
 80176e0:	4608      	mov	r0, r1
 80176e2:	ed91 7b04 	vldr	d7, [r1, #16]
 80176e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80176ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176ee:	4633      	mov	r3, r6
 80176f0:	f1a1 0108 	sub.w	r1, r1, #8
 80176f4:	f106 36ff 	add.w	r6, r6, #4294967295
 80176f8:	d0f3      	beq.n	80176e2 <__ieee754_rem_pio2+0x1ea>
 80176fa:	4920      	ldr	r1, [pc, #128]	; (801777c <__ieee754_rem_pio2+0x284>)
 80176fc:	9101      	str	r1, [sp, #4]
 80176fe:	2102      	movs	r1, #2
 8017700:	9100      	str	r1, [sp, #0]
 8017702:	4621      	mov	r1, r4
 8017704:	f000 f8ac 	bl	8017860 <__kernel_rem_pio2>
 8017708:	2d00      	cmp	r5, #0
 801770a:	f6bf af25 	bge.w	8017558 <__ieee754_rem_pio2+0x60>
 801770e:	ed94 7b00 	vldr	d7, [r4]
 8017712:	eeb1 7b47 	vneg.f64	d7, d7
 8017716:	ed84 7b00 	vstr	d7, [r4]
 801771a:	ed94 7b02 	vldr	d7, [r4, #8]
 801771e:	eeb1 7b47 	vneg.f64	d7, d7
 8017722:	ed84 7b02 	vstr	d7, [r4, #8]
 8017726:	e79b      	b.n	8017660 <__ieee754_rem_pio2+0x168>
 8017728:	54400000 	.word	0x54400000
 801772c:	3ff921fb 	.word	0x3ff921fb
 8017730:	1a626331 	.word	0x1a626331
 8017734:	3dd0b461 	.word	0x3dd0b461
 8017738:	1a600000 	.word	0x1a600000
 801773c:	3dd0b461 	.word	0x3dd0b461
 8017740:	2e037073 	.word	0x2e037073
 8017744:	3ba3198a 	.word	0x3ba3198a
 8017748:	6dc9c883 	.word	0x6dc9c883
 801774c:	3fe45f30 	.word	0x3fe45f30
 8017750:	2e000000 	.word	0x2e000000
 8017754:	3ba3198a 	.word	0x3ba3198a
 8017758:	252049c1 	.word	0x252049c1
 801775c:	397b839a 	.word	0x397b839a
 8017760:	00000000 	.word	0x00000000
 8017764:	41700000 	.word	0x41700000
 8017768:	3fe921fb 	.word	0x3fe921fb
 801776c:	4002d97b 	.word	0x4002d97b
 8017770:	413921fb 	.word	0x413921fb
 8017774:	08018340 	.word	0x08018340
 8017778:	7fefffff 	.word	0x7fefffff
 801777c:	080183c0 	.word	0x080183c0

08017780 <__ieee754_sqrt>:
 8017780:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8017784:	4770      	bx	lr
	...

08017788 <__kernel_cos>:
 8017788:	ee10 1a90 	vmov	r1, s1
 801778c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8017790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017794:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8017798:	da05      	bge.n	80177a6 <__kernel_cos+0x1e>
 801779a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801779e:	ee17 3a90 	vmov	r3, s15
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d03d      	beq.n	8017822 <__kernel_cos+0x9a>
 80177a6:	ee20 3b00 	vmul.f64	d3, d0, d0
 80177aa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8017828 <__kernel_cos+0xa0>
 80177ae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8017830 <__kernel_cos+0xa8>
 80177b2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80177b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017838 <__kernel_cos+0xb0>
 80177ba:	eea6 7b03 	vfma.f64	d7, d6, d3
 80177be:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8017840 <__kernel_cos+0xb8>
 80177c2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80177c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017848 <__kernel_cos+0xc0>
 80177ca:	4b23      	ldr	r3, [pc, #140]	; (8017858 <__kernel_cos+0xd0>)
 80177cc:	eea6 7b03 	vfma.f64	d7, d6, d3
 80177d0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8017850 <__kernel_cos+0xc8>
 80177d4:	4299      	cmp	r1, r3
 80177d6:	eea7 6b03 	vfma.f64	d6, d7, d3
 80177da:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80177de:	ee26 5b03 	vmul.f64	d5, d6, d3
 80177e2:	ee23 7b07 	vmul.f64	d7, d3, d7
 80177e6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80177ea:	eea3 6b05 	vfma.f64	d6, d3, d5
 80177ee:	dc04      	bgt.n	80177fa <__kernel_cos+0x72>
 80177f0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80177f4:	ee34 0b46 	vsub.f64	d0, d4, d6
 80177f8:	4770      	bx	lr
 80177fa:	4b18      	ldr	r3, [pc, #96]	; (801785c <__kernel_cos+0xd4>)
 80177fc:	4299      	cmp	r1, r3
 80177fe:	dc0d      	bgt.n	801781c <__kernel_cos+0x94>
 8017800:	2200      	movs	r2, #0
 8017802:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8017806:	ec43 2b15 	vmov	d5, r2, r3
 801780a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801780e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017812:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017816:	ee30 0b47 	vsub.f64	d0, d0, d7
 801781a:	4770      	bx	lr
 801781c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8017820:	e7f3      	b.n	801780a <__kernel_cos+0x82>
 8017822:	eeb0 0b44 	vmov.f64	d0, d4
 8017826:	4770      	bx	lr
 8017828:	be8838d4 	.word	0xbe8838d4
 801782c:	bda8fae9 	.word	0xbda8fae9
 8017830:	bdb4b1c4 	.word	0xbdb4b1c4
 8017834:	3e21ee9e 	.word	0x3e21ee9e
 8017838:	809c52ad 	.word	0x809c52ad
 801783c:	be927e4f 	.word	0xbe927e4f
 8017840:	19cb1590 	.word	0x19cb1590
 8017844:	3efa01a0 	.word	0x3efa01a0
 8017848:	16c15177 	.word	0x16c15177
 801784c:	bf56c16c 	.word	0xbf56c16c
 8017850:	5555554c 	.word	0x5555554c
 8017854:	3fa55555 	.word	0x3fa55555
 8017858:	3fd33332 	.word	0x3fd33332
 801785c:	3fe90000 	.word	0x3fe90000

08017860 <__kernel_rem_pio2>:
 8017860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017864:	ed2d 8b06 	vpush	{d8-d10}
 8017868:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801786c:	460f      	mov	r7, r1
 801786e:	9002      	str	r0, [sp, #8]
 8017870:	49c5      	ldr	r1, [pc, #788]	; (8017b88 <__kernel_rem_pio2+0x328>)
 8017872:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8017874:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8017878:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801787c:	9301      	str	r3, [sp, #4]
 801787e:	f112 0f14 	cmn.w	r2, #20
 8017882:	bfa8      	it	ge
 8017884:	2018      	movge	r0, #24
 8017886:	f103 31ff 	add.w	r1, r3, #4294967295
 801788a:	bfb8      	it	lt
 801788c:	2000      	movlt	r0, #0
 801788e:	f06f 0417 	mvn.w	r4, #23
 8017892:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8017b70 <__kernel_rem_pio2+0x310>
 8017896:	bfa4      	itt	ge
 8017898:	f1a2 0a03 	subge.w	sl, r2, #3
 801789c:	fb9a f0f0 	sdivge	r0, sl, r0
 80178a0:	fb00 4404 	mla	r4, r0, r4, r4
 80178a4:	1a46      	subs	r6, r0, r1
 80178a6:	4414      	add	r4, r2
 80178a8:	eb09 0c01 	add.w	ip, r9, r1
 80178ac:	ad1a      	add	r5, sp, #104	; 0x68
 80178ae:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80178b2:	2200      	movs	r2, #0
 80178b4:	4562      	cmp	r2, ip
 80178b6:	dd10      	ble.n	80178da <__kernel_rem_pio2+0x7a>
 80178b8:	9a01      	ldr	r2, [sp, #4]
 80178ba:	ab1a      	add	r3, sp, #104	; 0x68
 80178bc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80178c0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80178c4:	f04f 0c00 	mov.w	ip, #0
 80178c8:	45cc      	cmp	ip, r9
 80178ca:	dc26      	bgt.n	801791a <__kernel_rem_pio2+0xba>
 80178cc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8017b70 <__kernel_rem_pio2+0x310>
 80178d0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80178d4:	4616      	mov	r6, r2
 80178d6:	2500      	movs	r5, #0
 80178d8:	e015      	b.n	8017906 <__kernel_rem_pio2+0xa6>
 80178da:	42d6      	cmn	r6, r2
 80178dc:	d409      	bmi.n	80178f2 <__kernel_rem_pio2+0x92>
 80178de:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80178e2:	ee07 3a90 	vmov	s15, r3
 80178e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80178ea:	eca5 7b02 	vstmia	r5!, {d7}
 80178ee:	3201      	adds	r2, #1
 80178f0:	e7e0      	b.n	80178b4 <__kernel_rem_pio2+0x54>
 80178f2:	eeb0 7b46 	vmov.f64	d7, d6
 80178f6:	e7f8      	b.n	80178ea <__kernel_rem_pio2+0x8a>
 80178f8:	ecb8 5b02 	vldmia	r8!, {d5}
 80178fc:	ed96 6b00 	vldr	d6, [r6]
 8017900:	3501      	adds	r5, #1
 8017902:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017906:	428d      	cmp	r5, r1
 8017908:	f1a6 0608 	sub.w	r6, r6, #8
 801790c:	ddf4      	ble.n	80178f8 <__kernel_rem_pio2+0x98>
 801790e:	ecaa 7b02 	vstmia	sl!, {d7}
 8017912:	f10c 0c01 	add.w	ip, ip, #1
 8017916:	3208      	adds	r2, #8
 8017918:	e7d6      	b.n	80178c8 <__kernel_rem_pio2+0x68>
 801791a:	ab06      	add	r3, sp, #24
 801791c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8017b78 <__kernel_rem_pio2+0x318>
 8017920:	ed9f ab97 	vldr	d10, [pc, #604]	; 8017b80 <__kernel_rem_pio2+0x320>
 8017924:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8017928:	9303      	str	r3, [sp, #12]
 801792a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 801792e:	464d      	mov	r5, r9
 8017930:	00eb      	lsls	r3, r5, #3
 8017932:	9304      	str	r3, [sp, #16]
 8017934:	ab92      	add	r3, sp, #584	; 0x248
 8017936:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801793a:	f10d 0b18 	add.w	fp, sp, #24
 801793e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8017940:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8017944:	465e      	mov	r6, fp
 8017946:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801794a:	4628      	mov	r0, r5
 801794c:	2800      	cmp	r0, #0
 801794e:	f1a2 0208 	sub.w	r2, r2, #8
 8017952:	dc4c      	bgt.n	80179ee <__kernel_rem_pio2+0x18e>
 8017954:	4620      	mov	r0, r4
 8017956:	9105      	str	r1, [sp, #20]
 8017958:	f000 fbea 	bl	8018130 <scalbn>
 801795c:	eeb0 8b40 	vmov.f64	d8, d0
 8017960:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8017964:	ee28 0b00 	vmul.f64	d0, d8, d0
 8017968:	f000 fb6e 	bl	8018048 <floor>
 801796c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8017970:	eea0 8b47 	vfms.f64	d8, d0, d7
 8017974:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8017978:	2c00      	cmp	r4, #0
 801797a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801797e:	ee17 8a90 	vmov	r8, s15
 8017982:	ee38 8b40 	vsub.f64	d8, d8, d0
 8017986:	9905      	ldr	r1, [sp, #20]
 8017988:	dd43      	ble.n	8017a12 <__kernel_rem_pio2+0x1b2>
 801798a:	1e68      	subs	r0, r5, #1
 801798c:	ab06      	add	r3, sp, #24
 801798e:	f1c4 0c18 	rsb	ip, r4, #24
 8017992:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8017996:	fa46 f20c 	asr.w	r2, r6, ip
 801799a:	4490      	add	r8, r2
 801799c:	fa02 f20c 	lsl.w	r2, r2, ip
 80179a0:	1ab6      	subs	r6, r6, r2
 80179a2:	f1c4 0217 	rsb	r2, r4, #23
 80179a6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80179aa:	4116      	asrs	r6, r2
 80179ac:	2e00      	cmp	r6, #0
 80179ae:	dd3f      	ble.n	8017a30 <__kernel_rem_pio2+0x1d0>
 80179b0:	f04f 0c00 	mov.w	ip, #0
 80179b4:	f108 0801 	add.w	r8, r8, #1
 80179b8:	4660      	mov	r0, ip
 80179ba:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80179be:	4565      	cmp	r5, ip
 80179c0:	dc6e      	bgt.n	8017aa0 <__kernel_rem_pio2+0x240>
 80179c2:	2c00      	cmp	r4, #0
 80179c4:	dd04      	ble.n	80179d0 <__kernel_rem_pio2+0x170>
 80179c6:	2c01      	cmp	r4, #1
 80179c8:	d07f      	beq.n	8017aca <__kernel_rem_pio2+0x26a>
 80179ca:	2c02      	cmp	r4, #2
 80179cc:	f000 8087 	beq.w	8017ade <__kernel_rem_pio2+0x27e>
 80179d0:	2e02      	cmp	r6, #2
 80179d2:	d12d      	bne.n	8017a30 <__kernel_rem_pio2+0x1d0>
 80179d4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80179d8:	ee30 8b48 	vsub.f64	d8, d0, d8
 80179dc:	b340      	cbz	r0, 8017a30 <__kernel_rem_pio2+0x1d0>
 80179de:	4620      	mov	r0, r4
 80179e0:	9105      	str	r1, [sp, #20]
 80179e2:	f000 fba5 	bl	8018130 <scalbn>
 80179e6:	9905      	ldr	r1, [sp, #20]
 80179e8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80179ec:	e020      	b.n	8017a30 <__kernel_rem_pio2+0x1d0>
 80179ee:	ee20 7b09 	vmul.f64	d7, d0, d9
 80179f2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80179f6:	3801      	subs	r0, #1
 80179f8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80179fc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8017a00:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017a04:	eca6 0a01 	vstmia	r6!, {s0}
 8017a08:	ed92 0b00 	vldr	d0, [r2]
 8017a0c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8017a10:	e79c      	b.n	801794c <__kernel_rem_pio2+0xec>
 8017a12:	d105      	bne.n	8017a20 <__kernel_rem_pio2+0x1c0>
 8017a14:	1e6a      	subs	r2, r5, #1
 8017a16:	ab06      	add	r3, sp, #24
 8017a18:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017a1c:	15f6      	asrs	r6, r6, #23
 8017a1e:	e7c5      	b.n	80179ac <__kernel_rem_pio2+0x14c>
 8017a20:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017a24:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a2c:	da36      	bge.n	8017a9c <__kernel_rem_pio2+0x23c>
 8017a2e:	2600      	movs	r6, #0
 8017a30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a38:	f040 80aa 	bne.w	8017b90 <__kernel_rem_pio2+0x330>
 8017a3c:	f105 3bff 	add.w	fp, r5, #4294967295
 8017a40:	4658      	mov	r0, fp
 8017a42:	2200      	movs	r2, #0
 8017a44:	4548      	cmp	r0, r9
 8017a46:	da52      	bge.n	8017aee <__kernel_rem_pio2+0x28e>
 8017a48:	2a00      	cmp	r2, #0
 8017a4a:	f000 8081 	beq.w	8017b50 <__kernel_rem_pio2+0x2f0>
 8017a4e:	ab06      	add	r3, sp, #24
 8017a50:	3c18      	subs	r4, #24
 8017a52:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	f000 8087 	beq.w	8017b6a <__kernel_rem_pio2+0x30a>
 8017a5c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017a60:	4620      	mov	r0, r4
 8017a62:	f000 fb65 	bl	8018130 <scalbn>
 8017a66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8017a6a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8017b78 <__kernel_rem_pio2+0x318>
 8017a6e:	a96a      	add	r1, sp, #424	; 0x1a8
 8017a70:	f103 0208 	add.w	r2, r3, #8
 8017a74:	1888      	adds	r0, r1, r2
 8017a76:	4659      	mov	r1, fp
 8017a78:	2900      	cmp	r1, #0
 8017a7a:	f280 80b7 	bge.w	8017bec <__kernel_rem_pio2+0x38c>
 8017a7e:	4659      	mov	r1, fp
 8017a80:	2900      	cmp	r1, #0
 8017a82:	f2c0 80d5 	blt.w	8017c30 <__kernel_rem_pio2+0x3d0>
 8017a86:	a86a      	add	r0, sp, #424	; 0x1a8
 8017a88:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8017a8c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8017b70 <__kernel_rem_pio2+0x310>
 8017a90:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8017b8c <__kernel_rem_pio2+0x32c>
 8017a94:	2400      	movs	r4, #0
 8017a96:	ebab 0001 	sub.w	r0, fp, r1
 8017a9a:	e0be      	b.n	8017c1a <__kernel_rem_pio2+0x3ba>
 8017a9c:	2602      	movs	r6, #2
 8017a9e:	e787      	b.n	80179b0 <__kernel_rem_pio2+0x150>
 8017aa0:	f8db 2000 	ldr.w	r2, [fp]
 8017aa4:	b958      	cbnz	r0, 8017abe <__kernel_rem_pio2+0x25e>
 8017aa6:	b122      	cbz	r2, 8017ab2 <__kernel_rem_pio2+0x252>
 8017aa8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8017aac:	f8cb 2000 	str.w	r2, [fp]
 8017ab0:	2201      	movs	r2, #1
 8017ab2:	f10c 0c01 	add.w	ip, ip, #1
 8017ab6:	f10b 0b04 	add.w	fp, fp, #4
 8017aba:	4610      	mov	r0, r2
 8017abc:	e77f      	b.n	80179be <__kernel_rem_pio2+0x15e>
 8017abe:	ebae 0202 	sub.w	r2, lr, r2
 8017ac2:	f8cb 2000 	str.w	r2, [fp]
 8017ac6:	4602      	mov	r2, r0
 8017ac8:	e7f3      	b.n	8017ab2 <__kernel_rem_pio2+0x252>
 8017aca:	f105 3cff 	add.w	ip, r5, #4294967295
 8017ace:	ab06      	add	r3, sp, #24
 8017ad0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8017ad4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8017ad8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8017adc:	e778      	b.n	80179d0 <__kernel_rem_pio2+0x170>
 8017ade:	f105 3cff 	add.w	ip, r5, #4294967295
 8017ae2:	ab06      	add	r3, sp, #24
 8017ae4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8017ae8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8017aec:	e7f4      	b.n	8017ad8 <__kernel_rem_pio2+0x278>
 8017aee:	ab06      	add	r3, sp, #24
 8017af0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017af4:	3801      	subs	r0, #1
 8017af6:	431a      	orrs	r2, r3
 8017af8:	e7a4      	b.n	8017a44 <__kernel_rem_pio2+0x1e4>
 8017afa:	f10c 0c01 	add.w	ip, ip, #1
 8017afe:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8017b02:	2800      	cmp	r0, #0
 8017b04:	d0f9      	beq.n	8017afa <__kernel_rem_pio2+0x29a>
 8017b06:	9b04      	ldr	r3, [sp, #16]
 8017b08:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8017b0c:	eb0d 0203 	add.w	r2, sp, r3
 8017b10:	9b01      	ldr	r3, [sp, #4]
 8017b12:	18e8      	adds	r0, r5, r3
 8017b14:	ab1a      	add	r3, sp, #104	; 0x68
 8017b16:	1c6e      	adds	r6, r5, #1
 8017b18:	3a98      	subs	r2, #152	; 0x98
 8017b1a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8017b1e:	4465      	add	r5, ip
 8017b20:	42b5      	cmp	r5, r6
 8017b22:	f6ff af05 	blt.w	8017930 <__kernel_rem_pio2+0xd0>
 8017b26:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8017b2a:	f8dd e008 	ldr.w	lr, [sp, #8]
 8017b2e:	ee07 3a90 	vmov	s15, r3
 8017b32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017b36:	f04f 0c00 	mov.w	ip, #0
 8017b3a:	eca0 7b02 	vstmia	r0!, {d7}
 8017b3e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8017b70 <__kernel_rem_pio2+0x310>
 8017b42:	4680      	mov	r8, r0
 8017b44:	458c      	cmp	ip, r1
 8017b46:	dd07      	ble.n	8017b58 <__kernel_rem_pio2+0x2f8>
 8017b48:	eca2 7b02 	vstmia	r2!, {d7}
 8017b4c:	3601      	adds	r6, #1
 8017b4e:	e7e7      	b.n	8017b20 <__kernel_rem_pio2+0x2c0>
 8017b50:	9a03      	ldr	r2, [sp, #12]
 8017b52:	f04f 0c01 	mov.w	ip, #1
 8017b56:	e7d2      	b.n	8017afe <__kernel_rem_pio2+0x29e>
 8017b58:	ecbe 5b02 	vldmia	lr!, {d5}
 8017b5c:	ed38 6b02 	vldmdb	r8!, {d6}
 8017b60:	f10c 0c01 	add.w	ip, ip, #1
 8017b64:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017b68:	e7ec      	b.n	8017b44 <__kernel_rem_pio2+0x2e4>
 8017b6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017b6e:	e76e      	b.n	8017a4e <__kernel_rem_pio2+0x1ee>
	...
 8017b7c:	3e700000 	.word	0x3e700000
 8017b80:	00000000 	.word	0x00000000
 8017b84:	41700000 	.word	0x41700000
 8017b88:	08018508 	.word	0x08018508
 8017b8c:	080184c8 	.word	0x080184c8
 8017b90:	4260      	negs	r0, r4
 8017b92:	eeb0 0b48 	vmov.f64	d0, d8
 8017b96:	f000 facb 	bl	8018130 <scalbn>
 8017b9a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8017d78 <__kernel_rem_pio2+0x518>
 8017b9e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8017ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ba6:	db18      	blt.n	8017bda <__kernel_rem_pio2+0x37a>
 8017ba8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8017d80 <__kernel_rem_pio2+0x520>
 8017bac:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017bb0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017bb4:	aa06      	add	r2, sp, #24
 8017bb6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8017bba:	eea5 0b46 	vfms.f64	d0, d5, d6
 8017bbe:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017bc2:	f105 0b01 	add.w	fp, r5, #1
 8017bc6:	ee10 3a10 	vmov	r3, s0
 8017bca:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8017bce:	ee17 3a10 	vmov	r3, s14
 8017bd2:	3418      	adds	r4, #24
 8017bd4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8017bd8:	e740      	b.n	8017a5c <__kernel_rem_pio2+0x1fc>
 8017bda:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017bde:	aa06      	add	r2, sp, #24
 8017be0:	ee10 3a10 	vmov	r3, s0
 8017be4:	46ab      	mov	fp, r5
 8017be6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8017bea:	e737      	b.n	8017a5c <__kernel_rem_pio2+0x1fc>
 8017bec:	ac06      	add	r4, sp, #24
 8017bee:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8017bf2:	9401      	str	r4, [sp, #4]
 8017bf4:	ee07 4a90 	vmov	s15, r4
 8017bf8:	3901      	subs	r1, #1
 8017bfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017bfe:	ee27 7b00 	vmul.f64	d7, d7, d0
 8017c02:	ee20 0b06 	vmul.f64	d0, d0, d6
 8017c06:	ed20 7b02 	vstmdb	r0!, {d7}
 8017c0a:	e735      	b.n	8017a78 <__kernel_rem_pio2+0x218>
 8017c0c:	ecbc 5b02 	vldmia	ip!, {d5}
 8017c10:	ecb5 6b02 	vldmia	r5!, {d6}
 8017c14:	3401      	adds	r4, #1
 8017c16:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017c1a:	454c      	cmp	r4, r9
 8017c1c:	dc01      	bgt.n	8017c22 <__kernel_rem_pio2+0x3c2>
 8017c1e:	4284      	cmp	r4, r0
 8017c20:	ddf4      	ble.n	8017c0c <__kernel_rem_pio2+0x3ac>
 8017c22:	ac42      	add	r4, sp, #264	; 0x108
 8017c24:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8017c28:	ed80 7b00 	vstr	d7, [r0]
 8017c2c:	3901      	subs	r1, #1
 8017c2e:	e727      	b.n	8017a80 <__kernel_rem_pio2+0x220>
 8017c30:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8017c32:	2902      	cmp	r1, #2
 8017c34:	dc0a      	bgt.n	8017c4c <__kernel_rem_pio2+0x3ec>
 8017c36:	2900      	cmp	r1, #0
 8017c38:	dc2c      	bgt.n	8017c94 <__kernel_rem_pio2+0x434>
 8017c3a:	d045      	beq.n	8017cc8 <__kernel_rem_pio2+0x468>
 8017c3c:	f008 0007 	and.w	r0, r8, #7
 8017c40:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8017c44:	ecbd 8b06 	vpop	{d8-d10}
 8017c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c4c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8017c4e:	2a03      	cmp	r2, #3
 8017c50:	d1f4      	bne.n	8017c3c <__kernel_rem_pio2+0x3dc>
 8017c52:	aa42      	add	r2, sp, #264	; 0x108
 8017c54:	4413      	add	r3, r2
 8017c56:	461a      	mov	r2, r3
 8017c58:	4619      	mov	r1, r3
 8017c5a:	4658      	mov	r0, fp
 8017c5c:	2800      	cmp	r0, #0
 8017c5e:	f1a1 0108 	sub.w	r1, r1, #8
 8017c62:	dc54      	bgt.n	8017d0e <__kernel_rem_pio2+0x4ae>
 8017c64:	4659      	mov	r1, fp
 8017c66:	2901      	cmp	r1, #1
 8017c68:	f1a2 0208 	sub.w	r2, r2, #8
 8017c6c:	dc5f      	bgt.n	8017d2e <__kernel_rem_pio2+0x4ce>
 8017c6e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8017d88 <__kernel_rem_pio2+0x528>
 8017c72:	3308      	adds	r3, #8
 8017c74:	f1bb 0f01 	cmp.w	fp, #1
 8017c78:	dc69      	bgt.n	8017d4e <__kernel_rem_pio2+0x4ee>
 8017c7a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8017c7e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8017c82:	2e00      	cmp	r6, #0
 8017c84:	d16a      	bne.n	8017d5c <__kernel_rem_pio2+0x4fc>
 8017c86:	ed87 5b00 	vstr	d5, [r7]
 8017c8a:	ed87 6b02 	vstr	d6, [r7, #8]
 8017c8e:	ed87 7b04 	vstr	d7, [r7, #16]
 8017c92:	e7d3      	b.n	8017c3c <__kernel_rem_pio2+0x3dc>
 8017c94:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8017d88 <__kernel_rem_pio2+0x528>
 8017c98:	ab42      	add	r3, sp, #264	; 0x108
 8017c9a:	441a      	add	r2, r3
 8017c9c:	465b      	mov	r3, fp
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	da26      	bge.n	8017cf0 <__kernel_rem_pio2+0x490>
 8017ca2:	b35e      	cbz	r6, 8017cfc <__kernel_rem_pio2+0x49c>
 8017ca4:	eeb1 7b46 	vneg.f64	d7, d6
 8017ca8:	ed87 7b00 	vstr	d7, [r7]
 8017cac:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8017cb0:	aa44      	add	r2, sp, #272	; 0x110
 8017cb2:	2301      	movs	r3, #1
 8017cb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017cb8:	459b      	cmp	fp, r3
 8017cba:	da22      	bge.n	8017d02 <__kernel_rem_pio2+0x4a2>
 8017cbc:	b10e      	cbz	r6, 8017cc2 <__kernel_rem_pio2+0x462>
 8017cbe:	eeb1 7b47 	vneg.f64	d7, d7
 8017cc2:	ed87 7b02 	vstr	d7, [r7, #8]
 8017cc6:	e7b9      	b.n	8017c3c <__kernel_rem_pio2+0x3dc>
 8017cc8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8017d88 <__kernel_rem_pio2+0x528>
 8017ccc:	ab42      	add	r3, sp, #264	; 0x108
 8017cce:	441a      	add	r2, r3
 8017cd0:	f1bb 0f00 	cmp.w	fp, #0
 8017cd4:	da05      	bge.n	8017ce2 <__kernel_rem_pio2+0x482>
 8017cd6:	b10e      	cbz	r6, 8017cdc <__kernel_rem_pio2+0x47c>
 8017cd8:	eeb1 7b47 	vneg.f64	d7, d7
 8017cdc:	ed87 7b00 	vstr	d7, [r7]
 8017ce0:	e7ac      	b.n	8017c3c <__kernel_rem_pio2+0x3dc>
 8017ce2:	ed32 6b02 	vldmdb	r2!, {d6}
 8017ce6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017cea:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017cee:	e7ef      	b.n	8017cd0 <__kernel_rem_pio2+0x470>
 8017cf0:	ed32 7b02 	vldmdb	r2!, {d7}
 8017cf4:	3b01      	subs	r3, #1
 8017cf6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8017cfa:	e7d0      	b.n	8017c9e <__kernel_rem_pio2+0x43e>
 8017cfc:	eeb0 7b46 	vmov.f64	d7, d6
 8017d00:	e7d2      	b.n	8017ca8 <__kernel_rem_pio2+0x448>
 8017d02:	ecb2 6b02 	vldmia	r2!, {d6}
 8017d06:	3301      	adds	r3, #1
 8017d08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017d0c:	e7d4      	b.n	8017cb8 <__kernel_rem_pio2+0x458>
 8017d0e:	ed91 7b00 	vldr	d7, [r1]
 8017d12:	ed91 5b02 	vldr	d5, [r1, #8]
 8017d16:	3801      	subs	r0, #1
 8017d18:	ee37 6b05 	vadd.f64	d6, d7, d5
 8017d1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017d20:	ed81 6b00 	vstr	d6, [r1]
 8017d24:	ee37 7b05 	vadd.f64	d7, d7, d5
 8017d28:	ed81 7b02 	vstr	d7, [r1, #8]
 8017d2c:	e796      	b.n	8017c5c <__kernel_rem_pio2+0x3fc>
 8017d2e:	ed92 7b00 	vldr	d7, [r2]
 8017d32:	ed92 5b02 	vldr	d5, [r2, #8]
 8017d36:	3901      	subs	r1, #1
 8017d38:	ee37 6b05 	vadd.f64	d6, d7, d5
 8017d3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017d40:	ed82 6b00 	vstr	d6, [r2]
 8017d44:	ee37 7b05 	vadd.f64	d7, d7, d5
 8017d48:	ed82 7b02 	vstr	d7, [r2, #8]
 8017d4c:	e78b      	b.n	8017c66 <__kernel_rem_pio2+0x406>
 8017d4e:	ed33 6b02 	vldmdb	r3!, {d6}
 8017d52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017d56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017d5a:	e78b      	b.n	8017c74 <__kernel_rem_pio2+0x414>
 8017d5c:	eeb1 5b45 	vneg.f64	d5, d5
 8017d60:	eeb1 6b46 	vneg.f64	d6, d6
 8017d64:	ed87 5b00 	vstr	d5, [r7]
 8017d68:	eeb1 7b47 	vneg.f64	d7, d7
 8017d6c:	ed87 6b02 	vstr	d6, [r7, #8]
 8017d70:	e78d      	b.n	8017c8e <__kernel_rem_pio2+0x42e>
 8017d72:	bf00      	nop
 8017d74:	f3af 8000 	nop.w
 8017d78:	00000000 	.word	0x00000000
 8017d7c:	41700000 	.word	0x41700000
 8017d80:	00000000 	.word	0x00000000
 8017d84:	3e700000 	.word	0x3e700000
	...

08017d90 <__kernel_sin>:
 8017d90:	ee10 3a90 	vmov	r3, s1
 8017d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017d98:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8017d9c:	da04      	bge.n	8017da8 <__kernel_sin+0x18>
 8017d9e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8017da2:	ee17 3a90 	vmov	r3, s15
 8017da6:	b35b      	cbz	r3, 8017e00 <__kernel_sin+0x70>
 8017da8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8017dac:	ee20 5b06 	vmul.f64	d5, d0, d6
 8017db0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8017e08 <__kernel_sin+0x78>
 8017db4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017e10 <__kernel_sin+0x80>
 8017db8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8017dbc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8017e18 <__kernel_sin+0x88>
 8017dc0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8017dc4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017e20 <__kernel_sin+0x90>
 8017dc8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8017dcc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8017e28 <__kernel_sin+0x98>
 8017dd0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8017dd4:	b930      	cbnz	r0, 8017de4 <__kernel_sin+0x54>
 8017dd6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017e30 <__kernel_sin+0xa0>
 8017dda:	eea6 4b07 	vfma.f64	d4, d6, d7
 8017dde:	eea4 0b05 	vfma.f64	d0, d4, d5
 8017de2:	4770      	bx	lr
 8017de4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8017de8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8017dec:	eea1 7b04 	vfma.f64	d7, d1, d4
 8017df0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8017df4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8017e38 <__kernel_sin+0xa8>
 8017df8:	eea5 1b07 	vfma.f64	d1, d5, d7
 8017dfc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8017e00:	4770      	bx	lr
 8017e02:	bf00      	nop
 8017e04:	f3af 8000 	nop.w
 8017e08:	5acfd57c 	.word	0x5acfd57c
 8017e0c:	3de5d93a 	.word	0x3de5d93a
 8017e10:	8a2b9ceb 	.word	0x8a2b9ceb
 8017e14:	be5ae5e6 	.word	0xbe5ae5e6
 8017e18:	57b1fe7d 	.word	0x57b1fe7d
 8017e1c:	3ec71de3 	.word	0x3ec71de3
 8017e20:	19c161d5 	.word	0x19c161d5
 8017e24:	bf2a01a0 	.word	0xbf2a01a0
 8017e28:	1110f8a6 	.word	0x1110f8a6
 8017e2c:	3f811111 	.word	0x3f811111
 8017e30:	55555549 	.word	0x55555549
 8017e34:	bfc55555 	.word	0xbfc55555
 8017e38:	55555549 	.word	0x55555549
 8017e3c:	3fc55555 	.word	0x3fc55555

08017e40 <atan>:
 8017e40:	b538      	push	{r3, r4, r5, lr}
 8017e42:	eeb0 7b40 	vmov.f64	d7, d0
 8017e46:	ee17 5a90 	vmov	r5, s15
 8017e4a:	4b73      	ldr	r3, [pc, #460]	; (8018018 <atan+0x1d8>)
 8017e4c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8017e50:	429c      	cmp	r4, r3
 8017e52:	dd13      	ble.n	8017e7c <atan+0x3c>
 8017e54:	4b71      	ldr	r3, [pc, #452]	; (801801c <atan+0x1dc>)
 8017e56:	429c      	cmp	r4, r3
 8017e58:	dc03      	bgt.n	8017e62 <atan+0x22>
 8017e5a:	d107      	bne.n	8017e6c <atan+0x2c>
 8017e5c:	ee10 3a10 	vmov	r3, s0
 8017e60:	b123      	cbz	r3, 8017e6c <atan+0x2c>
 8017e62:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017e66:	eeb0 0b47 	vmov.f64	d0, d7
 8017e6a:	bd38      	pop	{r3, r4, r5, pc}
 8017e6c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8017fa8 <atan+0x168>
 8017e70:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8017fb0 <atan+0x170>
 8017e74:	2d00      	cmp	r5, #0
 8017e76:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8017e7a:	e7f4      	b.n	8017e66 <atan+0x26>
 8017e7c:	4b68      	ldr	r3, [pc, #416]	; (8018020 <atan+0x1e0>)
 8017e7e:	429c      	cmp	r4, r3
 8017e80:	dc11      	bgt.n	8017ea6 <atan+0x66>
 8017e82:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017e86:	429c      	cmp	r4, r3
 8017e88:	dc0a      	bgt.n	8017ea0 <atan+0x60>
 8017e8a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8017e8e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8017fb8 <atan+0x178>
 8017e92:	ee30 6b06 	vadd.f64	d6, d0, d6
 8017e96:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8017e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e9e:	dce2      	bgt.n	8017e66 <atan+0x26>
 8017ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8017ea4:	e013      	b.n	8017ece <atan+0x8e>
 8017ea6:	f000 f8c5 	bl	8018034 <fabs>
 8017eaa:	4b5e      	ldr	r3, [pc, #376]	; (8018024 <atan+0x1e4>)
 8017eac:	429c      	cmp	r4, r3
 8017eae:	dc4f      	bgt.n	8017f50 <atan+0x110>
 8017eb0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8017eb4:	429c      	cmp	r4, r3
 8017eb6:	dc41      	bgt.n	8017f3c <atan+0xfc>
 8017eb8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8017ebc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8017ec6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8017eca:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8017ece:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8017fc0 <atan+0x180>
 8017ed2:	ee27 4b07 	vmul.f64	d4, d7, d7
 8017ed6:	ee24 5b04 	vmul.f64	d5, d4, d4
 8017eda:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8017fc8 <atan+0x188>
 8017ede:	eea5 3b06 	vfma.f64	d3, d5, d6
 8017ee2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8017fd0 <atan+0x190>
 8017ee6:	eea3 6b05 	vfma.f64	d6, d3, d5
 8017eea:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8017fd8 <atan+0x198>
 8017eee:	eea6 3b05 	vfma.f64	d3, d6, d5
 8017ef2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8017fe0 <atan+0x1a0>
 8017ef6:	eea3 6b05 	vfma.f64	d6, d3, d5
 8017efa:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8017fe8 <atan+0x1a8>
 8017efe:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8017ff0 <atan+0x1b0>
 8017f02:	eea6 3b05 	vfma.f64	d3, d6, d5
 8017f06:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8017ff8 <atan+0x1b8>
 8017f0a:	eea5 2b06 	vfma.f64	d2, d5, d6
 8017f0e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8018000 <atan+0x1c0>
 8017f12:	eea2 6b05 	vfma.f64	d6, d2, d5
 8017f16:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8018008 <atan+0x1c8>
 8017f1a:	eea6 2b05 	vfma.f64	d2, d6, d5
 8017f1e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8018010 <atan+0x1d0>
 8017f22:	1c5a      	adds	r2, r3, #1
 8017f24:	eea2 6b05 	vfma.f64	d6, d2, d5
 8017f28:	ee26 6b05 	vmul.f64	d6, d6, d5
 8017f2c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8017f30:	ee27 6b06 	vmul.f64	d6, d7, d6
 8017f34:	d121      	bne.n	8017f7a <atan+0x13a>
 8017f36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017f3a:	e794      	b.n	8017e66 <atan+0x26>
 8017f3c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8017f40:	2301      	movs	r3, #1
 8017f42:	ee30 6b47 	vsub.f64	d6, d0, d7
 8017f46:	ee30 0b07 	vadd.f64	d0, d0, d7
 8017f4a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8017f4e:	e7be      	b.n	8017ece <atan+0x8e>
 8017f50:	4b35      	ldr	r3, [pc, #212]	; (8018028 <atan+0x1e8>)
 8017f52:	429c      	cmp	r4, r3
 8017f54:	da0b      	bge.n	8017f6e <atan+0x12e>
 8017f56:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8017f5a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017f5e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8017f62:	eea0 6b07 	vfma.f64	d6, d0, d7
 8017f66:	2302      	movs	r3, #2
 8017f68:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8017f6c:	e7af      	b.n	8017ece <atan+0x8e>
 8017f6e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8017f72:	2303      	movs	r3, #3
 8017f74:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8017f78:	e7a9      	b.n	8017ece <atan+0x8e>
 8017f7a:	4a2c      	ldr	r2, [pc, #176]	; (801802c <atan+0x1ec>)
 8017f7c:	492c      	ldr	r1, [pc, #176]	; (8018030 <atan+0x1f0>)
 8017f7e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017f82:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8017f86:	ed93 5b00 	vldr	d5, [r3]
 8017f8a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017f8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8017f92:	ed92 6b00 	vldr	d6, [r2]
 8017f96:	2d00      	cmp	r5, #0
 8017f98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8017f9c:	bfb8      	it	lt
 8017f9e:	eeb1 7b47 	vneglt.f64	d7, d7
 8017fa2:	e760      	b.n	8017e66 <atan+0x26>
 8017fa4:	f3af 8000 	nop.w
 8017fa8:	54442d18 	.word	0x54442d18
 8017fac:	3ff921fb 	.word	0x3ff921fb
 8017fb0:	54442d18 	.word	0x54442d18
 8017fb4:	bff921fb 	.word	0xbff921fb
 8017fb8:	8800759c 	.word	0x8800759c
 8017fbc:	7e37e43c 	.word	0x7e37e43c
 8017fc0:	e322da11 	.word	0xe322da11
 8017fc4:	3f90ad3a 	.word	0x3f90ad3a
 8017fc8:	24760deb 	.word	0x24760deb
 8017fcc:	3fa97b4b 	.word	0x3fa97b4b
 8017fd0:	a0d03d51 	.word	0xa0d03d51
 8017fd4:	3fb10d66 	.word	0x3fb10d66
 8017fd8:	c54c206e 	.word	0xc54c206e
 8017fdc:	3fb745cd 	.word	0x3fb745cd
 8017fe0:	920083ff 	.word	0x920083ff
 8017fe4:	3fc24924 	.word	0x3fc24924
 8017fe8:	5555550d 	.word	0x5555550d
 8017fec:	3fd55555 	.word	0x3fd55555
 8017ff0:	52defd9a 	.word	0x52defd9a
 8017ff4:	bfadde2d 	.word	0xbfadde2d
 8017ff8:	2c6a6c2f 	.word	0x2c6a6c2f
 8017ffc:	bfa2b444 	.word	0xbfa2b444
 8018000:	af749a6d 	.word	0xaf749a6d
 8018004:	bfb3b0f2 	.word	0xbfb3b0f2
 8018008:	fe231671 	.word	0xfe231671
 801800c:	bfbc71c6 	.word	0xbfbc71c6
 8018010:	9998ebc4 	.word	0x9998ebc4
 8018014:	bfc99999 	.word	0xbfc99999
 8018018:	440fffff 	.word	0x440fffff
 801801c:	7ff00000 	.word	0x7ff00000
 8018020:	3fdbffff 	.word	0x3fdbffff
 8018024:	3ff2ffff 	.word	0x3ff2ffff
 8018028:	40038000 	.word	0x40038000
 801802c:	08018518 	.word	0x08018518
 8018030:	08018538 	.word	0x08018538

08018034 <fabs>:
 8018034:	ec51 0b10 	vmov	r0, r1, d0
 8018038:	ee10 2a10 	vmov	r2, s0
 801803c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018040:	ec43 2b10 	vmov	d0, r2, r3
 8018044:	4770      	bx	lr
	...

08018048 <floor>:
 8018048:	ee10 1a90 	vmov	r1, s1
 801804c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018050:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8018054:	2b13      	cmp	r3, #19
 8018056:	b530      	push	{r4, r5, lr}
 8018058:	ee10 0a10 	vmov	r0, s0
 801805c:	ee10 5a10 	vmov	r5, s0
 8018060:	dc31      	bgt.n	80180c6 <floor+0x7e>
 8018062:	2b00      	cmp	r3, #0
 8018064:	da15      	bge.n	8018092 <floor+0x4a>
 8018066:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018120 <floor+0xd8>
 801806a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801806e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018076:	dd07      	ble.n	8018088 <floor+0x40>
 8018078:	2900      	cmp	r1, #0
 801807a:	da4e      	bge.n	801811a <floor+0xd2>
 801807c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018080:	4318      	orrs	r0, r3
 8018082:	d001      	beq.n	8018088 <floor+0x40>
 8018084:	4928      	ldr	r1, [pc, #160]	; (8018128 <floor+0xe0>)
 8018086:	2000      	movs	r0, #0
 8018088:	460b      	mov	r3, r1
 801808a:	4602      	mov	r2, r0
 801808c:	ec43 2b10 	vmov	d0, r2, r3
 8018090:	e020      	b.n	80180d4 <floor+0x8c>
 8018092:	4a26      	ldr	r2, [pc, #152]	; (801812c <floor+0xe4>)
 8018094:	411a      	asrs	r2, r3
 8018096:	ea01 0402 	and.w	r4, r1, r2
 801809a:	4304      	orrs	r4, r0
 801809c:	d01a      	beq.n	80180d4 <floor+0x8c>
 801809e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018120 <floor+0xd8>
 80180a2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80180a6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80180aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ae:	ddeb      	ble.n	8018088 <floor+0x40>
 80180b0:	2900      	cmp	r1, #0
 80180b2:	bfbe      	ittt	lt
 80180b4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80180b8:	fa40 f303 	asrlt.w	r3, r0, r3
 80180bc:	18c9      	addlt	r1, r1, r3
 80180be:	ea21 0102 	bic.w	r1, r1, r2
 80180c2:	2000      	movs	r0, #0
 80180c4:	e7e0      	b.n	8018088 <floor+0x40>
 80180c6:	2b33      	cmp	r3, #51	; 0x33
 80180c8:	dd05      	ble.n	80180d6 <floor+0x8e>
 80180ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80180ce:	d101      	bne.n	80180d4 <floor+0x8c>
 80180d0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80180d4:	bd30      	pop	{r4, r5, pc}
 80180d6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80180da:	f04f 32ff 	mov.w	r2, #4294967295
 80180de:	40e2      	lsrs	r2, r4
 80180e0:	4202      	tst	r2, r0
 80180e2:	d0f7      	beq.n	80180d4 <floor+0x8c>
 80180e4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8018120 <floor+0xd8>
 80180e8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80180ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80180f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180f4:	ddc8      	ble.n	8018088 <floor+0x40>
 80180f6:	2900      	cmp	r1, #0
 80180f8:	da02      	bge.n	8018100 <floor+0xb8>
 80180fa:	2b14      	cmp	r3, #20
 80180fc:	d103      	bne.n	8018106 <floor+0xbe>
 80180fe:	3101      	adds	r1, #1
 8018100:	ea20 0002 	bic.w	r0, r0, r2
 8018104:	e7c0      	b.n	8018088 <floor+0x40>
 8018106:	2401      	movs	r4, #1
 8018108:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801810c:	fa04 f303 	lsl.w	r3, r4, r3
 8018110:	4418      	add	r0, r3
 8018112:	42a8      	cmp	r0, r5
 8018114:	bf38      	it	cc
 8018116:	1909      	addcc	r1, r1, r4
 8018118:	e7f2      	b.n	8018100 <floor+0xb8>
 801811a:	2000      	movs	r0, #0
 801811c:	4601      	mov	r1, r0
 801811e:	e7b3      	b.n	8018088 <floor+0x40>
 8018120:	8800759c 	.word	0x8800759c
 8018124:	7e37e43c 	.word	0x7e37e43c
 8018128:	bff00000 	.word	0xbff00000
 801812c:	000fffff 	.word	0x000fffff

08018130 <scalbn>:
 8018130:	ee10 1a90 	vmov	r1, s1
 8018134:	b510      	push	{r4, lr}
 8018136:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801813a:	b98c      	cbnz	r4, 8018160 <scalbn+0x30>
 801813c:	ee10 3a10 	vmov	r3, s0
 8018140:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018144:	430b      	orrs	r3, r1
 8018146:	d011      	beq.n	801816c <scalbn+0x3c>
 8018148:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8018210 <scalbn+0xe0>
 801814c:	4b3c      	ldr	r3, [pc, #240]	; (8018240 <scalbn+0x110>)
 801814e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018152:	4298      	cmp	r0, r3
 8018154:	da0b      	bge.n	801816e <scalbn+0x3e>
 8018156:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8018218 <scalbn+0xe8>
 801815a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801815e:	e005      	b.n	801816c <scalbn+0x3c>
 8018160:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8018164:	429c      	cmp	r4, r3
 8018166:	d107      	bne.n	8018178 <scalbn+0x48>
 8018168:	ee30 0b00 	vadd.f64	d0, d0, d0
 801816c:	bd10      	pop	{r4, pc}
 801816e:	ee10 1a90 	vmov	r1, s1
 8018172:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8018176:	3c36      	subs	r4, #54	; 0x36
 8018178:	4404      	add	r4, r0
 801817a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801817e:	429c      	cmp	r4, r3
 8018180:	dd0d      	ble.n	801819e <scalbn+0x6e>
 8018182:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8018220 <scalbn+0xf0>
 8018186:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8018228 <scalbn+0xf8>
 801818a:	eeb0 6b47 	vmov.f64	d6, d7
 801818e:	ee10 3a90 	vmov	r3, s1
 8018192:	2b00      	cmp	r3, #0
 8018194:	fe27 7b05 	vselge.f64	d7, d7, d5
 8018198:	ee27 0b06 	vmul.f64	d0, d7, d6
 801819c:	e7e6      	b.n	801816c <scalbn+0x3c>
 801819e:	2c00      	cmp	r4, #0
 80181a0:	dd0a      	ble.n	80181b8 <scalbn+0x88>
 80181a2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80181a6:	ec53 2b10 	vmov	r2, r3, d0
 80181aa:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80181ae:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80181b2:	ec43 2b10 	vmov	d0, r2, r3
 80181b6:	e7d9      	b.n	801816c <scalbn+0x3c>
 80181b8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 80181bc:	da19      	bge.n	80181f2 <scalbn+0xc2>
 80181be:	f24c 3350 	movw	r3, #50000	; 0xc350
 80181c2:	4298      	cmp	r0, r3
 80181c4:	ee10 3a90 	vmov	r3, s1
 80181c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80181cc:	dd09      	ble.n	80181e2 <scalbn+0xb2>
 80181ce:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8018220 <scalbn+0xf0>
 80181d2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8018228 <scalbn+0xf8>
 80181d6:	eeb0 7b40 	vmov.f64	d7, d0
 80181da:	2b00      	cmp	r3, #0
 80181dc:	fe00 0b06 	vseleq.f64	d0, d0, d6
 80181e0:	e7bb      	b.n	801815a <scalbn+0x2a>
 80181e2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8018218 <scalbn+0xe8>
 80181e6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8018230 <scalbn+0x100>
 80181ea:	eeb0 7b40 	vmov.f64	d7, d0
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	e7f4      	b.n	80181dc <scalbn+0xac>
 80181f2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80181f6:	ec53 2b10 	vmov	r2, r3, d0
 80181fa:	3436      	adds	r4, #54	; 0x36
 80181fc:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8018200:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8018204:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8018238 <scalbn+0x108>
 8018208:	ec43 2b10 	vmov	d0, r2, r3
 801820c:	e7a5      	b.n	801815a <scalbn+0x2a>
 801820e:	bf00      	nop
 8018210:	00000000 	.word	0x00000000
 8018214:	43500000 	.word	0x43500000
 8018218:	c2f8f359 	.word	0xc2f8f359
 801821c:	01a56e1f 	.word	0x01a56e1f
 8018220:	8800759c 	.word	0x8800759c
 8018224:	7e37e43c 	.word	0x7e37e43c
 8018228:	8800759c 	.word	0x8800759c
 801822c:	fe37e43c 	.word	0xfe37e43c
 8018230:	c2f8f359 	.word	0xc2f8f359
 8018234:	81a56e1f 	.word	0x81a56e1f
 8018238:	00000000 	.word	0x00000000
 801823c:	3c900000 	.word	0x3c900000
 8018240:	ffff3cb0 	.word	0xffff3cb0

08018244 <_init>:
 8018244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018246:	bf00      	nop
 8018248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801824a:	bc08      	pop	{r3}
 801824c:	469e      	mov	lr, r3
 801824e:	4770      	bx	lr

08018250 <_fini>:
 8018250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018252:	bf00      	nop
 8018254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018256:	bc08      	pop	{r3}
 8018258:	469e      	mov	lr, r3
 801825a:	4770      	bx	lr
