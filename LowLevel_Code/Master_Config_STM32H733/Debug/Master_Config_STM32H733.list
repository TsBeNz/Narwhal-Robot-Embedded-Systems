
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3f4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800f6c4  0800f6c4  0001f6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f704  0800f704  0001f704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f70c  0800f70c  0001f70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f710  0800f710  0001f710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800f714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c14  20000010  0800f724  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000c24  0800f724  00020c24  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003cf96  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000058f4  00000000  00000000  0005cfd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c60  00000000  00000000  000628c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001aa0  00000000  00000000  00064528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039139  00000000  00000000  00065fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029d9a  00000000  00000000  0009f101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cb78  00000000  00000000  000c8e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00235a13  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000078d0  00000000  00000000  00235a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000010 	.word	0x20000010
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f6ac 	.word	0x0800f6ac

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	20000014 	.word	0x20000014
 800030c:	0800f6ac 	.word	0x0800f6ac

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <AS5047U_init>:

#include "AS5047U.h"

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin) {
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	603b      	str	r3, [r7, #0]

	dev->hspiHandle = hspiHandle;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	683a      	ldr	r2, [r7, #0]
 8000620:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	8b3a      	ldrh	r2, [r7, #24]
 800062c:	819a      	strh	r2, [r3, #12]
	dev->Error_Status.CORDIC_Overflow = 0;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	2200      	movs	r2, #0
 8000632:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2200      	movs	r2, #0
 8000638:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	2200      	movs	r2, #0
 800063e:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2200      	movs	r2, #0
 8000644:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2200      	movs	r2, #0
 800064a:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2200      	movs	r2, #0
 8000650:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2200      	movs	r2, #0
 8000656:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2200      	movs	r2, #0
 800065c:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	2200      	movs	r2, #0
 8000662:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2200      	movs	r2, #0
 8000668:	765a      	strb	r2, [r3, #25]

//	Encoder_command(dev,0x001A, 0x0080);
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev){
 8000676:	b580      	push	{r7, lr}
 8000678:	b084      	sub	sp, #16
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
	uint8_t cmd[2] = { 0x3F,0xFF };
 800067e:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000682:	81bb      	strh	r3, [r7, #12]
	uint8_t Buffer[2] = {};
 8000684:	2300      	movs	r3, #0
 8000686:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6898      	ldr	r0, [r3, #8]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	899b      	ldrh	r3, [r3, #12]
 8000690:	2200      	movs	r2, #0
 8000692:	4619      	mov	r1, r3
 8000694:	f007 fce6 	bl	8008064 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 1);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	f107 010c 	add.w	r1, r7, #12
 80006a0:	2301      	movs	r3, #1
 80006a2:	2202      	movs	r2, #2
 80006a4:	f00a ff44 	bl	800b530 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	6898      	ldr	r0, [r3, #8]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	899b      	ldrh	r3, [r3, #12]
 80006b0:	2201      	movs	r2, #1
 80006b2:	4619      	mov	r1, r3
 80006b4:	f007 fcd6 	bl	8008064 <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550 ; i++);			//delay before sent data (#Base clock 550MHz)
 80006b8:	2300      	movs	r3, #0
 80006ba:	81fb      	strh	r3, [r7, #14]
 80006bc:	e002      	b.n	80006c4 <AS5047U_Position_Highspeed_Read+0x4e>
 80006be:	89fb      	ldrh	r3, [r7, #14]
 80006c0:	3301      	adds	r3, #1
 80006c2:	81fb      	strh	r3, [r7, #14]
 80006c4:	89fb      	ldrh	r3, [r7, #14]
 80006c6:	f240 2226 	movw	r2, #550	; 0x226
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d9f7      	bls.n	80006be <AS5047U_Position_Highspeed_Read+0x48>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6898      	ldr	r0, [r3, #8]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	899b      	ldrh	r3, [r3, #12]
 80006d6:	2200      	movs	r2, #0
 80006d8:	4619      	mov	r1, r3
 80006da:	f007 fcc3 	bl	8008064 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 1);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	f107 0108 	add.w	r1, r7, #8
 80006e6:	2301      	movs	r3, #1
 80006e8:	2202      	movs	r2, #2
 80006ea:	f00b f913 	bl	800b914 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6898      	ldr	r0, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	2201      	movs	r2, #1
 80006f8:	4619      	mov	r1, r3
 80006fa:	f007 fcb3 	bl	8008064 <HAL_GPIO_WritePin>
	dev->Position = (((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1];
 80006fe:	7a3b      	ldrb	r3, [r7, #8]
 8000700:	021b      	lsls	r3, r3, #8
 8000702:	b21b      	sxth	r3, r3
 8000704:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8000708:	b21a      	sxth	r2, r3
 800070a:	7a7b      	ldrb	r3, [r7, #9]
 800070c:	b21b      	sxth	r3, r3
 800070e:	4313      	orrs	r3, r2
 8000710:	b21b      	sxth	r3, r3
 8000712:	b29a      	uxth	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	81da      	strh	r2, [r3, #14]
	return dev->Position;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	89db      	ldrh	r3, [r3, #14]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2224      	movs	r2, #36	; 0x24
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f00e ffb3 	bl	800f69c <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000736:	4b31      	ldr	r3, [pc, #196]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000738:	4a31      	ldr	r2, [pc, #196]	; (8000800 <MX_ADC3_Init+0xdc>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 800073c:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <MX_ADC3_Init+0xd8>)
 800073e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000742:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000744:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074a:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <MX_ADC3_Init+0xd8>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000752:	2204      	movs	r2, #4
 8000754:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000756:	4b29      	ldr	r3, [pc, #164]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000758:	2200      	movs	r2, #0
 800075a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_ADC3_Init+0xd8>)
 800075e:	2200      	movs	r2, #0
 8000760:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000764:	2201      	movs	r2, #1
 8000766:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_ADC3_Init+0xd8>)
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000770:	4b22      	ldr	r3, [pc, #136]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000778:	2200      	movs	r2, #0
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_ADC3_Init+0xd8>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000784:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000786:	2200      	movs	r2, #0
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_ADC3_Init+0xd8>)
 800078c:	2200      	movs	r2, #0
 800078e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000792:	2200      	movs	r2, #0
 8000794:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000798:	2200      	movs	r2, #0
 800079a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_ADC3_Init+0xd8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007a4:	4815      	ldr	r0, [pc, #84]	; (80007fc <MX_ADC3_Init+0xd8>)
 80007a6:	f003 fa77 	bl	8003c98 <HAL_ADC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80007b0:	f001 f9d2 	bl	8001b58 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_ADC3_Init+0xe0>)
 80007b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b8:	2306      	movs	r3, #6
 80007ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 80007bc:	2306      	movs	r3, #6
 80007be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007c6:	2304      	movs	r3, #4
 80007c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_ADC3_Init+0xd8>)
 80007e4:	f003 fffc 	bl	80047e0 <HAL_ADC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80007ee:	f001 f9b3 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	; 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000040 	.word	0x20000040
 8000800:	58026000 	.word	0x58026000
 8000804:	c7520000 	.word	0xc7520000

08000808 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_ADC_MspInit+0x48>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d116      	bne.n	8000848 <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_ADC_MspInit+0x4c>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000820:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <HAL_ADC_MspInit+0x4c>)
 8000822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_ADC_MspInit+0x4c>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	207f      	movs	r0, #127	; 0x7f
 800083e:	f005 f874 	bl	800592a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000842:	207f      	movs	r0, #127	; 0x7f
 8000844:	f005 f88b 	bl	800595e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	58026000 	.word	0x58026000
 8000854:	58024400 	.word	0x58024400

08000858 <Step_Driver_init>:
 * __HAL_TIM_SET_COMPARE();		CCR
 * __HAL_TIM_SET_AUTORELOAD();	ARR
 */
void Step_Driver_init(SteperParameter *step, TIM_HandleTypeDef *htim,
		uint32_t Channel, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t f_timer,uint8_t DIR_init) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	603b      	str	r3, [r7, #0]
	step->htim = htim;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	68ba      	ldr	r2, [r7, #8]
 800086a:	601a      	str	r2, [r3, #0]
	step->Channel = Channel;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	605a      	str	r2, [r3, #4]
	step->GPIOx = GPIOx;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	683a      	ldr	r2, [r7, #0]
 8000876:	609a      	str	r2, [r3, #8]
	step->GPIO_Pin = GPIO_Pin;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	8b3a      	ldrh	r2, [r7, #24]
 800087c:	819a      	strh	r2, [r3, #12]
	step->f_timer = f_timer;
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	b29a      	uxth	r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	81da      	strh	r2, [r3, #14]
	step->DIR_init = DIR_init;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f897 2020 	ldrb.w	r2, [r7, #32]
 800088c:	741a      	strb	r2, [r3, #16]
	HAL_TIM_PWM_Start(step->htim, step->Channel);
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	4619      	mov	r1, r3
 8000898:	4610      	mov	r0, r2
 800089a:	f00b ff8d 	bl	800c7b8 <HAL_TIM_PWM_Start>
}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <Step_Driver>:


void Step_Driver(SteperParameter *step, float f_driver) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	ed87 0a00 	vstr	s0, [r7]
	float abs_f_driver = fabs(f_driver);
 80008b4:	edd7 7a00 	vldr	s15, [r7]
 80008b8:	eef0 7ae7 	vabs.f32	s15, s15
 80008bc:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t reg_out;
	if (abs_f_driver <= 5) {
 80008c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80008c4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80008c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d0:	d80d      	bhi.n	80008ee <Step_Driver+0x46>
		reg_out = 10000;
 80008d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80008d6:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = 0;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2200      	movs	r2, #0
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = 0;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2200      	movs	r2, #0
 80008ea:	635a      	str	r2, [r3, #52]	; 0x34
 80008ec:	e033      	b.n	8000956 <Step_Driver+0xae>
	} else if (abs_f_driver < 50) {
 80008ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80008f2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000998 <Step_Driver+0xf0>
 80008f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fe:	d50f      	bpl.n	8000920 <Step_Driver+0x78>
		reg_out = 10000;
 8000900:	f242 7310 	movw	r3, #10000	; 0x2710
 8000904:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	897a      	ldrh	r2, [r7, #10]
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000910:	897b      	ldrh	r3, [r7, #10]
 8000912:	085b      	lsrs	r3, r3, #1
 8000914:	b29a      	uxth	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
 800091e:	e01a      	b.n	8000956 <Step_Driver+0xae>
	} else {
		reg_out = (uint16_t) (step->f_timer / abs_f_driver);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	89db      	ldrh	r3, [r3, #14]
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800092c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000938:	ee17 3a90 	vmov	r3, s15
 800093c:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	897a      	ldrh	r2, [r7, #10]
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000948:	897b      	ldrh	r3, [r7, #10]
 800094a:	085b      	lsrs	r3, r3, #1
 800094c:	b29a      	uxth	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (f_driver >= 0) {
 8000956:	edd7 7a00 	vldr	s15, [r7]
 800095a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800095e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000962:	db09      	blt.n	8000978 <Step_Driver+0xd0>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6898      	ldr	r0, [r3, #8]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	8999      	ldrh	r1, [r3, #12]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7c1b      	ldrb	r3, [r3, #16]
 8000970:	461a      	mov	r2, r3
 8000972:	f007 fb77 	bl	8008064 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
	}
}
 8000976:	e00b      	b.n	8000990 <Step_Driver+0xe8>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6898      	ldr	r0, [r3, #8]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	8999      	ldrh	r1, [r3, #12]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7c1b      	ldrb	r3, [r3, #16]
 8000984:	f083 0301 	eor.w	r3, r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	f007 fb6a 	bl	8008064 <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	42480000 	.word	0x42480000

0800099c <TrajFollow>:
	Traj->TrajCoef[4] = (15 * ds + 8 * tfv0) / T_P4;
	Traj->TrajCoef[5] = -(3 * (2 * ds + tfv0)) / T_P5;
}

void TrajFollow(TrajParameter *Traj, float traj_t[5], float *Position,
		float *Velocity) {
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
 80009a8:	603b      	str	r3, [r7, #0]
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	ed93 7a00 	vldr	s14, [r3]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	edd3 7a00 	vldr	s15, [r3]
 80009bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009c0:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Traj->TrajCoef[3] * traj_t[2]) + (Traj->TrajCoef[4] * traj_t[3])
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	edd3 6a03 	vldr	s13, [r3, #12]
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	3308      	adds	r3, #8
 80009ce:	edd3 7a00 	vldr	s15, [r3]
 80009d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	edd3 6a04 	vldr	s13, [r3, #16]
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	330c      	adds	r3, #12
 80009e4:	edd3 7a00 	vldr	s15, [r3]
 80009e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009ec:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Traj->TrajCoef[5] * traj_t[4]);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	edd3 6a05 	vldr	s13, [r3, #20]
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	3310      	adds	r3, #16
 80009fa:	edd3 7a00 	vldr	s15, [r3]
 80009fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a02:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	edc3 7a00 	vstr	s15, [r3]
	*Velocity = Traj->TrajCoef[1] + (3 * Traj->TrajCoef[3] * traj_t[1])
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	edd3 7a03 	vldr	s15, [r3, #12]
 8000a18:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000a1c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3304      	adds	r3, #4
 8000a24:	edd3 7a00 	vldr	s15, [r3]
 8000a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (4 * Traj->TrajCoef[4] * traj_t[3])
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a36:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000a3a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	330c      	adds	r3, #12
 8000a42:	edd3 7a00 	vldr	s15, [r3]
 8000a46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a4a:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (5 * Traj->TrajCoef[5] * traj_t[3]);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a54:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000a58:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	330c      	adds	r3, #12
 8000a60:	edd3 7a00 	vldr	s15, [r3]
 8000a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a68:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Velocity = Traj->TrajCoef[1] + (3 * Traj->TrajCoef[3] * traj_t[1])
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	edc3 7a00 	vstr	s15, [r3]
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <Kalman_init>:
 * KalmanFilter
 *
 * Q -> Process
 * R -> Sensor
 */
void Kalman_init(KalmanParameter *kalman, double Q, double R) {
 8000a80:	b480      	push	{r7}
 8000a82:	b087      	sub	sp, #28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6178      	str	r0, [r7, #20]
 8000a88:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a8c:	ed87 1b00 	vstr	d1, [r7]
	kalman->Q = Q; 			// Adjustable
 8000a90:	ed97 7b02 	vldr	d7, [r7, #8]
 8000a94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	edc3 7a00 	vstr	s15, [r3]
	kalman->R = R; 			// Adjustable
 8000a9e:	ed97 7b00 	vldr	d7, [r7]
 8000aa2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	edc3 7a01 	vstr	s15, [r3, #4]
	kalman->x1 = 0.0;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f04f 0200 	mov.w	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
	kalman->x2 = 0.0;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	f04f 0200 	mov.w	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
	kalman->p11 = 0.05;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <Kalman_init+0x60>)
 8000ac0:	611a      	str	r2, [r3, #16]
	kalman->p12 = 0.05;
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <Kalman_init+0x60>)
 8000ac6:	615a      	str	r2, [r3, #20]
	kalman->p21 = 0.05;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <Kalman_init+0x60>)
 8000acc:	619a      	str	r2, [r3, #24]
	kalman->p22 = 0.05;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	4a03      	ldr	r2, [pc, #12]	; (8000ae0 <Kalman_init+0x60>)
 8000ad2:	61da      	str	r2, [r3, #28]
}
 8000ad4:	bf00      	nop
 8000ad6:	371c      	adds	r7, #28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	3d4ccccd 	.word	0x3d4ccccd
 8000ae4:	00000000 	.word	0x00000000

08000ae8 <KalmanFilter>:


/*
 *	theta_k is Position input
 */
void KalmanFilter(KalmanParameter *kalman ,double theta_k) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b0a5      	sub	sp, #148	; 0x94
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	ed87 0b00 	vstr	d0, [r7]
	double e_xx1_tmp;
	double xx1_tmp;
	double xx1_tmp_tmp;
	double xx2_tmp;
	double xx1,xx2,pp11,pp12,pp21,pp22;
	xx1_tmp = 4.0 * delta_t * kalman->p12;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000afa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000afe:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8000eb0 <KalmanFilter+0x3c8>
 8000b02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b06:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	b_xx1_tmp = 4.0 * delta_t * kalman->p21;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000b10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b14:	ed9f 6be6 	vldr	d6, [pc, #920]	; 8000eb0 <KalmanFilter+0x3c8>
 8000b18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b1c:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	c_xx1_tmp = kalman->Q * delta_tPow4;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	edd3 7a00 	vldr	s15, [r3]
 8000b26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b2a:	ed9f 6be3 	vldr	d6, [pc, #908]	; 8000eb8 <KalmanFilter+0x3d0>
 8000b2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b32:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	xx1_tmp_tmp = delta_tPow2;
 8000b36:	a3e6      	add	r3, pc, #920	; (adr r3, 8000ed0 <KalmanFilter+0x3e8>)
 8000b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b3c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	d_xx1_tmp = 4.0 * xx1_tmp_tmp * kalman->p22;
 8000b40:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8000b44:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b48:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	edd3 7a07 	vldr	s15, [r3, #28]
 8000b52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b56:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b5a:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	e_xx1_tmp = ((((4.0 * kalman->R + 4.0 * kalman->p11) + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b68:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b6c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b7a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000b7e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000b82:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b86:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000b8a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b8e:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8000b92:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b96:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8000b9a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b9e:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 8000ba2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ba6:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			+ d_xx1_tmp;
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bb4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000bb8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8000bc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000bd8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000bdc:	ed97 7b00 	vldr	d7, [r7]
 8000be0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000be4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000be8:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 8000bec:	ed97 7b00 	vldr	d7, [r7]
 8000bf0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000bf4:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ 4.0 * kalman->R * delta_t * kalman->x2) + xx1_tmp * theta_k) + b_xx1_tmp * theta_k)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c02:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000c06:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000c0a:	ed9f 5bad 	vldr	d5, [pc, #692]	; 8000ec0 <KalmanFilter+0x3d8>
 8000c0e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c1c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c20:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c24:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 8000c28:	ed97 7b00 	vldr	d7, [r7]
 8000c2c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c30:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c34:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8000c38:	ed97 7b00 	vldr	d7, [r7]
 8000c3c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c40:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ c_xx1_tmp * theta_k) / e_xx1_tmp;
 8000c44:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8000c48:	ed97 7b00 	vldr	d7, [r7]
 8000c4c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c50:	ee36 5b07 	vadd.f64	d5, d6, d7
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8000c54:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000c58:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c5c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	xx2_tmp = kalman->p22 * delta_t;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	edd3 7a07 	vldr	s15, [r3, #28]
 8000c66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c6a:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8000ec0 <KalmanFilter+0x3d8>
 8000c6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c72:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	b_xx2_tmp = kalman->Q * delta_tPow3;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	edd3 7a00 	vldr	s15, [r3]
 8000c7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c80:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8000ec8 <KalmanFilter+0x3e0>
 8000c84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c88:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	c_xx2_tmp = b_xx2_tmp / 2.0 + xx2_tmp;
 8000c8c:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8000c90:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000c94:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c98:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8000c9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ca0:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	d_xx2_tmp = c_xx2_tmp + kalman->p21;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000caa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cae:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8000cb2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cb6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	xx2_tmp = (((kalman->R + kalman->p11) + delta_t * kalman->p21) + c_xx1_tmp / 4.0) + delta_t * (kalman->p12 + xx2_tmp);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	edd3 7a06 	vldr	s15, [r3, #24]
 8000cd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cd8:	ed9f 5b79 	vldr	d5, [pc, #484]	; 8000ec0 <KalmanFilter+0x3d8>
 8000cdc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ce0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ce4:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8000ce8:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 8000cec:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000cf0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cfa:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cfe:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8000d02:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000d06:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8000ec0 <KalmanFilter+0x3d8>
 8000d0a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000d0e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d12:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	xx2 = kalman->x2 - d_xx2_tmp * ((kalman->x1 - theta_k) + delta_t * kalman->x2) / xx2_tmp;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d1c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d26:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d2a:	ed97 7b00 	vldr	d7, [r7]
 8000d2e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d3c:	ed9f 4b60 	vldr	d4, [pc, #384]	; 8000ec0 <KalmanFilter+0x3d8>
 8000d40:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000d44:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000d48:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000d4c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8000d50:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8000d54:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d5c:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	pp11 = kalman->R * ((((4.0 * kalman->p11 + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp) + d_xx1_tmp)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d66:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d74:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000d78:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d7c:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000d80:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000d84:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8000d88:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000d8c:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8000d90:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000d94:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8000d98:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000d9c:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000da0:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000da4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000da8:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			/ e_xx1_tmp;
	xx1_tmp = b_xx2_tmp + 2.0 * kalman->p22 * delta_t;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	edd3 7a07 	vldr	s15, [r3, #28]
 8000db2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000db6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000dba:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000ec0 <KalmanFilter+0x3d8>
 8000dbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000dc2:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8000dc6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dca:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	pp12 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p12) / e_xx1_tmp;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000dd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dd8:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	edd3 7a05 	vldr	s15, [r3, #20]
 8000de2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000de6:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000dea:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000dee:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000df2:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000df6:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000dfa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000dfe:	ed87 7b08 	vstr	d7, [r7, #32]
	pp21 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p21) / e_xx1_tmp;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e0c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e1a:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000e1e:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000e22:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000e26:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000e2a:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000e2e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e32:	ed87 7b06 	vstr	d7, [r7, #24]
	pp22 = (kalman->p22 + kalman->Q * xx1_tmp_tmp) - (c_xx2_tmp + kalman->p12) * d_xx2_tmp / xx2_tmp;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	edd3 7a07 	vldr	s15, [r3, #28]
 8000e3c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	edd3 7a00 	vldr	s15, [r3]
 8000e46:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e4a:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8000e4e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e52:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e5c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e60:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8000e64:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000e68:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000e6c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8000e70:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8000e74:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e78:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e7c:	ed87 7b04 	vstr	d7, [r7, #16]

	/*Update Variable*/
	kalman->x1 = xx1;
 8000e80:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8000e84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	edc3 7a02 	vstr	s15, [r3, #8]
	kalman->x2 = xx2;
 8000e8e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8000e92:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	edc3 7a03 	vstr	s15, [r3, #12]
	kalman->p11 = pp11;
 8000e9c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000ea0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	edc3 7a04 	vstr	s15, [r3, #16]
 8000eaa:	e015      	b.n	8000ed8 <KalmanFilter+0x3f0>
 8000eac:	f3af 8000 	nop.w
 8000eb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000eb4:	3f70624d 	.word	0x3f70624d
 8000eb8:	812dea12 	.word	0x812dea12
 8000ebc:	3d719799 	.word	0x3d719799
 8000ec0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000ec4:	3f50624d 	.word	0x3f50624d
 8000ec8:	e826d695 	.word	0xe826d695
 8000ecc:	3e112e0b 	.word	0x3e112e0b
 8000ed0:	a0b5ed8d 	.word	0xa0b5ed8d
 8000ed4:	3eb0c6f7 	.word	0x3eb0c6f7
	kalman->p12 = pp12;
 8000ed8:	ed97 7b08 	vldr	d7, [r7, #32]
 8000edc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	edc3 7a05 	vstr	s15, [r3, #20]
	kalman->p21 = pp21;
 8000ee6:	ed97 7b06 	vldr	d7, [r7, #24]
 8000eea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	edc3 7a06 	vstr	s15, [r3, #24]
	kalman->p22 = pp22;
 8000ef4:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ef8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000f02:	bf00      	nop
 8000f04:	3794      	adds	r7, #148	; 0x94
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <PID_init>:

void PID_init(PIDParameter *PID, float Kp, float Ki, float Kd) {
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f1c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f20:	ed87 1a00 	vstr	s2, [r7]
	PID->Kp = Kp;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	601a      	str	r2, [r3, #0]
	PID->Ki = Ki;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	605a      	str	r2, [r3, #4]
	PID->Kd = Kd;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	609a      	str	r2, [r3, #8]
	PID->ITerm = 0;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
	PID->Setpoint = 0;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
	PID->Feedback = 0;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
	PID->Error[0] = 0;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
	PID->Error[1] = 0;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
	PID->Output = 0;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <PID_Control>:

float PID_Control(PIDParameter *PID,float Setpoint,float Feedback){
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f7e:	edc7 0a01 	vstr	s1, [r7, #4]
	PID->Feedback = Feedback; 	// Feedback Input
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	615a      	str	r2, [r3, #20]
	PID->Setpoint = Setpoint;	// Setpoint Input
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	611a      	str	r2, [r3, #16]
	PID->Error[0] = PID->Setpoint - PID->Feedback;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	edc3 7a06 	vstr	s15, [r3, #24]
	PID->ITerm += PID->Error[0];
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	ed93 7a03 	vldr	s14, [r3, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	ed93 7a00 	vldr	s14, [r3]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fda:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (PID->Kp * (PID->Error[0] - PID->Error[1])));
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	edd3 6a00 	vldr	s13, [r3]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	ed93 6a06 	vldr	s12, [r3, #24]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	edc3 7a08 	vstr	s15, [r3, #32]
	PID->Error[1] = PID->Error[0]; // Update Error
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	699a      	ldr	r2, [r3, #24]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	61da      	str	r2, [r3, #28]
	return PID->Output;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	ee07 3a90 	vmov	s15, r3
}
 8001012:	eeb0 0a67 	vmov.f32	s0, s15
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <CascadeControl_init>:


void CascadeControl_init(ControlParameter *Control,float PosP,float PosI,float PosD,float VelP,float VelI,float VelD, float GearRatio ,float StepDriver){
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6278      	str	r0, [r7, #36]	; 0x24
 8001028:	ed87 0a08 	vstr	s0, [r7, #32]
 800102c:	edc7 0a07 	vstr	s1, [r7, #28]
 8001030:	ed87 1a06 	vstr	s2, [r7, #24]
 8001034:	edc7 1a05 	vstr	s3, [r7, #20]
 8001038:	ed87 2a04 	vstr	s4, [r7, #16]
 800103c:	edc7 2a03 	vstr	s5, [r7, #12]
 8001040:	ed87 3a02 	vstr	s6, [r7, #8]
 8001044:	edc7 3a01 	vstr	s7, [r7, #4]
	PID_init(&Control->Pos,PosP,PosI,PosD);
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	ed97 1a06 	vldr	s2, [r7, #24]
 800104e:	edd7 0a07 	vldr	s1, [r7, #28]
 8001052:	ed97 0a08 	vldr	s0, [r7, #32]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff5a 	bl	8000f10 <PID_init>
	PID_init(&Control->Vel,VelP,VelI,VelD);
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	3330      	adds	r3, #48	; 0x30
 8001060:	ed97 1a03 	vldr	s2, [r7, #12]
 8001064:	edd7 0a04 	vldr	s1, [r7, #16]
 8001068:	ed97 0a05 	vldr	s0, [r7, #20]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff4f 	bl	8000f10 <PID_init>
	Control->Vel_Gfeed = (GearRatio * StepDriver) / (2*PI);
 8001072:	ed97 7a02 	vldr	s14, [r7, #8]
 8001076:	edd7 7a01 	vldr	s15, [r7, #4]
 800107a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800107e:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001094 <CascadeControl_init+0x74>
 8001082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	; 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40c90fdb 	.word	0x40c90fdb

08001098 <CascadeControl>:


void CascadeControl(ControlParameter *Control, KalmanParameter *kalman,
		float Pos_Feed, float pos_set, float vel_set) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6178      	str	r0, [r7, #20]
 80010a0:	6139      	str	r1, [r7, #16]
 80010a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80010a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80010aa:	ed87 1a01 	vstr	s2, [r7, #4]
	/*Set Setpoint*/
	Control->PositionSetpoint = pos_set;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24
	Control->VelocitySetpoint = vel_set;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	655a      	str	r2, [r3, #84]	; 0x54

	/*Kalman Filter*/
	Control->PositionFeedback = Pos_Feed;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
	KalmanFilter(kalman, Control->PositionFeedback); /*Kalman filter */
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80010c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ca:	eeb0 0b47 	vmov.f64	d0, d7
 80010ce:	6938      	ldr	r0, [r7, #16]
 80010d0:	f7ff fd0a 	bl	8000ae8 <KalmanFilter>
	Control->VelocityFeedback = kalman->x2;
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	659a      	str	r2, [r3, #88]	; 0x58

	/*Position PID Control*/
	Control->PositionPIDOutput = PID_Control(&Control->Pos,
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80010ea:	eef0 0a47 	vmov.f32	s1, s14
 80010ee:	eeb0 0a67 	vmov.f32	s0, s15
 80010f2:	4610      	mov	r0, r2
 80010f4:	f7ff ff3d 	bl	8000f72 <PID_Control>
 80010f8:	eef0 7a40 	vmov.f32	s15, s0
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			Control->PositionSetpoint, Control->PositionFeedback);
	/*Feedforward Velocity*/
	Control->VelocitySetpoint += Control->PositionPIDOutput;
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800110e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	/*Velocity PID Control*/
	Control->VelocityPIDOutput = PID_Control(&Control->Vel,
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800112a:	eef0 0a47 	vmov.f32	s1, s14
 800112e:	eeb0 0a67 	vmov.f32	s0, s15
 8001132:	4610      	mov	r0, r2
 8001134:	f7ff ff1d 	bl	8000f72 <PID_Control>
 8001138:	eef0 7a40 	vmov.f32	s15, s0
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			Control->VelocitySetpoint, Control->VelocityFeedback);
	/*Feedforward Velocity Setpoint*/
	Control->Output = (Control->Vel_Gfeed * Control->VelocitySetpoint)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800114e:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Control->VelocityPIDOutput;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001158:	ee77 7a27 	vadd.f32	s15, s14, s15
	Control->Output = (Control->Vel_Gfeed * Control->VelocitySetpoint)
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <MX_CRC_Init+0x50>)
 8001172:	4a13      	ldr	r2, [pc, #76]	; (80011c0 <MX_CRC_Init+0x54>)
 8001174:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_CRC_Init+0x50>)
 8001178:	2201      	movs	r2, #1
 800117a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_CRC_Init+0x50>)
 800117e:	2201      	movs	r2, #1
 8001180:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_CRC_Init+0x50>)
 8001184:	221d      	movs	r2, #29
 8001186:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_CRC_Init+0x50>)
 800118a:	2210      	movs	r2, #16
 800118c:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_CRC_Init+0x50>)
 8001190:	22c4      	movs	r2, #196	; 0xc4
 8001192:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_CRC_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_CRC_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_CRC_Init+0x50>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_CRC_Init+0x50>)
 80011a8:	f004 fbf4 	bl	8005994 <HAL_CRC_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 80011b2:	f000 fcd1 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200000b0 	.word	0x200000b0
 80011c0:	58024c00 	.word	0x58024c00

080011c4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <HAL_CRC_MspInit+0x3c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d10e      	bne.n	80011f4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_CRC_MspInit+0x40>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011dc:	4a09      	ldr	r2, [pc, #36]	; (8001204 <HAL_CRC_MspInit+0x40>)
 80011de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_CRC_MspInit+0x40>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	58024c00 	.word	0x58024c00
 8001204:	58024400 	.word	0x58024400

08001208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <MX_DMA_Init+0x3c>)
 8001210:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001214:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <MX_DMA_Init+0x3c>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_DMA_Init+0x3c>)
 8001220:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	200b      	movs	r0, #11
 8001232:	f004 fb7a 	bl	800592a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001236:	200b      	movs	r0, #11
 8001238:	f004 fb91 	bl	800595e <HAL_NVIC_EnableIRQ>

}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58024400 	.word	0x58024400

08001248 <MX_GPIO_Init>:
        * the Code Generation settings)
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	; 0x30
 800124c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800125e:	4b91      	ldr	r3, [pc, #580]	; (80014a4 <MX_GPIO_Init+0x25c>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001264:	4a8f      	ldr	r2, [pc, #572]	; (80014a4 <MX_GPIO_Init+0x25c>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126e:	4b8d      	ldr	r3, [pc, #564]	; (80014a4 <MX_GPIO_Init+0x25c>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127c:	4b89      	ldr	r3, [pc, #548]	; (80014a4 <MX_GPIO_Init+0x25c>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	4a88      	ldr	r2, [pc, #544]	; (80014a4 <MX_GPIO_Init+0x25c>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128c:	4b85      	ldr	r3, [pc, #532]	; (80014a4 <MX_GPIO_Init+0x25c>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	4b82      	ldr	r3, [pc, #520]	; (80014a4 <MX_GPIO_Init+0x25c>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	4a80      	ldr	r2, [pc, #512]	; (80014a4 <MX_GPIO_Init+0x25c>)
 80012a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012aa:	4b7e      	ldr	r3, [pc, #504]	; (80014a4 <MX_GPIO_Init+0x25c>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b7a      	ldr	r3, [pc, #488]	; (80014a4 <MX_GPIO_Init+0x25c>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012be:	4a79      	ldr	r2, [pc, #484]	; (80014a4 <MX_GPIO_Init+0x25c>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c8:	4b76      	ldr	r3, [pc, #472]	; (80014a4 <MX_GPIO_Init+0x25c>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b73      	ldr	r3, [pc, #460]	; (80014a4 <MX_GPIO_Init+0x25c>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012dc:	4a71      	ldr	r2, [pc, #452]	; (80014a4 <MX_GPIO_Init+0x25c>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e6:	4b6f      	ldr	r3, [pc, #444]	; (80014a4 <MX_GPIO_Init+0x25c>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f4:	4b6b      	ldr	r3, [pc, #428]	; (80014a4 <MX_GPIO_Init+0x25c>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fa:	4a6a      	ldr	r2, [pc, #424]	; (80014a4 <MX_GPIO_Init+0x25c>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001304:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <MX_GPIO_Init+0x25c>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001312:	2200      	movs	r2, #0
 8001314:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001318:	4863      	ldr	r0, [pc, #396]	; (80014a8 <MX_GPIO_Init+0x260>)
 800131a:	f006 fea3 	bl	8008064 <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED1_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001324:	4861      	ldr	r0, [pc, #388]	; (80014ac <MX_GPIO_Init+0x264>)
 8001326:	f006 fe9d 	bl	8008064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	21c4      	movs	r1, #196	; 0xc4
 800132e:	4860      	ldr	r0, [pc, #384]	; (80014b0 <MX_GPIO_Init+0x268>)
 8001330:	f006 fe98 	bl	8008064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	f24c 0140 	movw	r1, #49216	; 0xc040
 800133a:	485e      	ldr	r0, [pc, #376]	; (80014b4 <MX_GPIO_Init+0x26c>)
 800133c:	f006 fe92 	bl	8008064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001346:	4859      	ldr	r0, [pc, #356]	; (80014ac <MX_GPIO_Init+0x264>)
 8001348:	f006 fe8c 	bl	8008064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 800134c:	2201      	movs	r2, #1
 800134e:	213f      	movs	r1, #63	; 0x3f
 8001350:	4858      	ldr	r0, [pc, #352]	; (80014b4 <MX_GPIO_Init+0x26c>)
 8001352:	f006 fe87 	bl	8008064 <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001356:	f648 33df 	movw	r3, #35807	; 0x8bdf
 800135a:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	484e      	ldr	r0, [pc, #312]	; (80014a8 <MX_GPIO_Init+0x260>)
 8001370:	f006 fcd0 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001374:	f24e 032f 	movw	r3, #57391	; 0xe02f
 8001378:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	2303      	movs	r3, #3
 800137c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4848      	ldr	r0, [pc, #288]	; (80014ac <MX_GPIO_Init+0x264>)
 800138a:	f006 fcc3 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800138e:	233c      	movs	r3, #60	; 0x3c
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	4845      	ldr	r0, [pc, #276]	; (80014b8 <MX_GPIO_Init+0x270>)
 80013a2:	f006 fcb7 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 80013a6:	f44f 7344 	mov.w	r3, #784	; 0x310
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	483b      	ldr	r0, [pc, #236]	; (80014ac <MX_GPIO_Init+0x264>)
 80013c0:	f006 fca8 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c8:	2303      	movs	r3, #3
 80013ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	4836      	ldr	r0, [pc, #216]	; (80014b0 <MX_GPIO_Init+0x268>)
 80013d8:	f006 fc9c 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 80013dc:	2302      	movs	r3, #2
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	482f      	ldr	r0, [pc, #188]	; (80014b0 <MX_GPIO_Init+0x268>)
 80013f2:	f006 fc8f 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 80013f6:	23c4      	movs	r3, #196	; 0xc4
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	4828      	ldr	r0, [pc, #160]	; (80014b0 <MX_GPIO_Init+0x268>)
 800140e:	f006 fc81 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001418:	2303      	movs	r3, #3
 800141a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	4820      	ldr	r0, [pc, #128]	; (80014a8 <MX_GPIO_Init+0x260>)
 8001428:	f006 fc74 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_7;
 800142c:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001432:	2303      	movs	r3, #3
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	481c      	ldr	r0, [pc, #112]	; (80014b4 <MX_GPIO_Init+0x26c>)
 8001442:	f006 fc67 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001446:	f24c 037f 	movw	r3, #49279	; 0xc07f
 800144a:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	4815      	ldr	r0, [pc, #84]	; (80014b4 <MX_GPIO_Init+0x26c>)
 8001460:	f006 fc58 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	480f      	ldr	r0, [pc, #60]	; (80014b8 <MX_GPIO_Init+0x270>)
 800147a:	f006 fc4b 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800147e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	4808      	ldr	r0, [pc, #32]	; (80014b8 <MX_GPIO_Init+0x270>)
 8001498:	f006 fc3c 	bl	8007d14 <HAL_GPIO_Init>

}
 800149c:	bf00      	nop
 800149e:	3730      	adds	r7, #48	; 0x30
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	58024400 	.word	0x58024400
 80014a8:	58021000 	.word	0x58021000
 80014ac:	58020800 	.word	0x58020800
 80014b0:	58020400 	.word	0x58020400
 80014b4:	58020c00 	.word	0x58020c00
 80014b8:	58020000 	.word	0x58020000

080014bc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_I2C2_Init+0x74>)
 80014c2:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <MX_I2C2_Init+0x78>)
 80014c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_I2C2_Init+0x74>)
 80014c8:	4a1b      	ldr	r2, [pc, #108]	; (8001538 <MX_I2C2_Init+0x7c>)
 80014ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_I2C2_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_I2C2_Init+0x74>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_I2C2_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_I2C2_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_I2C2_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_I2C2_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_I2C2_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014f6:	480e      	ldr	r0, [pc, #56]	; (8001530 <MX_I2C2_Init+0x74>)
 80014f8:	f006 fde8 	bl	80080cc <HAL_I2C_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001502:	f000 fb29 	bl	8001b58 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001506:	2100      	movs	r1, #0
 8001508:	4809      	ldr	r0, [pc, #36]	; (8001530 <MX_I2C2_Init+0x74>)
 800150a:	f006 fe6f 	bl	80081ec <HAL_I2CEx_ConfigAnalogFilter>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001514:	f000 fb20 	bl	8001b58 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001518:	2100      	movs	r1, #0
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_I2C2_Init+0x74>)
 800151c:	f006 feb1 	bl	8008282 <HAL_I2CEx_ConfigDigitalFilter>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001526:	f000 fb17 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200000d4 	.word	0x200000d4
 8001534:	40005800 	.word	0x40005800
 8001538:	60404e72 	.word	0x60404e72

0800153c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0b6      	sub	sp, #216	; 0xd8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	22b4      	movs	r2, #180	; 0xb4
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f00e f89d 	bl	800f69c <memset>
  if(i2cHandle->Instance==I2C2)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a25      	ldr	r2, [pc, #148]	; (80015fc <HAL_I2C_MspInit+0xc0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d142      	bne.n	80015f2 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800156c:	2308      	movs	r3, #8
 800156e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4618      	mov	r0, r3
 800157c:	f007 fe40 	bl	8009200 <HAL_RCCEx_PeriphCLKConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001586:	f000 fae7 	bl	8001b58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_I2C_MspInit+0xc4>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <HAL_I2C_MspInit+0xc4>)
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_I2C_MspInit+0xc4>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b0:	2312      	movs	r3, #18
 80015b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015c2:	2304      	movs	r3, #4
 80015c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015cc:	4619      	mov	r1, r3
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <HAL_I2C_MspInit+0xc8>)
 80015d0:	f006 fba0 	bl	8007d14 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_I2C_MspInit+0xc4>)
 80015d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <HAL_I2C_MspInit+0xc4>)
 80015dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_I2C_MspInit+0xc4>)
 80015e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80015f2:	bf00      	nop
 80015f4:	37d8      	adds	r7, #216	; 0xd8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40005800 	.word	0x40005800
 8001600:	58024400 	.word	0x58024400
 8001604:	58020400 	.word	0x58020400

08001608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800160e:	f001 ffdb 	bl	80035c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001612:	f000 f93f 	bl	8001894 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001616:	f000 f9b5 	bl	8001984 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161a:	f7ff fe15 	bl	8001248 <MX_GPIO_Init>
  MX_DMA_Init();
 800161e:	f7ff fdf3 	bl	8001208 <MX_DMA_Init>
  MX_ADC3_Init();
 8001622:	f7ff f87f 	bl	8000724 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001626:	f000 fcdf 	bl	8001fe8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800162a:	f000 fdc1 	bl	80021b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800162e:	f000 fe37 	bl	80022a0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001632:	f000 fe8b 	bl	800234c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001636:	f000 ff17 	bl	8002468 <MX_TIM8_Init>
  MX_TIM13_Init();
 800163a:	f000 ff6f 	bl	800251c <MX_TIM13_Init>
  MX_TIM14_Init();
 800163e:	f000 ffbd 	bl	80025bc <MX_TIM14_Init>
  MX_TIM15_Init();
 8001642:	f001 f80b 	bl	800265c <MX_TIM15_Init>
  MX_TIM16_Init();
 8001646:	f001 f891 	bl	800276c <MX_TIM16_Init>
  MX_TIM17_Init();
 800164a:	f001 f90b 	bl	8002864 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 800164e:	f001 fe0b 	bl	8003268 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001652:	f001 fe57 	bl	8003304 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8001656:	f000 fa85 	bl	8001b64 <MX_SPI3_Init>
  MX_SPI4_Init();
 800165a:	f000 fadb 	bl	8001c14 <MX_SPI4_Init>
  MX_TIM2_Init();
 800165e:	f000 fd53 	bl	8002108 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001662:	f7ff ff2b 	bl	80014bc <MX_I2C2_Init>
  MX_CRC_Init();
 8001666:	f7ff fd81 	bl	800116c <MX_CRC_Init>
  MX_TIM24_Init();
 800166a:	f001 f9c7 	bl	80029fc <MX_TIM24_Init>
  MX_TIM23_Init();
 800166e:	f001 f975 	bl	800295c <MX_TIM23_Init>
  MX_TIM6_Init();
 8001672:	f000 fec1 	bl	80023f8 <MX_TIM6_Init>
  MX_UART5_Init();
 8001676:	f001 fdab 	bl	80031d0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800167a:	2201      	movs	r2, #1
 800167c:	2101      	movs	r1, #1
 800167e:	486c      	ldr	r0, [pc, #432]	; (8001830 <main+0x228>)
 8001680:	f006 fcf0 	bl	8008064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 8001684:	2201      	movs	r2, #1
 8001686:	2102      	movs	r1, #2
 8001688:	4869      	ldr	r0, [pc, #420]	; (8001830 <main+0x228>)
 800168a:	f006 fceb 	bl	8008064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 800168e:	2201      	movs	r2, #1
 8001690:	2104      	movs	r1, #4
 8001692:	4867      	ldr	r0, [pc, #412]	; (8001830 <main+0x228>)
 8001694:	f006 fce6 	bl	8008064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8001698:	2201      	movs	r2, #1
 800169a:	2108      	movs	r1, #8
 800169c:	4864      	ldr	r0, [pc, #400]	; (8001830 <main+0x228>)
 800169e:	f006 fce1 	bl	8008064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 80016a2:	2201      	movs	r2, #1
 80016a4:	2110      	movs	r1, #16
 80016a6:	4862      	ldr	r0, [pc, #392]	; (8001830 <main+0x228>)
 80016a8:	f006 fcdc 	bl	8008064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2120      	movs	r1, #32
 80016b0:	485f      	ldr	r0, [pc, #380]	; (8001830 <main+0x228>)
 80016b2:	f006 fcd7 	bl	8008064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2140      	movs	r1, #64	; 0x40
 80016ba:	485d      	ldr	r0, [pc, #372]	; (8001830 <main+0x228>)
 80016bc:	f006 fcd2 	bl	8008064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	485b      	ldr	r0, [pc, #364]	; (8001834 <main+0x22c>)
 80016c6:	f006 fccd 	bl	8008064 <HAL_GPIO_WritePin>

	Temp_Calibration = (110.0 - 30.0)	/ (*(unsigned short*) (0x1FF1E840) - *(unsigned short*) (0x1FF1E820));
 80016ca:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <main+0x230>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b5a      	ldr	r3, [pc, #360]	; (800183c <main+0x234>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	ee07 3a90 	vmov	s15, r3
 80016da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016de:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8001818 <main+0x210>
 80016e2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016ea:	4b55      	ldr	r3, [pc, #340]	; (8001840 <main+0x238>)
 80016ec:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80016f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80016f4:	2100      	movs	r1, #0
 80016f6:	4853      	ldr	r0, [pc, #332]	; (8001844 <main+0x23c>)
 80016f8:	f003 ffa6 	bl	8005648 <HAL_ADCEx_Calibration_Start>

//	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 14);
  	while (HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 14) != HAL_OK)
 80016fc:	e007      	b.n	800170e <main+0x106>

	AS5047U_init(&Encoder[0], &hspi3, GPIOD, &hcrc, GPIO_PIN_5);
 80016fe:	2320      	movs	r3, #32
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	4b51      	ldr	r3, [pc, #324]	; (8001848 <main+0x240>)
 8001704:	4a4a      	ldr	r2, [pc, #296]	; (8001830 <main+0x228>)
 8001706:	4951      	ldr	r1, [pc, #324]	; (800184c <main+0x244>)
 8001708:	4851      	ldr	r0, [pc, #324]	; (8001850 <main+0x248>)
 800170a:	f7fe ff7d 	bl	8000608 <AS5047U_init>
  	while (HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 14) != HAL_OK)
 800170e:	220e      	movs	r2, #14
 8001710:	4950      	ldr	r1, [pc, #320]	; (8001854 <main+0x24c>)
 8001712:	4851      	ldr	r0, [pc, #324]	; (8001858 <main+0x250>)
 8001714:	f00c fbca 	bl	800deac <HAL_UART_Receive_DMA>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ef      	bne.n	80016fe <main+0xf6>
	Kalman_init(&Kalman[0], 5000,0.001);
 800171e:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8001820 <main+0x218>
 8001722:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8001828 <main+0x220>
 8001726:	484d      	ldr	r0, [pc, #308]	; (800185c <main+0x254>)
 8001728:	f7ff f9aa 	bl	8000a80 <Kalman_init>
	CascadeControl_init(&Control[0], 2, 0, 0, 0.5, 0, 0, 9, 1600);
 800172c:	eddf 3a4c 	vldr	s7, [pc, #304]	; 8001860 <main+0x258>
 8001730:	eeb2 3a02 	vmov.f32	s6, #34	; 0x41100000  9.0
 8001734:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8001864 <main+0x25c>
 8001738:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 8001864 <main+0x25c>
 800173c:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8001740:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8001864 <main+0x25c>
 8001744:	eddf 0a47 	vldr	s1, [pc, #284]	; 8001864 <main+0x25c>
 8001748:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800174c:	4846      	ldr	r0, [pc, #280]	; (8001868 <main+0x260>)
 800174e:	f7ff fc67 	bl	8001020 <CascadeControl_init>
	Step_Driver_init(&Stepper[0], &htim15, TIM_CHANNEL_1, GPIOE, GPIO_PIN_3, 500000, 0);
 8001752:	2300      	movs	r3, #0
 8001754:	9302      	str	r3, [sp, #8]
 8001756:	4b45      	ldr	r3, [pc, #276]	; (800186c <main+0x264>)
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	2308      	movs	r3, #8
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	4b35      	ldr	r3, [pc, #212]	; (8001834 <main+0x22c>)
 8001760:	2200      	movs	r2, #0
 8001762:	4943      	ldr	r1, [pc, #268]	; (8001870 <main+0x268>)
 8001764:	4843      	ldr	r0, [pc, #268]	; (8001874 <main+0x26c>)
 8001766:	f7ff f877 	bl	8000858 <Step_Driver_init>
	HAL_TIM_Base_Start_IT(&htim23);
 800176a:	4843      	ldr	r0, [pc, #268]	; (8001878 <main+0x270>)
 800176c:	f00a fef0 	bl	800c550 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Contorl_Flag) {
 8001770:	4b42      	ldr	r3, [pc, #264]	; (800187c <main+0x274>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d036      	beq.n	80017e6 <main+0x1de>
			float Position, Velocity;
			Joint_Traj(&Position,&Velocity);
 8001778:	1d3a      	adds	r2, r7, #4
 800177a:	f107 0308 	add.w	r3, r7, #8
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f000 f97d 	bl	8001a80 <Joint_Traj>
			AS5047U_Position_Highspeed_Read(&Encoder[0]);
 8001786:	4832      	ldr	r0, [pc, #200]	; (8001850 <main+0x248>)
 8001788:	f7fe ff75 	bl	8000676 <AS5047U_Position_Highspeed_Read>
			position_test = (float) (Encoder[0].Position) * PI / 8192.0f;
 800178c:	4b30      	ldr	r3, [pc, #192]	; (8001850 <main+0x248>)
 800178e:	89db      	ldrh	r3, [r3, #14]
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001798:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001880 <main+0x278>
 800179c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017a0:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001884 <main+0x27c>
 80017a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a8:	4b37      	ldr	r3, [pc, #220]	; (8001888 <main+0x280>)
 80017aa:	edc3 7a00 	vstr	s15, [r3]
			CascadeControl(&Control[0], &Kalman[0], position_test,Position,Velocity);
 80017ae:	4b36      	ldr	r3, [pc, #216]	; (8001888 <main+0x280>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80017b8:	edd7 6a01 	vldr	s13, [r7, #4]
 80017bc:	eeb0 1a66 	vmov.f32	s2, s13
 80017c0:	eef0 0a47 	vmov.f32	s1, s14
 80017c4:	eeb0 0a67 	vmov.f32	s0, s15
 80017c8:	4924      	ldr	r1, [pc, #144]	; (800185c <main+0x254>)
 80017ca:	4827      	ldr	r0, [pc, #156]	; (8001868 <main+0x260>)
 80017cc:	f7ff fc64 	bl	8001098 <CascadeControl>
			Step_Driver(&Stepper[0], Control[0].Output);
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <main+0x260>)
 80017d2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80017d6:	eeb0 0a67 	vmov.f32	s0, s15
 80017da:	4826      	ldr	r0, [pc, #152]	; (8001874 <main+0x26c>)
 80017dc:	f7ff f864 	bl	80008a8 <Step_Driver>
			Contorl_Flag = 0;
 80017e0:	4b26      	ldr	r3, [pc, #152]	; (800187c <main+0x274>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
		}
		int a = HAL_GetTick();
 80017e6:	f001 ff75 	bl	80036d4 <HAL_GetTick>
 80017ea:	4603      	mov	r3, r0
 80017ec:	60fb      	str	r3, [r7, #12]
		if (a - Last_Update_Time_MS >= 1000) {
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	4b26      	ldr	r3, [pc, #152]	; (800188c <main+0x284>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017fa:	d3b9      	bcc.n	8001770 <main+0x168>
			Last_Update_Time_MS = a;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4a23      	ldr	r2, [pc, #140]	; (800188c <main+0x284>)
 8001800:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc3); 					//read temperature sensor
 8001802:	4810      	ldr	r0, [pc, #64]	; (8001844 <main+0x23c>)
 8001804:	f002 fc50 	bl	80040a8 <HAL_ADC_Start_IT>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800180c:	4820      	ldr	r0, [pc, #128]	; (8001890 <main+0x288>)
 800180e:	f006 fc42 	bl	8008096 <HAL_GPIO_TogglePin>
  {
 8001812:	e7ad      	b.n	8001770 <main+0x168>
 8001814:	f3af 8000 	nop.w
 8001818:	00000000 	.word	0x00000000
 800181c:	40540000 	.word	0x40540000
 8001820:	d2f1a9fc 	.word	0xd2f1a9fc
 8001824:	3f50624d 	.word	0x3f50624d
 8001828:	00000000 	.word	0x00000000
 800182c:	40b38800 	.word	0x40b38800
 8001830:	58020c00 	.word	0x58020c00
 8001834:	58021000 	.word	0x58021000
 8001838:	1ff1e840 	.word	0x1ff1e840
 800183c:	1ff1e820 	.word	0x1ff1e820
 8001840:	200004b0 	.word	0x200004b0
 8001844:	20000040 	.word	0x20000040
 8001848:	200000b0 	.word	0x200000b0
 800184c:	200004c0 	.word	0x200004c0
 8001850:	200003f0 	.word	0x200003f0
 8001854:	20000030 	.word	0x20000030
 8001858:	20000b90 	.word	0x20000b90
 800185c:	200002e8 	.word	0x200002e8
 8001860:	44c80000 	.word	0x44c80000
 8001864:	00000000 	.word	0x00000000
 8001868:	2000012c 	.word	0x2000012c
 800186c:	0007a120 	.word	0x0007a120
 8001870:	200006b4 	.word	0x200006b4
 8001874:	20000460 	.word	0x20000460
 8001878:	20000914 	.word	0x20000914
 800187c:	20000128 	.word	0x20000128
 8001880:	40490fdb 	.word	0x40490fdb
 8001884:	46000000 	.word	0x46000000
 8001888:	20000124 	.word	0x20000124
 800188c:	200003ec 	.word	0x200003ec
 8001890:	58020800 	.word	0x58020800

08001894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b09c      	sub	sp, #112	; 0x70
 8001898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189e:	224c      	movs	r2, #76	; 0x4c
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f00d fefa 	bl	800f69c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2220      	movs	r2, #32
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f00d fef4 	bl	800f69c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80018b4:	2002      	movs	r0, #2
 80018b6:	f006 fd31 	bl	800831c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	4b2f      	ldr	r3, [pc, #188]	; (800197c <SystemClock_Config+0xe8>)
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	4a2e      	ldr	r2, [pc, #184]	; (800197c <SystemClock_Config+0xe8>)
 80018c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018c8:	6193      	str	r3, [r2, #24]
 80018ca:	4b2c      	ldr	r3, [pc, #176]	; (800197c <SystemClock_Config+0xe8>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80018d6:	bf00      	nop
 80018d8:	4b28      	ldr	r3, [pc, #160]	; (800197c <SystemClock_Config+0xe8>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018e4:	d1f8      	bne.n	80018d8 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <SystemClock_Config+0xec>)
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	f023 0303 	bic.w	r3, r3, #3
 80018ee:	4a24      	ldr	r2, [pc, #144]	; (8001980 <SystemClock_Config+0xec>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f6:	2301      	movs	r3, #1
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001900:	2302      	movs	r3, #2
 8001902:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001904:	2302      	movs	r3, #2
 8001906:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001908:	2302      	movs	r3, #2
 800190a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800190c:	232c      	movs	r3, #44	; 0x2c
 800190e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001910:	2301      	movs	r3, #1
 8001912:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001914:	2302      	movs	r3, #2
 8001916:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001918:	2302      	movs	r3, #2
 800191a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800191c:	230c      	movs	r3, #12
 800191e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001920:	2300      	movs	r3, #0
 8001922:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192c:	4618      	mov	r0, r3
 800192e:	f006 fd2f 	bl	8008390 <HAL_RCC_OscConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001938:	f000 f90e 	bl	8001b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193c:	233f      	movs	r3, #63	; 0x3f
 800193e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001940:	2303      	movs	r3, #3
 8001942:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001948:	2308      	movs	r3, #8
 800194a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800194c:	2340      	movs	r3, #64	; 0x40
 800194e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001950:	2340      	movs	r3, #64	; 0x40
 8001952:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001958:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800195a:	2340      	movs	r3, #64	; 0x40
 800195c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2103      	movs	r1, #3
 8001962:	4618      	mov	r0, r3
 8001964:	f007 f8c0 	bl	8008ae8 <HAL_RCC_ClockConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800196e:	f000 f8f3 	bl	8001b58 <Error_Handler>
  }
}
 8001972:	bf00      	nop
 8001974:	3770      	adds	r7, #112	; 0x70
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	58024800 	.word	0x58024800
 8001980:	58024400 	.word	0x58024400

08001984 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b0ae      	sub	sp, #184	; 0xb8
 8001988:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	22b4      	movs	r2, #180	; 0xb4
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f00d fe83 	bl	800f69c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <PeriphCommonClock_Config+0x64>)
 8001998:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800199a:	2302      	movs	r3, #2
 800199c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800199e:	2310      	movs	r3, #16
 80019a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80019a2:	2302      	movs	r3, #2
 80019a4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80019a6:	2302      	movs	r3, #2
 80019a8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80019aa:	2302      	movs	r3, #2
 80019ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80019ae:	23c0      	movs	r3, #192	; 0xc0
 80019b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 80019ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019be:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 80019c0:	2301      	movs	r3, #1
 80019c2:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 80019c4:	2308      	movs	r3, #8
 80019c6:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4618      	mov	r0, r3
 80019d2:	f007 fc15 	bl	8009200 <HAL_RCCEx_PeriphCLKConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80019dc:	f000 f8bc 	bl	8001b58 <Error_Handler>
  }
}
 80019e0:	bf00      	nop
 80019e2:	37b8      	adds	r7, #184	; 0xb8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	00082003 	.word	0x00082003

080019ec <HAL_ADC_ConvCpltCallback>:
////    HAL_UART_DeInit();
//    HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 14);
//}
//

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <HAL_ADC_ConvCpltCallback+0x54>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d11c      	bne.n	8001a36 <HAL_ADC_ConvCpltCallback+0x4a>
		uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 80019fc:	4810      	ldr	r0, [pc, #64]	; (8001a40 <HAL_ADC_ConvCpltCallback+0x54>)
 80019fe:	f002 fc93 	bl	8004328 <HAL_ADC_GetValue>
 8001a02:	60f8      	str	r0, [r7, #12]
		Temperature = Temp_Calibration
				* (float) ((float) ADC_Output - *(unsigned short*) (0x1FF1E820))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_ADC_ConvCpltCallback+0x58>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	ee67 7a27 	vmul.f32	s15, s14, s15
				+ 30.0f;
 8001a28:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
		Temperature = Temp_Calibration
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_ADC_ConvCpltCallback+0x60>)
 8001a32:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000040 	.word	0x20000040
 8001a44:	1ff1e820 	.word	0x1ff1e820
 8001a48:	200004b0 	.word	0x200004b0
 8001a4c:	200002cc 	.word	0x200002cc

08001a50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	if (htim == &htim23) {
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d102      	bne.n	8001a66 <HAL_TIM_PeriodElapsedCallback+0x16>
		Contorl_Flag = 1;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
	}
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000914 	.word	0x20000914
 8001a78:	20000128 	.word	0x20000128
 8001a7c:	00000000 	.word	0x00000000

08001a80 <Joint_Traj>:

void Joint_Traj(float *Position, float *Velocity){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
	if(!traj_finish){
 8001a8a:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <Joint_Traj+0xc8>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d14f      	bne.n	8001b32 <Joint_Traj+0xb2>
		float traj_t_set[5];
		traj_t_set[0] = t;
 8001a92:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <Joint_Traj+0xcc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60fb      	str	r3, [r7, #12]
		traj_t_set[1] = t*t;
 8001a98:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <Joint_Traj+0xcc>)
 8001a9a:	ed93 7a00 	vldr	s14, [r3]
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <Joint_Traj+0xcc>)
 8001aa0:	edd3 7a00 	vldr	s15, [r3]
 8001aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa8:	edc7 7a04 	vstr	s15, [r7, #16]
		traj_t_set[2] = traj_t_set[1]*t;
 8001aac:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ab0:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <Joint_Traj+0xcc>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aba:	edc7 7a05 	vstr	s15, [r7, #20]
		traj_t_set[3] = traj_t_set[2]*t;
 8001abe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <Joint_Traj+0xcc>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001acc:	edc7 7a06 	vstr	s15, [r7, #24]
		traj_t_set[4] = traj_t_set[3]*t;
 8001ad0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <Joint_Traj+0xcc>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ade:	edc7 7a07 	vstr	s15, [r7, #28]
		/*for loop For 4 Join*/
		TrajFollow(&Traj[0], traj_t_set, Position, Velocity);
 8001ae2:	f107 010c 	add.w	r1, r7, #12
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4819      	ldr	r0, [pc, #100]	; (8001b50 <Joint_Traj+0xd0>)
 8001aec:	f7fe ff56 	bl	800099c <TrajFollow>
		/*for loop For 4 Join*/
		t += delta_t;
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <Joint_Traj+0xcc>)
 8001af2:	edd3 7a00 	vldr	s15, [r3]
 8001af6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001afa:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8001b40 <Joint_Traj+0xc0>
 8001afe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <Joint_Traj+0xcc>)
 8001b08:	edc3 7a00 	vstr	s15, [r3]
		if (t > T_Traj){
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <Joint_Traj+0xcc>)
 8001b0e:	ed93 7a00 	vldr	s14, [r3]
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <Joint_Traj+0xd4>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b20:	dc00      	bgt.n	8001b24 <Joint_Traj+0xa4>
			traj_finish = 1;
			t = 0;
		}
	}
}
 8001b22:	e006      	b.n	8001b32 <Joint_Traj+0xb2>
			traj_finish = 1;
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <Joint_Traj+0xc8>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
			t = 0;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <Joint_Traj+0xcc>)
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
}
 8001b32:	bf00      	nop
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	f3af 8000 	nop.w
 8001b40:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b44:	3f50624d 	.word	0x3f50624d
 8001b48:	2000002c 	.word	0x2000002c
 8001b4c:	20000120 	.word	0x20000120
 8001b50:	2000036c 	.word	0x2000036c
 8001b54:	200004b4 	.word	0x200004b4

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <Error_Handler+0x8>
	...

08001b64 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001b68:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001b6a:	4a29      	ldr	r2, [pc, #164]	; (8001c10 <MX_SPI3_Init+0xac>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b6e:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001b70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b74:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001b7e:	2207      	movs	r2, #7
 8001b80:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b88:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001b8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b8e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b90:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001b92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b96:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001b98:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001b9a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001b9e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001bb4:	221d      	movs	r2, #29
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001bf8:	f009 fb94 	bl	800b324 <HAL_SPI_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001c02:	f7ff ffa9 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200004c0 	.word	0x200004c0
 8001c10:	40003c00 	.word	0x40003c00

08001c14 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c1a:	4a28      	ldr	r2, [pc, #160]	; (8001cbc <MX_SPI4_Init+0xa8>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001c1e:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c20:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c24:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001c26:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c2e:	220f      	movs	r2, #15
 8001c30:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c44:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c4c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001ca4:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <MX_SPI4_Init+0xa4>)
 8001ca6:	f009 fb3d 	bl	800b324 <HAL_SPI_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001cb0:	f7ff ff52 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000548 	.word	0x20000548
 8001cbc:	40013400 	.word	0x40013400

08001cc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b0b8      	sub	sp, #224	; 0xe0
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd8:	f107 0318 	add.w	r3, r7, #24
 8001cdc:	22b4      	movs	r2, #180	; 0xb4
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f00d fcdb 	bl	800f69c <memset>
  if(spiHandle->Instance==SPI3)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a4b      	ldr	r2, [pc, #300]	; (8001e18 <HAL_SPI_MspInit+0x158>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d156      	bne.n	8001d9e <HAL_SPI_MspInit+0xde>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001cf6:	2319      	movs	r3, #25
 8001cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 8001cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfe:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001d00:	2302      	movs	r3, #2
 8001d02:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001d04:	2302      	movs	r3, #2
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d14:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d20:	f107 0318 	add.w	r3, r7, #24
 8001d24:	4618      	mov	r0, r3
 8001d26:	f007 fa6b 	bl	8009200 <HAL_RCCEx_PeriphCLKConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8001d30:	f7ff ff12 	bl	8001b58 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d34:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <HAL_SPI_MspInit+0x15c>)
 8001d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d3a:	4a38      	ldr	r2, [pc, #224]	; (8001e1c <HAL_SPI_MspInit+0x15c>)
 8001d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d44:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <HAL_SPI_MspInit+0x15c>)
 8001d46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d52:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <HAL_SPI_MspInit+0x15c>)
 8001d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d58:	4a30      	ldr	r2, [pc, #192]	; (8001e1c <HAL_SPI_MspInit+0x15c>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d62:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <HAL_SPI_MspInit+0x15c>)
 8001d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d70:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d8a:	2306      	movs	r3, #6
 8001d8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d94:	4619      	mov	r1, r3
 8001d96:	4822      	ldr	r0, [pc, #136]	; (8001e20 <HAL_SPI_MspInit+0x160>)
 8001d98:	f005 ffbc 	bl	8007d14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001d9c:	e038      	b.n	8001e10 <HAL_SPI_MspInit+0x150>
  else if(spiHandle->Instance==SPI4)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a20      	ldr	r2, [pc, #128]	; (8001e24 <HAL_SPI_MspInit+0x164>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d133      	bne.n	8001e10 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001da8:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <HAL_SPI_MspInit+0x15c>)
 8001daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dae:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <HAL_SPI_MspInit+0x15c>)
 8001db0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001db4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_SPI_MspInit+0x15c>)
 8001dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_SPI_MspInit+0x15c>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dcc:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <HAL_SPI_MspInit+0x15c>)
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_SPI_MspInit+0x15c>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 8001de4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001de8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001dfe:	2305      	movs	r3, #5
 8001e00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4807      	ldr	r0, [pc, #28]	; (8001e28 <HAL_SPI_MspInit+0x168>)
 8001e0c:	f005 ff82 	bl	8007d14 <HAL_GPIO_Init>
}
 8001e10:	bf00      	nop
 8001e12:	37e0      	adds	r7, #224	; 0xe0
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40003c00 	.word	0x40003c00
 8001e1c:	58024400 	.word	0x58024400
 8001e20:	58020800 	.word	0x58020800
 8001e24:	40013400 	.word	0x40013400
 8001e28:	58021000 	.word	0x58021000

08001e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_MspInit+0x30>)
 8001e34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e38:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_MspInit+0x30>)
 8001e3a:	f043 0302 	orr.w	r3, r3, #2
 8001e3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_MspInit+0x30>)
 8001e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	58024400 	.word	0x58024400

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <NMI_Handler+0x4>

08001e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <MemManage_Handler+0x4>

08001e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eac:	f001 fbfe 	bl	80036ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <DMA1_Stream0_IRQHandler+0x10>)
 8001eba:	f004 fc19 	bl	80066f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000b18 	.word	0x20000b18

08001ec8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <ADC3_IRQHandler+0x10>)
 8001ece:	f002 fa39 	bl	8004344 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000040 	.word	0x20000040

08001edc <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <TIM23_IRQHandler+0x10>)
 8001ee2:	f00a fe2b 	bl	800cb3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000914 	.word	0x20000914

08001ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ef4:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <SystemInit+0xd8>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efa:	4a33      	ldr	r2, [pc, #204]	; (8001fc8 <SystemInit+0xd8>)
 8001efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f04:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <SystemInit+0xdc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	2b06      	cmp	r3, #6
 8001f0e:	d807      	bhi.n	8001f20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f10:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <SystemInit+0xdc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 030f 	bic.w	r3, r3, #15
 8001f18:	4a2c      	ldr	r2, [pc, #176]	; (8001fcc <SystemInit+0xdc>)
 8001f1a:	f043 0307 	orr.w	r3, r3, #7
 8001f1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f20:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <SystemInit+0xe0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a2a      	ldr	r2, [pc, #168]	; (8001fd0 <SystemInit+0xe0>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <SystemInit+0xe0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f32:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <SystemInit+0xe0>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4926      	ldr	r1, [pc, #152]	; (8001fd0 <SystemInit+0xe0>)
 8001f38:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <SystemInit+0xe4>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f3e:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <SystemInit+0xdc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <SystemInit+0xdc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 030f 	bic.w	r3, r3, #15
 8001f52:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <SystemInit+0xdc>)
 8001f54:	f043 0307 	orr.w	r3, r3, #7
 8001f58:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <SystemInit+0xe0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <SystemInit+0xe0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <SystemInit+0xe0>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <SystemInit+0xe0>)
 8001f6e:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <SystemInit+0xe8>)
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <SystemInit+0xe0>)
 8001f74:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <SystemInit+0xec>)
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f78:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <SystemInit+0xe0>)
 8001f7a:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <SystemInit+0xf0>)
 8001f7c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <SystemInit+0xe0>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <SystemInit+0xe0>)
 8001f86:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <SystemInit+0xf0>)
 8001f88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <SystemInit+0xe0>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <SystemInit+0xe0>)
 8001f92:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <SystemInit+0xf0>)
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <SystemInit+0xe0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <SystemInit+0xe0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <SystemInit+0xe0>)
 8001fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <SystemInit+0xe0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <SystemInit+0xf4>)
 8001fb0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001fb4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <SystemInit+0xd8>)
 8001fb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fbc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00
 8001fcc:	52002000 	.word	0x52002000
 8001fd0:	58024400 	.word	0x58024400
 8001fd4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001fd8:	02020200 	.word	0x02020200
 8001fdc:	01ff0000 	.word	0x01ff0000
 8001fe0:	01010280 	.word	0x01010280
 8001fe4:	52004000 	.word	0x52004000

08001fe8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b098      	sub	sp, #96	; 0x60
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ffa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	611a      	str	r2, [r3, #16]
 800200a:	615a      	str	r2, [r3, #20]
 800200c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	2234      	movs	r2, #52	; 0x34
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f00d fb41 	bl	800f69c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800201a:	4b39      	ldr	r3, [pc, #228]	; (8002100 <MX_TIM1_Init+0x118>)
 800201c:	4a39      	ldr	r2, [pc, #228]	; (8002104 <MX_TIM1_Init+0x11c>)
 800201e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002020:	4b37      	ldr	r3, [pc, #220]	; (8002100 <MX_TIM1_Init+0x118>)
 8002022:	2200      	movs	r2, #0
 8002024:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002026:	4b36      	ldr	r3, [pc, #216]	; (8002100 <MX_TIM1_Init+0x118>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800202c:	4b34      	ldr	r3, [pc, #208]	; (8002100 <MX_TIM1_Init+0x118>)
 800202e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002032:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002034:	4b32      	ldr	r3, [pc, #200]	; (8002100 <MX_TIM1_Init+0x118>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800203a:	4b31      	ldr	r3, [pc, #196]	; (8002100 <MX_TIM1_Init+0x118>)
 800203c:	2200      	movs	r2, #0
 800203e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002040:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <MX_TIM1_Init+0x118>)
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002046:	482e      	ldr	r0, [pc, #184]	; (8002100 <MX_TIM1_Init+0x118>)
 8002048:	f00a fb08 	bl	800c65c <HAL_TIM_OC_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002052:	f7ff fd81 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002062:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002066:	4619      	mov	r1, r3
 8002068:	4825      	ldr	r0, [pc, #148]	; (8002100 <MX_TIM1_Init+0x118>)
 800206a:	f00b fd75 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002074:	f7ff fd70 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002078:	2300      	movs	r3, #0
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002080:	2300      	movs	r3, #0
 8002082:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002084:	2300      	movs	r3, #0
 8002086:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002090:	2300      	movs	r3, #0
 8002092:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002094:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002098:	2200      	movs	r2, #0
 800209a:	4619      	mov	r1, r3
 800209c:	4818      	ldr	r0, [pc, #96]	; (8002100 <MX_TIM1_Init+0x118>)
 800209e:	f00a fe6d 	bl	800cd7c <HAL_TIM_OC_ConfigChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80020a8:	f7ff fd56 	bl	8001b58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	4807      	ldr	r0, [pc, #28]	; (8002100 <MX_TIM1_Init+0x118>)
 80020e2:	f00b fdd5 	bl	800dc90 <HAL_TIMEx_ConfigBreakDeadTime>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80020ec:	f7ff fd34 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020f0:	4803      	ldr	r0, [pc, #12]	; (8002100 <MX_TIM1_Init+0x118>)
 80020f2:	f000 ff41 	bl	8002f78 <HAL_TIM_MspPostInit>

}
 80020f6:	bf00      	nop
 80020f8:	3760      	adds	r7, #96	; 0x60
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	2000087c 	.word	0x2000087c
 8002104:	40010000 	.word	0x40010000

08002108 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800210e:	f107 030c 	add.w	r3, r7, #12
 8002112:	2224      	movs	r2, #36	; 0x24
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f00d fac0 	bl	800f69c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211c:	463b      	mov	r3, r7
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002126:	4b21      	ldr	r3, [pc, #132]	; (80021ac <MX_TIM2_Init+0xa4>)
 8002128:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800212c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800212e:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <MX_TIM2_Init+0xa4>)
 8002130:	2200      	movs	r2, #0
 8002132:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002134:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <MX_TIM2_Init+0xa4>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16383;
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <MX_TIM2_Init+0xa4>)
 800213c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8002140:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002142:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <MX_TIM2_Init+0xa4>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <MX_TIM2_Init+0xa4>)
 800214a:	2280      	movs	r2, #128	; 0x80
 800214c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800214e:	2303      	movs	r3, #3
 8002150:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002156:	2301      	movs	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002166:	2301      	movs	r3, #1
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	4619      	mov	r1, r3
 8002178:	480c      	ldr	r0, [pc, #48]	; (80021ac <MX_TIM2_Init+0xa4>)
 800217a:	f00a fc39 	bl	800c9f0 <HAL_TIM_Encoder_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002184:	f7ff fce8 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002190:	463b      	mov	r3, r7
 8002192:	4619      	mov	r1, r3
 8002194:	4805      	ldr	r0, [pc, #20]	; (80021ac <MX_TIM2_Init+0xa4>)
 8002196:	f00b fcdf 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80021a0:	f7ff fcda 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021a4:	bf00      	nop
 80021a6:	3730      	adds	r7, #48	; 0x30
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	200008c8 	.word	0x200008c8

080021b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08e      	sub	sp, #56	; 0x38
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d0:	463b      	mov	r3, r7
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	611a      	str	r2, [r3, #16]
 80021de:	615a      	str	r2, [r3, #20]
 80021e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021e2:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <MX_TIM3_Init+0xe8>)
 80021e4:	4a2d      	ldr	r2, [pc, #180]	; (800229c <MX_TIM3_Init+0xec>)
 80021e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021e8:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <MX_TIM3_Init+0xe8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ee:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <MX_TIM3_Init+0xe8>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021f4:	4b28      	ldr	r3, [pc, #160]	; (8002298 <MX_TIM3_Init+0xe8>)
 80021f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fc:	4b26      	ldr	r3, [pc, #152]	; (8002298 <MX_TIM3_Init+0xe8>)
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002202:	4b25      	ldr	r3, [pc, #148]	; (8002298 <MX_TIM3_Init+0xe8>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002208:	4823      	ldr	r0, [pc, #140]	; (8002298 <MX_TIM3_Init+0xe8>)
 800220a:	f00a f94a 	bl	800c4a2 <HAL_TIM_Base_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002214:	f7ff fca0 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800221e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002222:	4619      	mov	r1, r3
 8002224:	481c      	ldr	r0, [pc, #112]	; (8002298 <MX_TIM3_Init+0xe8>)
 8002226:	f00a ff37 	bl	800d098 <HAL_TIM_ConfigClockSource>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002230:	f7ff fc92 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002234:	4818      	ldr	r0, [pc, #96]	; (8002298 <MX_TIM3_Init+0xe8>)
 8002236:	f00a fa68 	bl	800c70a <HAL_TIM_PWM_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002240:	f7ff fc8a 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	4619      	mov	r1, r3
 8002252:	4811      	ldr	r0, [pc, #68]	; (8002298 <MX_TIM3_Init+0xe8>)
 8002254:	f00b fc80 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800225e:	f7ff fc7b 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002262:	2360      	movs	r3, #96	; 0x60
 8002264:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002272:	463b      	mov	r3, r7
 8002274:	2200      	movs	r2, #0
 8002276:	4619      	mov	r1, r3
 8002278:	4807      	ldr	r0, [pc, #28]	; (8002298 <MX_TIM3_Init+0xe8>)
 800227a:	f00a fdf9 	bl	800ce70 <HAL_TIM_PWM_ConfigChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002284:	f7ff fc68 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002288:	4803      	ldr	r0, [pc, #12]	; (8002298 <MX_TIM3_Init+0xe8>)
 800228a:	f000 fe75 	bl	8002f78 <HAL_TIM_MspPostInit>

}
 800228e:	bf00      	nop
 8002290:	3738      	adds	r7, #56	; 0x38
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000798 	.word	0x20000798
 800229c:	40000400 	.word	0x40000400

080022a0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08c      	sub	sp, #48	; 0x30
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022a6:	f107 030c 	add.w	r3, r7, #12
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f00d f9f4 	bl	800f69c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b4:	463b      	mov	r3, r7
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <MX_TIM4_Init+0xa4>)
 80022c0:	4a21      	ldr	r2, [pc, #132]	; (8002348 <MX_TIM4_Init+0xa8>)
 80022c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80022c4:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <MX_TIM4_Init+0xa4>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ca:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <MX_TIM4_Init+0xa4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <MX_TIM4_Init+0xa4>)
 80022d2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80022d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <MX_TIM4_Init+0xa4>)
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <MX_TIM4_Init+0xa4>)
 80022e0:	2280      	movs	r2, #128	; 0x80
 80022e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022e4:	2303      	movs	r3, #3
 80022e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022ec:	2301      	movs	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022f8:	2300      	movs	r3, #0
 80022fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022fc:	2301      	movs	r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002300:	2300      	movs	r3, #0
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	4619      	mov	r1, r3
 800230e:	480d      	ldr	r0, [pc, #52]	; (8002344 <MX_TIM4_Init+0xa4>)
 8002310:	f00a fb6e 	bl	800c9f0 <HAL_TIM_Encoder_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800231a:	f7ff fc1d 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002326:	463b      	mov	r3, r7
 8002328:	4619      	mov	r1, r3
 800232a:	4806      	ldr	r0, [pc, #24]	; (8002344 <MX_TIM4_Init+0xa4>)
 800232c:	f00b fc14 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002336:	f7ff fc0f 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800233a:	bf00      	nop
 800233c:	3730      	adds	r7, #48	; 0x30
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000668 	.word	0x20000668
 8002348:	40000800 	.word	0x40000800

0800234c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	; 0x30
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	2224      	movs	r2, #36	; 0x24
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f00d f99e 	bl	800f69c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002360:	463b      	mov	r3, r7
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800236a:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <MX_TIM5_Init+0xa4>)
 800236c:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <MX_TIM5_Init+0xa8>)
 800236e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <MX_TIM5_Init+0xa4>)
 8002372:	2200      	movs	r2, #0
 8002374:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <MX_TIM5_Init+0xa4>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 16383;
 800237c:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <MX_TIM5_Init+0xa4>)
 800237e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8002382:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <MX_TIM5_Init+0xa4>)
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800238a:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <MX_TIM5_Init+0xa4>)
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002390:	2303      	movs	r3, #3
 8002392:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002398:	2301      	movs	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023a4:	2300      	movs	r3, #0
 80023a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023a8:	2301      	movs	r3, #1
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80023b4:	f107 030c 	add.w	r3, r7, #12
 80023b8:	4619      	mov	r1, r3
 80023ba:	480d      	ldr	r0, [pc, #52]	; (80023f0 <MX_TIM5_Init+0xa4>)
 80023bc:	f00a fb18 	bl	800c9f0 <HAL_TIM_Encoder_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80023c6:	f7ff fbc7 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023d2:	463b      	mov	r3, r7
 80023d4:	4619      	mov	r1, r3
 80023d6:	4806      	ldr	r0, [pc, #24]	; (80023f0 <MX_TIM5_Init+0xa4>)
 80023d8:	f00b fbbe 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80023e2:	f7ff fbb9 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80023e6:	bf00      	nop
 80023e8:	3730      	adds	r7, #48	; 0x30
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000074c 	.word	0x2000074c
 80023f4:	40000c00 	.word	0x40000c00

080023f8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <MX_TIM6_Init+0x68>)
 800240a:	4a16      	ldr	r2, [pc, #88]	; (8002464 <MX_TIM6_Init+0x6c>)
 800240c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <MX_TIM6_Init+0x68>)
 8002410:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002414:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <MX_TIM6_Init+0x68>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <MX_TIM6_Init+0x68>)
 800241e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002422:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <MX_TIM6_Init+0x68>)
 8002426:	2200      	movs	r2, #0
 8002428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800242a:	480d      	ldr	r0, [pc, #52]	; (8002460 <MX_TIM6_Init+0x68>)
 800242c:	f00a f839 	bl	800c4a2 <HAL_TIM_Base_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002436:	f7ff fb8f 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	4619      	mov	r1, r3
 8002446:	4806      	ldr	r0, [pc, #24]	; (8002460 <MX_TIM6_Init+0x68>)
 8002448:	f00b fb86 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002452:	f7ff fb81 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000830 	.word	0x20000830
 8002464:	40001000 	.word	0x40001000

08002468 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08c      	sub	sp, #48	; 0x30
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800246e:	f107 030c 	add.w	r3, r7, #12
 8002472:	2224      	movs	r2, #36	; 0x24
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f00d f910 	bl	800f69c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247c:	463b      	mov	r3, r7
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002486:	4b23      	ldr	r3, [pc, #140]	; (8002514 <MX_TIM8_Init+0xac>)
 8002488:	4a23      	ldr	r2, [pc, #140]	; (8002518 <MX_TIM8_Init+0xb0>)
 800248a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <MX_TIM8_Init+0xac>)
 800248e:	2200      	movs	r2, #0
 8002490:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <MX_TIM8_Init+0xac>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <MX_TIM8_Init+0xac>)
 800249a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800249e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <MX_TIM8_Init+0xac>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80024a6:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <MX_TIM8_Init+0xac>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <MX_TIM8_Init+0xac>)
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024b2:	2303      	movs	r3, #3
 80024b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024ba:	2301      	movs	r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024ca:	2301      	movs	r3, #1
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	4619      	mov	r1, r3
 80024dc:	480d      	ldr	r0, [pc, #52]	; (8002514 <MX_TIM8_Init+0xac>)
 80024de:	f00a fa87 	bl	800c9f0 <HAL_TIM_Encoder_Init>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80024e8:	f7ff fb36 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024f0:	2300      	movs	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80024f8:	463b      	mov	r3, r7
 80024fa:	4619      	mov	r1, r3
 80024fc:	4805      	ldr	r0, [pc, #20]	; (8002514 <MX_TIM8_Init+0xac>)
 80024fe:	f00b fb2b 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002508:	f7ff fb26 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	3730      	adds	r7, #48	; 0x30
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	2000061c 	.word	0x2000061c
 8002518:	40010400 	.word	0x40010400

0800251c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
 8002530:	615a      	str	r2, [r3, #20]
 8002532:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002534:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <MX_TIM13_Init+0x98>)
 8002536:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <MX_TIM13_Init+0x9c>)
 8002538:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550-1;
 800253a:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <MX_TIM13_Init+0x98>)
 800253c:	f240 2225 	movw	r2, #549	; 0x225
 8002540:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002542:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <MX_TIM13_Init+0x98>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <MX_TIM13_Init+0x98>)
 800254a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800254e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <MX_TIM13_Init+0x98>)
 8002552:	2200      	movs	r2, #0
 8002554:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <MX_TIM13_Init+0x98>)
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800255c:	4815      	ldr	r0, [pc, #84]	; (80025b4 <MX_TIM13_Init+0x98>)
 800255e:	f009 ffa0 	bl	800c4a2 <HAL_TIM_Base_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8002568:	f7ff faf6 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800256c:	4811      	ldr	r0, [pc, #68]	; (80025b4 <MX_TIM13_Init+0x98>)
 800256e:	f00a f8cc 	bl	800c70a <HAL_TIM_PWM_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8002578:	f7ff faee 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800257c:	2360      	movs	r3, #96	; 0x60
 800257e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8002580:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002584:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	2200      	movs	r2, #0
 8002592:	4619      	mov	r1, r3
 8002594:	4807      	ldr	r0, [pc, #28]	; (80025b4 <MX_TIM13_Init+0x98>)
 8002596:	f00a fc6b 	bl	800ce70 <HAL_TIM_PWM_ConfigChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 80025a0:	f7ff fada 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80025a4:	4803      	ldr	r0, [pc, #12]	; (80025b4 <MX_TIM13_Init+0x98>)
 80025a6:	f000 fce7 	bl	8002f78 <HAL_TIM_MspPostInit>

}
 80025aa:	bf00      	nop
 80025ac:	3720      	adds	r7, #32
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200007e4 	.word	0x200007e4
 80025b8:	40001c00 	.word	0x40001c00

080025bc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
 80025d0:	615a      	str	r2, [r3, #20]
 80025d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80025d4:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <MX_TIM14_Init+0x98>)
 80025d6:	4a20      	ldr	r2, [pc, #128]	; (8002658 <MX_TIM14_Init+0x9c>)
 80025d8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <MX_TIM14_Init+0x98>)
 80025dc:	f240 2225 	movw	r2, #549	; 0x225
 80025e0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <MX_TIM14_Init+0x98>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 80025e8:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <MX_TIM14_Init+0x98>)
 80025ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025ee:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <MX_TIM14_Init+0x98>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <MX_TIM14_Init+0x98>)
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80025fc:	4815      	ldr	r0, [pc, #84]	; (8002654 <MX_TIM14_Init+0x98>)
 80025fe:	f009 ff50 	bl	800c4a2 <HAL_TIM_Base_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8002608:	f7ff faa6 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800260c:	4811      	ldr	r0, [pc, #68]	; (8002654 <MX_TIM14_Init+0x98>)
 800260e:	f00a f87c 	bl	800c70a <HAL_TIM_PWM_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8002618:	f7ff fa9e 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800261c:	2360      	movs	r3, #96	; 0x60
 800261e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8002620:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002624:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	2200      	movs	r2, #0
 8002632:	4619      	mov	r1, r3
 8002634:	4807      	ldr	r0, [pc, #28]	; (8002654 <MX_TIM14_Init+0x98>)
 8002636:	f00a fc1b 	bl	800ce70 <HAL_TIM_PWM_ConfigChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8002640:	f7ff fa8a 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002644:	4803      	ldr	r0, [pc, #12]	; (8002654 <MX_TIM14_Init+0x98>)
 8002646:	f000 fc97 	bl	8002f78 <HAL_TIM_MspPostInit>

}
 800264a:	bf00      	nop
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000960 	.word	0x20000960
 8002658:	40002000 	.word	0x40002000

0800265c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b098      	sub	sp, #96	; 0x60
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002662:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800266e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	60da      	str	r2, [r3, #12]
 800267c:	611a      	str	r2, [r3, #16]
 800267e:	615a      	str	r2, [r3, #20]
 8002680:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	2234      	movs	r2, #52	; 0x34
 8002686:	2100      	movs	r1, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f00d f807 	bl	800f69c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800268e:	4b35      	ldr	r3, [pc, #212]	; (8002764 <MX_TIM15_Init+0x108>)
 8002690:	4a35      	ldr	r2, [pc, #212]	; (8002768 <MX_TIM15_Init+0x10c>)
 8002692:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550-1;
 8002694:	4b33      	ldr	r3, [pc, #204]	; (8002764 <MX_TIM15_Init+0x108>)
 8002696:	f240 2225 	movw	r2, #549	; 0x225
 800269a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269c:	4b31      	ldr	r3, [pc, #196]	; (8002764 <MX_TIM15_Init+0x108>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <MX_TIM15_Init+0x108>)
 80026a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026a8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026aa:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <MX_TIM15_Init+0x108>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80026b0:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <MX_TIM15_Init+0x108>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <MX_TIM15_Init+0x108>)
 80026b8:	2280      	movs	r2, #128	; 0x80
 80026ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80026bc:	4829      	ldr	r0, [pc, #164]	; (8002764 <MX_TIM15_Init+0x108>)
 80026be:	f00a f824 	bl	800c70a <HAL_TIM_PWM_Init>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 80026c8:	f7ff fa46 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026cc:	2300      	movs	r3, #0
 80026ce:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80026d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026d8:	4619      	mov	r1, r3
 80026da:	4822      	ldr	r0, [pc, #136]	; (8002764 <MX_TIM15_Init+0x108>)
 80026dc:	f00b fa3c 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 80026e6:	f7ff fa37 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ea:	2360      	movs	r3, #96	; 0x60
 80026ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f2:	2300      	movs	r3, #0
 80026f4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026f6:	2300      	movs	r3, #0
 80026f8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002706:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800270a:	2200      	movs	r2, #0
 800270c:	4619      	mov	r1, r3
 800270e:	4815      	ldr	r0, [pc, #84]	; (8002764 <MX_TIM15_Init+0x108>)
 8002710:	f00a fbae 	bl	800ce70 <HAL_TIM_PWM_ConfigChannel>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 800271a:	f7ff fa1d 	bl	8001b58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002736:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	4619      	mov	r1, r3
 8002744:	4807      	ldr	r0, [pc, #28]	; (8002764 <MX_TIM15_Init+0x108>)
 8002746:	f00b faa3 	bl	800dc90 <HAL_TIMEx_ConfigBreakDeadTime>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8002750:	f7ff fa02 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002754:	4803      	ldr	r0, [pc, #12]	; (8002764 <MX_TIM15_Init+0x108>)
 8002756:	f000 fc0f 	bl	8002f78 <HAL_TIM_MspPostInit>

}
 800275a:	bf00      	nop
 800275c:	3760      	adds	r7, #96	; 0x60
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200006b4 	.word	0x200006b4
 8002768:	40014000 	.word	0x40014000

0800276c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b094      	sub	sp, #80	; 0x50
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002772:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	609a      	str	r2, [r3, #8]
 800277e:	60da      	str	r2, [r3, #12]
 8002780:	611a      	str	r2, [r3, #16]
 8002782:	615a      	str	r2, [r3, #20]
 8002784:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002786:	463b      	mov	r3, r7
 8002788:	2234      	movs	r2, #52	; 0x34
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f00c ff85 	bl	800f69c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002792:	4b32      	ldr	r3, [pc, #200]	; (800285c <MX_TIM16_Init+0xf0>)
 8002794:	4a32      	ldr	r2, [pc, #200]	; (8002860 <MX_TIM16_Init+0xf4>)
 8002796:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8002798:	4b30      	ldr	r3, [pc, #192]	; (800285c <MX_TIM16_Init+0xf0>)
 800279a:	f240 2225 	movw	r2, #549	; 0x225
 800279e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a0:	4b2e      	ldr	r3, [pc, #184]	; (800285c <MX_TIM16_Init+0xf0>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80027a6:	4b2d      	ldr	r3, [pc, #180]	; (800285c <MX_TIM16_Init+0xf0>)
 80027a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027ac:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ae:	4b2b      	ldr	r3, [pc, #172]	; (800285c <MX_TIM16_Init+0xf0>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80027b4:	4b29      	ldr	r3, [pc, #164]	; (800285c <MX_TIM16_Init+0xf0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027ba:	4b28      	ldr	r3, [pc, #160]	; (800285c <MX_TIM16_Init+0xf0>)
 80027bc:	2280      	movs	r2, #128	; 0x80
 80027be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80027c0:	4826      	ldr	r0, [pc, #152]	; (800285c <MX_TIM16_Init+0xf0>)
 80027c2:	f009 fe6e 	bl	800c4a2 <HAL_TIM_Base_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 80027cc:	f7ff f9c4 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80027d0:	4822      	ldr	r0, [pc, #136]	; (800285c <MX_TIM16_Init+0xf0>)
 80027d2:	f009 ff9a 	bl	800c70a <HAL_TIM_PWM_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 80027dc:	f7ff f9bc 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e0:	2360      	movs	r3, #96	; 0x60
 80027e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 80027e4:	f240 13f3 	movw	r3, #499	; 0x1f3
 80027e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ea:	2300      	movs	r3, #0
 80027ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027ee:	2300      	movs	r3, #0
 80027f0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002802:	2200      	movs	r2, #0
 8002804:	4619      	mov	r1, r3
 8002806:	4815      	ldr	r0, [pc, #84]	; (800285c <MX_TIM16_Init+0xf0>)
 8002808:	f00a fb32 	bl	800ce70 <HAL_TIM_PWM_ConfigChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 8002812:	f7ff f9a1 	bl	8001b58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800282a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800282e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002838:	463b      	mov	r3, r7
 800283a:	4619      	mov	r1, r3
 800283c:	4807      	ldr	r0, [pc, #28]	; (800285c <MX_TIM16_Init+0xf0>)
 800283e:	f00b fa27 	bl	800dc90 <HAL_TIMEx_ConfigBreakDeadTime>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 8002848:	f7ff f986 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800284c:	4803      	ldr	r0, [pc, #12]	; (800285c <MX_TIM16_Init+0xf0>)
 800284e:	f000 fb93 	bl	8002f78 <HAL_TIM_MspPostInit>

}
 8002852:	bf00      	nop
 8002854:	3750      	adds	r7, #80	; 0x50
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200009ac 	.word	0x200009ac
 8002860:	40014400 	.word	0x40014400

08002864 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b094      	sub	sp, #80	; 0x50
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800286a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	60da      	str	r2, [r3, #12]
 8002878:	611a      	str	r2, [r3, #16]
 800287a:	615a      	str	r2, [r3, #20]
 800287c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800287e:	463b      	mov	r3, r7
 8002880:	2234      	movs	r2, #52	; 0x34
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f00c ff09 	bl	800f69c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800288a:	4b32      	ldr	r3, [pc, #200]	; (8002954 <MX_TIM17_Init+0xf0>)
 800288c:	4a32      	ldr	r2, [pc, #200]	; (8002958 <MX_TIM17_Init+0xf4>)
 800288e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <MX_TIM17_Init+0xf0>)
 8002892:	f240 2225 	movw	r2, #549	; 0x225
 8002896:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002898:	4b2e      	ldr	r3, [pc, #184]	; (8002954 <MX_TIM17_Init+0xf0>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 800289e:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <MX_TIM17_Init+0xf0>)
 80028a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028a4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a6:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <MX_TIM17_Init+0xf0>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80028ac:	4b29      	ldr	r3, [pc, #164]	; (8002954 <MX_TIM17_Init+0xf0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b2:	4b28      	ldr	r3, [pc, #160]	; (8002954 <MX_TIM17_Init+0xf0>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80028b8:	4826      	ldr	r0, [pc, #152]	; (8002954 <MX_TIM17_Init+0xf0>)
 80028ba:	f009 fdf2 	bl	800c4a2 <HAL_TIM_Base_Init>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 80028c4:	f7ff f948 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80028c8:	4822      	ldr	r0, [pc, #136]	; (8002954 <MX_TIM17_Init+0xf0>)
 80028ca:	f009 ff1e 	bl	800c70a <HAL_TIM_PWM_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80028d4:	f7ff f940 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028d8:	2360      	movs	r3, #96	; 0x60
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 80028dc:	f240 13f3 	movw	r3, #499	; 0x1f3
 80028e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028e2:	2300      	movs	r3, #0
 80028e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028e6:	2300      	movs	r3, #0
 80028e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028fa:	2200      	movs	r2, #0
 80028fc:	4619      	mov	r1, r3
 80028fe:	4815      	ldr	r0, [pc, #84]	; (8002954 <MX_TIM17_Init+0xf0>)
 8002900:	f00a fab6 	bl	800ce70 <HAL_TIM_PWM_ConfigChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 800290a:	f7ff f925 	bl	8001b58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002926:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800292c:	2300      	movs	r3, #0
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002930:	463b      	mov	r3, r7
 8002932:	4619      	mov	r1, r3
 8002934:	4807      	ldr	r0, [pc, #28]	; (8002954 <MX_TIM17_Init+0xf0>)
 8002936:	f00b f9ab 	bl	800dc90 <HAL_TIMEx_ConfigBreakDeadTime>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8002940:	f7ff f90a 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002944:	4803      	ldr	r0, [pc, #12]	; (8002954 <MX_TIM17_Init+0xf0>)
 8002946:	f000 fb17 	bl	8002f78 <HAL_TIM_MspPostInit>

}
 800294a:	bf00      	nop
 800294c:	3750      	adds	r7, #80	; 0x50
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000700 	.word	0x20000700
 8002958:	40014800 	.word	0x40014800

0800295c <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002962:	f107 0310 	add.w	r3, r7, #16
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	609a      	str	r2, [r3, #8]
 800296e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800297a:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <MX_TIM23_Init+0x98>)
 800297c:	4a1e      	ldr	r2, [pc, #120]	; (80029f8 <MX_TIM23_Init+0x9c>)
 800297e:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8002980:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <MX_TIM23_Init+0x98>)
 8002982:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002986:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002988:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <MX_TIM23_Init+0x98>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 1000-1;
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <MX_TIM23_Init+0x98>)
 8002990:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002994:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002996:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <MX_TIM23_Init+0x98>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800299c:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <MX_TIM23_Init+0x98>)
 800299e:	2280      	movs	r2, #128	; 0x80
 80029a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 80029a2:	4814      	ldr	r0, [pc, #80]	; (80029f4 <MX_TIM23_Init+0x98>)
 80029a4:	f009 fd7d 	bl	800c4a2 <HAL_TIM_Base_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 80029ae:	f7ff f8d3 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 80029b8:	f107 0310 	add.w	r3, r7, #16
 80029bc:	4619      	mov	r1, r3
 80029be:	480d      	ldr	r0, [pc, #52]	; (80029f4 <MX_TIM23_Init+0x98>)
 80029c0:	f00a fb6a 	bl	800d098 <HAL_TIM_ConfigClockSource>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 80029ca:	f7ff f8c5 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	4619      	mov	r1, r3
 80029da:	4806      	ldr	r0, [pc, #24]	; (80029f4 <MX_TIM23_Init+0x98>)
 80029dc:	f00b f8bc 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 80029e6:	f7ff f8b7 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80029ea:	bf00      	nop
 80029ec:	3720      	adds	r7, #32
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000914 	.word	0x20000914
 80029f8:	4000e000 	.word	0x4000e000

080029fc <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a02:	f107 0310 	add.w	r3, r7, #16
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <MX_TIM24_Init+0x98>)
 8002a1c:	4a1e      	ldr	r2, [pc, #120]	; (8002a98 <MX_TIM24_Init+0x9c>)
 8002a1e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 8002a20:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <MX_TIM24_Init+0x98>)
 8002a22:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002a26:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a28:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <MX_TIM24_Init+0x98>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <MX_TIM24_Init+0x98>)
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295
 8002a34:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a36:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <MX_TIM24_Init+0x98>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a3c:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <MX_TIM24_Init+0x98>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8002a42:	4814      	ldr	r0, [pc, #80]	; (8002a94 <MX_TIM24_Init+0x98>)
 8002a44:	f009 fd2d 	bl	800c4a2 <HAL_TIM_Base_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8002a4e:	f7ff f883 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8002a58:	f107 0310 	add.w	r3, r7, #16
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	480d      	ldr	r0, [pc, #52]	; (8002a94 <MX_TIM24_Init+0x98>)
 8002a60:	f00a fb1a 	bl	800d098 <HAL_TIM_ConfigClockSource>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8002a6a:	f7ff f875 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8002a76:	1d3b      	adds	r3, r7, #4
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4806      	ldr	r0, [pc, #24]	; (8002a94 <MX_TIM24_Init+0x98>)
 8002a7c:	f00b f86c 	bl	800db58 <HAL_TIMEx_MasterConfigSynchronization>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8002a86:	f7ff f867 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8002a8a:	bf00      	nop
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200005d0 	.word	0x200005d0
 8002a98:	4000e400 	.word	0x4000e400

08002a9c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(tim_ocHandle->Instance==TIM1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <HAL_TIM_OC_MspInit+0x88>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d12e      	bne.n	8002b1c <HAL_TIM_OC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_TIM_OC_MspInit+0x8c>)
 8002ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ac4:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <HAL_TIM_OC_MspInit+0x8c>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_TIM_OC_MspInit+0x8c>)
 8002ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_TIM_OC_MspInit+0x8c>)
 8002ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae2:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <HAL_TIM_OC_MspInit+0x8c>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_TIM_OC_MspInit+0x8c>)
 8002aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 8002afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	4619      	mov	r1, r3
 8002b16:	4805      	ldr	r0, [pc, #20]	; (8002b2c <HAL_TIM_OC_MspInit+0x90>)
 8002b18:	f005 f8fc 	bl	8007d14 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	3728      	adds	r7, #40	; 0x28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40010000 	.word	0x40010000
 8002b28:	58024400 	.word	0x58024400
 8002b2c:	58020000 	.word	0x58020000

08002b30 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b090      	sub	sp, #64	; 0x40
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b50:	d14e      	bne.n	8002bf0 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b52:	4b77      	ldr	r3, [pc, #476]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b58:	4a75      	ldr	r2, [pc, #468]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b62:	4b73      	ldr	r3, [pc, #460]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b70:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b76:	4a6e      	ldr	r2, [pc, #440]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b80:	4b6b      	ldr	r3, [pc, #428]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	4b68      	ldr	r3, [pc, #416]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b94:	4a66      	ldr	r2, [pc, #408]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002b96:	f043 0302 	orr.w	r3, r3, #2
 8002b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b9e:	4b64      	ldr	r3, [pc, #400]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	623b      	str	r3, [r7, #32]
 8002baa:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC6A_Pin;
 8002bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	485a      	ldr	r0, [pc, #360]	; (8002d34 <HAL_TIM_Encoder_MspInit+0x204>)
 8002bca:	f005 f8a3 	bl	8007d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC6B_Pin;
 8002bce:	2308      	movs	r3, #8
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bde:	2301      	movs	r3, #1
 8002be0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 8002be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002be6:	4619      	mov	r1, r3
 8002be8:	4853      	ldr	r0, [pc, #332]	; (8002d38 <HAL_TIM_Encoder_MspInit+0x208>)
 8002bea:	f005 f893 	bl	8007d14 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002bee:	e09b      	b.n	8002d28 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(tim_encoderHandle->Instance==TIM4)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a51      	ldr	r2, [pc, #324]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x20c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d12f      	bne.n	8002c5a <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bfa:	4b4d      	ldr	r3, [pc, #308]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c00:	4a4b      	ldr	r2, [pc, #300]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002c02:	f043 0304 	orr.w	r3, r3, #4
 8002c06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c0a:	4b49      	ldr	r3, [pc, #292]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c18:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c1e:	4a44      	ldr	r2, [pc, #272]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002c20:	f043 0308 	orr.w	r3, r3, #8
 8002c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c28:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 8002c36:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c50:	4619      	mov	r1, r3
 8002c52:	483b      	ldr	r0, [pc, #236]	; (8002d40 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c54:	f005 f85e 	bl	8007d14 <HAL_GPIO_Init>
}
 8002c58:	e066      	b.n	8002d28 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(tim_encoderHandle->Instance==TIM5)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a39      	ldr	r2, [pc, #228]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x214>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d12e      	bne.n	8002cc2 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c64:	4b32      	ldr	r3, [pc, #200]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002c66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c6a:	4a31      	ldr	r2, [pc, #196]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002c6c:	f043 0308 	orr.w	r3, r3, #8
 8002c70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c74:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002c76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c82:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c88:	4a29      	ldr	r2, [pc, #164]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c92:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cac:	2300      	movs	r3, #0
 8002cae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cb8:	4619      	mov	r1, r3
 8002cba:	481e      	ldr	r0, [pc, #120]	; (8002d34 <HAL_TIM_Encoder_MspInit+0x204>)
 8002cbc:	f005 f82a 	bl	8007d14 <HAL_GPIO_Init>
}
 8002cc0:	e032      	b.n	8002d28 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(tim_encoderHandle->Instance==TIM8)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a20      	ldr	r2, [pc, #128]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x218>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d12d      	bne.n	8002d28 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ccc:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cd2:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002cd4:	f043 0302 	orr.w	r3, r3, #2
 8002cd8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cdc:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002cf2:	f043 0304 	orr.w	r3, r3, #4
 8002cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HAL_TIM_Encoder_MspInit+0x200>)
 8002cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 8002d08:	23c0      	movs	r3, #192	; 0xc0
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d14:	2300      	movs	r3, #0
 8002d16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d20:	4619      	mov	r1, r3
 8002d22:	480a      	ldr	r0, [pc, #40]	; (8002d4c <HAL_TIM_Encoder_MspInit+0x21c>)
 8002d24:	f004 fff6 	bl	8007d14 <HAL_GPIO_Init>
}
 8002d28:	bf00      	nop
 8002d2a:	3740      	adds	r7, #64	; 0x40
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	58024400 	.word	0x58024400
 8002d34:	58020000 	.word	0x58020000
 8002d38:	58020400 	.word	0x58020400
 8002d3c:	40000800 	.word	0x40000800
 8002d40:	58020c00 	.word	0x58020c00
 8002d44:	40000c00 	.word	0x40000c00
 8002d48:	40010400 	.word	0x40010400
 8002d4c:	58020800 	.word	0x58020800

08002d50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b090      	sub	sp, #64	; 0x40
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a67      	ldr	r2, [pc, #412]	; (8002f0c <HAL_TIM_Base_MspInit+0x1bc>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d12e      	bne.n	8002dd0 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d72:	4b67      	ldr	r3, [pc, #412]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002d74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d78:	4a65      	ldr	r2, [pc, #404]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002d7a:	f043 0302 	orr.w	r3, r3, #2
 8002d7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d82:	4b63      	ldr	r3, [pc, #396]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002d84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d90:	4b5f      	ldr	r3, [pc, #380]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d96:	4a5e      	ldr	r2, [pc, #376]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002da0:	4b5b      	ldr	r3, [pc, #364]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC5B_DIR_Pin;
 8002dae:	2320      	movs	r3, #32
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC5B_DIR_GPIO_Port, &GPIO_InitStruct);
 8002dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4852      	ldr	r0, [pc, #328]	; (8002f14 <HAL_TIM_Base_MspInit+0x1c4>)
 8002dca:	f004 ffa3 	bl	8007d14 <HAL_GPIO_Init>
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8002dce:	e099      	b.n	8002f04 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM6)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a50      	ldr	r2, [pc, #320]	; (8002f18 <HAL_TIM_Base_MspInit+0x1c8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d10f      	bne.n	8002dfa <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002dda:	4b4d      	ldr	r3, [pc, #308]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002de0:	4a4b      	ldr	r2, [pc, #300]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002de2:	f043 0310 	orr.w	r3, r3, #16
 8002de6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dea:	4b49      	ldr	r3, [pc, #292]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	623b      	str	r3, [r7, #32]
 8002df6:	6a3b      	ldr	r3, [r7, #32]
}
 8002df8:	e084      	b.n	8002f04 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM13)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a47      	ldr	r2, [pc, #284]	; (8002f1c <HAL_TIM_Base_MspInit+0x1cc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d10f      	bne.n	8002e24 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002e04:	4b42      	ldr	r3, [pc, #264]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e0a:	4a41      	ldr	r2, [pc, #260]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e14:	4b3e      	ldr	r3, [pc, #248]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	69fb      	ldr	r3, [r7, #28]
}
 8002e22:	e06f      	b.n	8002f04 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM14)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a3d      	ldr	r2, [pc, #244]	; (8002f20 <HAL_TIM_Base_MspInit+0x1d0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10f      	bne.n	8002e4e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002e2e:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e34:	4a36      	ldr	r2, [pc, #216]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e3e:	4b34      	ldr	r3, [pc, #208]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
}
 8002e4c:	e05a      	b.n	8002f04 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM16)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a34      	ldr	r2, [pc, #208]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d10f      	bne.n	8002e78 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002e58:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e5e:	4a2c      	ldr	r2, [pc, #176]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e68:	4b29      	ldr	r3, [pc, #164]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	697b      	ldr	r3, [r7, #20]
}
 8002e76:	e045      	b.n	8002f04 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM17)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2a      	ldr	r2, [pc, #168]	; (8002f28 <HAL_TIM_Base_MspInit+0x1d8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d10f      	bne.n	8002ea2 <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002e82:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e88:	4a21      	ldr	r2, [pc, #132]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e92:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	693b      	ldr	r3, [r7, #16]
}
 8002ea0:	e030      	b.n	8002f04 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM23)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a21      	ldr	r2, [pc, #132]	; (8002f2c <HAL_TIM_Base_MspInit+0x1dc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d117      	bne.n	8002edc <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8002eac:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002eae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002eb2:	4a17      	ldr	r2, [pc, #92]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eb8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ebe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ec2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	20a1      	movs	r0, #161	; 0xa1
 8002ed0:	f002 fd2b 	bl	800592a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8002ed4:	20a1      	movs	r0, #161	; 0xa1
 8002ed6:	f002 fd42 	bl	800595e <HAL_NVIC_EnableIRQ>
}
 8002eda:	e013      	b.n	8002f04 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM24)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <HAL_TIM_Base_MspInit+0x1e0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d10e      	bne.n	8002f04 <HAL_TIM_Base_MspInit+0x1b4>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ee8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002eec:	4a08      	ldr	r2, [pc, #32]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ef8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]
}
 8002f04:	bf00      	nop
 8002f06:	3740      	adds	r7, #64	; 0x40
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	58024400 	.word	0x58024400
 8002f14:	58020400 	.word	0x58020400
 8002f18:	40001000 	.word	0x40001000
 8002f1c:	40001c00 	.word	0x40001c00
 8002f20:	40002000 	.word	0x40002000
 8002f24:	40014400 	.word	0x40014400
 8002f28:	40014800 	.word	0x40014800
 8002f2c:	4000e000 	.word	0x4000e000
 8002f30:	4000e400 	.word	0x4000e400

08002f34 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0b      	ldr	r2, [pc, #44]	; (8002f70 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10e      	bne.n	8002f64 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_TIM_PWM_MspInit+0x40>)
 8002f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f4c:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <HAL_TIM_PWM_MspInit+0x40>)
 8002f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <HAL_TIM_PWM_MspInit+0x40>)
 8002f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	40014000 	.word	0x40014000
 8002f74:	58024400 	.word	0x58024400

08002f78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08e      	sub	sp, #56	; 0x38
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a83      	ldr	r2, [pc, #524]	; (80031a4 <HAL_TIM_MspPostInit+0x22c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d120      	bne.n	8002fdc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9a:	4b83      	ldr	r3, [pc, #524]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 8002f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa0:	4a81      	ldr	r2, [pc, #516]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002faa:	4b7f      	ldr	r3, [pc, #508]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 8002fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	623b      	str	r3, [r7, #32]
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 8002fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 8002fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4875      	ldr	r0, [pc, #468]	; (80031ac <HAL_TIM_MspPostInit+0x234>)
 8002fd6:	f004 fe9d 	bl	8007d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002fda:	e0de      	b.n	800319a <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM3)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a73      	ldr	r2, [pc, #460]	; (80031b0 <HAL_TIM_MspPostInit+0x238>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d11f      	bne.n	8003026 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe6:	4b70      	ldr	r3, [pc, #448]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 8002fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fec:	4a6e      	ldr	r2, [pc, #440]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 8002fee:	f043 0302 	orr.w	r3, r3, #2
 8002ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ff6:	4b6c      	ldr	r3, [pc, #432]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 8002ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC5A_StepGriper_Pin;
 8003004:	2310      	movs	r3, #16
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003008:	2302      	movs	r3, #2
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300c:	2300      	movs	r3, #0
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003010:	2300      	movs	r3, #0
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003014:	2302      	movs	r3, #2
 8003016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC5A_StepGriper_GPIO_Port, &GPIO_InitStruct);
 8003018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301c:	4619      	mov	r1, r3
 800301e:	4865      	ldr	r0, [pc, #404]	; (80031b4 <HAL_TIM_MspPostInit+0x23c>)
 8003020:	f004 fe78 	bl	8007d14 <HAL_GPIO_Init>
}
 8003024:	e0b9      	b.n	800319a <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM13)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a63      	ldr	r2, [pc, #396]	; (80031b8 <HAL_TIM_MspPostInit+0x240>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d11f      	bne.n	8003070 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003030:	4b5d      	ldr	r3, [pc, #372]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 8003032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003036:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003040:	4b59      	ldr	r3, [pc, #356]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 8003042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP1_Pin;
 800304e:	2340      	movs	r3, #64	; 0x40
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	2300      	movs	r3, #0
 800305c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800305e:	2309      	movs	r3, #9
 8003060:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8003062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003066:	4619      	mov	r1, r3
 8003068:	4850      	ldr	r0, [pc, #320]	; (80031ac <HAL_TIM_MspPostInit+0x234>)
 800306a:	f004 fe53 	bl	8007d14 <HAL_GPIO_Init>
}
 800306e:	e094      	b.n	800319a <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM14)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a51      	ldr	r2, [pc, #324]	; (80031bc <HAL_TIM_MspPostInit+0x244>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d11f      	bne.n	80030ba <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307a:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 800307c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003080:	4a49      	ldr	r2, [pc, #292]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800308a:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 800308c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a4:	2300      	movs	r3, #0
 80030a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80030a8:	2309      	movs	r3, #9
 80030aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 80030ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b0:	4619      	mov	r1, r3
 80030b2:	483e      	ldr	r0, [pc, #248]	; (80031ac <HAL_TIM_MspPostInit+0x234>)
 80030b4:	f004 fe2e 	bl	8007d14 <HAL_GPIO_Init>
}
 80030b8:	e06f      	b.n	800319a <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM15)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a40      	ldr	r2, [pc, #256]	; (80031c0 <HAL_TIM_MspPostInit+0x248>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d11f      	bne.n	8003104 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030c4:	4b38      	ldr	r3, [pc, #224]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 80030c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ca:	4a37      	ldr	r2, [pc, #220]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 80030cc:	f043 0310 	orr.w	r3, r3, #16
 80030d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030d4:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 80030d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80030e2:	2320      	movs	r3, #32
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e6:	2302      	movs	r3, #2
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ee:	2300      	movs	r3, #0
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80030f2:	2304      	movs	r3, #4
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fa:	4619      	mov	r1, r3
 80030fc:	4831      	ldr	r0, [pc, #196]	; (80031c4 <HAL_TIM_MspPostInit+0x24c>)
 80030fe:	f004 fe09 	bl	8007d14 <HAL_GPIO_Init>
}
 8003102:	e04a      	b.n	800319a <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM16)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a2f      	ldr	r2, [pc, #188]	; (80031c8 <HAL_TIM_MspPostInit+0x250>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d120      	bne.n	8003150 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800310e:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 8003110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003114:	4a24      	ldr	r2, [pc, #144]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 8003116:	f043 0302 	orr.w	r3, r3, #2
 800311a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800311e:	4b22      	ldr	r3, [pc, #136]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 8003120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP4_Pin;
 800312c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	2302      	movs	r3, #2
 8003134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800313e:	2301      	movs	r3, #1
 8003140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 8003142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003146:	4619      	mov	r1, r3
 8003148:	481a      	ldr	r0, [pc, #104]	; (80031b4 <HAL_TIM_MspPostInit+0x23c>)
 800314a:	f004 fde3 	bl	8007d14 <HAL_GPIO_Init>
}
 800314e:	e024      	b.n	800319a <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM17)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <HAL_TIM_MspPostInit+0x254>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d11f      	bne.n	800319a <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 800315c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003160:	4a11      	ldr	r2, [pc, #68]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 8003162:	f043 0302 	orr.w	r3, r3, #2
 8003166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800316a:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <HAL_TIM_MspPostInit+0x230>)
 800316c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP5_Pin;
 8003178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2300      	movs	r3, #0
 8003188:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800318a:	2301      	movs	r3, #1
 800318c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 800318e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003192:	4619      	mov	r1, r3
 8003194:	4807      	ldr	r0, [pc, #28]	; (80031b4 <HAL_TIM_MspPostInit+0x23c>)
 8003196:	f004 fdbd 	bl	8007d14 <HAL_GPIO_Init>
}
 800319a:	bf00      	nop
 800319c:	3738      	adds	r7, #56	; 0x38
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40010000 	.word	0x40010000
 80031a8:	58024400 	.word	0x58024400
 80031ac:	58020000 	.word	0x58020000
 80031b0:	40000400 	.word	0x40000400
 80031b4:	58020400 	.word	0x58020400
 80031b8:	40001c00 	.word	0x40001c00
 80031bc:	40002000 	.word	0x40002000
 80031c0:	40014000 	.word	0x40014000
 80031c4:	58021000 	.word	0x58021000
 80031c8:	40014400 	.word	0x40014400
 80031cc:	40014800 	.word	0x40014800

080031d0 <MX_UART5_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80031d4:	4b22      	ldr	r3, [pc, #136]	; (8003260 <MX_UART5_Init+0x90>)
 80031d6:	4a23      	ldr	r2, [pc, #140]	; (8003264 <MX_UART5_Init+0x94>)
 80031d8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80031da:	4b21      	ldr	r3, [pc, #132]	; (8003260 <MX_UART5_Init+0x90>)
 80031dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031e0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80031e2:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <MX_UART5_Init+0x90>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <MX_UART5_Init+0x90>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80031ee:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <MX_UART5_Init+0x90>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80031f4:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <MX_UART5_Init+0x90>)
 80031f6:	220c      	movs	r2, #12
 80031f8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031fa:	4b19      	ldr	r3, [pc, #100]	; (8003260 <MX_UART5_Init+0x90>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003200:	4b17      	ldr	r3, [pc, #92]	; (8003260 <MX_UART5_Init+0x90>)
 8003202:	2200      	movs	r2, #0
 8003204:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <MX_UART5_Init+0x90>)
 8003208:	2200      	movs	r2, #0
 800320a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800320c:	4b14      	ldr	r3, [pc, #80]	; (8003260 <MX_UART5_Init+0x90>)
 800320e:	2200      	movs	r2, #0
 8003210:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003212:	4b13      	ldr	r3, [pc, #76]	; (8003260 <MX_UART5_Init+0x90>)
 8003214:	2200      	movs	r2, #0
 8003216:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003218:	4811      	ldr	r0, [pc, #68]	; (8003260 <MX_UART5_Init+0x90>)
 800321a:	f00a fdf7 	bl	800de0c <HAL_UART_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003224:	f7fe fc98 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003228:	2100      	movs	r1, #0
 800322a:	480d      	ldr	r0, [pc, #52]	; (8003260 <MX_UART5_Init+0x90>)
 800322c:	f00c f948 	bl	800f4c0 <HAL_UARTEx_SetTxFifoThreshold>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003236:	f7fe fc8f 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800323a:	2100      	movs	r1, #0
 800323c:	4808      	ldr	r0, [pc, #32]	; (8003260 <MX_UART5_Init+0x90>)
 800323e:	f00c f97d 	bl	800f53c <HAL_UARTEx_SetRxFifoThreshold>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003248:	f7fe fc86 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800324c:	4804      	ldr	r0, [pc, #16]	; (8003260 <MX_UART5_Init+0x90>)
 800324e:	f00c f8fe 	bl	800f44e <HAL_UARTEx_DisableFifoMode>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003258:	f7fe fc7e 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800325c:	bf00      	nop
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000a88 	.word	0x20000a88
 8003264:	40005000 	.word	0x40005000

08003268 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800326c:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 800326e:	4a23      	ldr	r2, [pc, #140]	; (80032fc <MX_USART1_UART_Init+0x94>)
 8003270:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8003272:	4b21      	ldr	r3, [pc, #132]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 8003274:	4a22      	ldr	r2, [pc, #136]	; (8003300 <MX_USART1_UART_Init+0x98>)
 8003276:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003278:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800327e:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 8003280:	2200      	movs	r2, #0
 8003282:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003284:	4b1c      	ldr	r3, [pc, #112]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 8003286:	2200      	movs	r2, #0
 8003288:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800328a:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 800328c:	220c      	movs	r2, #12
 800328e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 8003292:	2200      	movs	r2, #0
 8003294:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003296:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 8003298:	2200      	movs	r2, #0
 800329a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800329c:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 800329e:	2200      	movs	r2, #0
 80032a0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032a8:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032ae:	4812      	ldr	r0, [pc, #72]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 80032b0:	f00a fdac 	bl	800de0c <HAL_UART_Init>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80032ba:	f7fe fc4d 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032be:	2100      	movs	r1, #0
 80032c0:	480d      	ldr	r0, [pc, #52]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 80032c2:	f00c f8fd 	bl	800f4c0 <HAL_UARTEx_SetTxFifoThreshold>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80032cc:	f7fe fc44 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032d0:	2100      	movs	r1, #0
 80032d2:	4809      	ldr	r0, [pc, #36]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 80032d4:	f00c f932 	bl	800f53c <HAL_UARTEx_SetRxFifoThreshold>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80032de:	f7fe fc3b 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80032e2:	4805      	ldr	r0, [pc, #20]	; (80032f8 <MX_USART1_UART_Init+0x90>)
 80032e4:	f00c f8b3 	bl	800f44e <HAL_UARTEx_DisableFifoMode>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80032ee:	f7fe fc33 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000b90 	.word	0x20000b90
 80032fc:	40011000 	.word	0x40011000
 8003300:	001e8480 	.word	0x001e8480

08003304 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003308:	4b22      	ldr	r3, [pc, #136]	; (8003394 <MX_USART3_UART_Init+0x90>)
 800330a:	4a23      	ldr	r2, [pc, #140]	; (8003398 <MX_USART3_UART_Init+0x94>)
 800330c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800330e:	4b21      	ldr	r3, [pc, #132]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003314:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003316:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800331c:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <MX_USART3_UART_Init+0x90>)
 800331e:	2200      	movs	r2, #0
 8003320:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003322:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003324:	2200      	movs	r2, #0
 8003326:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <MX_USART3_UART_Init+0x90>)
 800332a:	220c      	movs	r2, #12
 800332c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800332e:	4b19      	ldr	r3, [pc, #100]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003330:	2200      	movs	r2, #0
 8003332:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003334:	4b17      	ldr	r3, [pc, #92]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003336:	2200      	movs	r2, #0
 8003338:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <MX_USART3_UART_Init+0x90>)
 800333c:	2200      	movs	r2, #0
 800333e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003342:	2200      	movs	r2, #0
 8003344:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003346:	4b13      	ldr	r3, [pc, #76]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003348:	2200      	movs	r2, #0
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800334c:	4811      	ldr	r0, [pc, #68]	; (8003394 <MX_USART3_UART_Init+0x90>)
 800334e:	f00a fd5d 	bl	800de0c <HAL_UART_Init>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003358:	f7fe fbfe 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800335c:	2100      	movs	r1, #0
 800335e:	480d      	ldr	r0, [pc, #52]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003360:	f00c f8ae 	bl	800f4c0 <HAL_UARTEx_SetTxFifoThreshold>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800336a:	f7fe fbf5 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800336e:	2100      	movs	r1, #0
 8003370:	4808      	ldr	r0, [pc, #32]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003372:	f00c f8e3 	bl	800f53c <HAL_UARTEx_SetRxFifoThreshold>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800337c:	f7fe fbec 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003380:	4804      	ldr	r0, [pc, #16]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003382:	f00c f864 	bl	800f44e <HAL_UARTEx_DisableFifoMode>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800338c:	f7fe fbe4 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003390:	bf00      	nop
 8003392:	bd80      	pop	{r7, pc}
 8003394:	200009f8 	.word	0x200009f8
 8003398:	40004800 	.word	0x40004800

0800339c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08e      	sub	sp, #56	; 0x38
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a66      	ldr	r2, [pc, #408]	; (8003554 <HAL_UART_MspInit+0x1b8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d12f      	bne.n	800341e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80033be:	4b66      	ldr	r3, [pc, #408]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 80033c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033c4:	4a64      	ldr	r2, [pc, #400]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 80033c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033ce:	4b62      	ldr	r3, [pc, #392]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 80033d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d8:	623b      	str	r3, [r7, #32]
 80033da:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033dc:	4b5e      	ldr	r3, [pc, #376]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 80033de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e2:	4a5d      	ldr	r2, [pc, #372]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 80033e4:	f043 0302 	orr.w	r3, r3, #2
 80033e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ec:	4b5a      	ldr	r3, [pc, #360]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 80033ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80033fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	2302      	movs	r3, #2
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003408:	2300      	movs	r3, #0
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800340c:	230e      	movs	r3, #14
 800340e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003414:	4619      	mov	r1, r3
 8003416:	4851      	ldr	r0, [pc, #324]	; (800355c <HAL_UART_MspInit+0x1c0>)
 8003418:	f004 fc7c 	bl	8007d14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800341c:	e096      	b.n	800354c <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a4f      	ldr	r2, [pc, #316]	; (8003560 <HAL_UART_MspInit+0x1c4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d15d      	bne.n	80034e4 <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003428:	4b4b      	ldr	r3, [pc, #300]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 800342a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800342e:	4a4a      	ldr	r2, [pc, #296]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 8003430:	f043 0310 	orr.w	r3, r3, #16
 8003434:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003438:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 800343a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	61bb      	str	r3, [r7, #24]
 8003444:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003446:	4b44      	ldr	r3, [pc, #272]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 8003448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800344c:	4a42      	ldr	r2, [pc, #264]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 800344e:	f043 0302 	orr.w	r3, r3, #2
 8003452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003456:	4b40      	ldr	r3, [pc, #256]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 8003458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003464:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346a:	2302      	movs	r3, #2
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346e:	2300      	movs	r3, #0
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003472:	2300      	movs	r3, #0
 8003474:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003476:	2304      	movs	r3, #4
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800347e:	4619      	mov	r1, r3
 8003480:	4836      	ldr	r0, [pc, #216]	; (800355c <HAL_UART_MspInit+0x1c0>)
 8003482:	f004 fc47 	bl	8007d14 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8003486:	4b37      	ldr	r3, [pc, #220]	; (8003564 <HAL_UART_MspInit+0x1c8>)
 8003488:	4a37      	ldr	r2, [pc, #220]	; (8003568 <HAL_UART_MspInit+0x1cc>)
 800348a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800348c:	4b35      	ldr	r3, [pc, #212]	; (8003564 <HAL_UART_MspInit+0x1c8>)
 800348e:	2229      	movs	r2, #41	; 0x29
 8003490:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003492:	4b34      	ldr	r3, [pc, #208]	; (8003564 <HAL_UART_MspInit+0x1c8>)
 8003494:	2200      	movs	r2, #0
 8003496:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003498:	4b32      	ldr	r3, [pc, #200]	; (8003564 <HAL_UART_MspInit+0x1c8>)
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800349e:	4b31      	ldr	r3, [pc, #196]	; (8003564 <HAL_UART_MspInit+0x1c8>)
 80034a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034a6:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <HAL_UART_MspInit+0x1c8>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034ac:	4b2d      	ldr	r3, [pc, #180]	; (8003564 <HAL_UART_MspInit+0x1c8>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80034b2:	4b2c      	ldr	r3, [pc, #176]	; (8003564 <HAL_UART_MspInit+0x1c8>)
 80034b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034ba:	4b2a      	ldr	r3, [pc, #168]	; (8003564 <HAL_UART_MspInit+0x1c8>)
 80034bc:	2200      	movs	r2, #0
 80034be:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034c0:	4b28      	ldr	r3, [pc, #160]	; (8003564 <HAL_UART_MspInit+0x1c8>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034c6:	4827      	ldr	r0, [pc, #156]	; (8003564 <HAL_UART_MspInit+0x1c8>)
 80034c8:	f002 fb4e 	bl	8005b68 <HAL_DMA_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_UART_MspInit+0x13a>
      Error_Handler();
 80034d2:	f7fe fb41 	bl	8001b58 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a22      	ldr	r2, [pc, #136]	; (8003564 <HAL_UART_MspInit+0x1c8>)
 80034da:	67da      	str	r2, [r3, #124]	; 0x7c
 80034dc:	4a21      	ldr	r2, [pc, #132]	; (8003564 <HAL_UART_MspInit+0x1c8>)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80034e2:	e033      	b.n	800354c <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART3)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a20      	ldr	r2, [pc, #128]	; (800356c <HAL_UART_MspInit+0x1d0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d12e      	bne.n	800354c <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 80034f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 80034f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034fe:	4b16      	ldr	r3, [pc, #88]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 8003500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 800350e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003512:	4a11      	ldr	r2, [pc, #68]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 8003514:	f043 0308 	orr.w	r3, r3, #8
 8003518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <HAL_UART_MspInit+0x1bc>)
 800351e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800352a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003538:	2300      	movs	r3, #0
 800353a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800353c:	2307      	movs	r3, #7
 800353e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003544:	4619      	mov	r1, r3
 8003546:	480a      	ldr	r0, [pc, #40]	; (8003570 <HAL_UART_MspInit+0x1d4>)
 8003548:	f004 fbe4 	bl	8007d14 <HAL_GPIO_Init>
}
 800354c:	bf00      	nop
 800354e:	3738      	adds	r7, #56	; 0x38
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40005000 	.word	0x40005000
 8003558:	58024400 	.word	0x58024400
 800355c:	58020400 	.word	0x58020400
 8003560:	40011000 	.word	0x40011000
 8003564:	20000b18 	.word	0x20000b18
 8003568:	40020010 	.word	0x40020010
 800356c:	40004800 	.word	0x40004800
 8003570:	58020c00 	.word	0x58020c00

08003574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003578:	f7fe fcba 	bl	8001ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800357c:	480c      	ldr	r0, [pc, #48]	; (80035b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800357e:	490d      	ldr	r1, [pc, #52]	; (80035b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003580:	4a0d      	ldr	r2, [pc, #52]	; (80035b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003584:	e002      	b.n	800358c <LoopCopyDataInit>

08003586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800358a:	3304      	adds	r3, #4

0800358c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800358c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800358e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003590:	d3f9      	bcc.n	8003586 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003594:	4c0a      	ldr	r4, [pc, #40]	; (80035c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003598:	e001      	b.n	800359e <LoopFillZerobss>

0800359a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800359a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800359c:	3204      	adds	r2, #4

0800359e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800359e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035a0:	d3fb      	bcc.n	800359a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035a2:	f00c f857 	bl	800f654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035a6:	f7fe f82f 	bl	8001608 <main>
  bx  lr
 80035aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80035b8:	0800f714 	.word	0x0800f714
  ldr r2, =_sbss
 80035bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80035c0:	20000c24 	.word	0x20000c24

080035c4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035c4:	e7fe      	b.n	80035c4 <ADC_IRQHandler>
	...

080035c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035ce:	2003      	movs	r0, #3
 80035d0:	f002 f9a0 	bl	8005914 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035d4:	f005 fc3e 	bl	8008e54 <HAL_RCC_GetSysClockFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HAL_Init+0x68>)
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	0a1b      	lsrs	r3, r3, #8
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	4913      	ldr	r1, [pc, #76]	; (8003634 <HAL_Init+0x6c>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
 80035f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035f2:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <HAL_Init+0x68>)
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	4a0e      	ldr	r2, [pc, #56]	; (8003634 <HAL_Init+0x6c>)
 80035fc:	5cd3      	ldrb	r3, [r2, r3]
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	4a0b      	ldr	r2, [pc, #44]	; (8003638 <HAL_Init+0x70>)
 800360a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800360c:	4a0b      	ldr	r2, [pc, #44]	; (800363c <HAL_Init+0x74>)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003612:	2000      	movs	r0, #0
 8003614:	f000 f814 	bl	8003640 <HAL_InitTick>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e002      	b.n	8003628 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003622:	f7fe fc03 	bl	8001e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	58024400 	.word	0x58024400
 8003634:	0800f6c4 	.word	0x0800f6c4
 8003638:	20000004 	.word	0x20000004
 800363c:	20000000 	.word	0x20000000

08003640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003648:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <HAL_InitTick+0x60>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e021      	b.n	8003698 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003654:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <HAL_InitTick+0x64>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <HAL_InitTick+0x60>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	4619      	mov	r1, r3
 800365e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003662:	fbb3 f3f1 	udiv	r3, r3, r1
 8003666:	fbb2 f3f3 	udiv	r3, r2, r3
 800366a:	4618      	mov	r0, r3
 800366c:	f002 f985 	bl	800597a <HAL_SYSTICK_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e00e      	b.n	8003698 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b0f      	cmp	r3, #15
 800367e:	d80a      	bhi.n	8003696 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003680:	2200      	movs	r2, #0
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	f002 f94f 	bl	800592a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800368c:	4a06      	ldr	r2, [pc, #24]	; (80036a8 <HAL_InitTick+0x68>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e000      	b.n	8003698 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
}
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	2000000c 	.word	0x2000000c
 80036a4:	20000000 	.word	0x20000000
 80036a8:	20000008 	.word	0x20000008

080036ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_IncTick+0x20>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_IncTick+0x24>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4413      	add	r3, r2
 80036bc:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <HAL_IncTick+0x24>)
 80036be:	6013      	str	r3, [r2, #0]
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	2000000c 	.word	0x2000000c
 80036d0:	20000c20 	.word	0x20000c20

080036d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return uwTick;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_GetTick+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000c20 	.word	0x20000c20

080036ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	609a      	str	r2, [r3, #8]
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3360      	adds	r3, #96	; 0x60
 8003766:	461a      	mov	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4a10      	ldr	r2, [pc, #64]	; (80037b4 <LL_ADC_SetOffset+0x60>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d10b      	bne.n	8003790 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	4313      	orrs	r3, r2
 8003786:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800378e:	e00b      	b.n	80037a8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	430b      	orrs	r3, r1
 80037a2:	431a      	orrs	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	601a      	str	r2, [r3, #0]
}
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	58026000 	.word	0x58026000

080037b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3360      	adds	r3, #96	; 0x60
 80037c6:	461a      	mov	r2, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	431a      	orrs	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	611a      	str	r2, [r3, #16]
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a0c      	ldr	r2, [pc, #48]	; (8003858 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00e      	beq.n	800384a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3360      	adds	r3, #96	; 0x60
 8003830:	461a      	mov	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	431a      	orrs	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	601a      	str	r2, [r3, #0]
  }
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	58026000 	.word	0x58026000

0800385c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4a0c      	ldr	r2, [pc, #48]	; (800389c <LL_ADC_SetOffsetSaturation+0x40>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d10e      	bne.n	800388e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3360      	adds	r3, #96	; 0x60
 8003874:	461a      	mov	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	431a      	orrs	r2, r3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	58026000 	.word	0x58026000

080038a0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <LL_ADC_SetOffsetSign+0x40>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d10e      	bne.n	80038d2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3360      	adds	r3, #96	; 0x60
 80038b8:	461a      	mov	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	431a      	orrs	r2, r3
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	58026000 	.word	0x58026000

080038e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3360      	adds	r3, #96	; 0x60
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <LL_ADC_SetOffsetState+0x50>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d108      	bne.n	8003918 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	431a      	orrs	r2, r3
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003916:	e007      	b.n	8003928 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	431a      	orrs	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	601a      	str	r2, [r3, #0]
}
 8003928:	bf00      	nop
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	58026000 	.word	0x58026000

08003938 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800395e:	b480      	push	{r7}
 8003960:	b087      	sub	sp, #28
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3330      	adds	r3, #48	; 0x30
 800396e:	461a      	mov	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	4413      	add	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	211f      	movs	r1, #31
 800398a:	fa01 f303 	lsl.w	r3, r1, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	401a      	ands	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	0e9b      	lsrs	r3, r3, #26
 8003996:	f003 011f 	and.w	r1, r3, #31
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	431a      	orrs	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3314      	adds	r3, #20
 80039ec:	461a      	mov	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	0e5b      	lsrs	r3, r3, #25
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	4413      	add	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	0d1b      	lsrs	r3, r3, #20
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	2107      	movs	r1, #7
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	401a      	ands	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	0d1b      	lsrs	r3, r3, #20
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a20:	431a      	orrs	r2, r3
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a1a      	ldr	r2, [pc, #104]	; (8003aac <LL_ADC_SetChannelSingleDiff+0x78>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d115      	bne.n	8003a74 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a54:	43db      	mvns	r3, r3
 8003a56:	401a      	ands	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f003 0318 	and.w	r3, r3, #24
 8003a5e:	4914      	ldr	r1, [pc, #80]	; (8003ab0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003a60:	40d9      	lsrs	r1, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	400b      	ands	r3, r1
 8003a66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003a72:	e014      	b.n	8003a9e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a80:	43db      	mvns	r3, r3
 8003a82:	401a      	ands	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f003 0318 	and.w	r3, r3, #24
 8003a8a:	4909      	ldr	r1, [pc, #36]	; (8003ab0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003a8c:	40d9      	lsrs	r1, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	400b      	ands	r3, r1
 8003a92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a96:	431a      	orrs	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	58026000 	.word	0x58026000
 8003ab0:	000fffff 	.word	0x000fffff

08003ab4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 031f 	and.w	r3, r3, #31
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <LL_ADC_DisableDeepPowerDown+0x20>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6093      	str	r3, [r2, #8]
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	5fffffc0 	.word	0x5fffffc0

08003b10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b24:	d101      	bne.n	8003b2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <LL_ADC_EnableInternalRegulator+0x24>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	6fffffc0 	.word	0x6fffffc0

08003b60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b74:	d101      	bne.n	8003b7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <LL_ADC_Enable+0x24>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	f043 0201 	orr.w	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	7fffffc0 	.word	0x7fffffc0

08003bb0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <LL_ADC_Disable+0x24>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	f043 0202 	orr.w	r2, r3, #2
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	7fffffc0 	.word	0x7fffffc0

08003bd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <LL_ADC_IsEnabled+0x18>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <LL_ADC_IsEnabled+0x1a>
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d101      	bne.n	8003c16 <LL_ADC_IsDisableOngoing+0x18>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <LL_ADC_IsDisableOngoing+0x1a>
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <LL_ADC_REG_StartConversion+0x24>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	f043 0204 	orr.w	r2, r3, #4
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	7fffffc0 	.word	0x7fffffc0

08003c4c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d101      	bne.n	8003c64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d101      	bne.n	8003c8a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b089      	sub	sp, #36	; 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e1ee      	b.n	8004090 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d109      	bne.n	8003cd4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fc fda1 	bl	8000808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff ff19 	bl	8003b10 <LL_ADC_IsDeepPowerDownEnabled>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff feff 	bl	8003aec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff ff34 	bl	8003b60 <LL_ADC_IsInternalRegulatorEnabled>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d114      	bne.n	8003d28 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff ff18 	bl	8003b38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d08:	4b8e      	ldr	r3, [pc, #568]	; (8003f44 <HAL_ADC_Init+0x2ac>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	099b      	lsrs	r3, r3, #6
 8003d0e:	4a8e      	ldr	r2, [pc, #568]	; (8003f48 <HAL_ADC_Init+0x2b0>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	099b      	lsrs	r3, r3, #6
 8003d16:	3301      	adds	r3, #1
 8003d18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d1a:	e002      	b.n	8003d22 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f9      	bne.n	8003d1c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff ff17 	bl	8003b60 <LL_ADC_IsInternalRegulatorEnabled>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10d      	bne.n	8003d54 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3c:	f043 0210 	orr.w	r2, r3, #16
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d48:	f043 0201 	orr.w	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff ff77 	bl	8003c4c <LL_ADC_REG_IsConversionOngoing>
 8003d5e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f040 8188 	bne.w	800407e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f040 8184 	bne.w	800407e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d7e:	f043 0202 	orr.w	r2, r3, #2
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff ff24 	bl	8003bd8 <LL_ADC_IsEnabled>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d136      	bne.n	8003e04 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6c      	ldr	r2, [pc, #432]	; (8003f4c <HAL_ADC_Init+0x2b4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d004      	beq.n	8003daa <HAL_ADC_Init+0x112>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a6a      	ldr	r2, [pc, #424]	; (8003f50 <HAL_ADC_Init+0x2b8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d10e      	bne.n	8003dc8 <HAL_ADC_Init+0x130>
 8003daa:	4868      	ldr	r0, [pc, #416]	; (8003f4c <HAL_ADC_Init+0x2b4>)
 8003dac:	f7ff ff14 	bl	8003bd8 <LL_ADC_IsEnabled>
 8003db0:	4604      	mov	r4, r0
 8003db2:	4867      	ldr	r0, [pc, #412]	; (8003f50 <HAL_ADC_Init+0x2b8>)
 8003db4:	f7ff ff10 	bl	8003bd8 <LL_ADC_IsEnabled>
 8003db8:	4603      	mov	r3, r0
 8003dba:	4323      	orrs	r3, r4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	e008      	b.n	8003dda <HAL_ADC_Init+0x142>
 8003dc8:	4862      	ldr	r0, [pc, #392]	; (8003f54 <HAL_ADC_Init+0x2bc>)
 8003dca:	f7ff ff05 	bl	8003bd8 <LL_ADC_IsEnabled>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf0c      	ite	eq
 8003dd4:	2301      	moveq	r3, #1
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d012      	beq.n	8003e04 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a5a      	ldr	r2, [pc, #360]	; (8003f4c <HAL_ADC_Init+0x2b4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <HAL_ADC_Init+0x15a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a58      	ldr	r2, [pc, #352]	; (8003f50 <HAL_ADC_Init+0x2b8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d101      	bne.n	8003df6 <HAL_ADC_Init+0x15e>
 8003df2:	4a59      	ldr	r2, [pc, #356]	; (8003f58 <HAL_ADC_Init+0x2c0>)
 8003df4:	e000      	b.n	8003df8 <HAL_ADC_Init+0x160>
 8003df6:	4a59      	ldr	r2, [pc, #356]	; (8003f5c <HAL_ADC_Init+0x2c4>)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f7ff fc74 	bl	80036ec <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a52      	ldr	r2, [pc, #328]	; (8003f54 <HAL_ADC_Init+0x2bc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d129      	bne.n	8003e62 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	7e5b      	ldrb	r3, [r3, #25]
 8003e12:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003e18:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003e1e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d013      	beq.n	8003e50 <HAL_ADC_Init+0x1b8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b0c      	cmp	r3, #12
 8003e2e:	d00d      	beq.n	8003e4c <HAL_ADC_Init+0x1b4>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b1c      	cmp	r3, #28
 8003e36:	d007      	beq.n	8003e48 <HAL_ADC_Init+0x1b0>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b18      	cmp	r3, #24
 8003e3e:	d101      	bne.n	8003e44 <HAL_ADC_Init+0x1ac>
 8003e40:	2318      	movs	r3, #24
 8003e42:	e006      	b.n	8003e52 <HAL_ADC_Init+0x1ba>
 8003e44:	2300      	movs	r3, #0
 8003e46:	e004      	b.n	8003e52 <HAL_ADC_Init+0x1ba>
 8003e48:	2310      	movs	r3, #16
 8003e4a:	e002      	b.n	8003e52 <HAL_ADC_Init+0x1ba>
 8003e4c:	2308      	movs	r3, #8
 8003e4e:	e000      	b.n	8003e52 <HAL_ADC_Init+0x1ba>
 8003e50:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003e52:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e5a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	e00e      	b.n	8003e80 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	7e5b      	ldrb	r3, [r3, #25]
 8003e66:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e6c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003e72:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e7a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d106      	bne.n	8003e98 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	045b      	lsls	r3, r3, #17
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d009      	beq.n	8003eb4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <HAL_ADC_Init+0x2bc>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d115      	bne.n	8003eea <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <HAL_ADC_Init+0x2c8>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	69b9      	ldr	r1, [r7, #24]
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	611a      	str	r2, [r3, #16]
 8003ee8:	e009      	b.n	8003efe <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <HAL_ADC_Init+0x2cc>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	69b9      	ldr	r1, [r7, #24]
 8003efa:	430b      	orrs	r3, r1
 8003efc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fea2 	bl	8003c4c <LL_ADC_REG_IsConversionOngoing>
 8003f08:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff feaf 	bl	8003c72 <LL_ADC_INJ_IsConversionOngoing>
 8003f14:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f040 808e 	bne.w	800403a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 808a 	bne.w	800403a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <HAL_ADC_Init+0x2bc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d11b      	bne.n	8003f68 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	7e1b      	ldrb	r3, [r3, #24]
 8003f34:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f3c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	e018      	b.n	8003f76 <HAL_ADC_Init+0x2de>
 8003f44:	20000000 	.word	0x20000000
 8003f48:	053e2d63 	.word	0x053e2d63
 8003f4c:	40022000 	.word	0x40022000
 8003f50:	40022100 	.word	0x40022100
 8003f54:	58026000 	.word	0x58026000
 8003f58:	40022300 	.word	0x40022300
 8003f5c:	58026300 	.word	0x58026300
 8003f60:	fff04007 	.word	0xfff04007
 8003f64:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	7e1b      	ldrb	r3, [r3, #24]
 8003f6c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	4b46      	ldr	r3, [pc, #280]	; (8004098 <HAL_ADC_Init+0x400>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	69b9      	ldr	r1, [r7, #24]
 8003f86:	430b      	orrs	r3, r1
 8003f88:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d137      	bne.n	8004004 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a3f      	ldr	r2, [pc, #252]	; (800409c <HAL_ADC_Init+0x404>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d116      	bne.n	8003fd2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	4b3d      	ldr	r3, [pc, #244]	; (80040a0 <HAL_ADC_Init+0x408>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003fb6:	4311      	orrs	r1, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fbc:	4311      	orrs	r1, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	611a      	str	r2, [r3, #16]
 8003fd0:	e020      	b.n	8004014 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	4b32      	ldr	r3, [pc, #200]	; (80040a4 <HAL_ADC_Init+0x40c>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fe0:	3a01      	subs	r2, #1
 8003fe2:	0411      	lsls	r1, r2, #16
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003fe8:	4311      	orrs	r1, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fee:	4311      	orrs	r1, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	611a      	str	r2, [r3, #16]
 8004002:	e007      	b.n	8004014 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0201 	bic.w	r2, r2, #1
 8004012:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1b      	ldr	r2, [pc, #108]	; (800409c <HAL_ADC_Init+0x404>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d002      	beq.n	800403a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f001 f9e9 	bl	800540c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d10c      	bne.n	800405c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	f023 010f 	bic.w	r1, r3, #15
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	1e5a      	subs	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
 800405a:	e007      	b.n	800406c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 020f 	bic.w	r2, r2, #15
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004070:	f023 0303 	bic.w	r3, r3, #3
 8004074:	f043 0201 	orr.w	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	661a      	str	r2, [r3, #96]	; 0x60
 800407c:	e007      	b.n	800408e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004082:	f043 0210 	orr.w	r2, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800408e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3724      	adds	r7, #36	; 0x24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd90      	pop	{r4, r7, pc}
 8004098:	ffffbffc 	.word	0xffffbffc
 800409c:	58026000 	.word	0x58026000
 80040a0:	fc00f81f 	.word	0xfc00f81f
 80040a4:	fc00f81e 	.word	0xfc00f81e

080040a8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a97      	ldr	r2, [pc, #604]	; (8004314 <HAL_ADC_Start_IT+0x26c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d004      	beq.n	80040c4 <HAL_ADC_Start_IT+0x1c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a96      	ldr	r2, [pc, #600]	; (8004318 <HAL_ADC_Start_IT+0x270>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d101      	bne.n	80040c8 <HAL_ADC_Start_IT+0x20>
 80040c4:	4b95      	ldr	r3, [pc, #596]	; (800431c <HAL_ADC_Start_IT+0x274>)
 80040c6:	e000      	b.n	80040ca <HAL_ADC_Start_IT+0x22>
 80040c8:	4b95      	ldr	r3, [pc, #596]	; (8004320 <HAL_ADC_Start_IT+0x278>)
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff fcf2 	bl	8003ab4 <LL_ADC_GetMultimode>
 80040d0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fdb8 	bl	8003c4c <LL_ADC_REG_IsConversionOngoing>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 810f 	bne.w	8004302 <HAL_ADC_Start_IT+0x25a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_ADC_Start_IT+0x4a>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e10c      	b.n	800430c <HAL_ADC_Start_IT+0x264>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f001 f89c 	bl	8005238 <ADC_Enable>
 8004100:	4603      	mov	r3, r0
 8004102:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004104:	7dfb      	ldrb	r3, [r7, #23]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f040 80f6 	bne.w	80042f8 <HAL_ADC_Start_IT+0x250>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004110:	4b84      	ldr	r3, [pc, #528]	; (8004324 <HAL_ADC_Start_IT+0x27c>)
 8004112:	4013      	ands	r3, r2
 8004114:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a7d      	ldr	r2, [pc, #500]	; (8004318 <HAL_ADC_Start_IT+0x270>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d002      	beq.n	800412c <HAL_ADC_Start_IT+0x84>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	e000      	b.n	800412e <HAL_ADC_Start_IT+0x86>
 800412c:	4b79      	ldr	r3, [pc, #484]	; (8004314 <HAL_ADC_Start_IT+0x26c>)
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	4293      	cmp	r3, r2
 8004134:	d002      	beq.n	800413c <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004140:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d006      	beq.n	8004162 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004158:	f023 0206 	bic.w	r2, r3, #6
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	665a      	str	r2, [r3, #100]	; 0x64
 8004160:	e002      	b.n	8004168 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	221c      	movs	r2, #28
 800416e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 021c 	bic.w	r2, r2, #28
 8004186:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d108      	bne.n	80041a2 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0208 	orr.w	r2, r2, #8
 800419e:	605a      	str	r2, [r3, #4]
          break;
 80041a0:	e008      	b.n	80041b4 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0204 	orr.w	r2, r2, #4
 80041b0:	605a      	str	r2, [r3, #4]
          break;
 80041b2:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d107      	bne.n	80041cc <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0210 	orr.w	r2, r2, #16
 80041ca:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a51      	ldr	r2, [pc, #324]	; (8004318 <HAL_ADC_Start_IT+0x270>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d002      	beq.n	80041dc <HAL_ADC_Start_IT+0x134>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	e000      	b.n	80041de <HAL_ADC_Start_IT+0x136>
 80041dc:	4b4d      	ldr	r3, [pc, #308]	; (8004314 <HAL_ADC_Start_IT+0x26c>)
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d008      	beq.n	80041f8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b05      	cmp	r3, #5
 80041f0:	d002      	beq.n	80041f8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b09      	cmp	r3, #9
 80041f6:	d13b      	bne.n	8004270 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d02d      	beq.n	8004262 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800420e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	2b08      	cmp	r3, #8
 800421c:	d110      	bne.n	8004240 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0220 	bic.w	r2, r2, #32
 800422c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800423c:	605a      	str	r2, [r3, #4]
              break;
 800423e:	e011      	b.n	8004264 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800424e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0220 	orr.w	r2, r2, #32
 800425e:	605a      	str	r2, [r3, #4]
              break;
 8004260:	e000      	b.n	8004264 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 8004262:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fcdb 	bl	8003c24 <LL_ADC_REG_StartConversion>
 800426e:	e04c      	b.n	800430a <HAL_ADC_Start_IT+0x262>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004274:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a25      	ldr	r2, [pc, #148]	; (8004318 <HAL_ADC_Start_IT+0x270>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d002      	beq.n	800428c <HAL_ADC_Start_IT+0x1e4>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	e000      	b.n	800428e <HAL_ADC_Start_IT+0x1e6>
 800428c:	4b21      	ldr	r3, [pc, #132]	; (8004314 <HAL_ADC_Start_IT+0x26c>)
 800428e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d035      	beq.n	8004308 <HAL_ADC_Start_IT+0x260>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d110      	bne.n	80042d6 <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0220 	bic.w	r2, r2, #32
 80042c2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042d2:	605a      	str	r2, [r3, #4]
              break;
 80042d4:	e019      	b.n	800430a <HAL_ADC_Start_IT+0x262>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0220 	orr.w	r2, r2, #32
 80042f4:	605a      	str	r2, [r3, #4]
              break;
 80042f6:	e008      	b.n	800430a <HAL_ADC_Start_IT+0x262>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004300:	e003      	b.n	800430a <HAL_ADC_Start_IT+0x262>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004302:	2302      	movs	r3, #2
 8004304:	75fb      	strb	r3, [r7, #23]
 8004306:	e000      	b.n	800430a <HAL_ADC_Start_IT+0x262>
        }
 8004308:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800430a:	7dfb      	ldrb	r3, [r7, #23]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40022000 	.word	0x40022000
 8004318:	40022100 	.word	0x40022100
 800431c:	40022300 	.word	0x40022300
 8004320:	58026300 	.word	0x58026300
 8004324:	fffff0fe 	.word	0xfffff0fe

08004328 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800434c:	2300      	movs	r3, #0
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a87      	ldr	r2, [pc, #540]	; (8004584 <HAL_ADC_IRQHandler+0x240>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_ADC_IRQHandler+0x30>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a86      	ldr	r2, [pc, #536]	; (8004588 <HAL_ADC_IRQHandler+0x244>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d101      	bne.n	8004378 <HAL_ADC_IRQHandler+0x34>
 8004374:	4b85      	ldr	r3, [pc, #532]	; (800458c <HAL_ADC_IRQHandler+0x248>)
 8004376:	e000      	b.n	800437a <HAL_ADC_IRQHandler+0x36>
 8004378:	4b85      	ldr	r3, [pc, #532]	; (8004590 <HAL_ADC_IRQHandler+0x24c>)
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fb9a 	bl	8003ab4 <LL_ADC_GetMultimode>
 8004380:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d017      	beq.n	80043bc <HAL_ADC_IRQHandler+0x78>
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d012      	beq.n	80043bc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f001 f9d6 	bl	8005760 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2202      	movs	r2, #2
 80043ba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <HAL_ADC_IRQHandler+0x8c>
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 8083 	beq.w	80044e2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d07d      	beq.n	80044e2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d105      	bne.n	80043fe <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fa98 	bl	8003938 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d062      	beq.n	80044d4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a5d      	ldr	r2, [pc, #372]	; (8004588 <HAL_ADC_IRQHandler+0x244>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d002      	beq.n	800441e <HAL_ADC_IRQHandler+0xda>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	e000      	b.n	8004420 <HAL_ADC_IRQHandler+0xdc>
 800441e:	4b59      	ldr	r3, [pc, #356]	; (8004584 <HAL_ADC_IRQHandler+0x240>)
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	4293      	cmp	r3, r2
 8004426:	d008      	beq.n	800443a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b05      	cmp	r3, #5
 8004432:	d002      	beq.n	800443a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b09      	cmp	r3, #9
 8004438:	d104      	bne.n	8004444 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	623b      	str	r3, [r7, #32]
 8004442:	e00c      	b.n	800445e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a4f      	ldr	r2, [pc, #316]	; (8004588 <HAL_ADC_IRQHandler+0x244>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d002      	beq.n	8004454 <HAL_ADC_IRQHandler+0x110>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	e000      	b.n	8004456 <HAL_ADC_IRQHandler+0x112>
 8004454:	4b4b      	ldr	r3, [pc, #300]	; (8004584 <HAL_ADC_IRQHandler+0x240>)
 8004456:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d135      	bne.n	80044d4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b08      	cmp	r3, #8
 8004474:	d12e      	bne.n	80044d4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff fbe6 	bl	8003c4c <LL_ADC_REG_IsConversionOngoing>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d11a      	bne.n	80044bc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 020c 	bic.w	r2, r2, #12
 8004494:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d112      	bne.n	80044d4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b2:	f043 0201 	orr.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	661a      	str	r2, [r3, #96]	; 0x60
 80044ba:	e00b      	b.n	80044d4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c0:	f043 0210 	orr.w	r2, r3, #16
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044cc:	f043 0201 	orr.w	r2, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7fd fa89 	bl	80019ec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	220c      	movs	r2, #12
 80044e0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <HAL_ADC_IRQHandler+0x1b2>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80a0 	beq.w	8004642 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 809a 	beq.w	8004642 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	2b00      	cmp	r3, #0
 8004518:	d105      	bne.n	8004526 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fa43 	bl	80039b6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004530:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff f9fe 	bl	8003938 <LL_ADC_REG_IsTriggerSourceSWStart>
 800453c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a11      	ldr	r2, [pc, #68]	; (8004588 <HAL_ADC_IRQHandler+0x244>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d002      	beq.n	800454e <HAL_ADC_IRQHandler+0x20a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	e000      	b.n	8004550 <HAL_ADC_IRQHandler+0x20c>
 800454e:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <HAL_ADC_IRQHandler+0x240>)
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	4293      	cmp	r3, r2
 8004556:	d008      	beq.n	800456a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b06      	cmp	r3, #6
 8004562:	d002      	beq.n	800456a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b07      	cmp	r3, #7
 8004568:	d104      	bne.n	8004574 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	623b      	str	r3, [r7, #32]
 8004572:	e014      	b.n	800459e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a03      	ldr	r2, [pc, #12]	; (8004588 <HAL_ADC_IRQHandler+0x244>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00a      	beq.n	8004594 <HAL_ADC_IRQHandler+0x250>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	e008      	b.n	8004596 <HAL_ADC_IRQHandler+0x252>
 8004584:	40022000 	.word	0x40022000
 8004588:	40022100 	.word	0x40022100
 800458c:	40022300 	.word	0x40022300
 8004590:	58026300 	.word	0x58026300
 8004594:	4b84      	ldr	r3, [pc, #528]	; (80047a8 <HAL_ADC_IRQHandler+0x464>)
 8004596:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d047      	beq.n	8004634 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <HAL_ADC_IRQHandler+0x27a>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d03f      	beq.n	8004634 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d13a      	bne.n	8004634 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d133      	bne.n	8004634 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d12e      	bne.n	8004634 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fb49 	bl	8003c72 <LL_ADC_INJ_IsConversionOngoing>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d11a      	bne.n	800461c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045f4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	2b00      	cmp	r3, #0
 800460c:	d112      	bne.n	8004634 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004612:	f043 0201 	orr.w	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	661a      	str	r2, [r3, #96]	; 0x60
 800461a:	e00b      	b.n	8004634 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004620:	f043 0210 	orr.w	r2, r3, #16
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800462c:	f043 0201 	orr.w	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f001 f86b 	bl	8005710 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2260      	movs	r2, #96	; 0x60
 8004640:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004648:	2b00      	cmp	r3, #0
 800464a:	d011      	beq.n	8004670 <HAL_ADC_IRQHandler+0x32c>
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00c      	beq.n	8004670 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f8a8 	bl	80047b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2280      	movs	r2, #128	; 0x80
 800466e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004676:	2b00      	cmp	r3, #0
 8004678:	d012      	beq.n	80046a0 <HAL_ADC_IRQHandler+0x35c>
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00d      	beq.n	80046a0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004688:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f001 f851 	bl	8005738 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800469e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d012      	beq.n	80046d0 <HAL_ADC_IRQHandler+0x38c>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00d      	beq.n	80046d0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f001 f843 	bl	800574c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d043      	beq.n	8004762 <HAL_ADC_IRQHandler+0x41e>
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d03e      	beq.n	8004762 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d102      	bne.n	80046f2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80046ec:	2301      	movs	r3, #1
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
 80046f0:	e021      	b.n	8004736 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d015      	beq.n	8004724 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a2a      	ldr	r2, [pc, #168]	; (80047a8 <HAL_ADC_IRQHandler+0x464>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d004      	beq.n	800470c <HAL_ADC_IRQHandler+0x3c8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a29      	ldr	r2, [pc, #164]	; (80047ac <HAL_ADC_IRQHandler+0x468>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d101      	bne.n	8004710 <HAL_ADC_IRQHandler+0x3cc>
 800470c:	4b28      	ldr	r3, [pc, #160]	; (80047b0 <HAL_ADC_IRQHandler+0x46c>)
 800470e:	e000      	b.n	8004712 <HAL_ADC_IRQHandler+0x3ce>
 8004710:	4b28      	ldr	r3, [pc, #160]	; (80047b4 <HAL_ADC_IRQHandler+0x470>)
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff f9dc 	bl	8003ad0 <LL_ADC_GetMultiDMATransfer>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800471e:	2301      	movs	r3, #1
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
 8004722:	e008      	b.n	8004736 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004732:	2301      	movs	r3, #1
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	2b01      	cmp	r3, #1
 800473a:	d10e      	bne.n	800475a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004740:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800474c:	f043 0202 	orr.w	r2, r3, #2
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f839 	bl	80047cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2210      	movs	r2, #16
 8004760:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004768:	2b00      	cmp	r3, #0
 800476a:	d018      	beq.n	800479e <HAL_ADC_IRQHandler+0x45a>
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004772:	2b00      	cmp	r3, #0
 8004774:	d013      	beq.n	800479e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004786:	f043 0208 	orr.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004796:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 ffc3 	bl	8005724 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800479e:	bf00      	nop
 80047a0:	3728      	adds	r7, #40	; 0x28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40022000 	.word	0x40022000
 80047ac:	40022100 	.word	0x40022100
 80047b0:	40022300 	.word	0x40022300
 80047b4:	58026300 	.word	0x58026300

080047b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b0b9      	sub	sp, #228	; 0xe4
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047fa:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4ab3      	ldr	r2, [pc, #716]	; (8004ad0 <HAL_ADC_ConfigChannel+0x2f0>)
 8004802:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800480a:	2b01      	cmp	r3, #1
 800480c:	d102      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x34>
 800480e:	2302      	movs	r3, #2
 8004810:	f000 bcfa 	b.w	8005208 <HAL_ADC_ConfigChannel+0xa28>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fa13 	bl	8003c4c <LL_ADC_REG_IsConversionOngoing>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	f040 84de 	bne.w	80051ea <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4aa8      	ldr	r2, [pc, #672]	; (8004ad4 <HAL_ADC_ConfigChannel+0x2f4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d033      	beq.n	80048a0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004840:	2b00      	cmp	r3, #0
 8004842:	d108      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x76>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	0e9b      	lsrs	r3, r3, #26
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	2201      	movs	r2, #1
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	e01d      	b.n	8004892 <HAL_ADC_ConfigChannel+0xb2>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004862:	fa93 f3a3 	rbit	r3, r3
 8004866:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800486a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800486e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800487a:	2320      	movs	r3, #32
 800487c:	e004      	b.n	8004888 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800487e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004882:	fab3 f383 	clz	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	2201      	movs	r2, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	69d1      	ldr	r1, [r2, #28]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	430b      	orrs	r3, r1
 800489e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	6859      	ldr	r1, [r3, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	f7ff f856 	bl	800395e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff f9c8 	bl	8003c4c <LL_ADC_REG_IsConversionOngoing>
 80048bc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff f9d4 	bl	8003c72 <LL_ADC_INJ_IsConversionOngoing>
 80048ca:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f040 8270 	bne.w	8004db8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f040 826b 	bne.w	8004db8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6819      	ldr	r1, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	461a      	mov	r2, r3
 80048f0:	f7ff f874 	bl	80039dc <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a76      	ldr	r2, [pc, #472]	; (8004ad4 <HAL_ADC_ConfigChannel+0x2f4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d10d      	bne.n	800491a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	08db      	lsrs	r3, r3, #3
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004918:	e032      	b.n	8004980 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800491a:	4b6f      	ldr	r3, [pc, #444]	; (8004ad8 <HAL_ADC_ConfigChannel+0x2f8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004926:	d10b      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x160>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	695a      	ldr	r2, [r3, #20]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	089b      	lsrs	r3, r3, #2
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	e01d      	b.n	800497c <HAL_ADC_ConfigChannel+0x19c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0310 	and.w	r3, r3, #16
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10b      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x186>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	e00a      	b.n	800497c <HAL_ADC_ConfigChannel+0x19c>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	089b      	lsrs	r3, r3, #2
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	2b04      	cmp	r3, #4
 8004986:	d048      	beq.n	8004a1a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	6919      	ldr	r1, [r3, #16]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004998:	f7fe fedc 	bl	8003754 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a4c      	ldr	r2, [pc, #304]	; (8004ad4 <HAL_ADC_ConfigChannel+0x2f4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d119      	bne.n	80049da <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6919      	ldr	r1, [r3, #16]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	461a      	mov	r2, r3
 80049b4:	f7fe ff74 	bl	80038a0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	6919      	ldr	r1, [r3, #16]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d102      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x1f0>
 80049ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ce:	e000      	b.n	80049d2 <HAL_ADC_ConfigChannel+0x1f2>
 80049d0:	2300      	movs	r3, #0
 80049d2:	461a      	mov	r2, r3
 80049d4:	f7fe ff42 	bl	800385c <LL_ADC_SetOffsetSaturation>
 80049d8:	e1ee      	b.n	8004db8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6919      	ldr	r1, [r3, #16]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d102      	bne.n	80049f2 <HAL_ADC_ConfigChannel+0x212>
 80049ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049f0:	e000      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x214>
 80049f2:	2300      	movs	r3, #0
 80049f4:	461a      	mov	r2, r3
 80049f6:	f7fe ff0f 	bl	8003818 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6919      	ldr	r1, [r3, #16]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	7e1b      	ldrb	r3, [r3, #24]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d102      	bne.n	8004a10 <HAL_ADC_ConfigChannel+0x230>
 8004a0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a0e:	e000      	b.n	8004a12 <HAL_ADC_ConfigChannel+0x232>
 8004a10:	2300      	movs	r3, #0
 8004a12:	461a      	mov	r2, r3
 8004a14:	f7fe fee6 	bl	80037e4 <LL_ADC_SetDataRightShift>
 8004a18:	e1ce      	b.n	8004db8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a2d      	ldr	r2, [pc, #180]	; (8004ad4 <HAL_ADC_ConfigChannel+0x2f4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	f040 8181 	bne.w	8004d28 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe fec3 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x272>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2100      	movs	r1, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fe feb8 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	0e9b      	lsrs	r3, r3, #26
 8004a4c:	f003 021f 	and.w	r2, r3, #31
 8004a50:	e01e      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x2b0>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2100      	movs	r1, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fe fead 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a68:	fa93 f3a3 	rbit	r3, r3
 8004a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004a70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004a78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004a80:	2320      	movs	r3, #32
 8004a82:	e004      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004a84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a88:	fab3 f383 	clz	r3, r3
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d105      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x2c8>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	0e9b      	lsrs	r3, r3, #26
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	e01e      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x306>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ab4:	fa93 f3a3 	rbit	r3, r3
 8004ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004ac4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d107      	bne.n	8004adc <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004acc:	2320      	movs	r3, #32
 8004ace:	e00a      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x306>
 8004ad0:	47ff0000 	.word	0x47ff0000
 8004ad4:	58026000 	.word	0x58026000
 8004ad8:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8004adc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ae0:	fab3 f383 	clz	r3, r3
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d106      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2200      	movs	r2, #0
 8004af0:	2100      	movs	r1, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fef6 	bl	80038e4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2101      	movs	r1, #1
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe fe5a 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x344>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2101      	movs	r1, #1
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fe fe4f 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	0e9b      	lsrs	r3, r3, #26
 8004b1e:	f003 021f 	and.w	r2, r3, #31
 8004b22:	e01e      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x382>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2101      	movs	r1, #1
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fe44 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004b30:	4603      	mov	r3, r0
 8004b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b3a:	fa93 f3a3 	rbit	r3, r3
 8004b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004b4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004b52:	2320      	movs	r3, #32
 8004b54:	e004      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004b56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b5a:	fab3 f383 	clz	r3, r3
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	461a      	mov	r2, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x39a>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	0e9b      	lsrs	r3, r3, #26
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	e018      	b.n	8004bac <HAL_ADC_ConfigChannel+0x3cc>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b86:	fa93 f3a3 	rbit	r3, r3
 8004b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004b8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004b96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004b9e:	2320      	movs	r3, #32
 8004ba0:	e004      	b.n	8004bac <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004ba2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ba6:	fab3 f383 	clz	r3, r3
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d106      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fe fe93 	bl	80038e4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2102      	movs	r1, #2
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fdf7 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x40a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2102      	movs	r1, #2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fdec 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004be0:	4603      	mov	r3, r0
 8004be2:	0e9b      	lsrs	r3, r3, #26
 8004be4:	f003 021f 	and.w	r2, r3, #31
 8004be8:	e01e      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x448>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2102      	movs	r1, #2
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe fde1 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004c18:	2320      	movs	r3, #32
 8004c1a:	e004      	b.n	8004c26 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c20:	fab3 f383 	clz	r3, r3
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d105      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0x460>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	0e9b      	lsrs	r3, r3, #26
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	e014      	b.n	8004c6a <HAL_ADC_ConfigChannel+0x48a>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c48:	fa93 f3a3 	rbit	r3, r3
 8004c4c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004c4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	e004      	b.n	8004c6a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004c60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c64:	fab3 f383 	clz	r3, r3
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d106      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	2102      	movs	r1, #2
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fe fe34 	bl	80038e4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2103      	movs	r1, #3
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe fd98 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x4c8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2103      	movs	r1, #3
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fe fd8d 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	0e9b      	lsrs	r3, r3, #26
 8004ca2:	f003 021f 	and.w	r2, r3, #31
 8004ca6:	e017      	b.n	8004cd8 <HAL_ADC_ConfigChannel+0x4f8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2103      	movs	r1, #3
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe fd82 	bl	80037b8 <LL_ADC_GetOffsetChannel>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cba:	fa93 f3a3 	rbit	r3, r3
 8004cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004cca:	2320      	movs	r3, #32
 8004ccc:	e003      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd0:	fab3 f383 	clz	r3, r3
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0x510>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	0e9b      	lsrs	r3, r3, #26
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	e011      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x534>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cf8:	fa93 f3a3 	rbit	r3, r3
 8004cfc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004cfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d00:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004d02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004d08:	2320      	movs	r3, #32
 8004d0a:	e003      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004d0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d0e:	fab3 f383 	clz	r3, r3
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d14f      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2103      	movs	r1, #3
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fe fddf 	bl	80038e4 <LL_ADC_SetOffsetState>
 8004d26:	e047      	b.n	8004db8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	069b      	lsls	r3, r3, #26
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d107      	bne.n	8004d4c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d4a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	069b      	lsls	r3, r3, #26
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d107      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d6e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	069b      	lsls	r3, r3, #26
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d107      	bne.n	8004d94 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d92:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	069b      	lsls	r3, r3, #26
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d107      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004db6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fe ff0b 	bl	8003bd8 <LL_ADC_IsEnabled>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 8219 	bne.w	80051fc <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6819      	ldr	r1, [r3, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f7fe fe2c 	bl	8003a34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4aa1      	ldr	r2, [pc, #644]	; (8005068 <HAL_ADC_ConfigChannel+0x888>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	f040 812e 	bne.w	8005044 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10b      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x630>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	0e9b      	lsrs	r3, r3, #26
 8004dfe:	3301      	adds	r3, #1
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	2b09      	cmp	r3, #9
 8004e06:	bf94      	ite	ls
 8004e08:	2301      	movls	r3, #1
 8004e0a:	2300      	movhi	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e019      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x664>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e18:	fa93 f3a3 	rbit	r3, r3
 8004e1c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004e28:	2320      	movs	r3, #32
 8004e2a:	e003      	b.n	8004e34 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e2e:	fab3 f383 	clz	r3, r3
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	3301      	adds	r3, #1
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	2b09      	cmp	r3, #9
 8004e3c:	bf94      	ite	ls
 8004e3e:	2301      	movls	r3, #1
 8004e40:	2300      	movhi	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d079      	beq.n	8004f3c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d107      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x684>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	0e9b      	lsrs	r3, r3, #26
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	069b      	lsls	r3, r3, #26
 8004e5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e62:	e015      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x6b0>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6c:	fa93 f3a3 	rbit	r3, r3
 8004e70:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e74:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004e7c:	2320      	movs	r3, #32
 8004e7e:	e003      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e82:	fab3 f383 	clz	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	3301      	adds	r3, #1
 8004e8a:	069b      	lsls	r3, r3, #26
 8004e8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d109      	bne.n	8004eb0 <HAL_ADC_ConfigChannel+0x6d0>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	0e9b      	lsrs	r3, r3, #26
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004eae:	e017      	b.n	8004ee0 <HAL_ADC_ConfigChannel+0x700>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb8:	fa93 f3a3 	rbit	r3, r3
 8004ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004ec8:	2320      	movs	r3, #32
 8004eca:	e003      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	2101      	movs	r1, #1
 8004edc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee0:	ea42 0103 	orr.w	r1, r2, r3
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10a      	bne.n	8004f06 <HAL_ADC_ConfigChannel+0x726>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	0e9b      	lsrs	r3, r3, #26
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	f003 021f 	and.w	r2, r3, #31
 8004efc:	4613      	mov	r3, r2
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	4413      	add	r3, r2
 8004f02:	051b      	lsls	r3, r3, #20
 8004f04:	e018      	b.n	8004f38 <HAL_ADC_ConfigChannel+0x758>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0e:	fa93 f3a3 	rbit	r3, r3
 8004f12:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004f1e:	2320      	movs	r3, #32
 8004f20:	e003      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	fab3 f383 	clz	r3, r3
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	f003 021f 	and.w	r2, r3, #31
 8004f30:	4613      	mov	r3, r2
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	4413      	add	r3, r2
 8004f36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	e07e      	b.n	800503a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d107      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x778>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	0e9b      	lsrs	r3, r3, #26
 8004f4e:	3301      	adds	r3, #1
 8004f50:	069b      	lsls	r3, r3, #26
 8004f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f56:	e015      	b.n	8004f84 <HAL_ADC_ConfigChannel+0x7a4>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	fa93 f3a3 	rbit	r3, r3
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004f70:	2320      	movs	r3, #32
 8004f72:	e003      	b.n	8004f7c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f76:	fab3 f383 	clz	r3, r3
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	069b      	lsls	r3, r3, #26
 8004f80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d109      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x7c4>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	0e9b      	lsrs	r3, r3, #26
 8004f96:	3301      	adds	r3, #1
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa2:	e017      	b.n	8004fd4 <HAL_ADC_ConfigChannel+0x7f4>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	fa93 f3a3 	rbit	r3, r3
 8004fb0:	61bb      	str	r3, [r7, #24]
  return result;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	e003      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	fab3 f383 	clz	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	3301      	adds	r3, #1
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	2101      	movs	r1, #1
 8004fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd4:	ea42 0103 	orr.w	r1, r2, r3
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10d      	bne.n	8005000 <HAL_ADC_ConfigChannel+0x820>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	0e9b      	lsrs	r3, r3, #26
 8004fea:	3301      	adds	r3, #1
 8004fec:	f003 021f 	and.w	r2, r3, #31
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3b1e      	subs	r3, #30
 8004ff8:	051b      	lsls	r3, r3, #20
 8004ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	e01b      	b.n	8005038 <HAL_ADC_ConfigChannel+0x858>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	fa93 f3a3 	rbit	r3, r3
 800500c:	60fb      	str	r3, [r7, #12]
  return result;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005018:	2320      	movs	r3, #32
 800501a:	e003      	b.n	8005024 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	fab3 f383 	clz	r3, r3
 8005022:	b2db      	uxtb	r3, r3
 8005024:	3301      	adds	r3, #1
 8005026:	f003 021f 	and.w	r2, r3, #31
 800502a:	4613      	mov	r3, r2
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	4413      	add	r3, r2
 8005030:	3b1e      	subs	r3, #30
 8005032:	051b      	lsls	r3, r3, #20
 8005034:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005038:	430b      	orrs	r3, r1
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	6892      	ldr	r2, [r2, #8]
 800503e:	4619      	mov	r1, r3
 8005040:	f7fe fccc 	bl	80039dc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	f280 80d7 	bge.w	80051fc <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a06      	ldr	r2, [pc, #24]	; (800506c <HAL_ADC_ConfigChannel+0x88c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d004      	beq.n	8005062 <HAL_ADC_ConfigChannel+0x882>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a04      	ldr	r2, [pc, #16]	; (8005070 <HAL_ADC_ConfigChannel+0x890>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d10a      	bne.n	8005078 <HAL_ADC_ConfigChannel+0x898>
 8005062:	4b04      	ldr	r3, [pc, #16]	; (8005074 <HAL_ADC_ConfigChannel+0x894>)
 8005064:	e009      	b.n	800507a <HAL_ADC_ConfigChannel+0x89a>
 8005066:	bf00      	nop
 8005068:	47ff0000 	.word	0x47ff0000
 800506c:	40022000 	.word	0x40022000
 8005070:	40022100 	.word	0x40022100
 8005074:	40022300 	.word	0x40022300
 8005078:	4b65      	ldr	r3, [pc, #404]	; (8005210 <HAL_ADC_ConfigChannel+0xa30>)
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fb5c 	bl	8003738 <LL_ADC_GetCommonPathInternalCh>
 8005080:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a62      	ldr	r2, [pc, #392]	; (8005214 <HAL_ADC_ConfigChannel+0xa34>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_ADC_ConfigChannel+0x8b8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a61      	ldr	r2, [pc, #388]	; (8005218 <HAL_ADC_ConfigChannel+0xa38>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d10e      	bne.n	80050b6 <HAL_ADC_ConfigChannel+0x8d6>
 8005098:	485e      	ldr	r0, [pc, #376]	; (8005214 <HAL_ADC_ConfigChannel+0xa34>)
 800509a:	f7fe fd9d 	bl	8003bd8 <LL_ADC_IsEnabled>
 800509e:	4604      	mov	r4, r0
 80050a0:	485d      	ldr	r0, [pc, #372]	; (8005218 <HAL_ADC_ConfigChannel+0xa38>)
 80050a2:	f7fe fd99 	bl	8003bd8 <LL_ADC_IsEnabled>
 80050a6:	4603      	mov	r3, r0
 80050a8:	4323      	orrs	r3, r4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	bf0c      	ite	eq
 80050ae:	2301      	moveq	r3, #1
 80050b0:	2300      	movne	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	e008      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x8e8>
 80050b6:	4859      	ldr	r0, [pc, #356]	; (800521c <HAL_ADC_ConfigChannel+0xa3c>)
 80050b8:	f7fe fd8e 	bl	8003bd8 <LL_ADC_IsEnabled>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bf0c      	ite	eq
 80050c2:	2301      	moveq	r3, #1
 80050c4:	2300      	movne	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8084 	beq.w	80051d6 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a53      	ldr	r2, [pc, #332]	; (8005220 <HAL_ADC_ConfigChannel+0xa40>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d132      	bne.n	800513e <HAL_ADC_ConfigChannel+0x95e>
 80050d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d12c      	bne.n	800513e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a4c      	ldr	r2, [pc, #304]	; (800521c <HAL_ADC_ConfigChannel+0xa3c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	f040 8086 	bne.w	80051fc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a47      	ldr	r2, [pc, #284]	; (8005214 <HAL_ADC_ConfigChannel+0xa34>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_ADC_ConfigChannel+0x924>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a46      	ldr	r2, [pc, #280]	; (8005218 <HAL_ADC_ConfigChannel+0xa38>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d101      	bne.n	8005108 <HAL_ADC_ConfigChannel+0x928>
 8005104:	4a47      	ldr	r2, [pc, #284]	; (8005224 <HAL_ADC_ConfigChannel+0xa44>)
 8005106:	e000      	b.n	800510a <HAL_ADC_ConfigChannel+0x92a>
 8005108:	4a41      	ldr	r2, [pc, #260]	; (8005210 <HAL_ADC_ConfigChannel+0xa30>)
 800510a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800510e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005112:	4619      	mov	r1, r3
 8005114:	4610      	mov	r0, r2
 8005116:	f7fe fafc 	bl	8003712 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800511a:	4b43      	ldr	r3, [pc, #268]	; (8005228 <HAL_ADC_ConfigChannel+0xa48>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	099b      	lsrs	r3, r3, #6
 8005120:	4a42      	ldr	r2, [pc, #264]	; (800522c <HAL_ADC_ConfigChannel+0xa4c>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	099b      	lsrs	r3, r3, #6
 8005128:	3301      	adds	r3, #1
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800512e:	e002      	b.n	8005136 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	3b01      	subs	r3, #1
 8005134:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f9      	bne.n	8005130 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800513c:	e05e      	b.n	80051fc <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a3b      	ldr	r2, [pc, #236]	; (8005230 <HAL_ADC_ConfigChannel+0xa50>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d120      	bne.n	800518a <HAL_ADC_ConfigChannel+0x9aa>
 8005148:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800514c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d11a      	bne.n	800518a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a30      	ldr	r2, [pc, #192]	; (800521c <HAL_ADC_ConfigChannel+0xa3c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d14e      	bne.n	80051fc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2c      	ldr	r2, [pc, #176]	; (8005214 <HAL_ADC_ConfigChannel+0xa34>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_ADC_ConfigChannel+0x992>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2a      	ldr	r2, [pc, #168]	; (8005218 <HAL_ADC_ConfigChannel+0xa38>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d101      	bne.n	8005176 <HAL_ADC_ConfigChannel+0x996>
 8005172:	4a2c      	ldr	r2, [pc, #176]	; (8005224 <HAL_ADC_ConfigChannel+0xa44>)
 8005174:	e000      	b.n	8005178 <HAL_ADC_ConfigChannel+0x998>
 8005176:	4a26      	ldr	r2, [pc, #152]	; (8005210 <HAL_ADC_ConfigChannel+0xa30>)
 8005178:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800517c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f7fe fac5 	bl	8003712 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005188:	e038      	b.n	80051fc <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a29      	ldr	r2, [pc, #164]	; (8005234 <HAL_ADC_ConfigChannel+0xa54>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d133      	bne.n	80051fc <HAL_ADC_ConfigChannel+0xa1c>
 8005194:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d12d      	bne.n	80051fc <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1d      	ldr	r2, [pc, #116]	; (800521c <HAL_ADC_ConfigChannel+0xa3c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d128      	bne.n	80051fc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a19      	ldr	r2, [pc, #100]	; (8005214 <HAL_ADC_ConfigChannel+0xa34>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_ADC_ConfigChannel+0x9de>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a17      	ldr	r2, [pc, #92]	; (8005218 <HAL_ADC_ConfigChannel+0xa38>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <HAL_ADC_ConfigChannel+0x9e2>
 80051be:	4a19      	ldr	r2, [pc, #100]	; (8005224 <HAL_ADC_ConfigChannel+0xa44>)
 80051c0:	e000      	b.n	80051c4 <HAL_ADC_ConfigChannel+0x9e4>
 80051c2:	4a13      	ldr	r2, [pc, #76]	; (8005210 <HAL_ADC_ConfigChannel+0xa30>)
 80051c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f7fe fa9f 	bl	8003712 <LL_ADC_SetCommonPathInternalCh>
 80051d4:	e012      	b.n	80051fc <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051da:	f043 0220 	orr.w	r2, r3, #32
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80051e8:	e008      	b.n	80051fc <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005204:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005208:	4618      	mov	r0, r3
 800520a:	37e4      	adds	r7, #228	; 0xe4
 800520c:	46bd      	mov	sp, r7
 800520e:	bd90      	pop	{r4, r7, pc}
 8005210:	58026300 	.word	0x58026300
 8005214:	40022000 	.word	0x40022000
 8005218:	40022100 	.word	0x40022100
 800521c:	58026000 	.word	0x58026000
 8005220:	c7520000 	.word	0xc7520000
 8005224:	40022300 	.word	0x40022300
 8005228:	20000000 	.word	0x20000000
 800522c:	053e2d63 	.word	0x053e2d63
 8005230:	c3210000 	.word	0xc3210000
 8005234:	cb840000 	.word	0xcb840000

08005238 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe fcc7 	bl	8003bd8 <LL_ADC_IsEnabled>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d16e      	bne.n	800532e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	4b38      	ldr	r3, [pc, #224]	; (8005338 <ADC_Enable+0x100>)
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00d      	beq.n	800527a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005262:	f043 0210 	orr.w	r2, r3, #16
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800526e:	f043 0201 	orr.w	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e05a      	b.n	8005330 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe fc82 	bl	8003b88 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005284:	f7fe fa26 	bl	80036d4 <HAL_GetTick>
 8005288:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a2b      	ldr	r2, [pc, #172]	; (800533c <ADC_Enable+0x104>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d004      	beq.n	800529e <ADC_Enable+0x66>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a29      	ldr	r2, [pc, #164]	; (8005340 <ADC_Enable+0x108>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d101      	bne.n	80052a2 <ADC_Enable+0x6a>
 800529e:	4b29      	ldr	r3, [pc, #164]	; (8005344 <ADC_Enable+0x10c>)
 80052a0:	e000      	b.n	80052a4 <ADC_Enable+0x6c>
 80052a2:	4b29      	ldr	r3, [pc, #164]	; (8005348 <ADC_Enable+0x110>)
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fe fc05 	bl	8003ab4 <LL_ADC_GetMultimode>
 80052aa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a23      	ldr	r2, [pc, #140]	; (8005340 <ADC_Enable+0x108>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d002      	beq.n	80052bc <ADC_Enable+0x84>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	e000      	b.n	80052be <ADC_Enable+0x86>
 80052bc:	4b1f      	ldr	r3, [pc, #124]	; (800533c <ADC_Enable+0x104>)
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d02c      	beq.n	8005320 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d130      	bne.n	800532e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052cc:	e028      	b.n	8005320 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe fc80 	bl	8003bd8 <LL_ADC_IsEnabled>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d104      	bne.n	80052e8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fe fc50 	bl	8003b88 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80052e8:	f7fe f9f4 	bl	80036d4 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d914      	bls.n	8005320 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	d00d      	beq.n	8005320 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005308:	f043 0210 	orr.w	r2, r3, #16
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005314:	f043 0201 	orr.w	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e007      	b.n	8005330 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b01      	cmp	r3, #1
 800532c:	d1cf      	bne.n	80052ce <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	8000003f 	.word	0x8000003f
 800533c:	40022000 	.word	0x40022000
 8005340:	40022100 	.word	0x40022100
 8005344:	40022300 	.word	0x40022300
 8005348:	58026300 	.word	0x58026300

0800534c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4618      	mov	r0, r3
 800535a:	f7fe fc50 	bl	8003bfe <LL_ADC_IsDisableOngoing>
 800535e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f7fe fc37 	bl	8003bd8 <LL_ADC_IsEnabled>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d047      	beq.n	8005400 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d144      	bne.n	8005400 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 030d 	and.w	r3, r3, #13
 8005380:	2b01      	cmp	r3, #1
 8005382:	d10c      	bne.n	800539e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f7fe fc11 	bl	8003bb0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2203      	movs	r2, #3
 8005394:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005396:	f7fe f99d 	bl	80036d4 <HAL_GetTick>
 800539a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800539c:	e029      	b.n	80053f2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a2:	f043 0210 	orr.w	r2, r3, #16
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ae:	f043 0201 	orr.w	r2, r3, #1
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e023      	b.n	8005402 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80053ba:	f7fe f98b 	bl	80036d4 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d914      	bls.n	80053f2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00d      	beq.n	80053f2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053da:	f043 0210 	orr.w	r2, r3, #16
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053e6:	f043 0201 	orr.w	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e007      	b.n	8005402 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1dc      	bne.n	80053ba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a6b      	ldr	r2, [pc, #428]	; (80055c8 <ADC_ConfigureBoostMode+0x1bc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d004      	beq.n	8005428 <ADC_ConfigureBoostMode+0x1c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a6a      	ldr	r2, [pc, #424]	; (80055cc <ADC_ConfigureBoostMode+0x1c0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d109      	bne.n	800543c <ADC_ConfigureBoostMode+0x30>
 8005428:	4b69      	ldr	r3, [pc, #420]	; (80055d0 <ADC_ConfigureBoostMode+0x1c4>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005430:	2b00      	cmp	r3, #0
 8005432:	bf14      	ite	ne
 8005434:	2301      	movne	r3, #1
 8005436:	2300      	moveq	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	e008      	b.n	800544e <ADC_ConfigureBoostMode+0x42>
 800543c:	4b65      	ldr	r3, [pc, #404]	; (80055d4 <ADC_ConfigureBoostMode+0x1c8>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005444:	2b00      	cmp	r3, #0
 8005446:	bf14      	ite	ne
 8005448:	2301      	movne	r3, #1
 800544a:	2300      	moveq	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01c      	beq.n	800548c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005452:	f003 fe79 	bl	8009148 <HAL_RCC_GetHCLKFreq>
 8005456:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005460:	d010      	beq.n	8005484 <ADC_ConfigureBoostMode+0x78>
 8005462:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005466:	d871      	bhi.n	800554c <ADC_ConfigureBoostMode+0x140>
 8005468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546c:	d002      	beq.n	8005474 <ADC_ConfigureBoostMode+0x68>
 800546e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005472:	d16b      	bne.n	800554c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	0c1b      	lsrs	r3, r3, #16
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005480:	60fb      	str	r3, [r7, #12]
        break;
 8005482:	e066      	b.n	8005552 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	089b      	lsrs	r3, r3, #2
 8005488:	60fb      	str	r3, [r7, #12]
        break;
 800548a:	e062      	b.n	8005552 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800548c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005490:	f004 fdb0 	bl	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005494:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800549e:	d051      	beq.n	8005544 <ADC_ConfigureBoostMode+0x138>
 80054a0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80054a4:	d854      	bhi.n	8005550 <ADC_ConfigureBoostMode+0x144>
 80054a6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80054aa:	d047      	beq.n	800553c <ADC_ConfigureBoostMode+0x130>
 80054ac:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80054b0:	d84e      	bhi.n	8005550 <ADC_ConfigureBoostMode+0x144>
 80054b2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80054b6:	d03d      	beq.n	8005534 <ADC_ConfigureBoostMode+0x128>
 80054b8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80054bc:	d848      	bhi.n	8005550 <ADC_ConfigureBoostMode+0x144>
 80054be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054c2:	d033      	beq.n	800552c <ADC_ConfigureBoostMode+0x120>
 80054c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054c8:	d842      	bhi.n	8005550 <ADC_ConfigureBoostMode+0x144>
 80054ca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80054ce:	d029      	beq.n	8005524 <ADC_ConfigureBoostMode+0x118>
 80054d0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80054d4:	d83c      	bhi.n	8005550 <ADC_ConfigureBoostMode+0x144>
 80054d6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80054da:	d01a      	beq.n	8005512 <ADC_ConfigureBoostMode+0x106>
 80054dc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80054e0:	d836      	bhi.n	8005550 <ADC_ConfigureBoostMode+0x144>
 80054e2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054e6:	d014      	beq.n	8005512 <ADC_ConfigureBoostMode+0x106>
 80054e8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054ec:	d830      	bhi.n	8005550 <ADC_ConfigureBoostMode+0x144>
 80054ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054f2:	d00e      	beq.n	8005512 <ADC_ConfigureBoostMode+0x106>
 80054f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054f8:	d82a      	bhi.n	8005550 <ADC_ConfigureBoostMode+0x144>
 80054fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054fe:	d008      	beq.n	8005512 <ADC_ConfigureBoostMode+0x106>
 8005500:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005504:	d824      	bhi.n	8005550 <ADC_ConfigureBoostMode+0x144>
 8005506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800550a:	d002      	beq.n	8005512 <ADC_ConfigureBoostMode+0x106>
 800550c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005510:	d11e      	bne.n	8005550 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	0c9b      	lsrs	r3, r3, #18
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	60fb      	str	r3, [r7, #12]
        break;
 8005522:	e016      	b.n	8005552 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	091b      	lsrs	r3, r3, #4
 8005528:	60fb      	str	r3, [r7, #12]
        break;
 800552a:	e012      	b.n	8005552 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	60fb      	str	r3, [r7, #12]
        break;
 8005532:	e00e      	b.n	8005552 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	60fb      	str	r3, [r7, #12]
        break;
 800553a:	e00a      	b.n	8005552 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	09db      	lsrs	r3, r3, #7
 8005540:	60fb      	str	r3, [r7, #12]
        break;
 8005542:	e006      	b.n	8005552 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	60fb      	str	r3, [r7, #12]
        break;
 800554a:	e002      	b.n	8005552 <ADC_ConfigureBoostMode+0x146>
        break;
 800554c:	bf00      	nop
 800554e:	e000      	b.n	8005552 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8005550:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	085b      	lsrs	r3, r3, #1
 8005556:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <ADC_ConfigureBoostMode+0x1cc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d808      	bhi.n	8005572 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800556e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005570:	e025      	b.n	80055be <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a19      	ldr	r2, [pc, #100]	; (80055dc <ADC_ConfigureBoostMode+0x1d0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d80a      	bhi.n	8005590 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800558c:	609a      	str	r2, [r3, #8]
}
 800558e:	e016      	b.n	80055be <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a13      	ldr	r2, [pc, #76]	; (80055e0 <ADC_ConfigureBoostMode+0x1d4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d80a      	bhi.n	80055ae <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055aa:	609a      	str	r2, [r3, #8]
}
 80055ac:	e007      	b.n	80055be <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80055bc:	609a      	str	r2, [r3, #8]
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40022000 	.word	0x40022000
 80055cc:	40022100 	.word	0x40022100
 80055d0:	40022300 	.word	0x40022300
 80055d4:	58026300 	.word	0x58026300
 80055d8:	005f5e10 	.word	0x005f5e10
 80055dc:	00bebc20 	.word	0x00bebc20
 80055e0:	017d7840 	.word	0x017d7840

080055e4 <LL_ADC_StartCalibration>:
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	4b09      	ldr	r3, [pc, #36]	; (800561c <LL_ADC_StartCalibration+0x38>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005604:	430a      	orrs	r2, r1
 8005606:	4313      	orrs	r3, r2
 8005608:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	609a      	str	r2, [r3, #8]
}
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	3ffeffc0 	.word	0x3ffeffc0

08005620 <LL_ADC_IsCalibrationOnGoing>:
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005634:	d101      	bne.n	800563a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_ADCEx_Calibration_Start+0x1e>
 8005662:	2302      	movs	r3, #2
 8005664:	e04c      	b.n	8005700 <HAL_ADCEx_Calibration_Start+0xb8>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f7ff fe6c 	bl	800534c <ADC_Disable>
 8005674:	4603      	mov	r3, r0
 8005676:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d135      	bne.n	80056ea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005682:	4b21      	ldr	r3, [pc, #132]	; (8005708 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005684:	4013      	ands	r3, r2
 8005686:	f043 0202 	orr.w	r2, r3, #2
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff ffa4 	bl	80055e4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800569c:	e014      	b.n	80056c8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	3301      	adds	r3, #1
 80056a2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4a19      	ldr	r2, [pc, #100]	; (800570c <HAL_ADCEx_Calibration_Start+0xc4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d30d      	bcc.n	80056c8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b0:	f023 0312 	bic.w	r3, r3, #18
 80056b4:	f043 0210 	orr.w	r2, r3, #16
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e01b      	b.n	8005700 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff ffa7 	bl	8005620 <LL_ADC_IsCalibrationOnGoing>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e2      	bne.n	800569e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056dc:	f023 0303 	bic.w	r3, r3, #3
 80056e0:	f043 0201 	orr.w	r2, r3, #1
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	661a      	str	r2, [r3, #96]	; 0x60
 80056e8:	e005      	b.n	80056f6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ee:	f043 0210 	orr.w	r2, r3, #16
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	ffffeefd 	.word	0xffffeefd
 800570c:	25c3f800 	.word	0x25c3f800

08005710 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005784:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <__NVIC_SetPriorityGrouping+0x40>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005790:	4013      	ands	r3, r2
 8005792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <__NVIC_SetPriorityGrouping+0x44>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057a2:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <__NVIC_SetPriorityGrouping+0x40>)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	60d3      	str	r3, [r2, #12]
}
 80057a8:	bf00      	nop
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	e000ed00 	.word	0xe000ed00
 80057b8:	05fa0000 	.word	0x05fa0000

080057bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057c0:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <__NVIC_GetPriorityGrouping+0x18>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	0a1b      	lsrs	r3, r3, #8
 80057c6:	f003 0307 	and.w	r3, r3, #7
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	e000ed00 	.word	0xe000ed00

080057d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	4603      	mov	r3, r0
 80057e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	db0b      	blt.n	8005802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	f003 021f 	and.w	r2, r3, #31
 80057f0:	4907      	ldr	r1, [pc, #28]	; (8005810 <__NVIC_EnableIRQ+0x38>)
 80057f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	2001      	movs	r0, #1
 80057fa:	fa00 f202 	lsl.w	r2, r0, r2
 80057fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	e000e100 	.word	0xe000e100

08005814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	6039      	str	r1, [r7, #0]
 800581e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005824:	2b00      	cmp	r3, #0
 8005826:	db0a      	blt.n	800583e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	b2da      	uxtb	r2, r3
 800582c:	490c      	ldr	r1, [pc, #48]	; (8005860 <__NVIC_SetPriority+0x4c>)
 800582e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005832:	0112      	lsls	r2, r2, #4
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	440b      	add	r3, r1
 8005838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800583c:	e00a      	b.n	8005854 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	4908      	ldr	r1, [pc, #32]	; (8005864 <__NVIC_SetPriority+0x50>)
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	3b04      	subs	r3, #4
 800584c:	0112      	lsls	r2, r2, #4
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	440b      	add	r3, r1
 8005852:	761a      	strb	r2, [r3, #24]
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	e000e100 	.word	0xe000e100
 8005864:	e000ed00 	.word	0xe000ed00

08005868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005868:	b480      	push	{r7}
 800586a:	b089      	sub	sp, #36	; 0x24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f1c3 0307 	rsb	r3, r3, #7
 8005882:	2b04      	cmp	r3, #4
 8005884:	bf28      	it	cs
 8005886:	2304      	movcs	r3, #4
 8005888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	3304      	adds	r3, #4
 800588e:	2b06      	cmp	r3, #6
 8005890:	d902      	bls.n	8005898 <NVIC_EncodePriority+0x30>
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	3b03      	subs	r3, #3
 8005896:	e000      	b.n	800589a <NVIC_EncodePriority+0x32>
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800589c:	f04f 32ff 	mov.w	r2, #4294967295
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	43da      	mvns	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	401a      	ands	r2, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058b0:	f04f 31ff 	mov.w	r1, #4294967295
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ba:	43d9      	mvns	r1, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058c0:	4313      	orrs	r3, r2
         );
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3724      	adds	r7, #36	; 0x24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3b01      	subs	r3, #1
 80058dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058e0:	d301      	bcc.n	80058e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058e2:	2301      	movs	r3, #1
 80058e4:	e00f      	b.n	8005906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058e6:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <SysTick_Config+0x40>)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058ee:	210f      	movs	r1, #15
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295
 80058f4:	f7ff ff8e 	bl	8005814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058f8:	4b05      	ldr	r3, [pc, #20]	; (8005910 <SysTick_Config+0x40>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058fe:	4b04      	ldr	r3, [pc, #16]	; (8005910 <SysTick_Config+0x40>)
 8005900:	2207      	movs	r2, #7
 8005902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	e000e010 	.word	0xe000e010

08005914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff ff29 	bl	8005774 <__NVIC_SetPriorityGrouping>
}
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b086      	sub	sp, #24
 800592e:	af00      	add	r7, sp, #0
 8005930:	4603      	mov	r3, r0
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]
 8005936:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005938:	f7ff ff40 	bl	80057bc <__NVIC_GetPriorityGrouping>
 800593c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68b9      	ldr	r1, [r7, #8]
 8005942:	6978      	ldr	r0, [r7, #20]
 8005944:	f7ff ff90 	bl	8005868 <NVIC_EncodePriority>
 8005948:	4602      	mov	r2, r0
 800594a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800594e:	4611      	mov	r1, r2
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff ff5f 	bl	8005814 <__NVIC_SetPriority>
}
 8005956:	bf00      	nop
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	4603      	mov	r3, r0
 8005966:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff ff33 	bl	80057d8 <__NVIC_EnableIRQ>
}
 8005972:	bf00      	nop
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff ffa4 	bl	80058d0 <SysTick_Config>
 8005988:	4603      	mov	r3, r0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e054      	b.n	8005a50 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	7f5b      	ldrb	r3, [r3, #29]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d105      	bne.n	80059bc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fb fc04 	bl	80011c4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	791b      	ldrb	r3, [r3, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10c      	bne.n	80059e4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a22      	ldr	r2, [pc, #136]	; (8005a58 <HAL_CRC_Init+0xc4>)
 80059d0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0218 	bic.w	r2, r2, #24
 80059e0:	609a      	str	r2, [r3, #8]
 80059e2:	e00c      	b.n	80059fe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6899      	ldr	r1, [r3, #8]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	461a      	mov	r2, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f834 	bl	8005a5c <HAL_CRCEx_Polynomial_Set>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e028      	b.n	8005a50 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	795b      	ldrb	r3, [r3, #5]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d105      	bne.n	8005a12 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0e:	611a      	str	r2, [r3, #16]
 8005a10:	e004      	b.n	8005a1c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6912      	ldr	r2, [r2, #16]
 8005a1a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699a      	ldr	r2, [r3, #24]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	04c11db7 	.word	0x04c11db7

08005a5c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005a6c:	231f      	movs	r3, #31
 8005a6e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005a70:	bf00      	nop
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1e5a      	subs	r2, r3, #1
 8005a76:	613a      	str	r2, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d009      	beq.n	8005a90 <HAL_CRCEx_Polynomial_Set+0x34>
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f003 031f 	and.w	r3, r3, #31
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_CRCEx_Polynomial_Set+0x16>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b18      	cmp	r3, #24
 8005a94:	d846      	bhi.n	8005b24 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005a96:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <HAL_CRCEx_Polynomial_Set+0x40>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005b2b 	.word	0x08005b2b
 8005aa0:	08005b25 	.word	0x08005b25
 8005aa4:	08005b25 	.word	0x08005b25
 8005aa8:	08005b25 	.word	0x08005b25
 8005aac:	08005b25 	.word	0x08005b25
 8005ab0:	08005b25 	.word	0x08005b25
 8005ab4:	08005b25 	.word	0x08005b25
 8005ab8:	08005b25 	.word	0x08005b25
 8005abc:	08005b19 	.word	0x08005b19
 8005ac0:	08005b25 	.word	0x08005b25
 8005ac4:	08005b25 	.word	0x08005b25
 8005ac8:	08005b25 	.word	0x08005b25
 8005acc:	08005b25 	.word	0x08005b25
 8005ad0:	08005b25 	.word	0x08005b25
 8005ad4:	08005b25 	.word	0x08005b25
 8005ad8:	08005b25 	.word	0x08005b25
 8005adc:	08005b0d 	.word	0x08005b0d
 8005ae0:	08005b25 	.word	0x08005b25
 8005ae4:	08005b25 	.word	0x08005b25
 8005ae8:	08005b25 	.word	0x08005b25
 8005aec:	08005b25 	.word	0x08005b25
 8005af0:	08005b25 	.word	0x08005b25
 8005af4:	08005b25 	.word	0x08005b25
 8005af8:	08005b25 	.word	0x08005b25
 8005afc:	08005b01 	.word	0x08005b01
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2b06      	cmp	r3, #6
 8005b04:	d913      	bls.n	8005b2e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005b0a:	e010      	b.n	8005b2e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	2b07      	cmp	r3, #7
 8005b10:	d90f      	bls.n	8005b32 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005b16:	e00c      	b.n	8005b32 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b0f      	cmp	r3, #15
 8005b1c:	d90b      	bls.n	8005b36 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005b22:	e008      	b.n	8005b36 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	75fb      	strb	r3, [r7, #23]
      break;
 8005b28:	e006      	b.n	8005b38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005b2a:	bf00      	nop
 8005b2c:	e004      	b.n	8005b38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005b2e:	bf00      	nop
 8005b30:	e002      	b.n	8005b38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005b32:	bf00      	nop
 8005b34:	e000      	b.n	8005b38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005b36:	bf00      	nop
  }
  if (status == HAL_OK)
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10d      	bne.n	8005b5a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f023 0118 	bic.w	r1, r3, #24
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	371c      	adds	r7, #28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005b70:	f7fd fdb0 	bl	80036d4 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e314      	b.n	80061aa <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a66      	ldr	r2, [pc, #408]	; (8005d20 <HAL_DMA_Init+0x1b8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d04a      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a65      	ldr	r2, [pc, #404]	; (8005d24 <HAL_DMA_Init+0x1bc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d045      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a63      	ldr	r2, [pc, #396]	; (8005d28 <HAL_DMA_Init+0x1c0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d040      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a62      	ldr	r2, [pc, #392]	; (8005d2c <HAL_DMA_Init+0x1c4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d03b      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a60      	ldr	r2, [pc, #384]	; (8005d30 <HAL_DMA_Init+0x1c8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d036      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a5f      	ldr	r2, [pc, #380]	; (8005d34 <HAL_DMA_Init+0x1cc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d031      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a5d      	ldr	r2, [pc, #372]	; (8005d38 <HAL_DMA_Init+0x1d0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d02c      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a5c      	ldr	r2, [pc, #368]	; (8005d3c <HAL_DMA_Init+0x1d4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d027      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a5a      	ldr	r2, [pc, #360]	; (8005d40 <HAL_DMA_Init+0x1d8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d022      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a59      	ldr	r2, [pc, #356]	; (8005d44 <HAL_DMA_Init+0x1dc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d01d      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a57      	ldr	r2, [pc, #348]	; (8005d48 <HAL_DMA_Init+0x1e0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d018      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a56      	ldr	r2, [pc, #344]	; (8005d4c <HAL_DMA_Init+0x1e4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d013      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a54      	ldr	r2, [pc, #336]	; (8005d50 <HAL_DMA_Init+0x1e8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00e      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a53      	ldr	r2, [pc, #332]	; (8005d54 <HAL_DMA_Init+0x1ec>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d009      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a51      	ldr	r2, [pc, #324]	; (8005d58 <HAL_DMA_Init+0x1f0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d004      	beq.n	8005c20 <HAL_DMA_Init+0xb8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a50      	ldr	r2, [pc, #320]	; (8005d5c <HAL_DMA_Init+0x1f4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d101      	bne.n	8005c24 <HAL_DMA_Init+0xbc>
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <HAL_DMA_Init+0xbe>
 8005c24:	2300      	movs	r3, #0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 813c 	beq.w	8005ea4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a37      	ldr	r2, [pc, #220]	; (8005d20 <HAL_DMA_Init+0x1b8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d04a      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a36      	ldr	r2, [pc, #216]	; (8005d24 <HAL_DMA_Init+0x1bc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d045      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a34      	ldr	r2, [pc, #208]	; (8005d28 <HAL_DMA_Init+0x1c0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d040      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a33      	ldr	r2, [pc, #204]	; (8005d2c <HAL_DMA_Init+0x1c4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d03b      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a31      	ldr	r2, [pc, #196]	; (8005d30 <HAL_DMA_Init+0x1c8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d036      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a30      	ldr	r2, [pc, #192]	; (8005d34 <HAL_DMA_Init+0x1cc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d031      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a2e      	ldr	r2, [pc, #184]	; (8005d38 <HAL_DMA_Init+0x1d0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d02c      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a2d      	ldr	r2, [pc, #180]	; (8005d3c <HAL_DMA_Init+0x1d4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d027      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a2b      	ldr	r2, [pc, #172]	; (8005d40 <HAL_DMA_Init+0x1d8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d022      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a2a      	ldr	r2, [pc, #168]	; (8005d44 <HAL_DMA_Init+0x1dc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d01d      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a28      	ldr	r2, [pc, #160]	; (8005d48 <HAL_DMA_Init+0x1e0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d018      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a27      	ldr	r2, [pc, #156]	; (8005d4c <HAL_DMA_Init+0x1e4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d013      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a25      	ldr	r2, [pc, #148]	; (8005d50 <HAL_DMA_Init+0x1e8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00e      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a24      	ldr	r2, [pc, #144]	; (8005d54 <HAL_DMA_Init+0x1ec>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d009      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a22      	ldr	r2, [pc, #136]	; (8005d58 <HAL_DMA_Init+0x1f0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <HAL_DMA_Init+0x174>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a21      	ldr	r2, [pc, #132]	; (8005d5c <HAL_DMA_Init+0x1f4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d108      	bne.n	8005cee <HAL_DMA_Init+0x186>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0201 	bic.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	e007      	b.n	8005cfe <HAL_DMA_Init+0x196>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005cfe:	e02f      	b.n	8005d60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d00:	f7fd fce8 	bl	80036d4 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d928      	bls.n	8005d60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2220      	movs	r2, #32
 8005d12:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2203      	movs	r2, #3
 8005d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e244      	b.n	80061aa <HAL_DMA_Init+0x642>
 8005d20:	40020010 	.word	0x40020010
 8005d24:	40020028 	.word	0x40020028
 8005d28:	40020040 	.word	0x40020040
 8005d2c:	40020058 	.word	0x40020058
 8005d30:	40020070 	.word	0x40020070
 8005d34:	40020088 	.word	0x40020088
 8005d38:	400200a0 	.word	0x400200a0
 8005d3c:	400200b8 	.word	0x400200b8
 8005d40:	40020410 	.word	0x40020410
 8005d44:	40020428 	.word	0x40020428
 8005d48:	40020440 	.word	0x40020440
 8005d4c:	40020458 	.word	0x40020458
 8005d50:	40020470 	.word	0x40020470
 8005d54:	40020488 	.word	0x40020488
 8005d58:	400204a0 	.word	0x400204a0
 8005d5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1c8      	bne.n	8005d00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4b84      	ldr	r3, [pc, #528]	; (8005f8c <HAL_DMA_Init+0x424>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005d86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d107      	bne.n	8005dc4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b28      	cmp	r3, #40	; 0x28
 8005dca:	d903      	bls.n	8005dd4 <HAL_DMA_Init+0x26c>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8005dd2:	d91f      	bls.n	8005e14 <HAL_DMA_Init+0x2ac>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b3e      	cmp	r3, #62	; 0x3e
 8005dda:	d903      	bls.n	8005de4 <HAL_DMA_Init+0x27c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b42      	cmp	r3, #66	; 0x42
 8005de2:	d917      	bls.n	8005e14 <HAL_DMA_Init+0x2ac>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b46      	cmp	r3, #70	; 0x46
 8005dea:	d903      	bls.n	8005df4 <HAL_DMA_Init+0x28c>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b48      	cmp	r3, #72	; 0x48
 8005df2:	d90f      	bls.n	8005e14 <HAL_DMA_Init+0x2ac>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b4e      	cmp	r3, #78	; 0x4e
 8005dfa:	d903      	bls.n	8005e04 <HAL_DMA_Init+0x29c>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2b52      	cmp	r3, #82	; 0x52
 8005e02:	d907      	bls.n	8005e14 <HAL_DMA_Init+0x2ac>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b73      	cmp	r3, #115	; 0x73
 8005e0a:	d905      	bls.n	8005e18 <HAL_DMA_Init+0x2b0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2b77      	cmp	r3, #119	; 0x77
 8005e12:	d801      	bhi.n	8005e18 <HAL_DMA_Init+0x2b0>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <HAL_DMA_Init+0x2b2>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e24:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f023 0307 	bic.w	r3, r3, #7
 8005e3c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d117      	bne.n	8005e80 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00e      	beq.n	8005e80 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f001 fdcc 	bl	8007a00 <DMA_CheckFifoParam>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2240      	movs	r2, #64	; 0x40
 8005e72:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e194      	b.n	80061aa <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f001 fd07 	bl	800789c <DMA_CalcBaseAndBitshift>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	223f      	movs	r2, #63	; 0x3f
 8005e9c:	409a      	lsls	r2, r3
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	609a      	str	r2, [r3, #8]
 8005ea2:	e0ca      	b.n	800603a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a39      	ldr	r2, [pc, #228]	; (8005f90 <HAL_DMA_Init+0x428>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d022      	beq.n	8005ef4 <HAL_DMA_Init+0x38c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a38      	ldr	r2, [pc, #224]	; (8005f94 <HAL_DMA_Init+0x42c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d01d      	beq.n	8005ef4 <HAL_DMA_Init+0x38c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a36      	ldr	r2, [pc, #216]	; (8005f98 <HAL_DMA_Init+0x430>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d018      	beq.n	8005ef4 <HAL_DMA_Init+0x38c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a35      	ldr	r2, [pc, #212]	; (8005f9c <HAL_DMA_Init+0x434>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d013      	beq.n	8005ef4 <HAL_DMA_Init+0x38c>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a33      	ldr	r2, [pc, #204]	; (8005fa0 <HAL_DMA_Init+0x438>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00e      	beq.n	8005ef4 <HAL_DMA_Init+0x38c>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a32      	ldr	r2, [pc, #200]	; (8005fa4 <HAL_DMA_Init+0x43c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d009      	beq.n	8005ef4 <HAL_DMA_Init+0x38c>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a30      	ldr	r2, [pc, #192]	; (8005fa8 <HAL_DMA_Init+0x440>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d004      	beq.n	8005ef4 <HAL_DMA_Init+0x38c>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a2f      	ldr	r2, [pc, #188]	; (8005fac <HAL_DMA_Init+0x444>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d101      	bne.n	8005ef8 <HAL_DMA_Init+0x390>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e000      	b.n	8005efa <HAL_DMA_Init+0x392>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 8094 	beq.w	8006028 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a22      	ldr	r2, [pc, #136]	; (8005f90 <HAL_DMA_Init+0x428>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d021      	beq.n	8005f4e <HAL_DMA_Init+0x3e6>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a21      	ldr	r2, [pc, #132]	; (8005f94 <HAL_DMA_Init+0x42c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d01c      	beq.n	8005f4e <HAL_DMA_Init+0x3e6>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1f      	ldr	r2, [pc, #124]	; (8005f98 <HAL_DMA_Init+0x430>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d017      	beq.n	8005f4e <HAL_DMA_Init+0x3e6>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1e      	ldr	r2, [pc, #120]	; (8005f9c <HAL_DMA_Init+0x434>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d012      	beq.n	8005f4e <HAL_DMA_Init+0x3e6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1c      	ldr	r2, [pc, #112]	; (8005fa0 <HAL_DMA_Init+0x438>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00d      	beq.n	8005f4e <HAL_DMA_Init+0x3e6>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1b      	ldr	r2, [pc, #108]	; (8005fa4 <HAL_DMA_Init+0x43c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d008      	beq.n	8005f4e <HAL_DMA_Init+0x3e6>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a19      	ldr	r2, [pc, #100]	; (8005fa8 <HAL_DMA_Init+0x440>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d003      	beq.n	8005f4e <HAL_DMA_Init+0x3e6>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a18      	ldr	r2, [pc, #96]	; (8005fac <HAL_DMA_Init+0x444>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	4b11      	ldr	r3, [pc, #68]	; (8005fb0 <HAL_DMA_Init+0x448>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2b40      	cmp	r3, #64	; 0x40
 8005f76:	d01d      	beq.n	8005fb4 <HAL_DMA_Init+0x44c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b80      	cmp	r3, #128	; 0x80
 8005f7e:	d102      	bne.n	8005f86 <HAL_DMA_Init+0x41e>
 8005f80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f84:	e017      	b.n	8005fb6 <HAL_DMA_Init+0x44e>
 8005f86:	2300      	movs	r3, #0
 8005f88:	e015      	b.n	8005fb6 <HAL_DMA_Init+0x44e>
 8005f8a:	bf00      	nop
 8005f8c:	fe10803f 	.word	0xfe10803f
 8005f90:	58025408 	.word	0x58025408
 8005f94:	5802541c 	.word	0x5802541c
 8005f98:	58025430 	.word	0x58025430
 8005f9c:	58025444 	.word	0x58025444
 8005fa0:	58025458 	.word	0x58025458
 8005fa4:	5802546c 	.word	0x5802546c
 8005fa8:	58025480 	.word	0x58025480
 8005fac:	58025494 	.word	0x58025494
 8005fb0:	fffe000f 	.word	0xfffe000f
 8005fb4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	68d2      	ldr	r2, [r2, #12]
 8005fba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005fbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005fc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005fcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005fd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005fdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005fe4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	4b6e      	ldr	r3, [pc, #440]	; (80061b4 <HAL_DMA_Init+0x64c>)
 8005ffc:	4413      	add	r3, r2
 8005ffe:	4a6e      	ldr	r2, [pc, #440]	; (80061b8 <HAL_DMA_Init+0x650>)
 8006000:	fba2 2303 	umull	r2, r3, r2, r3
 8006004:	091b      	lsrs	r3, r3, #4
 8006006:	009a      	lsls	r2, r3, #2
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 fc45 	bl	800789c <DMA_CalcBaseAndBitshift>
 8006012:	4603      	mov	r3, r0
 8006014:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601a:	f003 031f 	and.w	r3, r3, #31
 800601e:	2201      	movs	r2, #1
 8006020:	409a      	lsls	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	605a      	str	r2, [r3, #4]
 8006026:	e008      	b.n	800603a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2240      	movs	r2, #64	; 0x40
 800602c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2203      	movs	r2, #3
 8006032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e0b7      	b.n	80061aa <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a5f      	ldr	r2, [pc, #380]	; (80061bc <HAL_DMA_Init+0x654>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d072      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a5d      	ldr	r2, [pc, #372]	; (80061c0 <HAL_DMA_Init+0x658>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d06d      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a5c      	ldr	r2, [pc, #368]	; (80061c4 <HAL_DMA_Init+0x65c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d068      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a5a      	ldr	r2, [pc, #360]	; (80061c8 <HAL_DMA_Init+0x660>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d063      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a59      	ldr	r2, [pc, #356]	; (80061cc <HAL_DMA_Init+0x664>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d05e      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a57      	ldr	r2, [pc, #348]	; (80061d0 <HAL_DMA_Init+0x668>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d059      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a56      	ldr	r2, [pc, #344]	; (80061d4 <HAL_DMA_Init+0x66c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d054      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a54      	ldr	r2, [pc, #336]	; (80061d8 <HAL_DMA_Init+0x670>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d04f      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a53      	ldr	r2, [pc, #332]	; (80061dc <HAL_DMA_Init+0x674>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d04a      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a51      	ldr	r2, [pc, #324]	; (80061e0 <HAL_DMA_Init+0x678>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d045      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a50      	ldr	r2, [pc, #320]	; (80061e4 <HAL_DMA_Init+0x67c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d040      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a4e      	ldr	r2, [pc, #312]	; (80061e8 <HAL_DMA_Init+0x680>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d03b      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a4d      	ldr	r2, [pc, #308]	; (80061ec <HAL_DMA_Init+0x684>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d036      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a4b      	ldr	r2, [pc, #300]	; (80061f0 <HAL_DMA_Init+0x688>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d031      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a4a      	ldr	r2, [pc, #296]	; (80061f4 <HAL_DMA_Init+0x68c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d02c      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a48      	ldr	r2, [pc, #288]	; (80061f8 <HAL_DMA_Init+0x690>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d027      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a47      	ldr	r2, [pc, #284]	; (80061fc <HAL_DMA_Init+0x694>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d022      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a45      	ldr	r2, [pc, #276]	; (8006200 <HAL_DMA_Init+0x698>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d01d      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a44      	ldr	r2, [pc, #272]	; (8006204 <HAL_DMA_Init+0x69c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d018      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a42      	ldr	r2, [pc, #264]	; (8006208 <HAL_DMA_Init+0x6a0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d013      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a41      	ldr	r2, [pc, #260]	; (800620c <HAL_DMA_Init+0x6a4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00e      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a3f      	ldr	r2, [pc, #252]	; (8006210 <HAL_DMA_Init+0x6a8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d009      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a3e      	ldr	r2, [pc, #248]	; (8006214 <HAL_DMA_Init+0x6ac>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d004      	beq.n	800612a <HAL_DMA_Init+0x5c2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a3c      	ldr	r2, [pc, #240]	; (8006218 <HAL_DMA_Init+0x6b0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d101      	bne.n	800612e <HAL_DMA_Init+0x5c6>
 800612a:	2301      	movs	r3, #1
 800612c:	e000      	b.n	8006130 <HAL_DMA_Init+0x5c8>
 800612e:	2300      	movs	r3, #0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d032      	beq.n	800619a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fcdf 	bl	8007af8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	2b80      	cmp	r3, #128	; 0x80
 8006140:	d102      	bne.n	8006148 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800615c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d010      	beq.n	8006188 <HAL_DMA_Init+0x620>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b08      	cmp	r3, #8
 800616c:	d80c      	bhi.n	8006188 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 fd5c 	bl	8007c2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006184:	605a      	str	r2, [r3, #4]
 8006186:	e008      	b.n	800619a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	a7fdabf8 	.word	0xa7fdabf8
 80061b8:	cccccccd 	.word	0xcccccccd
 80061bc:	40020010 	.word	0x40020010
 80061c0:	40020028 	.word	0x40020028
 80061c4:	40020040 	.word	0x40020040
 80061c8:	40020058 	.word	0x40020058
 80061cc:	40020070 	.word	0x40020070
 80061d0:	40020088 	.word	0x40020088
 80061d4:	400200a0 	.word	0x400200a0
 80061d8:	400200b8 	.word	0x400200b8
 80061dc:	40020410 	.word	0x40020410
 80061e0:	40020428 	.word	0x40020428
 80061e4:	40020440 	.word	0x40020440
 80061e8:	40020458 	.word	0x40020458
 80061ec:	40020470 	.word	0x40020470
 80061f0:	40020488 	.word	0x40020488
 80061f4:	400204a0 	.word	0x400204a0
 80061f8:	400204b8 	.word	0x400204b8
 80061fc:	58025408 	.word	0x58025408
 8006200:	5802541c 	.word	0x5802541c
 8006204:	58025430 	.word	0x58025430
 8006208:	58025444 	.word	0x58025444
 800620c:	58025458 	.word	0x58025458
 8006210:	5802546c 	.word	0x5802546c
 8006214:	58025480 	.word	0x58025480
 8006218:	58025494 	.word	0x58025494

0800621c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e226      	b.n	8006686 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_DMA_Start_IT+0x2a>
 8006242:	2302      	movs	r3, #2
 8006244:	e21f      	b.n	8006686 <HAL_DMA_Start_IT+0x46a>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b01      	cmp	r3, #1
 8006258:	f040 820a 	bne.w	8006670 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a68      	ldr	r2, [pc, #416]	; (8006410 <HAL_DMA_Start_IT+0x1f4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d04a      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a66      	ldr	r2, [pc, #408]	; (8006414 <HAL_DMA_Start_IT+0x1f8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d045      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a65      	ldr	r2, [pc, #404]	; (8006418 <HAL_DMA_Start_IT+0x1fc>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d040      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a63      	ldr	r2, [pc, #396]	; (800641c <HAL_DMA_Start_IT+0x200>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d03b      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a62      	ldr	r2, [pc, #392]	; (8006420 <HAL_DMA_Start_IT+0x204>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d036      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a60      	ldr	r2, [pc, #384]	; (8006424 <HAL_DMA_Start_IT+0x208>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d031      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a5f      	ldr	r2, [pc, #380]	; (8006428 <HAL_DMA_Start_IT+0x20c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d02c      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a5d      	ldr	r2, [pc, #372]	; (800642c <HAL_DMA_Start_IT+0x210>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d027      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a5c      	ldr	r2, [pc, #368]	; (8006430 <HAL_DMA_Start_IT+0x214>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d022      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a5a      	ldr	r2, [pc, #360]	; (8006434 <HAL_DMA_Start_IT+0x218>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01d      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a59      	ldr	r2, [pc, #356]	; (8006438 <HAL_DMA_Start_IT+0x21c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d018      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a57      	ldr	r2, [pc, #348]	; (800643c <HAL_DMA_Start_IT+0x220>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d013      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a56      	ldr	r2, [pc, #344]	; (8006440 <HAL_DMA_Start_IT+0x224>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00e      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a54      	ldr	r2, [pc, #336]	; (8006444 <HAL_DMA_Start_IT+0x228>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d009      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a53      	ldr	r2, [pc, #332]	; (8006448 <HAL_DMA_Start_IT+0x22c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d004      	beq.n	800630a <HAL_DMA_Start_IT+0xee>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a51      	ldr	r2, [pc, #324]	; (800644c <HAL_DMA_Start_IT+0x230>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d108      	bne.n	800631c <HAL_DMA_Start_IT+0x100>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0201 	bic.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e007      	b.n	800632c <HAL_DMA_Start_IT+0x110>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f001 f906 	bl	8007544 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a34      	ldr	r2, [pc, #208]	; (8006410 <HAL_DMA_Start_IT+0x1f4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d04a      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a33      	ldr	r2, [pc, #204]	; (8006414 <HAL_DMA_Start_IT+0x1f8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d045      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a31      	ldr	r2, [pc, #196]	; (8006418 <HAL_DMA_Start_IT+0x1fc>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d040      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a30      	ldr	r2, [pc, #192]	; (800641c <HAL_DMA_Start_IT+0x200>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d03b      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a2e      	ldr	r2, [pc, #184]	; (8006420 <HAL_DMA_Start_IT+0x204>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d036      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a2d      	ldr	r2, [pc, #180]	; (8006424 <HAL_DMA_Start_IT+0x208>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d031      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a2b      	ldr	r2, [pc, #172]	; (8006428 <HAL_DMA_Start_IT+0x20c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d02c      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2a      	ldr	r2, [pc, #168]	; (800642c <HAL_DMA_Start_IT+0x210>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d027      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a28      	ldr	r2, [pc, #160]	; (8006430 <HAL_DMA_Start_IT+0x214>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d022      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a27      	ldr	r2, [pc, #156]	; (8006434 <HAL_DMA_Start_IT+0x218>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d01d      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a25      	ldr	r2, [pc, #148]	; (8006438 <HAL_DMA_Start_IT+0x21c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d018      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a24      	ldr	r2, [pc, #144]	; (800643c <HAL_DMA_Start_IT+0x220>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d013      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a22      	ldr	r2, [pc, #136]	; (8006440 <HAL_DMA_Start_IT+0x224>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00e      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a21      	ldr	r2, [pc, #132]	; (8006444 <HAL_DMA_Start_IT+0x228>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d009      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a1f      	ldr	r2, [pc, #124]	; (8006448 <HAL_DMA_Start_IT+0x22c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d004      	beq.n	80063d8 <HAL_DMA_Start_IT+0x1bc>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a1e      	ldr	r2, [pc, #120]	; (800644c <HAL_DMA_Start_IT+0x230>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d101      	bne.n	80063dc <HAL_DMA_Start_IT+0x1c0>
 80063d8:	2301      	movs	r3, #1
 80063da:	e000      	b.n	80063de <HAL_DMA_Start_IT+0x1c2>
 80063dc:	2300      	movs	r3, #0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d036      	beq.n	8006450 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f023 021e 	bic.w	r2, r3, #30
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0216 	orr.w	r2, r2, #22
 80063f4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d03e      	beq.n	800647c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0208 	orr.w	r2, r2, #8
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e035      	b.n	800647c <HAL_DMA_Start_IT+0x260>
 8006410:	40020010 	.word	0x40020010
 8006414:	40020028 	.word	0x40020028
 8006418:	40020040 	.word	0x40020040
 800641c:	40020058 	.word	0x40020058
 8006420:	40020070 	.word	0x40020070
 8006424:	40020088 	.word	0x40020088
 8006428:	400200a0 	.word	0x400200a0
 800642c:	400200b8 	.word	0x400200b8
 8006430:	40020410 	.word	0x40020410
 8006434:	40020428 	.word	0x40020428
 8006438:	40020440 	.word	0x40020440
 800643c:	40020458 	.word	0x40020458
 8006440:	40020470 	.word	0x40020470
 8006444:	40020488 	.word	0x40020488
 8006448:	400204a0 	.word	0x400204a0
 800644c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f023 020e 	bic.w	r2, r3, #14
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 020a 	orr.w	r2, r2, #10
 8006462:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0204 	orr.w	r2, r2, #4
 800647a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a83      	ldr	r2, [pc, #524]	; (8006690 <HAL_DMA_Start_IT+0x474>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d072      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a82      	ldr	r2, [pc, #520]	; (8006694 <HAL_DMA_Start_IT+0x478>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d06d      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a80      	ldr	r2, [pc, #512]	; (8006698 <HAL_DMA_Start_IT+0x47c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d068      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a7f      	ldr	r2, [pc, #508]	; (800669c <HAL_DMA_Start_IT+0x480>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d063      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a7d      	ldr	r2, [pc, #500]	; (80066a0 <HAL_DMA_Start_IT+0x484>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d05e      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a7c      	ldr	r2, [pc, #496]	; (80066a4 <HAL_DMA_Start_IT+0x488>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d059      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a7a      	ldr	r2, [pc, #488]	; (80066a8 <HAL_DMA_Start_IT+0x48c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d054      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a79      	ldr	r2, [pc, #484]	; (80066ac <HAL_DMA_Start_IT+0x490>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d04f      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a77      	ldr	r2, [pc, #476]	; (80066b0 <HAL_DMA_Start_IT+0x494>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d04a      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a76      	ldr	r2, [pc, #472]	; (80066b4 <HAL_DMA_Start_IT+0x498>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d045      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a74      	ldr	r2, [pc, #464]	; (80066b8 <HAL_DMA_Start_IT+0x49c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d040      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a73      	ldr	r2, [pc, #460]	; (80066bc <HAL_DMA_Start_IT+0x4a0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d03b      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a71      	ldr	r2, [pc, #452]	; (80066c0 <HAL_DMA_Start_IT+0x4a4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d036      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a70      	ldr	r2, [pc, #448]	; (80066c4 <HAL_DMA_Start_IT+0x4a8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d031      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a6e      	ldr	r2, [pc, #440]	; (80066c8 <HAL_DMA_Start_IT+0x4ac>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d02c      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a6d      	ldr	r2, [pc, #436]	; (80066cc <HAL_DMA_Start_IT+0x4b0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d027      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a6b      	ldr	r2, [pc, #428]	; (80066d0 <HAL_DMA_Start_IT+0x4b4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d022      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a6a      	ldr	r2, [pc, #424]	; (80066d4 <HAL_DMA_Start_IT+0x4b8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d01d      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a68      	ldr	r2, [pc, #416]	; (80066d8 <HAL_DMA_Start_IT+0x4bc>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d018      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a67      	ldr	r2, [pc, #412]	; (80066dc <HAL_DMA_Start_IT+0x4c0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d013      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a65      	ldr	r2, [pc, #404]	; (80066e0 <HAL_DMA_Start_IT+0x4c4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00e      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a64      	ldr	r2, [pc, #400]	; (80066e4 <HAL_DMA_Start_IT+0x4c8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d009      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a62      	ldr	r2, [pc, #392]	; (80066e8 <HAL_DMA_Start_IT+0x4cc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d004      	beq.n	800656c <HAL_DMA_Start_IT+0x350>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a61      	ldr	r2, [pc, #388]	; (80066ec <HAL_DMA_Start_IT+0x4d0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d101      	bne.n	8006570 <HAL_DMA_Start_IT+0x354>
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <HAL_DMA_Start_IT+0x356>
 8006570:	2300      	movs	r3, #0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d01a      	beq.n	80065ac <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d007      	beq.n	8006594 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800658e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006592:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d007      	beq.n	80065ac <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065aa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a37      	ldr	r2, [pc, #220]	; (8006690 <HAL_DMA_Start_IT+0x474>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d04a      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a36      	ldr	r2, [pc, #216]	; (8006694 <HAL_DMA_Start_IT+0x478>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d045      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a34      	ldr	r2, [pc, #208]	; (8006698 <HAL_DMA_Start_IT+0x47c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d040      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a33      	ldr	r2, [pc, #204]	; (800669c <HAL_DMA_Start_IT+0x480>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d03b      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a31      	ldr	r2, [pc, #196]	; (80066a0 <HAL_DMA_Start_IT+0x484>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d036      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a30      	ldr	r2, [pc, #192]	; (80066a4 <HAL_DMA_Start_IT+0x488>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d031      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a2e      	ldr	r2, [pc, #184]	; (80066a8 <HAL_DMA_Start_IT+0x48c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d02c      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a2d      	ldr	r2, [pc, #180]	; (80066ac <HAL_DMA_Start_IT+0x490>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d027      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a2b      	ldr	r2, [pc, #172]	; (80066b0 <HAL_DMA_Start_IT+0x494>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d022      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a2a      	ldr	r2, [pc, #168]	; (80066b4 <HAL_DMA_Start_IT+0x498>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d01d      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a28      	ldr	r2, [pc, #160]	; (80066b8 <HAL_DMA_Start_IT+0x49c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d018      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a27      	ldr	r2, [pc, #156]	; (80066bc <HAL_DMA_Start_IT+0x4a0>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d013      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a25      	ldr	r2, [pc, #148]	; (80066c0 <HAL_DMA_Start_IT+0x4a4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00e      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a24      	ldr	r2, [pc, #144]	; (80066c4 <HAL_DMA_Start_IT+0x4a8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d009      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a22      	ldr	r2, [pc, #136]	; (80066c8 <HAL_DMA_Start_IT+0x4ac>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d004      	beq.n	800664c <HAL_DMA_Start_IT+0x430>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a21      	ldr	r2, [pc, #132]	; (80066cc <HAL_DMA_Start_IT+0x4b0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d108      	bne.n	800665e <HAL_DMA_Start_IT+0x442>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0201 	orr.w	r2, r2, #1
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	e012      	b.n	8006684 <HAL_DMA_Start_IT+0x468>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f042 0201 	orr.w	r2, r2, #1
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e009      	b.n	8006684 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006676:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006684:	7dfb      	ldrb	r3, [r7, #23]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40020010 	.word	0x40020010
 8006694:	40020028 	.word	0x40020028
 8006698:	40020040 	.word	0x40020040
 800669c:	40020058 	.word	0x40020058
 80066a0:	40020070 	.word	0x40020070
 80066a4:	40020088 	.word	0x40020088
 80066a8:	400200a0 	.word	0x400200a0
 80066ac:	400200b8 	.word	0x400200b8
 80066b0:	40020410 	.word	0x40020410
 80066b4:	40020428 	.word	0x40020428
 80066b8:	40020440 	.word	0x40020440
 80066bc:	40020458 	.word	0x40020458
 80066c0:	40020470 	.word	0x40020470
 80066c4:	40020488 	.word	0x40020488
 80066c8:	400204a0 	.word	0x400204a0
 80066cc:	400204b8 	.word	0x400204b8
 80066d0:	58025408 	.word	0x58025408
 80066d4:	5802541c 	.word	0x5802541c
 80066d8:	58025430 	.word	0x58025430
 80066dc:	58025444 	.word	0x58025444
 80066e0:	58025458 	.word	0x58025458
 80066e4:	5802546c 	.word	0x5802546c
 80066e8:	58025480 	.word	0x58025480
 80066ec:	58025494 	.word	0x58025494

080066f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08a      	sub	sp, #40	; 0x28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80066fc:	4b67      	ldr	r3, [pc, #412]	; (800689c <HAL_DMA_IRQHandler+0x1ac>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a67      	ldr	r2, [pc, #412]	; (80068a0 <HAL_DMA_IRQHandler+0x1b0>)
 8006702:	fba2 2303 	umull	r2, r3, r2, r3
 8006706:	0a9b      	lsrs	r3, r3, #10
 8006708:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006714:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a5f      	ldr	r2, [pc, #380]	; (80068a4 <HAL_DMA_IRQHandler+0x1b4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d04a      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a5d      	ldr	r2, [pc, #372]	; (80068a8 <HAL_DMA_IRQHandler+0x1b8>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d045      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a5c      	ldr	r2, [pc, #368]	; (80068ac <HAL_DMA_IRQHandler+0x1bc>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d040      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a5a      	ldr	r2, [pc, #360]	; (80068b0 <HAL_DMA_IRQHandler+0x1c0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d03b      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a59      	ldr	r2, [pc, #356]	; (80068b4 <HAL_DMA_IRQHandler+0x1c4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d036      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a57      	ldr	r2, [pc, #348]	; (80068b8 <HAL_DMA_IRQHandler+0x1c8>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d031      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a56      	ldr	r2, [pc, #344]	; (80068bc <HAL_DMA_IRQHandler+0x1cc>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d02c      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a54      	ldr	r2, [pc, #336]	; (80068c0 <HAL_DMA_IRQHandler+0x1d0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d027      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a53      	ldr	r2, [pc, #332]	; (80068c4 <HAL_DMA_IRQHandler+0x1d4>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d022      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a51      	ldr	r2, [pc, #324]	; (80068c8 <HAL_DMA_IRQHandler+0x1d8>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d01d      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a50      	ldr	r2, [pc, #320]	; (80068cc <HAL_DMA_IRQHandler+0x1dc>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d018      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a4e      	ldr	r2, [pc, #312]	; (80068d0 <HAL_DMA_IRQHandler+0x1e0>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d013      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a4d      	ldr	r2, [pc, #308]	; (80068d4 <HAL_DMA_IRQHandler+0x1e4>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00e      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a4b      	ldr	r2, [pc, #300]	; (80068d8 <HAL_DMA_IRQHandler+0x1e8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d009      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a4a      	ldr	r2, [pc, #296]	; (80068dc <HAL_DMA_IRQHandler+0x1ec>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d004      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xd2>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a48      	ldr	r2, [pc, #288]	; (80068e0 <HAL_DMA_IRQHandler+0x1f0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d101      	bne.n	80067c6 <HAL_DMA_IRQHandler+0xd6>
 80067c2:	2301      	movs	r3, #1
 80067c4:	e000      	b.n	80067c8 <HAL_DMA_IRQHandler+0xd8>
 80067c6:	2300      	movs	r3, #0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 842b 	beq.w	8007024 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	2208      	movs	r2, #8
 80067d8:	409a      	lsls	r2, r3
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	4013      	ands	r3, r2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80a2 	beq.w	8006928 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a2e      	ldr	r2, [pc, #184]	; (80068a4 <HAL_DMA_IRQHandler+0x1b4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d04a      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a2d      	ldr	r2, [pc, #180]	; (80068a8 <HAL_DMA_IRQHandler+0x1b8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d045      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a2b      	ldr	r2, [pc, #172]	; (80068ac <HAL_DMA_IRQHandler+0x1bc>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d040      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a2a      	ldr	r2, [pc, #168]	; (80068b0 <HAL_DMA_IRQHandler+0x1c0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d03b      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a28      	ldr	r2, [pc, #160]	; (80068b4 <HAL_DMA_IRQHandler+0x1c4>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d036      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a27      	ldr	r2, [pc, #156]	; (80068b8 <HAL_DMA_IRQHandler+0x1c8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d031      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a25      	ldr	r2, [pc, #148]	; (80068bc <HAL_DMA_IRQHandler+0x1cc>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d02c      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a24      	ldr	r2, [pc, #144]	; (80068c0 <HAL_DMA_IRQHandler+0x1d0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d027      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a22      	ldr	r2, [pc, #136]	; (80068c4 <HAL_DMA_IRQHandler+0x1d4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d022      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a21      	ldr	r2, [pc, #132]	; (80068c8 <HAL_DMA_IRQHandler+0x1d8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d01d      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <HAL_DMA_IRQHandler+0x1dc>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d018      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1e      	ldr	r2, [pc, #120]	; (80068d0 <HAL_DMA_IRQHandler+0x1e0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d013      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <HAL_DMA_IRQHandler+0x1e4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00e      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a1b      	ldr	r2, [pc, #108]	; (80068d8 <HAL_DMA_IRQHandler+0x1e8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d009      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a19      	ldr	r2, [pc, #100]	; (80068dc <HAL_DMA_IRQHandler+0x1ec>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_DMA_IRQHandler+0x194>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a18      	ldr	r2, [pc, #96]	; (80068e0 <HAL_DMA_IRQHandler+0x1f0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d12f      	bne.n	80068e4 <HAL_DMA_IRQHandler+0x1f4>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0304 	and.w	r3, r3, #4
 800688e:	2b00      	cmp	r3, #0
 8006890:	bf14      	ite	ne
 8006892:	2301      	movne	r3, #1
 8006894:	2300      	moveq	r3, #0
 8006896:	b2db      	uxtb	r3, r3
 8006898:	e02e      	b.n	80068f8 <HAL_DMA_IRQHandler+0x208>
 800689a:	bf00      	nop
 800689c:	20000000 	.word	0x20000000
 80068a0:	1b4e81b5 	.word	0x1b4e81b5
 80068a4:	40020010 	.word	0x40020010
 80068a8:	40020028 	.word	0x40020028
 80068ac:	40020040 	.word	0x40020040
 80068b0:	40020058 	.word	0x40020058
 80068b4:	40020070 	.word	0x40020070
 80068b8:	40020088 	.word	0x40020088
 80068bc:	400200a0 	.word	0x400200a0
 80068c0:	400200b8 	.word	0x400200b8
 80068c4:	40020410 	.word	0x40020410
 80068c8:	40020428 	.word	0x40020428
 80068cc:	40020440 	.word	0x40020440
 80068d0:	40020458 	.word	0x40020458
 80068d4:	40020470 	.word	0x40020470
 80068d8:	40020488 	.word	0x40020488
 80068dc:	400204a0 	.word	0x400204a0
 80068e0:	400204b8 	.word	0x400204b8
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bf14      	ite	ne
 80068f2:	2301      	movne	r3, #1
 80068f4:	2300      	moveq	r3, #0
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d015      	beq.n	8006928 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0204 	bic.w	r2, r2, #4
 800690a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006910:	f003 031f 	and.w	r3, r3, #31
 8006914:	2208      	movs	r2, #8
 8006916:	409a      	lsls	r2, r3
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006920:	f043 0201 	orr.w	r2, r3, #1
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800692c:	f003 031f 	and.w	r3, r3, #31
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	fa22 f303 	lsr.w	r3, r2, r3
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d06e      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a69      	ldr	r2, [pc, #420]	; (8006ae8 <HAL_DMA_IRQHandler+0x3f8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d04a      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a67      	ldr	r2, [pc, #412]	; (8006aec <HAL_DMA_IRQHandler+0x3fc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d045      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a66      	ldr	r2, [pc, #408]	; (8006af0 <HAL_DMA_IRQHandler+0x400>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d040      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a64      	ldr	r2, [pc, #400]	; (8006af4 <HAL_DMA_IRQHandler+0x404>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d03b      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a63      	ldr	r2, [pc, #396]	; (8006af8 <HAL_DMA_IRQHandler+0x408>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d036      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a61      	ldr	r2, [pc, #388]	; (8006afc <HAL_DMA_IRQHandler+0x40c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d031      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a60      	ldr	r2, [pc, #384]	; (8006b00 <HAL_DMA_IRQHandler+0x410>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d02c      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a5e      	ldr	r2, [pc, #376]	; (8006b04 <HAL_DMA_IRQHandler+0x414>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d027      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a5d      	ldr	r2, [pc, #372]	; (8006b08 <HAL_DMA_IRQHandler+0x418>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d022      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a5b      	ldr	r2, [pc, #364]	; (8006b0c <HAL_DMA_IRQHandler+0x41c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01d      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a5a      	ldr	r2, [pc, #360]	; (8006b10 <HAL_DMA_IRQHandler+0x420>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d018      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a58      	ldr	r2, [pc, #352]	; (8006b14 <HAL_DMA_IRQHandler+0x424>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a57      	ldr	r2, [pc, #348]	; (8006b18 <HAL_DMA_IRQHandler+0x428>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00e      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a55      	ldr	r2, [pc, #340]	; (8006b1c <HAL_DMA_IRQHandler+0x42c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d009      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a54      	ldr	r2, [pc, #336]	; (8006b20 <HAL_DMA_IRQHandler+0x430>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d004      	beq.n	80069de <HAL_DMA_IRQHandler+0x2ee>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a52      	ldr	r2, [pc, #328]	; (8006b24 <HAL_DMA_IRQHandler+0x434>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d10a      	bne.n	80069f4 <HAL_DMA_IRQHandler+0x304>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	bf14      	ite	ne
 80069ec:	2301      	movne	r3, #1
 80069ee:	2300      	moveq	r3, #0
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	e003      	b.n	80069fc <HAL_DMA_IRQHandler+0x30c>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2300      	movs	r3, #0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00d      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a04:	f003 031f 	and.w	r3, r3, #31
 8006a08:	2201      	movs	r2, #1
 8006a0a:	409a      	lsls	r2, r3
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a14:	f043 0202 	orr.w	r2, r3, #2
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a20:	f003 031f 	and.w	r3, r3, #31
 8006a24:	2204      	movs	r2, #4
 8006a26:	409a      	lsls	r2, r3
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 808f 	beq.w	8006b50 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a2c      	ldr	r2, [pc, #176]	; (8006ae8 <HAL_DMA_IRQHandler+0x3f8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d04a      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a2a      	ldr	r2, [pc, #168]	; (8006aec <HAL_DMA_IRQHandler+0x3fc>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d045      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a29      	ldr	r2, [pc, #164]	; (8006af0 <HAL_DMA_IRQHandler+0x400>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d040      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a27      	ldr	r2, [pc, #156]	; (8006af4 <HAL_DMA_IRQHandler+0x404>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d03b      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a26      	ldr	r2, [pc, #152]	; (8006af8 <HAL_DMA_IRQHandler+0x408>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d036      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a24      	ldr	r2, [pc, #144]	; (8006afc <HAL_DMA_IRQHandler+0x40c>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d031      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a23      	ldr	r2, [pc, #140]	; (8006b00 <HAL_DMA_IRQHandler+0x410>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d02c      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a21      	ldr	r2, [pc, #132]	; (8006b04 <HAL_DMA_IRQHandler+0x414>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d027      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a20      	ldr	r2, [pc, #128]	; (8006b08 <HAL_DMA_IRQHandler+0x418>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d022      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1e      	ldr	r2, [pc, #120]	; (8006b0c <HAL_DMA_IRQHandler+0x41c>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d01d      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1d      	ldr	r2, [pc, #116]	; (8006b10 <HAL_DMA_IRQHandler+0x420>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d018      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <HAL_DMA_IRQHandler+0x424>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d013      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1a      	ldr	r2, [pc, #104]	; (8006b18 <HAL_DMA_IRQHandler+0x428>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00e      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a18      	ldr	r2, [pc, #96]	; (8006b1c <HAL_DMA_IRQHandler+0x42c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d009      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a17      	ldr	r2, [pc, #92]	; (8006b20 <HAL_DMA_IRQHandler+0x430>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d004      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x3e2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a15      	ldr	r2, [pc, #84]	; (8006b24 <HAL_DMA_IRQHandler+0x434>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d12a      	bne.n	8006b28 <HAL_DMA_IRQHandler+0x438>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	bf14      	ite	ne
 8006ae0:	2301      	movne	r3, #1
 8006ae2:	2300      	moveq	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	e023      	b.n	8006b30 <HAL_DMA_IRQHandler+0x440>
 8006ae8:	40020010 	.word	0x40020010
 8006aec:	40020028 	.word	0x40020028
 8006af0:	40020040 	.word	0x40020040
 8006af4:	40020058 	.word	0x40020058
 8006af8:	40020070 	.word	0x40020070
 8006afc:	40020088 	.word	0x40020088
 8006b00:	400200a0 	.word	0x400200a0
 8006b04:	400200b8 	.word	0x400200b8
 8006b08:	40020410 	.word	0x40020410
 8006b0c:	40020428 	.word	0x40020428
 8006b10:	40020440 	.word	0x40020440
 8006b14:	40020458 	.word	0x40020458
 8006b18:	40020470 	.word	0x40020470
 8006b1c:	40020488 	.word	0x40020488
 8006b20:	400204a0 	.word	0x400204a0
 8006b24:	400204b8 	.word	0x400204b8
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00d      	beq.n	8006b50 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b38:	f003 031f 	and.w	r3, r3, #31
 8006b3c:	2204      	movs	r2, #4
 8006b3e:	409a      	lsls	r2, r3
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b48:	f043 0204 	orr.w	r2, r3, #4
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b54:	f003 031f 	and.w	r3, r3, #31
 8006b58:	2210      	movs	r2, #16
 8006b5a:	409a      	lsls	r2, r3
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 80a6 	beq.w	8006cb2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a85      	ldr	r2, [pc, #532]	; (8006d80 <HAL_DMA_IRQHandler+0x690>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d04a      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a83      	ldr	r2, [pc, #524]	; (8006d84 <HAL_DMA_IRQHandler+0x694>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d045      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a82      	ldr	r2, [pc, #520]	; (8006d88 <HAL_DMA_IRQHandler+0x698>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d040      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a80      	ldr	r2, [pc, #512]	; (8006d8c <HAL_DMA_IRQHandler+0x69c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d03b      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a7f      	ldr	r2, [pc, #508]	; (8006d90 <HAL_DMA_IRQHandler+0x6a0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d036      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a7d      	ldr	r2, [pc, #500]	; (8006d94 <HAL_DMA_IRQHandler+0x6a4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d031      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a7c      	ldr	r2, [pc, #496]	; (8006d98 <HAL_DMA_IRQHandler+0x6a8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d02c      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a7a      	ldr	r2, [pc, #488]	; (8006d9c <HAL_DMA_IRQHandler+0x6ac>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d027      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a79      	ldr	r2, [pc, #484]	; (8006da0 <HAL_DMA_IRQHandler+0x6b0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d022      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a77      	ldr	r2, [pc, #476]	; (8006da4 <HAL_DMA_IRQHandler+0x6b4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d01d      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a76      	ldr	r2, [pc, #472]	; (8006da8 <HAL_DMA_IRQHandler+0x6b8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d018      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a74      	ldr	r2, [pc, #464]	; (8006dac <HAL_DMA_IRQHandler+0x6bc>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a73      	ldr	r2, [pc, #460]	; (8006db0 <HAL_DMA_IRQHandler+0x6c0>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00e      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a71      	ldr	r2, [pc, #452]	; (8006db4 <HAL_DMA_IRQHandler+0x6c4>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a70      	ldr	r2, [pc, #448]	; (8006db8 <HAL_DMA_IRQHandler+0x6c8>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x516>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a6e      	ldr	r2, [pc, #440]	; (8006dbc <HAL_DMA_IRQHandler+0x6cc>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d10a      	bne.n	8006c1c <HAL_DMA_IRQHandler+0x52c>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	bf14      	ite	ne
 8006c14:	2301      	movne	r3, #1
 8006c16:	2300      	moveq	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	e009      	b.n	8006c30 <HAL_DMA_IRQHandler+0x540>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	bf14      	ite	ne
 8006c2a:	2301      	movne	r3, #1
 8006c2c:	2300      	moveq	r3, #0
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d03e      	beq.n	8006cb2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c38:	f003 031f 	and.w	r3, r3, #31
 8006c3c:	2210      	movs	r2, #16
 8006c3e:	409a      	lsls	r2, r3
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d018      	beq.n	8006c84 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d108      	bne.n	8006c72 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d024      	beq.n	8006cb2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	4798      	blx	r3
 8006c70:	e01f      	b.n	8006cb2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d01b      	beq.n	8006cb2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
 8006c82:	e016      	b.n	8006cb2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d107      	bne.n	8006ca2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0208 	bic.w	r2, r2, #8
 8006ca0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	2220      	movs	r2, #32
 8006cbc:	409a      	lsls	r2, r3
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 8110 	beq.w	8006ee8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a2c      	ldr	r2, [pc, #176]	; (8006d80 <HAL_DMA_IRQHandler+0x690>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d04a      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a2b      	ldr	r2, [pc, #172]	; (8006d84 <HAL_DMA_IRQHandler+0x694>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d045      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a29      	ldr	r2, [pc, #164]	; (8006d88 <HAL_DMA_IRQHandler+0x698>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d040      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a28      	ldr	r2, [pc, #160]	; (8006d8c <HAL_DMA_IRQHandler+0x69c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d03b      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a26      	ldr	r2, [pc, #152]	; (8006d90 <HAL_DMA_IRQHandler+0x6a0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d036      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a25      	ldr	r2, [pc, #148]	; (8006d94 <HAL_DMA_IRQHandler+0x6a4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d031      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a23      	ldr	r2, [pc, #140]	; (8006d98 <HAL_DMA_IRQHandler+0x6a8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d02c      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a22      	ldr	r2, [pc, #136]	; (8006d9c <HAL_DMA_IRQHandler+0x6ac>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d027      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a20      	ldr	r2, [pc, #128]	; (8006da0 <HAL_DMA_IRQHandler+0x6b0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d022      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1f      	ldr	r2, [pc, #124]	; (8006da4 <HAL_DMA_IRQHandler+0x6b4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d01d      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a1d      	ldr	r2, [pc, #116]	; (8006da8 <HAL_DMA_IRQHandler+0x6b8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d018      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a1c      	ldr	r2, [pc, #112]	; (8006dac <HAL_DMA_IRQHandler+0x6bc>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d013      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a1a      	ldr	r2, [pc, #104]	; (8006db0 <HAL_DMA_IRQHandler+0x6c0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00e      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a19      	ldr	r2, [pc, #100]	; (8006db4 <HAL_DMA_IRQHandler+0x6c4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d009      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <HAL_DMA_IRQHandler+0x6c8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d004      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x678>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a16      	ldr	r2, [pc, #88]	; (8006dbc <HAL_DMA_IRQHandler+0x6cc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d12b      	bne.n	8006dc0 <HAL_DMA_IRQHandler+0x6d0>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0310 	and.w	r3, r3, #16
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	bf14      	ite	ne
 8006d76:	2301      	movne	r3, #1
 8006d78:	2300      	moveq	r3, #0
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	e02a      	b.n	8006dd4 <HAL_DMA_IRQHandler+0x6e4>
 8006d7e:	bf00      	nop
 8006d80:	40020010 	.word	0x40020010
 8006d84:	40020028 	.word	0x40020028
 8006d88:	40020040 	.word	0x40020040
 8006d8c:	40020058 	.word	0x40020058
 8006d90:	40020070 	.word	0x40020070
 8006d94:	40020088 	.word	0x40020088
 8006d98:	400200a0 	.word	0x400200a0
 8006d9c:	400200b8 	.word	0x400200b8
 8006da0:	40020410 	.word	0x40020410
 8006da4:	40020428 	.word	0x40020428
 8006da8:	40020440 	.word	0x40020440
 8006dac:	40020458 	.word	0x40020458
 8006db0:	40020470 	.word	0x40020470
 8006db4:	40020488 	.word	0x40020488
 8006db8:	400204a0 	.word	0x400204a0
 8006dbc:	400204b8 	.word	0x400204b8
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	bf14      	ite	ne
 8006dce:	2301      	movne	r3, #1
 8006dd0:	2300      	moveq	r3, #0
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 8087 	beq.w	8006ee8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dde:	f003 031f 	and.w	r3, r3, #31
 8006de2:	2220      	movs	r2, #32
 8006de4:	409a      	lsls	r2, r3
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d139      	bne.n	8006e6a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0216 	bic.w	r2, r2, #22
 8006e04:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	695a      	ldr	r2, [r3, #20]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e14:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d103      	bne.n	8006e26 <HAL_DMA_IRQHandler+0x736>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d007      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0208 	bic.w	r2, r2, #8
 8006e34:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	223f      	movs	r2, #63	; 0x3f
 8006e40:	409a      	lsls	r2, r3
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 834a 	beq.w	80074f4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	4798      	blx	r3
          }
          return;
 8006e68:	e344      	b.n	80074f4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d018      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d108      	bne.n	8006e98 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d02c      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
 8006e96:	e027      	b.n	8006ee8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d023      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
 8006ea8:	e01e      	b.n	8006ee8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10f      	bne.n	8006ed8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0210 	bic.w	r2, r2, #16
 8006ec6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 8306 	beq.w	80074fe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 8088 	beq.w	8007010 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2204      	movs	r2, #4
 8006f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a7a      	ldr	r2, [pc, #488]	; (80070f8 <HAL_DMA_IRQHandler+0xa08>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d04a      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a79      	ldr	r2, [pc, #484]	; (80070fc <HAL_DMA_IRQHandler+0xa0c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d045      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a77      	ldr	r2, [pc, #476]	; (8007100 <HAL_DMA_IRQHandler+0xa10>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d040      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a76      	ldr	r2, [pc, #472]	; (8007104 <HAL_DMA_IRQHandler+0xa14>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d03b      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a74      	ldr	r2, [pc, #464]	; (8007108 <HAL_DMA_IRQHandler+0xa18>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d036      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a73      	ldr	r2, [pc, #460]	; (800710c <HAL_DMA_IRQHandler+0xa1c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d031      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a71      	ldr	r2, [pc, #452]	; (8007110 <HAL_DMA_IRQHandler+0xa20>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d02c      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a70      	ldr	r2, [pc, #448]	; (8007114 <HAL_DMA_IRQHandler+0xa24>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d027      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a6e      	ldr	r2, [pc, #440]	; (8007118 <HAL_DMA_IRQHandler+0xa28>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d022      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a6d      	ldr	r2, [pc, #436]	; (800711c <HAL_DMA_IRQHandler+0xa2c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d01d      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a6b      	ldr	r2, [pc, #428]	; (8007120 <HAL_DMA_IRQHandler+0xa30>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d018      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a6a      	ldr	r2, [pc, #424]	; (8007124 <HAL_DMA_IRQHandler+0xa34>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d013      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a68      	ldr	r2, [pc, #416]	; (8007128 <HAL_DMA_IRQHandler+0xa38>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00e      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a67      	ldr	r2, [pc, #412]	; (800712c <HAL_DMA_IRQHandler+0xa3c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d009      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a65      	ldr	r2, [pc, #404]	; (8007130 <HAL_DMA_IRQHandler+0xa40>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x8b8>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a64      	ldr	r2, [pc, #400]	; (8007134 <HAL_DMA_IRQHandler+0xa44>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d108      	bne.n	8006fba <HAL_DMA_IRQHandler+0x8ca>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0201 	bic.w	r2, r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	e007      	b.n	8006fca <HAL_DMA_IRQHandler+0x8da>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0201 	bic.w	r2, r2, #1
 8006fc8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d307      	bcc.n	8006fe6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1f2      	bne.n	8006fca <HAL_DMA_IRQHandler+0x8da>
 8006fe4:	e000      	b.n	8006fe8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006fe6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2203      	movs	r2, #3
 8006ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006ffe:	e003      	b.n	8007008 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 8272 	beq.w	80074fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
 8007022:	e26c      	b.n	80074fe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a43      	ldr	r2, [pc, #268]	; (8007138 <HAL_DMA_IRQHandler+0xa48>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d022      	beq.n	8007074 <HAL_DMA_IRQHandler+0x984>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a42      	ldr	r2, [pc, #264]	; (800713c <HAL_DMA_IRQHandler+0xa4c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d01d      	beq.n	8007074 <HAL_DMA_IRQHandler+0x984>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a40      	ldr	r2, [pc, #256]	; (8007140 <HAL_DMA_IRQHandler+0xa50>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d018      	beq.n	8007074 <HAL_DMA_IRQHandler+0x984>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a3f      	ldr	r2, [pc, #252]	; (8007144 <HAL_DMA_IRQHandler+0xa54>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d013      	beq.n	8007074 <HAL_DMA_IRQHandler+0x984>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a3d      	ldr	r2, [pc, #244]	; (8007148 <HAL_DMA_IRQHandler+0xa58>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d00e      	beq.n	8007074 <HAL_DMA_IRQHandler+0x984>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a3c      	ldr	r2, [pc, #240]	; (800714c <HAL_DMA_IRQHandler+0xa5c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d009      	beq.n	8007074 <HAL_DMA_IRQHandler+0x984>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a3a      	ldr	r2, [pc, #232]	; (8007150 <HAL_DMA_IRQHandler+0xa60>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d004      	beq.n	8007074 <HAL_DMA_IRQHandler+0x984>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a39      	ldr	r2, [pc, #228]	; (8007154 <HAL_DMA_IRQHandler+0xa64>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d101      	bne.n	8007078 <HAL_DMA_IRQHandler+0x988>
 8007074:	2301      	movs	r3, #1
 8007076:	e000      	b.n	800707a <HAL_DMA_IRQHandler+0x98a>
 8007078:	2300      	movs	r3, #0
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 823f 	beq.w	80074fe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708c:	f003 031f 	and.w	r3, r3, #31
 8007090:	2204      	movs	r2, #4
 8007092:	409a      	lsls	r2, r3
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	4013      	ands	r3, r2
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 80cd 	beq.w	8007238 <HAL_DMA_IRQHandler+0xb48>
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 80c7 	beq.w	8007238 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	2204      	movs	r2, #4
 80070b4:	409a      	lsls	r2, r3
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d049      	beq.n	8007158 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d109      	bne.n	80070e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 8210 	beq.w	80074f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070e0:	e20a      	b.n	80074f8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 8206 	beq.w	80074f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070f4:	e200      	b.n	80074f8 <HAL_DMA_IRQHandler+0xe08>
 80070f6:	bf00      	nop
 80070f8:	40020010 	.word	0x40020010
 80070fc:	40020028 	.word	0x40020028
 8007100:	40020040 	.word	0x40020040
 8007104:	40020058 	.word	0x40020058
 8007108:	40020070 	.word	0x40020070
 800710c:	40020088 	.word	0x40020088
 8007110:	400200a0 	.word	0x400200a0
 8007114:	400200b8 	.word	0x400200b8
 8007118:	40020410 	.word	0x40020410
 800711c:	40020428 	.word	0x40020428
 8007120:	40020440 	.word	0x40020440
 8007124:	40020458 	.word	0x40020458
 8007128:	40020470 	.word	0x40020470
 800712c:	40020488 	.word	0x40020488
 8007130:	400204a0 	.word	0x400204a0
 8007134:	400204b8 	.word	0x400204b8
 8007138:	58025408 	.word	0x58025408
 800713c:	5802541c 	.word	0x5802541c
 8007140:	58025430 	.word	0x58025430
 8007144:	58025444 	.word	0x58025444
 8007148:	58025458 	.word	0x58025458
 800714c:	5802546c 	.word	0x5802546c
 8007150:	58025480 	.word	0x58025480
 8007154:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b00      	cmp	r3, #0
 8007160:	d160      	bne.n	8007224 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a8c      	ldr	r2, [pc, #560]	; (8007398 <HAL_DMA_IRQHandler+0xca8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d04a      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a8a      	ldr	r2, [pc, #552]	; (800739c <HAL_DMA_IRQHandler+0xcac>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d045      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a89      	ldr	r2, [pc, #548]	; (80073a0 <HAL_DMA_IRQHandler+0xcb0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d040      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a87      	ldr	r2, [pc, #540]	; (80073a4 <HAL_DMA_IRQHandler+0xcb4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d03b      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a86      	ldr	r2, [pc, #536]	; (80073a8 <HAL_DMA_IRQHandler+0xcb8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d036      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a84      	ldr	r2, [pc, #528]	; (80073ac <HAL_DMA_IRQHandler+0xcbc>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d031      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a83      	ldr	r2, [pc, #524]	; (80073b0 <HAL_DMA_IRQHandler+0xcc0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d02c      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a81      	ldr	r2, [pc, #516]	; (80073b4 <HAL_DMA_IRQHandler+0xcc4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d027      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a80      	ldr	r2, [pc, #512]	; (80073b8 <HAL_DMA_IRQHandler+0xcc8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d022      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a7e      	ldr	r2, [pc, #504]	; (80073bc <HAL_DMA_IRQHandler+0xccc>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d01d      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a7d      	ldr	r2, [pc, #500]	; (80073c0 <HAL_DMA_IRQHandler+0xcd0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d018      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a7b      	ldr	r2, [pc, #492]	; (80073c4 <HAL_DMA_IRQHandler+0xcd4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a7a      	ldr	r2, [pc, #488]	; (80073c8 <HAL_DMA_IRQHandler+0xcd8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00e      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a78      	ldr	r2, [pc, #480]	; (80073cc <HAL_DMA_IRQHandler+0xcdc>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d009      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a77      	ldr	r2, [pc, #476]	; (80073d0 <HAL_DMA_IRQHandler+0xce0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d004      	beq.n	8007202 <HAL_DMA_IRQHandler+0xb12>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a75      	ldr	r2, [pc, #468]	; (80073d4 <HAL_DMA_IRQHandler+0xce4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d108      	bne.n	8007214 <HAL_DMA_IRQHandler+0xb24>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0208 	bic.w	r2, r2, #8
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	e007      	b.n	8007224 <HAL_DMA_IRQHandler+0xb34>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0204 	bic.w	r2, r2, #4
 8007222:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 8165 	beq.w	80074f8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007236:	e15f      	b.n	80074f8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800723c:	f003 031f 	and.w	r3, r3, #31
 8007240:	2202      	movs	r2, #2
 8007242:	409a      	lsls	r2, r3
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	4013      	ands	r3, r2
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 80c5 	beq.w	80073d8 <HAL_DMA_IRQHandler+0xce8>
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80bf 	beq.w	80073d8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800725e:	f003 031f 	and.w	r3, r3, #31
 8007262:	2202      	movs	r2, #2
 8007264:	409a      	lsls	r2, r3
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d018      	beq.n	80072a6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d109      	bne.n	8007292 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 813a 	beq.w	80074fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007290:	e134      	b.n	80074fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 8130 	beq.w	80074fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072a4:	e12a      	b.n	80074fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d168      	bne.n	8007382 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a38      	ldr	r2, [pc, #224]	; (8007398 <HAL_DMA_IRQHandler+0xca8>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d04a      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a37      	ldr	r2, [pc, #220]	; (800739c <HAL_DMA_IRQHandler+0xcac>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d045      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a35      	ldr	r2, [pc, #212]	; (80073a0 <HAL_DMA_IRQHandler+0xcb0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d040      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a34      	ldr	r2, [pc, #208]	; (80073a4 <HAL_DMA_IRQHandler+0xcb4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d03b      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a32      	ldr	r2, [pc, #200]	; (80073a8 <HAL_DMA_IRQHandler+0xcb8>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d036      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a31      	ldr	r2, [pc, #196]	; (80073ac <HAL_DMA_IRQHandler+0xcbc>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d031      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a2f      	ldr	r2, [pc, #188]	; (80073b0 <HAL_DMA_IRQHandler+0xcc0>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d02c      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a2e      	ldr	r2, [pc, #184]	; (80073b4 <HAL_DMA_IRQHandler+0xcc4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d027      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a2c      	ldr	r2, [pc, #176]	; (80073b8 <HAL_DMA_IRQHandler+0xcc8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d022      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a2b      	ldr	r2, [pc, #172]	; (80073bc <HAL_DMA_IRQHandler+0xccc>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d01d      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a29      	ldr	r2, [pc, #164]	; (80073c0 <HAL_DMA_IRQHandler+0xcd0>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d018      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a28      	ldr	r2, [pc, #160]	; (80073c4 <HAL_DMA_IRQHandler+0xcd4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d013      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a26      	ldr	r2, [pc, #152]	; (80073c8 <HAL_DMA_IRQHandler+0xcd8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00e      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a25      	ldr	r2, [pc, #148]	; (80073cc <HAL_DMA_IRQHandler+0xcdc>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d009      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a23      	ldr	r2, [pc, #140]	; (80073d0 <HAL_DMA_IRQHandler+0xce0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d004      	beq.n	8007350 <HAL_DMA_IRQHandler+0xc60>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a22      	ldr	r2, [pc, #136]	; (80073d4 <HAL_DMA_IRQHandler+0xce4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d108      	bne.n	8007362 <HAL_DMA_IRQHandler+0xc72>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0214 	bic.w	r2, r2, #20
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	e007      	b.n	8007372 <HAL_DMA_IRQHandler+0xc82>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 020a 	bic.w	r2, r2, #10
 8007370:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 80b8 	beq.w	80074fc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007394:	e0b2      	b.n	80074fc <HAL_DMA_IRQHandler+0xe0c>
 8007396:	bf00      	nop
 8007398:	40020010 	.word	0x40020010
 800739c:	40020028 	.word	0x40020028
 80073a0:	40020040 	.word	0x40020040
 80073a4:	40020058 	.word	0x40020058
 80073a8:	40020070 	.word	0x40020070
 80073ac:	40020088 	.word	0x40020088
 80073b0:	400200a0 	.word	0x400200a0
 80073b4:	400200b8 	.word	0x400200b8
 80073b8:	40020410 	.word	0x40020410
 80073bc:	40020428 	.word	0x40020428
 80073c0:	40020440 	.word	0x40020440
 80073c4:	40020458 	.word	0x40020458
 80073c8:	40020470 	.word	0x40020470
 80073cc:	40020488 	.word	0x40020488
 80073d0:	400204a0 	.word	0x400204a0
 80073d4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	2208      	movs	r2, #8
 80073e2:	409a      	lsls	r2, r3
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 8088 	beq.w	80074fe <HAL_DMA_IRQHandler+0xe0e>
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8082 	beq.w	80074fe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a41      	ldr	r2, [pc, #260]	; (8007504 <HAL_DMA_IRQHandler+0xe14>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d04a      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a3f      	ldr	r2, [pc, #252]	; (8007508 <HAL_DMA_IRQHandler+0xe18>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d045      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a3e      	ldr	r2, [pc, #248]	; (800750c <HAL_DMA_IRQHandler+0xe1c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d040      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a3c      	ldr	r2, [pc, #240]	; (8007510 <HAL_DMA_IRQHandler+0xe20>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d03b      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a3b      	ldr	r2, [pc, #236]	; (8007514 <HAL_DMA_IRQHandler+0xe24>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d036      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a39      	ldr	r2, [pc, #228]	; (8007518 <HAL_DMA_IRQHandler+0xe28>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d031      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a38      	ldr	r2, [pc, #224]	; (800751c <HAL_DMA_IRQHandler+0xe2c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d02c      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a36      	ldr	r2, [pc, #216]	; (8007520 <HAL_DMA_IRQHandler+0xe30>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d027      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a35      	ldr	r2, [pc, #212]	; (8007524 <HAL_DMA_IRQHandler+0xe34>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d022      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a33      	ldr	r2, [pc, #204]	; (8007528 <HAL_DMA_IRQHandler+0xe38>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d01d      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a32      	ldr	r2, [pc, #200]	; (800752c <HAL_DMA_IRQHandler+0xe3c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d018      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a30      	ldr	r2, [pc, #192]	; (8007530 <HAL_DMA_IRQHandler+0xe40>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d013      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a2f      	ldr	r2, [pc, #188]	; (8007534 <HAL_DMA_IRQHandler+0xe44>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00e      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a2d      	ldr	r2, [pc, #180]	; (8007538 <HAL_DMA_IRQHandler+0xe48>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d009      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a2c      	ldr	r2, [pc, #176]	; (800753c <HAL_DMA_IRQHandler+0xe4c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d004      	beq.n	800749a <HAL_DMA_IRQHandler+0xdaa>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a2a      	ldr	r2, [pc, #168]	; (8007540 <HAL_DMA_IRQHandler+0xe50>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d108      	bne.n	80074ac <HAL_DMA_IRQHandler+0xdbc>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 021c 	bic.w	r2, r2, #28
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	e007      	b.n	80074bc <HAL_DMA_IRQHandler+0xdcc>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 020e 	bic.w	r2, r2, #14
 80074ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c0:	f003 031f 	and.w	r3, r3, #31
 80074c4:	2201      	movs	r2, #1
 80074c6:	409a      	lsls	r2, r3
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d009      	beq.n	80074fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	4798      	blx	r3
 80074f2:	e004      	b.n	80074fe <HAL_DMA_IRQHandler+0xe0e>
          return;
 80074f4:	bf00      	nop
 80074f6:	e002      	b.n	80074fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074f8:	bf00      	nop
 80074fa:	e000      	b.n	80074fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80074fe:	3728      	adds	r7, #40	; 0x28
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	40020010 	.word	0x40020010
 8007508:	40020028 	.word	0x40020028
 800750c:	40020040 	.word	0x40020040
 8007510:	40020058 	.word	0x40020058
 8007514:	40020070 	.word	0x40020070
 8007518:	40020088 	.word	0x40020088
 800751c:	400200a0 	.word	0x400200a0
 8007520:	400200b8 	.word	0x400200b8
 8007524:	40020410 	.word	0x40020410
 8007528:	40020428 	.word	0x40020428
 800752c:	40020440 	.word	0x40020440
 8007530:	40020458 	.word	0x40020458
 8007534:	40020470 	.word	0x40020470
 8007538:	40020488 	.word	0x40020488
 800753c:	400204a0 	.word	0x400204a0
 8007540:	400204b8 	.word	0x400204b8

08007544 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007556:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a84      	ldr	r2, [pc, #528]	; (8007774 <DMA_SetConfig+0x230>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d072      	beq.n	800764e <DMA_SetConfig+0x10a>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a82      	ldr	r2, [pc, #520]	; (8007778 <DMA_SetConfig+0x234>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d06d      	beq.n	800764e <DMA_SetConfig+0x10a>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a81      	ldr	r2, [pc, #516]	; (800777c <DMA_SetConfig+0x238>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d068      	beq.n	800764e <DMA_SetConfig+0x10a>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a7f      	ldr	r2, [pc, #508]	; (8007780 <DMA_SetConfig+0x23c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d063      	beq.n	800764e <DMA_SetConfig+0x10a>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a7e      	ldr	r2, [pc, #504]	; (8007784 <DMA_SetConfig+0x240>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d05e      	beq.n	800764e <DMA_SetConfig+0x10a>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a7c      	ldr	r2, [pc, #496]	; (8007788 <DMA_SetConfig+0x244>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d059      	beq.n	800764e <DMA_SetConfig+0x10a>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a7b      	ldr	r2, [pc, #492]	; (800778c <DMA_SetConfig+0x248>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d054      	beq.n	800764e <DMA_SetConfig+0x10a>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a79      	ldr	r2, [pc, #484]	; (8007790 <DMA_SetConfig+0x24c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d04f      	beq.n	800764e <DMA_SetConfig+0x10a>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a78      	ldr	r2, [pc, #480]	; (8007794 <DMA_SetConfig+0x250>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d04a      	beq.n	800764e <DMA_SetConfig+0x10a>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a76      	ldr	r2, [pc, #472]	; (8007798 <DMA_SetConfig+0x254>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d045      	beq.n	800764e <DMA_SetConfig+0x10a>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a75      	ldr	r2, [pc, #468]	; (800779c <DMA_SetConfig+0x258>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d040      	beq.n	800764e <DMA_SetConfig+0x10a>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a73      	ldr	r2, [pc, #460]	; (80077a0 <DMA_SetConfig+0x25c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d03b      	beq.n	800764e <DMA_SetConfig+0x10a>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a72      	ldr	r2, [pc, #456]	; (80077a4 <DMA_SetConfig+0x260>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d036      	beq.n	800764e <DMA_SetConfig+0x10a>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a70      	ldr	r2, [pc, #448]	; (80077a8 <DMA_SetConfig+0x264>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d031      	beq.n	800764e <DMA_SetConfig+0x10a>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a6f      	ldr	r2, [pc, #444]	; (80077ac <DMA_SetConfig+0x268>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d02c      	beq.n	800764e <DMA_SetConfig+0x10a>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a6d      	ldr	r2, [pc, #436]	; (80077b0 <DMA_SetConfig+0x26c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d027      	beq.n	800764e <DMA_SetConfig+0x10a>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a6c      	ldr	r2, [pc, #432]	; (80077b4 <DMA_SetConfig+0x270>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d022      	beq.n	800764e <DMA_SetConfig+0x10a>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a6a      	ldr	r2, [pc, #424]	; (80077b8 <DMA_SetConfig+0x274>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d01d      	beq.n	800764e <DMA_SetConfig+0x10a>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a69      	ldr	r2, [pc, #420]	; (80077bc <DMA_SetConfig+0x278>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d018      	beq.n	800764e <DMA_SetConfig+0x10a>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a67      	ldr	r2, [pc, #412]	; (80077c0 <DMA_SetConfig+0x27c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d013      	beq.n	800764e <DMA_SetConfig+0x10a>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a66      	ldr	r2, [pc, #408]	; (80077c4 <DMA_SetConfig+0x280>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00e      	beq.n	800764e <DMA_SetConfig+0x10a>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a64      	ldr	r2, [pc, #400]	; (80077c8 <DMA_SetConfig+0x284>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d009      	beq.n	800764e <DMA_SetConfig+0x10a>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a63      	ldr	r2, [pc, #396]	; (80077cc <DMA_SetConfig+0x288>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d004      	beq.n	800764e <DMA_SetConfig+0x10a>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a61      	ldr	r2, [pc, #388]	; (80077d0 <DMA_SetConfig+0x28c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d101      	bne.n	8007652 <DMA_SetConfig+0x10e>
 800764e:	2301      	movs	r3, #1
 8007650:	e000      	b.n	8007654 <DMA_SetConfig+0x110>
 8007652:	2300      	movs	r3, #0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00d      	beq.n	8007674 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007660:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d004      	beq.n	8007674 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007672:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a3e      	ldr	r2, [pc, #248]	; (8007774 <DMA_SetConfig+0x230>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d04a      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a3d      	ldr	r2, [pc, #244]	; (8007778 <DMA_SetConfig+0x234>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d045      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a3b      	ldr	r2, [pc, #236]	; (800777c <DMA_SetConfig+0x238>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d040      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a3a      	ldr	r2, [pc, #232]	; (8007780 <DMA_SetConfig+0x23c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d03b      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a38      	ldr	r2, [pc, #224]	; (8007784 <DMA_SetConfig+0x240>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d036      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a37      	ldr	r2, [pc, #220]	; (8007788 <DMA_SetConfig+0x244>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d031      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a35      	ldr	r2, [pc, #212]	; (800778c <DMA_SetConfig+0x248>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d02c      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a34      	ldr	r2, [pc, #208]	; (8007790 <DMA_SetConfig+0x24c>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d027      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a32      	ldr	r2, [pc, #200]	; (8007794 <DMA_SetConfig+0x250>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d022      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a31      	ldr	r2, [pc, #196]	; (8007798 <DMA_SetConfig+0x254>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d01d      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a2f      	ldr	r2, [pc, #188]	; (800779c <DMA_SetConfig+0x258>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d018      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a2e      	ldr	r2, [pc, #184]	; (80077a0 <DMA_SetConfig+0x25c>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d013      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a2c      	ldr	r2, [pc, #176]	; (80077a4 <DMA_SetConfig+0x260>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00e      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a2b      	ldr	r2, [pc, #172]	; (80077a8 <DMA_SetConfig+0x264>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d009      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a29      	ldr	r2, [pc, #164]	; (80077ac <DMA_SetConfig+0x268>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d004      	beq.n	8007714 <DMA_SetConfig+0x1d0>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a28      	ldr	r2, [pc, #160]	; (80077b0 <DMA_SetConfig+0x26c>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d101      	bne.n	8007718 <DMA_SetConfig+0x1d4>
 8007714:	2301      	movs	r3, #1
 8007716:	e000      	b.n	800771a <DMA_SetConfig+0x1d6>
 8007718:	2300      	movs	r3, #0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d05a      	beq.n	80077d4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007722:	f003 031f 	and.w	r3, r3, #31
 8007726:	223f      	movs	r2, #63	; 0x3f
 8007728:	409a      	lsls	r2, r3
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800773c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	2b40      	cmp	r3, #64	; 0x40
 800774c:	d108      	bne.n	8007760 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800775e:	e087      	b.n	8007870 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	60da      	str	r2, [r3, #12]
}
 8007770:	e07e      	b.n	8007870 <DMA_SetConfig+0x32c>
 8007772:	bf00      	nop
 8007774:	40020010 	.word	0x40020010
 8007778:	40020028 	.word	0x40020028
 800777c:	40020040 	.word	0x40020040
 8007780:	40020058 	.word	0x40020058
 8007784:	40020070 	.word	0x40020070
 8007788:	40020088 	.word	0x40020088
 800778c:	400200a0 	.word	0x400200a0
 8007790:	400200b8 	.word	0x400200b8
 8007794:	40020410 	.word	0x40020410
 8007798:	40020428 	.word	0x40020428
 800779c:	40020440 	.word	0x40020440
 80077a0:	40020458 	.word	0x40020458
 80077a4:	40020470 	.word	0x40020470
 80077a8:	40020488 	.word	0x40020488
 80077ac:	400204a0 	.word	0x400204a0
 80077b0:	400204b8 	.word	0x400204b8
 80077b4:	58025408 	.word	0x58025408
 80077b8:	5802541c 	.word	0x5802541c
 80077bc:	58025430 	.word	0x58025430
 80077c0:	58025444 	.word	0x58025444
 80077c4:	58025458 	.word	0x58025458
 80077c8:	5802546c 	.word	0x5802546c
 80077cc:	58025480 	.word	0x58025480
 80077d0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a28      	ldr	r2, [pc, #160]	; (800787c <DMA_SetConfig+0x338>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d022      	beq.n	8007824 <DMA_SetConfig+0x2e0>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a27      	ldr	r2, [pc, #156]	; (8007880 <DMA_SetConfig+0x33c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d01d      	beq.n	8007824 <DMA_SetConfig+0x2e0>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a25      	ldr	r2, [pc, #148]	; (8007884 <DMA_SetConfig+0x340>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d018      	beq.n	8007824 <DMA_SetConfig+0x2e0>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a24      	ldr	r2, [pc, #144]	; (8007888 <DMA_SetConfig+0x344>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d013      	beq.n	8007824 <DMA_SetConfig+0x2e0>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a22      	ldr	r2, [pc, #136]	; (800788c <DMA_SetConfig+0x348>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d00e      	beq.n	8007824 <DMA_SetConfig+0x2e0>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a21      	ldr	r2, [pc, #132]	; (8007890 <DMA_SetConfig+0x34c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d009      	beq.n	8007824 <DMA_SetConfig+0x2e0>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a1f      	ldr	r2, [pc, #124]	; (8007894 <DMA_SetConfig+0x350>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d004      	beq.n	8007824 <DMA_SetConfig+0x2e0>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a1e      	ldr	r2, [pc, #120]	; (8007898 <DMA_SetConfig+0x354>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d101      	bne.n	8007828 <DMA_SetConfig+0x2e4>
 8007824:	2301      	movs	r3, #1
 8007826:	e000      	b.n	800782a <DMA_SetConfig+0x2e6>
 8007828:	2300      	movs	r3, #0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d020      	beq.n	8007870 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	2201      	movs	r2, #1
 8007838:	409a      	lsls	r2, r3
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2b40      	cmp	r3, #64	; 0x40
 800784c:	d108      	bne.n	8007860 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	60da      	str	r2, [r3, #12]
}
 800785e:	e007      	b.n	8007870 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	60da      	str	r2, [r3, #12]
}
 8007870:	bf00      	nop
 8007872:	371c      	adds	r7, #28
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	58025408 	.word	0x58025408
 8007880:	5802541c 	.word	0x5802541c
 8007884:	58025430 	.word	0x58025430
 8007888:	58025444 	.word	0x58025444
 800788c:	58025458 	.word	0x58025458
 8007890:	5802546c 	.word	0x5802546c
 8007894:	58025480 	.word	0x58025480
 8007898:	58025494 	.word	0x58025494

0800789c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a42      	ldr	r2, [pc, #264]	; (80079b4 <DMA_CalcBaseAndBitshift+0x118>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d04a      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a41      	ldr	r2, [pc, #260]	; (80079b8 <DMA_CalcBaseAndBitshift+0x11c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d045      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a3f      	ldr	r2, [pc, #252]	; (80079bc <DMA_CalcBaseAndBitshift+0x120>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d040      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a3e      	ldr	r2, [pc, #248]	; (80079c0 <DMA_CalcBaseAndBitshift+0x124>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d03b      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a3c      	ldr	r2, [pc, #240]	; (80079c4 <DMA_CalcBaseAndBitshift+0x128>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d036      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a3b      	ldr	r2, [pc, #236]	; (80079c8 <DMA_CalcBaseAndBitshift+0x12c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d031      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a39      	ldr	r2, [pc, #228]	; (80079cc <DMA_CalcBaseAndBitshift+0x130>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d02c      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a38      	ldr	r2, [pc, #224]	; (80079d0 <DMA_CalcBaseAndBitshift+0x134>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d027      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a36      	ldr	r2, [pc, #216]	; (80079d4 <DMA_CalcBaseAndBitshift+0x138>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d022      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a35      	ldr	r2, [pc, #212]	; (80079d8 <DMA_CalcBaseAndBitshift+0x13c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d01d      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a33      	ldr	r2, [pc, #204]	; (80079dc <DMA_CalcBaseAndBitshift+0x140>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d018      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a32      	ldr	r2, [pc, #200]	; (80079e0 <DMA_CalcBaseAndBitshift+0x144>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d013      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a30      	ldr	r2, [pc, #192]	; (80079e4 <DMA_CalcBaseAndBitshift+0x148>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d00e      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a2f      	ldr	r2, [pc, #188]	; (80079e8 <DMA_CalcBaseAndBitshift+0x14c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d009      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a2d      	ldr	r2, [pc, #180]	; (80079ec <DMA_CalcBaseAndBitshift+0x150>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d004      	beq.n	8007944 <DMA_CalcBaseAndBitshift+0xa8>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a2c      	ldr	r2, [pc, #176]	; (80079f0 <DMA_CalcBaseAndBitshift+0x154>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d101      	bne.n	8007948 <DMA_CalcBaseAndBitshift+0xac>
 8007944:	2301      	movs	r3, #1
 8007946:	e000      	b.n	800794a <DMA_CalcBaseAndBitshift+0xae>
 8007948:	2300      	movs	r3, #0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d024      	beq.n	8007998 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	3b10      	subs	r3, #16
 8007956:	4a27      	ldr	r2, [pc, #156]	; (80079f4 <DMA_CalcBaseAndBitshift+0x158>)
 8007958:	fba2 2303 	umull	r2, r3, r2, r3
 800795c:	091b      	lsrs	r3, r3, #4
 800795e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	4a24      	ldr	r2, [pc, #144]	; (80079f8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007968:	5cd3      	ldrb	r3, [r2, r3]
 800796a:	461a      	mov	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b03      	cmp	r3, #3
 8007974:	d908      	bls.n	8007988 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	4b1f      	ldr	r3, [pc, #124]	; (80079fc <DMA_CalcBaseAndBitshift+0x160>)
 800797e:	4013      	ands	r3, r2
 8007980:	1d1a      	adds	r2, r3, #4
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	659a      	str	r2, [r3, #88]	; 0x58
 8007986:	e00d      	b.n	80079a4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	4b1b      	ldr	r3, [pc, #108]	; (80079fc <DMA_CalcBaseAndBitshift+0x160>)
 8007990:	4013      	ands	r3, r2
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6593      	str	r3, [r2, #88]	; 0x58
 8007996:	e005      	b.n	80079a4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	40020010 	.word	0x40020010
 80079b8:	40020028 	.word	0x40020028
 80079bc:	40020040 	.word	0x40020040
 80079c0:	40020058 	.word	0x40020058
 80079c4:	40020070 	.word	0x40020070
 80079c8:	40020088 	.word	0x40020088
 80079cc:	400200a0 	.word	0x400200a0
 80079d0:	400200b8 	.word	0x400200b8
 80079d4:	40020410 	.word	0x40020410
 80079d8:	40020428 	.word	0x40020428
 80079dc:	40020440 	.word	0x40020440
 80079e0:	40020458 	.word	0x40020458
 80079e4:	40020470 	.word	0x40020470
 80079e8:	40020488 	.word	0x40020488
 80079ec:	400204a0 	.word	0x400204a0
 80079f0:	400204b8 	.word	0x400204b8
 80079f4:	aaaaaaab 	.word	0xaaaaaaab
 80079f8:	0800f6d4 	.word	0x0800f6d4
 80079fc:	fffffc00 	.word	0xfffffc00

08007a00 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d120      	bne.n	8007a56 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d858      	bhi.n	8007ace <DMA_CheckFifoParam+0xce>
 8007a1c:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <DMA_CheckFifoParam+0x24>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007a35 	.word	0x08007a35
 8007a28:	08007a47 	.word	0x08007a47
 8007a2c:	08007a35 	.word	0x08007a35
 8007a30:	08007acf 	.word	0x08007acf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d048      	beq.n	8007ad2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a44:	e045      	b.n	8007ad2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a4e:	d142      	bne.n	8007ad6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a54:	e03f      	b.n	8007ad6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a5e:	d123      	bne.n	8007aa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d838      	bhi.n	8007ada <DMA_CheckFifoParam+0xda>
 8007a68:	a201      	add	r2, pc, #4	; (adr r2, 8007a70 <DMA_CheckFifoParam+0x70>)
 8007a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6e:	bf00      	nop
 8007a70:	08007a81 	.word	0x08007a81
 8007a74:	08007a87 	.word	0x08007a87
 8007a78:	08007a81 	.word	0x08007a81
 8007a7c:	08007a99 	.word	0x08007a99
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	73fb      	strb	r3, [r7, #15]
        break;
 8007a84:	e030      	b.n	8007ae8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d025      	beq.n	8007ade <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a96:	e022      	b.n	8007ade <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007aa0:	d11f      	bne.n	8007ae2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007aa6:	e01c      	b.n	8007ae2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d902      	bls.n	8007ab6 <DMA_CheckFifoParam+0xb6>
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d003      	beq.n	8007abc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007ab4:	e018      	b.n	8007ae8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8007aba:	e015      	b.n	8007ae8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00e      	beq.n	8007ae6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	73fb      	strb	r3, [r7, #15]
    break;
 8007acc:	e00b      	b.n	8007ae6 <DMA_CheckFifoParam+0xe6>
        break;
 8007ace:	bf00      	nop
 8007ad0:	e00a      	b.n	8007ae8 <DMA_CheckFifoParam+0xe8>
        break;
 8007ad2:	bf00      	nop
 8007ad4:	e008      	b.n	8007ae8 <DMA_CheckFifoParam+0xe8>
        break;
 8007ad6:	bf00      	nop
 8007ad8:	e006      	b.n	8007ae8 <DMA_CheckFifoParam+0xe8>
        break;
 8007ada:	bf00      	nop
 8007adc:	e004      	b.n	8007ae8 <DMA_CheckFifoParam+0xe8>
        break;
 8007ade:	bf00      	nop
 8007ae0:	e002      	b.n	8007ae8 <DMA_CheckFifoParam+0xe8>
        break;
 8007ae2:	bf00      	nop
 8007ae4:	e000      	b.n	8007ae8 <DMA_CheckFifoParam+0xe8>
    break;
 8007ae6:	bf00      	nop
    }
  }

  return status;
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop

08007af8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a38      	ldr	r2, [pc, #224]	; (8007bec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d022      	beq.n	8007b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a36      	ldr	r2, [pc, #216]	; (8007bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d01d      	beq.n	8007b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a35      	ldr	r2, [pc, #212]	; (8007bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d018      	beq.n	8007b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a33      	ldr	r2, [pc, #204]	; (8007bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d013      	beq.n	8007b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a32      	ldr	r2, [pc, #200]	; (8007bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d00e      	beq.n	8007b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a30      	ldr	r2, [pc, #192]	; (8007c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d009      	beq.n	8007b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a2f      	ldr	r2, [pc, #188]	; (8007c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d004      	beq.n	8007b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a2d      	ldr	r2, [pc, #180]	; (8007c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d101      	bne.n	8007b5a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d01a      	beq.n	8007b96 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	3b08      	subs	r3, #8
 8007b68:	4a28      	ldr	r2, [pc, #160]	; (8007c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6e:	091b      	lsrs	r3, r3, #4
 8007b70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	4b26      	ldr	r3, [pc, #152]	; (8007c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a24      	ldr	r2, [pc, #144]	; (8007c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007b84:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	409a      	lsls	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007b94:	e024      	b.n	8007be0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	3b10      	subs	r3, #16
 8007b9e:	4a1e      	ldr	r2, [pc, #120]	; (8007c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba4:	091b      	lsrs	r3, r3, #4
 8007ba6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	4a1c      	ldr	r2, [pc, #112]	; (8007c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d806      	bhi.n	8007bbe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	4a1b      	ldr	r2, [pc, #108]	; (8007c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d902      	bls.n	8007bbe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4b18      	ldr	r3, [pc, #96]	; (8007c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a16      	ldr	r2, [pc, #88]	; (8007c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007bd0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f003 031f 	and.w	r3, r3, #31
 8007bd8:	2201      	movs	r2, #1
 8007bda:	409a      	lsls	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007be0:	bf00      	nop
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	58025408 	.word	0x58025408
 8007bf0:	5802541c 	.word	0x5802541c
 8007bf4:	58025430 	.word	0x58025430
 8007bf8:	58025444 	.word	0x58025444
 8007bfc:	58025458 	.word	0x58025458
 8007c00:	5802546c 	.word	0x5802546c
 8007c04:	58025480 	.word	0x58025480
 8007c08:	58025494 	.word	0x58025494
 8007c0c:	cccccccd 	.word	0xcccccccd
 8007c10:	16009600 	.word	0x16009600
 8007c14:	58025880 	.word	0x58025880
 8007c18:	aaaaaaab 	.word	0xaaaaaaab
 8007c1c:	400204b8 	.word	0x400204b8
 8007c20:	4002040f 	.word	0x4002040f
 8007c24:	10008200 	.word	0x10008200
 8007c28:	40020880 	.word	0x40020880

08007c2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d04a      	beq.n	8007cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d847      	bhi.n	8007cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a25      	ldr	r2, [pc, #148]	; (8007ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d022      	beq.n	8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a24      	ldr	r2, [pc, #144]	; (8007ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d01d      	beq.n	8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a22      	ldr	r2, [pc, #136]	; (8007cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d018      	beq.n	8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a21      	ldr	r2, [pc, #132]	; (8007cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d013      	beq.n	8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1f      	ldr	r2, [pc, #124]	; (8007cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00e      	beq.n	8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1e      	ldr	r2, [pc, #120]	; (8007cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d009      	beq.n	8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1c      	ldr	r2, [pc, #112]	; (8007cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d004      	beq.n	8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1b      	ldr	r2, [pc, #108]	; (8007d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d101      	bne.n	8007c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e000      	b.n	8007c9e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4b17      	ldr	r3, [pc, #92]	; (8007d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007ca6:	4413      	add	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	461a      	mov	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a15      	ldr	r2, [pc, #84]	; (8007d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007cb4:	671a      	str	r2, [r3, #112]	; 0x70
 8007cb6:	e009      	b.n	8007ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4b14      	ldr	r3, [pc, #80]	; (8007d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a11      	ldr	r2, [pc, #68]	; (8007d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007cca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	409a      	lsls	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007cd8:	bf00      	nop
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	58025408 	.word	0x58025408
 8007ce8:	5802541c 	.word	0x5802541c
 8007cec:	58025430 	.word	0x58025430
 8007cf0:	58025444 	.word	0x58025444
 8007cf4:	58025458 	.word	0x58025458
 8007cf8:	5802546c 	.word	0x5802546c
 8007cfc:	58025480 	.word	0x58025480
 8007d00:	58025494 	.word	0x58025494
 8007d04:	1600963f 	.word	0x1600963f
 8007d08:	58025940 	.word	0x58025940
 8007d0c:	1000823f 	.word	0x1000823f
 8007d10:	40020940 	.word	0x40020940

08007d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b089      	sub	sp, #36	; 0x24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d22:	4b86      	ldr	r3, [pc, #536]	; (8007f3c <HAL_GPIO_Init+0x228>)
 8007d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d26:	e18c      	b.n	8008042 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	fa01 f303 	lsl.w	r3, r1, r3
 8007d34:	4013      	ands	r3, r2
 8007d36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 817e 	beq.w	800803c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f003 0303 	and.w	r3, r3, #3
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d005      	beq.n	8007d58 <HAL_GPIO_Init+0x44>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f003 0303 	and.w	r3, r3, #3
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d130      	bne.n	8007dba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	2203      	movs	r2, #3
 8007d64:	fa02 f303 	lsl.w	r3, r2, r3
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d8e:	2201      	movs	r2, #1
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	fa02 f303 	lsl.w	r3, r2, r3
 8007d96:	43db      	mvns	r3, r3
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	091b      	lsrs	r3, r3, #4
 8007da4:	f003 0201 	and.w	r2, r3, #1
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d017      	beq.n	8007df6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	2203      	movs	r2, #3
 8007dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd6:	43db      	mvns	r3, r3
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f003 0303 	and.w	r3, r3, #3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d123      	bne.n	8007e4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	08da      	lsrs	r2, r3, #3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3208      	adds	r2, #8
 8007e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	220f      	movs	r2, #15
 8007e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1e:	43db      	mvns	r3, r3
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	4013      	ands	r3, r2
 8007e24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	691a      	ldr	r2, [r3, #16]
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	f003 0307 	and.w	r3, r3, #7
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	fa02 f303 	lsl.w	r3, r2, r3
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	08da      	lsrs	r2, r3, #3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3208      	adds	r2, #8
 8007e44:	69b9      	ldr	r1, [r7, #24]
 8007e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	2203      	movs	r2, #3
 8007e56:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5a:	43db      	mvns	r3, r3
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f003 0203 	and.w	r2, r3, #3
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 80d8 	beq.w	800803c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e8c:	4b2c      	ldr	r3, [pc, #176]	; (8007f40 <HAL_GPIO_Init+0x22c>)
 8007e8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e92:	4a2b      	ldr	r2, [pc, #172]	; (8007f40 <HAL_GPIO_Init+0x22c>)
 8007e94:	f043 0302 	orr.w	r3, r3, #2
 8007e98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e9c:	4b28      	ldr	r3, [pc, #160]	; (8007f40 <HAL_GPIO_Init+0x22c>)
 8007e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007eaa:	4a26      	ldr	r2, [pc, #152]	; (8007f44 <HAL_GPIO_Init+0x230>)
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	089b      	lsrs	r3, r3, #2
 8007eb0:	3302      	adds	r3, #2
 8007eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	f003 0303 	and.w	r3, r3, #3
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	220f      	movs	r2, #15
 8007ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec6:	43db      	mvns	r3, r3
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a1d      	ldr	r2, [pc, #116]	; (8007f48 <HAL_GPIO_Init+0x234>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d04a      	beq.n	8007f6c <HAL_GPIO_Init+0x258>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a1c      	ldr	r2, [pc, #112]	; (8007f4c <HAL_GPIO_Init+0x238>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d02b      	beq.n	8007f36 <HAL_GPIO_Init+0x222>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a1b      	ldr	r2, [pc, #108]	; (8007f50 <HAL_GPIO_Init+0x23c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d025      	beq.n	8007f32 <HAL_GPIO_Init+0x21e>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a1a      	ldr	r2, [pc, #104]	; (8007f54 <HAL_GPIO_Init+0x240>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d01f      	beq.n	8007f2e <HAL_GPIO_Init+0x21a>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a19      	ldr	r2, [pc, #100]	; (8007f58 <HAL_GPIO_Init+0x244>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d019      	beq.n	8007f2a <HAL_GPIO_Init+0x216>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a18      	ldr	r2, [pc, #96]	; (8007f5c <HAL_GPIO_Init+0x248>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d013      	beq.n	8007f26 <HAL_GPIO_Init+0x212>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a17      	ldr	r2, [pc, #92]	; (8007f60 <HAL_GPIO_Init+0x24c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d00d      	beq.n	8007f22 <HAL_GPIO_Init+0x20e>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a16      	ldr	r2, [pc, #88]	; (8007f64 <HAL_GPIO_Init+0x250>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d007      	beq.n	8007f1e <HAL_GPIO_Init+0x20a>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a15      	ldr	r2, [pc, #84]	; (8007f68 <HAL_GPIO_Init+0x254>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d101      	bne.n	8007f1a <HAL_GPIO_Init+0x206>
 8007f16:	2309      	movs	r3, #9
 8007f18:	e029      	b.n	8007f6e <HAL_GPIO_Init+0x25a>
 8007f1a:	230a      	movs	r3, #10
 8007f1c:	e027      	b.n	8007f6e <HAL_GPIO_Init+0x25a>
 8007f1e:	2307      	movs	r3, #7
 8007f20:	e025      	b.n	8007f6e <HAL_GPIO_Init+0x25a>
 8007f22:	2306      	movs	r3, #6
 8007f24:	e023      	b.n	8007f6e <HAL_GPIO_Init+0x25a>
 8007f26:	2305      	movs	r3, #5
 8007f28:	e021      	b.n	8007f6e <HAL_GPIO_Init+0x25a>
 8007f2a:	2304      	movs	r3, #4
 8007f2c:	e01f      	b.n	8007f6e <HAL_GPIO_Init+0x25a>
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e01d      	b.n	8007f6e <HAL_GPIO_Init+0x25a>
 8007f32:	2302      	movs	r3, #2
 8007f34:	e01b      	b.n	8007f6e <HAL_GPIO_Init+0x25a>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e019      	b.n	8007f6e <HAL_GPIO_Init+0x25a>
 8007f3a:	bf00      	nop
 8007f3c:	58000080 	.word	0x58000080
 8007f40:	58024400 	.word	0x58024400
 8007f44:	58000400 	.word	0x58000400
 8007f48:	58020000 	.word	0x58020000
 8007f4c:	58020400 	.word	0x58020400
 8007f50:	58020800 	.word	0x58020800
 8007f54:	58020c00 	.word	0x58020c00
 8007f58:	58021000 	.word	0x58021000
 8007f5c:	58021400 	.word	0x58021400
 8007f60:	58021800 	.word	0x58021800
 8007f64:	58021c00 	.word	0x58021c00
 8007f68:	58022400 	.word	0x58022400
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	69fa      	ldr	r2, [r7, #28]
 8007f70:	f002 0203 	and.w	r2, r2, #3
 8007f74:	0092      	lsls	r2, r2, #2
 8007f76:	4093      	lsls	r3, r2
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f7e:	4938      	ldr	r1, [pc, #224]	; (8008060 <HAL_GPIO_Init+0x34c>)
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	089b      	lsrs	r3, r3, #2
 8007f84:	3302      	adds	r3, #2
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	43db      	mvns	r3, r3
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	43db      	mvns	r3, r3
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	43db      	mvns	r3, r3
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	4313      	orrs	r3, r2
 800800a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	43db      	mvns	r3, r3
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	4013      	ands	r3, r2
 8008020:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	4313      	orrs	r3, r2
 8008034:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	3301      	adds	r3, #1
 8008040:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	fa22 f303 	lsr.w	r3, r2, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	f47f ae6b 	bne.w	8007d28 <HAL_GPIO_Init+0x14>
  }
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	3724      	adds	r7, #36	; 0x24
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	58000400 	.word	0x58000400

08008064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	807b      	strh	r3, [r7, #2]
 8008070:	4613      	mov	r3, r2
 8008072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008074:	787b      	ldrb	r3, [r7, #1]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800807a:	887a      	ldrh	r2, [r7, #2]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008080:	e003      	b.n	800808a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008082:	887b      	ldrh	r3, [r7, #2]
 8008084:	041a      	lsls	r2, r3, #16
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	619a      	str	r2, [r3, #24]
}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008096:	b480      	push	{r7}
 8008098:	b085      	sub	sp, #20
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80080a8:	887a      	ldrh	r2, [r7, #2]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4013      	ands	r3, r2
 80080ae:	041a      	lsls	r2, r3, #16
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	43d9      	mvns	r1, r3
 80080b4:	887b      	ldrh	r3, [r7, #2]
 80080b6:	400b      	ands	r3, r1
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	619a      	str	r2, [r3, #24]
}
 80080be:	bf00      	nop
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
	...

080080cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e07f      	b.n	80081de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7f9 fa22 	bl	800153c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2224      	movs	r2, #36	; 0x24
 80080fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 0201 	bic.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800811c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800812c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d107      	bne.n	8008146 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	689a      	ldr	r2, [r3, #8]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008142:	609a      	str	r2, [r3, #8]
 8008144:	e006      	b.n	8008154 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	689a      	ldr	r2, [r3, #8]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008152:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	2b02      	cmp	r3, #2
 800815a:	d104      	bne.n	8008166 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008164:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6859      	ldr	r1, [r3, #4]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	4b1d      	ldr	r3, [pc, #116]	; (80081e8 <HAL_I2C_Init+0x11c>)
 8008172:	430b      	orrs	r3, r1
 8008174:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68da      	ldr	r2, [r3, #12]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008184:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	691a      	ldr	r2, [r3, #16]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	69d9      	ldr	r1, [r3, #28]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a1a      	ldr	r2, [r3, #32]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0201 	orr.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2220      	movs	r2, #32
 80081ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	02008000 	.word	0x02008000

080081ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b20      	cmp	r3, #32
 8008200:	d138      	bne.n	8008274 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008208:	2b01      	cmp	r3, #1
 800820a:	d101      	bne.n	8008210 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800820c:	2302      	movs	r3, #2
 800820e:	e032      	b.n	8008276 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2224      	movs	r2, #36	; 0x24
 800821c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0201 	bic.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800823e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6819      	ldr	r1, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0201 	orr.w	r2, r2, #1
 800825e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2220      	movs	r2, #32
 8008264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	e000      	b.n	8008276 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008274:	2302      	movs	r3, #2
  }
}
 8008276:	4618      	mov	r0, r3
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008282:	b480      	push	{r7}
 8008284:	b085      	sub	sp, #20
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b20      	cmp	r3, #32
 8008296:	d139      	bne.n	800830c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d101      	bne.n	80082a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80082a2:	2302      	movs	r3, #2
 80082a4:	e033      	b.n	800830e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2224      	movs	r2, #36	; 0x24
 80082b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 0201 	bic.w	r2, r2, #1
 80082c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80082d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	021b      	lsls	r3, r3, #8
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	4313      	orrs	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0201 	orr.w	r2, r2, #1
 80082f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2220      	movs	r2, #32
 80082fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	e000      	b.n	800830e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800830c:	2302      	movs	r3, #2
  }
}
 800830e:	4618      	mov	r0, r3
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
	...

0800831c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008324:	4b19      	ldr	r3, [pc, #100]	; (800838c <HAL_PWREx_ConfigSupply+0x70>)
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	f003 0304 	and.w	r3, r3, #4
 800832c:	2b04      	cmp	r3, #4
 800832e:	d00a      	beq.n	8008346 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008330:	4b16      	ldr	r3, [pc, #88]	; (800838c <HAL_PWREx_ConfigSupply+0x70>)
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f003 0307 	and.w	r3, r3, #7
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	429a      	cmp	r2, r3
 800833c:	d001      	beq.n	8008342 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e01f      	b.n	8008382 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	e01d      	b.n	8008382 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008346:	4b11      	ldr	r3, [pc, #68]	; (800838c <HAL_PWREx_ConfigSupply+0x70>)
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	f023 0207 	bic.w	r2, r3, #7
 800834e:	490f      	ldr	r1, [pc, #60]	; (800838c <HAL_PWREx_ConfigSupply+0x70>)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4313      	orrs	r3, r2
 8008354:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008356:	f7fb f9bd 	bl	80036d4 <HAL_GetTick>
 800835a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800835c:	e009      	b.n	8008372 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800835e:	f7fb f9b9 	bl	80036d4 <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800836c:	d901      	bls.n	8008372 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e007      	b.n	8008382 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008372:	4b06      	ldr	r3, [pc, #24]	; (800838c <HAL_PWREx_ConfigSupply+0x70>)
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800837a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800837e:	d1ee      	bne.n	800835e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	58024800 	.word	0x58024800

08008390 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b08c      	sub	sp, #48	; 0x30
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e397      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 8087 	beq.w	80084be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083b0:	4b9e      	ldr	r3, [pc, #632]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083ba:	4b9c      	ldr	r3, [pc, #624]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80083bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80083c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c2:	2b10      	cmp	r3, #16
 80083c4:	d007      	beq.n	80083d6 <HAL_RCC_OscConfig+0x46>
 80083c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c8:	2b18      	cmp	r3, #24
 80083ca:	d110      	bne.n	80083ee <HAL_RCC_OscConfig+0x5e>
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	f003 0303 	and.w	r3, r3, #3
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d10b      	bne.n	80083ee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083d6:	4b95      	ldr	r3, [pc, #596]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d06c      	beq.n	80084bc <HAL_RCC_OscConfig+0x12c>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d168      	bne.n	80084bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e371      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083f6:	d106      	bne.n	8008406 <HAL_RCC_OscConfig+0x76>
 80083f8:	4b8c      	ldr	r3, [pc, #560]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a8b      	ldr	r2, [pc, #556]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80083fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	e02e      	b.n	8008464 <HAL_RCC_OscConfig+0xd4>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10c      	bne.n	8008428 <HAL_RCC_OscConfig+0x98>
 800840e:	4b87      	ldr	r3, [pc, #540]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a86      	ldr	r2, [pc, #536]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008418:	6013      	str	r3, [r2, #0]
 800841a:	4b84      	ldr	r3, [pc, #528]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a83      	ldr	r2, [pc, #524]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	e01d      	b.n	8008464 <HAL_RCC_OscConfig+0xd4>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008430:	d10c      	bne.n	800844c <HAL_RCC_OscConfig+0xbc>
 8008432:	4b7e      	ldr	r3, [pc, #504]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a7d      	ldr	r2, [pc, #500]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	4b7b      	ldr	r3, [pc, #492]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a7a      	ldr	r2, [pc, #488]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	e00b      	b.n	8008464 <HAL_RCC_OscConfig+0xd4>
 800844c:	4b77      	ldr	r3, [pc, #476]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a76      	ldr	r2, [pc, #472]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	4b74      	ldr	r3, [pc, #464]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a73      	ldr	r2, [pc, #460]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 800845e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d013      	beq.n	8008494 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800846c:	f7fb f932 	bl	80036d4 <HAL_GetTick>
 8008470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008472:	e008      	b.n	8008486 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008474:	f7fb f92e 	bl	80036d4 <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	2b64      	cmp	r3, #100	; 0x64
 8008480:	d901      	bls.n	8008486 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e325      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008486:	4b69      	ldr	r3, [pc, #420]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0f0      	beq.n	8008474 <HAL_RCC_OscConfig+0xe4>
 8008492:	e014      	b.n	80084be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008494:	f7fb f91e 	bl	80036d4 <HAL_GetTick>
 8008498:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800849a:	e008      	b.n	80084ae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800849c:	f7fb f91a 	bl	80036d4 <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	2b64      	cmp	r3, #100	; 0x64
 80084a8:	d901      	bls.n	80084ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e311      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084ae:	4b5f      	ldr	r3, [pc, #380]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1f0      	bne.n	800849c <HAL_RCC_OscConfig+0x10c>
 80084ba:	e000      	b.n	80084be <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f000 808a 	beq.w	80085e0 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084cc:	4b57      	ldr	r3, [pc, #348]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084d6:	4b55      	ldr	r3, [pc, #340]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80084d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084da:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d007      	beq.n	80084f2 <HAL_RCC_OscConfig+0x162>
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	2b18      	cmp	r3, #24
 80084e6:	d137      	bne.n	8008558 <HAL_RCC_OscConfig+0x1c8>
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d132      	bne.n	8008558 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084f2:	4b4e      	ldr	r3, [pc, #312]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0304 	and.w	r3, r3, #4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <HAL_RCC_OscConfig+0x17a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e2e3      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800850a:	4b48      	ldr	r3, [pc, #288]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f023 0219 	bic.w	r2, r3, #25
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	4945      	ldr	r1, [pc, #276]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008518:	4313      	orrs	r3, r2
 800851a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800851c:	f7fb f8da 	bl	80036d4 <HAL_GetTick>
 8008520:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008522:	e008      	b.n	8008536 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008524:	f7fb f8d6 	bl	80036d4 <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	2b02      	cmp	r3, #2
 8008530:	d901      	bls.n	8008536 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e2cd      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008536:	4b3d      	ldr	r3, [pc, #244]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0f0      	beq.n	8008524 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008542:	4b3a      	ldr	r3, [pc, #232]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	061b      	lsls	r3, r3, #24
 8008550:	4936      	ldr	r1, [pc, #216]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008552:	4313      	orrs	r3, r2
 8008554:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008556:	e043      	b.n	80085e0 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d026      	beq.n	80085ae <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008560:	4b32      	ldr	r3, [pc, #200]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f023 0219 	bic.w	r2, r3, #25
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	492f      	ldr	r1, [pc, #188]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 800856e:	4313      	orrs	r3, r2
 8008570:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008572:	f7fb f8af 	bl	80036d4 <HAL_GetTick>
 8008576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008578:	e008      	b.n	800858c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800857a:	f7fb f8ab 	bl	80036d4 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	2b02      	cmp	r3, #2
 8008586:	d901      	bls.n	800858c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e2a2      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800858c:	4b27      	ldr	r3, [pc, #156]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0f0      	beq.n	800857a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008598:	4b24      	ldr	r3, [pc, #144]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	061b      	lsls	r3, r3, #24
 80085a6:	4921      	ldr	r1, [pc, #132]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80085a8:	4313      	orrs	r3, r2
 80085aa:	604b      	str	r3, [r1, #4]
 80085ac:	e018      	b.n	80085e0 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085ae:	4b1f      	ldr	r3, [pc, #124]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a1e      	ldr	r2, [pc, #120]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80085b4:	f023 0301 	bic.w	r3, r3, #1
 80085b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ba:	f7fb f88b 	bl	80036d4 <HAL_GetTick>
 80085be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085c0:	e008      	b.n	80085d4 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085c2:	f7fb f887 	bl	80036d4 <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d901      	bls.n	80085d4 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e27e      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085d4:	4b15      	ldr	r3, [pc, #84]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1f0      	bne.n	80085c2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0310 	and.w	r3, r3, #16
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d06d      	beq.n	80086c8 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085ec:	4b0f      	ldr	r3, [pc, #60]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085f4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085f6:	4b0d      	ldr	r3, [pc, #52]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 80085f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fa:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	2b08      	cmp	r3, #8
 8008600:	d007      	beq.n	8008612 <HAL_RCC_OscConfig+0x282>
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	2b18      	cmp	r3, #24
 8008606:	d11e      	bne.n	8008646 <HAL_RCC_OscConfig+0x2b6>
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f003 0303 	and.w	r3, r3, #3
 800860e:	2b01      	cmp	r3, #1
 8008610:	d119      	bne.n	8008646 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008612:	4b06      	ldr	r3, [pc, #24]	; (800862c <HAL_RCC_OscConfig+0x29c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800861a:	2b00      	cmp	r3, #0
 800861c:	d008      	beq.n	8008630 <HAL_RCC_OscConfig+0x2a0>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	2b80      	cmp	r3, #128	; 0x80
 8008624:	d004      	beq.n	8008630 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e253      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
 800862a:	bf00      	nop
 800862c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008630:	4ba3      	ldr	r3, [pc, #652]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	061b      	lsls	r3, r3, #24
 800863e:	49a0      	ldr	r1, [pc, #640]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008640:	4313      	orrs	r3, r2
 8008642:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008644:	e040      	b.n	80086c8 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d023      	beq.n	8008696 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800864e:	4b9c      	ldr	r3, [pc, #624]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a9b      	ldr	r2, [pc, #620]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800865a:	f7fb f83b 	bl	80036d4 <HAL_GetTick>
 800865e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008660:	e008      	b.n	8008674 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008662:	f7fb f837 	bl	80036d4 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d901      	bls.n	8008674 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e22e      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008674:	4b92      	ldr	r3, [pc, #584]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0f0      	beq.n	8008662 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008680:	4b8f      	ldr	r3, [pc, #572]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	061b      	lsls	r3, r3, #24
 800868e:	498c      	ldr	r1, [pc, #560]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008690:	4313      	orrs	r3, r2
 8008692:	60cb      	str	r3, [r1, #12]
 8008694:	e018      	b.n	80086c8 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008696:	4b8a      	ldr	r3, [pc, #552]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a89      	ldr	r2, [pc, #548]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 800869c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086a2:	f7fb f817 	bl	80036d4 <HAL_GetTick>
 80086a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086a8:	e008      	b.n	80086bc <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80086aa:	f7fb f813 	bl	80036d4 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d901      	bls.n	80086bc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e20a      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086bc:	4b80      	ldr	r3, [pc, #512]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1f0      	bne.n	80086aa <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0308 	and.w	r3, r3, #8
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d036      	beq.n	8008742 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d019      	beq.n	8008710 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086dc:	4b78      	ldr	r3, [pc, #480]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 80086de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086e0:	4a77      	ldr	r2, [pc, #476]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 80086e2:	f043 0301 	orr.w	r3, r3, #1
 80086e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086e8:	f7fa fff4 	bl	80036d4 <HAL_GetTick>
 80086ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80086ee:	e008      	b.n	8008702 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086f0:	f7fa fff0 	bl	80036d4 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e1e7      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008702:	4b6f      	ldr	r3, [pc, #444]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0f0      	beq.n	80086f0 <HAL_RCC_OscConfig+0x360>
 800870e:	e018      	b.n	8008742 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008710:	4b6b      	ldr	r3, [pc, #428]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008714:	4a6a      	ldr	r2, [pc, #424]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008716:	f023 0301 	bic.w	r3, r3, #1
 800871a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800871c:	f7fa ffda 	bl	80036d4 <HAL_GetTick>
 8008720:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008722:	e008      	b.n	8008736 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008724:	f7fa ffd6 	bl	80036d4 <HAL_GetTick>
 8008728:	4602      	mov	r2, r0
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b02      	cmp	r3, #2
 8008730:	d901      	bls.n	8008736 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e1cd      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008736:	4b62      	ldr	r3, [pc, #392]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1f0      	bne.n	8008724 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0320 	and.w	r3, r3, #32
 800874a:	2b00      	cmp	r3, #0
 800874c:	d036      	beq.n	80087bc <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d019      	beq.n	800878a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008756:	4b5a      	ldr	r3, [pc, #360]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a59      	ldr	r2, [pc, #356]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 800875c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008760:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008762:	f7fa ffb7 	bl	80036d4 <HAL_GetTick>
 8008766:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008768:	e008      	b.n	800877c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800876a:	f7fa ffb3 	bl	80036d4 <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	2b02      	cmp	r3, #2
 8008776:	d901      	bls.n	800877c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e1aa      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800877c:	4b50      	ldr	r3, [pc, #320]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0f0      	beq.n	800876a <HAL_RCC_OscConfig+0x3da>
 8008788:	e018      	b.n	80087bc <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800878a:	4b4d      	ldr	r3, [pc, #308]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a4c      	ldr	r2, [pc, #304]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008794:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008796:	f7fa ff9d 	bl	80036d4 <HAL_GetTick>
 800879a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800879c:	e008      	b.n	80087b0 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800879e:	f7fa ff99 	bl	80036d4 <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d901      	bls.n	80087b0 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e190      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087b0:	4b43      	ldr	r3, [pc, #268]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1f0      	bne.n	800879e <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 8085 	beq.w	80088d4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80087ca:	4b3e      	ldr	r3, [pc, #248]	; (80088c4 <HAL_RCC_OscConfig+0x534>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a3d      	ldr	r2, [pc, #244]	; (80088c4 <HAL_RCC_OscConfig+0x534>)
 80087d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087d6:	f7fa ff7d 	bl	80036d4 <HAL_GetTick>
 80087da:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087dc:	e008      	b.n	80087f0 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80087de:	f7fa ff79 	bl	80036d4 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	2b64      	cmp	r3, #100	; 0x64
 80087ea:	d901      	bls.n	80087f0 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e170      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087f0:	4b34      	ldr	r3, [pc, #208]	; (80088c4 <HAL_RCC_OscConfig+0x534>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0f0      	beq.n	80087de <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d106      	bne.n	8008812 <HAL_RCC_OscConfig+0x482>
 8008804:	4b2e      	ldr	r3, [pc, #184]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008808:	4a2d      	ldr	r2, [pc, #180]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 800880a:	f043 0301 	orr.w	r3, r3, #1
 800880e:	6713      	str	r3, [r2, #112]	; 0x70
 8008810:	e02d      	b.n	800886e <HAL_RCC_OscConfig+0x4de>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10c      	bne.n	8008834 <HAL_RCC_OscConfig+0x4a4>
 800881a:	4b29      	ldr	r3, [pc, #164]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 800881c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881e:	4a28      	ldr	r2, [pc, #160]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008820:	f023 0301 	bic.w	r3, r3, #1
 8008824:	6713      	str	r3, [r2, #112]	; 0x70
 8008826:	4b26      	ldr	r3, [pc, #152]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882a:	4a25      	ldr	r2, [pc, #148]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 800882c:	f023 0304 	bic.w	r3, r3, #4
 8008830:	6713      	str	r3, [r2, #112]	; 0x70
 8008832:	e01c      	b.n	800886e <HAL_RCC_OscConfig+0x4de>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	2b05      	cmp	r3, #5
 800883a:	d10c      	bne.n	8008856 <HAL_RCC_OscConfig+0x4c6>
 800883c:	4b20      	ldr	r3, [pc, #128]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 800883e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008840:	4a1f      	ldr	r2, [pc, #124]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008842:	f043 0304 	orr.w	r3, r3, #4
 8008846:	6713      	str	r3, [r2, #112]	; 0x70
 8008848:	4b1d      	ldr	r3, [pc, #116]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 800884a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884c:	4a1c      	ldr	r2, [pc, #112]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 800884e:	f043 0301 	orr.w	r3, r3, #1
 8008852:	6713      	str	r3, [r2, #112]	; 0x70
 8008854:	e00b      	b.n	800886e <HAL_RCC_OscConfig+0x4de>
 8008856:	4b1a      	ldr	r3, [pc, #104]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885a:	4a19      	ldr	r2, [pc, #100]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 800885c:	f023 0301 	bic.w	r3, r3, #1
 8008860:	6713      	str	r3, [r2, #112]	; 0x70
 8008862:	4b17      	ldr	r3, [pc, #92]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008866:	4a16      	ldr	r2, [pc, #88]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008868:	f023 0304 	bic.w	r3, r3, #4
 800886c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d015      	beq.n	80088a2 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008876:	f7fa ff2d 	bl	80036d4 <HAL_GetTick>
 800887a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800887c:	e00a      	b.n	8008894 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800887e:	f7fa ff29 	bl	80036d4 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	f241 3288 	movw	r2, #5000	; 0x1388
 800888c:	4293      	cmp	r3, r2
 800888e:	d901      	bls.n	8008894 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e11e      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008894:	4b0a      	ldr	r3, [pc, #40]	; (80088c0 <HAL_RCC_OscConfig+0x530>)
 8008896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008898:	f003 0302 	and.w	r3, r3, #2
 800889c:	2b00      	cmp	r3, #0
 800889e:	d0ee      	beq.n	800887e <HAL_RCC_OscConfig+0x4ee>
 80088a0:	e018      	b.n	80088d4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088a2:	f7fa ff17 	bl	80036d4 <HAL_GetTick>
 80088a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088a8:	e00e      	b.n	80088c8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088aa:	f7fa ff13 	bl	80036d4 <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d905      	bls.n	80088c8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e108      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
 80088c0:	58024400 	.word	0x58024400
 80088c4:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088c8:	4b84      	ldr	r3, [pc, #528]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80088ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1ea      	bne.n	80088aa <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 80f9 	beq.w	8008ad0 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80088de:	4b7f      	ldr	r3, [pc, #508]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088e6:	2b18      	cmp	r3, #24
 80088e8:	f000 80b4 	beq.w	8008a54 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	f040 8095 	bne.w	8008a20 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088f6:	4b79      	ldr	r3, [pc, #484]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a78      	ldr	r2, [pc, #480]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80088fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008902:	f7fa fee7 	bl	80036d4 <HAL_GetTick>
 8008906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008908:	e008      	b.n	800891c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800890a:	f7fa fee3 	bl	80036d4 <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	2b02      	cmp	r3, #2
 8008916:	d901      	bls.n	800891c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e0da      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800891c:	4b6f      	ldr	r3, [pc, #444]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1f0      	bne.n	800890a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008928:	4b6c      	ldr	r3, [pc, #432]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 800892a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800892c:	4b6c      	ldr	r3, [pc, #432]	; (8008ae0 <HAL_RCC_OscConfig+0x750>)
 800892e:	4013      	ands	r3, r2
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008938:	0112      	lsls	r2, r2, #4
 800893a:	430a      	orrs	r2, r1
 800893c:	4967      	ldr	r1, [pc, #412]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 800893e:	4313      	orrs	r3, r2
 8008940:	628b      	str	r3, [r1, #40]	; 0x28
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008946:	3b01      	subs	r3, #1
 8008948:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008950:	3b01      	subs	r3, #1
 8008952:	025b      	lsls	r3, r3, #9
 8008954:	b29b      	uxth	r3, r3
 8008956:	431a      	orrs	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895c:	3b01      	subs	r3, #1
 800895e:	041b      	lsls	r3, r3, #16
 8008960:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008964:	431a      	orrs	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800896a:	3b01      	subs	r3, #1
 800896c:	061b      	lsls	r3, r3, #24
 800896e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008972:	495a      	ldr	r1, [pc, #360]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 8008974:	4313      	orrs	r3, r2
 8008976:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008978:	4b58      	ldr	r3, [pc, #352]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	4a57      	ldr	r2, [pc, #348]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 800897e:	f023 0301 	bic.w	r3, r3, #1
 8008982:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008984:	4b55      	ldr	r3, [pc, #340]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 8008986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008988:	4b56      	ldr	r3, [pc, #344]	; (8008ae4 <HAL_RCC_OscConfig+0x754>)
 800898a:	4013      	ands	r3, r2
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008990:	00d2      	lsls	r2, r2, #3
 8008992:	4952      	ldr	r1, [pc, #328]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 8008994:	4313      	orrs	r3, r2
 8008996:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008998:	4b50      	ldr	r3, [pc, #320]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 800899a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899c:	f023 020c 	bic.w	r2, r3, #12
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	494d      	ldr	r1, [pc, #308]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80089aa:	4b4c      	ldr	r3, [pc, #304]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80089ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ae:	f023 0202 	bic.w	r2, r3, #2
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b6:	4949      	ldr	r1, [pc, #292]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80089bc:	4b47      	ldr	r3, [pc, #284]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80089be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c0:	4a46      	ldr	r2, [pc, #280]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80089c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089c8:	4b44      	ldr	r3, [pc, #272]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	4a43      	ldr	r2, [pc, #268]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80089ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80089d4:	4b41      	ldr	r3, [pc, #260]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	4a40      	ldr	r2, [pc, #256]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80089da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80089e0:	4b3e      	ldr	r3, [pc, #248]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	4a3d      	ldr	r2, [pc, #244]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80089e6:	f043 0301 	orr.w	r3, r3, #1
 80089ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089ec:	4b3b      	ldr	r3, [pc, #236]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a3a      	ldr	r2, [pc, #232]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 80089f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f8:	f7fa fe6c 	bl	80036d4 <HAL_GetTick>
 80089fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089fe:	e008      	b.n	8008a12 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a00:	f7fa fe68 	bl	80036d4 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e05f      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a12:	4b32      	ldr	r3, [pc, #200]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0f0      	beq.n	8008a00 <HAL_RCC_OscConfig+0x670>
 8008a1e:	e057      	b.n	8008ad0 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a20:	4b2e      	ldr	r3, [pc, #184]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a2d      	ldr	r2, [pc, #180]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 8008a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a2c:	f7fa fe52 	bl	80036d4 <HAL_GetTick>
 8008a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a32:	e008      	b.n	8008a46 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a34:	f7fa fe4e 	bl	80036d4 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d901      	bls.n	8008a46 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e045      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a46:	4b25      	ldr	r3, [pc, #148]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1f0      	bne.n	8008a34 <HAL_RCC_OscConfig+0x6a4>
 8008a52:	e03d      	b.n	8008ad0 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008a54:	4b21      	ldr	r3, [pc, #132]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 8008a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008a5a:	4b20      	ldr	r3, [pc, #128]	; (8008adc <HAL_RCC_OscConfig+0x74c>)
 8008a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d031      	beq.n	8008acc <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	f003 0203 	and.w	r2, r3, #3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d12a      	bne.n	8008acc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	091b      	lsrs	r3, r3, #4
 8008a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d122      	bne.n	8008acc <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a90:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d11a      	bne.n	8008acc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	0a5b      	lsrs	r3, r3, #9
 8008a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d111      	bne.n	8008acc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	0c1b      	lsrs	r3, r3, #16
 8008aac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d108      	bne.n	8008acc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	0e1b      	lsrs	r3, r3, #24
 8008abe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d001      	beq.n	8008ad0 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e000      	b.n	8008ad2 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3730      	adds	r7, #48	; 0x30
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	58024400 	.word	0x58024400
 8008ae0:	fffffc0c 	.word	0xfffffc0c
 8008ae4:	ffff0007 	.word	0xffff0007

08008ae8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e19c      	b.n	8008e36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008afc:	4b8a      	ldr	r3, [pc, #552]	; (8008d28 <HAL_RCC_ClockConfig+0x240>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 030f 	and.w	r3, r3, #15
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d910      	bls.n	8008b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b0a:	4b87      	ldr	r3, [pc, #540]	; (8008d28 <HAL_RCC_ClockConfig+0x240>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f023 020f 	bic.w	r2, r3, #15
 8008b12:	4985      	ldr	r1, [pc, #532]	; (8008d28 <HAL_RCC_ClockConfig+0x240>)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b1a:	4b83      	ldr	r3, [pc, #524]	; (8008d28 <HAL_RCC_ClockConfig+0x240>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 030f 	and.w	r3, r3, #15
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d001      	beq.n	8008b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e184      	b.n	8008e36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d010      	beq.n	8008b5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	691a      	ldr	r2, [r3, #16]
 8008b3c:	4b7b      	ldr	r3, [pc, #492]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d908      	bls.n	8008b5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b48:	4b78      	ldr	r3, [pc, #480]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	4975      	ldr	r1, [pc, #468]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0308 	and.w	r3, r3, #8
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d010      	beq.n	8008b88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	695a      	ldr	r2, [r3, #20]
 8008b6a:	4b70      	ldr	r3, [pc, #448]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d908      	bls.n	8008b88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b76:	4b6d      	ldr	r3, [pc, #436]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	496a      	ldr	r1, [pc, #424]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008b84:	4313      	orrs	r3, r2
 8008b86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0310 	and.w	r3, r3, #16
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d010      	beq.n	8008bb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	699a      	ldr	r2, [r3, #24]
 8008b98:	4b64      	ldr	r3, [pc, #400]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d908      	bls.n	8008bb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ba4:	4b61      	ldr	r3, [pc, #388]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	495e      	ldr	r1, [pc, #376]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0320 	and.w	r3, r3, #32
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d010      	beq.n	8008be4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	69da      	ldr	r2, [r3, #28]
 8008bc6:	4b59      	ldr	r3, [pc, #356]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d908      	bls.n	8008be4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008bd2:	4b56      	ldr	r3, [pc, #344]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	4953      	ldr	r1, [pc, #332]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008be0:	4313      	orrs	r3, r2
 8008be2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0302 	and.w	r3, r3, #2
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d010      	beq.n	8008c12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	68da      	ldr	r2, [r3, #12]
 8008bf4:	4b4d      	ldr	r3, [pc, #308]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	f003 030f 	and.w	r3, r3, #15
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d908      	bls.n	8008c12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c00:	4b4a      	ldr	r3, [pc, #296]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	f023 020f 	bic.w	r2, r3, #15
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	4947      	ldr	r1, [pc, #284]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d055      	beq.n	8008cca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008c1e:	4b43      	ldr	r3, [pc, #268]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	4940      	ldr	r1, [pc, #256]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d107      	bne.n	8008c48 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c38:	4b3c      	ldr	r3, [pc, #240]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d121      	bne.n	8008c88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e0f6      	b.n	8008e36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	2b03      	cmp	r3, #3
 8008c4e:	d107      	bne.n	8008c60 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c50:	4b36      	ldr	r3, [pc, #216]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d115      	bne.n	8008c88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e0ea      	b.n	8008e36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d107      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c68:	4b30      	ldr	r3, [pc, #192]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d109      	bne.n	8008c88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e0de      	b.n	8008e36 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c78:	4b2c      	ldr	r3, [pc, #176]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0304 	and.w	r3, r3, #4
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e0d6      	b.n	8008e36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c88:	4b28      	ldr	r3, [pc, #160]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	f023 0207 	bic.w	r2, r3, #7
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	4925      	ldr	r1, [pc, #148]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c9a:	f7fa fd1b 	bl	80036d4 <HAL_GetTick>
 8008c9e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ca0:	e00a      	b.n	8008cb8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ca2:	f7fa fd17 	bl	80036d4 <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d901      	bls.n	8008cb8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e0be      	b.n	8008e36 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cb8:	4b1c      	ldr	r3, [pc, #112]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d1eb      	bne.n	8008ca2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d010      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	4b14      	ldr	r3, [pc, #80]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	f003 030f 	and.w	r3, r3, #15
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d208      	bcs.n	8008cf8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ce6:	4b11      	ldr	r3, [pc, #68]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	f023 020f 	bic.w	r2, r3, #15
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	490e      	ldr	r1, [pc, #56]	; (8008d2c <HAL_RCC_ClockConfig+0x244>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <HAL_RCC_ClockConfig+0x240>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 030f 	and.w	r3, r3, #15
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d214      	bcs.n	8008d30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d06:	4b08      	ldr	r3, [pc, #32]	; (8008d28 <HAL_RCC_ClockConfig+0x240>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f023 020f 	bic.w	r2, r3, #15
 8008d0e:	4906      	ldr	r1, [pc, #24]	; (8008d28 <HAL_RCC_ClockConfig+0x240>)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d16:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <HAL_RCC_ClockConfig+0x240>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 030f 	and.w	r3, r3, #15
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d005      	beq.n	8008d30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e086      	b.n	8008e36 <HAL_RCC_ClockConfig+0x34e>
 8008d28:	52002000 	.word	0x52002000
 8008d2c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0304 	and.w	r3, r3, #4
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d010      	beq.n	8008d5e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	691a      	ldr	r2, [r3, #16]
 8008d40:	4b3f      	ldr	r3, [pc, #252]	; (8008e40 <HAL_RCC_ClockConfig+0x358>)
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d208      	bcs.n	8008d5e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d4c:	4b3c      	ldr	r3, [pc, #240]	; (8008e40 <HAL_RCC_ClockConfig+0x358>)
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	4939      	ldr	r1, [pc, #228]	; (8008e40 <HAL_RCC_ClockConfig+0x358>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0308 	and.w	r3, r3, #8
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d010      	beq.n	8008d8c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	695a      	ldr	r2, [r3, #20]
 8008d6e:	4b34      	ldr	r3, [pc, #208]	; (8008e40 <HAL_RCC_ClockConfig+0x358>)
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d208      	bcs.n	8008d8c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d7a:	4b31      	ldr	r3, [pc, #196]	; (8008e40 <HAL_RCC_ClockConfig+0x358>)
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	492e      	ldr	r1, [pc, #184]	; (8008e40 <HAL_RCC_ClockConfig+0x358>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0310 	and.w	r3, r3, #16
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d010      	beq.n	8008dba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	699a      	ldr	r2, [r3, #24]
 8008d9c:	4b28      	ldr	r3, [pc, #160]	; (8008e40 <HAL_RCC_ClockConfig+0x358>)
 8008d9e:	69db      	ldr	r3, [r3, #28]
 8008da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d208      	bcs.n	8008dba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008da8:	4b25      	ldr	r3, [pc, #148]	; (8008e40 <HAL_RCC_ClockConfig+0x358>)
 8008daa:	69db      	ldr	r3, [r3, #28]
 8008dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	4922      	ldr	r1, [pc, #136]	; (8008e40 <HAL_RCC_ClockConfig+0x358>)
 8008db6:	4313      	orrs	r3, r2
 8008db8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0320 	and.w	r3, r3, #32
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d010      	beq.n	8008de8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	69da      	ldr	r2, [r3, #28]
 8008dca:	4b1d      	ldr	r3, [pc, #116]	; (8008e40 <HAL_RCC_ClockConfig+0x358>)
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d208      	bcs.n	8008de8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008dd6:	4b1a      	ldr	r3, [pc, #104]	; (8008e40 <HAL_RCC_ClockConfig+0x358>)
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	4917      	ldr	r1, [pc, #92]	; (8008e40 <HAL_RCC_ClockConfig+0x358>)
 8008de4:	4313      	orrs	r3, r2
 8008de6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008de8:	f000 f834 	bl	8008e54 <HAL_RCC_GetSysClockFreq>
 8008dec:	4602      	mov	r2, r0
 8008dee:	4b14      	ldr	r3, [pc, #80]	; (8008e40 <HAL_RCC_ClockConfig+0x358>)
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	0a1b      	lsrs	r3, r3, #8
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	4912      	ldr	r1, [pc, #72]	; (8008e44 <HAL_RCC_ClockConfig+0x35c>)
 8008dfa:	5ccb      	ldrb	r3, [r1, r3]
 8008dfc:	f003 031f 	and.w	r3, r3, #31
 8008e00:	fa22 f303 	lsr.w	r3, r2, r3
 8008e04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e06:	4b0e      	ldr	r3, [pc, #56]	; (8008e40 <HAL_RCC_ClockConfig+0x358>)
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	f003 030f 	and.w	r3, r3, #15
 8008e0e:	4a0d      	ldr	r2, [pc, #52]	; (8008e44 <HAL_RCC_ClockConfig+0x35c>)
 8008e10:	5cd3      	ldrb	r3, [r2, r3]
 8008e12:	f003 031f 	and.w	r3, r3, #31
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	fa22 f303 	lsr.w	r3, r2, r3
 8008e1c:	4a0a      	ldr	r2, [pc, #40]	; (8008e48 <HAL_RCC_ClockConfig+0x360>)
 8008e1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e20:	4a0a      	ldr	r2, [pc, #40]	; (8008e4c <HAL_RCC_ClockConfig+0x364>)
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008e26:	4b0a      	ldr	r3, [pc, #40]	; (8008e50 <HAL_RCC_ClockConfig+0x368>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fa fc08 	bl	8003640 <HAL_InitTick>
 8008e30:	4603      	mov	r3, r0
 8008e32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	58024400 	.word	0x58024400
 8008e44:	0800f6c4 	.word	0x0800f6c4
 8008e48:	20000004 	.word	0x20000004
 8008e4c:	20000000 	.word	0x20000000
 8008e50:	20000008 	.word	0x20000008

08008e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b089      	sub	sp, #36	; 0x24
 8008e58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e5a:	4bb3      	ldr	r3, [pc, #716]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e62:	2b18      	cmp	r3, #24
 8008e64:	f200 8155 	bhi.w	8009112 <HAL_RCC_GetSysClockFreq+0x2be>
 8008e68:	a201      	add	r2, pc, #4	; (adr r2, 8008e70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6e:	bf00      	nop
 8008e70:	08008ed5 	.word	0x08008ed5
 8008e74:	08009113 	.word	0x08009113
 8008e78:	08009113 	.word	0x08009113
 8008e7c:	08009113 	.word	0x08009113
 8008e80:	08009113 	.word	0x08009113
 8008e84:	08009113 	.word	0x08009113
 8008e88:	08009113 	.word	0x08009113
 8008e8c:	08009113 	.word	0x08009113
 8008e90:	08008efb 	.word	0x08008efb
 8008e94:	08009113 	.word	0x08009113
 8008e98:	08009113 	.word	0x08009113
 8008e9c:	08009113 	.word	0x08009113
 8008ea0:	08009113 	.word	0x08009113
 8008ea4:	08009113 	.word	0x08009113
 8008ea8:	08009113 	.word	0x08009113
 8008eac:	08009113 	.word	0x08009113
 8008eb0:	08008f01 	.word	0x08008f01
 8008eb4:	08009113 	.word	0x08009113
 8008eb8:	08009113 	.word	0x08009113
 8008ebc:	08009113 	.word	0x08009113
 8008ec0:	08009113 	.word	0x08009113
 8008ec4:	08009113 	.word	0x08009113
 8008ec8:	08009113 	.word	0x08009113
 8008ecc:	08009113 	.word	0x08009113
 8008ed0:	08008f07 	.word	0x08008f07
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ed4:	4b94      	ldr	r3, [pc, #592]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 0320 	and.w	r3, r3, #32
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d009      	beq.n	8008ef4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ee0:	4b91      	ldr	r3, [pc, #580]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	08db      	lsrs	r3, r3, #3
 8008ee6:	f003 0303 	and.w	r3, r3, #3
 8008eea:	4a90      	ldr	r2, [pc, #576]	; (800912c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008eec:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008ef2:	e111      	b.n	8009118 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ef4:	4b8d      	ldr	r3, [pc, #564]	; (800912c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ef6:	61bb      	str	r3, [r7, #24]
    break;
 8008ef8:	e10e      	b.n	8009118 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008efa:	4b8d      	ldr	r3, [pc, #564]	; (8009130 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008efc:	61bb      	str	r3, [r7, #24]
    break;
 8008efe:	e10b      	b.n	8009118 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008f00:	4b8c      	ldr	r3, [pc, #560]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008f02:	61bb      	str	r3, [r7, #24]
    break;
 8008f04:	e108      	b.n	8009118 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f06:	4b88      	ldr	r3, [pc, #544]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0a:	f003 0303 	and.w	r3, r3, #3
 8008f0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008f10:	4b85      	ldr	r3, [pc, #532]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f14:	091b      	lsrs	r3, r3, #4
 8008f16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008f1c:	4b82      	ldr	r3, [pc, #520]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008f26:	4b80      	ldr	r3, [pc, #512]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2a:	08db      	lsrs	r3, r3, #3
 8008f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	fb02 f303 	mul.w	r3, r2, r3
 8008f36:	ee07 3a90 	vmov	s15, r3
 8008f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f3e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 80e1 	beq.w	800910c <HAL_RCC_GetSysClockFreq+0x2b8>
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	f000 8083 	beq.w	8009058 <HAL_RCC_GetSysClockFreq+0x204>
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	f200 80a1 	bhi.w	800909c <HAL_RCC_GetSysClockFreq+0x248>
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <HAL_RCC_GetSysClockFreq+0x114>
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d056      	beq.n	8009014 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008f66:	e099      	b.n	800909c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f68:	4b6f      	ldr	r3, [pc, #444]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0320 	and.w	r3, r3, #32
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d02d      	beq.n	8008fd0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f74:	4b6c      	ldr	r3, [pc, #432]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	08db      	lsrs	r3, r3, #3
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	4a6b      	ldr	r2, [pc, #428]	; (800912c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f80:	fa22 f303 	lsr.w	r3, r2, r3
 8008f84:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	ee07 3a90 	vmov	s15, r3
 8008f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	ee07 3a90 	vmov	s15, r3
 8008f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f9e:	4b62      	ldr	r3, [pc, #392]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fb2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008fce:	e087      	b.n	80090e0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	ee07 3a90 	vmov	s15, r3
 8008fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fda:	eddf 6a58 	vldr	s13, [pc, #352]	; 800913c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fe2:	4b51      	ldr	r3, [pc, #324]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fea:	ee07 3a90 	vmov	s15, r3
 8008fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ff6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800900a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800900e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009012:	e065      	b.n	80090e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009140 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009026:	4b40      	ldr	r3, [pc, #256]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800902e:	ee07 3a90 	vmov	s15, r3
 8009032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009036:	ed97 6a02 	vldr	s12, [r7, #8]
 800903a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009138 <HAL_RCC_GetSysClockFreq+0x2e4>
 800903e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800904a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800904e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009056:	e043      	b.n	80090e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	ee07 3a90 	vmov	s15, r3
 800905e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009062:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009144 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800906a:	4b2f      	ldr	r3, [pc, #188]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800906c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800907a:	ed97 6a02 	vldr	s12, [r7, #8]
 800907e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800908a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800908e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800909a:	e021      	b.n	80090e0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009140 <HAL_RCC_GetSysClockFreq+0x2ec>
 80090aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ae:	4b1e      	ldr	r3, [pc, #120]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090be:	ed97 6a02 	vldr	s12, [r7, #8]
 80090c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009138 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090de:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80090e0:	4b11      	ldr	r3, [pc, #68]	; (8009128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e4:	0a5b      	lsrs	r3, r3, #9
 80090e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ea:	3301      	adds	r3, #1
 80090ec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	ee07 3a90 	vmov	s15, r3
 80090f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80090f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80090fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009104:	ee17 3a90 	vmov	r3, s15
 8009108:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800910a:	e005      	b.n	8009118 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	61bb      	str	r3, [r7, #24]
    break;
 8009110:	e002      	b.n	8009118 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009112:	4b07      	ldr	r3, [pc, #28]	; (8009130 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009114:	61bb      	str	r3, [r7, #24]
    break;
 8009116:	bf00      	nop
  }

  return sysclockfreq;
 8009118:	69bb      	ldr	r3, [r7, #24]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3724      	adds	r7, #36	; 0x24
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	58024400 	.word	0x58024400
 800912c:	03d09000 	.word	0x03d09000
 8009130:	003d0900 	.word	0x003d0900
 8009134:	017d7840 	.word	0x017d7840
 8009138:	46000000 	.word	0x46000000
 800913c:	4c742400 	.word	0x4c742400
 8009140:	4a742400 	.word	0x4a742400
 8009144:	4bbebc20 	.word	0x4bbebc20

08009148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800914e:	f7ff fe81 	bl	8008e54 <HAL_RCC_GetSysClockFreq>
 8009152:	4602      	mov	r2, r0
 8009154:	4b10      	ldr	r3, [pc, #64]	; (8009198 <HAL_RCC_GetHCLKFreq+0x50>)
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	0a1b      	lsrs	r3, r3, #8
 800915a:	f003 030f 	and.w	r3, r3, #15
 800915e:	490f      	ldr	r1, [pc, #60]	; (800919c <HAL_RCC_GetHCLKFreq+0x54>)
 8009160:	5ccb      	ldrb	r3, [r1, r3]
 8009162:	f003 031f 	and.w	r3, r3, #31
 8009166:	fa22 f303 	lsr.w	r3, r2, r3
 800916a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800916c:	4b0a      	ldr	r3, [pc, #40]	; (8009198 <HAL_RCC_GetHCLKFreq+0x50>)
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	f003 030f 	and.w	r3, r3, #15
 8009174:	4a09      	ldr	r2, [pc, #36]	; (800919c <HAL_RCC_GetHCLKFreq+0x54>)
 8009176:	5cd3      	ldrb	r3, [r2, r3]
 8009178:	f003 031f 	and.w	r3, r3, #31
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	fa22 f303 	lsr.w	r3, r2, r3
 8009182:	4a07      	ldr	r2, [pc, #28]	; (80091a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009184:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009186:	4a07      	ldr	r2, [pc, #28]	; (80091a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800918c:	4b04      	ldr	r3, [pc, #16]	; (80091a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800918e:	681b      	ldr	r3, [r3, #0]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	58024400 	.word	0x58024400
 800919c:	0800f6c4 	.word	0x0800f6c4
 80091a0:	20000004 	.word	0x20000004
 80091a4:	20000000 	.word	0x20000000

080091a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80091ac:	f7ff ffcc 	bl	8009148 <HAL_RCC_GetHCLKFreq>
 80091b0:	4602      	mov	r2, r0
 80091b2:	4b06      	ldr	r3, [pc, #24]	; (80091cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	091b      	lsrs	r3, r3, #4
 80091b8:	f003 0307 	and.w	r3, r3, #7
 80091bc:	4904      	ldr	r1, [pc, #16]	; (80091d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80091be:	5ccb      	ldrb	r3, [r1, r3]
 80091c0:	f003 031f 	and.w	r3, r3, #31
 80091c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	58024400 	.word	0x58024400
 80091d0:	0800f6c4 	.word	0x0800f6c4

080091d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80091d8:	f7ff ffb6 	bl	8009148 <HAL_RCC_GetHCLKFreq>
 80091dc:	4602      	mov	r2, r0
 80091de:	4b06      	ldr	r3, [pc, #24]	; (80091f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	0a1b      	lsrs	r3, r3, #8
 80091e4:	f003 0307 	and.w	r3, r3, #7
 80091e8:	4904      	ldr	r1, [pc, #16]	; (80091fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80091ea:	5ccb      	ldrb	r3, [r1, r3]
 80091ec:	f003 031f 	and.w	r3, r3, #31
 80091f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	58024400 	.word	0x58024400
 80091fc:	0800f6c4 	.word	0x0800f6c4

08009200 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009208:	2300      	movs	r3, #0
 800920a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800920c:	2300      	movs	r3, #0
 800920e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d03f      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009220:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009224:	d02a      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009226:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800922a:	d824      	bhi.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800922c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009230:	d018      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009232:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009236:	d81e      	bhi.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009238:	2b00      	cmp	r3, #0
 800923a:	d003      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800923c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009240:	d007      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009242:	e018      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009244:	4bab      	ldr	r3, [pc, #684]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	4aaa      	ldr	r2, [pc, #680]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800924a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800924e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009250:	e015      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3304      	adds	r3, #4
 8009256:	2102      	movs	r1, #2
 8009258:	4618      	mov	r0, r3
 800925a:	f001 feff 	bl	800b05c <RCCEx_PLL2_Config>
 800925e:	4603      	mov	r3, r0
 8009260:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009262:	e00c      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	3324      	adds	r3, #36	; 0x24
 8009268:	2102      	movs	r1, #2
 800926a:	4618      	mov	r0, r3
 800926c:	f001 ffa8 	bl	800b1c0 <RCCEx_PLL3_Config>
 8009270:	4603      	mov	r3, r0
 8009272:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009274:	e003      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	75fb      	strb	r3, [r7, #23]
      break;
 800927a:	e000      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800927c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d109      	bne.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009284:	4b9b      	ldr	r3, [pc, #620]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009290:	4998      	ldr	r1, [pc, #608]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009292:	4313      	orrs	r3, r2
 8009294:	650b      	str	r3, [r1, #80]	; 0x50
 8009296:	e001      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009298:	7dfb      	ldrb	r3, [r7, #23]
 800929a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d03d      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ac:	2b04      	cmp	r3, #4
 80092ae:	d826      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80092b0:	a201      	add	r2, pc, #4	; (adr r2, 80092b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80092b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b6:	bf00      	nop
 80092b8:	080092cd 	.word	0x080092cd
 80092bc:	080092db 	.word	0x080092db
 80092c0:	080092ed 	.word	0x080092ed
 80092c4:	08009305 	.word	0x08009305
 80092c8:	08009305 	.word	0x08009305
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092cc:	4b89      	ldr	r3, [pc, #548]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d0:	4a88      	ldr	r2, [pc, #544]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092d8:	e015      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3304      	adds	r3, #4
 80092de:	2100      	movs	r1, #0
 80092e0:	4618      	mov	r0, r3
 80092e2:	f001 febb 	bl	800b05c <RCCEx_PLL2_Config>
 80092e6:	4603      	mov	r3, r0
 80092e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092ea:	e00c      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3324      	adds	r3, #36	; 0x24
 80092f0:	2100      	movs	r1, #0
 80092f2:	4618      	mov	r0, r3
 80092f4:	f001 ff64 	bl	800b1c0 <RCCEx_PLL3_Config>
 80092f8:	4603      	mov	r3, r0
 80092fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092fc:	e003      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	75fb      	strb	r3, [r7, #23]
      break;
 8009302:	e000      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009306:	7dfb      	ldrb	r3, [r7, #23]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d109      	bne.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800930c:	4b79      	ldr	r3, [pc, #484]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800930e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009310:	f023 0207 	bic.w	r2, r3, #7
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009318:	4976      	ldr	r1, [pc, #472]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800931a:	4313      	orrs	r3, r2
 800931c:	650b      	str	r3, [r1, #80]	; 0x50
 800931e:	e001      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009320:	7dfb      	ldrb	r3, [r7, #23]
 8009322:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800932c:	2b00      	cmp	r3, #0
 800932e:	d051      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009336:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800933a:	d036      	beq.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800933c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009340:	d830      	bhi.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009342:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009346:	d032      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009348:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800934c:	d82a      	bhi.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800934e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009352:	d02e      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009354:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009358:	d824      	bhi.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800935a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800935e:	d018      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009364:	d81e      	bhi.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009366:	2b00      	cmp	r3, #0
 8009368:	d003      	beq.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800936a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800936e:	d007      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009370:	e018      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009372:	4b60      	ldr	r3, [pc, #384]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009376:	4a5f      	ldr	r2, [pc, #380]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800937c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800937e:	e019      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	3304      	adds	r3, #4
 8009384:	2100      	movs	r1, #0
 8009386:	4618      	mov	r0, r3
 8009388:	f001 fe68 	bl	800b05c <RCCEx_PLL2_Config>
 800938c:	4603      	mov	r3, r0
 800938e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009390:	e010      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	3324      	adds	r3, #36	; 0x24
 8009396:	2100      	movs	r1, #0
 8009398:	4618      	mov	r0, r3
 800939a:	f001 ff11 	bl	800b1c0 <RCCEx_PLL3_Config>
 800939e:	4603      	mov	r3, r0
 80093a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093a2:	e007      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	75fb      	strb	r3, [r7, #23]
      break;
 80093a8:	e004      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80093aa:	bf00      	nop
 80093ac:	e002      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80093ae:	bf00      	nop
 80093b0:	e000      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80093b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093b4:	7dfb      	ldrb	r3, [r7, #23]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80093ba:	4b4e      	ldr	r3, [pc, #312]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093be:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80093c8:	494a      	ldr	r1, [pc, #296]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	658b      	str	r3, [r1, #88]	; 0x58
 80093ce:	e001      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d0:	7dfb      	ldrb	r3, [r7, #23]
 80093d2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d051      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80093e6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80093ea:	d036      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80093ec:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80093f0:	d830      	bhi.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80093f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093f6:	d032      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80093f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093fc:	d82a      	bhi.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80093fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009402:	d02e      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009404:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009408:	d824      	bhi.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800940a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800940e:	d018      	beq.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009414:	d81e      	bhi.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800941a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800941e:	d007      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009420:	e018      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009422:	4b34      	ldr	r3, [pc, #208]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009426:	4a33      	ldr	r2, [pc, #204]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800942c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800942e:	e019      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3304      	adds	r3, #4
 8009434:	2100      	movs	r1, #0
 8009436:	4618      	mov	r0, r3
 8009438:	f001 fe10 	bl	800b05c <RCCEx_PLL2_Config>
 800943c:	4603      	mov	r3, r0
 800943e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009440:	e010      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	3324      	adds	r3, #36	; 0x24
 8009446:	2100      	movs	r1, #0
 8009448:	4618      	mov	r0, r3
 800944a:	f001 feb9 	bl	800b1c0 <RCCEx_PLL3_Config>
 800944e:	4603      	mov	r3, r0
 8009450:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009452:	e007      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	75fb      	strb	r3, [r7, #23]
      break;
 8009458:	e004      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800945a:	bf00      	nop
 800945c:	e002      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800945e:	bf00      	nop
 8009460:	e000      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009464:	7dfb      	ldrb	r3, [r7, #23]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10a      	bne.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800946a:	4b22      	ldr	r3, [pc, #136]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800946c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009478:	491e      	ldr	r1, [pc, #120]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800947a:	4313      	orrs	r3, r2
 800947c:	658b      	str	r3, [r1, #88]	; 0x58
 800947e:	e001      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
 8009482:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d035      	beq.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009494:	2b30      	cmp	r3, #48	; 0x30
 8009496:	d01c      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009498:	2b30      	cmp	r3, #48	; 0x30
 800949a:	d817      	bhi.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800949c:	2b20      	cmp	r3, #32
 800949e:	d00c      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80094a0:	2b20      	cmp	r3, #32
 80094a2:	d813      	bhi.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d016      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80094a8:	2b10      	cmp	r3, #16
 80094aa:	d10f      	bne.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ac:	4b11      	ldr	r3, [pc, #68]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b0:	4a10      	ldr	r2, [pc, #64]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80094b8:	e00e      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3304      	adds	r3, #4
 80094be:	2102      	movs	r1, #2
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 fdcb 	bl	800b05c <RCCEx_PLL2_Config>
 80094c6:	4603      	mov	r3, r0
 80094c8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80094ca:	e005      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	75fb      	strb	r3, [r7, #23]
      break;
 80094d0:	e002      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80094d2:	bf00      	nop
 80094d4:	e000      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80094d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10c      	bne.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80094de:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ea:	4902      	ldr	r1, [pc, #8]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80094f0:	e004      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80094f2:	bf00      	nop
 80094f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f8:	7dfb      	ldrb	r3, [r7, #23]
 80094fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009504:	2b00      	cmp	r3, #0
 8009506:	d047      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800950c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009510:	d030      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009516:	d82a      	bhi.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009518:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800951c:	d02c      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800951e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009522:	d824      	bhi.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009528:	d018      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800952a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800952e:	d81e      	bhi.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d003      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009538:	d007      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800953a:	e018      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800953c:	4bac      	ldr	r3, [pc, #688]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	4aab      	ldr	r2, [pc, #684]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009548:	e017      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	3304      	adds	r3, #4
 800954e:	2100      	movs	r1, #0
 8009550:	4618      	mov	r0, r3
 8009552:	f001 fd83 	bl	800b05c <RCCEx_PLL2_Config>
 8009556:	4603      	mov	r3, r0
 8009558:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800955a:	e00e      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3324      	adds	r3, #36	; 0x24
 8009560:	2100      	movs	r1, #0
 8009562:	4618      	mov	r0, r3
 8009564:	f001 fe2c 	bl	800b1c0 <RCCEx_PLL3_Config>
 8009568:	4603      	mov	r3, r0
 800956a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800956c:	e005      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	75fb      	strb	r3, [r7, #23]
      break;
 8009572:	e002      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009574:	bf00      	nop
 8009576:	e000      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d109      	bne.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009580:	4b9b      	ldr	r3, [pc, #620]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009584:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800958c:	4998      	ldr	r1, [pc, #608]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800958e:	4313      	orrs	r3, r2
 8009590:	650b      	str	r3, [r1, #80]	; 0x50
 8009592:	e001      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009594:	7dfb      	ldrb	r3, [r7, #23]
 8009596:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d049      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095ac:	d02e      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80095ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095b2:	d828      	bhi.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80095b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095b8:	d02a      	beq.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80095ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095be:	d822      	bhi.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80095c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095c4:	d026      	beq.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80095c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095ca:	d81c      	bhi.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80095cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095d0:	d010      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80095d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095d6:	d816      	bhi.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d01d      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80095dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095e0:	d111      	bne.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	3304      	adds	r3, #4
 80095e6:	2101      	movs	r1, #1
 80095e8:	4618      	mov	r0, r3
 80095ea:	f001 fd37 	bl	800b05c <RCCEx_PLL2_Config>
 80095ee:	4603      	mov	r3, r0
 80095f0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80095f2:	e012      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3324      	adds	r3, #36	; 0x24
 80095f8:	2101      	movs	r1, #1
 80095fa:	4618      	mov	r0, r3
 80095fc:	f001 fde0 	bl	800b1c0 <RCCEx_PLL3_Config>
 8009600:	4603      	mov	r3, r0
 8009602:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009604:	e009      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	75fb      	strb	r3, [r7, #23]
      break;
 800960a:	e006      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800960c:	bf00      	nop
 800960e:	e004      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009610:	bf00      	nop
 8009612:	e002      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009614:	bf00      	nop
 8009616:	e000      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d109      	bne.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009620:	4b73      	ldr	r3, [pc, #460]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009624:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800962c:	4970      	ldr	r1, [pc, #448]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800962e:	4313      	orrs	r3, r2
 8009630:	650b      	str	r3, [r1, #80]	; 0x50
 8009632:	e001      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d04b      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800964a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800964e:	d02e      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009654:	d828      	bhi.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800965a:	d02a      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800965c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009660:	d822      	bhi.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009662:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009666:	d026      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009668:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800966c:	d81c      	bhi.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800966e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009672:	d010      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009678:	d816      	bhi.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800967a:	2b00      	cmp	r3, #0
 800967c:	d01d      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800967e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009682:	d111      	bne.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3304      	adds	r3, #4
 8009688:	2101      	movs	r1, #1
 800968a:	4618      	mov	r0, r3
 800968c:	f001 fce6 	bl	800b05c <RCCEx_PLL2_Config>
 8009690:	4603      	mov	r3, r0
 8009692:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009694:	e012      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	3324      	adds	r3, #36	; 0x24
 800969a:	2101      	movs	r1, #1
 800969c:	4618      	mov	r0, r3
 800969e:	f001 fd8f 	bl	800b1c0 <RCCEx_PLL3_Config>
 80096a2:	4603      	mov	r3, r0
 80096a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80096a6:	e009      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	75fb      	strb	r3, [r7, #23]
      break;
 80096ac:	e006      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80096ae:	bf00      	nop
 80096b0:	e004      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80096b2:	bf00      	nop
 80096b4:	e002      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80096b6:	bf00      	nop
 80096b8:	e000      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80096ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10a      	bne.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80096c2:	4b4b      	ldr	r3, [pc, #300]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80096c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80096d0:	4947      	ldr	r1, [pc, #284]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	658b      	str	r3, [r1, #88]	; 0x58
 80096d6:	e001      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d02f      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096f0:	d00e      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80096f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096f6:	d814      	bhi.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d015      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80096fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009700:	d10f      	bne.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009702:	4b3b      	ldr	r3, [pc, #236]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009706:	4a3a      	ldr	r2, [pc, #232]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800970c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800970e:	e00c      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3304      	adds	r3, #4
 8009714:	2101      	movs	r1, #1
 8009716:	4618      	mov	r0, r3
 8009718:	f001 fca0 	bl	800b05c <RCCEx_PLL2_Config>
 800971c:	4603      	mov	r3, r0
 800971e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009720:	e003      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	75fb      	strb	r3, [r7, #23]
      break;
 8009726:	e000      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d109      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009730:	4b2f      	ldr	r3, [pc, #188]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009734:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800973c:	492c      	ldr	r1, [pc, #176]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800973e:	4313      	orrs	r3, r2
 8009740:	650b      	str	r3, [r1, #80]	; 0x50
 8009742:	e001      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009744:	7dfb      	ldrb	r3, [r7, #23]
 8009746:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d032      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009758:	2b03      	cmp	r3, #3
 800975a:	d81b      	bhi.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800975c:	a201      	add	r2, pc, #4	; (adr r2, 8009764 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800975e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009762:	bf00      	nop
 8009764:	0800979b 	.word	0x0800979b
 8009768:	08009775 	.word	0x08009775
 800976c:	08009783 	.word	0x08009783
 8009770:	0800979b 	.word	0x0800979b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009774:	4b1e      	ldr	r3, [pc, #120]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009778:	4a1d      	ldr	r2, [pc, #116]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800977a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800977e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009780:	e00c      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	3304      	adds	r3, #4
 8009786:	2102      	movs	r1, #2
 8009788:	4618      	mov	r0, r3
 800978a:	f001 fc67 	bl	800b05c <RCCEx_PLL2_Config>
 800978e:	4603      	mov	r3, r0
 8009790:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009792:	e003      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	75fb      	strb	r3, [r7, #23]
      break;
 8009798:	e000      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800979a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800979c:	7dfb      	ldrb	r3, [r7, #23]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d109      	bne.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80097a2:	4b13      	ldr	r3, [pc, #76]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80097a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097a6:	f023 0203 	bic.w	r2, r3, #3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ae:	4910      	ldr	r1, [pc, #64]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80097b4:	e001      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 808a 	beq.w	80098dc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80097c8:	4b0a      	ldr	r3, [pc, #40]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a09      	ldr	r2, [pc, #36]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80097ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80097d4:	f7f9 ff7e 	bl	80036d4 <HAL_GetTick>
 80097d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097da:	e00d      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097dc:	f7f9 ff7a 	bl	80036d4 <HAL_GetTick>
 80097e0:	4602      	mov	r2, r0
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	2b64      	cmp	r3, #100	; 0x64
 80097e8:	d906      	bls.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80097ea:	2303      	movs	r3, #3
 80097ec:	75fb      	strb	r3, [r7, #23]
        break;
 80097ee:	e009      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80097f0:	58024400 	.word	0x58024400
 80097f4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097f8:	4bb9      	ldr	r3, [pc, #740]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009800:	2b00      	cmp	r3, #0
 8009802:	d0eb      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8009804:	7dfb      	ldrb	r3, [r7, #23]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d166      	bne.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800980a:	4bb6      	ldr	r3, [pc, #728]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800980c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009814:	4053      	eors	r3, r2
 8009816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800981a:	2b00      	cmp	r3, #0
 800981c:	d013      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800981e:	4bb1      	ldr	r3, [pc, #708]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009826:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009828:	4bae      	ldr	r3, [pc, #696]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800982a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800982c:	4aad      	ldr	r2, [pc, #692]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800982e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009832:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009834:	4bab      	ldr	r3, [pc, #684]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009838:	4aaa      	ldr	r2, [pc, #680]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800983a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800983e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009840:	4aa8      	ldr	r2, [pc, #672]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800984c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009850:	d115      	bne.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009852:	f7f9 ff3f 	bl	80036d4 <HAL_GetTick>
 8009856:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009858:	e00b      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800985a:	f7f9 ff3b 	bl	80036d4 <HAL_GetTick>
 800985e:	4602      	mov	r2, r0
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	f241 3288 	movw	r2, #5000	; 0x1388
 8009868:	4293      	cmp	r3, r2
 800986a:	d902      	bls.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800986c:	2303      	movs	r3, #3
 800986e:	75fb      	strb	r3, [r7, #23]
            break;
 8009870:	e005      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009872:	4b9c      	ldr	r3, [pc, #624]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009876:	f003 0302 	and.w	r3, r3, #2
 800987a:	2b00      	cmp	r3, #0
 800987c:	d0ed      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800987e:	7dfb      	ldrb	r3, [r7, #23]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d126      	bne.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800988a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800988e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009892:	d10d      	bne.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8009894:	4b93      	ldr	r3, [pc, #588]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80098a2:	0919      	lsrs	r1, r3, #4
 80098a4:	4b90      	ldr	r3, [pc, #576]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80098a6:	400b      	ands	r3, r1
 80098a8:	498e      	ldr	r1, [pc, #568]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	610b      	str	r3, [r1, #16]
 80098ae:	e005      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80098b0:	4b8c      	ldr	r3, [pc, #560]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	4a8b      	ldr	r2, [pc, #556]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80098b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80098ba:	6113      	str	r3, [r2, #16]
 80098bc:	4b89      	ldr	r3, [pc, #548]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80098be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80098c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098ca:	4986      	ldr	r1, [pc, #536]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	670b      	str	r3, [r1, #112]	; 0x70
 80098d0:	e004      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80098d2:	7dfb      	ldrb	r3, [r7, #23]
 80098d4:	75bb      	strb	r3, [r7, #22]
 80098d6:	e001      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d8:	7dfb      	ldrb	r3, [r7, #23]
 80098da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d07e      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098ec:	2b28      	cmp	r3, #40	; 0x28
 80098ee:	d867      	bhi.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80098f0:	a201      	add	r2, pc, #4	; (adr r2, 80098f8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80098f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f6:	bf00      	nop
 80098f8:	080099c7 	.word	0x080099c7
 80098fc:	080099c1 	.word	0x080099c1
 8009900:	080099c1 	.word	0x080099c1
 8009904:	080099c1 	.word	0x080099c1
 8009908:	080099c1 	.word	0x080099c1
 800990c:	080099c1 	.word	0x080099c1
 8009910:	080099c1 	.word	0x080099c1
 8009914:	080099c1 	.word	0x080099c1
 8009918:	0800999d 	.word	0x0800999d
 800991c:	080099c1 	.word	0x080099c1
 8009920:	080099c1 	.word	0x080099c1
 8009924:	080099c1 	.word	0x080099c1
 8009928:	080099c1 	.word	0x080099c1
 800992c:	080099c1 	.word	0x080099c1
 8009930:	080099c1 	.word	0x080099c1
 8009934:	080099c1 	.word	0x080099c1
 8009938:	080099af 	.word	0x080099af
 800993c:	080099c1 	.word	0x080099c1
 8009940:	080099c1 	.word	0x080099c1
 8009944:	080099c1 	.word	0x080099c1
 8009948:	080099c1 	.word	0x080099c1
 800994c:	080099c1 	.word	0x080099c1
 8009950:	080099c1 	.word	0x080099c1
 8009954:	080099c1 	.word	0x080099c1
 8009958:	080099c7 	.word	0x080099c7
 800995c:	080099c1 	.word	0x080099c1
 8009960:	080099c1 	.word	0x080099c1
 8009964:	080099c1 	.word	0x080099c1
 8009968:	080099c1 	.word	0x080099c1
 800996c:	080099c1 	.word	0x080099c1
 8009970:	080099c1 	.word	0x080099c1
 8009974:	080099c1 	.word	0x080099c1
 8009978:	080099c7 	.word	0x080099c7
 800997c:	080099c1 	.word	0x080099c1
 8009980:	080099c1 	.word	0x080099c1
 8009984:	080099c1 	.word	0x080099c1
 8009988:	080099c1 	.word	0x080099c1
 800998c:	080099c1 	.word	0x080099c1
 8009990:	080099c1 	.word	0x080099c1
 8009994:	080099c1 	.word	0x080099c1
 8009998:	080099c7 	.word	0x080099c7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	3304      	adds	r3, #4
 80099a0:	2101      	movs	r1, #1
 80099a2:	4618      	mov	r0, r3
 80099a4:	f001 fb5a 	bl	800b05c <RCCEx_PLL2_Config>
 80099a8:	4603      	mov	r3, r0
 80099aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80099ac:	e00c      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	3324      	adds	r3, #36	; 0x24
 80099b2:	2101      	movs	r1, #1
 80099b4:	4618      	mov	r0, r3
 80099b6:	f001 fc03 	bl	800b1c0 <RCCEx_PLL3_Config>
 80099ba:	4603      	mov	r3, r0
 80099bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80099be:	e003      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	75fb      	strb	r3, [r7, #23]
      break;
 80099c4:	e000      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80099c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d109      	bne.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80099ce:	4b45      	ldr	r3, [pc, #276]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80099d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099da:	4942      	ldr	r1, [pc, #264]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80099dc:	4313      	orrs	r3, r2
 80099de:	654b      	str	r3, [r1, #84]	; 0x54
 80099e0:	e001      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
 80099e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d037      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f6:	2b05      	cmp	r3, #5
 80099f8:	d820      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80099fa:	a201      	add	r2, pc, #4	; (adr r2, 8009a00 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80099fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a00:	08009a43 	.word	0x08009a43
 8009a04:	08009a19 	.word	0x08009a19
 8009a08:	08009a2b 	.word	0x08009a2b
 8009a0c:	08009a43 	.word	0x08009a43
 8009a10:	08009a43 	.word	0x08009a43
 8009a14:	08009a43 	.word	0x08009a43
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	2101      	movs	r1, #1
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f001 fb1c 	bl	800b05c <RCCEx_PLL2_Config>
 8009a24:	4603      	mov	r3, r0
 8009a26:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a28:	e00c      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3324      	adds	r3, #36	; 0x24
 8009a2e:	2101      	movs	r1, #1
 8009a30:	4618      	mov	r0, r3
 8009a32:	f001 fbc5 	bl	800b1c0 <RCCEx_PLL3_Config>
 8009a36:	4603      	mov	r3, r0
 8009a38:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a3a:	e003      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a40:	e000      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8009a42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a44:	7dfb      	ldrb	r3, [r7, #23]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d109      	bne.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a4a:	4b26      	ldr	r3, [pc, #152]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4e:	f023 0207 	bic.w	r2, r3, #7
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a56:	4923      	ldr	r1, [pc, #140]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	654b      	str	r3, [r1, #84]	; 0x54
 8009a5c:	e001      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a5e:	7dfb      	ldrb	r3, [r7, #23]
 8009a60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0304 	and.w	r3, r3, #4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d040      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a74:	2b05      	cmp	r3, #5
 8009a76:	d821      	bhi.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8009a78:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8009a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7e:	bf00      	nop
 8009a80:	08009ac3 	.word	0x08009ac3
 8009a84:	08009a99 	.word	0x08009a99
 8009a88:	08009aab 	.word	0x08009aab
 8009a8c:	08009ac3 	.word	0x08009ac3
 8009a90:	08009ac3 	.word	0x08009ac3
 8009a94:	08009ac3 	.word	0x08009ac3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f001 fadc 	bl	800b05c <RCCEx_PLL2_Config>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009aa8:	e00c      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3324      	adds	r3, #36	; 0x24
 8009aae:	2101      	movs	r1, #1
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f001 fb85 	bl	800b1c0 <RCCEx_PLL3_Config>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009aba:	e003      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac0:	e000      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8009ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d110      	bne.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009aca:	4b06      	ldr	r3, [pc, #24]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ace:	f023 0207 	bic.w	r2, r3, #7
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ad8:	4902      	ldr	r1, [pc, #8]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	658b      	str	r3, [r1, #88]	; 0x58
 8009ade:	e007      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8009ae0:	58024800 	.word	0x58024800
 8009ae4:	58024400 	.word	0x58024400
 8009ae8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aec:	7dfb      	ldrb	r3, [r7, #23]
 8009aee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 0320 	and.w	r3, r3, #32
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d04b      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b06:	d02e      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b0c:	d828      	bhi.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b12:	d02a      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b18:	d822      	bhi.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009b1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b1e:	d026      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009b20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b24:	d81c      	bhi.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b2a:	d010      	beq.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8009b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b30:	d816      	bhi.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d01d      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8009b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b3a:	d111      	bne.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	2100      	movs	r1, #0
 8009b42:	4618      	mov	r0, r3
 8009b44:	f001 fa8a 	bl	800b05c <RCCEx_PLL2_Config>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b4c:	e012      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	3324      	adds	r3, #36	; 0x24
 8009b52:	2102      	movs	r1, #2
 8009b54:	4618      	mov	r0, r3
 8009b56:	f001 fb33 	bl	800b1c0 <RCCEx_PLL3_Config>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b5e:	e009      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	75fb      	strb	r3, [r7, #23]
      break;
 8009b64:	e006      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8009b66:	bf00      	nop
 8009b68:	e004      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8009b6a:	bf00      	nop
 8009b6c:	e002      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8009b6e:	bf00      	nop
 8009b70:	e000      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8009b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10a      	bne.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b7a:	4bb2      	ldr	r3, [pc, #712]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b88:	49ae      	ldr	r1, [pc, #696]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	654b      	str	r3, [r1, #84]	; 0x54
 8009b8e:	e001      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b90:	7dfb      	ldrb	r3, [r7, #23]
 8009b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d04b      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ba6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009baa:	d02e      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009bac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009bb0:	d828      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bb6:	d02a      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bbc:	d822      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009bbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bc2:	d026      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009bc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bc8:	d81c      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bce:	d010      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8009bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bd4:	d816      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d01d      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8009bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bde:	d111      	bne.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3304      	adds	r3, #4
 8009be4:	2100      	movs	r1, #0
 8009be6:	4618      	mov	r0, r3
 8009be8:	f001 fa38 	bl	800b05c <RCCEx_PLL2_Config>
 8009bec:	4603      	mov	r3, r0
 8009bee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009bf0:	e012      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3324      	adds	r3, #36	; 0x24
 8009bf6:	2102      	movs	r1, #2
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f001 fae1 	bl	800b1c0 <RCCEx_PLL3_Config>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009c02:	e009      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	75fb      	strb	r3, [r7, #23]
      break;
 8009c08:	e006      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009c0a:	bf00      	nop
 8009c0c:	e004      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009c0e:	bf00      	nop
 8009c10:	e002      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009c12:	bf00      	nop
 8009c14:	e000      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c18:	7dfb      	ldrb	r3, [r7, #23]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c1e:	4b89      	ldr	r3, [pc, #548]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c2c:	4985      	ldr	r1, [pc, #532]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	658b      	str	r3, [r1, #88]	; 0x58
 8009c32:	e001      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c34:	7dfb      	ldrb	r3, [r7, #23]
 8009c36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d04b      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c4e:	d02e      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009c50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c54:	d828      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c5a:	d02a      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c60:	d822      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009c62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c66:	d026      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009c68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c6c:	d81c      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c72:	d010      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8009c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c78:	d816      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d01d      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8009c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c82:	d111      	bne.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3304      	adds	r3, #4
 8009c88:	2100      	movs	r1, #0
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f001 f9e6 	bl	800b05c <RCCEx_PLL2_Config>
 8009c90:	4603      	mov	r3, r0
 8009c92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009c94:	e012      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	3324      	adds	r3, #36	; 0x24
 8009c9a:	2102      	movs	r1, #2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f001 fa8f 	bl	800b1c0 <RCCEx_PLL3_Config>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009ca6:	e009      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	75fb      	strb	r3, [r7, #23]
      break;
 8009cac:	e006      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009cae:	bf00      	nop
 8009cb0:	e004      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009cb2:	bf00      	nop
 8009cb4:	e002      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009cb6:	bf00      	nop
 8009cb8:	e000      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009cc2:	4b60      	ldr	r3, [pc, #384]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009cd0:	495c      	ldr	r1, [pc, #368]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	658b      	str	r3, [r1, #88]	; 0x58
 8009cd6:	e001      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
 8009cda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0308 	and.w	r3, r3, #8
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d018      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf0:	d10a      	bne.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	3324      	adds	r3, #36	; 0x24
 8009cf6:	2102      	movs	r1, #2
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f001 fa61 	bl	800b1c0 <RCCEx_PLL3_Config>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009d08:	4b4e      	ldr	r3, [pc, #312]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d14:	494b      	ldr	r1, [pc, #300]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009d16:	4313      	orrs	r3, r2
 8009d18:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f003 0310 	and.w	r3, r3, #16
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d01a      	beq.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d30:	d10a      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3324      	adds	r3, #36	; 0x24
 8009d36:	2102      	movs	r1, #2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f001 fa41 	bl	800b1c0 <RCCEx_PLL3_Config>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d48:	4b3e      	ldr	r3, [pc, #248]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d56:	493b      	ldr	r1, [pc, #236]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d034      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d72:	d01d      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009d74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d78:	d817      	bhi.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d82:	d009      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009d84:	e011      	b.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3304      	adds	r3, #4
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f001 f965 	bl	800b05c <RCCEx_PLL2_Config>
 8009d92:	4603      	mov	r3, r0
 8009d94:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009d96:	e00c      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	3324      	adds	r3, #36	; 0x24
 8009d9c:	2102      	movs	r1, #2
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f001 fa0e 	bl	800b1c0 <RCCEx_PLL3_Config>
 8009da4:	4603      	mov	r3, r0
 8009da6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009da8:	e003      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	75fb      	strb	r3, [r7, #23]
      break;
 8009dae:	e000      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009db2:	7dfb      	ldrb	r3, [r7, #23]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10a      	bne.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009db8:	4b22      	ldr	r3, [pc, #136]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009dc6:	491f      	ldr	r1, [pc, #124]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	658b      	str	r3, [r1, #88]	; 0x58
 8009dcc:	e001      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dce:	7dfb      	ldrb	r3, [r7, #23]
 8009dd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d036      	beq.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009de4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009de8:	d01c      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009dea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009dee:	d816      	bhi.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009df4:	d003      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009df6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dfa:	d007      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009dfc:	e00f      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dfe:	4b11      	ldr	r3, [pc, #68]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e02:	4a10      	ldr	r2, [pc, #64]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009e0a:	e00c      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	3324      	adds	r3, #36	; 0x24
 8009e10:	2101      	movs	r1, #1
 8009e12:	4618      	mov	r0, r3
 8009e14:	f001 f9d4 	bl	800b1c0 <RCCEx_PLL3_Config>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009e1c:	e003      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	75fb      	strb	r3, [r7, #23]
      break;
 8009e22:	e000      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10d      	bne.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e2c:	4b05      	ldr	r3, [pc, #20]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e3a:	4902      	ldr	r1, [pc, #8]	; (8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	654b      	str	r3, [r1, #84]	; 0x54
 8009e40:	e004      	b.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8009e42:	bf00      	nop
 8009e44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e48:	7dfb      	ldrb	r3, [r7, #23]
 8009e4a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d029      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d003      	beq.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e64:	d007      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009e66:	e00f      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e68:	4b61      	ldr	r3, [pc, #388]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6c:	4a60      	ldr	r2, [pc, #384]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009e74:	e00b      	b.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	3304      	adds	r3, #4
 8009e7a:	2102      	movs	r1, #2
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f001 f8ed 	bl	800b05c <RCCEx_PLL2_Config>
 8009e82:	4603      	mov	r3, r0
 8009e84:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009e86:	e002      	b.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e8e:	7dfb      	ldrb	r3, [r7, #23]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d109      	bne.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e94:	4b56      	ldr	r3, [pc, #344]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ea0:	4953      	ldr	r1, [pc, #332]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009ea6:	e001      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea8:	7dfb      	ldrb	r3, [r7, #23]
 8009eaa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00a      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	3324      	adds	r3, #36	; 0x24
 8009ebc:	2102      	movs	r1, #2
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f001 f97e 	bl	800b1c0 <RCCEx_PLL3_Config>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d030      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ee2:	d017      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ee8:	d811      	bhi.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eee:	d013      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8009ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ef4:	d80b      	bhi.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d010      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8009efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009efe:	d106      	bne.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f00:	4b3b      	ldr	r3, [pc, #236]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	4a3a      	ldr	r2, [pc, #232]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009f0c:	e007      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	75fb      	strb	r3, [r7, #23]
      break;
 8009f12:	e004      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009f14:	bf00      	nop
 8009f16:	e002      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009f18:	bf00      	nop
 8009f1a:	e000      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f1e:	7dfb      	ldrb	r3, [r7, #23]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d109      	bne.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f24:	4b32      	ldr	r3, [pc, #200]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f30:	492f      	ldr	r1, [pc, #188]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009f32:	4313      	orrs	r3, r2
 8009f34:	654b      	str	r3, [r1, #84]	; 0x54
 8009f36:	e001      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f38:	7dfb      	ldrb	r3, [r7, #23]
 8009f3a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d008      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f48:	4b29      	ldr	r3, [pc, #164]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f54:	4926      	ldr	r1, [pc, #152]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d008      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f66:	4b22      	ldr	r3, [pc, #136]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f6a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f72:	491f      	ldr	r1, [pc, #124]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009f74:	4313      	orrs	r3, r2
 8009f76:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00d      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f84:	4b1a      	ldr	r3, [pc, #104]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	4a19      	ldr	r2, [pc, #100]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009f8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f8e:	6113      	str	r3, [r2, #16]
 8009f90:	4b17      	ldr	r3, [pc, #92]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009f92:	691a      	ldr	r2, [r3, #16]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f9a:	4915      	ldr	r1, [pc, #84]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	da08      	bge.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009fa8:	4b11      	ldr	r3, [pc, #68]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb4:	490e      	ldr	r1, [pc, #56]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d009      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009fc6:	4b0a      	ldr	r3, [pc, #40]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fd4:	4906      	ldr	r1, [pc, #24]	; (8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009fda:	7dbb      	ldrb	r3, [r7, #22]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	e000      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	58024400 	.word	0x58024400

08009ff4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b090      	sub	sp, #64	; 0x40
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a002:	f040 8089 	bne.w	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a006:	4b95      	ldr	r3, [pc, #596]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a00a:	f003 0307 	and.w	r3, r3, #7
 800a00e:	633b      	str	r3, [r7, #48]	; 0x30
 800a010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a012:	2b04      	cmp	r3, #4
 800a014:	d87d      	bhi.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800a016:	a201      	add	r2, pc, #4	; (adr r2, 800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800a018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01c:	0800a031 	.word	0x0800a031
 800a020:	0800a055 	.word	0x0800a055
 800a024:	0800a079 	.word	0x0800a079
 800a028:	0800a10d 	.word	0x0800a10d
 800a02c:	0800a09d 	.word	0x0800a09d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a030:	4b8a      	ldr	r3, [pc, #552]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a03c:	d107      	bne.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a03e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a042:	4618      	mov	r0, r3
 800a044:	f000 feb8 	bl	800adb8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a04c:	e3ed      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a052:	e3ea      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a054:	4b81      	ldr	r3, [pc, #516]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a05c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a060:	d107      	bne.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a062:	f107 0318 	add.w	r3, r7, #24
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fbfe 	bl	800a868 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a070:	e3db      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a076:	e3d8      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a078:	4b78      	ldr	r3, [pc, #480]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a084:	d107      	bne.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a086:	f107 030c 	add.w	r3, r7, #12
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 fd40 	bl	800ab10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a094:	e3c9      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a09a:	e3c6      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a09c:	4b6f      	ldr	r3, [pc, #444]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a09e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0a4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0a6:	4b6d      	ldr	r3, [pc, #436]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0304 	and.w	r3, r3, #4
 800a0ae:	2b04      	cmp	r3, #4
 800a0b0:	d10c      	bne.n	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d109      	bne.n	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0b8:	4b68      	ldr	r3, [pc, #416]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	08db      	lsrs	r3, r3, #3
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	4a67      	ldr	r2, [pc, #412]	; (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800a0c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0ca:	e01e      	b.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0cc:	4b63      	ldr	r3, [pc, #396]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d8:	d106      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0e0:	d102      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a0e2:	4b60      	ldr	r3, [pc, #384]	; (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0e6:	e010      	b.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0e8:	4b5c      	ldr	r3, [pc, #368]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0f4:	d106      	bne.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0fc:	d102      	bne.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a0fe:	4b5a      	ldr	r3, [pc, #360]	; (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a100:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a102:	e002      	b.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a108:	e38f      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a10a:	e38e      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a10c:	4b57      	ldr	r3, [pc, #348]	; (800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a10e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a110:	e38b      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800a112:	2300      	movs	r3, #0
 800a114:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a116:	e388      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a11e:	f040 80a7 	bne.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a122:	4b4e      	ldr	r3, [pc, #312]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a126:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a12a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a132:	d054      	beq.n	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a136:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a13a:	f200 808b 	bhi.w	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a140:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a144:	f000 8083 	beq.w	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a14e:	f200 8081 	bhi.w	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a158:	d02f      	beq.n	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a160:	d878      	bhi.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	2b00      	cmp	r3, #0
 800a166:	d004      	beq.n	800a172 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a16e:	d012      	beq.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800a170:	e070      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a172:	4b3a      	ldr	r3, [pc, #232]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a17a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a17e:	d107      	bne.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a184:	4618      	mov	r0, r3
 800a186:	f000 fe17 	bl	800adb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a18e:	e34c      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a190:	2300      	movs	r3, #0
 800a192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a194:	e349      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a196:	4b31      	ldr	r3, [pc, #196]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a19e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1a2:	d107      	bne.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1a4:	f107 0318 	add.w	r3, r7, #24
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 fb5d 	bl	800a868 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1b2:	e33a      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1b8:	e337      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1ba:	4b28      	ldr	r3, [pc, #160]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1c6:	d107      	bne.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1c8:	f107 030c 	add.w	r3, r7, #12
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 fc9f 	bl	800ab10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1d6:	e328      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1dc:	e325      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a1de:	4b1f      	ldr	r3, [pc, #124]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1e6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1e8:	4b1c      	ldr	r3, [pc, #112]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0304 	and.w	r3, r3, #4
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d10c      	bne.n	800a20e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800a1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d109      	bne.n	800a20e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a1fa:	4b18      	ldr	r3, [pc, #96]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	08db      	lsrs	r3, r3, #3
 800a200:	f003 0303 	and.w	r3, r3, #3
 800a204:	4a16      	ldr	r2, [pc, #88]	; (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800a206:	fa22 f303 	lsr.w	r3, r2, r3
 800a20a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a20c:	e01e      	b.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a20e:	4b13      	ldr	r3, [pc, #76]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a21a:	d106      	bne.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800a21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a21e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a222:	d102      	bne.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a224:	4b0f      	ldr	r3, [pc, #60]	; (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a226:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a228:	e010      	b.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a22a:	4b0c      	ldr	r3, [pc, #48]	; (800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a236:	d106      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800a238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a23a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a23e:	d102      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a240:	4b09      	ldr	r3, [pc, #36]	; (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a242:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a244:	e002      	b.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a24a:	e2ee      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a24c:	e2ed      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a24e:	4b07      	ldr	r3, [pc, #28]	; (800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a250:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a252:	e2ea      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a258:	e2e7      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a25a:	bf00      	nop
 800a25c:	58024400 	.word	0x58024400
 800a260:	03d09000 	.word	0x03d09000
 800a264:	003d0900 	.word	0x003d0900
 800a268:	017d7840 	.word	0x017d7840
 800a26c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a276:	f040 809c 	bne.w	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a27a:	4b9e      	ldr	r3, [pc, #632]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a27c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a27e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a282:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a286:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a28a:	d054      	beq.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a292:	f200 808b 	bhi.w	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800a296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a298:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a29c:	f000 8083 	beq.w	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2a6:	f200 8081 	bhi.w	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2b0:	d02f      	beq.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2b8:	d878      	bhi.n	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d004      	beq.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2c6:	d012      	beq.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a2c8:	e070      	b.n	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2ca:	4b8a      	ldr	r3, [pc, #552]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2d6:	d107      	bne.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 fd6b 	bl	800adb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a2e6:	e2a0      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ec:	e29d      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2ee:	4b81      	ldr	r3, [pc, #516]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2fa:	d107      	bne.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2fc:	f107 0318 	add.w	r3, r7, #24
 800a300:	4618      	mov	r0, r3
 800a302:	f000 fab1 	bl	800a868 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a30a:	e28e      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a310:	e28b      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a312:	4b78      	ldr	r3, [pc, #480]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a31a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a31e:	d107      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a320:	f107 030c 	add.w	r3, r7, #12
 800a324:	4618      	mov	r0, r3
 800a326:	f000 fbf3 	bl	800ab10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a32e:	e27c      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a334:	e279      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a336:	4b6f      	ldr	r3, [pc, #444]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a33a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a33e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a340:	4b6c      	ldr	r3, [pc, #432]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0304 	and.w	r3, r3, #4
 800a348:	2b04      	cmp	r3, #4
 800a34a:	d10c      	bne.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d109      	bne.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a352:	4b68      	ldr	r3, [pc, #416]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	08db      	lsrs	r3, r3, #3
 800a358:	f003 0303 	and.w	r3, r3, #3
 800a35c:	4a66      	ldr	r2, [pc, #408]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a35e:	fa22 f303 	lsr.w	r3, r2, r3
 800a362:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a364:	e01e      	b.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a366:	4b63      	ldr	r3, [pc, #396]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a372:	d106      	bne.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800a374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a37a:	d102      	bne.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a37c:	4b5f      	ldr	r3, [pc, #380]	; (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a37e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a380:	e010      	b.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a382:	4b5c      	ldr	r3, [pc, #368]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a38a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a38e:	d106      	bne.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800a390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a396:	d102      	bne.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a398:	4b59      	ldr	r3, [pc, #356]	; (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a39a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a39c:	e002      	b.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a3a2:	e242      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a3a4:	e241      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a3a6:	4b57      	ldr	r3, [pc, #348]	; (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3aa:	e23e      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3b0:	e23b      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3b8:	f040 80a6 	bne.w	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a3bc:	4b4d      	ldr	r3, [pc, #308]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a3be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a3c4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3cc:	d054      	beq.n	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3d4:	f200 808b 	bhi.w	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3de:	f000 8083 	beq.w	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3e8:	f200 8081 	bhi.w	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3f2:	d02f      	beq.n	800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3fa:	d878      	bhi.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d004      	beq.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a408:	d012      	beq.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800a40a:	e070      	b.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a40c:	4b39      	ldr	r3, [pc, #228]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a414:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a418:	d107      	bne.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a41a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a41e:	4618      	mov	r0, r3
 800a420:	f000 fcca 	bl	800adb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a426:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a428:	e1ff      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a42e:	e1fc      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a430:	4b30      	ldr	r3, [pc, #192]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a438:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a43c:	d107      	bne.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a43e:	f107 0318 	add.w	r3, r7, #24
 800a442:	4618      	mov	r0, r3
 800a444:	f000 fa10 	bl	800a868 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a44c:	e1ed      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a44e:	2300      	movs	r3, #0
 800a450:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a452:	e1ea      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a454:	4b27      	ldr	r3, [pc, #156]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a45c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a460:	d107      	bne.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a462:	f107 030c 	add.w	r3, r7, #12
 800a466:	4618      	mov	r0, r3
 800a468:	f000 fb52 	bl	800ab10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a470:	e1db      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a472:	2300      	movs	r3, #0
 800a474:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a476:	e1d8      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a478:	4b1e      	ldr	r3, [pc, #120]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a47a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a47c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a480:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a482:	4b1c      	ldr	r3, [pc, #112]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f003 0304 	and.w	r3, r3, #4
 800a48a:	2b04      	cmp	r3, #4
 800a48c:	d10c      	bne.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800a48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a490:	2b00      	cmp	r3, #0
 800a492:	d109      	bne.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a494:	4b17      	ldr	r3, [pc, #92]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	08db      	lsrs	r3, r3, #3
 800a49a:	f003 0303 	and.w	r3, r3, #3
 800a49e:	4a16      	ldr	r2, [pc, #88]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4a6:	e01e      	b.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4a8:	4b12      	ldr	r3, [pc, #72]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4b4:	d106      	bne.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4bc:	d102      	bne.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a4be:	4b0f      	ldr	r3, [pc, #60]	; (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4c2:	e010      	b.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4c4:	4b0b      	ldr	r3, [pc, #44]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4d0:	d106      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800a4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4d8:	d102      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a4da:	4b09      	ldr	r3, [pc, #36]	; (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4de:	e002      	b.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a4e4:	e1a1      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a4e6:	e1a0      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a4e8:	4b06      	ldr	r3, [pc, #24]	; (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4ec:	e19d      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4f2:	e19a      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a4f4:	58024400 	.word	0x58024400
 800a4f8:	03d09000 	.word	0x03d09000
 800a4fc:	003d0900 	.word	0x003d0900
 800a500:	017d7840 	.word	0x017d7840
 800a504:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a50e:	d173      	bne.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a510:	4b9a      	ldr	r3, [pc, #616]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a518:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a520:	d02f      	beq.n	800a582 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800a522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a524:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a528:	d863      	bhi.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800a52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d004      	beq.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800a530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a536:	d012      	beq.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800a538:	e05b      	b.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a53a:	4b90      	ldr	r3, [pc, #576]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a546:	d107      	bne.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a548:	f107 0318 	add.w	r3, r7, #24
 800a54c:	4618      	mov	r0, r3
 800a54e:	f000 f98b 	bl	800a868 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a556:	e168      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a558:	2300      	movs	r3, #0
 800a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a55c:	e165      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a55e:	4b87      	ldr	r3, [pc, #540]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a56a:	d107      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a56c:	f107 030c 	add.w	r3, r7, #12
 800a570:	4618      	mov	r0, r3
 800a572:	f000 facd 	bl	800ab10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a57a:	e156      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a57c:	2300      	movs	r3, #0
 800a57e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a580:	e153      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a582:	4b7e      	ldr	r3, [pc, #504]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a586:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a58a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a58c:	4b7b      	ldr	r3, [pc, #492]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 0304 	and.w	r3, r3, #4
 800a594:	2b04      	cmp	r3, #4
 800a596:	d10c      	bne.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800a598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d109      	bne.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a59e:	4b77      	ldr	r3, [pc, #476]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	08db      	lsrs	r3, r3, #3
 800a5a4:	f003 0303 	and.w	r3, r3, #3
 800a5a8:	4a75      	ldr	r2, [pc, #468]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a5aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5b0:	e01e      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5b2:	4b72      	ldr	r3, [pc, #456]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5be:	d106      	bne.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800a5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5c6:	d102      	bne.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a5c8:	4b6e      	ldr	r3, [pc, #440]	; (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800a5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5cc:	e010      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5ce:	4b6b      	ldr	r3, [pc, #428]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5da:	d106      	bne.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5e2:	d102      	bne.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a5e4:	4b68      	ldr	r3, [pc, #416]	; (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800a5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5e8:	e002      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a5ee:	e11c      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a5f0:	e11b      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5f6:	e118      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5fe:	d133      	bne.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a600:	4b5e      	ldr	r3, [pc, #376]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a608:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d004      	beq.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800a610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a616:	d012      	beq.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800a618:	e023      	b.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a61a:	4b58      	ldr	r3, [pc, #352]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a626:	d107      	bne.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 fbc3 	bl	800adb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a634:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a636:	e0f8      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a638:	2300      	movs	r3, #0
 800a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a63c:	e0f5      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a63e:	4b4f      	ldr	r3, [pc, #316]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a64a:	d107      	bne.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a64c:	f107 0318 	add.w	r3, r7, #24
 800a650:	4618      	mov	r0, r3
 800a652:	f000 f909 	bl	800a868 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a65a:	e0e6      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a660:	e0e3      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a666:	e0e0      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a66e:	f040 808d 	bne.w	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a672:	4b42      	ldr	r3, [pc, #264]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a676:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a67a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a682:	d06b      	beq.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a68a:	d874      	bhi.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a692:	d056      	beq.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800a694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a69a:	d86c      	bhi.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6a2:	d03b      	beq.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800a6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6aa:	d864      	bhi.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6b2:	d021      	beq.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6ba:	d85c      	bhi.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d004      	beq.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6c8:	d004      	beq.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800a6ca:	e054      	b.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a6cc:	f000 f8b6 	bl	800a83c <HAL_RCCEx_GetD3PCLK1Freq>
 800a6d0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a6d2:	e0aa      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6d4:	4b29      	ldr	r3, [pc, #164]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6e0:	d107      	bne.n	800a6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6e2:	f107 0318 	add.w	r3, r7, #24
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 f8be 	bl	800a868 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a6f0:	e09b      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6f6:	e098      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6f8:	4b20      	ldr	r3, [pc, #128]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a704:	d107      	bne.n	800a716 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a706:	f107 030c 	add.w	r3, r7, #12
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 fa00 	bl	800ab10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a714:	e089      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a71a:	e086      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a71c:	4b17      	ldr	r3, [pc, #92]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b04      	cmp	r3, #4
 800a726:	d109      	bne.n	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a728:	4b14      	ldr	r3, [pc, #80]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	08db      	lsrs	r3, r3, #3
 800a72e:	f003 0303 	and.w	r3, r3, #3
 800a732:	4a13      	ldr	r2, [pc, #76]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a734:	fa22 f303 	lsr.w	r3, r2, r3
 800a738:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a73a:	e076      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a740:	e073      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a742:	4b0e      	ldr	r3, [pc, #56]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a74a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a74e:	d102      	bne.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800a750:	4b0c      	ldr	r3, [pc, #48]	; (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800a752:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a754:	e069      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a75a:	e066      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a75c:	4b07      	ldr	r3, [pc, #28]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a768:	d102      	bne.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800a76a:	4b07      	ldr	r3, [pc, #28]	; (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800a76c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a76e:	e05c      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a770:	2300      	movs	r3, #0
 800a772:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a774:	e059      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a776:	2300      	movs	r3, #0
 800a778:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a77a:	e056      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a77c:	58024400 	.word	0x58024400
 800a780:	03d09000 	.word	0x03d09000
 800a784:	003d0900 	.word	0x003d0900
 800a788:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a792:	d148      	bne.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a794:	4b27      	ldr	r3, [pc, #156]	; (800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a79c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7a4:	d02a      	beq.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7ac:	d838      	bhi.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d004      	beq.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7ba:	d00d      	beq.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800a7bc:	e030      	b.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a7be:	4b1d      	ldr	r3, [pc, #116]	; (800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7ca:	d102      	bne.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800a7cc:	4b1a      	ldr	r3, [pc, #104]	; (800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a7d0:	e02b      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7d6:	e028      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7d8:	4b16      	ldr	r3, [pc, #88]	; (800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7e4:	d107      	bne.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 fae4 	bl	800adb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a7f4:	e019      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7fa:	e016      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7fc:	4b0d      	ldr	r3, [pc, #52]	; (800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a808:	d107      	bne.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a80a:	f107 0318 	add.w	r3, r7, #24
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 f82a 	bl	800a868 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a818:	e007      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a81a:	2300      	movs	r3, #0
 800a81c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a81e:	e004      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a824:	e001      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800a826:	2300      	movs	r3, #0
 800a828:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3740      	adds	r7, #64	; 0x40
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	58024400 	.word	0x58024400
 800a838:	017d7840 	.word	0x017d7840

0800a83c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a840:	f7fe fc82 	bl	8009148 <HAL_RCC_GetHCLKFreq>
 800a844:	4602      	mov	r2, r0
 800a846:	4b06      	ldr	r3, [pc, #24]	; (800a860 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	091b      	lsrs	r3, r3, #4
 800a84c:	f003 0307 	and.w	r3, r3, #7
 800a850:	4904      	ldr	r1, [pc, #16]	; (800a864 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a852:	5ccb      	ldrb	r3, [r1, r3]
 800a854:	f003 031f 	and.w	r3, r3, #31
 800a858:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	58024400 	.word	0x58024400
 800a864:	0800f6c4 	.word	0x0800f6c4

0800a868 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a868:	b480      	push	{r7}
 800a86a:	b089      	sub	sp, #36	; 0x24
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a870:	4ba1      	ldr	r3, [pc, #644]	; (800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a874:	f003 0303 	and.w	r3, r3, #3
 800a878:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a87a:	4b9f      	ldr	r3, [pc, #636]	; (800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87e:	0b1b      	lsrs	r3, r3, #12
 800a880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a884:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a886:	4b9c      	ldr	r3, [pc, #624]	; (800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88a:	091b      	lsrs	r3, r3, #4
 800a88c:	f003 0301 	and.w	r3, r3, #1
 800a890:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a892:	4b99      	ldr	r3, [pc, #612]	; (800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a896:	08db      	lsrs	r3, r3, #3
 800a898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	fb02 f303 	mul.w	r3, r2, r3
 800a8a2:	ee07 3a90 	vmov	s15, r3
 800a8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f000 8111 	beq.w	800aad8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	f000 8083 	beq.w	800a9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	f200 80a1 	bhi.w	800aa08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d003      	beq.n	800a8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d056      	beq.n	800a980 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a8d2:	e099      	b.n	800aa08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8d4:	4b88      	ldr	r3, [pc, #544]	; (800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f003 0320 	and.w	r3, r3, #32
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d02d      	beq.n	800a93c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8e0:	4b85      	ldr	r3, [pc, #532]	; (800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	08db      	lsrs	r3, r3, #3
 800a8e6:	f003 0303 	and.w	r3, r3, #3
 800a8ea:	4a84      	ldr	r2, [pc, #528]	; (800aafc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a8ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a8f0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	ee07 3a90 	vmov	s15, r3
 800a8f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	ee07 3a90 	vmov	s15, r3
 800a902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a90a:	4b7b      	ldr	r3, [pc, #492]	; (800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a912:	ee07 3a90 	vmov	s15, r3
 800a916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a91a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a91e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a92a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a92e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a932:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a936:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a93a:	e087      	b.n	800aa4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	ee07 3a90 	vmov	s15, r3
 800a942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a946:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ab04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a94a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a94e:	4b6a      	ldr	r3, [pc, #424]	; (800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a956:	ee07 3a90 	vmov	s15, r3
 800a95a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a95e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a962:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a96a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a96e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a97a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a97e:	e065      	b.n	800aa4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	ee07 3a90 	vmov	s15, r3
 800a986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a98a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a98e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a992:	4b59      	ldr	r3, [pc, #356]	; (800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a99a:	ee07 3a90 	vmov	s15, r3
 800a99e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9c2:	e043      	b.n	800aa4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	ee07 3a90 	vmov	s15, r3
 800a9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a9d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9d6:	4b48      	ldr	r3, [pc, #288]	; (800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9de:	ee07 3a90 	vmov	s15, r3
 800a9e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa06:	e021      	b.n	800aa4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	ee07 3a90 	vmov	s15, r3
 800aa0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa1a:	4b37      	ldr	r3, [pc, #220]	; (800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa22:	ee07 3a90 	vmov	s15, r3
 800aa26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ab00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800aa4c:	4b2a      	ldr	r3, [pc, #168]	; (800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa50:	0a5b      	lsrs	r3, r3, #9
 800aa52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa56:	ee07 3a90 	vmov	s15, r3
 800aa5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa66:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa72:	ee17 2a90 	vmov	r2, s15
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800aa7a:	4b1f      	ldr	r3, [pc, #124]	; (800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7e:	0c1b      	lsrs	r3, r3, #16
 800aa80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa84:	ee07 3a90 	vmov	s15, r3
 800aa88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa90:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa94:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaa0:	ee17 2a90 	vmov	r2, s15
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800aaa8:	4b13      	ldr	r3, [pc, #76]	; (800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaac:	0e1b      	lsrs	r3, r3, #24
 800aaae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aab2:	ee07 3a90 	vmov	s15, r3
 800aab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aabe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aac2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aace:	ee17 2a90 	vmov	r2, s15
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800aad6:	e008      	b.n	800aaea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	609a      	str	r2, [r3, #8]
}
 800aaea:	bf00      	nop
 800aaec:	3724      	adds	r7, #36	; 0x24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	58024400 	.word	0x58024400
 800aafc:	03d09000 	.word	0x03d09000
 800ab00:	46000000 	.word	0x46000000
 800ab04:	4c742400 	.word	0x4c742400
 800ab08:	4a742400 	.word	0x4a742400
 800ab0c:	4bbebc20 	.word	0x4bbebc20

0800ab10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b089      	sub	sp, #36	; 0x24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab18:	4ba1      	ldr	r3, [pc, #644]	; (800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1c:	f003 0303 	and.w	r3, r3, #3
 800ab20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ab22:	4b9f      	ldr	r3, [pc, #636]	; (800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab26:	0d1b      	lsrs	r3, r3, #20
 800ab28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ab2e:	4b9c      	ldr	r3, [pc, #624]	; (800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab32:	0a1b      	lsrs	r3, r3, #8
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ab3a:	4b99      	ldr	r3, [pc, #612]	; (800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab3e:	08db      	lsrs	r3, r3, #3
 800ab40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	fb02 f303 	mul.w	r3, r2, r3
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 8111 	beq.w	800ad80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	f000 8083 	beq.w	800ac6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	f200 80a1 	bhi.w	800acb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d003      	beq.n	800ab7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d056      	beq.n	800ac28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ab7a:	e099      	b.n	800acb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab7c:	4b88      	ldr	r3, [pc, #544]	; (800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 0320 	and.w	r3, r3, #32
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d02d      	beq.n	800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab88:	4b85      	ldr	r3, [pc, #532]	; (800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	08db      	lsrs	r3, r3, #3
 800ab8e:	f003 0303 	and.w	r3, r3, #3
 800ab92:	4a84      	ldr	r2, [pc, #528]	; (800ada4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ab94:	fa22 f303 	lsr.w	r3, r2, r3
 800ab98:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	ee07 3a90 	vmov	s15, r3
 800aba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	ee07 3a90 	vmov	s15, r3
 800abaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abb2:	4b7b      	ldr	r3, [pc, #492]	; (800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abde:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800abe2:	e087      	b.n	800acf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	ee07 3a90 	vmov	s15, r3
 800abea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800adac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800abf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abf6:	4b6a      	ldr	r3, [pc, #424]	; (800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac26:	e065      	b.n	800acf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	ee07 3a90 	vmov	s15, r3
 800ac2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac3a:	4b59      	ldr	r3, [pc, #356]	; (800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac42:	ee07 3a90 	vmov	s15, r3
 800ac46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac6a:	e043      	b.n	800acf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	ee07 3a90 	vmov	s15, r3
 800ac72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ac7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac7e:	4b48      	ldr	r3, [pc, #288]	; (800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac86:	ee07 3a90 	vmov	s15, r3
 800ac8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac92:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acae:	e021      	b.n	800acf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	ee07 3a90 	vmov	s15, r3
 800acb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acc2:	4b37      	ldr	r3, [pc, #220]	; (800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acca:	ee07 3a90 	vmov	s15, r3
 800acce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ada8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ace2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ace6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acf2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800acf4:	4b2a      	ldr	r3, [pc, #168]	; (800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf8:	0a5b      	lsrs	r3, r3, #9
 800acfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad1a:	ee17 2a90 	vmov	r2, s15
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ad22:	4b1f      	ldr	r3, [pc, #124]	; (800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad26:	0c1b      	lsrs	r3, r3, #16
 800ad28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad2c:	ee07 3a90 	vmov	s15, r3
 800ad30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad48:	ee17 2a90 	vmov	r2, s15
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ad50:	4b13      	ldr	r3, [pc, #76]	; (800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad54:	0e1b      	lsrs	r3, r3, #24
 800ad56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad76:	ee17 2a90 	vmov	r2, s15
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ad7e:	e008      	b.n	800ad92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	609a      	str	r2, [r3, #8]
}
 800ad92:	bf00      	nop
 800ad94:	3724      	adds	r7, #36	; 0x24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	58024400 	.word	0x58024400
 800ada4:	03d09000 	.word	0x03d09000
 800ada8:	46000000 	.word	0x46000000
 800adac:	4c742400 	.word	0x4c742400
 800adb0:	4a742400 	.word	0x4a742400
 800adb4:	4bbebc20 	.word	0x4bbebc20

0800adb8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800adb8:	b480      	push	{r7}
 800adba:	b089      	sub	sp, #36	; 0x24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adc0:	4ba0      	ldr	r3, [pc, #640]	; (800b044 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc4:	f003 0303 	and.w	r3, r3, #3
 800adc8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800adca:	4b9e      	ldr	r3, [pc, #632]	; (800b044 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adce:	091b      	lsrs	r3, r3, #4
 800add0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800add4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800add6:	4b9b      	ldr	r3, [pc, #620]	; (800b044 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800add8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adda:	f003 0301 	and.w	r3, r3, #1
 800adde:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ade0:	4b98      	ldr	r3, [pc, #608]	; (800b044 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ade2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade4:	08db      	lsrs	r3, r3, #3
 800ade6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	fb02 f303 	mul.w	r3, r2, r3
 800adf0:	ee07 3a90 	vmov	s15, r3
 800adf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f000 8111 	beq.w	800b026 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	2b02      	cmp	r3, #2
 800ae08:	f000 8083 	beq.w	800af12 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	f200 80a1 	bhi.w	800af56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d056      	beq.n	800aece <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ae20:	e099      	b.n	800af56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae22:	4b88      	ldr	r3, [pc, #544]	; (800b044 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 0320 	and.w	r3, r3, #32
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d02d      	beq.n	800ae8a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae2e:	4b85      	ldr	r3, [pc, #532]	; (800b044 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	08db      	lsrs	r3, r3, #3
 800ae34:	f003 0303 	and.w	r3, r3, #3
 800ae38:	4a83      	ldr	r2, [pc, #524]	; (800b048 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ae3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae3e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	ee07 3a90 	vmov	s15, r3
 800ae46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	ee07 3a90 	vmov	s15, r3
 800ae50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae58:	4b7a      	ldr	r3, [pc, #488]	; (800b044 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae60:	ee07 3a90 	vmov	s15, r3
 800ae64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae68:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae6c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae84:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ae88:	e087      	b.n	800af9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	ee07 3a90 	vmov	s15, r3
 800ae90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae94:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b050 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ae98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae9c:	4b69      	ldr	r3, [pc, #420]	; (800b044 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aea4:	ee07 3a90 	vmov	s15, r3
 800aea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeac:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeb0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aeb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aebc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aecc:	e065      	b.n	800af9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	ee07 3a90 	vmov	s15, r3
 800aed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b054 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800aedc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee0:	4b58      	ldr	r3, [pc, #352]	; (800b044 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee8:	ee07 3a90 	vmov	s15, r3
 800aeec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef0:	ed97 6a03 	vldr	s12, [r7, #12]
 800aef4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aef8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aefc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af10:	e043      	b.n	800af9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	ee07 3a90 	vmov	s15, r3
 800af18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af1c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800af20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af24:	4b47      	ldr	r3, [pc, #284]	; (800b044 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af2c:	ee07 3a90 	vmov	s15, r3
 800af30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af34:	ed97 6a03 	vldr	s12, [r7, #12]
 800af38:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af54:	e021      	b.n	800af9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	ee07 3a90 	vmov	s15, r3
 800af5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af60:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b050 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af68:	4b36      	ldr	r3, [pc, #216]	; (800b044 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af70:	ee07 3a90 	vmov	s15, r3
 800af74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af78:	ed97 6a03 	vldr	s12, [r7, #12]
 800af7c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af98:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800af9a:	4b2a      	ldr	r3, [pc, #168]	; (800b044 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9e:	0a5b      	lsrs	r3, r3, #9
 800afa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afa4:	ee07 3a90 	vmov	s15, r3
 800afa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800afb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afc0:	ee17 2a90 	vmov	r2, s15
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800afc8:	4b1e      	ldr	r3, [pc, #120]	; (800b044 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afcc:	0c1b      	lsrs	r3, r3, #16
 800afce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd2:	ee07 3a90 	vmov	s15, r3
 800afd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afe2:	edd7 6a07 	vldr	s13, [r7, #28]
 800afe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afee:	ee17 2a90 	vmov	r2, s15
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800aff6:	4b13      	ldr	r3, [pc, #76]	; (800b044 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affa:	0e1b      	lsrs	r3, r3, #24
 800affc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b000:	ee07 3a90 	vmov	s15, r3
 800b004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b008:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b00c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b010:	edd7 6a07 	vldr	s13, [r7, #28]
 800b014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b01c:	ee17 2a90 	vmov	r2, s15
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b024:	e008      	b.n	800b038 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	609a      	str	r2, [r3, #8]
}
 800b038:	bf00      	nop
 800b03a:	3724      	adds	r7, #36	; 0x24
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr
 800b044:	58024400 	.word	0x58024400
 800b048:	03d09000 	.word	0x03d09000
 800b04c:	46000000 	.word	0x46000000
 800b050:	4c742400 	.word	0x4c742400
 800b054:	4a742400 	.word	0x4a742400
 800b058:	4bbebc20 	.word	0x4bbebc20

0800b05c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b06a:	4b53      	ldr	r3, [pc, #332]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06e:	f003 0303 	and.w	r3, r3, #3
 800b072:	2b03      	cmp	r3, #3
 800b074:	d101      	bne.n	800b07a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	e099      	b.n	800b1ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b07a:	4b4f      	ldr	r3, [pc, #316]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a4e      	ldr	r2, [pc, #312]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b080:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b086:	f7f8 fb25 	bl	80036d4 <HAL_GetTick>
 800b08a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b08c:	e008      	b.n	800b0a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b08e:	f7f8 fb21 	bl	80036d4 <HAL_GetTick>
 800b092:	4602      	mov	r2, r0
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d901      	bls.n	800b0a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b09c:	2303      	movs	r3, #3
 800b09e:	e086      	b.n	800b1ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0a0:	4b45      	ldr	r3, [pc, #276]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1f0      	bne.n	800b08e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b0ac:	4b42      	ldr	r3, [pc, #264]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b0ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	031b      	lsls	r3, r3, #12
 800b0ba:	493f      	ldr	r1, [pc, #252]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	628b      	str	r3, [r1, #40]	; 0x28
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	025b      	lsls	r3, r3, #9
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	431a      	orrs	r2, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	041b      	lsls	r3, r3, #16
 800b0de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b0e2:	431a      	orrs	r2, r3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	061b      	lsls	r3, r3, #24
 800b0ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b0f0:	4931      	ldr	r1, [pc, #196]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b0f6:	4b30      	ldr	r3, [pc, #192]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	695b      	ldr	r3, [r3, #20]
 800b102:	492d      	ldr	r1, [pc, #180]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b104:	4313      	orrs	r3, r2
 800b106:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b108:	4b2b      	ldr	r3, [pc, #172]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10c:	f023 0220 	bic.w	r2, r3, #32
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	4928      	ldr	r1, [pc, #160]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b116:	4313      	orrs	r3, r2
 800b118:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b11a:	4b27      	ldr	r3, [pc, #156]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11e:	4a26      	ldr	r2, [pc, #152]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b120:	f023 0310 	bic.w	r3, r3, #16
 800b124:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b126:	4b24      	ldr	r3, [pc, #144]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b128:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b12a:	4b24      	ldr	r3, [pc, #144]	; (800b1bc <RCCEx_PLL2_Config+0x160>)
 800b12c:	4013      	ands	r3, r2
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	69d2      	ldr	r2, [r2, #28]
 800b132:	00d2      	lsls	r2, r2, #3
 800b134:	4920      	ldr	r1, [pc, #128]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b136:	4313      	orrs	r3, r2
 800b138:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b13a:	4b1f      	ldr	r3, [pc, #124]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13e:	4a1e      	ldr	r2, [pc, #120]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b140:	f043 0310 	orr.w	r3, r3, #16
 800b144:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d106      	bne.n	800b15a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b14c:	4b1a      	ldr	r3, [pc, #104]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b150:	4a19      	ldr	r2, [pc, #100]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b152:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b156:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b158:	e00f      	b.n	800b17a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d106      	bne.n	800b16e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b160:	4b15      	ldr	r3, [pc, #84]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b164:	4a14      	ldr	r2, [pc, #80]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b16a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b16c:	e005      	b.n	800b17a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b16e:	4b12      	ldr	r3, [pc, #72]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b172:	4a11      	ldr	r2, [pc, #68]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b178:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b17a:	4b0f      	ldr	r3, [pc, #60]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a0e      	ldr	r2, [pc, #56]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b180:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b186:	f7f8 faa5 	bl	80036d4 <HAL_GetTick>
 800b18a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b18c:	e008      	b.n	800b1a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b18e:	f7f8 faa1 	bl	80036d4 <HAL_GetTick>
 800b192:	4602      	mov	r2, r0
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d901      	bls.n	800b1a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b19c:	2303      	movs	r3, #3
 800b19e:	e006      	b.n	800b1ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1a0:	4b05      	ldr	r3, [pc, #20]	; (800b1b8 <RCCEx_PLL2_Config+0x15c>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d0f0      	beq.n	800b18e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	58024400 	.word	0x58024400
 800b1bc:	ffff0007 	.word	0xffff0007

0800b1c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1ce:	4b53      	ldr	r3, [pc, #332]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d2:	f003 0303 	and.w	r3, r3, #3
 800b1d6:	2b03      	cmp	r3, #3
 800b1d8:	d101      	bne.n	800b1de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e099      	b.n	800b312 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b1de:	4b4f      	ldr	r3, [pc, #316]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a4e      	ldr	r2, [pc, #312]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b1e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1ea:	f7f8 fa73 	bl	80036d4 <HAL_GetTick>
 800b1ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b1f0:	e008      	b.n	800b204 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b1f2:	f7f8 fa6f 	bl	80036d4 <HAL_GetTick>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	1ad3      	subs	r3, r2, r3
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d901      	bls.n	800b204 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b200:	2303      	movs	r3, #3
 800b202:	e086      	b.n	800b312 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b204:	4b45      	ldr	r3, [pc, #276]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1f0      	bne.n	800b1f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b210:	4b42      	ldr	r3, [pc, #264]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b214:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	051b      	lsls	r3, r3, #20
 800b21e:	493f      	ldr	r1, [pc, #252]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b220:	4313      	orrs	r3, r2
 800b222:	628b      	str	r3, [r1, #40]	; 0x28
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	3b01      	subs	r3, #1
 800b22a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	3b01      	subs	r3, #1
 800b234:	025b      	lsls	r3, r3, #9
 800b236:	b29b      	uxth	r3, r3
 800b238:	431a      	orrs	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	3b01      	subs	r3, #1
 800b240:	041b      	lsls	r3, r3, #16
 800b242:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b246:	431a      	orrs	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	691b      	ldr	r3, [r3, #16]
 800b24c:	3b01      	subs	r3, #1
 800b24e:	061b      	lsls	r3, r3, #24
 800b250:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b254:	4931      	ldr	r1, [pc, #196]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b256:	4313      	orrs	r3, r2
 800b258:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b25a:	4b30      	ldr	r3, [pc, #192]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	695b      	ldr	r3, [r3, #20]
 800b266:	492d      	ldr	r1, [pc, #180]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b268:	4313      	orrs	r3, r2
 800b26a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b26c:	4b2b      	ldr	r3, [pc, #172]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b270:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	699b      	ldr	r3, [r3, #24]
 800b278:	4928      	ldr	r1, [pc, #160]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b27a:	4313      	orrs	r3, r2
 800b27c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b27e:	4b27      	ldr	r3, [pc, #156]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b282:	4a26      	ldr	r2, [pc, #152]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b288:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b28a:	4b24      	ldr	r3, [pc, #144]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b28c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b28e:	4b24      	ldr	r3, [pc, #144]	; (800b320 <RCCEx_PLL3_Config+0x160>)
 800b290:	4013      	ands	r3, r2
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	69d2      	ldr	r2, [r2, #28]
 800b296:	00d2      	lsls	r2, r2, #3
 800b298:	4920      	ldr	r1, [pc, #128]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b29a:	4313      	orrs	r3, r2
 800b29c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b29e:	4b1f      	ldr	r3, [pc, #124]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a2:	4a1e      	ldr	r2, [pc, #120]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b2a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d106      	bne.n	800b2be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b2b0:	4b1a      	ldr	r3, [pc, #104]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b4:	4a19      	ldr	r2, [pc, #100]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b2b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b2ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2bc:	e00f      	b.n	800b2de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d106      	bne.n	800b2d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b2c4:	4b15      	ldr	r3, [pc, #84]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c8:	4a14      	ldr	r2, [pc, #80]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b2ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b2ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2d0:	e005      	b.n	800b2de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b2d2:	4b12      	ldr	r3, [pc, #72]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d6:	4a11      	ldr	r2, [pc, #68]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b2d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b2dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b2de:	4b0f      	ldr	r3, [pc, #60]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a0e      	ldr	r2, [pc, #56]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b2e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2ea:	f7f8 f9f3 	bl	80036d4 <HAL_GetTick>
 800b2ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b2f0:	e008      	b.n	800b304 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b2f2:	f7f8 f9ef 	bl	80036d4 <HAL_GetTick>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	2b02      	cmp	r3, #2
 800b2fe:	d901      	bls.n	800b304 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b300:	2303      	movs	r3, #3
 800b302:	e006      	b.n	800b312 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b304:	4b05      	ldr	r3, [pc, #20]	; (800b31c <RCCEx_PLL3_Config+0x15c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d0f0      	beq.n	800b2f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b310:	7bfb      	ldrb	r3, [r7, #15]
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	58024400 	.word	0x58024400
 800b320:	ffff0007 	.word	0xffff0007

0800b324 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d101      	bne.n	800b336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e0f1      	b.n	800b51a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a78      	ldr	r2, [pc, #480]	; (800b524 <HAL_SPI_Init+0x200>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d00f      	beq.n	800b366 <HAL_SPI_Init+0x42>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a77      	ldr	r2, [pc, #476]	; (800b528 <HAL_SPI_Init+0x204>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d00a      	beq.n	800b366 <HAL_SPI_Init+0x42>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a75      	ldr	r2, [pc, #468]	; (800b52c <HAL_SPI_Init+0x208>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d005      	beq.n	800b366 <HAL_SPI_Init+0x42>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	2b0f      	cmp	r3, #15
 800b360:	d901      	bls.n	800b366 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e0d9      	b.n	800b51a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f001 f880 	bl	800c46c <SPI_GetPacketSize>
 800b36c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a6c      	ldr	r2, [pc, #432]	; (800b524 <HAL_SPI_Init+0x200>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d00c      	beq.n	800b392 <HAL_SPI_Init+0x6e>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a6a      	ldr	r2, [pc, #424]	; (800b528 <HAL_SPI_Init+0x204>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d007      	beq.n	800b392 <HAL_SPI_Init+0x6e>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a69      	ldr	r2, [pc, #420]	; (800b52c <HAL_SPI_Init+0x208>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d002      	beq.n	800b392 <HAL_SPI_Init+0x6e>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2b08      	cmp	r3, #8
 800b390:	d811      	bhi.n	800b3b6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b396:	4a63      	ldr	r2, [pc, #396]	; (800b524 <HAL_SPI_Init+0x200>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d009      	beq.n	800b3b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a61      	ldr	r2, [pc, #388]	; (800b528 <HAL_SPI_Init+0x204>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d004      	beq.n	800b3b0 <HAL_SPI_Init+0x8c>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a60      	ldr	r2, [pc, #384]	; (800b52c <HAL_SPI_Init+0x208>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d104      	bne.n	800b3ba <HAL_SPI_Init+0x96>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2b10      	cmp	r3, #16
 800b3b4:	d901      	bls.n	800b3ba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e0af      	b.n	800b51a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d106      	bne.n	800b3d4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7f6 fc76 	bl	8001cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2202      	movs	r2, #2
 800b3d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f022 0201 	bic.w	r2, r2, #1
 800b3ea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b3f6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b400:	d119      	bne.n	800b436 <HAL_SPI_Init+0x112>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b40a:	d103      	bne.n	800b414 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b410:	2b00      	cmp	r3, #0
 800b412:	d008      	beq.n	800b426 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d10c      	bne.n	800b436 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b424:	d107      	bne.n	800b436 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b434:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	69da      	ldr	r2, [r3, #28]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b43e:	431a      	orrs	r2, r3
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	431a      	orrs	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b448:	ea42 0103 	orr.w	r1, r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	68da      	ldr	r2, [r3, #12]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	430a      	orrs	r2, r1
 800b456:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b460:	431a      	orrs	r2, r3
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b466:	431a      	orrs	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	431a      	orrs	r2, r3
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	431a      	orrs	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	695b      	ldr	r3, [r3, #20]
 800b478:	431a      	orrs	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a1b      	ldr	r3, [r3, #32]
 800b47e:	431a      	orrs	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	431a      	orrs	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b48a:	431a      	orrs	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	431a      	orrs	r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b496:	ea42 0103 	orr.w	r1, r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	430a      	orrs	r2, r1
 800b4a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d113      	bne.n	800b4d6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f022 0201 	bic.w	r2, r2, #1
 800b4e4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00a      	beq.n	800b508 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	430a      	orrs	r2, r1
 800b506:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	40013000 	.word	0x40013000
 800b528:	40003800 	.word	0x40003800
 800b52c:	40003c00 	.word	0x40003c00

0800b530 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b08a      	sub	sp, #40	; 0x28
 800b534:	af02      	add	r7, sp, #8
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	603b      	str	r3, [r7, #0]
 800b53c:	4613      	mov	r3, r2
 800b53e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	3320      	adds	r3, #32
 800b546:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b552:	2b01      	cmp	r3, #1
 800b554:	d101      	bne.n	800b55a <HAL_SPI_Transmit+0x2a>
 800b556:	2302      	movs	r3, #2
 800b558:	e1d7      	b.n	800b90a <HAL_SPI_Transmit+0x3da>
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2201      	movs	r2, #1
 800b55e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b562:	f7f8 f8b7 	bl	80036d4 <HAL_GetTick>
 800b566:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	2b01      	cmp	r3, #1
 800b572:	d007      	beq.n	800b584 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800b574:	2302      	movs	r3, #2
 800b576:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b580:	7efb      	ldrb	r3, [r7, #27]
 800b582:	e1c2      	b.n	800b90a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d002      	beq.n	800b590 <HAL_SPI_Transmit+0x60>
 800b58a:	88fb      	ldrh	r3, [r7, #6]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d107      	bne.n	800b5a0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b59c:	7efb      	ldrb	r3, [r7, #27]
 800b59e:	e1b4      	b.n	800b90a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2203      	movs	r2, #3
 800b5a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	88fa      	ldrh	r2, [r7, #6]
 800b5ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	88fa      	ldrh	r2, [r7, #6]
 800b5c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b5f0:	d107      	bne.n	800b602 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b600:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	4b96      	ldr	r3, [pc, #600]	; (800b864 <HAL_SPI_Transmit+0x334>)
 800b60a:	4013      	ands	r3, r2
 800b60c:	88f9      	ldrh	r1, [r7, #6]
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	6812      	ldr	r2, [r2, #0]
 800b612:	430b      	orrs	r3, r1
 800b614:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f042 0201 	orr.w	r2, r2, #1
 800b624:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b62e:	d107      	bne.n	800b640 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b63e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	2b0f      	cmp	r3, #15
 800b646:	d947      	bls.n	800b6d8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b648:	e03f      	b.n	800b6ca <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	695b      	ldr	r3, [r3, #20]
 800b650:	f003 0302 	and.w	r3, r3, #2
 800b654:	2b02      	cmp	r3, #2
 800b656:	d114      	bne.n	800b682 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	6812      	ldr	r2, [r2, #0]
 800b662:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b668:	1d1a      	adds	r2, r3, #4
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b674:	b29b      	uxth	r3, r3
 800b676:	3b01      	subs	r3, #1
 800b678:	b29a      	uxth	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b680:	e023      	b.n	800b6ca <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b682:	f7f8 f827 	bl	80036d4 <HAL_GetTick>
 800b686:	4602      	mov	r2, r0
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d803      	bhi.n	800b69a <HAL_SPI_Transmit+0x16a>
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b698:	d102      	bne.n	800b6a0 <HAL_SPI_Transmit+0x170>
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d114      	bne.n	800b6ca <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 fe15 	bl	800c2d0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	e11f      	b.n	800b90a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d1b9      	bne.n	800b64a <HAL_SPI_Transmit+0x11a>
 800b6d6:	e0f2      	b.n	800b8be <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	2b07      	cmp	r3, #7
 800b6de:	f240 80e7 	bls.w	800b8b0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b6e2:	e05d      	b.n	800b7a0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	f003 0302 	and.w	r3, r3, #2
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	d132      	bne.n	800b758 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d918      	bls.n	800b730 <HAL_SPI_Transmit+0x200>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b702:	2b00      	cmp	r3, #0
 800b704:	d014      	beq.n	800b730 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	6812      	ldr	r2, [r2, #0]
 800b710:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b716:	1d1a      	adds	r2, r3, #4
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b722:	b29b      	uxth	r3, r3
 800b724:	3b02      	subs	r3, #2
 800b726:	b29a      	uxth	r2, r3
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b72e:	e037      	b.n	800b7a0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b734:	881a      	ldrh	r2, [r3, #0]
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b73e:	1c9a      	adds	r2, r3, #2
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	3b01      	subs	r3, #1
 800b74e:	b29a      	uxth	r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b756:	e023      	b.n	800b7a0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b758:	f7f7 ffbc 	bl	80036d4 <HAL_GetTick>
 800b75c:	4602      	mov	r2, r0
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	429a      	cmp	r2, r3
 800b766:	d803      	bhi.n	800b770 <HAL_SPI_Transmit+0x240>
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76e:	d102      	bne.n	800b776 <HAL_SPI_Transmit+0x246>
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d114      	bne.n	800b7a0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f000 fdaa 	bl	800c2d0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2200      	movs	r2, #0
 800b780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b78a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b79c:	2303      	movs	r3, #3
 800b79e:	e0b4      	b.n	800b90a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d19b      	bne.n	800b6e4 <HAL_SPI_Transmit+0x1b4>
 800b7ac:	e087      	b.n	800b8be <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	695b      	ldr	r3, [r3, #20]
 800b7b4:	f003 0302 	and.w	r3, r3, #2
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d155      	bne.n	800b868 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	2b03      	cmp	r3, #3
 800b7c6:	d918      	bls.n	800b7fa <HAL_SPI_Transmit+0x2ca>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7cc:	2b40      	cmp	r3, #64	; 0x40
 800b7ce:	d914      	bls.n	800b7fa <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	6812      	ldr	r2, [r2, #0]
 800b7da:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7e0:	1d1a      	adds	r2, r3, #4
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	3b04      	subs	r3, #4
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b7f8:	e05a      	b.n	800b8b0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b800:	b29b      	uxth	r3, r3
 800b802:	2b01      	cmp	r3, #1
 800b804:	d917      	bls.n	800b836 <HAL_SPI_Transmit+0x306>
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d013      	beq.n	800b836 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b812:	881a      	ldrh	r2, [r3, #0]
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b81c:	1c9a      	adds	r2, r3, #2
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b828:	b29b      	uxth	r3, r3
 800b82a:	3b02      	subs	r3, #2
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b834:	e03c      	b.n	800b8b0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	3320      	adds	r3, #32
 800b840:	7812      	ldrb	r2, [r2, #0]
 800b842:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b848:	1c5a      	adds	r2, r3, #1
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b854:	b29b      	uxth	r3, r3
 800b856:	3b01      	subs	r3, #1
 800b858:	b29a      	uxth	r2, r3
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b860:	e026      	b.n	800b8b0 <HAL_SPI_Transmit+0x380>
 800b862:	bf00      	nop
 800b864:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b868:	f7f7 ff34 	bl	80036d4 <HAL_GetTick>
 800b86c:	4602      	mov	r2, r0
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	683a      	ldr	r2, [r7, #0]
 800b874:	429a      	cmp	r2, r3
 800b876:	d803      	bhi.n	800b880 <HAL_SPI_Transmit+0x350>
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87e:	d102      	bne.n	800b886 <HAL_SPI_Transmit+0x356>
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d114      	bne.n	800b8b0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f000 fd22 	bl	800c2d0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b89a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e02c      	b.n	800b90a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f47f af78 	bne.w	800b7ae <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	2108      	movs	r1, #8
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f000 fda1 	bl	800c410 <SPI_WaitOnFlagUntilTimeout>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d007      	beq.n	800b8e4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8da:	f043 0220 	orr.w	r2, r3, #32
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b8e4:	68f8      	ldr	r0, [r7, #12]
 800b8e6:	f000 fcf3 	bl	800c2d0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b900:	2b00      	cmp	r3, #0
 800b902:	d001      	beq.n	800b908 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	e000      	b.n	800b90a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800b908:	7efb      	ldrb	r3, [r7, #27]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3720      	adds	r7, #32
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop

0800b914 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b08a      	sub	sp, #40	; 0x28
 800b918:	af02      	add	r7, sp, #8
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	603b      	str	r3, [r7, #0]
 800b920:	4613      	mov	r3, r2
 800b922:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b924:	2300      	movs	r3, #0
 800b926:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	3330      	adds	r3, #48	; 0x30
 800b92e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b938:	d112      	bne.n	800b960 <HAL_SPI_Receive+0x4c>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d10e      	bne.n	800b960 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2204      	movs	r2, #4
 800b946:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b94a:	88fa      	ldrh	r2, [r7, #6]
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	4613      	mov	r3, r2
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	68b9      	ldr	r1, [r7, #8]
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f000 f9ce 	bl	800bcf8 <HAL_SPI_TransmitReceive>
 800b95c:	4603      	mov	r3, r0
 800b95e:	e1c7      	b.n	800bcf0 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b966:	2b01      	cmp	r3, #1
 800b968:	d101      	bne.n	800b96e <HAL_SPI_Receive+0x5a>
 800b96a:	2302      	movs	r3, #2
 800b96c:	e1c0      	b.n	800bcf0 <HAL_SPI_Receive+0x3dc>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2201      	movs	r2, #1
 800b972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b976:	f7f7 fead 	bl	80036d4 <HAL_GetTick>
 800b97a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b01      	cmp	r3, #1
 800b986:	d007      	beq.n	800b998 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800b988:	2302      	movs	r3, #2
 800b98a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2200      	movs	r2, #0
 800b990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b994:	7ffb      	ldrb	r3, [r7, #31]
 800b996:	e1ab      	b.n	800bcf0 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d002      	beq.n	800b9a4 <HAL_SPI_Receive+0x90>
 800b99e:	88fb      	ldrh	r3, [r7, #6]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d107      	bne.n	800b9b4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b9b0:	7ffb      	ldrb	r3, [r7, #31]
 800b9b2:	e19d      	b.n	800bcf0 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2204      	movs	r2, #4
 800b9b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	88fa      	ldrh	r2, [r7, #6]
 800b9ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	88fa      	ldrh	r2, [r7, #6]
 800b9d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ba04:	d107      	bne.n	800ba16 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ba14:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	685a      	ldr	r2, [r3, #4]
 800ba1c:	4b94      	ldr	r3, [pc, #592]	; (800bc70 <HAL_SPI_Receive+0x35c>)
 800ba1e:	4013      	ands	r3, r2
 800ba20:	88f9      	ldrh	r1, [r7, #6]
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	6812      	ldr	r2, [r2, #0]
 800ba26:	430b      	orrs	r3, r1
 800ba28:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f042 0201 	orr.w	r2, r2, #1
 800ba38:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba42:	d107      	bne.n	800ba54 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	2b0f      	cmp	r3, #15
 800ba5a:	d948      	bls.n	800baee <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ba5c:	e040      	b.n	800bae0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	695a      	ldr	r2, [r3, #20]
 800ba64:	f248 0308 	movw	r3, #32776	; 0x8008
 800ba68:	4013      	ands	r3, r2
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d014      	beq.n	800ba98 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ba78:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba7e:	1d1a      	adds	r2, r3, #4
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ba96:	e023      	b.n	800bae0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba98:	f7f7 fe1c 	bl	80036d4 <HAL_GetTick>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d803      	bhi.n	800bab0 <HAL_SPI_Receive+0x19c>
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baae:	d102      	bne.n	800bab6 <HAL_SPI_Receive+0x1a2>
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d114      	bne.n	800bae0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f000 fc0a 	bl	800c2d0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800badc:	2303      	movs	r3, #3
 800bade:	e107      	b.n	800bcf0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1b8      	bne.n	800ba5e <HAL_SPI_Receive+0x14a>
 800baec:	e0ed      	b.n	800bcca <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	2b07      	cmp	r3, #7
 800baf4:	f240 80e2 	bls.w	800bcbc <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800baf8:	e05b      	b.n	800bbb2 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	695b      	ldr	r3, [r3, #20]
 800bb00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d030      	beq.n	800bb6a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	695b      	ldr	r3, [r3, #20]
 800bb0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d014      	beq.n	800bb40 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bb20:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb26:	1d1a      	adds	r2, r3, #4
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	3b02      	subs	r3, #2
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bb3e:	e038      	b.n	800bbb2 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb44:	69ba      	ldr	r2, [r7, #24]
 800bb46:	8812      	ldrh	r2, [r2, #0]
 800bb48:	b292      	uxth	r2, r2
 800bb4a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb50:	1c9a      	adds	r2, r3, #2
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bb68:	e023      	b.n	800bbb2 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb6a:	f7f7 fdb3 	bl	80036d4 <HAL_GetTick>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	683a      	ldr	r2, [r7, #0]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d803      	bhi.n	800bb82 <HAL_SPI_Receive+0x26e>
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb80:	d102      	bne.n	800bb88 <HAL_SPI_Receive+0x274>
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d114      	bne.n	800bbb2 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f000 fba1 	bl	800c2d0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	e09e      	b.n	800bcf0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d19d      	bne.n	800bafa <HAL_SPI_Receive+0x1e6>
 800bbbe:	e084      	b.n	800bcca <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	695b      	ldr	r3, [r3, #20]
 800bbc6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d052      	beq.n	800bc74 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	695b      	ldr	r3, [r3, #20]
 800bbd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d014      	beq.n	800bc06 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbe4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bbe6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbec:	1d1a      	adds	r2, r3, #4
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	3b04      	subs	r3, #4
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bc04:	e05a      	b.n	800bcbc <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	695b      	ldr	r3, [r3, #20]
 800bc0c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800bc10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc14:	d914      	bls.n	800bc40 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc1a:	69ba      	ldr	r2, [r7, #24]
 800bc1c:	8812      	ldrh	r2, [r2, #0]
 800bc1e:	b292      	uxth	r2, r2
 800bc20:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc26:	1c9a      	adds	r2, r3, #2
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	3b02      	subs	r3, #2
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bc3e:	e03d      	b.n	800bcbc <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc4c:	7812      	ldrb	r2, [r2, #0]
 800bc4e:	b2d2      	uxtb	r2, r2
 800bc50:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc56:	1c5a      	adds	r2, r3, #1
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	3b01      	subs	r3, #1
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bc6e:	e025      	b.n	800bcbc <HAL_SPI_Receive+0x3a8>
 800bc70:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc74:	f7f7 fd2e 	bl	80036d4 <HAL_GetTick>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	1ad3      	subs	r3, r2, r3
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d803      	bhi.n	800bc8c <HAL_SPI_Receive+0x378>
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc8a:	d102      	bne.n	800bc92 <HAL_SPI_Receive+0x37e>
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d114      	bne.n	800bcbc <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	f000 fb1c 	bl	800c2d0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bca6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	e019      	b.n	800bcf0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f47f af7b 	bne.w	800bbc0 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f000 fb00 	bl	800c2d0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	e000      	b.n	800bcf0 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800bcee:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3720      	adds	r7, #32
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b08e      	sub	sp, #56	; 0x38
 800bcfc:	af02      	add	r7, sp, #8
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
 800bd04:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	3320      	adds	r3, #32
 800bd12:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	3330      	adds	r3, #48	; 0x30
 800bd1a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d101      	bne.n	800bd2a <HAL_SPI_TransmitReceive+0x32>
 800bd26:	2302      	movs	r3, #2
 800bd28:	e2ce      	b.n	800c2c8 <HAL_SPI_TransmitReceive+0x5d0>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd32:	f7f7 fccf 	bl	80036d4 <HAL_GetTick>
 800bd36:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bd38:	887b      	ldrh	r3, [r7, #2]
 800bd3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bd3c:	887b      	ldrh	r3, [r7, #2]
 800bd3e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bd46:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bd4e:	7efb      	ldrb	r3, [r7, #27]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d014      	beq.n	800bd7e <HAL_SPI_TransmitReceive+0x86>
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd5a:	d106      	bne.n	800bd6a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d102      	bne.n	800bd6a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bd64:	7efb      	ldrb	r3, [r7, #27]
 800bd66:	2b04      	cmp	r3, #4
 800bd68:	d009      	beq.n	800bd7e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bd78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd7c:	e2a4      	b.n	800c2c8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d005      	beq.n	800bd90 <HAL_SPI_TransmitReceive+0x98>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d002      	beq.n	800bd90 <HAL_SPI_TransmitReceive+0x98>
 800bd8a:	887b      	ldrh	r3, [r7, #2]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d109      	bne.n	800bda4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bd9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bda2:	e291      	b.n	800c2c8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	2b04      	cmp	r3, #4
 800bdae:	d003      	beq.n	800bdb8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2205      	movs	r2, #5
 800bdb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	887a      	ldrh	r2, [r7, #2]
 800bdca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	887a      	ldrh	r2, [r7, #2]
 800bdd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	68ba      	ldr	r2, [r7, #8]
 800bdda:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	887a      	ldrh	r2, [r7, #2]
 800bde0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	887a      	ldrh	r2, [r7, #2]
 800bde8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	685a      	ldr	r2, [r3, #4]
 800bdfe:	4b9f      	ldr	r3, [pc, #636]	; (800c07c <HAL_SPI_TransmitReceive+0x384>)
 800be00:	4013      	ands	r3, r2
 800be02:	8879      	ldrh	r1, [r7, #2]
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	6812      	ldr	r2, [r2, #0]
 800be08:	430b      	orrs	r3, r1
 800be0a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f042 0201 	orr.w	r2, r2, #1
 800be1a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be24:	d107      	bne.n	800be36 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	2b0f      	cmp	r3, #15
 800be3c:	d970      	bls.n	800bf20 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800be3e:	e068      	b.n	800bf12 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	695b      	ldr	r3, [r3, #20]
 800be46:	f003 0302 	and.w	r3, r3, #2
 800be4a:	2b02      	cmp	r3, #2
 800be4c:	d11a      	bne.n	800be84 <HAL_SPI_TransmitReceive+0x18c>
 800be4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be50:	2b00      	cmp	r3, #0
 800be52:	d017      	beq.n	800be84 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	6812      	ldr	r2, [r2, #0]
 800be5e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be64:	1d1a      	adds	r2, r3, #4
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be70:	b29b      	uxth	r3, r3
 800be72:	3b01      	subs	r3, #1
 800be74:	b29a      	uxth	r2, r3
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be82:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	695a      	ldr	r2, [r3, #20]
 800be8a:	f248 0308 	movw	r3, #32776	; 0x8008
 800be8e:	4013      	ands	r3, r2
 800be90:	2b00      	cmp	r3, #0
 800be92:	d01a      	beq.n	800beca <HAL_SPI_TransmitReceive+0x1d2>
 800be94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800be96:	2b00      	cmp	r3, #0
 800be98:	d017      	beq.n	800beca <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bea2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bea4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800beaa:	1d1a      	adds	r2, r3, #4
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	3b01      	subs	r3, #1
 800beba:	b29a      	uxth	r2, r3
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bec8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800beca:	f7f7 fc03 	bl	80036d4 <HAL_GetTick>
 800bece:	4602      	mov	r2, r0
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d803      	bhi.n	800bee2 <HAL_SPI_TransmitReceive+0x1ea>
 800beda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee0:	d102      	bne.n	800bee8 <HAL_SPI_TransmitReceive+0x1f0>
 800bee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d114      	bne.n	800bf12 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f000 f9f1 	bl	800c2d0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800befc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2201      	movs	r2, #1
 800bf0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	e1da      	b.n	800c2c8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d193      	bne.n	800be40 <HAL_SPI_TransmitReceive+0x148>
 800bf18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d190      	bne.n	800be40 <HAL_SPI_TransmitReceive+0x148>
 800bf1e:	e1ac      	b.n	800c27a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	2b07      	cmp	r3, #7
 800bf26:	f240 81a0 	bls.w	800c26a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf2a:	e0a9      	b.n	800c080 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	695b      	ldr	r3, [r3, #20]
 800bf32:	f003 0302 	and.w	r3, r3, #2
 800bf36:	2b02      	cmp	r3, #2
 800bf38:	d139      	bne.n	800bfae <HAL_SPI_TransmitReceive+0x2b6>
 800bf3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d036      	beq.n	800bfae <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bf40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d91c      	bls.n	800bf80 <HAL_SPI_TransmitReceive+0x288>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d018      	beq.n	800bf80 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	6812      	ldr	r2, [r2, #0]
 800bf58:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf5e:	1d1a      	adds	r2, r3, #4
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	3b02      	subs	r3, #2
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bf7e:	e016      	b.n	800bfae <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf84:	881a      	ldrh	r2, [r3, #0]
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf8e:	1c9a      	adds	r2, r3, #2
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	b29a      	uxth	r2, r3
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfac:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	695b      	ldr	r3, [r3, #20]
 800bfb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d03a      	beq.n	800c032 <HAL_SPI_TransmitReceive+0x33a>
 800bfbc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d037      	beq.n	800c032 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	695b      	ldr	r3, [r3, #20]
 800bfc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d018      	beq.n	800c002 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bfda:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfe0:	1d1a      	adds	r2, r3, #4
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	3b02      	subs	r3, #2
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bffe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c000:	e017      	b.n	800c032 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c006:	6a3a      	ldr	r2, [r7, #32]
 800c008:	8812      	ldrh	r2, [r2, #0]
 800c00a:	b292      	uxth	r2, r2
 800c00c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c012:	1c9a      	adds	r2, r3, #2
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c01e:	b29b      	uxth	r3, r3
 800c020:	3b01      	subs	r3, #1
 800c022:	b29a      	uxth	r2, r3
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c030:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c032:	f7f7 fb4f 	bl	80036d4 <HAL_GetTick>
 800c036:	4602      	mov	r2, r0
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	1ad3      	subs	r3, r2, r3
 800c03c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c03e:	429a      	cmp	r2, r3
 800c040:	d803      	bhi.n	800c04a <HAL_SPI_TransmitReceive+0x352>
 800c042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c048:	d102      	bne.n	800c050 <HAL_SPI_TransmitReceive+0x358>
 800c04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d117      	bne.n	800c080 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f000 f93d 	bl	800c2d0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c064:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2201      	movs	r2, #1
 800c072:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c076:	2303      	movs	r3, #3
 800c078:	e126      	b.n	800c2c8 <HAL_SPI_TransmitReceive+0x5d0>
 800c07a:	bf00      	nop
 800c07c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c080:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c082:	2b00      	cmp	r3, #0
 800c084:	f47f af52 	bne.w	800bf2c <HAL_SPI_TransmitReceive+0x234>
 800c088:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f47f af4e 	bne.w	800bf2c <HAL_SPI_TransmitReceive+0x234>
 800c090:	e0f3      	b.n	800c27a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	695b      	ldr	r3, [r3, #20]
 800c098:	f003 0302 	and.w	r3, r3, #2
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d15a      	bne.n	800c156 <HAL_SPI_TransmitReceive+0x45e>
 800c0a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d057      	beq.n	800c156 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c0a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0a8:	2b03      	cmp	r3, #3
 800c0aa:	d91c      	bls.n	800c0e6 <HAL_SPI_TransmitReceive+0x3ee>
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b0:	2b40      	cmp	r3, #64	; 0x40
 800c0b2:	d918      	bls.n	800c0e6 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	6812      	ldr	r2, [r2, #0]
 800c0be:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0c4:	1d1a      	adds	r2, r3, #4
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	3b04      	subs	r3, #4
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c0e4:	e037      	b.n	800c156 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c0e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d91b      	bls.n	800c124 <HAL_SPI_TransmitReceive+0x42c>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d017      	beq.n	800c124 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0f8:	881a      	ldrh	r2, [r3, #0]
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c102:	1c9a      	adds	r2, r3, #2
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c10e:	b29b      	uxth	r3, r3
 800c110:	3b02      	subs	r3, #2
 800c112:	b29a      	uxth	r2, r3
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c120:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c122:	e018      	b.n	800c156 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	3320      	adds	r3, #32
 800c12e:	7812      	ldrb	r2, [r2, #0]
 800c130:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c136:	1c5a      	adds	r2, r3, #1
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c142:	b29b      	uxth	r3, r3
 800c144:	3b01      	subs	r3, #1
 800c146:	b29a      	uxth	r2, r3
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c154:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	695b      	ldr	r3, [r3, #20]
 800c15c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c160:	2b00      	cmp	r3, #0
 800c162:	d05e      	beq.n	800c222 <HAL_SPI_TransmitReceive+0x52a>
 800c164:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c166:	2b00      	cmp	r3, #0
 800c168:	d05b      	beq.n	800c222 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	695b      	ldr	r3, [r3, #20]
 800c170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d018      	beq.n	800c1aa <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c180:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c182:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c188:	1d1a      	adds	r2, r3, #4
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c194:	b29b      	uxth	r3, r3
 800c196:	3b04      	subs	r3, #4
 800c198:	b29a      	uxth	r2, r3
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c1a8:	e03b      	b.n	800c222 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	695b      	ldr	r3, [r3, #20]
 800c1b0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c1b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1b8:	d918      	bls.n	800c1ec <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1be:	6a3a      	ldr	r2, [r7, #32]
 800c1c0:	8812      	ldrh	r2, [r2, #0]
 800c1c2:	b292      	uxth	r2, r2
 800c1c4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1ca:	1c9a      	adds	r2, r3, #2
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	3b02      	subs	r3, #2
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c1ea:	e01a      	b.n	800c222 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1f8:	7812      	ldrb	r2, [r2, #0]
 800c1fa:	b2d2      	uxtb	r2, r2
 800c1fc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c202:	1c5a      	adds	r2, r3, #1
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c20e:	b29b      	uxth	r3, r3
 800c210:	3b01      	subs	r3, #1
 800c212:	b29a      	uxth	r2, r3
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c220:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c222:	f7f7 fa57 	bl	80036d4 <HAL_GetTick>
 800c226:	4602      	mov	r2, r0
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c22e:	429a      	cmp	r2, r3
 800c230:	d803      	bhi.n	800c23a <HAL_SPI_TransmitReceive+0x542>
 800c232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c238:	d102      	bne.n	800c240 <HAL_SPI_TransmitReceive+0x548>
 800c23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d114      	bne.n	800c26a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f000 f845 	bl	800c2d0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c254:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2201      	movs	r2, #1
 800c262:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c266:	2303      	movs	r3, #3
 800c268:	e02e      	b.n	800c2c8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c26a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f47f af10 	bne.w	800c092 <HAL_SPI_TransmitReceive+0x39a>
 800c272:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c274:	2b00      	cmp	r3, #0
 800c276:	f47f af0c 	bne.w	800c092 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27c:	9300      	str	r3, [sp, #0]
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	2200      	movs	r2, #0
 800c282:	2108      	movs	r1, #8
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f000 f8c3 	bl	800c410 <SPI_WaitOnFlagUntilTimeout>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d007      	beq.n	800c2a0 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c296:	f043 0220 	orr.w	r2, r3, #32
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c2a0:	68f8      	ldr	r0, [r7, #12]
 800c2a2:	f000 f815 	bl	800c2d0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d001      	beq.n	800c2c4 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e001      	b.n	800c2c8 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800c2c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3730      	adds	r7, #48	; 0x30
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	695b      	ldr	r3, [r3, #20]
 800c2de:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	699a      	ldr	r2, [r3, #24]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f042 0208 	orr.w	r2, r2, #8
 800c2ee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	699a      	ldr	r2, [r3, #24]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f042 0210 	orr.w	r2, r2, #16
 800c2fe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f022 0201 	bic.w	r2, r2, #1
 800c30e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	6919      	ldr	r1, [r3, #16]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	4b3c      	ldr	r3, [pc, #240]	; (800c40c <SPI_CloseTransfer+0x13c>)
 800c31c:	400b      	ands	r3, r1
 800c31e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	689a      	ldr	r2, [r3, #8]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c32e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c336:	b2db      	uxtb	r3, r3
 800c338:	2b04      	cmp	r3, #4
 800c33a:	d014      	beq.n	800c366 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f003 0320 	and.w	r3, r3, #32
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00f      	beq.n	800c366 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c34c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	699a      	ldr	r2, [r3, #24]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f042 0220 	orr.w	r2, r2, #32
 800c364:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	2b03      	cmp	r3, #3
 800c370:	d014      	beq.n	800c39c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00f      	beq.n	800c39c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c382:	f043 0204 	orr.w	r2, r3, #4
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	699a      	ldr	r2, [r3, #24]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c39a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00f      	beq.n	800c3c6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3ac:	f043 0201 	orr.w	r2, r3, #1
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	699a      	ldr	r2, [r3, #24]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3c4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00f      	beq.n	800c3f0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3d6:	f043 0208 	orr.w	r2, r3, #8
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	699a      	ldr	r2, [r3, #24]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3ee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c400:	bf00      	nop
 800c402:	3714      	adds	r7, #20
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	fffffc90 	.word	0xfffffc90

0800c410 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	603b      	str	r3, [r7, #0]
 800c41c:	4613      	mov	r3, r2
 800c41e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c420:	e010      	b.n	800c444 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c422:	f7f7 f957 	bl	80036d4 <HAL_GetTick>
 800c426:	4602      	mov	r2, r0
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	1ad3      	subs	r3, r2, r3
 800c42c:	69ba      	ldr	r2, [r7, #24]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d803      	bhi.n	800c43a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c438:	d102      	bne.n	800c440 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d101      	bne.n	800c444 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c440:	2303      	movs	r3, #3
 800c442:	e00f      	b.n	800c464 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	695a      	ldr	r2, [r3, #20]
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	4013      	ands	r3, r2
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	429a      	cmp	r2, r3
 800c452:	bf0c      	ite	eq
 800c454:	2301      	moveq	r3, #1
 800c456:	2300      	movne	r3, #0
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	461a      	mov	r2, r3
 800c45c:	79fb      	ldrb	r3, [r7, #7]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d0df      	beq.n	800c422 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c462:	2300      	movs	r3, #0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c478:	095b      	lsrs	r3, r3, #5
 800c47a:	3301      	adds	r3, #1
 800c47c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	3301      	adds	r3, #1
 800c484:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	3307      	adds	r3, #7
 800c48a:	08db      	lsrs	r3, r3, #3
 800c48c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	fb02 f303 	mul.w	r3, r2, r3
}
 800c496:	4618      	mov	r0, r3
 800c498:	3714      	adds	r7, #20
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b082      	sub	sp, #8
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d101      	bne.n	800c4b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e049      	b.n	800c548 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d106      	bne.n	800c4ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f7f6 fc41 	bl	8002d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2202      	movs	r2, #2
 800c4d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	3304      	adds	r3, #4
 800c4de:	4619      	mov	r1, r3
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	f000 fef9 	bl	800d2d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2201      	movs	r2, #1
 800c502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2201      	movs	r2, #1
 800c50a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2201      	movs	r2, #1
 800c512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2201      	movs	r2, #1
 800c51a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2201      	movs	r2, #1
 800c522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2201      	movs	r2, #1
 800c52a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2201      	movs	r2, #1
 800c532:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2201      	movs	r2, #1
 800c53a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c546:	2300      	movs	r3, #0
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	2b01      	cmp	r3, #1
 800c562:	d001      	beq.n	800c568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c564:	2301      	movs	r3, #1
 800c566:	e05e      	b.n	800c626 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2202      	movs	r2, #2
 800c56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68da      	ldr	r2, [r3, #12]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f042 0201 	orr.w	r2, r2, #1
 800c57e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4a2b      	ldr	r2, [pc, #172]	; (800c634 <HAL_TIM_Base_Start_IT+0xe4>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d02c      	beq.n	800c5e4 <HAL_TIM_Base_Start_IT+0x94>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c592:	d027      	beq.n	800c5e4 <HAL_TIM_Base_Start_IT+0x94>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a27      	ldr	r2, [pc, #156]	; (800c638 <HAL_TIM_Base_Start_IT+0xe8>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d022      	beq.n	800c5e4 <HAL_TIM_Base_Start_IT+0x94>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a26      	ldr	r2, [pc, #152]	; (800c63c <HAL_TIM_Base_Start_IT+0xec>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d01d      	beq.n	800c5e4 <HAL_TIM_Base_Start_IT+0x94>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a24      	ldr	r2, [pc, #144]	; (800c640 <HAL_TIM_Base_Start_IT+0xf0>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d018      	beq.n	800c5e4 <HAL_TIM_Base_Start_IT+0x94>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a23      	ldr	r2, [pc, #140]	; (800c644 <HAL_TIM_Base_Start_IT+0xf4>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d013      	beq.n	800c5e4 <HAL_TIM_Base_Start_IT+0x94>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a21      	ldr	r2, [pc, #132]	; (800c648 <HAL_TIM_Base_Start_IT+0xf8>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d00e      	beq.n	800c5e4 <HAL_TIM_Base_Start_IT+0x94>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a20      	ldr	r2, [pc, #128]	; (800c64c <HAL_TIM_Base_Start_IT+0xfc>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d009      	beq.n	800c5e4 <HAL_TIM_Base_Start_IT+0x94>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a1e      	ldr	r2, [pc, #120]	; (800c650 <HAL_TIM_Base_Start_IT+0x100>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d004      	beq.n	800c5e4 <HAL_TIM_Base_Start_IT+0x94>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4a1d      	ldr	r2, [pc, #116]	; (800c654 <HAL_TIM_Base_Start_IT+0x104>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d115      	bne.n	800c610 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	689a      	ldr	r2, [r3, #8]
 800c5ea:	4b1b      	ldr	r3, [pc, #108]	; (800c658 <HAL_TIM_Base_Start_IT+0x108>)
 800c5ec:	4013      	ands	r3, r2
 800c5ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2b06      	cmp	r3, #6
 800c5f4:	d015      	beq.n	800c622 <HAL_TIM_Base_Start_IT+0xd2>
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5fc:	d011      	beq.n	800c622 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f042 0201 	orr.w	r2, r2, #1
 800c60c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c60e:	e008      	b.n	800c622 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f042 0201 	orr.w	r2, r2, #1
 800c61e:	601a      	str	r2, [r3, #0]
 800c620:	e000      	b.n	800c624 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c622:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3714      	adds	r7, #20
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	40010000 	.word	0x40010000
 800c638:	40000400 	.word	0x40000400
 800c63c:	40000800 	.word	0x40000800
 800c640:	40000c00 	.word	0x40000c00
 800c644:	40010400 	.word	0x40010400
 800c648:	40001800 	.word	0x40001800
 800c64c:	40014000 	.word	0x40014000
 800c650:	4000e000 	.word	0x4000e000
 800c654:	4000e400 	.word	0x4000e400
 800c658:	00010007 	.word	0x00010007

0800c65c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d101      	bne.n	800c66e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c66a:	2301      	movs	r3, #1
 800c66c:	e049      	b.n	800c702 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c674:	b2db      	uxtb	r3, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	d106      	bne.n	800c688 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f7f6 fa0a 	bl	8002a9c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2202      	movs	r2, #2
 800c68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	3304      	adds	r3, #4
 800c698:	4619      	mov	r1, r3
 800c69a:	4610      	mov	r0, r2
 800c69c:	f000 fe1c 	bl	800d2d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c700:	2300      	movs	r3, #0
}
 800c702:	4618      	mov	r0, r3
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b082      	sub	sp, #8
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d101      	bne.n	800c71c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	e049      	b.n	800c7b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c722:	b2db      	uxtb	r3, r3
 800c724:	2b00      	cmp	r3, #0
 800c726:	d106      	bne.n	800c736 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f7f6 fbff 	bl	8002f34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2202      	movs	r2, #2
 800c73a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	3304      	adds	r3, #4
 800c746:	4619      	mov	r1, r3
 800c748:	4610      	mov	r0, r2
 800c74a:	f000 fdc5 	bl	800d2d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2201      	movs	r2, #1
 800c752:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2201      	movs	r2, #1
 800c75a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2201      	movs	r2, #1
 800c762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2201      	movs	r2, #1
 800c76a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2201      	movs	r2, #1
 800c772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2201      	movs	r2, #1
 800c77a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2201      	movs	r2, #1
 800c78a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2201      	movs	r2, #1
 800c792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2201      	movs	r2, #1
 800c79a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d109      	bne.n	800c7dc <HAL_TIM_PWM_Start+0x24>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	bf14      	ite	ne
 800c7d4:	2301      	movne	r3, #1
 800c7d6:	2300      	moveq	r3, #0
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	e03c      	b.n	800c856 <HAL_TIM_PWM_Start+0x9e>
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	2b04      	cmp	r3, #4
 800c7e0:	d109      	bne.n	800c7f6 <HAL_TIM_PWM_Start+0x3e>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	bf14      	ite	ne
 800c7ee:	2301      	movne	r3, #1
 800c7f0:	2300      	moveq	r3, #0
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	e02f      	b.n	800c856 <HAL_TIM_PWM_Start+0x9e>
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	2b08      	cmp	r3, #8
 800c7fa:	d109      	bne.n	800c810 <HAL_TIM_PWM_Start+0x58>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c802:	b2db      	uxtb	r3, r3
 800c804:	2b01      	cmp	r3, #1
 800c806:	bf14      	ite	ne
 800c808:	2301      	movne	r3, #1
 800c80a:	2300      	moveq	r3, #0
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	e022      	b.n	800c856 <HAL_TIM_PWM_Start+0x9e>
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	2b0c      	cmp	r3, #12
 800c814:	d109      	bne.n	800c82a <HAL_TIM_PWM_Start+0x72>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	2b01      	cmp	r3, #1
 800c820:	bf14      	ite	ne
 800c822:	2301      	movne	r3, #1
 800c824:	2300      	moveq	r3, #0
 800c826:	b2db      	uxtb	r3, r3
 800c828:	e015      	b.n	800c856 <HAL_TIM_PWM_Start+0x9e>
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	2b10      	cmp	r3, #16
 800c82e:	d109      	bne.n	800c844 <HAL_TIM_PWM_Start+0x8c>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c836:	b2db      	uxtb	r3, r3
 800c838:	2b01      	cmp	r3, #1
 800c83a:	bf14      	ite	ne
 800c83c:	2301      	movne	r3, #1
 800c83e:	2300      	moveq	r3, #0
 800c840:	b2db      	uxtb	r3, r3
 800c842:	e008      	b.n	800c856 <HAL_TIM_PWM_Start+0x9e>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	bf14      	ite	ne
 800c850:	2301      	movne	r3, #1
 800c852:	2300      	moveq	r3, #0
 800c854:	b2db      	uxtb	r3, r3
 800c856:	2b00      	cmp	r3, #0
 800c858:	d001      	beq.n	800c85e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	e0ab      	b.n	800c9b6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d104      	bne.n	800c86e <HAL_TIM_PWM_Start+0xb6>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2202      	movs	r2, #2
 800c868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c86c:	e023      	b.n	800c8b6 <HAL_TIM_PWM_Start+0xfe>
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	2b04      	cmp	r3, #4
 800c872:	d104      	bne.n	800c87e <HAL_TIM_PWM_Start+0xc6>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2202      	movs	r2, #2
 800c878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c87c:	e01b      	b.n	800c8b6 <HAL_TIM_PWM_Start+0xfe>
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	2b08      	cmp	r3, #8
 800c882:	d104      	bne.n	800c88e <HAL_TIM_PWM_Start+0xd6>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2202      	movs	r2, #2
 800c888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c88c:	e013      	b.n	800c8b6 <HAL_TIM_PWM_Start+0xfe>
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	2b0c      	cmp	r3, #12
 800c892:	d104      	bne.n	800c89e <HAL_TIM_PWM_Start+0xe6>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2202      	movs	r2, #2
 800c898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c89c:	e00b      	b.n	800c8b6 <HAL_TIM_PWM_Start+0xfe>
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	2b10      	cmp	r3, #16
 800c8a2:	d104      	bne.n	800c8ae <HAL_TIM_PWM_Start+0xf6>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8ac:	e003      	b.n	800c8b6 <HAL_TIM_PWM_Start+0xfe>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2202      	movs	r2, #2
 800c8b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	6839      	ldr	r1, [r7, #0]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f001 f924 	bl	800db0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a3d      	ldr	r2, [pc, #244]	; (800c9c0 <HAL_TIM_PWM_Start+0x208>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d013      	beq.n	800c8f6 <HAL_TIM_PWM_Start+0x13e>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a3c      	ldr	r2, [pc, #240]	; (800c9c4 <HAL_TIM_PWM_Start+0x20c>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d00e      	beq.n	800c8f6 <HAL_TIM_PWM_Start+0x13e>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a3a      	ldr	r2, [pc, #232]	; (800c9c8 <HAL_TIM_PWM_Start+0x210>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d009      	beq.n	800c8f6 <HAL_TIM_PWM_Start+0x13e>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a39      	ldr	r2, [pc, #228]	; (800c9cc <HAL_TIM_PWM_Start+0x214>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d004      	beq.n	800c8f6 <HAL_TIM_PWM_Start+0x13e>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a37      	ldr	r2, [pc, #220]	; (800c9d0 <HAL_TIM_PWM_Start+0x218>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d101      	bne.n	800c8fa <HAL_TIM_PWM_Start+0x142>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e000      	b.n	800c8fc <HAL_TIM_PWM_Start+0x144>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d007      	beq.n	800c910 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c90e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a2a      	ldr	r2, [pc, #168]	; (800c9c0 <HAL_TIM_PWM_Start+0x208>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d02c      	beq.n	800c974 <HAL_TIM_PWM_Start+0x1bc>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c922:	d027      	beq.n	800c974 <HAL_TIM_PWM_Start+0x1bc>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a2a      	ldr	r2, [pc, #168]	; (800c9d4 <HAL_TIM_PWM_Start+0x21c>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d022      	beq.n	800c974 <HAL_TIM_PWM_Start+0x1bc>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a29      	ldr	r2, [pc, #164]	; (800c9d8 <HAL_TIM_PWM_Start+0x220>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d01d      	beq.n	800c974 <HAL_TIM_PWM_Start+0x1bc>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a27      	ldr	r2, [pc, #156]	; (800c9dc <HAL_TIM_PWM_Start+0x224>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d018      	beq.n	800c974 <HAL_TIM_PWM_Start+0x1bc>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a1f      	ldr	r2, [pc, #124]	; (800c9c4 <HAL_TIM_PWM_Start+0x20c>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d013      	beq.n	800c974 <HAL_TIM_PWM_Start+0x1bc>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a23      	ldr	r2, [pc, #140]	; (800c9e0 <HAL_TIM_PWM_Start+0x228>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d00e      	beq.n	800c974 <HAL_TIM_PWM_Start+0x1bc>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a1b      	ldr	r2, [pc, #108]	; (800c9c8 <HAL_TIM_PWM_Start+0x210>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d009      	beq.n	800c974 <HAL_TIM_PWM_Start+0x1bc>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a1f      	ldr	r2, [pc, #124]	; (800c9e4 <HAL_TIM_PWM_Start+0x22c>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d004      	beq.n	800c974 <HAL_TIM_PWM_Start+0x1bc>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a1e      	ldr	r2, [pc, #120]	; (800c9e8 <HAL_TIM_PWM_Start+0x230>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d115      	bne.n	800c9a0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	689a      	ldr	r2, [r3, #8]
 800c97a:	4b1c      	ldr	r3, [pc, #112]	; (800c9ec <HAL_TIM_PWM_Start+0x234>)
 800c97c:	4013      	ands	r3, r2
 800c97e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2b06      	cmp	r3, #6
 800c984:	d015      	beq.n	800c9b2 <HAL_TIM_PWM_Start+0x1fa>
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c98c:	d011      	beq.n	800c9b2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f042 0201 	orr.w	r2, r2, #1
 800c99c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c99e:	e008      	b.n	800c9b2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f042 0201 	orr.w	r2, r2, #1
 800c9ae:	601a      	str	r2, [r3, #0]
 800c9b0:	e000      	b.n	800c9b4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	40010000 	.word	0x40010000
 800c9c4:	40010400 	.word	0x40010400
 800c9c8:	40014000 	.word	0x40014000
 800c9cc:	40014400 	.word	0x40014400
 800c9d0:	40014800 	.word	0x40014800
 800c9d4:	40000400 	.word	0x40000400
 800c9d8:	40000800 	.word	0x40000800
 800c9dc:	40000c00 	.word	0x40000c00
 800c9e0:	40001800 	.word	0x40001800
 800c9e4:	4000e000 	.word	0x4000e000
 800c9e8:	4000e400 	.word	0x4000e400
 800c9ec:	00010007 	.word	0x00010007

0800c9f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d101      	bne.n	800ca04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ca00:	2301      	movs	r3, #1
 800ca02:	e08f      	b.n	800cb24 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d106      	bne.n	800ca1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f7f6 f889 	bl	8002b30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2202      	movs	r2, #2
 800ca22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	6899      	ldr	r1, [r3, #8]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	4b3e      	ldr	r3, [pc, #248]	; (800cb2c <HAL_TIM_Encoder_Init+0x13c>)
 800ca32:	400b      	ands	r3, r1
 800ca34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	4619      	mov	r1, r3
 800ca40:	4610      	mov	r0, r2
 800ca42:	f000 fc49 	bl	800d2d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	699b      	ldr	r3, [r3, #24]
 800ca54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	6a1b      	ldr	r3, [r3, #32]
 800ca5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	697a      	ldr	r2, [r7, #20]
 800ca64:	4313      	orrs	r3, r2
 800ca66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ca68:	693a      	ldr	r2, [r7, #16]
 800ca6a:	4b31      	ldr	r3, [pc, #196]	; (800cb30 <HAL_TIM_Encoder_Init+0x140>)
 800ca6c:	4013      	ands	r3, r2
 800ca6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	689a      	ldr	r2, [r3, #8]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	699b      	ldr	r3, [r3, #24]
 800ca78:	021b      	lsls	r3, r3, #8
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	693a      	ldr	r2, [r7, #16]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	4b2b      	ldr	r3, [pc, #172]	; (800cb34 <HAL_TIM_Encoder_Init+0x144>)
 800ca86:	4013      	ands	r3, r2
 800ca88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ca8a:	693a      	ldr	r2, [r7, #16]
 800ca8c:	4b2a      	ldr	r3, [pc, #168]	; (800cb38 <HAL_TIM_Encoder_Init+0x148>)
 800ca8e:	4013      	ands	r3, r2
 800ca90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	68da      	ldr	r2, [r3, #12]
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	69db      	ldr	r3, [r3, #28]
 800ca9a:	021b      	lsls	r3, r3, #8
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	693a      	ldr	r2, [r7, #16]
 800caa0:	4313      	orrs	r3, r2
 800caa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	011a      	lsls	r2, r3, #4
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	031b      	lsls	r3, r3, #12
 800cab0:	4313      	orrs	r3, r2
 800cab2:	693a      	ldr	r2, [r7, #16]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cabe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800cac6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	685a      	ldr	r2, [r3, #4]
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	695b      	ldr	r3, [r3, #20]
 800cad0:	011b      	lsls	r3, r3, #4
 800cad2:	4313      	orrs	r3, r2
 800cad4:	68fa      	ldr	r2, [r7, #12]
 800cad6:	4313      	orrs	r3, r2
 800cad8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	697a      	ldr	r2, [r7, #20]
 800cae0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	693a      	ldr	r2, [r7, #16]
 800cae8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2201      	movs	r2, #1
 800caf6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2201      	movs	r2, #1
 800cafe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2201      	movs	r2, #1
 800cb06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2201      	movs	r2, #1
 800cb16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3718      	adds	r7, #24
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	fffebff8 	.word	0xfffebff8
 800cb30:	fffffcfc 	.word	0xfffffcfc
 800cb34:	fffff3f3 	.word	0xfffff3f3
 800cb38:	ffff0f0f 	.word	0xffff0f0f

0800cb3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	f003 0302 	and.w	r3, r3, #2
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	d122      	bne.n	800cb98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	f003 0302 	and.w	r3, r3, #2
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d11b      	bne.n	800cb98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f06f 0202 	mvn.w	r2, #2
 800cb68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	699b      	ldr	r3, [r3, #24]
 800cb76:	f003 0303 	and.w	r3, r3, #3
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d003      	beq.n	800cb86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 fb8c 	bl	800d29c <HAL_TIM_IC_CaptureCallback>
 800cb84:	e005      	b.n	800cb92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 fb7e 	bl	800d288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fb8f 	bl	800d2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	f003 0304 	and.w	r3, r3, #4
 800cba2:	2b04      	cmp	r3, #4
 800cba4:	d122      	bne.n	800cbec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	f003 0304 	and.w	r3, r3, #4
 800cbb0:	2b04      	cmp	r3, #4
 800cbb2:	d11b      	bne.n	800cbec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f06f 0204 	mvn.w	r2, #4
 800cbbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2202      	movs	r2, #2
 800cbc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	699b      	ldr	r3, [r3, #24]
 800cbca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d003      	beq.n	800cbda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 fb62 	bl	800d29c <HAL_TIM_IC_CaptureCallback>
 800cbd8:	e005      	b.n	800cbe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 fb54 	bl	800d288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 fb65 	bl	800d2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	691b      	ldr	r3, [r3, #16]
 800cbf2:	f003 0308 	and.w	r3, r3, #8
 800cbf6:	2b08      	cmp	r3, #8
 800cbf8:	d122      	bne.n	800cc40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	f003 0308 	and.w	r3, r3, #8
 800cc04:	2b08      	cmp	r3, #8
 800cc06:	d11b      	bne.n	800cc40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f06f 0208 	mvn.w	r2, #8
 800cc10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2204      	movs	r2, #4
 800cc16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	f003 0303 	and.w	r3, r3, #3
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d003      	beq.n	800cc2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 fb38 	bl	800d29c <HAL_TIM_IC_CaptureCallback>
 800cc2c:	e005      	b.n	800cc3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 fb2a 	bl	800d288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fb3b 	bl	800d2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	f003 0310 	and.w	r3, r3, #16
 800cc4a:	2b10      	cmp	r3, #16
 800cc4c:	d122      	bne.n	800cc94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	f003 0310 	and.w	r3, r3, #16
 800cc58:	2b10      	cmp	r3, #16
 800cc5a:	d11b      	bne.n	800cc94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f06f 0210 	mvn.w	r2, #16
 800cc64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2208      	movs	r2, #8
 800cc6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	69db      	ldr	r3, [r3, #28]
 800cc72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d003      	beq.n	800cc82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fb0e 	bl	800d29c <HAL_TIM_IC_CaptureCallback>
 800cc80:	e005      	b.n	800cc8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 fb00 	bl	800d288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 fb11 	bl	800d2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	691b      	ldr	r3, [r3, #16]
 800cc9a:	f003 0301 	and.w	r3, r3, #1
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d10e      	bne.n	800ccc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	f003 0301 	and.w	r3, r3, #1
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d107      	bne.n	800ccc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f06f 0201 	mvn.w	r2, #1
 800ccb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7f4 fec8 	bl	8001a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccca:	2b80      	cmp	r3, #128	; 0x80
 800cccc:	d10e      	bne.n	800ccec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccd8:	2b80      	cmp	r3, #128	; 0x80
 800ccda:	d107      	bne.n	800ccec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f001 f87c 	bl	800dde4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	691b      	ldr	r3, [r3, #16]
 800ccf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccfa:	d10e      	bne.n	800cd1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd06:	2b80      	cmp	r3, #128	; 0x80
 800cd08:	d107      	bne.n	800cd1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cd12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f001 f86f 	bl	800ddf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	691b      	ldr	r3, [r3, #16]
 800cd20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd24:	2b40      	cmp	r3, #64	; 0x40
 800cd26:	d10e      	bne.n	800cd46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd32:	2b40      	cmp	r3, #64	; 0x40
 800cd34:	d107      	bne.n	800cd46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cd3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 fabf 	bl	800d2c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	691b      	ldr	r3, [r3, #16]
 800cd4c:	f003 0320 	and.w	r3, r3, #32
 800cd50:	2b20      	cmp	r3, #32
 800cd52:	d10e      	bne.n	800cd72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	f003 0320 	and.w	r3, r3, #32
 800cd5e:	2b20      	cmp	r3, #32
 800cd60:	d107      	bne.n	800cd72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f06f 0220 	mvn.w	r2, #32
 800cd6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f001 f82f 	bl	800ddd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd72:	bf00      	nop
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
	...

0800cd7c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b086      	sub	sp, #24
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d101      	bne.n	800cd9a <HAL_TIM_OC_ConfigChannel+0x1e>
 800cd96:	2302      	movs	r3, #2
 800cd98:	e066      	b.n	800ce68 <HAL_TIM_OC_ConfigChannel+0xec>
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2b14      	cmp	r3, #20
 800cda6:	d857      	bhi.n	800ce58 <HAL_TIM_OC_ConfigChannel+0xdc>
 800cda8:	a201      	add	r2, pc, #4	; (adr r2, 800cdb0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800cdaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdae:	bf00      	nop
 800cdb0:	0800ce05 	.word	0x0800ce05
 800cdb4:	0800ce59 	.word	0x0800ce59
 800cdb8:	0800ce59 	.word	0x0800ce59
 800cdbc:	0800ce59 	.word	0x0800ce59
 800cdc0:	0800ce13 	.word	0x0800ce13
 800cdc4:	0800ce59 	.word	0x0800ce59
 800cdc8:	0800ce59 	.word	0x0800ce59
 800cdcc:	0800ce59 	.word	0x0800ce59
 800cdd0:	0800ce21 	.word	0x0800ce21
 800cdd4:	0800ce59 	.word	0x0800ce59
 800cdd8:	0800ce59 	.word	0x0800ce59
 800cddc:	0800ce59 	.word	0x0800ce59
 800cde0:	0800ce2f 	.word	0x0800ce2f
 800cde4:	0800ce59 	.word	0x0800ce59
 800cde8:	0800ce59 	.word	0x0800ce59
 800cdec:	0800ce59 	.word	0x0800ce59
 800cdf0:	0800ce3d 	.word	0x0800ce3d
 800cdf4:	0800ce59 	.word	0x0800ce59
 800cdf8:	0800ce59 	.word	0x0800ce59
 800cdfc:	0800ce59 	.word	0x0800ce59
 800ce00:	0800ce4b 	.word	0x0800ce4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	68b9      	ldr	r1, [r7, #8]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 fb0a 	bl	800d424 <TIM_OC1_SetConfig>
      break;
 800ce10:	e025      	b.n	800ce5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68b9      	ldr	r1, [r7, #8]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f000 fb93 	bl	800d544 <TIM_OC2_SetConfig>
      break;
 800ce1e:	e01e      	b.n	800ce5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68b9      	ldr	r1, [r7, #8]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 fc16 	bl	800d658 <TIM_OC3_SetConfig>
      break;
 800ce2c:	e017      	b.n	800ce5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	68b9      	ldr	r1, [r7, #8]
 800ce34:	4618      	mov	r0, r3
 800ce36:	f000 fc97 	bl	800d768 <TIM_OC4_SetConfig>
      break;
 800ce3a:	e010      	b.n	800ce5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	68b9      	ldr	r1, [r7, #8]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f000 fcfa 	bl	800d83c <TIM_OC5_SetConfig>
      break;
 800ce48:	e009      	b.n	800ce5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	68b9      	ldr	r1, [r7, #8]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f000 fd57 	bl	800d904 <TIM_OC6_SetConfig>
      break;
 800ce56:	e002      	b.n	800ce5e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	75fb      	strb	r3, [r7, #23]
      break;
 800ce5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2200      	movs	r2, #0
 800ce62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ce66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3718      	adds	r7, #24
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d101      	bne.n	800ce8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ce8a:	2302      	movs	r3, #2
 800ce8c:	e0ff      	b.n	800d08e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2b14      	cmp	r3, #20
 800ce9a:	f200 80f0 	bhi.w	800d07e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ce9e:	a201      	add	r2, pc, #4	; (adr r2, 800cea4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea4:	0800cef9 	.word	0x0800cef9
 800cea8:	0800d07f 	.word	0x0800d07f
 800ceac:	0800d07f 	.word	0x0800d07f
 800ceb0:	0800d07f 	.word	0x0800d07f
 800ceb4:	0800cf39 	.word	0x0800cf39
 800ceb8:	0800d07f 	.word	0x0800d07f
 800cebc:	0800d07f 	.word	0x0800d07f
 800cec0:	0800d07f 	.word	0x0800d07f
 800cec4:	0800cf7b 	.word	0x0800cf7b
 800cec8:	0800d07f 	.word	0x0800d07f
 800cecc:	0800d07f 	.word	0x0800d07f
 800ced0:	0800d07f 	.word	0x0800d07f
 800ced4:	0800cfbb 	.word	0x0800cfbb
 800ced8:	0800d07f 	.word	0x0800d07f
 800cedc:	0800d07f 	.word	0x0800d07f
 800cee0:	0800d07f 	.word	0x0800d07f
 800cee4:	0800cffd 	.word	0x0800cffd
 800cee8:	0800d07f 	.word	0x0800d07f
 800ceec:	0800d07f 	.word	0x0800d07f
 800cef0:	0800d07f 	.word	0x0800d07f
 800cef4:	0800d03d 	.word	0x0800d03d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	68b9      	ldr	r1, [r7, #8]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f000 fa90 	bl	800d424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	699a      	ldr	r2, [r3, #24]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f042 0208 	orr.w	r2, r2, #8
 800cf12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	699a      	ldr	r2, [r3, #24]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f022 0204 	bic.w	r2, r2, #4
 800cf22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	6999      	ldr	r1, [r3, #24]
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	691a      	ldr	r2, [r3, #16]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	430a      	orrs	r2, r1
 800cf34:	619a      	str	r2, [r3, #24]
      break;
 800cf36:	e0a5      	b.n	800d084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	68b9      	ldr	r1, [r7, #8]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f000 fb00 	bl	800d544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	699a      	ldr	r2, [r3, #24]
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	699a      	ldr	r2, [r3, #24]
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	6999      	ldr	r1, [r3, #24]
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	691b      	ldr	r3, [r3, #16]
 800cf6e:	021a      	lsls	r2, r3, #8
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	430a      	orrs	r2, r1
 800cf76:	619a      	str	r2, [r3, #24]
      break;
 800cf78:	e084      	b.n	800d084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	68b9      	ldr	r1, [r7, #8]
 800cf80:	4618      	mov	r0, r3
 800cf82:	f000 fb69 	bl	800d658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	69da      	ldr	r2, [r3, #28]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f042 0208 	orr.w	r2, r2, #8
 800cf94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	69da      	ldr	r2, [r3, #28]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f022 0204 	bic.w	r2, r2, #4
 800cfa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	69d9      	ldr	r1, [r3, #28]
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	691a      	ldr	r2, [r3, #16]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	430a      	orrs	r2, r1
 800cfb6:	61da      	str	r2, [r3, #28]
      break;
 800cfb8:	e064      	b.n	800d084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	68b9      	ldr	r1, [r7, #8]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f000 fbd1 	bl	800d768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	69da      	ldr	r2, [r3, #28]
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	69da      	ldr	r2, [r3, #28]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	69d9      	ldr	r1, [r3, #28]
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	691b      	ldr	r3, [r3, #16]
 800cff0:	021a      	lsls	r2, r3, #8
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	430a      	orrs	r2, r1
 800cff8:	61da      	str	r2, [r3, #28]
      break;
 800cffa:	e043      	b.n	800d084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68b9      	ldr	r1, [r7, #8]
 800d002:	4618      	mov	r0, r3
 800d004:	f000 fc1a 	bl	800d83c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f042 0208 	orr.w	r2, r2, #8
 800d016:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f022 0204 	bic.w	r2, r2, #4
 800d026:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	691a      	ldr	r2, [r3, #16]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	430a      	orrs	r2, r1
 800d038:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d03a:	e023      	b.n	800d084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	68b9      	ldr	r1, [r7, #8]
 800d042:	4618      	mov	r0, r3
 800d044:	f000 fc5e 	bl	800d904 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d056:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d066:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	021a      	lsls	r2, r3, #8
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	430a      	orrs	r2, r1
 800d07a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d07c:	e002      	b.n	800d084 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	75fb      	strb	r3, [r7, #23]
      break;
 800d082:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2200      	movs	r2, #0
 800d088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d08c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3718      	adds	r7, #24
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop

0800d098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d101      	bne.n	800d0b4 <HAL_TIM_ConfigClockSource+0x1c>
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	e0dc      	b.n	800d26e <HAL_TIM_ConfigClockSource+0x1d6>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2202      	movs	r2, #2
 800d0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d0cc:	68ba      	ldr	r2, [r7, #8]
 800d0ce:	4b6a      	ldr	r3, [pc, #424]	; (800d278 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d0d0:	4013      	ands	r3, r2
 800d0d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d0da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	68ba      	ldr	r2, [r7, #8]
 800d0e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a64      	ldr	r2, [pc, #400]	; (800d27c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	f000 80a9 	beq.w	800d242 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0f0:	4a62      	ldr	r2, [pc, #392]	; (800d27c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	f200 80ae 	bhi.w	800d254 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0f8:	4a61      	ldr	r2, [pc, #388]	; (800d280 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	f000 80a1 	beq.w	800d242 <HAL_TIM_ConfigClockSource+0x1aa>
 800d100:	4a5f      	ldr	r2, [pc, #380]	; (800d280 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d102:	4293      	cmp	r3, r2
 800d104:	f200 80a6 	bhi.w	800d254 <HAL_TIM_ConfigClockSource+0x1bc>
 800d108:	4a5e      	ldr	r2, [pc, #376]	; (800d284 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	f000 8099 	beq.w	800d242 <HAL_TIM_ConfigClockSource+0x1aa>
 800d110:	4a5c      	ldr	r2, [pc, #368]	; (800d284 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d112:	4293      	cmp	r3, r2
 800d114:	f200 809e 	bhi.w	800d254 <HAL_TIM_ConfigClockSource+0x1bc>
 800d118:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d11c:	f000 8091 	beq.w	800d242 <HAL_TIM_ConfigClockSource+0x1aa>
 800d120:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d124:	f200 8096 	bhi.w	800d254 <HAL_TIM_ConfigClockSource+0x1bc>
 800d128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d12c:	f000 8089 	beq.w	800d242 <HAL_TIM_ConfigClockSource+0x1aa>
 800d130:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d134:	f200 808e 	bhi.w	800d254 <HAL_TIM_ConfigClockSource+0x1bc>
 800d138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d13c:	d03e      	beq.n	800d1bc <HAL_TIM_ConfigClockSource+0x124>
 800d13e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d142:	f200 8087 	bhi.w	800d254 <HAL_TIM_ConfigClockSource+0x1bc>
 800d146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d14a:	f000 8086 	beq.w	800d25a <HAL_TIM_ConfigClockSource+0x1c2>
 800d14e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d152:	d87f      	bhi.n	800d254 <HAL_TIM_ConfigClockSource+0x1bc>
 800d154:	2b70      	cmp	r3, #112	; 0x70
 800d156:	d01a      	beq.n	800d18e <HAL_TIM_ConfigClockSource+0xf6>
 800d158:	2b70      	cmp	r3, #112	; 0x70
 800d15a:	d87b      	bhi.n	800d254 <HAL_TIM_ConfigClockSource+0x1bc>
 800d15c:	2b60      	cmp	r3, #96	; 0x60
 800d15e:	d050      	beq.n	800d202 <HAL_TIM_ConfigClockSource+0x16a>
 800d160:	2b60      	cmp	r3, #96	; 0x60
 800d162:	d877      	bhi.n	800d254 <HAL_TIM_ConfigClockSource+0x1bc>
 800d164:	2b50      	cmp	r3, #80	; 0x50
 800d166:	d03c      	beq.n	800d1e2 <HAL_TIM_ConfigClockSource+0x14a>
 800d168:	2b50      	cmp	r3, #80	; 0x50
 800d16a:	d873      	bhi.n	800d254 <HAL_TIM_ConfigClockSource+0x1bc>
 800d16c:	2b40      	cmp	r3, #64	; 0x40
 800d16e:	d058      	beq.n	800d222 <HAL_TIM_ConfigClockSource+0x18a>
 800d170:	2b40      	cmp	r3, #64	; 0x40
 800d172:	d86f      	bhi.n	800d254 <HAL_TIM_ConfigClockSource+0x1bc>
 800d174:	2b30      	cmp	r3, #48	; 0x30
 800d176:	d064      	beq.n	800d242 <HAL_TIM_ConfigClockSource+0x1aa>
 800d178:	2b30      	cmp	r3, #48	; 0x30
 800d17a:	d86b      	bhi.n	800d254 <HAL_TIM_ConfigClockSource+0x1bc>
 800d17c:	2b20      	cmp	r3, #32
 800d17e:	d060      	beq.n	800d242 <HAL_TIM_ConfigClockSource+0x1aa>
 800d180:	2b20      	cmp	r3, #32
 800d182:	d867      	bhi.n	800d254 <HAL_TIM_ConfigClockSource+0x1bc>
 800d184:	2b00      	cmp	r3, #0
 800d186:	d05c      	beq.n	800d242 <HAL_TIM_ConfigClockSource+0x1aa>
 800d188:	2b10      	cmp	r3, #16
 800d18a:	d05a      	beq.n	800d242 <HAL_TIM_ConfigClockSource+0x1aa>
 800d18c:	e062      	b.n	800d254 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6818      	ldr	r0, [r3, #0]
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	6899      	ldr	r1, [r3, #8]
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	685a      	ldr	r2, [r3, #4]
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	f000 fc95 	bl	800dacc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	689b      	ldr	r3, [r3, #8]
 800d1a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d1b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	609a      	str	r2, [r3, #8]
      break;
 800d1ba:	e04f      	b.n	800d25c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6818      	ldr	r0, [r3, #0]
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	6899      	ldr	r1, [r3, #8]
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	685a      	ldr	r2, [r3, #4]
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	68db      	ldr	r3, [r3, #12]
 800d1cc:	f000 fc7e 	bl	800dacc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	689a      	ldr	r2, [r3, #8]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d1de:	609a      	str	r2, [r3, #8]
      break;
 800d1e0:	e03c      	b.n	800d25c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6818      	ldr	r0, [r3, #0]
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	6859      	ldr	r1, [r3, #4]
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	f000 fbee 	bl	800d9d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2150      	movs	r1, #80	; 0x50
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f000 fc48 	bl	800da90 <TIM_ITRx_SetConfig>
      break;
 800d200:	e02c      	b.n	800d25c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6818      	ldr	r0, [r3, #0]
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	6859      	ldr	r1, [r3, #4]
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	461a      	mov	r2, r3
 800d210:	f000 fc0d 	bl	800da2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2160      	movs	r1, #96	; 0x60
 800d21a:	4618      	mov	r0, r3
 800d21c:	f000 fc38 	bl	800da90 <TIM_ITRx_SetConfig>
      break;
 800d220:	e01c      	b.n	800d25c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6818      	ldr	r0, [r3, #0]
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	6859      	ldr	r1, [r3, #4]
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	461a      	mov	r2, r3
 800d230:	f000 fbce 	bl	800d9d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2140      	movs	r1, #64	; 0x40
 800d23a:	4618      	mov	r0, r3
 800d23c:	f000 fc28 	bl	800da90 <TIM_ITRx_SetConfig>
      break;
 800d240:	e00c      	b.n	800d25c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4619      	mov	r1, r3
 800d24c:	4610      	mov	r0, r2
 800d24e:	f000 fc1f 	bl	800da90 <TIM_ITRx_SetConfig>
      break;
 800d252:	e003      	b.n	800d25c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d254:	2301      	movs	r3, #1
 800d256:	73fb      	strb	r3, [r7, #15]
      break;
 800d258:	e000      	b.n	800d25c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d25a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2201      	movs	r2, #1
 800d260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	ffceff88 	.word	0xffceff88
 800d27c:	00100040 	.word	0x00100040
 800d280:	00100030 	.word	0x00100030
 800d284:	00100020 	.word	0x00100020

0800d288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d290:	bf00      	nop
 800d292:	370c      	adds	r7, #12
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d2a4:	bf00      	nop
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d2b8:	bf00      	nop
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr

0800d2c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d2cc:	bf00      	nop
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4a44      	ldr	r2, [pc, #272]	; (800d3fc <TIM_Base_SetConfig+0x124>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d013      	beq.n	800d318 <TIM_Base_SetConfig+0x40>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2f6:	d00f      	beq.n	800d318 <TIM_Base_SetConfig+0x40>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4a41      	ldr	r2, [pc, #260]	; (800d400 <TIM_Base_SetConfig+0x128>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d00b      	beq.n	800d318 <TIM_Base_SetConfig+0x40>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4a40      	ldr	r2, [pc, #256]	; (800d404 <TIM_Base_SetConfig+0x12c>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d007      	beq.n	800d318 <TIM_Base_SetConfig+0x40>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a3f      	ldr	r2, [pc, #252]	; (800d408 <TIM_Base_SetConfig+0x130>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d003      	beq.n	800d318 <TIM_Base_SetConfig+0x40>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4a3e      	ldr	r2, [pc, #248]	; (800d40c <TIM_Base_SetConfig+0x134>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d108      	bne.n	800d32a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d31e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	68fa      	ldr	r2, [r7, #12]
 800d326:	4313      	orrs	r3, r2
 800d328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4a33      	ldr	r2, [pc, #204]	; (800d3fc <TIM_Base_SetConfig+0x124>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d027      	beq.n	800d382 <TIM_Base_SetConfig+0xaa>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d338:	d023      	beq.n	800d382 <TIM_Base_SetConfig+0xaa>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	4a30      	ldr	r2, [pc, #192]	; (800d400 <TIM_Base_SetConfig+0x128>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d01f      	beq.n	800d382 <TIM_Base_SetConfig+0xaa>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4a2f      	ldr	r2, [pc, #188]	; (800d404 <TIM_Base_SetConfig+0x12c>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d01b      	beq.n	800d382 <TIM_Base_SetConfig+0xaa>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4a2e      	ldr	r2, [pc, #184]	; (800d408 <TIM_Base_SetConfig+0x130>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d017      	beq.n	800d382 <TIM_Base_SetConfig+0xaa>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	4a2d      	ldr	r2, [pc, #180]	; (800d40c <TIM_Base_SetConfig+0x134>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d013      	beq.n	800d382 <TIM_Base_SetConfig+0xaa>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a2c      	ldr	r2, [pc, #176]	; (800d410 <TIM_Base_SetConfig+0x138>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d00f      	beq.n	800d382 <TIM_Base_SetConfig+0xaa>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	4a2b      	ldr	r2, [pc, #172]	; (800d414 <TIM_Base_SetConfig+0x13c>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d00b      	beq.n	800d382 <TIM_Base_SetConfig+0xaa>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4a2a      	ldr	r2, [pc, #168]	; (800d418 <TIM_Base_SetConfig+0x140>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d007      	beq.n	800d382 <TIM_Base_SetConfig+0xaa>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	4a29      	ldr	r2, [pc, #164]	; (800d41c <TIM_Base_SetConfig+0x144>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d003      	beq.n	800d382 <TIM_Base_SetConfig+0xaa>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	4a28      	ldr	r2, [pc, #160]	; (800d420 <TIM_Base_SetConfig+0x148>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d108      	bne.n	800d394 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	4313      	orrs	r3, r2
 800d392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	695b      	ldr	r3, [r3, #20]
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	689a      	ldr	r2, [r3, #8]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	681a      	ldr	r2, [r3, #0]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	4a10      	ldr	r2, [pc, #64]	; (800d3fc <TIM_Base_SetConfig+0x124>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d00f      	beq.n	800d3e0 <TIM_Base_SetConfig+0x108>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4a12      	ldr	r2, [pc, #72]	; (800d40c <TIM_Base_SetConfig+0x134>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d00b      	beq.n	800d3e0 <TIM_Base_SetConfig+0x108>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4a11      	ldr	r2, [pc, #68]	; (800d410 <TIM_Base_SetConfig+0x138>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d007      	beq.n	800d3e0 <TIM_Base_SetConfig+0x108>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	4a10      	ldr	r2, [pc, #64]	; (800d414 <TIM_Base_SetConfig+0x13c>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d003      	beq.n	800d3e0 <TIM_Base_SetConfig+0x108>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	4a0f      	ldr	r2, [pc, #60]	; (800d418 <TIM_Base_SetConfig+0x140>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d103      	bne.n	800d3e8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	691a      	ldr	r2, [r3, #16]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	615a      	str	r2, [r3, #20]
}
 800d3ee:	bf00      	nop
 800d3f0:	3714      	adds	r7, #20
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	40010000 	.word	0x40010000
 800d400:	40000400 	.word	0x40000400
 800d404:	40000800 	.word	0x40000800
 800d408:	40000c00 	.word	0x40000c00
 800d40c:	40010400 	.word	0x40010400
 800d410:	40014000 	.word	0x40014000
 800d414:	40014400 	.word	0x40014400
 800d418:	40014800 	.word	0x40014800
 800d41c:	4000e000 	.word	0x4000e000
 800d420:	4000e400 	.word	0x4000e400

0800d424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d424:	b480      	push	{r7}
 800d426:	b087      	sub	sp, #28
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6a1b      	ldr	r3, [r3, #32]
 800d432:	f023 0201 	bic.w	r2, r3, #1
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a1b      	ldr	r3, [r3, #32]
 800d43e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	699b      	ldr	r3, [r3, #24]
 800d44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	4b37      	ldr	r3, [pc, #220]	; (800d52c <TIM_OC1_SetConfig+0x108>)
 800d450:	4013      	ands	r3, r2
 800d452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f023 0303 	bic.w	r3, r3, #3
 800d45a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	68fa      	ldr	r2, [r7, #12]
 800d462:	4313      	orrs	r3, r2
 800d464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f023 0302 	bic.w	r3, r3, #2
 800d46c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	697a      	ldr	r2, [r7, #20]
 800d474:	4313      	orrs	r3, r2
 800d476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a2d      	ldr	r2, [pc, #180]	; (800d530 <TIM_OC1_SetConfig+0x10c>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d00f      	beq.n	800d4a0 <TIM_OC1_SetConfig+0x7c>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a2c      	ldr	r2, [pc, #176]	; (800d534 <TIM_OC1_SetConfig+0x110>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d00b      	beq.n	800d4a0 <TIM_OC1_SetConfig+0x7c>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4a2b      	ldr	r2, [pc, #172]	; (800d538 <TIM_OC1_SetConfig+0x114>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d007      	beq.n	800d4a0 <TIM_OC1_SetConfig+0x7c>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4a2a      	ldr	r2, [pc, #168]	; (800d53c <TIM_OC1_SetConfig+0x118>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d003      	beq.n	800d4a0 <TIM_OC1_SetConfig+0x7c>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	4a29      	ldr	r2, [pc, #164]	; (800d540 <TIM_OC1_SetConfig+0x11c>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d10c      	bne.n	800d4ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	f023 0308 	bic.w	r3, r3, #8
 800d4a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	697a      	ldr	r2, [r7, #20]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	f023 0304 	bic.w	r3, r3, #4
 800d4b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	4a1c      	ldr	r2, [pc, #112]	; (800d530 <TIM_OC1_SetConfig+0x10c>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d00f      	beq.n	800d4e2 <TIM_OC1_SetConfig+0xbe>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	4a1b      	ldr	r2, [pc, #108]	; (800d534 <TIM_OC1_SetConfig+0x110>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d00b      	beq.n	800d4e2 <TIM_OC1_SetConfig+0xbe>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4a1a      	ldr	r2, [pc, #104]	; (800d538 <TIM_OC1_SetConfig+0x114>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d007      	beq.n	800d4e2 <TIM_OC1_SetConfig+0xbe>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	4a19      	ldr	r2, [pc, #100]	; (800d53c <TIM_OC1_SetConfig+0x118>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d003      	beq.n	800d4e2 <TIM_OC1_SetConfig+0xbe>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4a18      	ldr	r2, [pc, #96]	; (800d540 <TIM_OC1_SetConfig+0x11c>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d111      	bne.n	800d506 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d4f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	695b      	ldr	r3, [r3, #20]
 800d4f6:	693a      	ldr	r2, [r7, #16]
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	699b      	ldr	r3, [r3, #24]
 800d500:	693a      	ldr	r2, [r7, #16]
 800d502:	4313      	orrs	r3, r2
 800d504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	693a      	ldr	r2, [r7, #16]
 800d50a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	68fa      	ldr	r2, [r7, #12]
 800d510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	685a      	ldr	r2, [r3, #4]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	697a      	ldr	r2, [r7, #20]
 800d51e:	621a      	str	r2, [r3, #32]
}
 800d520:	bf00      	nop
 800d522:	371c      	adds	r7, #28
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr
 800d52c:	fffeff8f 	.word	0xfffeff8f
 800d530:	40010000 	.word	0x40010000
 800d534:	40010400 	.word	0x40010400
 800d538:	40014000 	.word	0x40014000
 800d53c:	40014400 	.word	0x40014400
 800d540:	40014800 	.word	0x40014800

0800d544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d544:	b480      	push	{r7}
 800d546:	b087      	sub	sp, #28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6a1b      	ldr	r3, [r3, #32]
 800d552:	f023 0210 	bic.w	r2, r3, #16
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6a1b      	ldr	r3, [r3, #32]
 800d55e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	699b      	ldr	r3, [r3, #24]
 800d56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d56c:	68fa      	ldr	r2, [r7, #12]
 800d56e:	4b34      	ldr	r3, [pc, #208]	; (800d640 <TIM_OC2_SetConfig+0xfc>)
 800d570:	4013      	ands	r3, r2
 800d572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d57a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	021b      	lsls	r3, r3, #8
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	4313      	orrs	r3, r2
 800d586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	f023 0320 	bic.w	r3, r3, #32
 800d58e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	011b      	lsls	r3, r3, #4
 800d596:	697a      	ldr	r2, [r7, #20]
 800d598:	4313      	orrs	r3, r2
 800d59a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4a29      	ldr	r2, [pc, #164]	; (800d644 <TIM_OC2_SetConfig+0x100>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d003      	beq.n	800d5ac <TIM_OC2_SetConfig+0x68>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	4a28      	ldr	r2, [pc, #160]	; (800d648 <TIM_OC2_SetConfig+0x104>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d10d      	bne.n	800d5c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	011b      	lsls	r3, r3, #4
 800d5ba:	697a      	ldr	r2, [r7, #20]
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4a1e      	ldr	r2, [pc, #120]	; (800d644 <TIM_OC2_SetConfig+0x100>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d00f      	beq.n	800d5f0 <TIM_OC2_SetConfig+0xac>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	4a1d      	ldr	r2, [pc, #116]	; (800d648 <TIM_OC2_SetConfig+0x104>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d00b      	beq.n	800d5f0 <TIM_OC2_SetConfig+0xac>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	4a1c      	ldr	r2, [pc, #112]	; (800d64c <TIM_OC2_SetConfig+0x108>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d007      	beq.n	800d5f0 <TIM_OC2_SetConfig+0xac>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	4a1b      	ldr	r2, [pc, #108]	; (800d650 <TIM_OC2_SetConfig+0x10c>)
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d003      	beq.n	800d5f0 <TIM_OC2_SetConfig+0xac>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	4a1a      	ldr	r2, [pc, #104]	; (800d654 <TIM_OC2_SetConfig+0x110>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d113      	bne.n	800d618 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d5f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d5fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	695b      	ldr	r3, [r3, #20]
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	693a      	ldr	r2, [r7, #16]
 800d608:	4313      	orrs	r3, r2
 800d60a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	699b      	ldr	r3, [r3, #24]
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	693a      	ldr	r2, [r7, #16]
 800d614:	4313      	orrs	r3, r2
 800d616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	693a      	ldr	r2, [r7, #16]
 800d61c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	68fa      	ldr	r2, [r7, #12]
 800d622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	685a      	ldr	r2, [r3, #4]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	697a      	ldr	r2, [r7, #20]
 800d630:	621a      	str	r2, [r3, #32]
}
 800d632:	bf00      	nop
 800d634:	371c      	adds	r7, #28
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	feff8fff 	.word	0xfeff8fff
 800d644:	40010000 	.word	0x40010000
 800d648:	40010400 	.word	0x40010400
 800d64c:	40014000 	.word	0x40014000
 800d650:	40014400 	.word	0x40014400
 800d654:	40014800 	.word	0x40014800

0800d658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d658:	b480      	push	{r7}
 800d65a:	b087      	sub	sp, #28
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6a1b      	ldr	r3, [r3, #32]
 800d666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a1b      	ldr	r3, [r3, #32]
 800d672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	69db      	ldr	r3, [r3, #28]
 800d67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d680:	68fa      	ldr	r2, [r7, #12]
 800d682:	4b33      	ldr	r3, [pc, #204]	; (800d750 <TIM_OC3_SetConfig+0xf8>)
 800d684:	4013      	ands	r3, r2
 800d686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f023 0303 	bic.w	r3, r3, #3
 800d68e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	4313      	orrs	r3, r2
 800d698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d6a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	689b      	ldr	r3, [r3, #8]
 800d6a6:	021b      	lsls	r3, r3, #8
 800d6a8:	697a      	ldr	r2, [r7, #20]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4a28      	ldr	r2, [pc, #160]	; (800d754 <TIM_OC3_SetConfig+0xfc>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d003      	beq.n	800d6be <TIM_OC3_SetConfig+0x66>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	4a27      	ldr	r2, [pc, #156]	; (800d758 <TIM_OC3_SetConfig+0x100>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d10d      	bne.n	800d6da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d6c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	021b      	lsls	r3, r3, #8
 800d6cc:	697a      	ldr	r2, [r7, #20]
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d6d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4a1d      	ldr	r2, [pc, #116]	; (800d754 <TIM_OC3_SetConfig+0xfc>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d00f      	beq.n	800d702 <TIM_OC3_SetConfig+0xaa>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4a1c      	ldr	r2, [pc, #112]	; (800d758 <TIM_OC3_SetConfig+0x100>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d00b      	beq.n	800d702 <TIM_OC3_SetConfig+0xaa>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4a1b      	ldr	r2, [pc, #108]	; (800d75c <TIM_OC3_SetConfig+0x104>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d007      	beq.n	800d702 <TIM_OC3_SetConfig+0xaa>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4a1a      	ldr	r2, [pc, #104]	; (800d760 <TIM_OC3_SetConfig+0x108>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d003      	beq.n	800d702 <TIM_OC3_SetConfig+0xaa>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4a19      	ldr	r2, [pc, #100]	; (800d764 <TIM_OC3_SetConfig+0x10c>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d113      	bne.n	800d72a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	695b      	ldr	r3, [r3, #20]
 800d716:	011b      	lsls	r3, r3, #4
 800d718:	693a      	ldr	r2, [r7, #16]
 800d71a:	4313      	orrs	r3, r2
 800d71c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	699b      	ldr	r3, [r3, #24]
 800d722:	011b      	lsls	r3, r3, #4
 800d724:	693a      	ldr	r2, [r7, #16]
 800d726:	4313      	orrs	r3, r2
 800d728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	693a      	ldr	r2, [r7, #16]
 800d72e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	68fa      	ldr	r2, [r7, #12]
 800d734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	685a      	ldr	r2, [r3, #4]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	697a      	ldr	r2, [r7, #20]
 800d742:	621a      	str	r2, [r3, #32]
}
 800d744:	bf00      	nop
 800d746:	371c      	adds	r7, #28
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr
 800d750:	fffeff8f 	.word	0xfffeff8f
 800d754:	40010000 	.word	0x40010000
 800d758:	40010400 	.word	0x40010400
 800d75c:	40014000 	.word	0x40014000
 800d760:	40014400 	.word	0x40014400
 800d764:	40014800 	.word	0x40014800

0800d768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d768:	b480      	push	{r7}
 800d76a:	b087      	sub	sp, #28
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6a1b      	ldr	r3, [r3, #32]
 800d776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6a1b      	ldr	r3, [r3, #32]
 800d782:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	69db      	ldr	r3, [r3, #28]
 800d78e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d790:	68fa      	ldr	r2, [r7, #12]
 800d792:	4b24      	ldr	r3, [pc, #144]	; (800d824 <TIM_OC4_SetConfig+0xbc>)
 800d794:	4013      	ands	r3, r2
 800d796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d79e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	021b      	lsls	r3, r3, #8
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d7b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	689b      	ldr	r3, [r3, #8]
 800d7b8:	031b      	lsls	r3, r3, #12
 800d7ba:	693a      	ldr	r2, [r7, #16]
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	4a19      	ldr	r2, [pc, #100]	; (800d828 <TIM_OC4_SetConfig+0xc0>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d00f      	beq.n	800d7e8 <TIM_OC4_SetConfig+0x80>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4a18      	ldr	r2, [pc, #96]	; (800d82c <TIM_OC4_SetConfig+0xc4>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d00b      	beq.n	800d7e8 <TIM_OC4_SetConfig+0x80>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4a17      	ldr	r2, [pc, #92]	; (800d830 <TIM_OC4_SetConfig+0xc8>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d007      	beq.n	800d7e8 <TIM_OC4_SetConfig+0x80>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a16      	ldr	r2, [pc, #88]	; (800d834 <TIM_OC4_SetConfig+0xcc>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d003      	beq.n	800d7e8 <TIM_OC4_SetConfig+0x80>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a15      	ldr	r2, [pc, #84]	; (800d838 <TIM_OC4_SetConfig+0xd0>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d109      	bne.n	800d7fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	695b      	ldr	r3, [r3, #20]
 800d7f4:	019b      	lsls	r3, r3, #6
 800d7f6:	697a      	ldr	r2, [r7, #20]
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	697a      	ldr	r2, [r7, #20]
 800d800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	68fa      	ldr	r2, [r7, #12]
 800d806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	685a      	ldr	r2, [r3, #4]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	693a      	ldr	r2, [r7, #16]
 800d814:	621a      	str	r2, [r3, #32]
}
 800d816:	bf00      	nop
 800d818:	371c      	adds	r7, #28
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop
 800d824:	feff8fff 	.word	0xfeff8fff
 800d828:	40010000 	.word	0x40010000
 800d82c:	40010400 	.word	0x40010400
 800d830:	40014000 	.word	0x40014000
 800d834:	40014400 	.word	0x40014400
 800d838:	40014800 	.word	0x40014800

0800d83c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d83c:	b480      	push	{r7}
 800d83e:	b087      	sub	sp, #28
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a1b      	ldr	r3, [r3, #32]
 800d84a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a1b      	ldr	r3, [r3, #32]
 800d856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	685b      	ldr	r3, [r3, #4]
 800d85c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d864:	68fa      	ldr	r2, [r7, #12]
 800d866:	4b21      	ldr	r3, [pc, #132]	; (800d8ec <TIM_OC5_SetConfig+0xb0>)
 800d868:	4013      	ands	r3, r2
 800d86a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	4313      	orrs	r3, r2
 800d874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d87c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	041b      	lsls	r3, r3, #16
 800d884:	693a      	ldr	r2, [r7, #16]
 800d886:	4313      	orrs	r3, r2
 800d888:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	4a18      	ldr	r2, [pc, #96]	; (800d8f0 <TIM_OC5_SetConfig+0xb4>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d00f      	beq.n	800d8b2 <TIM_OC5_SetConfig+0x76>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	4a17      	ldr	r2, [pc, #92]	; (800d8f4 <TIM_OC5_SetConfig+0xb8>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d00b      	beq.n	800d8b2 <TIM_OC5_SetConfig+0x76>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4a16      	ldr	r2, [pc, #88]	; (800d8f8 <TIM_OC5_SetConfig+0xbc>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d007      	beq.n	800d8b2 <TIM_OC5_SetConfig+0x76>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a15      	ldr	r2, [pc, #84]	; (800d8fc <TIM_OC5_SetConfig+0xc0>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d003      	beq.n	800d8b2 <TIM_OC5_SetConfig+0x76>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a14      	ldr	r2, [pc, #80]	; (800d900 <TIM_OC5_SetConfig+0xc4>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d109      	bne.n	800d8c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	695b      	ldr	r3, [r3, #20]
 800d8be:	021b      	lsls	r3, r3, #8
 800d8c0:	697a      	ldr	r2, [r7, #20]
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	697a      	ldr	r2, [r7, #20]
 800d8ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	685a      	ldr	r2, [r3, #4]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	693a      	ldr	r2, [r7, #16]
 800d8de:	621a      	str	r2, [r3, #32]
}
 800d8e0:	bf00      	nop
 800d8e2:	371c      	adds	r7, #28
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr
 800d8ec:	fffeff8f 	.word	0xfffeff8f
 800d8f0:	40010000 	.word	0x40010000
 800d8f4:	40010400 	.word	0x40010400
 800d8f8:	40014000 	.word	0x40014000
 800d8fc:	40014400 	.word	0x40014400
 800d900:	40014800 	.word	0x40014800

0800d904 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d904:	b480      	push	{r7}
 800d906:	b087      	sub	sp, #28
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6a1b      	ldr	r3, [r3, #32]
 800d912:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6a1b      	ldr	r3, [r3, #32]
 800d91e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d92c:	68fa      	ldr	r2, [r7, #12]
 800d92e:	4b22      	ldr	r3, [pc, #136]	; (800d9b8 <TIM_OC6_SetConfig+0xb4>)
 800d930:	4013      	ands	r3, r2
 800d932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	021b      	lsls	r3, r3, #8
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	4313      	orrs	r3, r2
 800d93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	051b      	lsls	r3, r3, #20
 800d94e:	693a      	ldr	r2, [r7, #16]
 800d950:	4313      	orrs	r3, r2
 800d952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4a19      	ldr	r2, [pc, #100]	; (800d9bc <TIM_OC6_SetConfig+0xb8>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d00f      	beq.n	800d97c <TIM_OC6_SetConfig+0x78>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	4a18      	ldr	r2, [pc, #96]	; (800d9c0 <TIM_OC6_SetConfig+0xbc>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d00b      	beq.n	800d97c <TIM_OC6_SetConfig+0x78>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	4a17      	ldr	r2, [pc, #92]	; (800d9c4 <TIM_OC6_SetConfig+0xc0>)
 800d968:	4293      	cmp	r3, r2
 800d96a:	d007      	beq.n	800d97c <TIM_OC6_SetConfig+0x78>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4a16      	ldr	r2, [pc, #88]	; (800d9c8 <TIM_OC6_SetConfig+0xc4>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d003      	beq.n	800d97c <TIM_OC6_SetConfig+0x78>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	4a15      	ldr	r2, [pc, #84]	; (800d9cc <TIM_OC6_SetConfig+0xc8>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d109      	bne.n	800d990 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d982:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	695b      	ldr	r3, [r3, #20]
 800d988:	029b      	lsls	r3, r3, #10
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	4313      	orrs	r3, r2
 800d98e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	697a      	ldr	r2, [r7, #20]
 800d994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	68fa      	ldr	r2, [r7, #12]
 800d99a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	685a      	ldr	r2, [r3, #4]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	693a      	ldr	r2, [r7, #16]
 800d9a8:	621a      	str	r2, [r3, #32]
}
 800d9aa:	bf00      	nop
 800d9ac:	371c      	adds	r7, #28
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	feff8fff 	.word	0xfeff8fff
 800d9bc:	40010000 	.word	0x40010000
 800d9c0:	40010400 	.word	0x40010400
 800d9c4:	40014000 	.word	0x40014000
 800d9c8:	40014400 	.word	0x40014400
 800d9cc:	40014800 	.word	0x40014800

0800d9d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b087      	sub	sp, #28
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6a1b      	ldr	r3, [r3, #32]
 800d9e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6a1b      	ldr	r3, [r3, #32]
 800d9e6:	f023 0201 	bic.w	r2, r3, #1
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	699b      	ldr	r3, [r3, #24]
 800d9f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d9fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	011b      	lsls	r3, r3, #4
 800da00:	693a      	ldr	r2, [r7, #16]
 800da02:	4313      	orrs	r3, r2
 800da04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	f023 030a 	bic.w	r3, r3, #10
 800da0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800da0e:	697a      	ldr	r2, [r7, #20]
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	4313      	orrs	r3, r2
 800da14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	693a      	ldr	r2, [r7, #16]
 800da1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	697a      	ldr	r2, [r7, #20]
 800da20:	621a      	str	r2, [r3, #32]
}
 800da22:	bf00      	nop
 800da24:	371c      	adds	r7, #28
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr

0800da2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da2e:	b480      	push	{r7}
 800da30:	b087      	sub	sp, #28
 800da32:	af00      	add	r7, sp, #0
 800da34:	60f8      	str	r0, [r7, #12]
 800da36:	60b9      	str	r1, [r7, #8]
 800da38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6a1b      	ldr	r3, [r3, #32]
 800da3e:	f023 0210 	bic.w	r2, r3, #16
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	699b      	ldr	r3, [r3, #24]
 800da4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	6a1b      	ldr	r3, [r3, #32]
 800da50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800da58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	031b      	lsls	r3, r3, #12
 800da5e:	697a      	ldr	r2, [r7, #20]
 800da60:	4313      	orrs	r3, r2
 800da62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800da6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	011b      	lsls	r3, r3, #4
 800da70:	693a      	ldr	r2, [r7, #16]
 800da72:	4313      	orrs	r3, r2
 800da74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	697a      	ldr	r2, [r7, #20]
 800da7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	693a      	ldr	r2, [r7, #16]
 800da80:	621a      	str	r2, [r3, #32]
}
 800da82:	bf00      	nop
 800da84:	371c      	adds	r7, #28
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr
	...

0800da90 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800da90:	b480      	push	{r7}
 800da92:	b085      	sub	sp, #20
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	689b      	ldr	r3, [r3, #8]
 800da9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800daa0:	68fa      	ldr	r2, [r7, #12]
 800daa2:	4b09      	ldr	r3, [pc, #36]	; (800dac8 <TIM_ITRx_SetConfig+0x38>)
 800daa4:	4013      	ands	r3, r2
 800daa6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800daa8:	683a      	ldr	r2, [r7, #0]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	4313      	orrs	r3, r2
 800daae:	f043 0307 	orr.w	r3, r3, #7
 800dab2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	609a      	str	r2, [r3, #8]
}
 800daba:	bf00      	nop
 800dabc:	3714      	adds	r7, #20
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	ffcfff8f 	.word	0xffcfff8f

0800dacc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dacc:	b480      	push	{r7}
 800dace:	b087      	sub	sp, #28
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
 800dad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	689b      	ldr	r3, [r3, #8]
 800dade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	021a      	lsls	r2, r3, #8
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	431a      	orrs	r2, r3
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	697a      	ldr	r2, [r7, #20]
 800daf6:	4313      	orrs	r3, r2
 800daf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	697a      	ldr	r2, [r7, #20]
 800dafe:	609a      	str	r2, [r3, #8]
}
 800db00:	bf00      	nop
 800db02:	371c      	adds	r7, #28
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr

0800db0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b087      	sub	sp, #28
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	f003 031f 	and.w	r3, r3, #31
 800db1e:	2201      	movs	r2, #1
 800db20:	fa02 f303 	lsl.w	r3, r2, r3
 800db24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	6a1a      	ldr	r2, [r3, #32]
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	43db      	mvns	r3, r3
 800db2e:	401a      	ands	r2, r3
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6a1a      	ldr	r2, [r3, #32]
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	f003 031f 	and.w	r3, r3, #31
 800db3e:	6879      	ldr	r1, [r7, #4]
 800db40:	fa01 f303 	lsl.w	r3, r1, r3
 800db44:	431a      	orrs	r2, r3
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	621a      	str	r2, [r3, #32]
}
 800db4a:	bf00      	nop
 800db4c:	371c      	adds	r7, #28
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr
	...

0800db58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db58:	b480      	push	{r7}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d101      	bne.n	800db70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800db6c:	2302      	movs	r3, #2
 800db6e:	e077      	b.n	800dc60 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2201      	movs	r2, #1
 800db74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2202      	movs	r2, #2
 800db7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a35      	ldr	r2, [pc, #212]	; (800dc6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d004      	beq.n	800dba4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4a34      	ldr	r2, [pc, #208]	; (800dc70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d108      	bne.n	800dbb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dbaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	68fa      	ldr	r2, [r7, #12]
 800dbce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4a25      	ldr	r2, [pc, #148]	; (800dc6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d02c      	beq.n	800dc34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbe2:	d027      	beq.n	800dc34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4a22      	ldr	r2, [pc, #136]	; (800dc74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d022      	beq.n	800dc34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	4a21      	ldr	r2, [pc, #132]	; (800dc78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d01d      	beq.n	800dc34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a1f      	ldr	r2, [pc, #124]	; (800dc7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d018      	beq.n	800dc34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4a1a      	ldr	r2, [pc, #104]	; (800dc70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d013      	beq.n	800dc34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a1b      	ldr	r2, [pc, #108]	; (800dc80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d00e      	beq.n	800dc34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a1a      	ldr	r2, [pc, #104]	; (800dc84 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d009      	beq.n	800dc34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4a18      	ldr	r2, [pc, #96]	; (800dc88 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d004      	beq.n	800dc34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4a17      	ldr	r2, [pc, #92]	; (800dc8c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d10c      	bne.n	800dc4e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	68ba      	ldr	r2, [r7, #8]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2201      	movs	r2, #1
 800dc52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc5e:	2300      	movs	r3, #0
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3714      	adds	r7, #20
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr
 800dc6c:	40010000 	.word	0x40010000
 800dc70:	40010400 	.word	0x40010400
 800dc74:	40000400 	.word	0x40000400
 800dc78:	40000800 	.word	0x40000800
 800dc7c:	40000c00 	.word	0x40000c00
 800dc80:	40001800 	.word	0x40001800
 800dc84:	40014000 	.word	0x40014000
 800dc88:	4000e000 	.word	0x4000e000
 800dc8c:	4000e400 	.word	0x4000e400

0800dc90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b085      	sub	sp, #20
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d101      	bne.n	800dcac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dca8:	2302      	movs	r3, #2
 800dcaa:	e087      	b.n	800ddbc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	689b      	ldr	r3, [r3, #8]
 800dccc:	4313      	orrs	r3, r2
 800dcce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4313      	orrs	r3, r2
 800dcea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	691b      	ldr	r3, [r3, #16]
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	695b      	ldr	r3, [r3, #20]
 800dd04:	4313      	orrs	r3, r2
 800dd06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd12:	4313      	orrs	r3, r2
 800dd14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	699b      	ldr	r3, [r3, #24]
 800dd20:	041b      	lsls	r3, r3, #16
 800dd22:	4313      	orrs	r3, r2
 800dd24:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4a27      	ldr	r2, [pc, #156]	; (800ddc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d004      	beq.n	800dd3a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a25      	ldr	r2, [pc, #148]	; (800ddcc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d106      	bne.n	800dd48 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	69db      	ldr	r3, [r3, #28]
 800dd44:	4313      	orrs	r3, r2
 800dd46:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a1e      	ldr	r2, [pc, #120]	; (800ddc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d004      	beq.n	800dd5c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4a1d      	ldr	r2, [pc, #116]	; (800ddcc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d126      	bne.n	800ddaa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd66:	051b      	lsls	r3, r3, #20
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	6a1b      	ldr	r3, [r3, #32]
 800dd76:	4313      	orrs	r3, r2
 800dd78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd84:	4313      	orrs	r3, r2
 800dd86:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a0e      	ldr	r2, [pc, #56]	; (800ddc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d004      	beq.n	800dd9c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4a0d      	ldr	r2, [pc, #52]	; (800ddcc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d106      	bne.n	800ddaa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda6:	4313      	orrs	r3, r2
 800dda8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	68fa      	ldr	r2, [r7, #12]
 800ddb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ddba:	2300      	movs	r3, #0
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3714      	adds	r7, #20
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr
 800ddc8:	40010000 	.word	0x40010000
 800ddcc:	40010400 	.word	0x40010400

0800ddd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ddec:	bf00      	nop
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800de00:	bf00      	nop
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d101      	bne.n	800de1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de1a:	2301      	movs	r3, #1
 800de1c:	e042      	b.n	800dea4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de24:	2b00      	cmp	r3, #0
 800de26:	d106      	bne.n	800de36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2200      	movs	r2, #0
 800de2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f7f5 fab3 	bl	800339c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2224      	movs	r2, #36	; 0x24
 800de3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	681a      	ldr	r2, [r3, #0]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f022 0201 	bic.w	r2, r2, #1
 800de4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f000 f8ac 	bl	800dfac <UART_SetConfig>
 800de54:	4603      	mov	r3, r0
 800de56:	2b01      	cmp	r3, #1
 800de58:	d101      	bne.n	800de5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	e022      	b.n	800dea4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de62:	2b00      	cmp	r3, #0
 800de64:	d002      	beq.n	800de6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fefe 	bl	800ec68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	685a      	ldr	r2, [r3, #4]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	689a      	ldr	r2, [r3, #8]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f042 0201 	orr.w	r2, r2, #1
 800de9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f000 ff85 	bl	800edac <UART_CheckIdleState>
 800dea2:	4603      	mov	r3, r0
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3708      	adds	r7, #8
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b08a      	sub	sp, #40	; 0x28
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	4613      	mov	r3, r2
 800deb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dec0:	2b20      	cmp	r3, #32
 800dec2:	d142      	bne.n	800df4a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d002      	beq.n	800ded0 <HAL_UART_Receive_DMA+0x24>
 800deca:	88fb      	ldrh	r3, [r7, #6]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d101      	bne.n	800ded4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ded0:	2301      	movs	r3, #1
 800ded2:	e03b      	b.n	800df4c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d101      	bne.n	800dee2 <HAL_UART_Receive_DMA+0x36>
 800dede:	2302      	movs	r3, #2
 800dee0:	e034      	b.n	800df4c <HAL_UART_Receive_DMA+0xa0>
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2201      	movs	r2, #1
 800dee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2200      	movs	r2, #0
 800deee:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4a17      	ldr	r2, [pc, #92]	; (800df54 <HAL_UART_Receive_DMA+0xa8>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d01f      	beq.n	800df3a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df04:	2b00      	cmp	r3, #0
 800df06:	d018      	beq.n	800df3a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	e853 3f00 	ldrex	r3, [r3]
 800df14:	613b      	str	r3, [r7, #16]
   return(result);
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df1c:	627b      	str	r3, [r7, #36]	; 0x24
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	461a      	mov	r2, r3
 800df24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df26:	623b      	str	r3, [r7, #32]
 800df28:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df2a:	69f9      	ldr	r1, [r7, #28]
 800df2c:	6a3a      	ldr	r2, [r7, #32]
 800df2e:	e841 2300 	strex	r3, r2, [r1]
 800df32:	61bb      	str	r3, [r7, #24]
   return(result);
 800df34:	69bb      	ldr	r3, [r7, #24]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d1e6      	bne.n	800df08 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800df3a:	88fb      	ldrh	r3, [r7, #6]
 800df3c:	461a      	mov	r2, r3
 800df3e:	68b9      	ldr	r1, [r7, #8]
 800df40:	68f8      	ldr	r0, [r7, #12]
 800df42:	f001 f847 	bl	800efd4 <UART_Start_Receive_DMA>
 800df46:	4603      	mov	r3, r0
 800df48:	e000      	b.n	800df4c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800df4a:	2302      	movs	r3, #2
  }
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3728      	adds	r7, #40	; 0x28
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	58000c00 	.word	0x58000c00

0800df58 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800df60:	bf00      	nop
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800df74:	bf00      	nop
 800df76:	370c      	adds	r7, #12
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800df88:	bf00      	nop
 800df8a:	370c      	adds	r7, #12
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	460b      	mov	r3, r1
 800df9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dfa0:	bf00      	nop
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dfac:	b5b0      	push	{r4, r5, r7, lr}
 800dfae:	b08e      	sub	sp, #56	; 0x38
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	689a      	ldr	r2, [r3, #8]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	691b      	ldr	r3, [r3, #16]
 800dfc2:	431a      	orrs	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	695b      	ldr	r3, [r3, #20]
 800dfc8:	431a      	orrs	r2, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	69db      	ldr	r3, [r3, #28]
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	4bbf      	ldr	r3, [pc, #764]	; (800e2d8 <UART_SetConfig+0x32c>)
 800dfda:	4013      	ands	r3, r2
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	6812      	ldr	r2, [r2, #0]
 800dfe0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dfe2:	430b      	orrs	r3, r1
 800dfe4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68da      	ldr	r2, [r3, #12]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	430a      	orrs	r2, r1
 800dffa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	699b      	ldr	r3, [r3, #24]
 800e000:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4ab5      	ldr	r2, [pc, #724]	; (800e2dc <UART_SetConfig+0x330>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d004      	beq.n	800e016 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6a1b      	ldr	r3, [r3, #32]
 800e010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e012:	4313      	orrs	r3, r2
 800e014:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	689a      	ldr	r2, [r3, #8]
 800e01c:	4bb0      	ldr	r3, [pc, #704]	; (800e2e0 <UART_SetConfig+0x334>)
 800e01e:	4013      	ands	r3, r2
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	6812      	ldr	r2, [r2, #0]
 800e024:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e026:	430b      	orrs	r3, r1
 800e028:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e030:	f023 010f 	bic.w	r1, r3, #15
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	430a      	orrs	r2, r1
 800e03e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4aa7      	ldr	r2, [pc, #668]	; (800e2e4 <UART_SetConfig+0x338>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d176      	bne.n	800e138 <UART_SetConfig+0x18c>
 800e04a:	4ba7      	ldr	r3, [pc, #668]	; (800e2e8 <UART_SetConfig+0x33c>)
 800e04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e04e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e052:	2b28      	cmp	r3, #40	; 0x28
 800e054:	d86c      	bhi.n	800e130 <UART_SetConfig+0x184>
 800e056:	a201      	add	r2, pc, #4	; (adr r2, 800e05c <UART_SetConfig+0xb0>)
 800e058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e05c:	0800e101 	.word	0x0800e101
 800e060:	0800e131 	.word	0x0800e131
 800e064:	0800e131 	.word	0x0800e131
 800e068:	0800e131 	.word	0x0800e131
 800e06c:	0800e131 	.word	0x0800e131
 800e070:	0800e131 	.word	0x0800e131
 800e074:	0800e131 	.word	0x0800e131
 800e078:	0800e131 	.word	0x0800e131
 800e07c:	0800e109 	.word	0x0800e109
 800e080:	0800e131 	.word	0x0800e131
 800e084:	0800e131 	.word	0x0800e131
 800e088:	0800e131 	.word	0x0800e131
 800e08c:	0800e131 	.word	0x0800e131
 800e090:	0800e131 	.word	0x0800e131
 800e094:	0800e131 	.word	0x0800e131
 800e098:	0800e131 	.word	0x0800e131
 800e09c:	0800e111 	.word	0x0800e111
 800e0a0:	0800e131 	.word	0x0800e131
 800e0a4:	0800e131 	.word	0x0800e131
 800e0a8:	0800e131 	.word	0x0800e131
 800e0ac:	0800e131 	.word	0x0800e131
 800e0b0:	0800e131 	.word	0x0800e131
 800e0b4:	0800e131 	.word	0x0800e131
 800e0b8:	0800e131 	.word	0x0800e131
 800e0bc:	0800e119 	.word	0x0800e119
 800e0c0:	0800e131 	.word	0x0800e131
 800e0c4:	0800e131 	.word	0x0800e131
 800e0c8:	0800e131 	.word	0x0800e131
 800e0cc:	0800e131 	.word	0x0800e131
 800e0d0:	0800e131 	.word	0x0800e131
 800e0d4:	0800e131 	.word	0x0800e131
 800e0d8:	0800e131 	.word	0x0800e131
 800e0dc:	0800e121 	.word	0x0800e121
 800e0e0:	0800e131 	.word	0x0800e131
 800e0e4:	0800e131 	.word	0x0800e131
 800e0e8:	0800e131 	.word	0x0800e131
 800e0ec:	0800e131 	.word	0x0800e131
 800e0f0:	0800e131 	.word	0x0800e131
 800e0f4:	0800e131 	.word	0x0800e131
 800e0f8:	0800e131 	.word	0x0800e131
 800e0fc:	0800e129 	.word	0x0800e129
 800e100:	2301      	movs	r3, #1
 800e102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e106:	e326      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e108:	2304      	movs	r3, #4
 800e10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e10e:	e322      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e110:	2308      	movs	r3, #8
 800e112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e116:	e31e      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e118:	2310      	movs	r3, #16
 800e11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e11e:	e31a      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e120:	2320      	movs	r3, #32
 800e122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e126:	e316      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e128:	2340      	movs	r3, #64	; 0x40
 800e12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e12e:	e312      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e130:	2380      	movs	r3, #128	; 0x80
 800e132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e136:	e30e      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a6b      	ldr	r2, [pc, #428]	; (800e2ec <UART_SetConfig+0x340>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d130      	bne.n	800e1a4 <UART_SetConfig+0x1f8>
 800e142:	4b69      	ldr	r3, [pc, #420]	; (800e2e8 <UART_SetConfig+0x33c>)
 800e144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e146:	f003 0307 	and.w	r3, r3, #7
 800e14a:	2b05      	cmp	r3, #5
 800e14c:	d826      	bhi.n	800e19c <UART_SetConfig+0x1f0>
 800e14e:	a201      	add	r2, pc, #4	; (adr r2, 800e154 <UART_SetConfig+0x1a8>)
 800e150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e154:	0800e16d 	.word	0x0800e16d
 800e158:	0800e175 	.word	0x0800e175
 800e15c:	0800e17d 	.word	0x0800e17d
 800e160:	0800e185 	.word	0x0800e185
 800e164:	0800e18d 	.word	0x0800e18d
 800e168:	0800e195 	.word	0x0800e195
 800e16c:	2300      	movs	r3, #0
 800e16e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e172:	e2f0      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e174:	2304      	movs	r3, #4
 800e176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e17a:	e2ec      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e17c:	2308      	movs	r3, #8
 800e17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e182:	e2e8      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e184:	2310      	movs	r3, #16
 800e186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e18a:	e2e4      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e18c:	2320      	movs	r3, #32
 800e18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e192:	e2e0      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e194:	2340      	movs	r3, #64	; 0x40
 800e196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e19a:	e2dc      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e19c:	2380      	movs	r3, #128	; 0x80
 800e19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1a2:	e2d8      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a51      	ldr	r2, [pc, #324]	; (800e2f0 <UART_SetConfig+0x344>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d130      	bne.n	800e210 <UART_SetConfig+0x264>
 800e1ae:	4b4e      	ldr	r3, [pc, #312]	; (800e2e8 <UART_SetConfig+0x33c>)
 800e1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1b2:	f003 0307 	and.w	r3, r3, #7
 800e1b6:	2b05      	cmp	r3, #5
 800e1b8:	d826      	bhi.n	800e208 <UART_SetConfig+0x25c>
 800e1ba:	a201      	add	r2, pc, #4	; (adr r2, 800e1c0 <UART_SetConfig+0x214>)
 800e1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c0:	0800e1d9 	.word	0x0800e1d9
 800e1c4:	0800e1e1 	.word	0x0800e1e1
 800e1c8:	0800e1e9 	.word	0x0800e1e9
 800e1cc:	0800e1f1 	.word	0x0800e1f1
 800e1d0:	0800e1f9 	.word	0x0800e1f9
 800e1d4:	0800e201 	.word	0x0800e201
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1de:	e2ba      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e1e0:	2304      	movs	r3, #4
 800e1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1e6:	e2b6      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e1e8:	2308      	movs	r3, #8
 800e1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1ee:	e2b2      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e1f0:	2310      	movs	r3, #16
 800e1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1f6:	e2ae      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e1f8:	2320      	movs	r3, #32
 800e1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1fe:	e2aa      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e200:	2340      	movs	r3, #64	; 0x40
 800e202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e206:	e2a6      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e208:	2380      	movs	r3, #128	; 0x80
 800e20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e20e:	e2a2      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a37      	ldr	r2, [pc, #220]	; (800e2f4 <UART_SetConfig+0x348>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d130      	bne.n	800e27c <UART_SetConfig+0x2d0>
 800e21a:	4b33      	ldr	r3, [pc, #204]	; (800e2e8 <UART_SetConfig+0x33c>)
 800e21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e21e:	f003 0307 	and.w	r3, r3, #7
 800e222:	2b05      	cmp	r3, #5
 800e224:	d826      	bhi.n	800e274 <UART_SetConfig+0x2c8>
 800e226:	a201      	add	r2, pc, #4	; (adr r2, 800e22c <UART_SetConfig+0x280>)
 800e228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e22c:	0800e245 	.word	0x0800e245
 800e230:	0800e24d 	.word	0x0800e24d
 800e234:	0800e255 	.word	0x0800e255
 800e238:	0800e25d 	.word	0x0800e25d
 800e23c:	0800e265 	.word	0x0800e265
 800e240:	0800e26d 	.word	0x0800e26d
 800e244:	2300      	movs	r3, #0
 800e246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e24a:	e284      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e24c:	2304      	movs	r3, #4
 800e24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e252:	e280      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e254:	2308      	movs	r3, #8
 800e256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e25a:	e27c      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e25c:	2310      	movs	r3, #16
 800e25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e262:	e278      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e264:	2320      	movs	r3, #32
 800e266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e26a:	e274      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e26c:	2340      	movs	r3, #64	; 0x40
 800e26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e272:	e270      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e274:	2380      	movs	r3, #128	; 0x80
 800e276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e27a:	e26c      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a1d      	ldr	r2, [pc, #116]	; (800e2f8 <UART_SetConfig+0x34c>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d142      	bne.n	800e30c <UART_SetConfig+0x360>
 800e286:	4b18      	ldr	r3, [pc, #96]	; (800e2e8 <UART_SetConfig+0x33c>)
 800e288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e28a:	f003 0307 	and.w	r3, r3, #7
 800e28e:	2b05      	cmp	r3, #5
 800e290:	d838      	bhi.n	800e304 <UART_SetConfig+0x358>
 800e292:	a201      	add	r2, pc, #4	; (adr r2, 800e298 <UART_SetConfig+0x2ec>)
 800e294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e298:	0800e2b1 	.word	0x0800e2b1
 800e29c:	0800e2b9 	.word	0x0800e2b9
 800e2a0:	0800e2c1 	.word	0x0800e2c1
 800e2a4:	0800e2c9 	.word	0x0800e2c9
 800e2a8:	0800e2d1 	.word	0x0800e2d1
 800e2ac:	0800e2fd 	.word	0x0800e2fd
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2b6:	e24e      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e2b8:	2304      	movs	r3, #4
 800e2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2be:	e24a      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e2c0:	2308      	movs	r3, #8
 800e2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2c6:	e246      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e2c8:	2310      	movs	r3, #16
 800e2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2ce:	e242      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e2d0:	2320      	movs	r3, #32
 800e2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2d6:	e23e      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e2d8:	cfff69f3 	.word	0xcfff69f3
 800e2dc:	58000c00 	.word	0x58000c00
 800e2e0:	11fff4ff 	.word	0x11fff4ff
 800e2e4:	40011000 	.word	0x40011000
 800e2e8:	58024400 	.word	0x58024400
 800e2ec:	40004400 	.word	0x40004400
 800e2f0:	40004800 	.word	0x40004800
 800e2f4:	40004c00 	.word	0x40004c00
 800e2f8:	40005000 	.word	0x40005000
 800e2fc:	2340      	movs	r3, #64	; 0x40
 800e2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e302:	e228      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e304:	2380      	movs	r3, #128	; 0x80
 800e306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e30a:	e224      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4ab1      	ldr	r2, [pc, #708]	; (800e5d8 <UART_SetConfig+0x62c>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d176      	bne.n	800e404 <UART_SetConfig+0x458>
 800e316:	4bb1      	ldr	r3, [pc, #708]	; (800e5dc <UART_SetConfig+0x630>)
 800e318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e31a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e31e:	2b28      	cmp	r3, #40	; 0x28
 800e320:	d86c      	bhi.n	800e3fc <UART_SetConfig+0x450>
 800e322:	a201      	add	r2, pc, #4	; (adr r2, 800e328 <UART_SetConfig+0x37c>)
 800e324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e328:	0800e3cd 	.word	0x0800e3cd
 800e32c:	0800e3fd 	.word	0x0800e3fd
 800e330:	0800e3fd 	.word	0x0800e3fd
 800e334:	0800e3fd 	.word	0x0800e3fd
 800e338:	0800e3fd 	.word	0x0800e3fd
 800e33c:	0800e3fd 	.word	0x0800e3fd
 800e340:	0800e3fd 	.word	0x0800e3fd
 800e344:	0800e3fd 	.word	0x0800e3fd
 800e348:	0800e3d5 	.word	0x0800e3d5
 800e34c:	0800e3fd 	.word	0x0800e3fd
 800e350:	0800e3fd 	.word	0x0800e3fd
 800e354:	0800e3fd 	.word	0x0800e3fd
 800e358:	0800e3fd 	.word	0x0800e3fd
 800e35c:	0800e3fd 	.word	0x0800e3fd
 800e360:	0800e3fd 	.word	0x0800e3fd
 800e364:	0800e3fd 	.word	0x0800e3fd
 800e368:	0800e3dd 	.word	0x0800e3dd
 800e36c:	0800e3fd 	.word	0x0800e3fd
 800e370:	0800e3fd 	.word	0x0800e3fd
 800e374:	0800e3fd 	.word	0x0800e3fd
 800e378:	0800e3fd 	.word	0x0800e3fd
 800e37c:	0800e3fd 	.word	0x0800e3fd
 800e380:	0800e3fd 	.word	0x0800e3fd
 800e384:	0800e3fd 	.word	0x0800e3fd
 800e388:	0800e3e5 	.word	0x0800e3e5
 800e38c:	0800e3fd 	.word	0x0800e3fd
 800e390:	0800e3fd 	.word	0x0800e3fd
 800e394:	0800e3fd 	.word	0x0800e3fd
 800e398:	0800e3fd 	.word	0x0800e3fd
 800e39c:	0800e3fd 	.word	0x0800e3fd
 800e3a0:	0800e3fd 	.word	0x0800e3fd
 800e3a4:	0800e3fd 	.word	0x0800e3fd
 800e3a8:	0800e3ed 	.word	0x0800e3ed
 800e3ac:	0800e3fd 	.word	0x0800e3fd
 800e3b0:	0800e3fd 	.word	0x0800e3fd
 800e3b4:	0800e3fd 	.word	0x0800e3fd
 800e3b8:	0800e3fd 	.word	0x0800e3fd
 800e3bc:	0800e3fd 	.word	0x0800e3fd
 800e3c0:	0800e3fd 	.word	0x0800e3fd
 800e3c4:	0800e3fd 	.word	0x0800e3fd
 800e3c8:	0800e3f5 	.word	0x0800e3f5
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3d2:	e1c0      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e3d4:	2304      	movs	r3, #4
 800e3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3da:	e1bc      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e3dc:	2308      	movs	r3, #8
 800e3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3e2:	e1b8      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e3e4:	2310      	movs	r3, #16
 800e3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3ea:	e1b4      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e3ec:	2320      	movs	r3, #32
 800e3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3f2:	e1b0      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e3f4:	2340      	movs	r3, #64	; 0x40
 800e3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3fa:	e1ac      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e3fc:	2380      	movs	r3, #128	; 0x80
 800e3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e402:	e1a8      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	4a75      	ldr	r2, [pc, #468]	; (800e5e0 <UART_SetConfig+0x634>)
 800e40a:	4293      	cmp	r3, r2
 800e40c:	d130      	bne.n	800e470 <UART_SetConfig+0x4c4>
 800e40e:	4b73      	ldr	r3, [pc, #460]	; (800e5dc <UART_SetConfig+0x630>)
 800e410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e412:	f003 0307 	and.w	r3, r3, #7
 800e416:	2b05      	cmp	r3, #5
 800e418:	d826      	bhi.n	800e468 <UART_SetConfig+0x4bc>
 800e41a:	a201      	add	r2, pc, #4	; (adr r2, 800e420 <UART_SetConfig+0x474>)
 800e41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e420:	0800e439 	.word	0x0800e439
 800e424:	0800e441 	.word	0x0800e441
 800e428:	0800e449 	.word	0x0800e449
 800e42c:	0800e451 	.word	0x0800e451
 800e430:	0800e459 	.word	0x0800e459
 800e434:	0800e461 	.word	0x0800e461
 800e438:	2300      	movs	r3, #0
 800e43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e43e:	e18a      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e440:	2304      	movs	r3, #4
 800e442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e446:	e186      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e448:	2308      	movs	r3, #8
 800e44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e44e:	e182      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e450:	2310      	movs	r3, #16
 800e452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e456:	e17e      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e458:	2320      	movs	r3, #32
 800e45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e45e:	e17a      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e460:	2340      	movs	r3, #64	; 0x40
 800e462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e466:	e176      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e468:	2380      	movs	r3, #128	; 0x80
 800e46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e46e:	e172      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4a5b      	ldr	r2, [pc, #364]	; (800e5e4 <UART_SetConfig+0x638>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d130      	bne.n	800e4dc <UART_SetConfig+0x530>
 800e47a:	4b58      	ldr	r3, [pc, #352]	; (800e5dc <UART_SetConfig+0x630>)
 800e47c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e47e:	f003 0307 	and.w	r3, r3, #7
 800e482:	2b05      	cmp	r3, #5
 800e484:	d826      	bhi.n	800e4d4 <UART_SetConfig+0x528>
 800e486:	a201      	add	r2, pc, #4	; (adr r2, 800e48c <UART_SetConfig+0x4e0>)
 800e488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e48c:	0800e4a5 	.word	0x0800e4a5
 800e490:	0800e4ad 	.word	0x0800e4ad
 800e494:	0800e4b5 	.word	0x0800e4b5
 800e498:	0800e4bd 	.word	0x0800e4bd
 800e49c:	0800e4c5 	.word	0x0800e4c5
 800e4a0:	0800e4cd 	.word	0x0800e4cd
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4aa:	e154      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e4ac:	2304      	movs	r3, #4
 800e4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4b2:	e150      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e4b4:	2308      	movs	r3, #8
 800e4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4ba:	e14c      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e4bc:	2310      	movs	r3, #16
 800e4be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4c2:	e148      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e4c4:	2320      	movs	r3, #32
 800e4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4ca:	e144      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e4cc:	2340      	movs	r3, #64	; 0x40
 800e4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4d2:	e140      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e4d4:	2380      	movs	r3, #128	; 0x80
 800e4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4da:	e13c      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4a41      	ldr	r2, [pc, #260]	; (800e5e8 <UART_SetConfig+0x63c>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	f040 8082 	bne.w	800e5ec <UART_SetConfig+0x640>
 800e4e8:	4b3c      	ldr	r3, [pc, #240]	; (800e5dc <UART_SetConfig+0x630>)
 800e4ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e4f0:	2b28      	cmp	r3, #40	; 0x28
 800e4f2:	d86d      	bhi.n	800e5d0 <UART_SetConfig+0x624>
 800e4f4:	a201      	add	r2, pc, #4	; (adr r2, 800e4fc <UART_SetConfig+0x550>)
 800e4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4fa:	bf00      	nop
 800e4fc:	0800e5a1 	.word	0x0800e5a1
 800e500:	0800e5d1 	.word	0x0800e5d1
 800e504:	0800e5d1 	.word	0x0800e5d1
 800e508:	0800e5d1 	.word	0x0800e5d1
 800e50c:	0800e5d1 	.word	0x0800e5d1
 800e510:	0800e5d1 	.word	0x0800e5d1
 800e514:	0800e5d1 	.word	0x0800e5d1
 800e518:	0800e5d1 	.word	0x0800e5d1
 800e51c:	0800e5a9 	.word	0x0800e5a9
 800e520:	0800e5d1 	.word	0x0800e5d1
 800e524:	0800e5d1 	.word	0x0800e5d1
 800e528:	0800e5d1 	.word	0x0800e5d1
 800e52c:	0800e5d1 	.word	0x0800e5d1
 800e530:	0800e5d1 	.word	0x0800e5d1
 800e534:	0800e5d1 	.word	0x0800e5d1
 800e538:	0800e5d1 	.word	0x0800e5d1
 800e53c:	0800e5b1 	.word	0x0800e5b1
 800e540:	0800e5d1 	.word	0x0800e5d1
 800e544:	0800e5d1 	.word	0x0800e5d1
 800e548:	0800e5d1 	.word	0x0800e5d1
 800e54c:	0800e5d1 	.word	0x0800e5d1
 800e550:	0800e5d1 	.word	0x0800e5d1
 800e554:	0800e5d1 	.word	0x0800e5d1
 800e558:	0800e5d1 	.word	0x0800e5d1
 800e55c:	0800e5b9 	.word	0x0800e5b9
 800e560:	0800e5d1 	.word	0x0800e5d1
 800e564:	0800e5d1 	.word	0x0800e5d1
 800e568:	0800e5d1 	.word	0x0800e5d1
 800e56c:	0800e5d1 	.word	0x0800e5d1
 800e570:	0800e5d1 	.word	0x0800e5d1
 800e574:	0800e5d1 	.word	0x0800e5d1
 800e578:	0800e5d1 	.word	0x0800e5d1
 800e57c:	0800e5c1 	.word	0x0800e5c1
 800e580:	0800e5d1 	.word	0x0800e5d1
 800e584:	0800e5d1 	.word	0x0800e5d1
 800e588:	0800e5d1 	.word	0x0800e5d1
 800e58c:	0800e5d1 	.word	0x0800e5d1
 800e590:	0800e5d1 	.word	0x0800e5d1
 800e594:	0800e5d1 	.word	0x0800e5d1
 800e598:	0800e5d1 	.word	0x0800e5d1
 800e59c:	0800e5c9 	.word	0x0800e5c9
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5a6:	e0d6      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e5a8:	2304      	movs	r3, #4
 800e5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5ae:	e0d2      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e5b0:	2308      	movs	r3, #8
 800e5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5b6:	e0ce      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e5b8:	2310      	movs	r3, #16
 800e5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5be:	e0ca      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e5c0:	2320      	movs	r3, #32
 800e5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5c6:	e0c6      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e5c8:	2340      	movs	r3, #64	; 0x40
 800e5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5ce:	e0c2      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e5d0:	2380      	movs	r3, #128	; 0x80
 800e5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5d6:	e0be      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e5d8:	40011400 	.word	0x40011400
 800e5dc:	58024400 	.word	0x58024400
 800e5e0:	40007800 	.word	0x40007800
 800e5e4:	40007c00 	.word	0x40007c00
 800e5e8:	40011800 	.word	0x40011800
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4aad      	ldr	r2, [pc, #692]	; (800e8a8 <UART_SetConfig+0x8fc>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d176      	bne.n	800e6e4 <UART_SetConfig+0x738>
 800e5f6:	4bad      	ldr	r3, [pc, #692]	; (800e8ac <UART_SetConfig+0x900>)
 800e5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e5fe:	2b28      	cmp	r3, #40	; 0x28
 800e600:	d86c      	bhi.n	800e6dc <UART_SetConfig+0x730>
 800e602:	a201      	add	r2, pc, #4	; (adr r2, 800e608 <UART_SetConfig+0x65c>)
 800e604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e608:	0800e6ad 	.word	0x0800e6ad
 800e60c:	0800e6dd 	.word	0x0800e6dd
 800e610:	0800e6dd 	.word	0x0800e6dd
 800e614:	0800e6dd 	.word	0x0800e6dd
 800e618:	0800e6dd 	.word	0x0800e6dd
 800e61c:	0800e6dd 	.word	0x0800e6dd
 800e620:	0800e6dd 	.word	0x0800e6dd
 800e624:	0800e6dd 	.word	0x0800e6dd
 800e628:	0800e6b5 	.word	0x0800e6b5
 800e62c:	0800e6dd 	.word	0x0800e6dd
 800e630:	0800e6dd 	.word	0x0800e6dd
 800e634:	0800e6dd 	.word	0x0800e6dd
 800e638:	0800e6dd 	.word	0x0800e6dd
 800e63c:	0800e6dd 	.word	0x0800e6dd
 800e640:	0800e6dd 	.word	0x0800e6dd
 800e644:	0800e6dd 	.word	0x0800e6dd
 800e648:	0800e6bd 	.word	0x0800e6bd
 800e64c:	0800e6dd 	.word	0x0800e6dd
 800e650:	0800e6dd 	.word	0x0800e6dd
 800e654:	0800e6dd 	.word	0x0800e6dd
 800e658:	0800e6dd 	.word	0x0800e6dd
 800e65c:	0800e6dd 	.word	0x0800e6dd
 800e660:	0800e6dd 	.word	0x0800e6dd
 800e664:	0800e6dd 	.word	0x0800e6dd
 800e668:	0800e6c5 	.word	0x0800e6c5
 800e66c:	0800e6dd 	.word	0x0800e6dd
 800e670:	0800e6dd 	.word	0x0800e6dd
 800e674:	0800e6dd 	.word	0x0800e6dd
 800e678:	0800e6dd 	.word	0x0800e6dd
 800e67c:	0800e6dd 	.word	0x0800e6dd
 800e680:	0800e6dd 	.word	0x0800e6dd
 800e684:	0800e6dd 	.word	0x0800e6dd
 800e688:	0800e6cd 	.word	0x0800e6cd
 800e68c:	0800e6dd 	.word	0x0800e6dd
 800e690:	0800e6dd 	.word	0x0800e6dd
 800e694:	0800e6dd 	.word	0x0800e6dd
 800e698:	0800e6dd 	.word	0x0800e6dd
 800e69c:	0800e6dd 	.word	0x0800e6dd
 800e6a0:	0800e6dd 	.word	0x0800e6dd
 800e6a4:	0800e6dd 	.word	0x0800e6dd
 800e6a8:	0800e6d5 	.word	0x0800e6d5
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6b2:	e050      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e6b4:	2304      	movs	r3, #4
 800e6b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6ba:	e04c      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e6bc:	2308      	movs	r3, #8
 800e6be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6c2:	e048      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e6c4:	2310      	movs	r3, #16
 800e6c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6ca:	e044      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e6cc:	2320      	movs	r3, #32
 800e6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6d2:	e040      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e6d4:	2340      	movs	r3, #64	; 0x40
 800e6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6da:	e03c      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e6dc:	2380      	movs	r3, #128	; 0x80
 800e6de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6e2:	e038      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4a71      	ldr	r2, [pc, #452]	; (800e8b0 <UART_SetConfig+0x904>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d130      	bne.n	800e750 <UART_SetConfig+0x7a4>
 800e6ee:	4b6f      	ldr	r3, [pc, #444]	; (800e8ac <UART_SetConfig+0x900>)
 800e6f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6f2:	f003 0307 	and.w	r3, r3, #7
 800e6f6:	2b05      	cmp	r3, #5
 800e6f8:	d826      	bhi.n	800e748 <UART_SetConfig+0x79c>
 800e6fa:	a201      	add	r2, pc, #4	; (adr r2, 800e700 <UART_SetConfig+0x754>)
 800e6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e700:	0800e719 	.word	0x0800e719
 800e704:	0800e721 	.word	0x0800e721
 800e708:	0800e729 	.word	0x0800e729
 800e70c:	0800e731 	.word	0x0800e731
 800e710:	0800e739 	.word	0x0800e739
 800e714:	0800e741 	.word	0x0800e741
 800e718:	2302      	movs	r3, #2
 800e71a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e71e:	e01a      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e720:	2304      	movs	r3, #4
 800e722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e726:	e016      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e728:	2308      	movs	r3, #8
 800e72a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e72e:	e012      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e730:	2310      	movs	r3, #16
 800e732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e736:	e00e      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e738:	2320      	movs	r3, #32
 800e73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e73e:	e00a      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e740:	2340      	movs	r3, #64	; 0x40
 800e742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e746:	e006      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e748:	2380      	movs	r3, #128	; 0x80
 800e74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e74e:	e002      	b.n	800e756 <UART_SetConfig+0x7aa>
 800e750:	2380      	movs	r3, #128	; 0x80
 800e752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4a55      	ldr	r2, [pc, #340]	; (800e8b0 <UART_SetConfig+0x904>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	f040 80f0 	bne.w	800e942 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e762:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e766:	2b20      	cmp	r3, #32
 800e768:	dc46      	bgt.n	800e7f8 <UART_SetConfig+0x84c>
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	db75      	blt.n	800e85a <UART_SetConfig+0x8ae>
 800e76e:	3b02      	subs	r3, #2
 800e770:	2b1e      	cmp	r3, #30
 800e772:	d872      	bhi.n	800e85a <UART_SetConfig+0x8ae>
 800e774:	a201      	add	r2, pc, #4	; (adr r2, 800e77c <UART_SetConfig+0x7d0>)
 800e776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e77a:	bf00      	nop
 800e77c:	0800e7ff 	.word	0x0800e7ff
 800e780:	0800e85b 	.word	0x0800e85b
 800e784:	0800e807 	.word	0x0800e807
 800e788:	0800e85b 	.word	0x0800e85b
 800e78c:	0800e85b 	.word	0x0800e85b
 800e790:	0800e85b 	.word	0x0800e85b
 800e794:	0800e817 	.word	0x0800e817
 800e798:	0800e85b 	.word	0x0800e85b
 800e79c:	0800e85b 	.word	0x0800e85b
 800e7a0:	0800e85b 	.word	0x0800e85b
 800e7a4:	0800e85b 	.word	0x0800e85b
 800e7a8:	0800e85b 	.word	0x0800e85b
 800e7ac:	0800e85b 	.word	0x0800e85b
 800e7b0:	0800e85b 	.word	0x0800e85b
 800e7b4:	0800e827 	.word	0x0800e827
 800e7b8:	0800e85b 	.word	0x0800e85b
 800e7bc:	0800e85b 	.word	0x0800e85b
 800e7c0:	0800e85b 	.word	0x0800e85b
 800e7c4:	0800e85b 	.word	0x0800e85b
 800e7c8:	0800e85b 	.word	0x0800e85b
 800e7cc:	0800e85b 	.word	0x0800e85b
 800e7d0:	0800e85b 	.word	0x0800e85b
 800e7d4:	0800e85b 	.word	0x0800e85b
 800e7d8:	0800e85b 	.word	0x0800e85b
 800e7dc:	0800e85b 	.word	0x0800e85b
 800e7e0:	0800e85b 	.word	0x0800e85b
 800e7e4:	0800e85b 	.word	0x0800e85b
 800e7e8:	0800e85b 	.word	0x0800e85b
 800e7ec:	0800e85b 	.word	0x0800e85b
 800e7f0:	0800e85b 	.word	0x0800e85b
 800e7f4:	0800e84d 	.word	0x0800e84d
 800e7f8:	2b40      	cmp	r3, #64	; 0x40
 800e7fa:	d02a      	beq.n	800e852 <UART_SetConfig+0x8a6>
 800e7fc:	e02d      	b.n	800e85a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e7fe:	f7fc f81d 	bl	800a83c <HAL_RCCEx_GetD3PCLK1Freq>
 800e802:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e804:	e02f      	b.n	800e866 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e806:	f107 0314 	add.w	r3, r7, #20
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7fc f82c 	bl	800a868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e814:	e027      	b.n	800e866 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e816:	f107 0308 	add.w	r3, r7, #8
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fc f978 	bl	800ab10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e824:	e01f      	b.n	800e866 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e826:	4b21      	ldr	r3, [pc, #132]	; (800e8ac <UART_SetConfig+0x900>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f003 0320 	and.w	r3, r3, #32
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d009      	beq.n	800e846 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e832:	4b1e      	ldr	r3, [pc, #120]	; (800e8ac <UART_SetConfig+0x900>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	08db      	lsrs	r3, r3, #3
 800e838:	f003 0303 	and.w	r3, r3, #3
 800e83c:	4a1d      	ldr	r2, [pc, #116]	; (800e8b4 <UART_SetConfig+0x908>)
 800e83e:	fa22 f303 	lsr.w	r3, r2, r3
 800e842:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e844:	e00f      	b.n	800e866 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800e846:	4b1b      	ldr	r3, [pc, #108]	; (800e8b4 <UART_SetConfig+0x908>)
 800e848:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e84a:	e00c      	b.n	800e866 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e84c:	4b1a      	ldr	r3, [pc, #104]	; (800e8b8 <UART_SetConfig+0x90c>)
 800e84e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e850:	e009      	b.n	800e866 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e856:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e858:	e005      	b.n	800e866 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800e85a:	2300      	movs	r3, #0
 800e85c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e85e:	2301      	movs	r3, #1
 800e860:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e864:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e868:	2b00      	cmp	r3, #0
 800e86a:	f000 81e6 	beq.w	800ec3a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e872:	4a12      	ldr	r2, [pc, #72]	; (800e8bc <UART_SetConfig+0x910>)
 800e874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e878:	461a      	mov	r2, r3
 800e87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e880:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	685a      	ldr	r2, [r3, #4]
 800e886:	4613      	mov	r3, r2
 800e888:	005b      	lsls	r3, r3, #1
 800e88a:	4413      	add	r3, r2
 800e88c:	6a3a      	ldr	r2, [r7, #32]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d305      	bcc.n	800e89e <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e898:	6a3a      	ldr	r2, [r7, #32]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d910      	bls.n	800e8c0 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e8a4:	e1c9      	b.n	800ec3a <UART_SetConfig+0xc8e>
 800e8a6:	bf00      	nop
 800e8a8:	40011c00 	.word	0x40011c00
 800e8ac:	58024400 	.word	0x58024400
 800e8b0:	58000c00 	.word	0x58000c00
 800e8b4:	03d09000 	.word	0x03d09000
 800e8b8:	003d0900 	.word	0x003d0900
 800e8bc:	0800f6dc 	.word	0x0800f6dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f04f 0100 	mov.w	r1, #0
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8cc:	4ac1      	ldr	r2, [pc, #772]	; (800ebd4 <UART_SetConfig+0xc28>)
 800e8ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8d2:	b29a      	uxth	r2, r3
 800e8d4:	f04f 0300 	mov.w	r3, #0
 800e8d8:	f7f1 fd1a 	bl	8000310 <__aeabi_uldivmod>
 800e8dc:	4602      	mov	r2, r0
 800e8de:	460b      	mov	r3, r1
 800e8e0:	4610      	mov	r0, r2
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	f04f 0200 	mov.w	r2, #0
 800e8e8:	f04f 0300 	mov.w	r3, #0
 800e8ec:	020b      	lsls	r3, r1, #8
 800e8ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e8f2:	0202      	lsls	r2, r0, #8
 800e8f4:	6879      	ldr	r1, [r7, #4]
 800e8f6:	6849      	ldr	r1, [r1, #4]
 800e8f8:	0849      	lsrs	r1, r1, #1
 800e8fa:	4608      	mov	r0, r1
 800e8fc:	f04f 0100 	mov.w	r1, #0
 800e900:	1814      	adds	r4, r2, r0
 800e902:	eb43 0501 	adc.w	r5, r3, r1
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	685b      	ldr	r3, [r3, #4]
 800e90a:	461a      	mov	r2, r3
 800e90c:	f04f 0300 	mov.w	r3, #0
 800e910:	4620      	mov	r0, r4
 800e912:	4629      	mov	r1, r5
 800e914:	f7f1 fcfc 	bl	8000310 <__aeabi_uldivmod>
 800e918:	4602      	mov	r2, r0
 800e91a:	460b      	mov	r3, r1
 800e91c:	4613      	mov	r3, r2
 800e91e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e926:	d308      	bcc.n	800e93a <UART_SetConfig+0x98e>
 800e928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e92e:	d204      	bcs.n	800e93a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e936:	60da      	str	r2, [r3, #12]
 800e938:	e17f      	b.n	800ec3a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800e93a:	2301      	movs	r3, #1
 800e93c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e940:	e17b      	b.n	800ec3a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	69db      	ldr	r3, [r3, #28]
 800e946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e94a:	f040 80bd 	bne.w	800eac8 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800e94e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e952:	2b20      	cmp	r3, #32
 800e954:	dc48      	bgt.n	800e9e8 <UART_SetConfig+0xa3c>
 800e956:	2b00      	cmp	r3, #0
 800e958:	db7b      	blt.n	800ea52 <UART_SetConfig+0xaa6>
 800e95a:	2b20      	cmp	r3, #32
 800e95c:	d879      	bhi.n	800ea52 <UART_SetConfig+0xaa6>
 800e95e:	a201      	add	r2, pc, #4	; (adr r2, 800e964 <UART_SetConfig+0x9b8>)
 800e960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e964:	0800e9ef 	.word	0x0800e9ef
 800e968:	0800e9f7 	.word	0x0800e9f7
 800e96c:	0800ea53 	.word	0x0800ea53
 800e970:	0800ea53 	.word	0x0800ea53
 800e974:	0800e9ff 	.word	0x0800e9ff
 800e978:	0800ea53 	.word	0x0800ea53
 800e97c:	0800ea53 	.word	0x0800ea53
 800e980:	0800ea53 	.word	0x0800ea53
 800e984:	0800ea0f 	.word	0x0800ea0f
 800e988:	0800ea53 	.word	0x0800ea53
 800e98c:	0800ea53 	.word	0x0800ea53
 800e990:	0800ea53 	.word	0x0800ea53
 800e994:	0800ea53 	.word	0x0800ea53
 800e998:	0800ea53 	.word	0x0800ea53
 800e99c:	0800ea53 	.word	0x0800ea53
 800e9a0:	0800ea53 	.word	0x0800ea53
 800e9a4:	0800ea1f 	.word	0x0800ea1f
 800e9a8:	0800ea53 	.word	0x0800ea53
 800e9ac:	0800ea53 	.word	0x0800ea53
 800e9b0:	0800ea53 	.word	0x0800ea53
 800e9b4:	0800ea53 	.word	0x0800ea53
 800e9b8:	0800ea53 	.word	0x0800ea53
 800e9bc:	0800ea53 	.word	0x0800ea53
 800e9c0:	0800ea53 	.word	0x0800ea53
 800e9c4:	0800ea53 	.word	0x0800ea53
 800e9c8:	0800ea53 	.word	0x0800ea53
 800e9cc:	0800ea53 	.word	0x0800ea53
 800e9d0:	0800ea53 	.word	0x0800ea53
 800e9d4:	0800ea53 	.word	0x0800ea53
 800e9d8:	0800ea53 	.word	0x0800ea53
 800e9dc:	0800ea53 	.word	0x0800ea53
 800e9e0:	0800ea53 	.word	0x0800ea53
 800e9e4:	0800ea45 	.word	0x0800ea45
 800e9e8:	2b40      	cmp	r3, #64	; 0x40
 800e9ea:	d02e      	beq.n	800ea4a <UART_SetConfig+0xa9e>
 800e9ec:	e031      	b.n	800ea52 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9ee:	f7fa fbdb 	bl	80091a8 <HAL_RCC_GetPCLK1Freq>
 800e9f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e9f4:	e033      	b.n	800ea5e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e9f6:	f7fa fbed 	bl	80091d4 <HAL_RCC_GetPCLK2Freq>
 800e9fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e9fc:	e02f      	b.n	800ea5e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9fe:	f107 0314 	add.w	r3, r7, #20
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fb ff30 	bl	800a868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea0c:	e027      	b.n	800ea5e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea0e:	f107 0308 	add.w	r3, r7, #8
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7fc f87c 	bl	800ab10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea1c:	e01f      	b.n	800ea5e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea1e:	4b6e      	ldr	r3, [pc, #440]	; (800ebd8 <UART_SetConfig+0xc2c>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f003 0320 	and.w	r3, r3, #32
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d009      	beq.n	800ea3e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea2a:	4b6b      	ldr	r3, [pc, #428]	; (800ebd8 <UART_SetConfig+0xc2c>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	08db      	lsrs	r3, r3, #3
 800ea30:	f003 0303 	and.w	r3, r3, #3
 800ea34:	4a69      	ldr	r2, [pc, #420]	; (800ebdc <UART_SetConfig+0xc30>)
 800ea36:	fa22 f303 	lsr.w	r3, r2, r3
 800ea3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea3c:	e00f      	b.n	800ea5e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800ea3e:	4b67      	ldr	r3, [pc, #412]	; (800ebdc <UART_SetConfig+0xc30>)
 800ea40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea42:	e00c      	b.n	800ea5e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea44:	4b66      	ldr	r3, [pc, #408]	; (800ebe0 <UART_SetConfig+0xc34>)
 800ea46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea48:	e009      	b.n	800ea5e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea50:	e005      	b.n	800ea5e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800ea52:	2300      	movs	r3, #0
 800ea54:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ea56:	2301      	movs	r3, #1
 800ea58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ea5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ea5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	f000 80ea 	beq.w	800ec3a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6a:	4a5a      	ldr	r2, [pc, #360]	; (800ebd4 <UART_SetConfig+0xc28>)
 800ea6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea70:	461a      	mov	r2, r3
 800ea72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea78:	005a      	lsls	r2, r3, #1
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	085b      	lsrs	r3, r3, #1
 800ea80:	441a      	add	r2, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea8a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8e:	2b0f      	cmp	r3, #15
 800ea90:	d916      	bls.n	800eac0 <UART_SetConfig+0xb14>
 800ea92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea98:	d212      	bcs.n	800eac0 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9c:	b29b      	uxth	r3, r3
 800ea9e:	f023 030f 	bic.w	r3, r3, #15
 800eaa2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa6:	085b      	lsrs	r3, r3, #1
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	f003 0307 	and.w	r3, r3, #7
 800eaae:	b29a      	uxth	r2, r3
 800eab0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eab2:	4313      	orrs	r3, r2
 800eab4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eabc:	60da      	str	r2, [r3, #12]
 800eabe:	e0bc      	b.n	800ec3a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800eac0:	2301      	movs	r3, #1
 800eac2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800eac6:	e0b8      	b.n	800ec3a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eac8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eacc:	2b20      	cmp	r3, #32
 800eace:	dc4b      	bgt.n	800eb68 <UART_SetConfig+0xbbc>
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f2c0 8087 	blt.w	800ebe4 <UART_SetConfig+0xc38>
 800ead6:	2b20      	cmp	r3, #32
 800ead8:	f200 8084 	bhi.w	800ebe4 <UART_SetConfig+0xc38>
 800eadc:	a201      	add	r2, pc, #4	; (adr r2, 800eae4 <UART_SetConfig+0xb38>)
 800eade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae2:	bf00      	nop
 800eae4:	0800eb6f 	.word	0x0800eb6f
 800eae8:	0800eb77 	.word	0x0800eb77
 800eaec:	0800ebe5 	.word	0x0800ebe5
 800eaf0:	0800ebe5 	.word	0x0800ebe5
 800eaf4:	0800eb7f 	.word	0x0800eb7f
 800eaf8:	0800ebe5 	.word	0x0800ebe5
 800eafc:	0800ebe5 	.word	0x0800ebe5
 800eb00:	0800ebe5 	.word	0x0800ebe5
 800eb04:	0800eb8f 	.word	0x0800eb8f
 800eb08:	0800ebe5 	.word	0x0800ebe5
 800eb0c:	0800ebe5 	.word	0x0800ebe5
 800eb10:	0800ebe5 	.word	0x0800ebe5
 800eb14:	0800ebe5 	.word	0x0800ebe5
 800eb18:	0800ebe5 	.word	0x0800ebe5
 800eb1c:	0800ebe5 	.word	0x0800ebe5
 800eb20:	0800ebe5 	.word	0x0800ebe5
 800eb24:	0800eb9f 	.word	0x0800eb9f
 800eb28:	0800ebe5 	.word	0x0800ebe5
 800eb2c:	0800ebe5 	.word	0x0800ebe5
 800eb30:	0800ebe5 	.word	0x0800ebe5
 800eb34:	0800ebe5 	.word	0x0800ebe5
 800eb38:	0800ebe5 	.word	0x0800ebe5
 800eb3c:	0800ebe5 	.word	0x0800ebe5
 800eb40:	0800ebe5 	.word	0x0800ebe5
 800eb44:	0800ebe5 	.word	0x0800ebe5
 800eb48:	0800ebe5 	.word	0x0800ebe5
 800eb4c:	0800ebe5 	.word	0x0800ebe5
 800eb50:	0800ebe5 	.word	0x0800ebe5
 800eb54:	0800ebe5 	.word	0x0800ebe5
 800eb58:	0800ebe5 	.word	0x0800ebe5
 800eb5c:	0800ebe5 	.word	0x0800ebe5
 800eb60:	0800ebe5 	.word	0x0800ebe5
 800eb64:	0800ebc5 	.word	0x0800ebc5
 800eb68:	2b40      	cmp	r3, #64	; 0x40
 800eb6a:	d02e      	beq.n	800ebca <UART_SetConfig+0xc1e>
 800eb6c:	e03a      	b.n	800ebe4 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb6e:	f7fa fb1b 	bl	80091a8 <HAL_RCC_GetPCLK1Freq>
 800eb72:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800eb74:	e03c      	b.n	800ebf0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb76:	f7fa fb2d 	bl	80091d4 <HAL_RCC_GetPCLK2Freq>
 800eb7a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800eb7c:	e038      	b.n	800ebf0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb7e:	f107 0314 	add.w	r3, r7, #20
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7fb fe70 	bl	800a868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb88:	69bb      	ldr	r3, [r7, #24]
 800eb8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eb8c:	e030      	b.n	800ebf0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb8e:	f107 0308 	add.w	r3, r7, #8
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7fb ffbc 	bl	800ab10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eb9c:	e028      	b.n	800ebf0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb9e:	4b0e      	ldr	r3, [pc, #56]	; (800ebd8 <UART_SetConfig+0xc2c>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f003 0320 	and.w	r3, r3, #32
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d009      	beq.n	800ebbe <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ebaa:	4b0b      	ldr	r3, [pc, #44]	; (800ebd8 <UART_SetConfig+0xc2c>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	08db      	lsrs	r3, r3, #3
 800ebb0:	f003 0303 	and.w	r3, r3, #3
 800ebb4:	4a09      	ldr	r2, [pc, #36]	; (800ebdc <UART_SetConfig+0xc30>)
 800ebb6:	fa22 f303 	lsr.w	r3, r2, r3
 800ebba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ebbc:	e018      	b.n	800ebf0 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800ebbe:	4b07      	ldr	r3, [pc, #28]	; (800ebdc <UART_SetConfig+0xc30>)
 800ebc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ebc2:	e015      	b.n	800ebf0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ebc4:	4b06      	ldr	r3, [pc, #24]	; (800ebe0 <UART_SetConfig+0xc34>)
 800ebc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ebc8:	e012      	b.n	800ebf0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ebd0:	e00e      	b.n	800ebf0 <UART_SetConfig+0xc44>
 800ebd2:	bf00      	nop
 800ebd4:	0800f6dc 	.word	0x0800f6dc
 800ebd8:	58024400 	.word	0x58024400
 800ebdc:	03d09000 	.word	0x03d09000
 800ebe0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ebe8:	2301      	movs	r3, #1
 800ebea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ebee:	bf00      	nop
    }

    if (pclk != 0U)
 800ebf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d021      	beq.n	800ec3a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebfa:	4a1a      	ldr	r2, [pc, #104]	; (800ec64 <UART_SetConfig+0xcb8>)
 800ebfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec00:	461a      	mov	r2, r3
 800ec02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec04:	fbb3 f2f2 	udiv	r2, r3, r2
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	085b      	lsrs	r3, r3, #1
 800ec0e:	441a      	add	r2, r3
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec18:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1c:	2b0f      	cmp	r3, #15
 800ec1e:	d909      	bls.n	800ec34 <UART_SetConfig+0xc88>
 800ec20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec26:	d205      	bcs.n	800ec34 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2a:	b29a      	uxth	r2, r3
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	60da      	str	r2, [r3, #12]
 800ec32:	e002      	b.n	800ec3a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800ec34:	2301      	movs	r3, #1
 800ec36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2201      	movs	r2, #1
 800ec46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2200      	movs	r2, #0
 800ec54:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ec56:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3738      	adds	r7, #56	; 0x38
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bdb0      	pop	{r4, r5, r7, pc}
 800ec62:	bf00      	nop
 800ec64:	0800f6dc 	.word	0x0800f6dc

0800ec68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b083      	sub	sp, #12
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec74:	f003 0301 	and.w	r3, r3, #1
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d00a      	beq.n	800ec92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	430a      	orrs	r2, r1
 800ec90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec96:	f003 0302 	and.w	r3, r3, #2
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00a      	beq.n	800ecb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	430a      	orrs	r2, r1
 800ecb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb8:	f003 0304 	and.w	r3, r3, #4
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d00a      	beq.n	800ecd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	430a      	orrs	r2, r1
 800ecd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecda:	f003 0308 	and.w	r3, r3, #8
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d00a      	beq.n	800ecf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	430a      	orrs	r2, r1
 800ecf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecfc:	f003 0310 	and.w	r3, r3, #16
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d00a      	beq.n	800ed1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	430a      	orrs	r2, r1
 800ed18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed1e:	f003 0320 	and.w	r3, r3, #32
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00a      	beq.n	800ed3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	430a      	orrs	r2, r1
 800ed3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d01a      	beq.n	800ed7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	430a      	orrs	r2, r1
 800ed5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed66:	d10a      	bne.n	800ed7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	430a      	orrs	r2, r1
 800ed7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d00a      	beq.n	800eda0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	430a      	orrs	r2, r1
 800ed9e:	605a      	str	r2, [r3, #4]
  }
}
 800eda0:	bf00      	nop
 800eda2:	370c      	adds	r7, #12
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr

0800edac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b086      	sub	sp, #24
 800edb0:	af02      	add	r7, sp, #8
 800edb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800edbc:	f7f4 fc8a 	bl	80036d4 <HAL_GetTick>
 800edc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f003 0308 	and.w	r3, r3, #8
 800edcc:	2b08      	cmp	r3, #8
 800edce:	d10e      	bne.n	800edee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800edd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800edd4:	9300      	str	r3, [sp, #0]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2200      	movs	r2, #0
 800edda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 f82f 	bl	800ee42 <UART_WaitOnFlagUntilTimeout>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d001      	beq.n	800edee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800edea:	2303      	movs	r3, #3
 800edec:	e025      	b.n	800ee3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f003 0304 	and.w	r3, r3, #4
 800edf8:	2b04      	cmp	r3, #4
 800edfa:	d10e      	bne.n	800ee1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800edfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee00:	9300      	str	r3, [sp, #0]
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2200      	movs	r2, #0
 800ee06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 f819 	bl	800ee42 <UART_WaitOnFlagUntilTimeout>
 800ee10:	4603      	mov	r3, r0
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d001      	beq.n	800ee1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee16:	2303      	movs	r3, #3
 800ee18:	e00f      	b.n	800ee3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2220      	movs	r2, #32
 800ee1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2220      	movs	r2, #32
 800ee26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2200      	movs	r2, #0
 800ee34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee38:	2300      	movs	r3, #0
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b09c      	sub	sp, #112	; 0x70
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	60f8      	str	r0, [r7, #12]
 800ee4a:	60b9      	str	r1, [r7, #8]
 800ee4c:	603b      	str	r3, [r7, #0]
 800ee4e:	4613      	mov	r3, r2
 800ee50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee52:	e0a9      	b.n	800efa8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee5a:	f000 80a5 	beq.w	800efa8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee5e:	f7f4 fc39 	bl	80036d4 <HAL_GetTick>
 800ee62:	4602      	mov	r2, r0
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	1ad3      	subs	r3, r2, r3
 800ee68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d302      	bcc.n	800ee74 <UART_WaitOnFlagUntilTimeout+0x32>
 800ee6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d140      	bne.n	800eef6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee7c:	e853 3f00 	ldrex	r3, [r3]
 800ee80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ee82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ee88:	667b      	str	r3, [r7, #100]	; 0x64
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	461a      	mov	r2, r3
 800ee90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee94:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee9a:	e841 2300 	strex	r3, r2, [r1]
 800ee9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800eea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d1e6      	bne.n	800ee74 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	3308      	adds	r3, #8
 800eeac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeb0:	e853 3f00 	ldrex	r3, [r3]
 800eeb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eeb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb8:	f023 0301 	bic.w	r3, r3, #1
 800eebc:	663b      	str	r3, [r7, #96]	; 0x60
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	3308      	adds	r3, #8
 800eec4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eec6:	64ba      	str	r2, [r7, #72]	; 0x48
 800eec8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eece:	e841 2300 	strex	r3, r2, [r1]
 800eed2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1e5      	bne.n	800eea6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2220      	movs	r2, #32
 800eede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2220      	movs	r2, #32
 800eee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2200      	movs	r2, #0
 800eeee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800eef2:	2303      	movs	r3, #3
 800eef4:	e069      	b.n	800efca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f003 0304 	and.w	r3, r3, #4
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d051      	beq.n	800efa8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	69db      	ldr	r3, [r3, #28]
 800ef0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef12:	d149      	bne.n	800efa8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef26:	e853 3f00 	ldrex	r3, [r3]
 800ef2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ef32:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	461a      	mov	r2, r3
 800ef3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef3c:	637b      	str	r3, [r7, #52]	; 0x34
 800ef3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef44:	e841 2300 	strex	r3, r2, [r1]
 800ef48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ef4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d1e6      	bne.n	800ef1e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	3308      	adds	r3, #8
 800ef56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	e853 3f00 	ldrex	r3, [r3]
 800ef5e:	613b      	str	r3, [r7, #16]
   return(result);
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	f023 0301 	bic.w	r3, r3, #1
 800ef66:	66bb      	str	r3, [r7, #104]	; 0x68
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	3308      	adds	r3, #8
 800ef6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ef70:	623a      	str	r2, [r7, #32]
 800ef72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef74:	69f9      	ldr	r1, [r7, #28]
 800ef76:	6a3a      	ldr	r2, [r7, #32]
 800ef78:	e841 2300 	strex	r3, r2, [r1]
 800ef7c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d1e5      	bne.n	800ef50 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2220      	movs	r2, #32
 800ef88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2220      	movs	r2, #32
 800ef90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2220      	movs	r2, #32
 800ef98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800efa4:	2303      	movs	r3, #3
 800efa6:	e010      	b.n	800efca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	69da      	ldr	r2, [r3, #28]
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	4013      	ands	r3, r2
 800efb2:	68ba      	ldr	r2, [r7, #8]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	bf0c      	ite	eq
 800efb8:	2301      	moveq	r3, #1
 800efba:	2300      	movne	r3, #0
 800efbc:	b2db      	uxtb	r3, r3
 800efbe:	461a      	mov	r2, r3
 800efc0:	79fb      	ldrb	r3, [r7, #7]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	f43f af46 	beq.w	800ee54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800efc8:	2300      	movs	r3, #0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3770      	adds	r7, #112	; 0x70
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
	...

0800efd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b096      	sub	sp, #88	; 0x58
 800efd8:	af00      	add	r7, sp, #0
 800efda:	60f8      	str	r0, [r7, #12]
 800efdc:	60b9      	str	r1, [r7, #8]
 800efde:	4613      	mov	r3, r2
 800efe0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	88fa      	ldrh	r2, [r7, #6]
 800efec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2200      	movs	r2, #0
 800eff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2222      	movs	r2, #34	; 0x22
 800effc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f004:	2b00      	cmp	r3, #0
 800f006:	d02c      	beq.n	800f062 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f00c:	4a42      	ldr	r2, [pc, #264]	; (800f118 <UART_Start_Receive_DMA+0x144>)
 800f00e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f014:	4a41      	ldr	r2, [pc, #260]	; (800f11c <UART_Start_Receive_DMA+0x148>)
 800f016:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f01c:	4a40      	ldr	r2, [pc, #256]	; (800f120 <UART_Start_Receive_DMA+0x14c>)
 800f01e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f024:	2200      	movs	r2, #0
 800f026:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	3324      	adds	r3, #36	; 0x24
 800f032:	4619      	mov	r1, r3
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f038:	461a      	mov	r2, r3
 800f03a:	88fb      	ldrh	r3, [r7, #6]
 800f03c:	f7f7 f8ee 	bl	800621c <HAL_DMA_Start_IT>
 800f040:	4603      	mov	r3, r0
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00d      	beq.n	800f062 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2210      	movs	r2, #16
 800f04a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2200      	movs	r2, #0
 800f052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	2220      	movs	r2, #32
 800f05a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f05e:	2301      	movs	r3, #1
 800f060:	e055      	b.n	800f10e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2200      	movs	r2, #0
 800f066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	691b      	ldr	r3, [r3, #16]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d018      	beq.n	800f0a4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f07a:	e853 3f00 	ldrex	r3, [r3]
 800f07e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f086:	657b      	str	r3, [r7, #84]	; 0x54
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	461a      	mov	r2, r3
 800f08e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f090:	64bb      	str	r3, [r7, #72]	; 0x48
 800f092:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f094:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f098:	e841 2300 	strex	r3, r2, [r1]
 800f09c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f09e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d1e6      	bne.n	800f072 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	3308      	adds	r3, #8
 800f0aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ae:	e853 3f00 	ldrex	r3, [r3]
 800f0b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b6:	f043 0301 	orr.w	r3, r3, #1
 800f0ba:	653b      	str	r3, [r7, #80]	; 0x50
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	3308      	adds	r3, #8
 800f0c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f0c4:	637a      	str	r2, [r7, #52]	; 0x34
 800f0c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0cc:	e841 2300 	strex	r3, r2, [r1]
 800f0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d1e5      	bne.n	800f0a4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	3308      	adds	r3, #8
 800f0de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	e853 3f00 	ldrex	r3, [r3]
 800f0e6:	613b      	str	r3, [r7, #16]
   return(result);
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	3308      	adds	r3, #8
 800f0f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f0f8:	623a      	str	r2, [r7, #32]
 800f0fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0fc:	69f9      	ldr	r1, [r7, #28]
 800f0fe:	6a3a      	ldr	r2, [r7, #32]
 800f100:	e841 2300 	strex	r3, r2, [r1]
 800f104:	61bb      	str	r3, [r7, #24]
   return(result);
 800f106:	69bb      	ldr	r3, [r7, #24]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d1e5      	bne.n	800f0d8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800f10c:	2300      	movs	r3, #0
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3758      	adds	r7, #88	; 0x58
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	0800f275 	.word	0x0800f275
 800f11c:	0800f397 	.word	0x0800f397
 800f120:	0800f3cf 	.word	0x0800f3cf

0800f124 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f124:	b480      	push	{r7}
 800f126:	b08f      	sub	sp, #60	; 0x3c
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f132:	6a3b      	ldr	r3, [r7, #32]
 800f134:	e853 3f00 	ldrex	r3, [r3]
 800f138:	61fb      	str	r3, [r7, #28]
   return(result);
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f140:	637b      	str	r3, [r7, #52]	; 0x34
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	461a      	mov	r2, r3
 800f148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f14a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f14c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f14e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f152:	e841 2300 	strex	r3, r2, [r1]
 800f156:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1e6      	bne.n	800f12c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	3308      	adds	r3, #8
 800f164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	e853 3f00 	ldrex	r3, [r3]
 800f16c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f174:	633b      	str	r3, [r7, #48]	; 0x30
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	3308      	adds	r3, #8
 800f17c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f17e:	61ba      	str	r2, [r7, #24]
 800f180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f182:	6979      	ldr	r1, [r7, #20]
 800f184:	69ba      	ldr	r2, [r7, #24]
 800f186:	e841 2300 	strex	r3, r2, [r1]
 800f18a:	613b      	str	r3, [r7, #16]
   return(result);
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d1e5      	bne.n	800f15e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2220      	movs	r2, #32
 800f196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f19a:	bf00      	nop
 800f19c:	373c      	adds	r7, #60	; 0x3c
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr
	...

0800f1a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b095      	sub	sp, #84	; 0x54
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1b8:	e853 3f00 	ldrex	r3, [r3]
 800f1bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f1c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1ce:	643b      	str	r3, [r7, #64]	; 0x40
 800f1d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f1d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f1d6:	e841 2300 	strex	r3, r2, [r1]
 800f1da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d1e6      	bne.n	800f1b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	3308      	adds	r3, #8
 800f1e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ea:	6a3b      	ldr	r3, [r7, #32]
 800f1ec:	e853 3f00 	ldrex	r3, [r3]
 800f1f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1f2:	69fa      	ldr	r2, [r7, #28]
 800f1f4:	4b1e      	ldr	r3, [pc, #120]	; (800f270 <UART_EndRxTransfer+0xc8>)
 800f1f6:	4013      	ands	r3, r2
 800f1f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	3308      	adds	r3, #8
 800f200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f202:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f204:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f20a:	e841 2300 	strex	r3, r2, [r1]
 800f20e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f212:	2b00      	cmp	r3, #0
 800f214:	d1e5      	bne.n	800f1e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d118      	bne.n	800f250 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	e853 3f00 	ldrex	r3, [r3]
 800f22a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	f023 0310 	bic.w	r3, r3, #16
 800f232:	647b      	str	r3, [r7, #68]	; 0x44
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	461a      	mov	r2, r3
 800f23a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f23c:	61bb      	str	r3, [r7, #24]
 800f23e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f240:	6979      	ldr	r1, [r7, #20]
 800f242:	69ba      	ldr	r2, [r7, #24]
 800f244:	e841 2300 	strex	r3, r2, [r1]
 800f248:	613b      	str	r3, [r7, #16]
   return(result);
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d1e6      	bne.n	800f21e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2220      	movs	r2, #32
 800f254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2200      	movs	r2, #0
 800f25c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f264:	bf00      	nop
 800f266:	3754      	adds	r7, #84	; 0x54
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr
 800f270:	effffffe 	.word	0xeffffffe

0800f274 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b09c      	sub	sp, #112	; 0x70
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f280:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	69db      	ldr	r3, [r3, #28]
 800f286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f28a:	d071      	beq.n	800f370 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f28c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f28e:	2200      	movs	r2, #0
 800f290:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f29a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f29c:	e853 3f00 	ldrex	r3, [r3]
 800f2a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f2a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f2a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f2aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f2b2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f2b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f2b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f2ba:	e841 2300 	strex	r3, r2, [r1]
 800f2be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f2c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d1e6      	bne.n	800f294 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	3308      	adds	r3, #8
 800f2cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d0:	e853 3f00 	ldrex	r3, [r3]
 800f2d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2d8:	f023 0301 	bic.w	r3, r3, #1
 800f2dc:	667b      	str	r3, [r7, #100]	; 0x64
 800f2de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	3308      	adds	r3, #8
 800f2e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f2e6:	647a      	str	r2, [r7, #68]	; 0x44
 800f2e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f2ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2ee:	e841 2300 	strex	r3, r2, [r1]
 800f2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d1e5      	bne.n	800f2c6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	3308      	adds	r3, #8
 800f300:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f304:	e853 3f00 	ldrex	r3, [r3]
 800f308:	623b      	str	r3, [r7, #32]
   return(result);
 800f30a:	6a3b      	ldr	r3, [r7, #32]
 800f30c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f310:	663b      	str	r3, [r7, #96]	; 0x60
 800f312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	3308      	adds	r3, #8
 800f318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f31a:	633a      	str	r2, [r7, #48]	; 0x30
 800f31c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f31e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f322:	e841 2300 	strex	r3, r2, [r1]
 800f326:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d1e5      	bne.n	800f2fa <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f32e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f330:	2220      	movs	r2, #32
 800f332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	d118      	bne.n	800f370 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f33e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	e853 3f00 	ldrex	r3, [r3]
 800f34a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f023 0310 	bic.w	r3, r3, #16
 800f352:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	461a      	mov	r2, r3
 800f35a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f35c:	61fb      	str	r3, [r7, #28]
 800f35e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f360:	69b9      	ldr	r1, [r7, #24]
 800f362:	69fa      	ldr	r2, [r7, #28]
 800f364:	e841 2300 	strex	r3, r2, [r1]
 800f368:	617b      	str	r3, [r7, #20]
   return(result);
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1e6      	bne.n	800f33e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f374:	2b01      	cmp	r3, #1
 800f376:	d107      	bne.n	800f388 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f37a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f37e:	4619      	mov	r1, r3
 800f380:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f382:	f7fe fe07 	bl	800df94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f386:	e002      	b.n	800f38e <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800f388:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f38a:	f7fe fde5 	bl	800df58 <HAL_UART_RxCpltCallback>
}
 800f38e:	bf00      	nop
 800f390:	3770      	adds	r7, #112	; 0x70
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}

0800f396 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f396:	b580      	push	{r7, lr}
 800f398:	b084      	sub	sp, #16
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3a2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	d109      	bne.n	800f3c0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f3b2:	085b      	lsrs	r3, r3, #1
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	68f8      	ldr	r0, [r7, #12]
 800f3ba:	f7fe fdeb 	bl	800df94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f3be:	e002      	b.n	800f3c6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f3c0:	68f8      	ldr	r0, [r7, #12]
 800f3c2:	f7fe fdd3 	bl	800df6c <HAL_UART_RxHalfCpltCallback>
}
 800f3c6:	bf00      	nop
 800f3c8:	3710      	adds	r7, #16
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}

0800f3ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f3ce:	b580      	push	{r7, lr}
 800f3d0:	b086      	sub	sp, #24
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3e2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	689b      	ldr	r3, [r3, #8]
 800f3f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3f6:	2b80      	cmp	r3, #128	; 0x80
 800f3f8:	d109      	bne.n	800f40e <UART_DMAError+0x40>
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	2b21      	cmp	r3, #33	; 0x21
 800f3fe:	d106      	bne.n	800f40e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	2200      	movs	r2, #0
 800f404:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f408:	6978      	ldr	r0, [r7, #20]
 800f40a:	f7ff fe8b 	bl	800f124 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	689b      	ldr	r3, [r3, #8]
 800f414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f418:	2b40      	cmp	r3, #64	; 0x40
 800f41a:	d109      	bne.n	800f430 <UART_DMAError+0x62>
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2b22      	cmp	r3, #34	; 0x22
 800f420:	d106      	bne.n	800f430 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	2200      	movs	r2, #0
 800f426:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f42a:	6978      	ldr	r0, [r7, #20]
 800f42c:	f7ff febc 	bl	800f1a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f436:	f043 0210 	orr.w	r2, r3, #16
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f440:	6978      	ldr	r0, [r7, #20]
 800f442:	f7fe fd9d 	bl	800df80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f446:	bf00      	nop
 800f448:	3718      	adds	r7, #24
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}

0800f44e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f44e:	b480      	push	{r7}
 800f450:	b085      	sub	sp, #20
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d101      	bne.n	800f464 <HAL_UARTEx_DisableFifoMode+0x16>
 800f460:	2302      	movs	r3, #2
 800f462:	e027      	b.n	800f4b4 <HAL_UARTEx_DisableFifoMode+0x66>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2201      	movs	r2, #1
 800f468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2224      	movs	r2, #36	; 0x24
 800f470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f022 0201 	bic.w	r2, r2, #1
 800f48a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f492:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2200      	movs	r2, #0
 800f498:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	68fa      	ldr	r2, [r7, #12]
 800f4a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2220      	movs	r2, #32
 800f4a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f4b2:	2300      	movs	r3, #0
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3714      	adds	r7, #20
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f4d0:	2b01      	cmp	r3, #1
 800f4d2:	d101      	bne.n	800f4d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f4d4:	2302      	movs	r3, #2
 800f4d6:	e02d      	b.n	800f534 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2201      	movs	r2, #1
 800f4dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2224      	movs	r2, #36	; 0x24
 800f4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f022 0201 	bic.w	r2, r2, #1
 800f4fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	689b      	ldr	r3, [r3, #8]
 800f506:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	683a      	ldr	r2, [r7, #0]
 800f510:	430a      	orrs	r2, r1
 800f512:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f000 f84f 	bl	800f5b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	68fa      	ldr	r2, [r7, #12]
 800f520:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2220      	movs	r2, #32
 800f526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2200      	movs	r2, #0
 800f52e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f532:	2300      	movs	r3, #0
}
 800f534:	4618      	mov	r0, r3
 800f536:	3710      	adds	r7, #16
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f54c:	2b01      	cmp	r3, #1
 800f54e:	d101      	bne.n	800f554 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f550:	2302      	movs	r3, #2
 800f552:	e02d      	b.n	800f5b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2201      	movs	r2, #1
 800f558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2224      	movs	r2, #36	; 0x24
 800f560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	681a      	ldr	r2, [r3, #0]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f022 0201 	bic.w	r2, r2, #1
 800f57a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	683a      	ldr	r2, [r7, #0]
 800f58c:	430a      	orrs	r2, r1
 800f58e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f000 f811 	bl	800f5b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	68fa      	ldr	r2, [r7, #12]
 800f59c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2220      	movs	r2, #32
 800f5a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f5ae:	2300      	movs	r3, #0
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3710      	adds	r7, #16
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b085      	sub	sp, #20
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d108      	bne.n	800f5da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f5d8:	e031      	b.n	800f63e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f5da:	2310      	movs	r3, #16
 800f5dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f5de:	2310      	movs	r3, #16
 800f5e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	689b      	ldr	r3, [r3, #8]
 800f5e8:	0e5b      	lsrs	r3, r3, #25
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	f003 0307 	and.w	r3, r3, #7
 800f5f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	689b      	ldr	r3, [r3, #8]
 800f5f8:	0f5b      	lsrs	r3, r3, #29
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	f003 0307 	and.w	r3, r3, #7
 800f600:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f602:	7bbb      	ldrb	r3, [r7, #14]
 800f604:	7b3a      	ldrb	r2, [r7, #12]
 800f606:	4911      	ldr	r1, [pc, #68]	; (800f64c <UARTEx_SetNbDataToProcess+0x94>)
 800f608:	5c8a      	ldrb	r2, [r1, r2]
 800f60a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f60e:	7b3a      	ldrb	r2, [r7, #12]
 800f610:	490f      	ldr	r1, [pc, #60]	; (800f650 <UARTEx_SetNbDataToProcess+0x98>)
 800f612:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f614:	fb93 f3f2 	sdiv	r3, r3, r2
 800f618:	b29a      	uxth	r2, r3
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f620:	7bfb      	ldrb	r3, [r7, #15]
 800f622:	7b7a      	ldrb	r2, [r7, #13]
 800f624:	4909      	ldr	r1, [pc, #36]	; (800f64c <UARTEx_SetNbDataToProcess+0x94>)
 800f626:	5c8a      	ldrb	r2, [r1, r2]
 800f628:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f62c:	7b7a      	ldrb	r2, [r7, #13]
 800f62e:	4908      	ldr	r1, [pc, #32]	; (800f650 <UARTEx_SetNbDataToProcess+0x98>)
 800f630:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f632:	fb93 f3f2 	sdiv	r3, r3, r2
 800f636:	b29a      	uxth	r2, r3
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f63e:	bf00      	nop
 800f640:	3714      	adds	r7, #20
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr
 800f64a:	bf00      	nop
 800f64c:	0800f6f4 	.word	0x0800f6f4
 800f650:	0800f6fc 	.word	0x0800f6fc

0800f654 <__libc_init_array>:
 800f654:	b570      	push	{r4, r5, r6, lr}
 800f656:	4d0d      	ldr	r5, [pc, #52]	; (800f68c <__libc_init_array+0x38>)
 800f658:	4c0d      	ldr	r4, [pc, #52]	; (800f690 <__libc_init_array+0x3c>)
 800f65a:	1b64      	subs	r4, r4, r5
 800f65c:	10a4      	asrs	r4, r4, #2
 800f65e:	2600      	movs	r6, #0
 800f660:	42a6      	cmp	r6, r4
 800f662:	d109      	bne.n	800f678 <__libc_init_array+0x24>
 800f664:	4d0b      	ldr	r5, [pc, #44]	; (800f694 <__libc_init_array+0x40>)
 800f666:	4c0c      	ldr	r4, [pc, #48]	; (800f698 <__libc_init_array+0x44>)
 800f668:	f000 f820 	bl	800f6ac <_init>
 800f66c:	1b64      	subs	r4, r4, r5
 800f66e:	10a4      	asrs	r4, r4, #2
 800f670:	2600      	movs	r6, #0
 800f672:	42a6      	cmp	r6, r4
 800f674:	d105      	bne.n	800f682 <__libc_init_array+0x2e>
 800f676:	bd70      	pop	{r4, r5, r6, pc}
 800f678:	f855 3b04 	ldr.w	r3, [r5], #4
 800f67c:	4798      	blx	r3
 800f67e:	3601      	adds	r6, #1
 800f680:	e7ee      	b.n	800f660 <__libc_init_array+0xc>
 800f682:	f855 3b04 	ldr.w	r3, [r5], #4
 800f686:	4798      	blx	r3
 800f688:	3601      	adds	r6, #1
 800f68a:	e7f2      	b.n	800f672 <__libc_init_array+0x1e>
 800f68c:	0800f70c 	.word	0x0800f70c
 800f690:	0800f70c 	.word	0x0800f70c
 800f694:	0800f70c 	.word	0x0800f70c
 800f698:	0800f710 	.word	0x0800f710

0800f69c <memset>:
 800f69c:	4402      	add	r2, r0
 800f69e:	4603      	mov	r3, r0
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d100      	bne.n	800f6a6 <memset+0xa>
 800f6a4:	4770      	bx	lr
 800f6a6:	f803 1b01 	strb.w	r1, [r3], #1
 800f6aa:	e7f9      	b.n	800f6a0 <memset+0x4>

0800f6ac <_init>:
 800f6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ae:	bf00      	nop
 800f6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6b2:	bc08      	pop	{r3}
 800f6b4:	469e      	mov	lr, r3
 800f6b6:	4770      	bx	lr

0800f6b8 <_fini>:
 800f6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ba:	bf00      	nop
 800f6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6be:	bc08      	pop	{r3}
 800f6c0:	469e      	mov	lr, r3
 800f6c2:	4770      	bx	lr
