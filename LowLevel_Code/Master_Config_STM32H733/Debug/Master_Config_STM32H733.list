
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016cb4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08016f88  08016f88  00026f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017268  08017268  00027268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017270  08017270  00027270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017274  08017274  00027274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  08017278  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 RAM_D2        0000003d  20000094  0801730c  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000013c0  200000d8  08017349  000300d8  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20001498  08017349  00031498  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300d1  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c0e4  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a8a  00000000  00000000  0005c1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001d90  00000000  00000000  00060c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001bb0  00000000  00000000  00062a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039786  00000000  00000000  000645b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002c440  00000000  00000000  0009dd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016cff0  00000000  00000000  000ca176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00237166  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000080d0  00000000  00000000  002371b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200000d8 	.word	0x200000d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08016f6c 	.word	0x08016f6c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000dc 	.word	0x200000dc
 800030c:	08016f6c 	.word	0x08016f6c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <EncPulse2Rad_Read>:
 *      Author: Thansak Pongpaket
 */

#include "AS5047U.h"

double EncPulse2Rad_Read(AS5047U *Enc,uint8_t inv_dir){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	AS5047U_Position_Highspeed_Read(Enc,inv_dir);
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f8ef 	bl	8000808 <AS5047U_Position_Highspeed_Read>
	return (Enc->Position * 0.000383495f) - Enc->Offset;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	89db      	ldrh	r3, [r3, #14]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000636:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000658 <EncPulse2Rad_Read+0x44>
 800063a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800063e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	ed93 7b08 	vldr	d7, [r3, #32]
 8000648:	ee36 7b47 	vsub.f64	d7, d6, d7
//	return (Enc->Position * 0.000383495f);
}
 800064c:	eeb0 0b47 	vmov.f64	d0, d7
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	39c90fd4 	.word	0x39c90fd4
 800065c:	00000000 	.word	0x00000000

08000660 <AS5047U_init>:

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin,double offset) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6178      	str	r0, [r7, #20]
 8000668:	6139      	str	r1, [r7, #16]
 800066a:	60fa      	str	r2, [r7, #12]
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	ed87 0b00 	vstr	d0, [r7]
	dev->hspiHandle = hspiHandle;
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	8c3a      	ldrh	r2, [r7, #32]
 8000688:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(CSGPIOTypedef, CSGPIOPin, 1);
 800068a:	8c3b      	ldrh	r3, [r7, #32]
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f00b fcdf 	bl	800c054 <HAL_GPIO_WritePin>
	dev->Error_Status.CORDIC_Overflow = 0;
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	2200      	movs	r2, #0
 800069a:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	2200      	movs	r2, #0
 80006a0:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	2200      	movs	r2, #0
 80006a6:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	2200      	movs	r2, #0
 80006ac:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	2200      	movs	r2, #0
 80006b2:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	2200      	movs	r2, #0
 80006b8:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	2200      	movs	r2, #0
 80006be:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	2200      	movs	r2, #0
 80006c4:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	2200      	movs	r2, #0
 80006ca:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2200      	movs	r2, #0
 80006d0:	765a      	strb	r2, [r3, #25]

	/* User Variable */
	dev->Offset = offset * 0.000383495f;
 80006d2:	ed97 7b00 	vldr	d7, [r7]
 80006d6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80006f0 <AS5047U_init+0x90>
 80006da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	ed83 7b08 	vstr	d7, [r3, #32]
}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	f3af 8000 	nop.w
 80006f0:	80000000 	.word	0x80000000
 80006f4:	3f3921fa 	.word	0x3f3921fa

080006f8 <AS5047U_Write>:

/*
 * This function for Non-Volatile Registers (OTP) Only
 */

inline void AS5047U_Write(AS5047U *dev,uint16_t Register_Address, uint16_t Data){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
 8000704:	4613      	mov	r3, r2
 8000706:	803b      	strh	r3, [r7, #0]
	uint8_t Buffer[3] = {};
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <AS5047U_Write+0x10c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	723b      	strb	r3, [r7, #8]
 800070e:	f107 0309 	add.w	r3, r7, #9
 8000712:	2200      	movs	r2, #0
 8000714:	801a      	strh	r2, [r3, #0]

	Buffer[0] = ((uint8_t) (Register_Address >> 8)) & 0xBF;
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000722:	b2db      	uxtb	r3, r3
 8000724:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Register_Address & 0xFF);
 8000726:	887b      	ldrh	r3, [r7, #2]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f107 0108 	add.w	r1, r7, #8
 8000734:	2202      	movs	r2, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f008 ff18 	bl	800956c <HAL_CRC_Calculate>
 800073c:	4603      	mov	r3, r0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6898      	ldr	r0, [r3, #8]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	899b      	ldrh	r3, [r3, #12]
 800074e:	2200      	movs	r2, #0
 8000750:	4619      	mov	r1, r3
 8000752:	f00b fc7f 	bl	800c054 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 8000756:	2300      	movs	r3, #0
 8000758:	81fb      	strh	r3, [r7, #14]
 800075a:	e002      	b.n	8000762 <AS5047U_Write+0x6a>
 800075c:	89fb      	ldrh	r3, [r7, #14]
 800075e:	3301      	adds	r3, #1
 8000760:	81fb      	strh	r3, [r7, #14]
 8000762:	89fb      	ldrh	r3, [r7, #14]
 8000764:	f240 2226 	movw	r2, #550	; 0x226
 8000768:	4293      	cmp	r3, r2
 800076a:	d9f7      	bls.n	800075c <AS5047U_Write+0x64>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	f107 0108 	add.w	r1, r7, #8
 8000774:	2301      	movs	r3, #1
 8000776:	2203      	movs	r2, #3
 8000778:	f010 f980 	bl	8010a7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6898      	ldr	r0, [r3, #8]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	899b      	ldrh	r3, [r3, #12]
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	f00b fc64 	bl	800c054 <HAL_GPIO_WritePin>

	Buffer[0] = (uint8_t) (Data >> 8);
 800078c:	883b      	ldrh	r3, [r7, #0]
 800078e:	0a1b      	lsrs	r3, r3, #8
 8000790:	b29b      	uxth	r3, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Data & 0xFF);
 8000796:	883b      	ldrh	r3, [r7, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f107 0108 	add.w	r1, r7, #8
 80007a4:	2202      	movs	r2, #2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f008 fee0 	bl	800956c <HAL_CRC_Calculate>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6898      	ldr	r0, [r3, #8]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	899b      	ldrh	r3, [r3, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	f00b fc47 	bl	800c054 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 80007c6:	2300      	movs	r3, #0
 80007c8:	81bb      	strh	r3, [r7, #12]
 80007ca:	e002      	b.n	80007d2 <AS5047U_Write+0xda>
 80007cc:	89bb      	ldrh	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	81bb      	strh	r3, [r7, #12]
 80007d2:	89bb      	ldrh	r3, [r7, #12]
 80007d4:	f240 2226 	movw	r2, #550	; 0x226
 80007d8:	4293      	cmp	r3, r2
 80007da:	d9f7      	bls.n	80007cc <AS5047U_Write+0xd4>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	f107 0108 	add.w	r1, r7, #8
 80007e4:	2301      	movs	r3, #1
 80007e6:	2203      	movs	r2, #3
 80007e8:	f010 f948 	bl	8010a7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6898      	ldr	r0, [r3, #8]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	899b      	ldrh	r3, [r3, #12]
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f00b fc2c 	bl	800c054 <HAL_GPIO_WritePin>
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	08016f88 	.word	0x08016f88

08000808 <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev,uint8_t dir){
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[2] = { 0x3F,0xFF };
 8000814:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000818:	823b      	strh	r3, [r7, #16]
	uint8_t Buffer[2] = {};
 800081a:	2300      	movs	r3, #0
 800081c:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i=0; i <= 400; i++);
 800081e:	2300      	movs	r3, #0
 8000820:	82fb      	strh	r3, [r7, #22]
 8000822:	e002      	b.n	800082a <AS5047U_Position_Highspeed_Read+0x22>
 8000824:	8afb      	ldrh	r3, [r7, #22]
 8000826:	3301      	adds	r3, #1
 8000828:	82fb      	strh	r3, [r7, #22]
 800082a:	8afb      	ldrh	r3, [r7, #22]
 800082c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000830:	d9f8      	bls.n	8000824 <AS5047U_Position_Highspeed_Read+0x1c>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6898      	ldr	r0, [r3, #8]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	899b      	ldrh	r3, [r3, #12]
 800083a:	2200      	movs	r2, #0
 800083c:	4619      	mov	r1, r3
 800083e:	f00b fc09 	bl	800c054 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 100);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	f107 0110 	add.w	r1, r7, #16
 800084a:	2364      	movs	r3, #100	; 0x64
 800084c:	2202      	movs	r2, #2
 800084e:	f010 f915 	bl	8010a7c <HAL_SPI_Transmit>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6898      	ldr	r0, [r3, #8]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	899b      	ldrh	r3, [r3, #12]
 800085a:	2201      	movs	r2, #1
 800085c:	4619      	mov	r1, r3
 800085e:	f00b fbf9 	bl	800c054 <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550; i++);			//delay before sent data (#Base clock 550MHz)
 8000862:	2300      	movs	r3, #0
 8000864:	82bb      	strh	r3, [r7, #20]
 8000866:	e002      	b.n	800086e <AS5047U_Position_Highspeed_Read+0x66>
 8000868:	8abb      	ldrh	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	82bb      	strh	r3, [r7, #20]
 800086e:	8abb      	ldrh	r3, [r7, #20]
 8000870:	f240 2226 	movw	r2, #550	; 0x226
 8000874:	4293      	cmp	r3, r2
 8000876:	d9f7      	bls.n	8000868 <AS5047U_Position_Highspeed_Read+0x60>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6898      	ldr	r0, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	899b      	ldrh	r3, [r3, #12]
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	f00b fbe6 	bl	800c054 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 100);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	f107 010c 	add.w	r1, r7, #12
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	2202      	movs	r2, #2
 8000894:	f010 fae4 	bl	8010e60 <HAL_SPI_Receive>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6898      	ldr	r0, [r3, #8]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	899b      	ldrh	r3, [r3, #12]
 80008a0:	2201      	movs	r2, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	f00b fbd6 	bl	800c054 <HAL_GPIO_WritePin>
	if (dir == 1){
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d111      	bne.n	80008d2 <AS5047U_Position_Highspeed_Read+0xca>
		dev->Position = (uint16_t)((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]) ^ 0x3FFF;
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	7b7b      	ldrb	r3, [r7, #13]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008c8:	4053      	eors	r3, r2
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	81da      	strh	r2, [r3, #14]
 80008d0:	e00c      	b.n	80008ec <AS5047U_Position_Highspeed_Read+0xe4>
	}
	else{
		dev->Position = ((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]);
 80008d2:	7b3b      	ldrb	r3, [r7, #12]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008dc:	b21a      	sxth	r2, r3
 80008de:	7b7b      	ldrb	r3, [r7, #13]
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	81da      	strh	r2, [r3, #14]
	}
	return dev->Position;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	89db      	ldrh	r3, [r3, #14]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <Tmp75_Init>:
#include "Tmp75.h"

//I2C_HandleTypeDef hi2c2;

void Tmp75_Init(I2C_HandleTypeDef *hi2c) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	/*configuration register = 0x01
	 [res][res][OS][FQ][POL][TM][SD][RES][RES][RES][RES][RES][RES][RES][RES][RES]
	   0    0   1   0    0    0   0   0    0    0    0    0    0    0    0    0   =  0x2000
	 */
	Write_Register(0x01, 0x2000,hi2c);
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000906:	2001      	movs	r0, #1
 8000908:	f000 f804 	bl	8000914 <Write_Register>

}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <Write_Register>:

void Write_Register(uint8_t register_pointer, uint16_t register_value, I2C_HandleTypeDef *hi2c) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af02      	add	r7, sp, #8
 800091a:	4603      	mov	r3, r0
 800091c:	603a      	str	r2, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
 8000920:	460b      	mov	r3, r1
 8000922:	80bb      	strh	r3, [r7, #4]
	uint8_t data[3];
	data[0] = register_pointer;     // TMP75_ADDR
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	733b      	strb	r3, [r7, #12]
	data[1] = register_value >> 8;    // MSB byte of 16bit data
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	0a1b      	lsrs	r3, r3, #8
 800092c:	b29b      	uxth	r3, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	737b      	strb	r3, [r7, #13]
	data[2] = register_value;       // LSB byte of 16bit data
 8000932:	88bb      	ldrh	r3, [r7, #4]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(hi2c, TMP75_ADDR, data, 3, 100);
 8000938:	f107 020c 	add.w	r2, r7, #12
 800093c:	2364      	movs	r3, #100	; 0x64
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2303      	movs	r3, #3
 8000942:	2192      	movs	r1, #146	; 0x92
 8000944:	6838      	ldr	r0, [r7, #0]
 8000946:	f00b fc49 	bl	800c1dc <HAL_I2C_Master_Transmit>

}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <Read_Register>:

void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer, I2C_HandleTypeDef *hi2c) {
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af02      	add	r7, sp, #8
 8000958:	4603      	mov	r3, r0
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	73fb      	strb	r3, [r7, #15]
	// first set the register pointer to the register wanted to be read
	HAL_I2C_Master_Transmit(hi2c, TMP75_ADDR, &register_pointer, 1, 100);
 8000960:	f107 020f 	add.w	r2, r7, #15
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	2192      	movs	r1, #146	; 0x92
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f00b fc35 	bl	800c1dc <HAL_I2C_Master_Transmit>

	// receive the 2 x 8bit data into the receive buffer
	HAL_I2C_Master_Receive(hi2c, TMP75_ADDR, receive_buffer, 2, 100);
 8000972:	2364      	movs	r3, #100	; 0x64
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	2302      	movs	r3, #2
 8000978:	68ba      	ldr	r2, [r7, #8]
 800097a:	2192      	movs	r1, #146	; 0x92
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f00b fd21 	bl	800c3c4 <HAL_I2C_Master_Receive>
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <One_ShotTemp>:

void One_ShotTemp(I2C_HandleTypeDef *hi2c) {
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
	//One-Shot register = 0x04 and write any value to start aconversion
	Write_Register(0x04, 0x0000,hi2c);
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	2100      	movs	r1, #0
 8000996:	2004      	movs	r0, #4
 8000998:	f7ff ffbc 	bl	8000914 <Write_Register>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	0000      	movs	r0, r0
	...

080009a8 <Read_TempCelsius>:

void Read_TempCelsius(double *receive_buffer,I2C_HandleTypeDef *hi2c) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
	uint8_t buffer[2];
	uint16_t TempSum;
	Read_Register(0x00, buffer,hi2c);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff ffc9 	bl	8000952 <Read_Register>
	TempSum = (((buffer[0] << 8) | buffer[1]) >> 4);
 80009c0:	7b3b      	ldrb	r3, [r7, #12]
 80009c2:	021b      	lsls	r3, r3, #8
 80009c4:	7b7a      	ldrb	r2, [r7, #13]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	111b      	asrs	r3, r3, #4
 80009ca:	81fb      	strh	r3, [r7, #14]
	*receive_buffer = (TempSum * FTMP75_TEMP_AD_STEP);
 80009cc:	89fb      	ldrh	r3, [r7, #14]
 80009ce:	ee07 3a90 	vmov	s15, r3
 80009d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009d6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80009f0 <Read_TempCelsius+0x48>
 80009da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	ed83 7b00 	vstr	d7, [r3]
}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	f3af 8000 	nop.w
 80009f0:	00000000 	.word	0x00000000
 80009f4:	3fb00000 	.word	0x3fb00000

080009f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2224      	movs	r2, #36	; 0x24
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f015 fa7d 	bl	8015f10 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a18:	4a33      	ldr	r2, [pc, #204]	; (8000ae8 <MX_ADC1_Init+0xf0>)
 8000a1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000a1c:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a1e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a24:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a32:	2204      	movs	r2, #4
 8000a34:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a76:	481b      	ldr	r0, [pc, #108]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a78:	f006 fd8c 	bl	8007594 <HAL_ADC_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a82:	f004 fc05 	bl	8005290 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 8000a86:	2305      	movs	r3, #5
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_DISABLED;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a9a:	f008 fb11 	bl	80090c0 <HAL_ADCEx_MultiModeConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000aa4:	f004 fbf4 	bl	8005290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_ADC1_Init+0xf4>)
 8000aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aac:	2306      	movs	r3, #6
 8000aae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ab8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aba:	2304      	movs	r3, #4
 8000abc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000ace:	f007 fb05 	bl	80080dc <HAL_ADC_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000ad8:	f004 fbda 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3730      	adds	r7, #48	; 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000f4 	.word	0x200000f4
 8000ae8:	40022000 	.word	0x40022000
 8000aec:	21800100 	.word	0x21800100

08000af0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2224      	movs	r2, #36	; 0x24
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f015 fa07 	bl	8015f10 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b04:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <MX_ADC2_Init+0xb8>)
 8000b06:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b0a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000b0e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b1e:	2204      	movs	r2, #4
 8000b20:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b56:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b58:	f006 fd1c 	bl	8007594 <HAL_ADC_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8000b62:	f004 fb95 	bl	8005290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_ADC2_Init+0xbc>)
 8000b68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b6a:	2306      	movs	r3, #6
 8000b6c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b72:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b76:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b8c:	f007 faa6 	bl	80080dc <HAL_ADC_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000b96:	f004 fb7b 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000164 	.word	0x20000164
 8000ba8:	40022100 	.word	0x40022100
 8000bac:	21800100 	.word	0x21800100

08000bb0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2224      	movs	r2, #36	; 0x24
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f015 f9a7 	bl	8015f10 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000bc2:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bc4:	4a32      	ldr	r2, [pc, #200]	; (8000c90 <MX_ADC3_Init+0xe0>)
 8000bc6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bc8:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bda:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be0:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000be2:	2204      	movs	r2, #4
 8000be4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000be6:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c34:	4815      	ldr	r0, [pc, #84]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c36:	f006 fcad 	bl	8007594 <HAL_ADC_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000c40:	f004 fb26 	bl	8005290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_ADC3_Init+0xe4>)
 8000c46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c48:	2306      	movs	r3, #6
 8000c4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c50:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c54:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c56:	2304      	movs	r3, #4
 8000c58:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c74:	f007 fa32 	bl	80080dc <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000c7e:	f004 fb07 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200001d4 	.word	0x200001d4
 8000c90:	58026000 	.word	0x58026000
 8000c94:	c7520000 	.word	0xc7520000

08000c98 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a47      	ldr	r2, [pc, #284]	; (8000dd4 <HAL_ADC_MspInit+0x13c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d133      	bne.n	8000d22 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cba:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	4a45      	ldr	r2, [pc, #276]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000cc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cc4:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d10e      	bne.n	8000cea <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ccc:	4b43      	ldr	r3, [pc, #268]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd2:	4a42      	ldr	r2, [pc, #264]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cdc:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce2:	f003 0320 	and.w	r3, r3, #32
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	4b3c      	ldr	r3, [pc, #240]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf0:	4a3a      	ldr	r2, [pc, #232]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfa:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d08:	2320      	movs	r3, #32
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4831      	ldr	r0, [pc, #196]	; (8000de0 <HAL_ADC_MspInit+0x148>)
 8000d1c:	f00a fff2 	bl	800bd04 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000d20:	e054      	b.n	8000dcc <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a2f      	ldr	r2, [pc, #188]	; (8000de4 <HAL_ADC_MspInit+0x14c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d133      	bne.n	8000d94 <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a29      	ldr	r2, [pc, #164]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000d34:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d10e      	bne.n	8000d5c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d44:	4a25      	ldr	r2, [pc, #148]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	4a1e      	ldr	r2, [pc, #120]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d7a:	2320      	movs	r3, #32
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4814      	ldr	r0, [pc, #80]	; (8000de0 <HAL_ADC_MspInit+0x148>)
 8000d8e:	f00a ffb9 	bl	800bd04 <HAL_GPIO_Init>
}
 8000d92:	e01b      	b.n	8000dcc <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC3)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <HAL_ADC_MspInit+0x150>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d116      	bne.n	8000dcc <HAL_ADC_MspInit+0x134>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	207f      	movs	r0, #127	; 0x7f
 8000dc2:	f008 fb3a 	bl	800943a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000dc6:	207f      	movs	r0, #127	; 0x7f
 8000dc8:	f008 fb51 	bl	800946e <HAL_NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40022000 	.word	0x40022000
 8000dd8:	20000244 	.word	0x20000244
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	58020800 	.word	0x58020800
 8000de4:	40022100 	.word	0x40022100
 8000de8:	58026000 	.word	0x58026000

08000dec <Step_Driver_init>:
 * __HAL_TIM_SET_COMPARE();		CCR
 * __HAL_TIM_SET_AUTORELOAD();	ARR
 */
void Step_Driver_init(SteperParameter *step, TIM_HandleTypeDef *htim,
		uint32_t Channel, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t f_timer,uint8_t DIR_init) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
	step->htim = htim;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	601a      	str	r2, [r3, #0]
	step->Channel = Channel;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	605a      	str	r2, [r3, #4]
	step->GPIOx = GPIOx;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	609a      	str	r2, [r3, #8]
	step->GPIO_Pin = GPIO_Pin;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	8b3a      	ldrh	r2, [r7, #24]
 8000e10:	819a      	strh	r2, [r3, #12]
	step->f_timer = f_timer;
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	81da      	strh	r2, [r3, #14]
	step->DIR_init = DIR_init;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e20:	741a      	strb	r2, [r3, #16]
	HAL_TIM_PWM_Start(step->htim, step->Channel);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	f010 fdf9 	bl	8011a24 <HAL_TIM_PWM_Start>
	step->htim->Instance->ARR = 500;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
	step->htim->Instance->CCR1 = 0;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2200      	movs	r2, #0
 8000e46:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <Step_Driver>:


void Step_Driver(SteperParameter *step, double f_driver) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	ed87 0b00 	vstr	d0, [r7]
	double abs_f_driver = fabs(f_driver);
 8000e5c:	ed97 7b00 	vldr	d7, [r7]
 8000e60:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e64:	ed87 7b06 	vstr	d7, [r7, #24]
	uint16_t reg_out;
	if (abs_f_driver <= 7) {
 8000e68:	ed97 7b06 	vldr	d7, [r7, #24]
 8000e6c:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 8000e70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e78:	d80e      	bhi.n	8000e98 <Step_Driver+0x48>
		reg_out = 50000;
 8000e7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000e7e:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = 50000;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = 0;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2200      	movs	r2, #0
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
 8000e96:	e033      	b.n	8000f00 <Step_Driver+0xb0>
	} else if (abs_f_driver < 10) {
 8000e98:	ed97 7b06 	vldr	d7, [r7, #24]
 8000e9c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000ea0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea8:	d50f      	bpl.n	8000eca <Step_Driver+0x7a>
		reg_out = 50000;
 8000eaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000eae:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = reg_out;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	8afa      	ldrh	r2, [r7, #22]
 8000eb8:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000eba:	8afb      	ldrh	r3, [r7, #22]
 8000ebc:	085b      	lsrs	r3, r3, #1
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ec8:	e01a      	b.n	8000f00 <Step_Driver+0xb0>
	} else {
		reg_out = (uint16_t) (step->f_timer / abs_f_driver);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	89db      	ldrh	r3, [r3, #14]
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000ed6:	ed97 6b06 	vldr	d6, [r7, #24]
 8000eda:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000ede:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ee2:	ee17 3a90 	vmov	r3, s15
 8000ee6:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = reg_out;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	8afa      	ldrh	r2, [r7, #22]
 8000ef0:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000ef2:	8afb      	ldrh	r3, [r7, #22]
 8000ef4:	085b      	lsrs	r3, r3, #1
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (f_driver >= 0) {
 8000f00:	ed97 7b00 	vldr	d7, [r7]
 8000f04:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0c:	db09      	blt.n	8000f22 <Step_Driver+0xd2>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6898      	ldr	r0, [r3, #8]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	8999      	ldrh	r1, [r3, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	7c1b      	ldrb	r3, [r3, #16]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f00b f89a 	bl	800c054 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
	}
}
 8000f20:	e00b      	b.n	8000f3a <Step_Driver+0xea>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6898      	ldr	r0, [r3, #8]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	8999      	ldrh	r1, [r3, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	7c1b      	ldrb	r3, [r3, #16]
 8000f2e:	f083 0301 	eor.w	r3, r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	f00b f88d 	bl	800c054 <HAL_GPIO_WritePin>
}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <Servo_init>:

/*
 * Servo Drive init
 */
void Servo_init(ServoParameter *Servo,TIM_HandleTypeDef *htim,
		uint32_t Channel){
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
	Servo->htim = htim;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	601a      	str	r2, [r3, #0]
	Servo->Channel = Channel;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_Start(Servo->htim, Servo->Channel);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4610      	mov	r0, r2
 8000f66:	f010 fd5d 	bl	8011a24 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d106      	bne.n	8000f80 <Servo_init+0x3e>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f240 52db 	movw	r2, #1499	; 0x5db
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f7e:	e031      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d106      	bne.n	8000f96 <Servo_init+0x54>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	f240 53db 	movw	r3, #1499	; 0x5db
 8000f92:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f94:	e026      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b08      	cmp	r3, #8
 8000f9c:	d106      	bne.n	8000fac <Servo_init+0x6a>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	f240 53db 	movw	r3, #1499	; 0x5db
 8000fa8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000faa:	e01b      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b0c      	cmp	r3, #12
 8000fb2:	d106      	bne.n	8000fc2 <Servo_init+0x80>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	f240 53db 	movw	r3, #1499	; 0x5db
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fc0:	e010      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b10      	cmp	r3, #16
 8000fc8:	d106      	bne.n	8000fd8 <Servo_init+0x96>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	f240 53db 	movw	r3, #1499	; 0x5db
 8000fd4:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000fd6:	e005      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f240 53db 	movw	r3, #1499	; 0x5db
 8000fe2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <Servo_Drive>:

/*
 * Servo Drive Function
 * Deg Range (0 -> 180)
 */
void Servo_Drive(ServoParameter *Servo,uint8_t Deg){
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
	uint16_t Pulse_in  =  (uint16_t)((Deg * 8.3333333f) +499);
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001002:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001098 <Servo_Drive+0xac>
 8001006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800100a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800109c <Servo_Drive+0xb0>
 800100e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001016:	ee17 3a90 	vmov	r3, s15
 800101a:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <Servo_Drive+0x44>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	89fa      	ldrh	r2, [r7, #14]
 800102c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800102e:	e02c      	b.n	800108a <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d105      	bne.n	8001044 <Servo_Drive+0x58>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001042:	e022      	b.n	800108a <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b08      	cmp	r3, #8
 800104a:	d105      	bne.n	8001058 <Servo_Drive+0x6c>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	89fb      	ldrh	r3, [r7, #14]
 8001054:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001056:	e018      	b.n	800108a <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b0c      	cmp	r3, #12
 800105e:	d105      	bne.n	800106c <Servo_Drive+0x80>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	89fb      	ldrh	r3, [r7, #14]
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
}
 800106a:	e00e      	b.n	800108a <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b10      	cmp	r3, #16
 8001072:	d105      	bne.n	8001080 <Servo_Drive+0x94>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	6593      	str	r3, [r2, #88]	; 0x58
}
 800107e:	e004      	b.n	800108a <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	89fb      	ldrh	r3, [r7, #14]
 8001088:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	41055555 	.word	0x41055555
 800109c:	43f98000 	.word	0x43f98000

080010a0 <Traj_Coeff_Cal>:

void Traj_Coeff_Cal(TrajParameter *Traj, double T, double Pos_Final,
  double Pos_Now, double Vel_Final, double Vel_Now) {
 80010a0:	b480      	push	{r7}
 80010a2:	b09b      	sub	sp, #108	; 0x6c
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80010a8:	ed87 0b08 	vstr	d0, [r7, #32]
 80010ac:	ed87 1b06 	vstr	d1, [r7, #24]
 80010b0:	ed87 2b04 	vstr	d2, [r7, #16]
 80010b4:	ed87 3b02 	vstr	d3, [r7, #8]
 80010b8:	ed87 4b00 	vstr	d4, [r7]
 Traj->T = T;
 80010bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010c2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 double T_P2 = T * T;
 80010c6:	ed97 7b08 	vldr	d7, [r7, #32]
 80010ca:	ee27 7b07 	vmul.f64	d7, d7, d7
 80010ce:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
 double T_P3 = T_P2 * T;
 80010d2:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80010d6:	ed97 7b08 	vldr	d7, [r7, #32]
 80010da:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010de:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 double T_P4 = T_P3 * T;
 80010e2:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 80010e6:	ed97 7b08 	vldr	d7, [r7, #32]
 80010ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010ee:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 double T_P5 = T_P4 * T;
 80010f2:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80010f6:	ed97 7b08 	vldr	d7, [r7, #32]
 80010fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010fe:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
 double ds = Pos_Now - Pos_Final;
 8001102:	ed97 6b04 	vldr	d6, [r7, #16]
 8001106:	ed97 7b06 	vldr	d7, [r7, #24]
 800110a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800110e:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 double tfv0 = T * Vel_Now;
 8001112:	ed97 6b08 	vldr	d6, [r7, #32]
 8001116:	ed97 7b00 	vldr	d7, [r7]
 800111a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800111e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 double tfv1 = T * Vel_Final;
 8001122:	ed97 6b08 	vldr	d6, [r7, #32]
 8001126:	ed97 7b02 	vldr	d7, [r7, #8]
 800112a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800112e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
 Traj->TrajCoef[0] = Pos_Now;
 8001132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001134:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001138:	e9c1 2300 	strd	r2, r3, [r1]
 Traj->TrajCoef[1] = Vel_Now;
 800113c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800113e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001142:	e9c1 2302 	strd	r2, r3, [r1, #8]
 Traj->TrajCoef[3] = -(2 * (5 * ds + 3 * tfv0 + 2*tfv1)) / T_P3;
 8001146:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800114a:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 800114e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001152:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001156:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800115a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800115e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001162:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001166:	ee37 7b07 	vadd.f64	d7, d7, d7
 800116a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800116e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001172:	eeb1 5b47 	vneg.f64	d5, d7
 8001176:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800117a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001180:	ed83 7b06 	vstr	d7, [r3, #24]
 Traj->TrajCoef[4] = (15 * ds + 8 * tfv0 + 7*tfv1) / T_P4;
 8001184:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001188:	eeb2 6b0e 	vmov.f64	d6, #46	; 0x41700000  15.0
 800118c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001190:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001194:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8001198:	ee27 7b05 	vmul.f64	d7, d7, d5
 800119c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011a0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80011a4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80011a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011ac:	ee36 5b07 	vadd.f64	d5, d6, d7
 80011b0:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80011b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ba:	ed83 7b08 	vstr	d7, [r3, #32]
 Traj->TrajCoef[5] = -(3 * (2 * ds + tfv0 + tfv1)) / T_P5;
 80011be:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80011c2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80011c6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80011ca:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011ce:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80011d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011d6:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80011da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011de:	eeb1 5b47 	vneg.f64	d5, d7
 80011e2:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80011e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ec:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 80011f0:	bf00      	nop
 80011f2:	376c      	adds	r7, #108	; 0x6c
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <TrajFollow>:

void TrajFollow(TrajParameter *Traj, double traj_t[5], double *Position,
		double *Velocity) {
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	ed93 6b00 	vldr	d6, [r3]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	ed93 5b02 	vldr	d5, [r3, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	ed93 7b00 	vldr	d7, [r3]
 800121c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001220:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (Traj->TrajCoef[3] * traj_t[2]) + (Traj->TrajCoef[4] * traj_t[3])
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	ed93 5b06 	vldr	d5, [r3, #24]
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	3310      	adds	r3, #16
 800122e:	ed93 7b00 	vldr	d7, [r3]
 8001232:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001236:	ee36 6b07 	vadd.f64	d6, d6, d7
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	ed93 5b08 	vldr	d5, [r3, #32]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3318      	adds	r3, #24
 8001244:	ed93 7b00 	vldr	d7, [r3]
 8001248:	ee25 7b07 	vmul.f64	d7, d5, d7
 800124c:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (Traj->TrajCoef[5] * traj_t[4]);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	3320      	adds	r3, #32
 800125a:	ed93 7b00 	vldr	d7, [r3]
 800125e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001262:	ee36 7b07 	vadd.f64	d7, d6, d7
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	ed83 7b00 	vstr	d7, [r3]
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	ed93 6b02 	vldr	d6, [r3, #8]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	ed93 7b06 	vldr	d7, [r3, #24]
 8001278:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800127c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	3308      	adds	r3, #8
 8001284:	ed93 7b00 	vldr	d7, [r3]
 8001288:	ee25 7b07 	vmul.f64	d7, d5, d7
 800128c:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((4.0 * Traj->TrajCoef[4]) * traj_t[2])
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	ed93 7b08 	vldr	d7, [r3, #32]
 8001296:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800129a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	3310      	adds	r3, #16
 80012a2:	ed93 7b00 	vldr	d7, [r3]
 80012a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012aa:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((5.0 * Traj->TrajCoef[5]) * traj_t[3]);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80012b4:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 80012b8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3318      	adds	r3, #24
 80012c0:	ed93 7b00 	vldr	d7, [r3]
 80012c4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012c8:	ee36 7b07 	vadd.f64	d7, d6, d7
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	ed83 7b00 	vstr	d7, [r3]
}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <Kalman_init>:
 * KalmanFilter
 *
 * Q -> Process
 * R -> Sensor
 */
void Kalman_init(KalmanParameter *kalman, double Q, double R) {
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6178      	str	r0, [r7, #20]
 80012e8:	ed87 0b02 	vstr	d0, [r7, #8]
 80012ec:	ed87 1b00 	vstr	d1, [r7]
	kalman->Q = Q; 			// Adjustable
 80012f0:	6979      	ldr	r1, [r7, #20]
 80012f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012f6:	e9c1 2300 	strd	r2, r3, [r1]
	kalman->R = R; 			// Adjustable
 80012fa:	6979      	ldr	r1, [r7, #20]
 80012fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001300:	e9c1 2302 	strd	r2, r3, [r1, #8]
	kalman->x1 = 0.0;
 8001304:	6979      	ldr	r1, [r7, #20]
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kalman->x2 = 0.0;
 8001312:	6979      	ldr	r1, [r7, #20]
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->p11 = 0.05;
 8001320:	6979      	ldr	r1, [r7, #20]
 8001322:	a30f      	add	r3, pc, #60	; (adr r3, 8001360 <Kalman_init+0x80>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->p12 = 0.05;
 800132c:	6979      	ldr	r1, [r7, #20]
 800132e:	a30c      	add	r3, pc, #48	; (adr r3, 8001360 <Kalman_init+0x80>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	kalman->p21 = 0.05;
 8001338:	6979      	ldr	r1, [r7, #20]
 800133a:	a309      	add	r3, pc, #36	; (adr r3, 8001360 <Kalman_init+0x80>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kalman->p22 = 0.05;
 8001344:	6979      	ldr	r1, [r7, #20]
 8001346:	a306      	add	r3, pc, #24	; (adr r3, 8001360 <Kalman_init+0x80>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	f3af 8000 	nop.w
 8001360:	9999999a 	.word	0x9999999a
 8001364:	3fa99999 	.word	0x3fa99999

08001368 <KalmanFilter>:


/*
 *	theta_k is Position input
 */
void KalmanFilter(KalmanParameter *kalman ,double theta_k) {
 8001368:	b480      	push	{r7}
 800136a:	b0a5      	sub	sp, #148	; 0x94
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	ed87 0b00 	vstr	d0, [r7]
	double e_xx1_tmp;
	double xx1_tmp;
	double xx1_tmp_tmp;
	double xx2_tmp;
	double xx1,xx2,pp11,pp12,pp21,pp22;
	xx1_tmp = 4.0 * delta_t * kalman->p12;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800137a:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 80016d0 <KalmanFilter+0x368>
 800137e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001382:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	b_xx1_tmp = 4.0 * delta_t * kalman->p21;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800138c:	ed9f 6bd0 	vldr	d6, [pc, #832]	; 80016d0 <KalmanFilter+0x368>
 8001390:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001394:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	c_xx1_tmp = kalman->Q * delta_tPow4;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	ed93 7b00 	vldr	d7, [r3]
 800139e:	ed9f 6bce 	vldr	d6, [pc, #824]	; 80016d8 <KalmanFilter+0x370>
 80013a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013a6:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	xx1_tmp_tmp = delta_tPow2;
 80013aa:	a3d1      	add	r3, pc, #836	; (adr r3, 80016f0 <KalmanFilter+0x388>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	d_xx1_tmp = 4.0 * xx1_tmp_tmp * kalman->p22;
 80013b4:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 80013b8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80013bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80013c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80013ca:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	e_xx1_tmp = ((((4.0 * kalman->R + 4.0 * kalman->p11) + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	ed93 7b02 	vldr	d7, [r3, #8]
 80013d4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80013d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	ed93 7b08 	vldr	d7, [r3, #32]
 80013e2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013e6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80013ea:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013ee:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80013f2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013f6:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80013fa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013fe:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8001402:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001406:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 800140a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800140e:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			+ d_xx1_tmp;
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	ed93 7b02 	vldr	d7, [r3, #8]
 8001418:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800141c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	ed93 7b04 	vldr	d7, [r3, #16]
 8001426:	ee26 6b07 	vmul.f64	d6, d6, d7
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	ed93 7b08 	vldr	d7, [r3, #32]
 8001430:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001434:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001438:	ed97 7b00 	vldr	d7, [r7]
 800143c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001440:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001444:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 8001448:	ed97 7b00 	vldr	d7, [r7]
 800144c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001450:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ 4.0 * kalman->R * delta_t * kalman->x2) + xx1_tmp * theta_k) + b_xx1_tmp * theta_k)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	ed93 7b02 	vldr	d7, [r3, #8]
 800145a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800145e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001462:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 80016e0 <KalmanFilter+0x378>
 8001466:	ee27 5b05 	vmul.f64	d5, d7, d5
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	ed93 7b06 	vldr	d7, [r3, #24]
 8001470:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001474:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001478:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 800147c:	ed97 7b00 	vldr	d7, [r7]
 8001480:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001484:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001488:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 800148c:	ed97 7b00 	vldr	d7, [r7]
 8001490:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001494:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ c_xx1_tmp * theta_k) / e_xx1_tmp;
 8001498:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 800149c:	ed97 7b00 	vldr	d7, [r7]
 80014a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80014a4:	ee36 5b07 	vadd.f64	d5, d6, d7
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 80014a8:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80014ac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014b0:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	xx2_tmp = kalman->p22 * delta_t;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80014ba:	ed9f 6b89 	vldr	d6, [pc, #548]	; 80016e0 <KalmanFilter+0x378>
 80014be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014c2:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	b_xx2_tmp = kalman->Q * delta_tPow3;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	ed93 7b00 	vldr	d7, [r3]
 80014cc:	ed9f 6b86 	vldr	d6, [pc, #536]	; 80016e8 <KalmanFilter+0x380>
 80014d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014d4:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	c_xx2_tmp = b_xx2_tmp / 2.0 + xx2_tmp;
 80014d8:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80014dc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80014e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014e4:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80014e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014ec:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	d_xx2_tmp = c_xx2_tmp + kalman->p21;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80014f6:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 80014fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014fe:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	xx2_tmp = (((kalman->R + kalman->p11) + delta_t * kalman->p21) + c_xx1_tmp / 4.0) + delta_t * (kalman->p12 + xx2_tmp);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	ed93 6b02 	vldr	d6, [r3, #8]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	ed93 7b08 	vldr	d7, [r3, #32]
 800150e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001518:	ed9f 5b71 	vldr	d5, [pc, #452]	; 80016e0 <KalmanFilter+0x378>
 800151c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001520:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001524:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8001528:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 800152c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001530:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 800153a:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800153e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001542:	ed9f 5b67 	vldr	d5, [pc, #412]	; 80016e0 <KalmanFilter+0x378>
 8001546:	ee27 7b05 	vmul.f64	d7, d7, d5
 800154a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800154e:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	xx2 = kalman->x2 - d_xx2_tmp * ((kalman->x1 - theta_k) + delta_t * kalman->x2) / xx2_tmp;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	ed93 6b06 	vldr	d6, [r3, #24]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	ed93 5b04 	vldr	d5, [r3, #16]
 800155e:	ed97 7b00 	vldr	d7, [r7]
 8001562:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	ed93 7b06 	vldr	d7, [r3, #24]
 800156c:	ed9f 4b5c 	vldr	d4, [pc, #368]	; 80016e0 <KalmanFilter+0x378>
 8001570:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001574:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001578:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800157c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001580:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8001584:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001588:	ee36 7b47 	vsub.f64	d7, d6, d7
 800158c:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	pp11 = kalman->R * ((((4.0 * kalman->p11 + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp) + d_xx1_tmp)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	ed93 6b02 	vldr	d6, [r3, #8]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	ed93 7b08 	vldr	d7, [r3, #32]
 800159c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80015a0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80015a4:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80015a8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015ac:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80015b0:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015b4:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80015b8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015bc:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80015c0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80015c4:	ee26 5b07 	vmul.f64	d5, d6, d7
 80015c8:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80015cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80015d0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			/ e_xx1_tmp;
	xx1_tmp = b_xx2_tmp + 2.0 * kalman->p22 * delta_t;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80015da:	ee37 7b07 	vadd.f64	d7, d7, d7
 80015de:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80016e0 <KalmanFilter+0x378>
 80015e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015e6:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80015ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015ee:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	pp12 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p12) / e_xx1_tmp;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80015f8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001602:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001606:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800160a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800160e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001612:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001616:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800161a:	ed87 7b08 	vstr	d7, [r7, #32]
	pp21 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p21) / e_xx1_tmp;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	ed93 7b02 	vldr	d7, [r3, #8]
 8001624:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800162e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001632:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001636:	ee35 7b07 	vadd.f64	d7, d5, d7
 800163a:	ee26 5b07 	vmul.f64	d5, d6, d7
 800163e:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001642:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001646:	ed87 7b06 	vstr	d7, [r7, #24]
	pp22 = (kalman->p22 + kalman->Q * xx1_tmp_tmp) - (c_xx2_tmp + kalman->p12) * d_xx2_tmp / xx2_tmp;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	ed93 5b00 	vldr	d5, [r3]
 8001656:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800165a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800165e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8001668:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800166c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001670:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001674:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001678:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 800167c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001680:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001684:	ed87 7b04 	vstr	d7, [r7, #16]

	/*Update Variable*/
	kalman->x1 = xx1;
 8001688:	68f9      	ldr	r1, [r7, #12]
 800168a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800168e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kalman->x2 = xx2;
 8001692:	68f9      	ldr	r1, [r7, #12]
 8001694:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001698:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->p11 = pp11;
 800169c:	68f9      	ldr	r1, [r7, #12]
 800169e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016a2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->p12 = pp12;
 80016a6:	68f9      	ldr	r1, [r7, #12]
 80016a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016ac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	kalman->p21 = pp21;
 80016b0:	68f9      	ldr	r1, [r7, #12]
 80016b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016b6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kalman->p22 = pp22;
 80016ba:	68f9      	ldr	r1, [r7, #12]
 80016bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016c0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80016c4:	bf00      	nop
 80016c6:	3794      	adds	r7, #148	; 0x94
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80016d4:	3f70624d 	.word	0x3f70624d
 80016d8:	812dea12 	.word	0x812dea12
 80016dc:	3d719799 	.word	0x3d719799
 80016e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80016e4:	3f50624d 	.word	0x3f50624d
 80016e8:	e826d695 	.word	0xe826d695
 80016ec:	3e112e0b 	.word	0x3e112e0b
 80016f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80016f4:	3eb0c6f7 	.word	0x3eb0c6f7

080016f8 <PID_init>:

double BaseENCRead(){
	return 970.0f;  //fsaldfkjas;dflkjas;dflksjf;asdf
}

void PID_init(PIDParameter *PID, double Kp, double Ki, double Kd) {
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	61f8      	str	r0, [r7, #28]
 8001700:	ed87 0b04 	vstr	d0, [r7, #16]
 8001704:	ed87 1b02 	vstr	d1, [r7, #8]
 8001708:	ed87 2b00 	vstr	d2, [r7]
	PID->Kp = Kp;
 800170c:	69f9      	ldr	r1, [r7, #28]
 800170e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001712:	e9c1 2300 	strd	r2, r3, [r1]
	PID->Ki = Ki;
 8001716:	69f9      	ldr	r1, [r7, #28]
 8001718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800171c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	PID->Kd = Kd;
 8001720:	69f9      	ldr	r1, [r7, #28]
 8001722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001726:	e9c1 2304 	strd	r2, r3, [r1, #16]
	PID->ITerm = 0;
 800172a:	69f9      	ldr	r1, [r7, #28]
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	e9c1 2306 	strd	r2, r3, [r1, #24]
	PID->Setpoint = 0;
 8001738:	69f9      	ldr	r1, [r7, #28]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PID->Feedback = 0;
 8001746:	69f9      	ldr	r1, [r7, #28]
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	PID->Error[0] = 0;
 8001754:	69f9      	ldr	r1, [r7, #28]
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	PID->Error[1] = 0;
 8001762:	69f9      	ldr	r1, [r7, #28]
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	PID->Output = 0;
 8001770:	69f9      	ldr	r1, [r7, #28]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 800177e:	bf00      	nop
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PID_Control>:

double PID_Control(PIDParameter *PID,double Setpoint,double Feedback){
 800178a:	b480      	push	{r7}
 800178c:	b087      	sub	sp, #28
 800178e:	af00      	add	r7, sp, #0
 8001790:	6178      	str	r0, [r7, #20]
 8001792:	ed87 0b02 	vstr	d0, [r7, #8]
 8001796:	ed87 1b00 	vstr	d1, [r7]
	PID->Feedback = Feedback; 	// Feedback Input
 800179a:	6979      	ldr	r1, [r7, #20]
 800179c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	PID->Setpoint = Setpoint;	// Setpoint Input
 80017a4:	6979      	ldr	r1, [r7, #20]
 80017a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017aa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PID->Error[0] = PID->Setpoint - PID->Feedback;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	ed93 6b08 	vldr	d6, [r3, #32]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80017ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	PID->ITerm += PID->Error[0];
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	ed93 6b06 	vldr	d6, [r3, #24]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80017d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	ed83 7b06 	vstr	d7, [r3, #24]
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	ed93 6b00 	vldr	d6, [r3]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80017e6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	ed93 5b02 	vldr	d5, [r3, #8]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	ed93 7b06 	vldr	d7, [r3, #24]
 80017f6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80017fa:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (PID->Kd * (PID->Error[0] - PID->Error[1])));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	ed93 5b04 	vldr	d5, [r3, #16]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001810:	ee34 7b47 	vsub.f64	d7, d4, d7
 8001814:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001818:	ee36 7b07 	vadd.f64	d7, d6, d7
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	PID->Error[1] = PID->Error[0]; // Update Error
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001828:	6979      	ldr	r1, [r7, #20]
 800182a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	return PID->Output;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001834:	ec43 2b17 	vmov	d7, r2, r3
}
 8001838:	eeb0 0b47 	vmov.f64	d0, d7
 800183c:	371c      	adds	r7, #28
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <CascadeControl_init>:


void CascadeControl_init(ControlParameter *Control,double PosP,double PosI,double PosD,double VelP,double VelI,double VelD, double GFeed){
 8001846:	b580      	push	{r7, lr}
 8001848:	b090      	sub	sp, #64	; 0x40
 800184a:	af00      	add	r7, sp, #0
 800184c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800184e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8001852:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8001856:	ed87 2b08 	vstr	d2, [r7, #32]
 800185a:	ed87 3b06 	vstr	d3, [r7, #24]
 800185e:	ed87 4b04 	vstr	d4, [r7, #16]
 8001862:	ed87 5b02 	vstr	d5, [r7, #8]
 8001866:	ed87 6b00 	vstr	d6, [r7]
	PID_init(&Control->Pos,PosP,PosI,PosD);
 800186a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800186c:	ed97 2b08 	vldr	d2, [r7, #32]
 8001870:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8001874:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff3d 	bl	80016f8 <PID_init>
	PID_init(&Control->Vel,VelP,VelI,VelD);
 800187e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001880:	3360      	adds	r3, #96	; 0x60
 8001882:	ed97 2b02 	vldr	d2, [r7, #8]
 8001886:	ed97 1b04 	vldr	d1, [r7, #16]
 800188a:	ed97 0b06 	vldr	d0, [r7, #24]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff32 	bl	80016f8 <PID_init>
	Control->Vel_Gfeed = GFeed;
 8001894:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001896:	e9d7 2300 	ldrd	r2, r3, [r7]
 800189a:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
}
 800189e:	bf00      	nop
 80018a0:	3740      	adds	r7, #64	; 0x40
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <CascadeControl>:


void CascadeControl(ControlParameter *Control, KalmanParameter *kalman,
		double Pos_Feed, double pos_set, double vel_set) {
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b088      	sub	sp, #32
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	61f8      	str	r0, [r7, #28]
 80018ae:	61b9      	str	r1, [r7, #24]
 80018b0:	ed87 0b04 	vstr	d0, [r7, #16]
 80018b4:	ed87 1b02 	vstr	d1, [r7, #8]
 80018b8:	ed87 2b00 	vstr	d2, [r7]
	/*Set Setpoint*/
	Control->PositionSetpoint = pos_set;
 80018bc:	69f9      	ldr	r1, [r7, #28]
 80018be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Control->VelocitySetpoint = vel_set;
 80018c6:	69f9      	ldr	r1, [r7, #28]
 80018c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018cc:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

	/*Kalman Filter*/
	KalmanFilter(kalman, Pos_Feed); /*Kalman filter */
 80018d0:	ed97 0b04 	vldr	d0, [r7, #16]
 80018d4:	69b8      	ldr	r0, [r7, #24]
 80018d6:	f7ff fd47 	bl	8001368 <KalmanFilter>
	Control->VelocityFeedback = kalman->x2;
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018e0:	69f9      	ldr	r1, [r7, #28]
 80018e2:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	Control->PositionFeedback = kalman->x1;
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018ec:	69f9      	ldr	r1, [r7, #28]
 80018ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	/*Position PID Control*/
	Control->PositionPIDOutput = PID_Control(&Control->Pos,
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001900:	eeb0 1b46 	vmov.f64	d1, d6
 8001904:	eeb0 0b47 	vmov.f64	d0, d7
 8001908:	4610      	mov	r0, r2
 800190a:	f7ff ff3e 	bl	800178a <PID_Control>
 800190e:	eeb0 7b40 	vmov.f64	d7, d0
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
			Control->PositionSetpoint, Control->PositionFeedback);
	/*Feedforward Velocity*/
	Control->SumVelocityFeedForward = Control->PositionPIDOutput + Control->VelocitySetpoint;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8001924:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	/*Velocity PID Control*/
	Control->VelocityPIDOutput = PID_Control(&Control->Vel,
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	ed93 6b2e 	vldr	d6, [r3, #184]	; 0xb8
 8001940:	eeb0 1b46 	vmov.f64	d1, d6
 8001944:	eeb0 0b47 	vmov.f64	d0, d7
 8001948:	4610      	mov	r0, r2
 800194a:	f7ff ff1e 	bl	800178a <PID_Control>
 800194e:	eeb0 7b40 	vmov.f64	d7, d0
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
			Control->SumVelocityFeedForward, Control->VelocityFeedback);
	/*Feedforward Velocity Setpoint*/
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	ed93 6b32 	vldr	d6, [r3, #200]	; 0xc8
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8001964:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ Control->VelocityPIDOutput;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 800196e:	ee36 7b07 	vadd.f64	d7, d6, d7
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
//	Control->Output = Control->VelocityPIDOutput;
}
 8001978:	bf00      	nop
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_CRC_Init+0x50>)
 8001986:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <MX_CRC_Init+0x54>)
 8001988:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_CRC_Init+0x50>)
 800198c:	2201      	movs	r2, #1
 800198e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_CRC_Init+0x50>)
 8001992:	2201      	movs	r2, #1
 8001994:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_CRC_Init+0x50>)
 8001998:	221d      	movs	r2, #29
 800199a:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_CRC_Init+0x50>)
 800199e:	2210      	movs	r2, #16
 80019a0:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_CRC_Init+0x50>)
 80019a4:	22c4      	movs	r2, #196	; 0xc4
 80019a6:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_CRC_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_CRC_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_CRC_Init+0x50>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_CRC_Init+0x50>)
 80019bc:	f007 fd72 	bl	80094a4 <HAL_CRC_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 80019c6:	f003 fc63 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000248 	.word	0x20000248
 80019d4:	58024c00 	.word	0x58024c00

080019d8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <HAL_CRC_MspInit+0x3c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d10e      	bne.n	8001a08 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_CRC_MspInit+0x40>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f0:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_CRC_MspInit+0x40>)
 80019f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <HAL_CRC_MspInit+0x40>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	58024c00 	.word	0x58024c00
 8001a18:	58024400 	.word	0x58024400

08001a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <MX_DMA_Init+0x5c>)
 8001a24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a28:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <MX_DMA_Init+0x5c>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_DMA_Init+0x5c>)
 8001a34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	200b      	movs	r0, #11
 8001a46:	f007 fcf8 	bl	800943a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a4a:	200b      	movs	r0, #11
 8001a4c:	f007 fd0f 	bl	800946e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	200c      	movs	r0, #12
 8001a56:	f007 fcf0 	bl	800943a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a5a:	200c      	movs	r0, #12
 8001a5c:	f007 fd07 	bl	800946e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	200d      	movs	r0, #13
 8001a66:	f007 fce8 	bl	800943a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001a6a:	200d      	movs	r0, #13
 8001a6c:	f007 fcff 	bl	800946e <HAL_NVIC_EnableIRQ>

}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	58024400 	.word	0x58024400

08001a7c <MX_GPIO_Init>:
        * the Code Generation settings)
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a92:	4b91      	ldr	r3, [pc, #580]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a98:	4a8f      	ldr	r2, [pc, #572]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001a9a:	f043 0310 	orr.w	r3, r3, #16
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa2:	4b8d      	ldr	r3, [pc, #564]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	4b89      	ldr	r3, [pc, #548]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab6:	4a88      	ldr	r2, [pc, #544]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac0:	4b85      	ldr	r3, [pc, #532]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ace:	4b82      	ldr	r3, [pc, #520]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad4:	4a80      	ldr	r2, [pc, #512]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ade:	4b7e      	ldr	r3, [pc, #504]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af2:	4a79      	ldr	r2, [pc, #484]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001afc:	4b76      	ldr	r3, [pc, #472]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	4b73      	ldr	r3, [pc, #460]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b10:	4a71      	ldr	r2, [pc, #452]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001b12:	f043 0302 	orr.w	r3, r3, #2
 8001b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1a:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b28:	4b6b      	ldr	r3, [pc, #428]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2e:	4a6a      	ldr	r2, [pc, #424]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b38:	4b67      	ldr	r3, [pc, #412]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001b46:	2200      	movs	r2, #0
 8001b48:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001b4c:	4863      	ldr	r0, [pc, #396]	; (8001cdc <MX_GPIO_Init+0x260>)
 8001b4e:	f00a fa81 	bl	800c054 <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001b58:	4861      	ldr	r0, [pc, #388]	; (8001ce0 <MX_GPIO_Init+0x264>)
 8001b5a:	f00a fa7b 	bl	800c054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	21c4      	movs	r1, #196	; 0xc4
 8001b62:	4860      	ldr	r0, [pc, #384]	; (8001ce4 <MX_GPIO_Init+0x268>)
 8001b64:	f00a fa76 	bl	800c054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f24c 0140 	movw	r1, #49216	; 0xc040
 8001b6e:	485e      	ldr	r0, [pc, #376]	; (8001ce8 <MX_GPIO_Init+0x26c>)
 8001b70:	f00a fa70 	bl	800c054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b7a:	4859      	ldr	r0, [pc, #356]	; (8001ce0 <MX_GPIO_Init+0x264>)
 8001b7c:	f00a fa6a 	bl	800c054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001b80:	2201      	movs	r2, #1
 8001b82:	213f      	movs	r1, #63	; 0x3f
 8001b84:	4858      	ldr	r0, [pc, #352]	; (8001ce8 <MX_GPIO_Init+0x26c>)
 8001b86:	f00a fa65 	bl	800c054 <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001b8a:	f648 33df 	movw	r3, #35807	; 0x8bdf
 8001b8e:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	484e      	ldr	r0, [pc, #312]	; (8001cdc <MX_GPIO_Init+0x260>)
 8001ba4:	f00a f8ae 	bl	800bd04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001ba8:	f24e 030f 	movw	r3, #57359	; 0xe00f
 8001bac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4848      	ldr	r0, [pc, #288]	; (8001ce0 <MX_GPIO_Init+0x264>)
 8001bbe:	f00a f8a1 	bl	800bd04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001bc2:	233c      	movs	r3, #60	; 0x3c
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4845      	ldr	r0, [pc, #276]	; (8001cec <MX_GPIO_Init+0x270>)
 8001bd6:	f00a f895 	bl	800bd04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 8001bda:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	483b      	ldr	r0, [pc, #236]	; (8001ce0 <MX_GPIO_Init+0x264>)
 8001bf4:	f00a f886 	bl	800bd04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4836      	ldr	r0, [pc, #216]	; (8001ce4 <MX_GPIO_Init+0x268>)
 8001c0c:	f00a f87a 	bl	800bd04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	482f      	ldr	r0, [pc, #188]	; (8001ce4 <MX_GPIO_Init+0x268>)
 8001c26:	f00a f86d 	bl	800bd04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 8001c2a:	23c4      	movs	r3, #196	; 0xc4
 8001c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4828      	ldr	r0, [pc, #160]	; (8001ce4 <MX_GPIO_Init+0x268>)
 8001c42:	f00a f85f 	bl	800bd04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4820      	ldr	r0, [pc, #128]	; (8001cdc <MX_GPIO_Init+0x260>)
 8001c5c:	f00a f852 	bl	800bd04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_7;
 8001c60:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c66:	2303      	movs	r3, #3
 8001c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	481c      	ldr	r0, [pc, #112]	; (8001ce8 <MX_GPIO_Init+0x26c>)
 8001c76:	f00a f845 	bl	800bd04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001c7a:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001c7e:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c80:	2301      	movs	r3, #1
 8001c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	4619      	mov	r1, r3
 8001c92:	4815      	ldr	r0, [pc, #84]	; (8001ce8 <MX_GPIO_Init+0x26c>)
 8001c94:	f00a f836 	bl	800bd04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	480f      	ldr	r0, [pc, #60]	; (8001cec <MX_GPIO_Init+0x270>)
 8001cae:	f00a f829 	bl	800bd04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4808      	ldr	r0, [pc, #32]	; (8001cec <MX_GPIO_Init+0x270>)
 8001ccc:	f00a f81a 	bl	800bd04 <HAL_GPIO_Init>

}
 8001cd0:	bf00      	nop
 8001cd2:	3730      	adds	r7, #48	; 0x30
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	58024400 	.word	0x58024400
 8001cdc:	58021000 	.word	0x58021000
 8001ce0:	58020800 	.word	0x58020800
 8001ce4:	58020400 	.word	0x58020400
 8001ce8:	58020c00 	.word	0x58020c00
 8001cec:	58020000 	.word	0x58020000

08001cf0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <MX_I2C2_Init+0x78>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <MX_I2C2_Init+0x7c>)
 8001cfe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d2a:	480e      	ldr	r0, [pc, #56]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d2c:	f00a f9c6 	bl	800c0bc <HAL_I2C_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d36:	f003 faab 	bl	8005290 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4809      	ldr	r0, [pc, #36]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d3e:	f00b fcf7 	bl	800d730 <HAL_I2CEx_ConfigAnalogFilter>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d48:	f003 faa2 	bl	8005290 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d50:	f00b fd39 	bl	800d7c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d5a:	f003 fa99 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000026c 	.word	0x2000026c
 8001d68:	40005800 	.word	0x40005800
 8001d6c:	60404e72 	.word	0x60404e72

08001d70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b0b6      	sub	sp, #216	; 0xd8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	22b4      	movs	r2, #180	; 0xb4
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f014 f8bd 	bl	8015f10 <memset>
  if(i2cHandle->Instance==I2C2)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a29      	ldr	r2, [pc, #164]	; (8001e40 <HAL_I2C_MspInit+0xd0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d14a      	bne.n	8001e36 <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001da0:	2308      	movs	r3, #8
 8001da2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001daa:	f107 0310 	add.w	r3, r7, #16
 8001dae:	4618      	mov	r0, r3
 8001db0:	f00c fcca 	bl	800e748 <HAL_RCCEx_PeriphCLKConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001dba:	f003 fa69 	bl	8005290 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HAL_I2C_MspInit+0xd4>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <HAL_I2C_MspInit+0xd4>)
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_I2C_MspInit+0xd4>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ddc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001de0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de4:	2312      	movs	r3, #18
 8001de6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001df6:	2304      	movs	r3, #4
 8001df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e00:	4619      	mov	r1, r3
 8001e02:	4811      	ldr	r0, [pc, #68]	; (8001e48 <HAL_I2C_MspInit+0xd8>)
 8001e04:	f009 ff7e 	bl	800bd04 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_I2C_MspInit+0xd4>)
 8001e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <HAL_I2C_MspInit+0xd4>)
 8001e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_I2C_MspInit+0xd4>)
 8001e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2022      	movs	r0, #34	; 0x22
 8001e2c:	f007 fb05 	bl	800943a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001e30:	2022      	movs	r0, #34	; 0x22
 8001e32:	f007 fb1c 	bl	800946e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e36:	bf00      	nop
 8001e38:	37d8      	adds	r7, #216	; 0xd8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40005800 	.word	0x40005800
 8001e44:	58024400 	.word	0x58024400
 8001e48:	58020400 	.word	0x58020400
 8001e4c:	00000000 	.word	0x00000000

08001e50 <IPK>:
 *
 **************** Output ********************
 * q[4]				---> JointSpace Position
 *
 */
Kinematics_StatusTypeDef IPK(double gammabar[3], double chi[3], double q[4]) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	ed2d 8b02 	vpush	{d8}
 8001e56:	b08e      	sub	sp, #56	; 0x38
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
	double c2;
	double q2;
	double q3;
	double s2;
	double x24;
	x24 = gammabar[1] * sqrt(chi[0] * chi[0] + chi[1] * chi[1]) - 20.0;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3308      	adds	r3, #8
 8001e64:	ed93 8b00 	vldr	d8, [r3]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	ed93 6b00 	vldr	d6, [r3]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	ed93 7b00 	vldr	d7, [r3]
 8001e74:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	3308      	adds	r3, #8
 8001e7c:	ed93 5b00 	vldr	d5, [r3]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	3308      	adds	r3, #8
 8001e84:	ed93 7b00 	vldr	d7, [r3]
 8001e88:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001e8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e90:	eeb0 0b47 	vmov.f64	d0, d7
 8001e94:	f014 f8e0 	bl	8016058 <sqrt>
 8001e98:	eeb0 7b40 	vmov.f64	d7, d0
 8001e9c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001ea0:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8001ea4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ea8:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	c2 = x24 * x24
 8001eac:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001eb0:	ee27 6b07 	vmul.f64	d6, d7, d7
			+ ((chi[2] + 268.23) - 295.89) * ((chi[2] + 268.23) - 295.89);
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	3310      	adds	r3, #16
 8001eb8:	ed93 7b00 	vldr	d7, [r3]
 8001ebc:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8002070 <IPK+0x220>
 8001ec0:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001ec4:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8002078 <IPK+0x228>
 8001ec8:	ee37 5b45 	vsub.f64	d5, d7, d5
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	3310      	adds	r3, #16
 8001ed0:	ed93 7b00 	vldr	d7, [r3]
 8001ed4:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8002070 <IPK+0x220>
 8001ed8:	ee37 7b04 	vadd.f64	d7, d7, d4
 8001edc:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8002078 <IPK+0x228>
 8001ee0:	ee37 7b44 	vsub.f64	d7, d7, d4
 8001ee4:	ee25 7b07 	vmul.f64	d7, d5, d7
	c2 = x24 * x24
 8001ee8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001eec:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	s2 = sqrt(c2);
 8001ef0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001ef4:	f014 f8b0 	bl	8016058 <sqrt>
 8001ef8:	ed87 0b08 	vstr	d0, [r7, #32]
	if ((s2 <= 760.0) && (s2 >= 0.0)) {
 8001efc:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f00:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8002080 <IPK+0x230>
 8001f04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0c:	f200 80a8 	bhi.w	8002060 <IPK+0x210>
 8001f10:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f14:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	f2c0 80a0 	blt.w	8002060 <IPK+0x210>
		c2 = ((c2 - 144400.0) - 144400.0) / 288800.0;
 8001f20:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001f24:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8002088 <IPK+0x238>
 8001f28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f2c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002088 <IPK+0x238>
 8001f30:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001f34:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8002090 <IPK+0x240>
 8001f38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f3c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		s2 = gammabar[2] * sqrt(1.0 - c2 * c2);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3310      	adds	r3, #16
 8001f44:	ed93 8b00 	vldr	d8, [r3]
 8001f48:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001f4c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001f50:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001f54:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f58:	eeb0 0b47 	vmov.f64	d0, d7
 8001f5c:	f014 f87c 	bl	8016058 <sqrt>
 8001f60:	eeb0 7b40 	vmov.f64	d7, d0
 8001f64:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001f68:	ed87 7b08 	vstr	d7, [r7, #32]
		q2 = (atan2((chi[2] + 268.23) - 295.89, x24)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3310      	adds	r3, #16
 8001f70:	ed93 7b00 	vldr	d7, [r3]
 8001f74:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002070 <IPK+0x220>
 8001f78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f7c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002078 <IPK+0x228>
 8001f80:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f84:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8001f88:	eeb0 0b47 	vmov.f64	d0, d7
 8001f8c:	f014 f860 	bl	8016050 <atan2>
 8001f90:	eeb0 8b40 	vmov.f64	d8, d0
				- atan2(380.0 * s2, 380.0 * c2 + 380.0)) - 1.5707963267948966;
 8001f94:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f98:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8002098 <IPK+0x248>
 8001f9c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fa0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001fa4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8002098 <IPK+0x248>
 8001fa8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001fac:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8002098 <IPK+0x248>
 8001fb0:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001fb4:	eeb0 1b47 	vmov.f64	d1, d7
 8001fb8:	eeb0 0b46 	vmov.f64	d0, d6
 8001fbc:	f014 f848 	bl	8016050 <atan2>
 8001fc0:	eeb0 7b40 	vmov.f64	d7, d0
 8001fc4:	ee38 7b47 	vsub.f64	d7, d8, d7
		q2 = (atan2((chi[2] + 268.23) - 295.89, x24)
 8001fc8:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80020a0 <IPK+0x250>
 8001fcc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fd0:	ed87 7b06 	vstr	d7, [r7, #24]
		q3 = atan2(s2, c2) + 1.5707963267948966;
 8001fd4:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8001fd8:	ed97 0b08 	vldr	d0, [r7, #32]
 8001fdc:	f014 f838 	bl	8016050 <atan2>
 8001fe0:	eeb0 7b40 	vmov.f64	d7, d0
 8001fe4:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 80020a0 <IPK+0x250>
 8001fe8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fec:	ed87 7b04 	vstr	d7, [r7, #16]
		q[0] = atan2(gammabar[0] * chi[1], gammabar[0] * chi[0]);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	ed93 6b00 	vldr	d6, [r3]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	3308      	adds	r3, #8
 8001ffa:	ed93 7b00 	vldr	d7, [r3]
 8001ffe:	ee26 5b07 	vmul.f64	d5, d6, d7
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	ed93 6b00 	vldr	d6, [r3]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	ed93 7b00 	vldr	d7, [r3]
 800200e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002012:	eeb0 1b47 	vmov.f64	d1, d7
 8002016:	eeb0 0b45 	vmov.f64	d0, d5
 800201a:	f014 f819 	bl	8016050 <atan2>
 800201e:	eeb0 7b40 	vmov.f64	d7, d0
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	ed83 7b00 	vstr	d7, [r3]
		q[1] = q2;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f103 0108 	add.w	r1, r3, #8
 800202e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002032:	e9c1 2300 	strd	r2, r3, [r1]
		q[2] = q3;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f103 0110 	add.w	r1, r3, #16
 800203c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002040:	e9c1 2300 	strd	r2, r3, [r1]
		q[3] = -q2 - q3;
 8002044:	ed97 7b06 	vldr	d7, [r7, #24]
 8002048:	eeb1 6b47 	vneg.f64	d6, d7
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3318      	adds	r3, #24
 8002050:	ed97 7b04 	vldr	d7, [r7, #16]
 8002054:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002058:	ed83 7b00 	vstr	d7, [r3]
		return Kinematics_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	e000      	b.n	8002062 <IPK+0x212>
	} else {
		return Error_Link_length;
 8002060:	2301      	movs	r3, #1
	}
}
 8002062:	4618      	mov	r0, r3
 8002064:	3738      	adds	r7, #56	; 0x38
 8002066:	46bd      	mov	sp, r7
 8002068:	ecbd 8b02 	vpop	{d8}
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	147ae148 	.word	0x147ae148
 8002074:	4070c3ae 	.word	0x4070c3ae
 8002078:	70a3d70a 	.word	0x70a3d70a
 800207c:	40727e3d 	.word	0x40727e3d
 8002080:	00000000 	.word	0x00000000
 8002084:	4087c000 	.word	0x4087c000
 8002088:	00000000 	.word	0x00000000
 800208c:	4101a080 	.word	0x4101a080
 8002090:	00000000 	.word	0x00000000
 8002094:	4111a080 	.word	0x4111a080
 8002098:	00000000 	.word	0x00000000
 800209c:	4077c000 	.word	0x4077c000
 80020a0:	54442d18 	.word	0x54442d18
 80020a4:	3ff921fb 	.word	0x3ff921fb

080020a8 <IVK>:
 */

//Kinematics_StatusTypeDef IVK(double q[3], double chi_dot[3], double qv[4])

Kinematics_StatusTypeDef IVK(double q[4], double chi_dot[3], double qv[4])
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	ed2d 8b04 	vpush	{d8-d9}
 80020ae:	b0a6      	sub	sp, #152	; 0x98
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  double qvbar_idx_1;
  double qvbar_idx_2;
  int r1;
  int r2;
  int rtemp;
  qvbar_idx_1 = q[1] + q[2];
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3308      	adds	r3, #8
 80020bc:	ed93 6b00 	vldr	d6, [r3]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3310      	adds	r3, #16
 80020c4:	ed93 7b00 	vldr	d7, [r3]
 80020c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020cc:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_2 = sin(qvbar_idx_1);
 80020d0:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 80020d4:	f013 ff70 	bl	8015fb8 <sin>
 80020d8:	ed87 0b1e 	vstr	d0, [r7, #120]	; 0x78
  Jv4_tmp = cos(q[0]);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	ed93 7b00 	vldr	d7, [r3]
 80020e2:	eeb0 0b47 	vmov.f64	d0, d7
 80020e6:	f013 ff1b 	bl	8015f20 <cos>
 80020ea:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
  b_Jv4_tmp = sin(q[0]);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	ed93 7b00 	vldr	d7, [r3]
 80020f4:	eeb0 0b47 	vmov.f64	d0, d7
 80020f8:	f013 ff5e 	bl	8015fb8 <sin>
 80020fc:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68
  qvbar_idx_1 = 380.0 * cos(qvbar_idx_1);
 8002100:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 8002104:	f013 ff0c 	bl	8015f20 <cos>
 8002108:	eeb0 7b40 	vmov.f64	d7, d0
 800210c:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 8002430 <IVK+0x388>
 8002110:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002114:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  Jv4_tmp_tmp = 380.0 * sin(q[1]);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	3308      	adds	r3, #8
 800211c:	ed93 7b00 	vldr	d7, [r3]
 8002120:	eeb0 0b47 	vmov.f64	d0, d7
 8002124:	f013 ff48 	bl	8015fb8 <sin>
 8002128:	eeb0 7b40 	vmov.f64	d7, d0
 800212c:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8002430 <IVK+0x388>
 8002130:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002134:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
  c_Jv4_tmp = (qvbar_idx_1 + 20.0) - Jv4_tmp_tmp;
 8002138:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800213c:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002140:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002144:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002148:	ee36 7b47 	vsub.f64	d7, d6, d7
 800214c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
  Jv4[0] = -b_Jv4_tmp * c_Jv4_tmp;
 8002150:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8002154:	eeb1 6b47 	vneg.f64	d6, d7
 8002158:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800215c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002160:	ed87 7b04 	vstr	d7, [r7, #16]
  Jv4[3] = -Jv4_tmp * (380.0 * qvbar_idx_2 + 380.0 * cos(q[1]));
 8002164:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002168:	eeb1 8b47 	vneg.f64	d8, d7
 800216c:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002170:	ed9f 6baf 	vldr	d6, [pc, #700]	; 8002430 <IVK+0x388>
 8002174:	ee27 9b06 	vmul.f64	d9, d7, d6
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3308      	adds	r3, #8
 800217c:	ed93 7b00 	vldr	d7, [r3]
 8002180:	eeb0 0b47 	vmov.f64	d0, d7
 8002184:	f013 fecc 	bl	8015f20 <cos>
 8002188:	eeb0 7b40 	vmov.f64	d7, d0
 800218c:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002430 <IVK+0x388>
 8002190:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002194:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002198:	ee28 7b07 	vmul.f64	d7, d8, d7
 800219c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  Jv4[6] = -380.0 * qvbar_idx_2 * Jv4_tmp;
 80021a0:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80021a4:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8002438 <IVK+0x390>
 80021a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021ac:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 80021b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021b4:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  Jv4[1] = Jv4_tmp * c_Jv4_tmp;
 80021b8:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80021bc:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80021c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021c4:	ed87 7b06 	vstr	d7, [r7, #24]
  Jv4[4] = -sin(q[0]) * (380.0 * sin(q[1] + q[2]) + 380.0 * cos(q[1]));
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	ed93 7b00 	vldr	d7, [r3]
 80021ce:	eeb0 0b47 	vmov.f64	d0, d7
 80021d2:	f013 fef1 	bl	8015fb8 <sin>
 80021d6:	eeb0 7b40 	vmov.f64	d7, d0
 80021da:	eeb1 8b47 	vneg.f64	d8, d7
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3308      	adds	r3, #8
 80021e2:	ed93 6b00 	vldr	d6, [r3]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3310      	adds	r3, #16
 80021ea:	ed93 7b00 	vldr	d7, [r3]
 80021ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021f2:	eeb0 0b47 	vmov.f64	d0, d7
 80021f6:	f013 fedf 	bl	8015fb8 <sin>
 80021fa:	eeb0 7b40 	vmov.f64	d7, d0
 80021fe:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8002430 <IVK+0x388>
 8002202:	ee27 9b06 	vmul.f64	d9, d7, d6
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3308      	adds	r3, #8
 800220a:	ed93 7b00 	vldr	d7, [r3]
 800220e:	eeb0 0b47 	vmov.f64	d0, d7
 8002212:	f013 fe85 	bl	8015f20 <cos>
 8002216:	eeb0 7b40 	vmov.f64	d7, d0
 800221a:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002430 <IVK+0x388>
 800221e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002222:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002226:	ee28 7b07 	vmul.f64	d7, d8, d7
 800222a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  Jv4[7] = -380.0 * sin(q[1] + q[2]) * b_Jv4_tmp;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3308      	adds	r3, #8
 8002232:	ed93 6b00 	vldr	d6, [r3]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3310      	adds	r3, #16
 800223a:	ed93 7b00 	vldr	d7, [r3]
 800223e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002242:	eeb0 0b47 	vmov.f64	d0, d7
 8002246:	f013 feb7 	bl	8015fb8 <sin>
 800224a:	eeb0 7b40 	vmov.f64	d7, d0
 800224e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002438 <IVK+0x390>
 8002252:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002256:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800225a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800225e:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
  Jv4[2] = 0.0;
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  Jv4[5] = qvbar_idx_1 - Jv4_tmp_tmp;
 800226e:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 8002272:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002276:	ee36 7b47 	vsub.f64	d7, d6, d7
 800227a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  Jv4[8] = qvbar_idx_1;
 800227e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002282:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  r1 = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  r2 = 1;
 800228c:	2301      	movs	r3, #1
 800228e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  rtemp = 2;
 8002292:	2302      	movs	r3, #2
 8002294:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (fabs(Jv4[1]) > fabs(Jv4[0])) {
 8002298:	ed97 7b06 	vldr	d7, [r7, #24]
 800229c:	eeb0 6bc7 	vabs.f64	d6, d7
 80022a0:	ed97 7b04 	vldr	d7, [r7, #16]
 80022a4:	eeb0 7bc7 	vabs.f64	d7, d7
 80022a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80022ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b0:	dd05      	ble.n	80022be <IVK+0x216>
    r1 = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    r2 = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  }
  Jv4[r2] /= Jv4[r1];
 80022be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	3398      	adds	r3, #152	; 0x98
 80022c6:	443b      	add	r3, r7
 80022c8:	3b88      	subs	r3, #136	; 0x88
 80022ca:	ed93 5b00 	vldr	d5, [r3]
 80022ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	3398      	adds	r3, #152	; 0x98
 80022d6:	443b      	add	r3, r7
 80022d8:	3b88      	subs	r3, #136	; 0x88
 80022da:	ed93 6b00 	vldr	d6, [r3]
 80022de:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80022e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	3398      	adds	r3, #152	; 0x98
 80022ea:	443b      	add	r3, r7
 80022ec:	3b88      	subs	r3, #136	; 0x88
 80022ee:	ed83 7b00 	vstr	d7, [r3]
  Jv4[2] = 0.0 / Jv4[r1];
 80022f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	3398      	adds	r3, #152	; 0x98
 80022fa:	443b      	add	r3, r7
 80022fc:	3b88      	subs	r3, #136	; 0x88
 80022fe:	ed93 6b00 	vldr	d6, [r3]
 8002302:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8002440 <IVK+0x398>
 8002306:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800230a:	ed87 7b08 	vstr	d7, [r7, #32]
  Jv4[r2 + 3] -= Jv4[r2] * Jv4[r1 + 3];
 800230e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002312:	3303      	adds	r3, #3
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	3398      	adds	r3, #152	; 0x98
 8002318:	443b      	add	r3, r7
 800231a:	3b88      	subs	r3, #136	; 0x88
 800231c:	ed93 6b00 	vldr	d6, [r3]
 8002320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	3398      	adds	r3, #152	; 0x98
 8002328:	443b      	add	r3, r7
 800232a:	3b88      	subs	r3, #136	; 0x88
 800232c:	ed93 5b00 	vldr	d5, [r3]
 8002330:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002334:	3303      	adds	r3, #3
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	3398      	adds	r3, #152	; 0x98
 800233a:	443b      	add	r3, r7
 800233c:	3b88      	subs	r3, #136	; 0x88
 800233e:	ed93 7b00 	vldr	d7, [r3]
 8002342:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800234a:	3303      	adds	r3, #3
 800234c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	3398      	adds	r3, #152	; 0x98
 8002354:	443b      	add	r3, r7
 8002356:	3b88      	subs	r3, #136	; 0x88
 8002358:	ed83 7b00 	vstr	d7, [r3]
  Jv4[5] -= Jv4[2] * Jv4[r1 + 3];
 800235c:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8002360:	ed97 5b08 	vldr	d5, [r7, #32]
 8002364:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002368:	3303      	adds	r3, #3
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	3398      	adds	r3, #152	; 0x98
 800236e:	443b      	add	r3, r7
 8002370:	3b88      	subs	r3, #136	; 0x88
 8002372:	ed93 7b00 	vldr	d7, [r3]
 8002376:	ee25 7b07 	vmul.f64	d7, d5, d7
 800237a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800237e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  Jv4[r2 + 6] -= Jv4[r2] * Jv4[r1 + 6];
 8002382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002386:	3306      	adds	r3, #6
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	3398      	adds	r3, #152	; 0x98
 800238c:	443b      	add	r3, r7
 800238e:	3b88      	subs	r3, #136	; 0x88
 8002390:	ed93 6b00 	vldr	d6, [r3]
 8002394:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	3398      	adds	r3, #152	; 0x98
 800239c:	443b      	add	r3, r7
 800239e:	3b88      	subs	r3, #136	; 0x88
 80023a0:	ed93 5b00 	vldr	d5, [r3]
 80023a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023a8:	3306      	adds	r3, #6
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	3398      	adds	r3, #152	; 0x98
 80023ae:	443b      	add	r3, r7
 80023b0:	3b88      	subs	r3, #136	; 0x88
 80023b2:	ed93 7b00 	vldr	d7, [r3]
 80023b6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80023ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023be:	3306      	adds	r3, #6
 80023c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	3398      	adds	r3, #152	; 0x98
 80023c8:	443b      	add	r3, r7
 80023ca:	3b88      	subs	r3, #136	; 0x88
 80023cc:	ed83 7b00 	vstr	d7, [r3]
  Jv4[8] -= Jv4[2] * Jv4[r1 + 6];
 80023d0:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80023d4:	ed97 5b08 	vldr	d5, [r7, #32]
 80023d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023dc:	3306      	adds	r3, #6
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	3398      	adds	r3, #152	; 0x98
 80023e2:	443b      	add	r3, r7
 80023e4:	3b88      	subs	r3, #136	; 0x88
 80023e6:	ed93 7b00 	vldr	d7, [r3]
 80023ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80023ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80023f2:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
  if (fabs(Jv4[5]) > fabs(Jv4[r2 + 3])) {
 80023f6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80023fa:	eeb0 6bc7 	vabs.f64	d6, d7
 80023fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002402:	3303      	adds	r3, #3
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	3398      	adds	r3, #152	; 0x98
 8002408:	443b      	add	r3, r7
 800240a:	3b88      	subs	r3, #136	; 0x88
 800240c:	ed93 7b00 	vldr	d7, [r3]
 8002410:	eeb0 7bc7 	vabs.f64	d7, d7
 8002414:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241c:	dd14      	ble.n	8002448 <IVK+0x3a0>
    rtemp = r2;
 800241e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002422:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    r2 = 2;
 8002426:	2302      	movs	r3, #2
 8002428:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800242c:	e00c      	b.n	8002448 <IVK+0x3a0>
 800242e:	bf00      	nop
 8002430:	00000000 	.word	0x00000000
 8002434:	4077c000 	.word	0x4077c000
 8002438:	00000000 	.word	0x00000000
 800243c:	c077c000 	.word	0xc077c000
	...
  }
  Jv4[rtemp + 3] /= Jv4[r2 + 3];
 8002448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800244c:	3303      	adds	r3, #3
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	3398      	adds	r3, #152	; 0x98
 8002452:	443b      	add	r3, r7
 8002454:	3b88      	subs	r3, #136	; 0x88
 8002456:	ed93 5b00 	vldr	d5, [r3]
 800245a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800245e:	3303      	adds	r3, #3
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	3398      	adds	r3, #152	; 0x98
 8002464:	443b      	add	r3, r7
 8002466:	3b88      	subs	r3, #136	; 0x88
 8002468:	ed93 6b00 	vldr	d6, [r3]
 800246c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002470:	3303      	adds	r3, #3
 8002472:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	3398      	adds	r3, #152	; 0x98
 800247a:	443b      	add	r3, r7
 800247c:	3b88      	subs	r3, #136	; 0x88
 800247e:	ed83 7b00 	vstr	d7, [r3]
  Jv4[rtemp + 6] -= Jv4[rtemp + 3] * Jv4[r2 + 6];
 8002482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002486:	3306      	adds	r3, #6
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	3398      	adds	r3, #152	; 0x98
 800248c:	443b      	add	r3, r7
 800248e:	3b88      	subs	r3, #136	; 0x88
 8002490:	ed93 6b00 	vldr	d6, [r3]
 8002494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002498:	3303      	adds	r3, #3
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	3398      	adds	r3, #152	; 0x98
 800249e:	443b      	add	r3, r7
 80024a0:	3b88      	subs	r3, #136	; 0x88
 80024a2:	ed93 5b00 	vldr	d5, [r3]
 80024a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024aa:	3306      	adds	r3, #6
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	3398      	adds	r3, #152	; 0x98
 80024b0:	443b      	add	r3, r7
 80024b2:	3b88      	subs	r3, #136	; 0x88
 80024b4:	ed93 7b00 	vldr	d7, [r3]
 80024b8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80024bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024c0:	3306      	adds	r3, #6
 80024c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	3398      	adds	r3, #152	; 0x98
 80024ca:	443b      	add	r3, r7
 80024cc:	3b88      	subs	r3, #136	; 0x88
 80024ce:	ed83 7b00 	vstr	d7, [r3]
  qvbar_idx_1 = chi_dot[r2] - chi_dot[r1] * Jv4[r2];
 80024d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	4413      	add	r3, r2
 80024dc:	ed93 6b00 	vldr	d6, [r3]
 80024e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	4413      	add	r3, r2
 80024ea:	ed93 5b00 	vldr	d5, [r3]
 80024ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	3398      	adds	r3, #152	; 0x98
 80024f6:	443b      	add	r3, r7
 80024f8:	3b88      	subs	r3, #136	; 0x88
 80024fa:	ed93 7b00 	vldr	d7, [r3]
 80024fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002502:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002506:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 800250a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	4413      	add	r3, r2
 8002514:	ed93 6b00 	vldr	d6, [r3]
 8002518:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	4413      	add	r3, r2
 8002522:	ed93 5b00 	vldr	d5, [r3]
 8002526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	3398      	adds	r3, #152	; 0x98
 800252e:	443b      	add	r3, r7
 8002530:	3b88      	subs	r3, #136	; 0x88
 8002532:	ed93 7b00 	vldr	d7, [r3]
 8002536:	ee25 7b07 	vmul.f64	d7, d5, d7
 800253a:	ee36 6b47 	vsub.f64	d6, d6, d7
                 qvbar_idx_1 * Jv4[rtemp + 3]) /
 800253e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002542:	3303      	adds	r3, #3
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	3398      	adds	r3, #152	; 0x98
 8002548:	443b      	add	r3, r7
 800254a:	3b88      	subs	r3, #136	; 0x88
 800254c:	ed93 5b00 	vldr	d5, [r3]
 8002550:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8002554:	ee25 7b07 	vmul.f64	d7, d5, d7
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 8002558:	ee36 5b47 	vsub.f64	d5, d6, d7
                Jv4[rtemp + 6];
 800255c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002560:	3306      	adds	r3, #6
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	3398      	adds	r3, #152	; 0x98
 8002566:	443b      	add	r3, r7
 8002568:	3b88      	subs	r3, #136	; 0x88
 800256a:	ed93 6b00 	vldr	d6, [r3]
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 800256e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002572:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
  qvbar_idx_1 -= qvbar_idx_2 * Jv4[r2 + 6];
 8002576:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800257a:	3306      	adds	r3, #6
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	3398      	adds	r3, #152	; 0x98
 8002580:	443b      	add	r3, r7
 8002582:	3b88      	subs	r3, #136	; 0x88
 8002584:	ed93 6b00 	vldr	d6, [r3]
 8002588:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800258c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002590:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 8002594:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002598:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_1 /= Jv4[r2 + 3];
 800259c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025a0:	3303      	adds	r3, #3
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	3398      	adds	r3, #152	; 0x98
 80025a6:	443b      	add	r3, r7
 80025a8:	3b88      	subs	r3, #136	; 0x88
 80025aa:	ed93 6b00 	vldr	d6, [r3]
 80025ae:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 80025b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80025b6:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qv[0] =
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 80025ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	4413      	add	r3, r2
 80025c4:	ed93 6b00 	vldr	d6, [r3]
 80025c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025cc:	3306      	adds	r3, #6
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	3398      	adds	r3, #152	; 0x98
 80025d2:	443b      	add	r3, r7
 80025d4:	3b88      	subs	r3, #136	; 0x88
 80025d6:	ed93 5b00 	vldr	d5, [r3]
 80025da:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80025de:	ee25 7b07 	vmul.f64	d7, d5, d7
 80025e2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80025e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025ea:	3303      	adds	r3, #3
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	3398      	adds	r3, #152	; 0x98
 80025f0:	443b      	add	r3, r7
 80025f2:	3b88      	subs	r3, #136	; 0x88
 80025f4:	ed93 5b00 	vldr	d5, [r3]
 80025f8:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80025fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002600:	ee36 5b47 	vsub.f64	d5, d6, d7
      Jv4[r1];
 8002604:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	3398      	adds	r3, #152	; 0x98
 800260c:	443b      	add	r3, r7
 800260e:	3b88      	subs	r3, #136	; 0x88
 8002610:	ed93 6b00 	vldr	d6, [r3]
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 8002614:	ee85 7b06 	vdiv.f64	d7, d5, d6
  qv[0] =
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	ed83 7b00 	vstr	d7, [r3]
  qv[1] = qvbar_idx_1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f103 0108 	add.w	r1, r3, #8
 8002624:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002628:	e9c1 2300 	strd	r2, r3, [r1]
  qv[2] = qvbar_idx_2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f103 0110 	add.w	r1, r3, #16
 8002632:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002636:	e9c1 2300 	strd	r2, r3, [r1]
  qv[3] = -qvbar_idx_1 - qvbar_idx_2;
 800263a:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800263e:	eeb1 6b47 	vneg.f64	d6, d7
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3318      	adds	r3, #24
 8002646:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800264a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800264e:	ed83 7b00 	vstr	d7, [r3]
  return Kinematics_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3798      	adds	r7, #152	; 0x98
 8002658:	46bd      	mov	sp, r7
 800265a:	ecbd 8b04 	vpop	{d8-d9}
 800265e:	bd80      	pop	{r7, pc}

08002660 <FPK>:
 * Arguments    : const double q[5]
 *                double l3
 *                double Pne[3]
 * Return Type  : void
 */
void FPK(double q[5], double l3, double Pne[3]) {
 8002660:	b580      	push	{r7, lr}
 8002662:	ed2d 8b08 	vpush	{d8-d11}
 8002666:	b094      	sub	sp, #80	; 0x50
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	ed87 0b00 	vstr	d0, [r7]
 8002670:	60b9      	str	r1, [r7, #8]
	double e_Pne_tmp;
	double f_Pne_tmp;
	double g_Pne_tmp;
	double h_Pne_tmp;
	/* offset */
	Pne_tmp = cos(q[0]);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	ed93 7b00 	vldr	d7, [r3]
 8002678:	eeb0 0b47 	vmov.f64	d0, d7
 800267c:	f013 fc50 	bl	8015f20 <cos>
 8002680:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	b_Pne_tmp = sin(q[2]);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3310      	adds	r3, #16
 8002688:	ed93 7b00 	vldr	d7, [r3]
 800268c:	eeb0 0b47 	vmov.f64	d0, d7
 8002690:	f013 fc92 	bl	8015fb8 <sin>
 8002694:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	c_Pne_tmp = cos(q[2]);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3310      	adds	r3, #16
 800269c:	ed93 7b00 	vldr	d7, [r3]
 80026a0:	eeb0 0b47 	vmov.f64	d0, d7
 80026a4:	f013 fc3c 	bl	8015f20 <cos>
 80026a8:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	d_Pne_tmp = sin(q[1]);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	3308      	adds	r3, #8
 80026b0:	ed93 7b00 	vldr	d7, [r3]
 80026b4:	eeb0 0b47 	vmov.f64	d0, d7
 80026b8:	f013 fc7e 	bl	8015fb8 <sin>
 80026bc:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	e_Pne_tmp = cos(q[1]);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3308      	adds	r3, #8
 80026c4:	ed93 7b00 	vldr	d7, [r3]
 80026c8:	eeb0 0b47 	vmov.f64	d0, d7
 80026cc:	f013 fc28 	bl	8015f20 <cos>
 80026d0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	f_Pne_tmp = sin(q[0]);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	ed93 7b00 	vldr	d7, [r3]
 80026da:	eeb0 0b47 	vmov.f64	d0, d7
 80026de:	f013 fc6b 	bl	8015fb8 <sin>
 80026e2:	ed87 0b08 	vstr	d0, [r7, #32]
	g_Pne_tmp = cos(q[3]);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3318      	adds	r3, #24
 80026ea:	ed93 7b00 	vldr	d7, [r3]
 80026ee:	eeb0 0b47 	vmov.f64	d0, d7
 80026f2:	f013 fc15 	bl	8015f20 <cos>
 80026f6:	ed87 0b06 	vstr	d0, [r7, #24]
	h_Pne_tmp = sin(q[3]);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3318      	adds	r3, #24
 80026fe:	ed93 7b00 	vldr	d7, [r3]
 8002702:	eeb0 0b47 	vmov.f64	d0, d7
 8002706:	f013 fc57 	bl	8015fb8 <sin>
 800270a:	ed87 0b04 	vstr	d0, [r7, #16]
	Pne[0] =
			((380.0
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 800270e:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8002712:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002716:	ee26 6b07 	vmul.f64	d6, d6, d7
 800271a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800271e:	ee26 6b07 	vmul.f64	d6, d6, d7
							- Pne_tmp * d_Pne_tmp * b_Pne_tmp)
 8002722:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 8002726:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800272a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800272e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002732:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002736:	ee36 7b47 	vsub.f64	d7, d6, d7
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 800273a:	ed9f 6bdb 	vldr	d6, [pc, #876]	; 8002aa8 <FPK+0x448>
 800273e:	ee27 8b06 	vmul.f64	d8, d7, d6
					+ l3
							* (g_Pne_tmp
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	ed93 7b00 	vldr	d7, [r3]
 8002748:	eeb0 0b47 	vmov.f64	d0, d7
 800274c:	f013 fbe8 	bl	8015f20 <cos>
 8002750:	eeb0 9b40 	vmov.f64	d9, d0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3308      	adds	r3, #8
 8002758:	ed93 7b00 	vldr	d7, [r3]
 800275c:	eeb0 0b47 	vmov.f64	d0, d7
 8002760:	f013 fbde 	bl	8015f20 <cos>
 8002764:	eeb0 7b40 	vmov.f64	d7, d0
 8002768:	ee29 6b07 	vmul.f64	d6, d9, d7
 800276c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002770:	ee26 6b07 	vmul.f64	d6, d6, d7
											+ Pne_tmp * c_Pne_tmp * d_Pne_tmp)
 8002774:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 8002778:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800277c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002780:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002784:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002788:	ee36 6b07 	vadd.f64	d6, d6, d7
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 800278c:	ed97 7b06 	vldr	d7, [r7, #24]
 8002790:	ee26 9b07 	vmul.f64	d9, d6, d7
									+ h_Pne_tmp
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	ed93 7b00 	vldr	d7, [r3]
 800279a:	eeb0 0b47 	vmov.f64	d0, d7
 800279e:	f013 fbbf 	bl	8015f20 <cos>
 80027a2:	eeb0 ab40 	vmov.f64	d10, d0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3308      	adds	r3, #8
 80027aa:	ed93 7b00 	vldr	d7, [r3]
 80027ae:	eeb0 0b47 	vmov.f64	d0, d7
 80027b2:	f013 fbb5 	bl	8015f20 <cos>
 80027b6:	eeb0 7b40 	vmov.f64	d7, d0
 80027ba:	ee2a ab07 	vmul.f64	d10, d10, d7
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3310      	adds	r3, #16
 80027c2:	ed93 7b00 	vldr	d7, [r3]
 80027c6:	eeb0 0b47 	vmov.f64	d0, d7
 80027ca:	f013 fba9 	bl	8015f20 <cos>
 80027ce:	eeb0 7b40 	vmov.f64	d7, d0
 80027d2:	ee2a ab07 	vmul.f64	d10, d10, d7
													- cos(q[0]) * sin(q[1])
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	ed93 7b00 	vldr	d7, [r3]
 80027dc:	eeb0 0b47 	vmov.f64	d0, d7
 80027e0:	f013 fb9e 	bl	8015f20 <cos>
 80027e4:	eeb0 bb40 	vmov.f64	d11, d0
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3308      	adds	r3, #8
 80027ec:	ed93 7b00 	vldr	d7, [r3]
 80027f0:	eeb0 0b47 	vmov.f64	d0, d7
 80027f4:	f013 fbe0 	bl	8015fb8 <sin>
 80027f8:	eeb0 7b40 	vmov.f64	d7, d0
 80027fc:	ee2b bb07 	vmul.f64	d11, d11, d7
															* sin(q[2]))))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3310      	adds	r3, #16
 8002804:	ed93 7b00 	vldr	d7, [r3]
 8002808:	eeb0 0b47 	vmov.f64	d0, d7
 800280c:	f013 fbd4 	bl	8015fb8 <sin>
 8002810:	eeb0 7b40 	vmov.f64	d7, d0
 8002814:	ee2b 7b07 	vmul.f64	d7, d11, d7
													- cos(q[0]) * sin(q[1])
 8002818:	ee3a 6b47 	vsub.f64	d6, d10, d7
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 800281c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002820:	ee26 7b07 	vmul.f64	d7, d6, d7
									+ h_Pne_tmp
 8002824:	ee39 6b07 	vadd.f64	d6, d9, d7
							* (g_Pne_tmp
 8002828:	ed97 7b00 	vldr	d7, [r7]
 800282c:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ l3
 8002830:	ee38 6b07 	vadd.f64	d6, d8, d7
					+ 20.0 * Pne_tmp) - 380.0 * Pne_tmp * d_Pne_tmp;
 8002834:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002838:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 800283c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002840:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002844:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002848:	ed9f 5b97 	vldr	d5, [pc, #604]	; 8002aa8 <FPK+0x448>
 800284c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002850:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002854:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002858:	ee36 7b47 	vsub.f64	d7, d6, d7
	Pne[0] =
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	ed83 7b00 	vstr	d7, [r3]
	Pne[1] = ((l3
			* (g_Pne_tmp
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 8002862:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002866:	ed97 7b08 	vldr	d7, [r7, #32]
 800286a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800286e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002872:	ee26 6b07 	vmul.f64	d6, d6, d7
							+ c_Pne_tmp * f_Pne_tmp * d_Pne_tmp)
 8002876:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 800287a:	ed97 7b08 	vldr	d7, [r7, #32]
 800287e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002882:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002886:	ee25 7b07 	vmul.f64	d7, d5, d7
 800288a:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 800288e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002892:	ee26 6b07 	vmul.f64	d6, d6, d7
					- h_Pne_tmp
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 8002896:	ed97 5b08 	vldr	d5, [r7, #32]
 800289a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800289e:	ee25 5b07 	vmul.f64	d5, d5, d7
 80028a2:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80028a6:	ee25 5b07 	vmul.f64	d5, d5, d7
									- e_Pne_tmp * c_Pne_tmp * f_Pne_tmp))
 80028aa:	ed97 4b0a 	vldr	d4, [r7, #40]	; 0x28
 80028ae:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80028b2:	ee24 4b07 	vmul.f64	d4, d4, d7
 80028b6:	ed97 7b08 	vldr	d7, [r7, #32]
 80028ba:	ee24 7b07 	vmul.f64	d7, d4, d7
 80028be:	ee35 5b47 	vsub.f64	d5, d5, d7
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 80028c2:	ed97 7b04 	vldr	d7, [r7, #16]
 80028c6:	ee25 7b07 	vmul.f64	d7, d5, d7
					- h_Pne_tmp
 80028ca:	ee36 6b47 	vsub.f64	d6, d6, d7
			* (g_Pne_tmp
 80028ce:	ed97 7b00 	vldr	d7, [r7]
 80028d2:	ee26 8b07 	vmul.f64	d8, d6, d7
			- 380.0
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	ed93 7b00 	vldr	d7, [r3]
 80028dc:	eeb0 0b47 	vmov.f64	d0, d7
 80028e0:	f013 fb6a 	bl	8015fb8 <sin>
 80028e4:	eeb0 9b40 	vmov.f64	d9, d0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3308      	adds	r3, #8
 80028ec:	ed93 7b00 	vldr	d7, [r3]
 80028f0:	eeb0 0b47 	vmov.f64	d0, d7
 80028f4:	f013 fb60 	bl	8015fb8 <sin>
 80028f8:	eeb0 7b40 	vmov.f64	d7, d0
 80028fc:	ee29 9b07 	vmul.f64	d9, d9, d7
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3310      	adds	r3, #16
 8002904:	ed93 7b00 	vldr	d7, [r3]
 8002908:	eeb0 0b47 	vmov.f64	d0, d7
 800290c:	f013 fb54 	bl	8015fb8 <sin>
 8002910:	eeb0 7b40 	vmov.f64	d7, d0
 8002914:	ee29 9b07 	vmul.f64	d9, d9, d7
							- cos(q[1]) * cos(q[2]) * sin(q[0])))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3308      	adds	r3, #8
 800291c:	ed93 7b00 	vldr	d7, [r3]
 8002920:	eeb0 0b47 	vmov.f64	d0, d7
 8002924:	f013 fafc 	bl	8015f20 <cos>
 8002928:	eeb0 ab40 	vmov.f64	d10, d0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3310      	adds	r3, #16
 8002930:	ed93 7b00 	vldr	d7, [r3]
 8002934:	eeb0 0b47 	vmov.f64	d0, d7
 8002938:	f013 faf2 	bl	8015f20 <cos>
 800293c:	eeb0 7b40 	vmov.f64	d7, d0
 8002940:	ee2a ab07 	vmul.f64	d10, d10, d7
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	ed93 7b00 	vldr	d7, [r3]
 800294a:	eeb0 0b47 	vmov.f64	d0, d7
 800294e:	f013 fb33 	bl	8015fb8 <sin>
 8002952:	eeb0 7b40 	vmov.f64	d7, d0
 8002956:	ee2a 7b07 	vmul.f64	d7, d10, d7
 800295a:	ee39 7b47 	vsub.f64	d7, d9, d7
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 800295e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8002aa8 <FPK+0x448>
 8002962:	ee27 7b06 	vmul.f64	d7, d7, d6
			- 380.0
 8002966:	ee38 6b47 	vsub.f64	d6, d8, d7
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 800296a:	ed97 7b08 	vldr	d7, [r7, #32]
 800296e:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8002972:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002976:	ee36 6b07 	vadd.f64	d6, d6, d7
 800297a:	ed97 7b08 	vldr	d7, [r7, #32]
 800297e:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8002aa8 <FPK+0x448>
 8002982:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002986:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800298a:	ee25 7b07 	vmul.f64	d7, d5, d7
	Pne[1] = ((l3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	3308      	adds	r3, #8
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 8002992:	ee36 7b47 	vsub.f64	d7, d6, d7
	Pne[1] = ((l3
 8002996:	ed83 7b00 	vstr	d7, [r3]
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 800299a:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 800299e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80029a2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80029a6:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 80029aa:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80029ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 80029b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80029b6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002aa8 <FPK+0x448>
 80029ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029be:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002ab0 <FPK+0x450>
 80029c2:	ee37 6b06 	vadd.f64	d6, d7, d6
			+ 380.0 * e_Pne_tmp)
 80029c6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80029ca:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8002aa8 <FPK+0x448>
 80029ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 80029d2:	ee36 8b07 	vadd.f64	d8, d6, d7
			- l3
					* (g_Pne_tmp
							* (cos(q[1]) * cos(q[2]) - d_Pne_tmp * b_Pne_tmp)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3308      	adds	r3, #8
 80029da:	ed93 7b00 	vldr	d7, [r3]
 80029de:	eeb0 0b47 	vmov.f64	d0, d7
 80029e2:	f013 fa9d 	bl	8015f20 <cos>
 80029e6:	eeb0 9b40 	vmov.f64	d9, d0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3310      	adds	r3, #16
 80029ee:	ed93 7b00 	vldr	d7, [r3]
 80029f2:	eeb0 0b47 	vmov.f64	d0, d7
 80029f6:	f013 fa93 	bl	8015f20 <cos>
 80029fa:	eeb0 7b40 	vmov.f64	d7, d0
 80029fe:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002a02:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8002a06:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002a0a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002a0e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002a12:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a16:	ee26 9b07 	vmul.f64	d9, d6, d7
							- h_Pne_tmp
									* (cos(q[1]) * sin(q[2])
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	ed93 7b00 	vldr	d7, [r3]
 8002a22:	eeb0 0b47 	vmov.f64	d0, d7
 8002a26:	f013 fa7b 	bl	8015f20 <cos>
 8002a2a:	eeb0 ab40 	vmov.f64	d10, d0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3310      	adds	r3, #16
 8002a32:	ed93 7b00 	vldr	d7, [r3]
 8002a36:	eeb0 0b47 	vmov.f64	d0, d7
 8002a3a:	f013 fabd 	bl	8015fb8 <sin>
 8002a3e:	eeb0 7b40 	vmov.f64	d7, d0
 8002a42:	ee2a ab07 	vmul.f64	d10, d10, d7
											+ cos(q[2]) * sin(q[1])));
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3310      	adds	r3, #16
 8002a4a:	ed93 7b00 	vldr	d7, [r3]
 8002a4e:	eeb0 0b47 	vmov.f64	d0, d7
 8002a52:	f013 fa65 	bl	8015f20 <cos>
 8002a56:	eeb0 bb40 	vmov.f64	d11, d0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3308      	adds	r3, #8
 8002a5e:	ed93 7b00 	vldr	d7, [r3]
 8002a62:	eeb0 0b47 	vmov.f64	d0, d7
 8002a66:	f013 faa7 	bl	8015fb8 <sin>
 8002a6a:	eeb0 7b40 	vmov.f64	d7, d0
 8002a6e:	ee2b 7b07 	vmul.f64	d7, d11, d7
 8002a72:	ee3a 6b07 	vadd.f64	d6, d10, d7
									* (cos(q[1]) * sin(q[2])
 8002a76:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a7a:	ee26 7b07 	vmul.f64	d7, d6, d7
							- h_Pne_tmp
 8002a7e:	ee39 6b47 	vsub.f64	d6, d9, d7
					* (g_Pne_tmp
 8002a82:	ed97 7b00 	vldr	d7, [r7]
 8002a86:	ee26 7b07 	vmul.f64	d7, d6, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	3310      	adds	r3, #16
			- l3
 8002a8e:	ee38 7b47 	vsub.f64	d7, d8, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002a92:	ed83 7b00 	vstr	d7, [r3]
}
 8002a96:	bf00      	nop
 8002a98:	3750      	adds	r7, #80	; 0x50
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	ecbd 8b08 	vpop	{d8-d11}
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	00000000 	.word	0x00000000
 8002aac:	4077c000 	.word	0x4077c000
 8002ab0:	70a3d70a 	.word	0x70a3d70a
 8002ab4:	40727e3d 	.word	0x40727e3d

08002ab8 <ChessPose>:
	twist_tmp = l3 * sin((q[1] + q[2]) + q[3]);
	twist[2] = (qd[1] * ((twist_tmp_tmp - twist_tmp_tmp_tmp) + twist_tmp)
			+ qd[2] * (twist_tmp_tmp + twist_tmp)) + g_twist_tmp * d_twist_tmp;
}

void ChessPose(uint8_t Chess_Index, double Chess_Theta, double ChessPosition[2]) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b096      	sub	sp, #88	; 0x58
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	ed87 0b00 	vstr	d0, [r7]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	73fb      	strb	r3, [r7, #15]
	/*
	 *
	 */
	uint8_t X = (Chess_Index%8) + 1;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t N = (Chess_Index/8) + 1;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	08db      	lsrs	r3, r3, #3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	double l = 250;
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <ChessPose+0x144>)
 8002ae8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double L = 400;
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	4b43      	ldr	r3, [pc, #268]	; (8002c00 <ChessPose+0x148>)
 8002af2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double YOffset = 10;
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	4b42      	ldr	r3, [pc, #264]	; (8002c04 <ChessPose+0x14c>)
 8002afc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double b_positionx_tmp;
	double c_positionx_tmp;
	double d_positionx_tmp;
	double e_positionx_tmp;
	double positionx_tmp;
	positionx_tmp = cos(Chess_Theta);
 8002b00:	ed97 0b00 	vldr	d0, [r7]
 8002b04:	f013 fa0c 	bl	8015f20 <cos>
 8002b08:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	b_positionx_tmp = sin(Chess_Theta);
 8002b0c:	ed97 0b00 	vldr	d0, [r7]
 8002b10:	f013 fa52 	bl	8015fb8 <sin>
 8002b14:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	c_positionx_tmp = 9.0 * L / 16.0;
 8002b18:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002b1c:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002b20:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002b24:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8002b28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b2c:	ed87 7b08 	vstr	d7, [r7, #32]
	d_positionx_tmp = X * L / 8.0 - c_positionx_tmp;
 8002b30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002b3c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002b40:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b44:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8002b48:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b4c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002b50:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b54:	ed87 7b06 	vstr	d7, [r7, #24]
	e_positionx_tmp = N * L / 8.0;
 8002b58:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002b64:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002b68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b6c:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8002b70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b74:	ed87 7b04 	vstr	d7, [r7, #16]
	ChessPosition[0] = ((b_positionx_tmp * d_positionx_tmp
 8002b78:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002b7c:	ed97 7b06 	vldr	d7, [r7, #24]
 8002b80:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ (e_positionx_tmp - c_positionx_tmp * positionx_tmp)) + l)
 8002b84:	ed97 5b08 	vldr	d5, [r7, #32]
 8002b88:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002b8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b90:	ed97 5b04 	vldr	d5, [r7, #16]
 8002b94:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002b98:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b9c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002ba0:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ L / 2.0;
 8002ba4:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
 8002ba8:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8002bac:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002bb0:	ee36 7b07 	vadd.f64	d7, d6, d7
	ChessPosition[0] = ((b_positionx_tmp * d_positionx_tmp
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	ed83 7b00 	vstr	d7, [r3]
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002bba:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002bbe:	eeb1 6b47 	vneg.f64	d6, d7
 8002bc2:	ed97 7b06 	vldr	d7, [r7, #24]
 8002bc6:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ (e_positionx_tmp - c_positionx_tmp) * b_positionx_tmp) + YOffset;
 8002bca:	ed97 5b04 	vldr	d5, [r7, #16]
 8002bce:	ed97 7b08 	vldr	d7, [r7, #32]
 8002bd2:	ee35 5b47 	vsub.f64	d5, d5, d7
 8002bd6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002bda:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002bde:	ee36 6b07 	vadd.f64	d6, d6, d7
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	3308      	adds	r3, #8
			+ (e_positionx_tmp - c_positionx_tmp) * b_positionx_tmp) + YOffset;
 8002be6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002bea:	ee36 7b07 	vadd.f64	d7, d6, d7
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002bee:	ed83 7b00 	vstr	d7, [r3]
}
 8002bf2:	bf00      	nop
 8002bf4:	3758      	adds	r7, #88	; 0x58
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	406f4000 	.word	0x406f4000
 8002c00:	40790000 	.word	0x40790000
 8002c04:	40240000 	.word	0x40240000

08002c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b096      	sub	sp, #88	; 0x58
 8002c0c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c0e:	f004 f935 	bl	8006e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c12:	f000 fb67 	bl	80032e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002c16:	f000 fbdd 	bl	80033d4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c1a:	f7fe ff2f 	bl	8001a7c <MX_GPIO_Init>
  MX_DMA_Init();
 8002c1e:	f7fe fefd 	bl	8001a1c <MX_DMA_Init>
  MX_ADC3_Init();
 8002c22:	f7fd ffc5 	bl	8000bb0 <MX_ADC3_Init>
  MX_TIM1_Init();
 8002c26:	f002 fdad 	bl	8005784 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002c2a:	f002 fe8f 	bl	800594c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002c2e:	f002 ff13 	bl	8005a58 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002c32:	f002 ff67 	bl	8005b04 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002c36:	f003 f821 	bl	8005c7c <MX_TIM8_Init>
  MX_TIM13_Init();
 8002c3a:	f003 f879 	bl	8005d30 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002c3e:	f003 f8c7 	bl	8005dd0 <MX_TIM14_Init>
  MX_TIM15_Init();
 8002c42:	f003 f915 	bl	8005e70 <MX_TIM15_Init>
  MX_TIM16_Init();
 8002c46:	f003 f99b 	bl	8005f80 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002c4a:	f003 fa15 	bl	8006078 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002c4e:	f003 ff21 	bl	8006a94 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002c52:	f003 ff6d 	bl	8006b30 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8002c56:	f002 fb21 	bl	800529c <MX_SPI3_Init>
  MX_SPI4_Init();
 8002c5a:	f002 fb77 	bl	800534c <MX_SPI4_Init>
  MX_I2C2_Init();
 8002c5e:	f7ff f847 	bl	8001cf0 <MX_I2C2_Init>
  MX_CRC_Init();
 8002c62:	f7fe fe8d 	bl	8001980 <MX_CRC_Init>
  MX_TIM24_Init();
 8002c66:	f003 fad3 	bl	8006210 <MX_TIM24_Init>
  MX_TIM23_Init();
 8002c6a:	f003 fa81 	bl	8006170 <MX_TIM23_Init>
  MX_TIM6_Init();
 8002c6e:	f002 ffcd 	bl	8005c0c <MX_TIM6_Init>
  MX_UART5_Init();
 8002c72:	f003 febd 	bl	80069f0 <MX_UART5_Init>
  MX_ADC1_Init();
 8002c76:	f7fd febf 	bl	80009f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002c7a:	f7fd ff39 	bl	8000af0 <MX_ADC2_Init>
  MX_TIM2_Init();
 8002c7e:	f002 fe11 	bl	80058a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	MX_DMA_Init();
 8002c82:	f7fe fecb 	bl	8001a1c <MX_DMA_Init>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);	// LVDS EN
 8002c86:	2201      	movs	r2, #1
 8002c88:	2140      	movs	r1, #64	; 0x40
 8002c8a:	48c9      	ldr	r0, [pc, #804]	; (8002fb0 <main+0x3a8>)
 8002c8c:	f009 f9e2 	bl	800c054 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);	// Level Shifter EN
 8002c90:	2201      	movs	r2, #1
 8002c92:	2140      	movs	r1, #64	; 0x40
 8002c94:	48c7      	ldr	r0, [pc, #796]	; (8002fb4 <main+0x3ac>)
 8002c96:	f009 f9dd 	bl	800c054 <HAL_GPIO_WritePin>

	Temp_Calibration = (110.0 - 30.0)	/ (*(unsigned short*) (0x1FF1E840) - *(unsigned short*) (0x1FF1E820));
 8002c9a:	4bc7      	ldr	r3, [pc, #796]	; (8002fb8 <main+0x3b0>)
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4bc6      	ldr	r3, [pc, #792]	; (8002fbc <main+0x3b4>)
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002cae:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 8002f48 <main+0x340>
 8002cb2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002cb6:	4bc2      	ldr	r3, [pc, #776]	; (8002fc0 <main+0x3b8>)
 8002cb8:	ed83 7b00 	vstr	d7, [r3]
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002cbc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	48c0      	ldr	r0, [pc, #768]	; (8002fc4 <main+0x3bc>)
 8002cc4:	f006 f966 	bl	8008f94 <HAL_ADCEx_Calibration_Start>

	/*			   Encoder				*/
	AS5047U_init(&Encoder[0], &hspi3, GPIOD, &hcrc, GPIO_PIN_0,6500);
 8002cc8:	2301      	movs	r3, #1
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8002f50 <main+0x348>
 8002cd0:	4bbd      	ldr	r3, [pc, #756]	; (8002fc8 <main+0x3c0>)
 8002cd2:	4ab7      	ldr	r2, [pc, #732]	; (8002fb0 <main+0x3a8>)
 8002cd4:	49bd      	ldr	r1, [pc, #756]	; (8002fcc <main+0x3c4>)
 8002cd6:	48be      	ldr	r0, [pc, #760]	; (8002fd0 <main+0x3c8>)
 8002cd8:	f7fd fcc2 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[1], &hspi3, GPIOD, &hcrc, GPIO_PIN_1,10100);
 8002cdc:	2302      	movs	r3, #2
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	ed9f 0b9d 	vldr	d0, [pc, #628]	; 8002f58 <main+0x350>
 8002ce4:	4bb8      	ldr	r3, [pc, #736]	; (8002fc8 <main+0x3c0>)
 8002ce6:	4ab2      	ldr	r2, [pc, #712]	; (8002fb0 <main+0x3a8>)
 8002ce8:	49b8      	ldr	r1, [pc, #736]	; (8002fcc <main+0x3c4>)
 8002cea:	48ba      	ldr	r0, [pc, #744]	; (8002fd4 <main+0x3cc>)
 8002cec:	f7fd fcb8 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[2], &hspi3, GPIOD, &hcrc, GPIO_PIN_2,3165);
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 8002f60 <main+0x358>
 8002cf8:	4bb3      	ldr	r3, [pc, #716]	; (8002fc8 <main+0x3c0>)
 8002cfa:	4aad      	ldr	r2, [pc, #692]	; (8002fb0 <main+0x3a8>)
 8002cfc:	49b3      	ldr	r1, [pc, #716]	; (8002fcc <main+0x3c4>)
 8002cfe:	48b6      	ldr	r0, [pc, #728]	; (8002fd8 <main+0x3d0>)
 8002d00:	f7fd fcae 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[3], &hspi3, GPIOD, &hcrc, GPIO_PIN_3,6970);
 8002d04:	2308      	movs	r3, #8
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	ed9f 0b97 	vldr	d0, [pc, #604]	; 8002f68 <main+0x360>
 8002d0c:	4bae      	ldr	r3, [pc, #696]	; (8002fc8 <main+0x3c0>)
 8002d0e:	4aa8      	ldr	r2, [pc, #672]	; (8002fb0 <main+0x3a8>)
 8002d10:	49ae      	ldr	r1, [pc, #696]	; (8002fcc <main+0x3c4>)
 8002d12:	48b2      	ldr	r0, [pc, #712]	; (8002fdc <main+0x3d4>)
 8002d14:	f7fd fca4 	bl	8000660 <AS5047U_init>

	HAL_Delay(50);
 8002d18:	2032      	movs	r0, #50	; 0x32
 8002d1a:	f004 f941 	bl	8006fa0 <HAL_Delay>

	/* Encoder ABI Res Setting */
	AS5047U_Write(&Encoder[0], 0x001A, 0b01000000);
 8002d1e:	2240      	movs	r2, #64	; 0x40
 8002d20:	211a      	movs	r1, #26
 8002d22:	48ab      	ldr	r0, [pc, #684]	; (8002fd0 <main+0x3c8>)
 8002d24:	f7fd fce8 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[1], 0x001A, 0b01000000);
 8002d28:	2240      	movs	r2, #64	; 0x40
 8002d2a:	211a      	movs	r1, #26
 8002d2c:	48a9      	ldr	r0, [pc, #676]	; (8002fd4 <main+0x3cc>)
 8002d2e:	f7fd fce3 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[2], 0x001A, 0b01000000);
 8002d32:	2240      	movs	r2, #64	; 0x40
 8002d34:	211a      	movs	r1, #26
 8002d36:	48a8      	ldr	r0, [pc, #672]	; (8002fd8 <main+0x3d0>)
 8002d38:	f7fd fcde 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[3], 0x001A, 0b01000000);
 8002d3c:	2240      	movs	r2, #64	; 0x40
 8002d3e:	211a      	movs	r1, #26
 8002d40:	48a6      	ldr	r0, [pc, #664]	; (8002fdc <main+0x3d4>)
 8002d42:	f7fd fcd9 	bl	80006f8 <AS5047U_Write>

	/* Chess Board Encoder */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002d46:	213c      	movs	r1, #60	; 0x3c
 8002d48:	48a5      	ldr	r0, [pc, #660]	; (8002fe0 <main+0x3d8>)
 8002d4a:	f00f f925 	bl	8011f98 <HAL_TIM_Encoder_Start>

	/*			Kalman Filter			*/
	Kalman_init(&Kalman[0], 5000, 0.001);
 8002d4e:	ed9f 1b88 	vldr	d1, [pc, #544]	; 8002f70 <main+0x368>
 8002d52:	ed9f 0b89 	vldr	d0, [pc, #548]	; 8002f78 <main+0x370>
 8002d56:	48a3      	ldr	r0, [pc, #652]	; (8002fe4 <main+0x3dc>)
 8002d58:	f7fe fac2 	bl	80012e0 <Kalman_init>
	Kalman_init(&Kalman[1], 5000, 0.001);
 8002d5c:	ed9f 1b84 	vldr	d1, [pc, #528]	; 8002f70 <main+0x368>
 8002d60:	ed9f 0b85 	vldr	d0, [pc, #532]	; 8002f78 <main+0x370>
 8002d64:	48a0      	ldr	r0, [pc, #640]	; (8002fe8 <main+0x3e0>)
 8002d66:	f7fe fabb 	bl	80012e0 <Kalman_init>
	Kalman_init(&Kalman[2], 5000, 0.001);
 8002d6a:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8002f70 <main+0x368>
 8002d6e:	ed9f 0b82 	vldr	d0, [pc, #520]	; 8002f78 <main+0x370>
 8002d72:	489e      	ldr	r0, [pc, #632]	; (8002fec <main+0x3e4>)
 8002d74:	f7fe fab4 	bl	80012e0 <Kalman_init>
	Kalman_init(&Kalman[3], 5000, 0.001);
 8002d78:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8002f70 <main+0x368>
 8002d7c:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 8002f78 <main+0x370>
 8002d80:	489b      	ldr	r0, [pc, #620]	; (8002ff0 <main+0x3e8>)
 8002d82:	f7fe faad 	bl	80012e0 <Kalman_init>
	Kalman_init(&Kalman[5], 5000, 0.001);
 8002d86:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8002f70 <main+0x368>
 8002d8a:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 8002f78 <main+0x370>
 8002d8e:	4899      	ldr	r0, [pc, #612]	; (8002ff4 <main+0x3ec>)
 8002d90:	f7fe faa6 	bl	80012e0 <Kalman_init>
//	CascadeControl_init(&Control[0], 0.6, 0, 0, 15, 0.5, 10, 400);
//	CascadeControl_init(&Control[1], 0.7, 0, 0.3, 10, 0, 10, 410);
//	CascadeControl_init(&Control[2], 0.82, 0, 0.2, 10, 0, 30, 400);
//	CascadeControl_init(&Control[3], 0.7, 0.001, 0, 9, 0.1, 3, 500);

	CascadeControl_init(&Control[0], 0.75, 0, 0, 15, 0.5, 10, 400);
 8002d94:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002f80 <main+0x378>
 8002d98:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002d9c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8002da0:	eeb2 3b0e 	vmov.f64	d3, #46	; 0x41700000  15.0
 8002da4:	ed9f 2b78 	vldr	d2, [pc, #480]	; 8002f88 <main+0x380>
 8002da8:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8002f88 <main+0x380>
 8002dac:	eeb6 0b08 	vmov.f64	d0, #104	; 0x3f400000  0.750
 8002db0:	4891      	ldr	r0, [pc, #580]	; (8002ff8 <main+0x3f0>)
 8002db2:	f7fe fd48 	bl	8001846 <CascadeControl_init>
	CascadeControl_init(&Control[1], 0.5, 0, 0.5, 10, 0, 30, 410);
 8002db6:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8002f90 <main+0x388>
 8002dba:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8002dbe:	ed9f 4b72 	vldr	d4, [pc, #456]	; 8002f88 <main+0x380>
 8002dc2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002dc6:	eeb6 2b00 	vmov.f64	d2, #96	; 0x3f000000  0.5
 8002dca:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8002f88 <main+0x380>
 8002dce:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002dd2:	488a      	ldr	r0, [pc, #552]	; (8002ffc <main+0x3f4>)
 8002dd4:	f7fe fd37 	bl	8001846 <CascadeControl_init>
	CascadeControl_init(&Control[2], 0.5, 0, 0.3, 25, 0, 30, 800);
 8002dd8:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8002f98 <main+0x390>
 8002ddc:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8002de0:	ed9f 4b69 	vldr	d4, [pc, #420]	; 8002f88 <main+0x380>
 8002de4:	eeb3 3b09 	vmov.f64	d3, #57	; 0x41c80000  25.0
 8002de8:	ed9f 2b6d 	vldr	d2, [pc, #436]	; 8002fa0 <main+0x398>
 8002dec:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8002f88 <main+0x380>
 8002df0:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002df4:	4882      	ldr	r0, [pc, #520]	; (8003000 <main+0x3f8>)
 8002df6:	f7fe fd26 	bl	8001846 <CascadeControl_init>
	CascadeControl_init(&Control[3], 0.75, 0, 0.3, 9, 0, 3, 420);
 8002dfa:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8002fa8 <main+0x3a0>
 8002dfe:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002e02:	ed9f 4b61 	vldr	d4, [pc, #388]	; 8002f88 <main+0x380>
 8002e06:	eeb2 3b02 	vmov.f64	d3, #34	; 0x41100000  9.0
 8002e0a:	ed9f 2b65 	vldr	d2, [pc, #404]	; 8002fa0 <main+0x398>
 8002e0e:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8002f88 <main+0x380>
 8002e12:	eeb6 0b08 	vmov.f64	d0, #104	; 0x3f400000  0.750
 8002e16:	487b      	ldr	r0, [pc, #492]	; (8003004 <main+0x3fc>)
 8002e18:	f7fe fd15 	bl	8001846 <CascadeControl_init>

	/*  Power Supply Temperature Sensor */
//	TPM75_init(&TempSensor, &hi2c2, 0, 0, 1);
	Tmp75_Init(&hi2c2);
 8002e1c:	487a      	ldr	r0, [pc, #488]	; (8003008 <main+0x400>)
 8002e1e:	f7fd fd6b 	bl	80008f8 <Tmp75_Init>

	SetPoint_Position[0] = EncPulse2Rad_Read(&Encoder[0], 1);
 8002e22:	2101      	movs	r1, #1
 8002e24:	486a      	ldr	r0, [pc, #424]	; (8002fd0 <main+0x3c8>)
 8002e26:	f7fd fbf5 	bl	8000614 <EncPulse2Rad_Read>
 8002e2a:	eeb0 7b40 	vmov.f64	d7, d0
 8002e2e:	4b77      	ldr	r3, [pc, #476]	; (800300c <main+0x404>)
 8002e30:	ed83 7b00 	vstr	d7, [r3]
	SetPoint_Position[1] = EncPulse2Rad_Read(&Encoder[1], 0);
 8002e34:	2100      	movs	r1, #0
 8002e36:	4867      	ldr	r0, [pc, #412]	; (8002fd4 <main+0x3cc>)
 8002e38:	f7fd fbec 	bl	8000614 <EncPulse2Rad_Read>
 8002e3c:	eeb0 7b40 	vmov.f64	d7, d0
 8002e40:	4b72      	ldr	r3, [pc, #456]	; (800300c <main+0x404>)
 8002e42:	ed83 7b02 	vstr	d7, [r3, #8]
	SetPoint_Position[2] = EncPulse2Rad_Read(&Encoder[2], 0);
 8002e46:	2100      	movs	r1, #0
 8002e48:	4863      	ldr	r0, [pc, #396]	; (8002fd8 <main+0x3d0>)
 8002e4a:	f7fd fbe3 	bl	8000614 <EncPulse2Rad_Read>
 8002e4e:	eeb0 7b40 	vmov.f64	d7, d0
 8002e52:	4b6e      	ldr	r3, [pc, #440]	; (800300c <main+0x404>)
 8002e54:	ed83 7b04 	vstr	d7, [r3, #16]
	SetPoint_Position[3] = EncPulse2Rad_Read(&Encoder[3], 0);
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4860      	ldr	r0, [pc, #384]	; (8002fdc <main+0x3d4>)
 8002e5c:	f7fd fbda 	bl	8000614 <EncPulse2Rad_Read>
 8002e60:	eeb0 7b40 	vmov.f64	d7, d0
 8002e64:	4b69      	ldr	r3, [pc, #420]	; (800300c <main+0x404>)
 8002e66:	ed83 7b06 	vstr	d7, [r3, #24]
	SetPoint_Velocity[0] = 0;
 8002e6a:	4969      	ldr	r1, [pc, #420]	; (8003010 <main+0x408>)
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9c1 2300 	strd	r2, r3, [r1]
	SetPoint_Velocity[1] = 0;
 8002e78:	4965      	ldr	r1, [pc, #404]	; (8003010 <main+0x408>)
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9c1 2302 	strd	r2, r3, [r1, #8]
	SetPoint_Velocity[2] = 0;
 8002e86:	4962      	ldr	r1, [pc, #392]	; (8003010 <main+0x408>)
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9c1 2304 	strd	r2, r3, [r1, #16]
	SetPoint_Velocity[3] = 0;
 8002e94:	495e      	ldr	r1, [pc, #376]	; (8003010 <main+0x408>)
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	e9c1 2306 	strd	r2, r3, [r1, #24]

	/*			Stepper Driver			*/
	Step_Driver_init(&Stepper[0], &htim13, TIM_CHANNEL_1, GPIOE, GPIO_PIN_0, 500000, 1);
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	9302      	str	r3, [sp, #8]
 8002ea6:	4b5b      	ldr	r3, [pc, #364]	; (8003014 <main+0x40c>)
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	2301      	movs	r3, #1
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	4b41      	ldr	r3, [pc, #260]	; (8002fb4 <main+0x3ac>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	4959      	ldr	r1, [pc, #356]	; (8003018 <main+0x410>)
 8002eb4:	4859      	ldr	r0, [pc, #356]	; (800301c <main+0x414>)
 8002eb6:	f7fd ff99 	bl	8000dec <Step_Driver_init>
	Step_Driver_init(&Stepper[1], &htim14, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1, 500000, 0);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9302      	str	r3, [sp, #8]
 8002ebe:	4b55      	ldr	r3, [pc, #340]	; (8003014 <main+0x40c>)
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <main+0x3ac>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4955      	ldr	r1, [pc, #340]	; (8003020 <main+0x418>)
 8002ecc:	4855      	ldr	r0, [pc, #340]	; (8003024 <main+0x41c>)
 8002ece:	f7fd ff8d 	bl	8000dec <Step_Driver_init>
	Step_Driver_init(&Stepper[2], &htim15, TIM_CHANNEL_1, GPIOE, GPIO_PIN_2, 500000, 1);
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	9302      	str	r3, [sp, #8]
 8002ed6:	4b4f      	ldr	r3, [pc, #316]	; (8003014 <main+0x40c>)
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	2304      	movs	r3, #4
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <main+0x3ac>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	4951      	ldr	r1, [pc, #324]	; (8003028 <main+0x420>)
 8002ee4:	4851      	ldr	r0, [pc, #324]	; (800302c <main+0x424>)
 8002ee6:	f7fd ff81 	bl	8000dec <Step_Driver_init>
	Step_Driver_init(&Stepper[3], &htim16, TIM_CHANNEL_1, GPIOE, GPIO_PIN_3, 500000, 1);
 8002eea:	2301      	movs	r3, #1
 8002eec:	9302      	str	r3, [sp, #8]
 8002eee:	4b49      	ldr	r3, [pc, #292]	; (8003014 <main+0x40c>)
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <main+0x3ac>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	494d      	ldr	r1, [pc, #308]	; (8003030 <main+0x428>)
 8002efc:	484d      	ldr	r0, [pc, #308]	; (8003034 <main+0x42c>)
 8002efe:	f7fd ff75 	bl	8000dec <Step_Driver_init>

	/*         	  Servo             */
	Servo_init(&Servo[0], &htim3, TIM_CHANNEL_1);
 8002f02:	2200      	movs	r2, #0
 8002f04:	494c      	ldr	r1, [pc, #304]	; (8003038 <main+0x430>)
 8002f06:	484d      	ldr	r0, [pc, #308]	; (800303c <main+0x434>)
 8002f08:	f7fe f81b 	bl	8000f42 <Servo_init>
	Servo_init(&Servo[1], &htim3, TIM_CHANNEL_2);
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	494a      	ldr	r1, [pc, #296]	; (8003038 <main+0x430>)
 8002f10:	484b      	ldr	r0, [pc, #300]	; (8003040 <main+0x438>)
 8002f12:	f7fe f816 	bl	8000f42 <Servo_init>
	Servo_Drive(&Servo[0], 90);
 8002f16:	215a      	movs	r1, #90	; 0x5a
 8002f18:	4848      	ldr	r0, [pc, #288]	; (800303c <main+0x434>)
 8002f1a:	f7fe f867 	bl	8000fec <Servo_Drive>
	Servo_Drive(&Servo[1], 90);
 8002f1e:	215a      	movs	r1, #90	; 0x5a
 8002f20:	4847      	ldr	r0, [pc, #284]	; (8003040 <main+0x438>)
 8002f22:	f7fe f863 	bl	8000fec <Servo_Drive>

	/*			Trajectory			*/
	Test_traj_Val[0] = 0;
 8002f26:	4947      	ldr	r1, [pc, #284]	; (8003044 <main+0x43c>)
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9c1 2300 	strd	r2, r3, [r1]
	Test_traj_Val[1] = 0;
 8002f34:	4943      	ldr	r1, [pc, #268]	; (8003044 <main+0x43c>)
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002f42:	e081      	b.n	8003048 <main+0x440>
 8002f44:	f3af 8000 	nop.w
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	40540000 	.word	0x40540000
 8002f50:	00000000 	.word	0x00000000
 8002f54:	40b96400 	.word	0x40b96400
 8002f58:	00000000 	.word	0x00000000
 8002f5c:	40c3ba00 	.word	0x40c3ba00
 8002f60:	00000000 	.word	0x00000000
 8002f64:	40a8ba00 	.word	0x40a8ba00
 8002f68:	00000000 	.word	0x00000000
 8002f6c:	40bb3a00 	.word	0x40bb3a00
 8002f70:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f74:	3f50624d 	.word	0x3f50624d
 8002f78:	00000000 	.word	0x00000000
 8002f7c:	40b38800 	.word	0x40b38800
 8002f80:	00000000 	.word	0x00000000
 8002f84:	40790000 	.word	0x40790000
	...
 8002f94:	4079a000 	.word	0x4079a000
 8002f98:	00000000 	.word	0x00000000
 8002f9c:	40890000 	.word	0x40890000
 8002fa0:	33333333 	.word	0x33333333
 8002fa4:	3fd33333 	.word	0x3fd33333
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	407a4000 	.word	0x407a4000
 8002fb0:	58020c00 	.word	0x58020c00
 8002fb4:	58021000 	.word	0x58021000
 8002fb8:	1ff1e840 	.word	0x1ff1e840
 8002fbc:	1ff1e820 	.word	0x1ff1e820
 8002fc0:	200002c0 	.word	0x200002c0
 8002fc4:	200001d4 	.word	0x200001d4
 8002fc8:	20000248 	.word	0x20000248
 8002fcc:	20000c44 	.word	0x20000c44
 8002fd0:	200002c8 	.word	0x200002c8
 8002fd4:	200002f0 	.word	0x200002f0
 8002fd8:	20000318 	.word	0x20000318
 8002fdc:	20000340 	.word	0x20000340
 8002fe0:	20000da0 	.word	0x20000da0
 8002fe4:	20000368 	.word	0x20000368
 8002fe8:	200003a8 	.word	0x200003a8
 8002fec:	200003e8 	.word	0x200003e8
 8002ff0:	20000428 	.word	0x20000428
 8002ff4:	200004a8 	.word	0x200004a8
 8002ff8:	200004a8 	.word	0x200004a8
 8002ffc:	20000580 	.word	0x20000580
 8003000:	20000658 	.word	0x20000658
 8003004:	20000730 	.word	0x20000730
 8003008:	2000026c 	.word	0x2000026c
 800300c:	20000b80 	.word	0x20000b80
 8003010:	20000ba8 	.word	0x20000ba8
 8003014:	0007a120 	.word	0x0007a120
 8003018:	20000f68 	.word	0x20000f68
 800301c:	20000808 	.word	0x20000808
 8003020:	20000fb4 	.word	0x20000fb4
 8003024:	2000081c 	.word	0x2000081c
 8003028:	20001000 	.word	0x20001000
 800302c:	20000830 	.word	0x20000830
 8003030:	2000104c 	.word	0x2000104c
 8003034:	20000844 	.word	0x20000844
 8003038:	20000dec 	.word	0x20000dec
 800303c:	20000858 	.word	0x20000858
 8003040:	20000860 	.word	0x20000860
 8003044:	20000c08 	.word	0x20000c08
	Test_traj_Val[2] = 0;
 8003048:	498f      	ldr	r1, [pc, #572]	; (8003288 <main+0x680>)
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Test_traj_Val[3] = 0;
 8003056:	498c      	ldr	r1, [pc, #560]	; (8003288 <main+0x680>)
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Traj_Flag = 0;
 8003064:	4b89      	ldr	r3, [pc, #548]	; (800328c <main+0x684>)
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
	t = 0;
 800306a:	4989      	ldr	r1, [pc, #548]	; (8003290 <main+0x688>)
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_TIM_Base_Start_IT(&htim23);   // Start Control Timer
 8003078:	4886      	ldr	r0, [pc, #536]	; (8003294 <main+0x68c>)
 800307a:	f00e fbf5 	bl	8011868 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 800307e:	220e      	movs	r2, #14
 8003080:	4985      	ldr	r1, [pc, #532]	; (8003298 <main+0x690>)
 8003082:	4886      	ldr	r0, [pc, #536]	; (800329c <main+0x694>)
 8003084:	f010 f9f2 	bl	801346c <HAL_UART_Receive_IT>

	ChessMoveStates = Chess_idle;
 8003088:	4b85      	ldr	r3, [pc, #532]	; (80032a0 <main+0x698>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN 3 */
//		Servo_Drive(&Servo[0], Servo_Griper[0]);
//		Servo_Drive(&Servo[1], Servo_Griper[1]);

		if (Test_traj) {
 800308e:	4b85      	ldr	r3, [pc, #532]	; (80032a4 <main+0x69c>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <main+0x4a4>
			Test_traj = 0;
 8003096:	4b83      	ldr	r3, [pc, #524]	; (80032a4 <main+0x69c>)
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
			JMoveTaskSpace(TaskSpace_Live_Ex1, Time_Live_Ex1);
 800309c:	4b82      	ldr	r3, [pc, #520]	; (80032a8 <main+0x6a0>)
 800309e:	ed93 7b00 	vldr	d7, [r3]
 80030a2:	eeb0 0b47 	vmov.f64	d0, d7
 80030a6:	4881      	ldr	r0, [pc, #516]	; (80032ac <main+0x6a4>)
 80030a8:	f001 fd32 	bl	8004b10 <JMoveTaskSpace>
		}
		if (Test_traj2) {
 80030ac:	4b80      	ldr	r3, [pc, #512]	; (80032b0 <main+0x6a8>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01f      	beq.n	80030f4 <main+0x4ec>
			Test_traj2 = 0;
 80030b4:	4b7e      	ldr	r3, [pc, #504]	; (80032b0 <main+0x6a8>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
			double TaskSpace_Live_Ex1_ChangeZ[3];
			TaskSpace_Live_Ex1_ChangeZ[0] = TaskSpace_Live_Ex1[0];
 80030ba:	4b7c      	ldr	r3, [pc, #496]	; (80032ac <main+0x6a4>)
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
			TaskSpace_Live_Ex1_ChangeZ[1] = TaskSpace_Live_Ex1[1];
 80030c4:	4b79      	ldr	r3, [pc, #484]	; (80032ac <main+0x6a4>)
 80030c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			TaskSpace_Live_Ex1_ChangeZ[2] = TaskSpace_Live_Ex1[2] - 100;
 80030ce:	4b77      	ldr	r3, [pc, #476]	; (80032ac <main+0x6a4>)
 80030d0:	ed93 7b04 	vldr	d7, [r3, #16]
 80030d4:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8003278 <main+0x670>
 80030d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80030dc:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
			JMoveTaskSpace(TaskSpace_Live_Ex1_ChangeZ, Time_Live_Ex1);
 80030e0:	4b71      	ldr	r3, [pc, #452]	; (80032a8 <main+0x6a0>)
 80030e2:	ed93 7b00 	vldr	d7, [r3]
 80030e6:	f107 0320 	add.w	r3, r7, #32
 80030ea:	eeb0 0b47 	vmov.f64	d0, d7
 80030ee:	4618      	mov	r0, r3
 80030f0:	f001 fd0e 	bl	8004b10 <JMoveTaskSpace>
		}

	   uint8_t tune_joint = 3;
 80030f4:	2303      	movs	r3, #3
 80030f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	   if (tune_PID[0] != tune_PID[1]){
 80030fa:	4b6e      	ldr	r3, [pc, #440]	; (80032b4 <main+0x6ac>)
 80030fc:	ed93 6b00 	vldr	d6, [r3]
 8003100:	4b6c      	ldr	r3, [pc, #432]	; (80032b4 <main+0x6ac>)
 8003102:	ed93 7b02 	vldr	d7, [r3, #8]
 8003106:	eeb4 6b47 	vcmp.f64	d6, d7
 800310a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310e:	d070      	beq.n	80031f2 <main+0x5ea>
		   	tune_PID[1] = tune_PID[0];
 8003110:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <main+0x6ac>)
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	4967      	ldr	r1, [pc, #412]	; (80032b4 <main+0x6ac>)
 8003118:	e9c1 2302 	strd	r2, r3, [r1, #8]
			t = 0;
 800311c:	495c      	ldr	r1, [pc, #368]	; (8003290 <main+0x688>)
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	e9c1 2300 	strd	r2, r3, [r1]
			double Joint[4] = {0,0,0,0};
 800312a:	463b      	mov	r3, r7
 800312c:	2220      	movs	r2, #32
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f012 feed 	bl	8015f10 <memset>
			for (int i = 0; i < 4; i++) {
 8003136:	2300      	movs	r3, #0
 8003138:	647b      	str	r3, [r7, #68]	; 0x44
 800313a:	e012      	b.n	8003162 <main+0x55a>
				Joint[i] = Control[i].PositionFeedback;
 800313c:	4a5e      	ldr	r2, [pc, #376]	; (80032b8 <main+0x6b0>)
 800313e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003140:	21d8      	movs	r1, #216	; 0xd8
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	3350      	adds	r3, #80	; 0x50
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003150:	00c9      	lsls	r1, r1, #3
 8003152:	3148      	adds	r1, #72	; 0x48
 8003154:	4439      	add	r1, r7
 8003156:	3948      	subs	r1, #72	; 0x48
 8003158:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < 4; i++) {
 800315c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800315e:	3301      	adds	r3, #1
 8003160:	647b      	str	r3, [r7, #68]	; 0x44
 8003162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003164:	2b03      	cmp	r3, #3
 8003166:	dde9      	ble.n	800313c <main+0x534>
			}
			Joint[tune_joint] = tune_PID[0];
 8003168:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800316c:	4b51      	ldr	r3, [pc, #324]	; (80032b4 <main+0x6ac>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	00c9      	lsls	r1, r1, #3
 8003174:	3148      	adds	r1, #72	; 0x48
 8003176:	4439      	add	r1, r7
 8003178:	3948      	subs	r1, #72	; 0x48
 800317a:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < 4; i++) {
 800317e:	2300      	movs	r3, #0
 8003180:	643b      	str	r3, [r7, #64]	; 0x40
 8003182:	e030      	b.n	80031e6 <main+0x5de>
				Traj_Coeff_Cal(&Traj[i], T_tune_PID, Joint[i], Control[i].PositionFeedback,0, Control[i].VelocityFeedback);
 8003184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4a4b      	ldr	r2, [pc, #300]	; (80032bc <main+0x6b4>)
 8003190:	441a      	add	r2, r3
 8003192:	4b4b      	ldr	r3, [pc, #300]	; (80032c0 <main+0x6b8>)
 8003194:	ed93 7b00 	vldr	d7, [r3]
 8003198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	3348      	adds	r3, #72	; 0x48
 800319e:	443b      	add	r3, r7
 80031a0:	3b48      	subs	r3, #72	; 0x48
 80031a2:	ed93 6b00 	vldr	d6, [r3]
 80031a6:	4944      	ldr	r1, [pc, #272]	; (80032b8 <main+0x6b0>)
 80031a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031aa:	20d8      	movs	r0, #216	; 0xd8
 80031ac:	fb00 f303 	mul.w	r3, r0, r3
 80031b0:	440b      	add	r3, r1
 80031b2:	3350      	adds	r3, #80	; 0x50
 80031b4:	ed93 5b00 	vldr	d5, [r3]
 80031b8:	493f      	ldr	r1, [pc, #252]	; (80032b8 <main+0x6b0>)
 80031ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031bc:	20d8      	movs	r0, #216	; 0xd8
 80031be:	fb00 f303 	mul.w	r3, r0, r3
 80031c2:	440b      	add	r3, r1
 80031c4:	33b8      	adds	r3, #184	; 0xb8
 80031c6:	ed93 4b00 	vldr	d4, [r3]
 80031ca:	ed9f 3b2d 	vldr	d3, [pc, #180]	; 8003280 <main+0x678>
 80031ce:	eeb0 2b45 	vmov.f64	d2, d5
 80031d2:	eeb0 1b46 	vmov.f64	d1, d6
 80031d6:	eeb0 0b47 	vmov.f64	d0, d7
 80031da:	4610      	mov	r0, r2
 80031dc:	f7fd ff60 	bl	80010a0 <Traj_Coeff_Cal>
			for (int i = 0; i < 4; i++) {
 80031e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e2:	3301      	adds	r3, #1
 80031e4:	643b      	str	r3, [r7, #64]	; 0x40
 80031e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	ddcb      	ble.n	8003184 <main+0x57c>
			}
			Traj_Flag = 0x0F;
 80031ec:	4b27      	ldr	r3, [pc, #156]	; (800328c <main+0x684>)
 80031ee:	220f      	movs	r2, #15
 80031f0:	701a      	strb	r2, [r3, #0]
	   }

		if (Contorl_Flag) {
 80031f2:	4b34      	ldr	r3, [pc, #208]	; (80032c4 <main+0x6bc>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d004      	beq.n	8003204 <main+0x5fc>
			Control_Function();
 80031fa:	f001 fa21 	bl	8004640 <Control_Function>
			Contorl_Flag = 0;    // Clear Control Flag
 80031fe:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <main+0x6bc>)
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
		}

		if (Protocol_Flag) {
 8003204:	4b30      	ldr	r3, [pc, #192]	; (80032c8 <main+0x6c0>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <main+0x60e>
			Narwhal_Protocol();
 800320c:	f000 f9c8 	bl	80035a0 <Narwhal_Protocol>
			Protocol_Flag = 0;
 8003210:	4b2d      	ldr	r3, [pc, #180]	; (80032c8 <main+0x6c0>)
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - Software_Timer_100ms >= 10) {
 8003216:	f003 feb7 	bl	8006f88 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <main+0x6c4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b09      	cmp	r3, #9
 8003224:	d910      	bls.n	8003248 <main+0x640>
			Software_Timer_100ms = HAL_GetTick();
 8003226:	f003 feaf 	bl	8006f88 <HAL_GetTick>
 800322a:	4603      	mov	r3, r0
 800322c:	4a27      	ldr	r2, [pc, #156]	; (80032cc <main+0x6c4>)
 800322e:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc3); 				//	read temperature sensor
 8003230:	4827      	ldr	r0, [pc, #156]	; (80032d0 <main+0x6c8>)
 8003232:	f004 fbb7 	bl	80079a4 <HAL_ADC_Start_IT>
			One_ShotTemp(&hi2c2);
 8003236:	4827      	ldr	r0, [pc, #156]	; (80032d4 <main+0x6cc>)
 8003238:	f7fd fba7 	bl	800098a <One_ShotTemp>
			Read_TempCelsius(&TPM75_Temp,&hi2c2);
 800323c:	4925      	ldr	r1, [pc, #148]	; (80032d4 <main+0x6cc>)
 800323e:	4826      	ldr	r0, [pc, #152]	; (80032d8 <main+0x6d0>)
 8003240:	f7fd fbb2 	bl	80009a8 <Read_TempCelsius>
			ChessMoveStateMachine();
 8003244:	f001 fe00 	bl	8004e48 <ChessMoveStateMachine>
		}

		if (HAL_GetTick() - Software_Timer_1s >= 1000) {		// 	Update System Status
 8003248:	f003 fe9e 	bl	8006f88 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	4b23      	ldr	r3, [pc, #140]	; (80032dc <main+0x6d4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003258:	f4ff af19 	bcc.w	800308e <main+0x486>
			Software_Timer_1s = HAL_GetTick();
 800325c:	f003 fe94 	bl	8006f88 <HAL_GetTick>
 8003260:	4603      	mov	r3, r0
 8003262:	4a1e      	ldr	r2, [pc, #120]	; (80032dc <main+0x6d4>)
 8003264:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED2_Pin);
 8003266:	f44f 7180 	mov.w	r1, #256	; 0x100
 800326a:	481d      	ldr	r0, [pc, #116]	; (80032e0 <main+0x6d8>)
 800326c:	f008 ff0b 	bl	800c086 <HAL_GPIO_TogglePin>
  {
 8003270:	e70d      	b.n	800308e <main+0x486>
 8003272:	bf00      	nop
 8003274:	f3af 8000 	nop.w
 8003278:	00000000 	.word	0x00000000
 800327c:	40590000 	.word	0x40590000
	...
 8003288:	20000c08 	.word	0x20000c08
 800328c:	20000bd9 	.word	0x20000bd9
 8003290:	20000bd0 	.word	0x20000bd0
 8003294:	200010e4 	.word	0x200010e4
 8003298:	20000094 	.word	0x20000094
 800329c:	200011f4 	.word	0x200011f4
 80032a0:	20000bed 	.word	0x20000bed
 80032a4:	20000c00 	.word	0x20000c00
 80032a8:	20000018 	.word	0x20000018
 80032ac:	20000c28 	.word	0x20000c28
 80032b0:	20000c01 	.word	0x20000c01
 80032b4:	20000bf0 	.word	0x20000bf0
 80032b8:	200004a8 	.word	0x200004a8
 80032bc:	200009e0 	.word	0x200009e0
 80032c0:	20000010 	.word	0x20000010
 80032c4:	20000bd8 	.word	0x20000bd8
 80032c8:	20000bda 	.word	0x20000bda
 80032cc:	20000be0 	.word	0x20000be0
 80032d0:	200001d4 	.word	0x200001d4
 80032d4:	2000026c 	.word	0x2000026c
 80032d8:	20000b78 	.word	0x20000b78
 80032dc:	20000bdc 	.word	0x20000bdc
 80032e0:	58020800 	.word	0x58020800

080032e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b09c      	sub	sp, #112	; 0x70
 80032e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ee:	224c      	movs	r2, #76	; 0x4c
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f012 fe0c 	bl	8015f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032f8:	1d3b      	adds	r3, r7, #4
 80032fa:	2220      	movs	r2, #32
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f012 fe06 	bl	8015f10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003304:	2002      	movs	r0, #2
 8003306:	f00a faab 	bl	800d860 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800330a:	2300      	movs	r3, #0
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <SystemClock_Config+0xe8>)
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	4a2e      	ldr	r2, [pc, #184]	; (80033cc <SystemClock_Config+0xe8>)
 8003314:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003318:	6193      	str	r3, [r2, #24]
 800331a:	4b2c      	ldr	r3, [pc, #176]	; (80033cc <SystemClock_Config+0xe8>)
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003326:	bf00      	nop
 8003328:	4b28      	ldr	r3, [pc, #160]	; (80033cc <SystemClock_Config+0xe8>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003334:	d1f8      	bne.n	8003328 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003336:	4b26      	ldr	r3, [pc, #152]	; (80033d0 <SystemClock_Config+0xec>)
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	f023 0303 	bic.w	r3, r3, #3
 800333e:	4a24      	ldr	r2, [pc, #144]	; (80033d0 <SystemClock_Config+0xec>)
 8003340:	f043 0302 	orr.w	r3, r3, #2
 8003344:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003346:	2301      	movs	r3, #1
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800334a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003350:	2302      	movs	r3, #2
 8003352:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003354:	2302      	movs	r3, #2
 8003356:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003358:	2302      	movs	r3, #2
 800335a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800335c:	232c      	movs	r3, #44	; 0x2c
 800335e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8003360:	2301      	movs	r3, #1
 8003362:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003364:	2302      	movs	r3, #2
 8003366:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003368:	2302      	movs	r3, #2
 800336a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800336c:	230c      	movs	r3, #12
 800336e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003370:	2300      	movs	r3, #0
 8003372:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800337c:	4618      	mov	r0, r3
 800337e:	f00a faa9 	bl	800d8d4 <HAL_RCC_OscConfig>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003388:	f001 ff82 	bl	8005290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800338c:	233f      	movs	r3, #63	; 0x3f
 800338e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003390:	2303      	movs	r3, #3
 8003392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003398:	2308      	movs	r3, #8
 800339a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800339c:	2340      	movs	r3, #64	; 0x40
 800339e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80033a0:	2340      	movs	r3, #64	; 0x40
 80033a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80033a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80033aa:	2340      	movs	r3, #64	; 0x40
 80033ac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	2103      	movs	r1, #3
 80033b2:	4618      	mov	r0, r3
 80033b4:	f00a fe3c 	bl	800e030 <HAL_RCC_ClockConfig>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80033be:	f001 ff67 	bl	8005290 <Error_Handler>
  }
}
 80033c2:	bf00      	nop
 80033c4:	3770      	adds	r7, #112	; 0x70
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	58024800 	.word	0x58024800
 80033d0:	58024400 	.word	0x58024400

080033d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b0ae      	sub	sp, #184	; 0xb8
 80033d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033da:	1d3b      	adds	r3, r7, #4
 80033dc:	22b4      	movs	r2, #180	; 0xb4
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f012 fd95 	bl	8015f10 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 80033e6:	4b14      	ldr	r3, [pc, #80]	; (8003438 <PeriphCommonClock_Config+0x64>)
 80033e8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80033ea:	2302      	movs	r3, #2
 80033ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80033ee:	2310      	movs	r3, #16
 80033f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80033f2:	2302      	movs	r3, #2
 80033f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80033f6:	2302      	movs	r3, #2
 80033f8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80033fa:	2302      	movs	r3, #2
 80033fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80033fe:	23c0      	movs	r3, #192	; 0xc0
 8003400:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003402:	2300      	movs	r3, #0
 8003404:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 800340a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800340e:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8003410:	2301      	movs	r3, #1
 8003412:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8003414:	2308      	movs	r3, #8
 8003416:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003418:	2300      	movs	r3, #0
 800341a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	4618      	mov	r0, r3
 8003422:	f00b f991 	bl	800e748 <HAL_RCCEx_PeriphCLKConfig>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800342c:	f001 ff30 	bl	8005290 <Error_Handler>
  }
}
 8003430:	bf00      	nop
 8003432:	37b8      	adds	r7, #184	; 0xb8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	00082003 	.word	0x00082003

0800343c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a06      	ldr	r2, [pc, #24]	; (8003460 <HAL_UART_RxCpltCallback+0x24>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d102      	bne.n	8003452 <HAL_UART_RxCpltCallback+0x16>
		Protocol_Flag = 1;
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_UART_RxCpltCallback+0x28>)
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]
	}
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	200011f4 	.word	0x200011f4
 8003464:	20000bda 	.word	0x20000bda

08003468 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(Neopixel.htim, TIM_CHANNEL_1);
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8003472:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003476:	2100      	movs	r1, #0
 8003478:	4618      	mov	r0, r3
 800347a:	f00e fbef 	bl	8011c5c <HAL_TIM_PWM_Stop_DMA>
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000868 	.word	0x20000868

0800348c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a18      	ldr	r2, [pc, #96]	; (80034f8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d129      	bne.n	80034f0 <HAL_ADC_ConvCpltCallback+0x64>
		uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 800349c:	4816      	ldr	r0, [pc, #88]	; (80034f8 <HAL_ADC_ConvCpltCallback+0x6c>)
 800349e:	f004 fbc1 	bl	8007c24 <HAL_ADC_GetValue>
 80034a2:	60f8      	str	r0, [r7, #12]
		Temperature = ((Temperature * 19)
 80034a4:	4b15      	ldr	r3, [pc, #84]	; (80034fc <HAL_ADC_ConvCpltCallback+0x70>)
 80034a6:	ed93 7b00 	vldr	d7, [r3]
 80034aa:	eeb3 6b03 	vmov.f64	d6, #51	; 0x41980000  19.0
 80034ae:	ee27 6b06 	vmul.f64	d6, d7, d6
				+ (Temp_Calibration
						* (double) ((double) ADC_Output
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	ee07 3a90 	vmov	s15, r3
 80034b8:	eeb8 5b67 	vcvt.f64.u32	d5, s15
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 80034bc:	4b10      	ldr	r3, [pc, #64]	; (8003500 <HAL_ADC_ConvCpltCallback+0x74>)
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	ee07 3a90 	vmov	s15, r3
						* (double) ((double) ADC_Output
 80034c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80034cc:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <HAL_ADC_ConvCpltCallback+0x78>)
 80034ce:	ed93 7b00 	vldr	d7, [r3]
 80034d2:	ee25 7b07 	vmul.f64	d7, d5, d7
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 80034d6:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 80034da:	ee37 7b05 	vadd.f64	d7, d7, d5
				+ (Temp_Calibration
 80034de:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ 20;
 80034e2:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 80034e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
		Temperature = ((Temperature * 19)
 80034ea:	4b04      	ldr	r3, [pc, #16]	; (80034fc <HAL_ADC_ConvCpltCallback+0x70>)
 80034ec:	ed83 7b00 	vstr	d7, [r3]
	}
}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	200001d4 	.word	0x200001d4
 80034fc:	200002b8 	.word	0x200002b8
 8003500:	1ff1e820 	.word	0x1ff1e820
 8003504:	200002c0 	.word	0x200002c0

08003508 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	if (htim == &htim23) {
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a06      	ldr	r2, [pc, #24]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d102      	bne.n	800351e <HAL_TIM_PeriodElapsedCallback+0x16>
		Contorl_Flag = 1;
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
	}
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	200010e4 	.word	0x200010e4
 8003530:	20000bd8 	.word	0x20000bd8

08003534 <CRC8>:

inline uint8_t CRC8(uint8_t *Data,uint8_t BufferLength){
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	70fb      	strb	r3, [r7, #3]
	return HAL_CRC_Calculate(&hcrc, (uint32_t*) Data, BufferLength) ^ 0xFF;
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	461a      	mov	r2, r3
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4805      	ldr	r0, [pc, #20]	; (800355c <CRC8+0x28>)
 8003548:	f006 f810 	bl	800956c <HAL_CRC_Calculate>
 800354c:	4603      	mov	r3, r0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	b2db      	uxtb	r3, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000248 	.word	0x20000248

08003560 <SentData>:
inline void SentData(uint8_t range){
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
	UART5_txBuffer[range] = CRC8(UART5_txBuffer, range);
 800356a:	79fc      	ldrb	r4, [r7, #7]
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	4619      	mov	r1, r3
 8003570:	4809      	ldr	r0, [pc, #36]	; (8003598 <SentData+0x38>)
 8003572:	f7ff ffdf 	bl	8003534 <CRC8>
 8003576:	4603      	mov	r3, r0
 8003578:	461a      	mov	r2, r3
 800357a:	4b07      	ldr	r3, [pc, #28]	; (8003598 <SentData+0x38>)
 800357c:	551a      	strb	r2, [r3, r4]
	HAL_UART_Transmit_IT(&huart5, UART5_txBuffer, range+1);
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	b29b      	uxth	r3, r3
 8003582:	3301      	adds	r3, #1
 8003584:	b29b      	uxth	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	4903      	ldr	r1, [pc, #12]	; (8003598 <SentData+0x38>)
 800358a:	4804      	ldr	r0, [pc, #16]	; (800359c <SentData+0x3c>)
 800358c:	f00f fec6 	bl	801331c <HAL_UART_Transmit_IT>
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	bd90      	pop	{r4, r7, pc}
 8003598:	200000a4 	.word	0x200000a4
 800359c:	200011f4 	.word	0x200011f4

080035a0 <Narwhal_Protocol>:

inline void Narwhal_Protocol() {
 80035a0:	b5b0      	push	{r4, r5, r7, lr}
 80035a2:	b0ee      	sub	sp, #440	; 0x1b8
 80035a4:	af00      	add	r7, sp, #0
	if (UART5_rxBuffer[0] == 0xFF) {
 80035a6:	4bd8      	ldr	r3, [pc, #864]	; (8003908 <Narwhal_Protocol+0x368>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2bff      	cmp	r3, #255	; 0xff
 80035ac:	f041 801f 	bne.w	80045ee <Narwhal_Protocol+0x104e>
		uint8_t CRC_Cal = CRC8(UART5_rxBuffer, 13);
 80035b0:	210d      	movs	r1, #13
 80035b2:	48d5      	ldr	r0, [pc, #852]	; (8003908 <Narwhal_Protocol+0x368>)
 80035b4:	f7ff ffbe 	bl	8003534 <CRC8>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		if (CRC_Cal == UART5_rxBuffer[13]) {
 80035be:	4bd2      	ldr	r3, [pc, #840]	; (8003908 <Narwhal_Protocol+0x368>)
 80035c0:	7b5b      	ldrb	r3, [r3, #13]
 80035c2:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 80035c6:	429a      	cmp	r2, r3
 80035c8:	f041 800a 	bne.w	80045e0 <Narwhal_Protocol+0x1040>
			UART5_txBuffer[0] = 0xFF;
 80035cc:	4bcf      	ldr	r3, [pc, #828]	; (800390c <Narwhal_Protocol+0x36c>)
 80035ce:	22ff      	movs	r2, #255	; 0xff
 80035d0:	701a      	strb	r2, [r3, #0]
			double Safe_Zone[4] = { 0, 0.5, -0.5, 0 };
 80035d2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80035d6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035da:	4acd      	ldr	r2, [pc, #820]	; (8003910 <Narwhal_Protocol+0x370>)
 80035dc:	461c      	mov	r4, r3
 80035de:	4615      	mov	r5, r2
 80035e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80035e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			double q_Feed[4];
			double dq[4];
			double d_Task[3];
			double d_Task_Set[3];
			double q_in[5] = {0,0,0,0,0};
 80035ec:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80035f0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80035f4:	4618      	mov	r0, r3
 80035f6:	2328      	movs	r3, #40	; 0x28
 80035f8:	461a      	mov	r2, r3
 80035fa:	2100      	movs	r1, #0
 80035fc:	f012 fc88 	bl	8015f10 <memset>
			double q_in_Set[5] = {0,0,0,0,0};
 8003600:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003608:	4618      	mov	r0, r3
 800360a:	2328      	movs	r3, #40	; 0x28
 800360c:	461a      	mov	r2, r3
 800360e:	2100      	movs	r1, #0
 8003610:	f012 fc7e 	bl	8015f10 <memset>
			double task[3] = { 0, 0, 0 };
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			int Chess_Board_Base_Encoder2Sent;


			uint16_t Temperature_Protocol = Temperature * 1000;
 8003638:	4bb6      	ldr	r3, [pc, #728]	; (8003914 <Narwhal_Protocol+0x374>)
 800363a:	ed93 7b00 	vldr	d7, [r3]
 800363e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80038f8 <Narwhal_Protocol+0x358>
 8003642:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003646:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800364a:	ee17 3a90 	vmov	r3, s15
 800364e:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
			uint16_t Temperature_Protocol2 = TPM75_Temp * 1000;
 8003652:	4bb1      	ldr	r3, [pc, #708]	; (8003918 <Narwhal_Protocol+0x378>)
 8003654:	ed93 7b00 	vldr	d7, [r3]
 8003658:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 80038f8 <Narwhal_Protocol+0x358>
 800365c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003660:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003664:	ee17 3a90 	vmov	r3, s15
 8003668:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a

			/* 		Data to MCU Start	*/
			switch (UART5_rxBuffer[1]) {
 800366c:	4ba6      	ldr	r3, [pc, #664]	; (8003908 <Narwhal_Protocol+0x368>)
 800366e:	785b      	ldrb	r3, [r3, #1]
 8003670:	3ba0      	subs	r3, #160	; 0xa0
 8003672:	2b5f      	cmp	r3, #95	; 0x5f
 8003674:	f200 87ad 	bhi.w	80045d2 <Narwhal_Protocol+0x1032>
 8003678:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <Narwhal_Protocol+0xe0>)
 800367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367e:	bf00      	nop
 8003680:	08004097 	.word	0x08004097
 8003684:	080040bd 	.word	0x080040bd
 8003688:	080040fb 	.word	0x080040fb
 800368c:	080045d3 	.word	0x080045d3
 8003690:	080045d3 	.word	0x080045d3
 8003694:	080045d3 	.word	0x080045d3
 8003698:	080045d3 	.word	0x080045d3
 800369c:	080045d3 	.word	0x080045d3
 80036a0:	080045d3 	.word	0x080045d3
 80036a4:	080045d3 	.word	0x080045d3
 80036a8:	0800416b 	.word	0x0800416b
 80036ac:	080041ef 	.word	0x080041ef
 80036b0:	080045d3 	.word	0x080045d3
 80036b4:	080045d3 	.word	0x080045d3
 80036b8:	080045d3 	.word	0x080045d3
 80036bc:	080042bb 	.word	0x080042bb
 80036c0:	080045d3 	.word	0x080045d3
 80036c4:	080045d3 	.word	0x080045d3
 80036c8:	080045d3 	.word	0x080045d3
 80036cc:	080045d3 	.word	0x080045d3
 80036d0:	080045d3 	.word	0x080045d3
 80036d4:	080045d3 	.word	0x080045d3
 80036d8:	080045d3 	.word	0x080045d3
 80036dc:	080045d3 	.word	0x080045d3
 80036e0:	080045d3 	.word	0x080045d3
 80036e4:	080045d3 	.word	0x080045d3
 80036e8:	080045d3 	.word	0x080045d3
 80036ec:	080045d3 	.word	0x080045d3
 80036f0:	080045d3 	.word	0x080045d3
 80036f4:	080045d3 	.word	0x080045d3
 80036f8:	080045d3 	.word	0x080045d3
 80036fc:	080045d3 	.word	0x080045d3
 8003700:	080045d3 	.word	0x080045d3
 8003704:	080045d3 	.word	0x080045d3
 8003708:	080045d3 	.word	0x080045d3
 800370c:	080045d3 	.word	0x080045d3
 8003710:	080045d3 	.word	0x080045d3
 8003714:	080045d3 	.word	0x080045d3
 8003718:	080045d3 	.word	0x080045d3
 800371c:	080045d3 	.word	0x080045d3
 8003720:	080045d3 	.word	0x080045d3
 8003724:	080045d3 	.word	0x080045d3
 8003728:	080045d3 	.word	0x080045d3
 800372c:	080045d3 	.word	0x080045d3
 8003730:	080045d3 	.word	0x080045d3
 8003734:	080045d3 	.word	0x080045d3
 8003738:	080045d3 	.word	0x080045d3
 800373c:	080045d3 	.word	0x080045d3
 8003740:	080045d3 	.word	0x080045d3
 8003744:	080045d3 	.word	0x080045d3
 8003748:	080045d3 	.word	0x080045d3
 800374c:	080045d3 	.word	0x080045d3
 8003750:	080045d3 	.word	0x080045d3
 8003754:	080045d3 	.word	0x080045d3
 8003758:	080045d3 	.word	0x080045d3
 800375c:	080045d3 	.word	0x080045d3
 8003760:	080045d3 	.word	0x080045d3
 8003764:	080045d3 	.word	0x080045d3
 8003768:	080045d3 	.word	0x080045d3
 800376c:	080045d3 	.word	0x080045d3
 8003770:	080045d3 	.word	0x080045d3
 8003774:	080045d3 	.word	0x080045d3
 8003778:	080045d3 	.word	0x080045d3
 800377c:	080045d3 	.word	0x080045d3
 8003780:	080045d3 	.word	0x080045d3
 8003784:	080045d3 	.word	0x080045d3
 8003788:	080045d3 	.word	0x080045d3
 800378c:	080045d3 	.word	0x080045d3
 8003790:	080045d3 	.word	0x080045d3
 8003794:	080045d3 	.word	0x080045d3
 8003798:	080045d3 	.word	0x080045d3
 800379c:	080045d3 	.word	0x080045d3
 80037a0:	080045d3 	.word	0x080045d3
 80037a4:	080045d3 	.word	0x080045d3
 80037a8:	080045d3 	.word	0x080045d3
 80037ac:	080045d3 	.word	0x080045d3
 80037b0:	080045d3 	.word	0x080045d3
 80037b4:	080045d3 	.word	0x080045d3
 80037b8:	080045d3 	.word	0x080045d3
 80037bc:	080045d3 	.word	0x080045d3
 80037c0:	08003801 	.word	0x08003801
 80037c4:	08003817 	.word	0x08003817
 80037c8:	080045d3 	.word	0x080045d3
 80037cc:	080045d3 	.word	0x080045d3
 80037d0:	080045d3 	.word	0x080045d3
 80037d4:	0800382d 	.word	0x0800382d
 80037d8:	080038d9 	.word	0x080038d9
 80037dc:	080039d3 	.word	0x080039d3
 80037e0:	080045d3 	.word	0x080045d3
 80037e4:	080045d3 	.word	0x080045d3
 80037e8:	080039f1 	.word	0x080039f1
 80037ec:	08003adf 	.word	0x08003adf
 80037f0:	080045d3 	.word	0x080045d3
 80037f4:	08003ca1 	.word	0x08003ca1
 80037f8:	08003e15 	.word	0x08003e15
 80037fc:	08003fb5 	.word	0x08003fb5
			case 0xF0:
				/* Ping */
				UART5_txBuffer[2] = 0x00;
 8003800:	4b42      	ldr	r3, [pc, #264]	; (800390c <Narwhal_Protocol+0x36c>)
 8003802:	2200      	movs	r2, #0
 8003804:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003806:	4b41      	ldr	r3, [pc, #260]	; (800390c <Narwhal_Protocol+0x36c>)
 8003808:	22ff      	movs	r2, #255	; 0xff
 800380a:	705a      	strb	r2, [r3, #1]
				SentData(3);
 800380c:	2003      	movs	r0, #3
 800380e:	f7ff fea7 	bl	8003560 <SentData>
				break;
 8003812:	f000 bef2 	b.w	80045fa <Narwhal_Protocol+0x105a>
			case 0xF1:
				/* Working Mode Set */
				UART5_txBuffer[2] = 0x01;
 8003816:	4b3d      	ldr	r3, [pc, #244]	; (800390c <Narwhal_Protocol+0x36c>)
 8003818:	2201      	movs	r2, #1
 800381a:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 800381c:	4b3b      	ldr	r3, [pc, #236]	; (800390c <Narwhal_Protocol+0x36c>)
 800381e:	22ff      	movs	r2, #255	; 0xff
 8003820:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003822:	2003      	movs	r0, #3
 8003824:	f7ff fe9c 	bl	8003560 <SentData>
				break;
 8003828:	f000 bee7 	b.w	80045fa <Narwhal_Protocol+0x105a>
			case 0xF5:
				/* GoHome */
				if (Traj_Flag == 0) {;
 800382c:	4b3b      	ldr	r3, [pc, #236]	; (800391c <Narwhal_Protocol+0x37c>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d146      	bne.n	80038c2 <Narwhal_Protocol+0x322>
					t = 0;
 8003834:	493a      	ldr	r1, [pc, #232]	; (8003920 <Narwhal_Protocol+0x380>)
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	e9c1 2300 	strd	r2, r3, [r1]
					for (int i = 0; i < 4; i++) {
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003848:	e02d      	b.n	80038a6 <Narwhal_Protocol+0x306>
						Traj_Coeff_Cal(&Traj[i], 2, 0,
 800384a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4a33      	ldr	r2, [pc, #204]	; (8003924 <Narwhal_Protocol+0x384>)
 8003858:	441a      	add	r2, r3
 800385a:	4933      	ldr	r1, [pc, #204]	; (8003928 <Narwhal_Protocol+0x388>)
 800385c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003860:	20d8      	movs	r0, #216	; 0xd8
 8003862:	fb00 f303 	mul.w	r3, r0, r3
 8003866:	440b      	add	r3, r1
 8003868:	3350      	adds	r3, #80	; 0x50
 800386a:	ed93 7b00 	vldr	d7, [r3]
 800386e:	492e      	ldr	r1, [pc, #184]	; (8003928 <Narwhal_Protocol+0x388>)
 8003870:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003874:	20d8      	movs	r0, #216	; 0xd8
 8003876:	fb00 f303 	mul.w	r3, r0, r3
 800387a:	440b      	add	r3, r1
 800387c:	33b8      	adds	r3, #184	; 0xb8
 800387e:	ed93 6b00 	vldr	d6, [r3]
 8003882:	eeb0 4b46 	vmov.f64	d4, d6
 8003886:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8003900 <Narwhal_Protocol+0x360>
 800388a:	eeb0 2b47 	vmov.f64	d2, d7
 800388e:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8003900 <Narwhal_Protocol+0x360>
 8003892:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8003896:	4610      	mov	r0, r2
 8003898:	f7fd fc02 	bl	80010a0 <Traj_Coeff_Cal>
					for (int i = 0; i < 4; i++) {
 800389c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80038a0:	3301      	adds	r3, #1
 80038a2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80038a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	ddcd      	ble.n	800384a <Narwhal_Protocol+0x2aa>
								Control[i].PositionFeedback, 0,
								Control[i].VelocityFeedback);
					}
					Traj_Flag = 0x0F;
 80038ae:	4b1b      	ldr	r3, [pc, #108]	; (800391c <Narwhal_Protocol+0x37c>)
 80038b0:	220f      	movs	r2, #15
 80038b2:	701a      	strb	r2, [r3, #0]
					Chessmove_State = 0;
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <Narwhal_Protocol+0x38c>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
					UART5_txBuffer[2] = 0x00;
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <Narwhal_Protocol+0x36c>)
 80038bc:	2200      	movs	r2, #0
 80038be:	709a      	strb	r2, [r3, #2]
 80038c0:	e002      	b.n	80038c8 <Narwhal_Protocol+0x328>
				} else {
					UART5_txBuffer[2] = 0x01;
 80038c2:	4b12      	ldr	r3, [pc, #72]	; (800390c <Narwhal_Protocol+0x36c>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	709a      	strb	r2, [r3, #2]
				}
				UART5_txBuffer[1] = 0xFF;
 80038c8:	4b10      	ldr	r3, [pc, #64]	; (800390c <Narwhal_Protocol+0x36c>)
 80038ca:	22ff      	movs	r2, #255	; 0xff
 80038cc:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80038ce:	2003      	movs	r0, #3
 80038d0:	f7ff fe46 	bl	8003560 <SentData>
				break;
 80038d4:	f000 be91 	b.w	80045fa <Narwhal_Protocol+0x105a>
			case 0xF6:
				/* GoSafe */
				if (Traj_Flag == 0) {
 80038d8:	4b10      	ldr	r3, [pc, #64]	; (800391c <Narwhal_Protocol+0x37c>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d16d      	bne.n	80039bc <Narwhal_Protocol+0x41c>
					;
					t = 0;
 80038e0:	490f      	ldr	r1, [pc, #60]	; (8003920 <Narwhal_Protocol+0x380>)
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	e9c1 2300 	strd	r2, r3, [r1]
					for (int i = 0; i < 4; i++) {
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80038f4:	e054      	b.n	80039a0 <Narwhal_Protocol+0x400>
 80038f6:	bf00      	nop
 80038f8:	00000000 	.word	0x00000000
 80038fc:	408f4000 	.word	0x408f4000
	...
 8003908:	20000094 	.word	0x20000094
 800390c:	200000a4 	.word	0x200000a4
 8003910:	08016f90 	.word	0x08016f90
 8003914:	200002b8 	.word	0x200002b8
 8003918:	20000b78 	.word	0x20000b78
 800391c:	20000bd9 	.word	0x20000bd9
 8003920:	20000bd0 	.word	0x20000bd0
 8003924:	200009e0 	.word	0x200009e0
 8003928:	200004a8 	.word	0x200004a8
 800392c:	20000bdb 	.word	0x20000bdb
						Traj_Coeff_Cal(&Traj[i], 2.5, Safe_Zone[i],
 8003930:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4ad0      	ldr	r2, [pc, #832]	; (8003c80 <Narwhal_Protocol+0x6e0>)
 800393e:	1899      	adds	r1, r3, r2
 8003940:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003944:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 8003948:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	ed93 7b00 	vldr	d7, [r3]
 8003954:	4acb      	ldr	r2, [pc, #812]	; (8003c84 <Narwhal_Protocol+0x6e4>)
 8003956:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800395a:	20d8      	movs	r0, #216	; 0xd8
 800395c:	fb00 f303 	mul.w	r3, r0, r3
 8003960:	4413      	add	r3, r2
 8003962:	3350      	adds	r3, #80	; 0x50
 8003964:	ed93 6b00 	vldr	d6, [r3]
 8003968:	4ac6      	ldr	r2, [pc, #792]	; (8003c84 <Narwhal_Protocol+0x6e4>)
 800396a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800396e:	20d8      	movs	r0, #216	; 0xd8
 8003970:	fb00 f303 	mul.w	r3, r0, r3
 8003974:	4413      	add	r3, r2
 8003976:	33b8      	adds	r3, #184	; 0xb8
 8003978:	ed93 5b00 	vldr	d5, [r3]
 800397c:	eeb0 4b45 	vmov.f64	d4, d5
 8003980:	ed9f 3bb9 	vldr	d3, [pc, #740]	; 8003c68 <Narwhal_Protocol+0x6c8>
 8003984:	eeb0 2b46 	vmov.f64	d2, d6
 8003988:	eeb0 1b47 	vmov.f64	d1, d7
 800398c:	eeb0 0b04 	vmov.f64	d0, #4	; 0x40200000  2.5
 8003990:	4608      	mov	r0, r1
 8003992:	f7fd fb85 	bl	80010a0 <Traj_Coeff_Cal>
					for (int i = 0; i < 4; i++) {
 8003996:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800399a:	3301      	adds	r3, #1
 800399c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80039a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	ddc3      	ble.n	8003930 <Narwhal_Protocol+0x390>
								Control[i].PositionFeedback, 0,
								Control[i].VelocityFeedback);
					}
					Traj_Flag = 0x0F;
 80039a8:	4bb7      	ldr	r3, [pc, #732]	; (8003c88 <Narwhal_Protocol+0x6e8>)
 80039aa:	220f      	movs	r2, #15
 80039ac:	701a      	strb	r2, [r3, #0]
					Chessmove_State = 0;
 80039ae:	4bb7      	ldr	r3, [pc, #732]	; (8003c8c <Narwhal_Protocol+0x6ec>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
					UART5_txBuffer[2] = 0x00;
 80039b4:	4bb6      	ldr	r3, [pc, #728]	; (8003c90 <Narwhal_Protocol+0x6f0>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	709a      	strb	r2, [r3, #2]
 80039ba:	e002      	b.n	80039c2 <Narwhal_Protocol+0x422>
				} else {
					UART5_txBuffer[2] = 0x01;
 80039bc:	4bb4      	ldr	r3, [pc, #720]	; (8003c90 <Narwhal_Protocol+0x6f0>)
 80039be:	2201      	movs	r2, #1
 80039c0:	709a      	strb	r2, [r3, #2]
				}
				UART5_txBuffer[1] = 0xFF;
 80039c2:	4bb3      	ldr	r3, [pc, #716]	; (8003c90 <Narwhal_Protocol+0x6f0>)
 80039c4:	22ff      	movs	r2, #255	; 0xff
 80039c6:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80039c8:	2003      	movs	r0, #3
 80039ca:	f7ff fdc9 	bl	8003560 <SentData>
				break;
 80039ce:	f000 be14 	b.w	80045fa <Narwhal_Protocol+0x105a>
			case 0xF7:
				/* Set0 BaseEnc */
				Chess_Board_Base_Encoder = 0;
 80039d2:	49b0      	ldr	r1, [pc, #704]	; (8003c94 <Narwhal_Protocol+0x6f4>)
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	e9c1 2300 	strd	r2, r3, [r1]
				UART5_txBuffer[1] = 0xFF;
 80039e0:	4bab      	ldr	r3, [pc, #684]	; (8003c90 <Narwhal_Protocol+0x6f0>)
 80039e2:	22ff      	movs	r2, #255	; 0xff
 80039e4:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80039e6:	2003      	movs	r0, #3
 80039e8:	f7ff fdba 	bl	8003560 <SentData>
				break;
 80039ec:	f000 be05 	b.w	80045fa <Narwhal_Protocol+0x105a>
			case 0xFA:
				/* Joint Jog */
				t = 0;
 80039f0:	49a9      	ldr	r1, [pc, #676]	; (8003c98 <Narwhal_Protocol+0x6f8>)
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 80039fe:	2300      	movs	r3, #0
 8003a00:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8003a04:	e056      	b.n	8003ab4 <Narwhal_Protocol+0x514>
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003a06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4aa3      	ldr	r2, [pc, #652]	; (8003c9c <Narwhal_Protocol+0x6fc>)
 8003a10:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003a12:	021b      	lsls	r3, r3, #8
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003a14:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003a16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	3303      	adds	r3, #3
 8003a1e:	499f      	ldr	r1, [pc, #636]	; (8003c9c <Narwhal_Protocol+0x6fc>)
 8003a20:	5ccb      	ldrb	r3, [r1, r3]
 8003a22:	b21b      	sxth	r3, r3
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003a24:	4313      	orrs	r3, r2
 8003a26:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003a30:	ed9f 5b8f 	vldr	d5, [pc, #572]	; 8003c70 <Narwhal_Protocol+0x6d0>
 8003a34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a38:	ed87 7b4e 	vstr	d7, [r7, #312]	; 0x138
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8003a3c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4a8d      	ldr	r2, [pc, #564]	; (8003c80 <Narwhal_Protocol+0x6e0>)
 8003a4a:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 8003a4c:	498d      	ldr	r1, [pc, #564]	; (8003c84 <Narwhal_Protocol+0x6e4>)
 8003a4e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a52:	20d8      	movs	r0, #216	; 0xd8
 8003a54:	fb00 f303 	mul.w	r3, r0, r3
 8003a58:	440b      	add	r3, r1
 8003a5a:	3350      	adds	r3, #80	; 0x50
 8003a5c:	ed93 6b00 	vldr	d6, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8003a60:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8003a64:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a68:	4986      	ldr	r1, [pc, #536]	; (8003c84 <Narwhal_Protocol+0x6e4>)
 8003a6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a6e:	20d8      	movs	r0, #216	; 0xd8
 8003a70:	fb00 f303 	mul.w	r3, r0, r3
 8003a74:	440b      	add	r3, r1
 8003a76:	3350      	adds	r3, #80	; 0x50
 8003a78:	ed93 6b00 	vldr	d6, [r3]
 8003a7c:	4981      	ldr	r1, [pc, #516]	; (8003c84 <Narwhal_Protocol+0x6e4>)
 8003a7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a82:	20d8      	movs	r0, #216	; 0xd8
 8003a84:	fb00 f303 	mul.w	r3, r0, r3
 8003a88:	440b      	add	r3, r1
 8003a8a:	33b8      	adds	r3, #184	; 0xb8
 8003a8c:	ed93 5b00 	vldr	d5, [r3]
 8003a90:	eeb0 4b45 	vmov.f64	d4, d5
 8003a94:	ed9f 3b74 	vldr	d3, [pc, #464]	; 8003c68 <Narwhal_Protocol+0x6c8>
 8003a98:	eeb0 2b46 	vmov.f64	d2, d6
 8003a9c:	eeb0 1b47 	vmov.f64	d1, d7
 8003aa0:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	f7fd fafb 	bl	80010a0 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003aaa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8003ab4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	dda4      	ble.n	8003a06 <Narwhal_Protocol+0x466>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003abc:	4b72      	ldr	r3, [pc, #456]	; (8003c88 <Narwhal_Protocol+0x6e8>)
 8003abe:	220f      	movs	r2, #15
 8003ac0:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003ac2:	4b72      	ldr	r3, [pc, #456]	; (8003c8c <Narwhal_Protocol+0x6ec>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003ac8:	4b71      	ldr	r3, [pc, #452]	; (8003c90 <Narwhal_Protocol+0x6f0>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003ace:	4b70      	ldr	r3, [pc, #448]	; (8003c90 <Narwhal_Protocol+0x6f0>)
 8003ad0:	22ff      	movs	r2, #255	; 0xff
 8003ad2:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003ad4:	2003      	movs	r0, #3
 8003ad6:	f7ff fd43 	bl	8003560 <SentData>
				break;
 8003ada:	f000 bd8e 	b.w	80045fa <Narwhal_Protocol+0x105a>
			case 0xFB:
				/* Cartesian Jog */
				q_Feed[0] = Control[0].PositionFeedback;
 8003ade:	4b69      	ldr	r3, [pc, #420]	; (8003c84 <Narwhal_Protocol+0x6e4>)
 8003ae0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003ae4:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003ae8:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003aec:	e9c1 2300 	strd	r2, r3, [r1]
				q_Feed[1] = Control[1].PositionFeedback;
 8003af0:	4b64      	ldr	r3, [pc, #400]	; (8003c84 <Narwhal_Protocol+0x6e4>)
 8003af2:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8003af6:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003afa:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003afe:	e9c1 2302 	strd	r2, r3, [r1, #8]
				q_Feed[2] = Control[2].PositionFeedback;
 8003b02:	4b60      	ldr	r3, [pc, #384]	; (8003c84 <Narwhal_Protocol+0x6e4>)
 8003b04:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8003b08:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003b0c:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003b10:	e9c1 2304 	strd	r2, r3, [r1, #16]
				q_Feed[3] = Control[3].PositionFeedback;
 8003b14:	4b5b      	ldr	r3, [pc, #364]	; (8003c84 <Narwhal_Protocol+0x6e4>)
 8003b16:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8003b1a:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003b1e:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003b22:	e9c1 2306 	strd	r2, r3, [r1, #24]
				for (int i = 0; i < 3; i++) {
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003b2c:	e026      	b.n	8003b7c <Narwhal_Protocol+0x5dc>
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003b2e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b32:	3301      	adds	r3, #1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	4a59      	ldr	r2, [pc, #356]	; (8003c9c <Narwhal_Protocol+0x6fc>)
 8003b38:	5cd3      	ldrb	r3, [r2, r3]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003b3e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	3303      	adds	r3, #3
 8003b46:	4955      	ldr	r1, [pc, #340]	; (8003c9c <Narwhal_Protocol+0x6fc>)
 8003b48:	5ccb      	ldrb	r3, [r1, r3]
 8003b4a:	b21b      	sxth	r3, r3
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003b50:	ee07 3a90 	vmov	s15, r3
 8003b54:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003b58:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8003c78 <Narwhal_Protocol+0x6d8>
 8003b5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003b60:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b6a:	443b      	add	r3, r7
 8003b6c:	3ba8      	subs	r3, #168	; 0xa8
 8003b6e:	ed83 7b00 	vstr	d7, [r3]
				for (int i = 0; i < 3; i++) {
 8003b72:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b76:	3301      	adds	r3, #1
 8003b78:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003b7c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	ddd4      	ble.n	8003b2e <Narwhal_Protocol+0x58e>
				}
				IVK(q_Feed, d_Task, dq);
 8003b84:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003b88:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003b8c:	f107 0320 	add.w	r3, r7, #32
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fe fa89 	bl	80020a8 <IVK>
				t = 0;
 8003b96:	4940      	ldr	r1, [pc, #256]	; (8003c98 <Narwhal_Protocol+0x6f8>)
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003baa:	e045      	b.n	8003c38 <Narwhal_Protocol+0x698>
					double Setpoint = Control[i].PositionFeedback + dq[i];
 8003bac:	4a35      	ldr	r2, [pc, #212]	; (8003c84 <Narwhal_Protocol+0x6e4>)
 8003bae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bb2:	21d8      	movs	r1, #216	; 0xd8
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	3350      	adds	r3, #80	; 0x50
 8003bbc:	ed93 6b00 	vldr	d6, [r3]
 8003bc0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003bc4:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003bc8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	ed93 7b00 	vldr	d7, [r3]
 8003bd4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003bd8:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
					Traj_Coeff_Cal(&Traj[i], 0.5, Setpoint,
 8003bdc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <Narwhal_Protocol+0x6e0>)
 8003bea:	441a      	add	r2, r3
 8003bec:	4925      	ldr	r1, [pc, #148]	; (8003c84 <Narwhal_Protocol+0x6e4>)
 8003bee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bf2:	20d8      	movs	r0, #216	; 0xd8
 8003bf4:	fb00 f303 	mul.w	r3, r0, r3
 8003bf8:	440b      	add	r3, r1
 8003bfa:	3350      	adds	r3, #80	; 0x50
 8003bfc:	ed93 7b00 	vldr	d7, [r3]
 8003c00:	4920      	ldr	r1, [pc, #128]	; (8003c84 <Narwhal_Protocol+0x6e4>)
 8003c02:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c06:	20d8      	movs	r0, #216	; 0xd8
 8003c08:	fb00 f303 	mul.w	r3, r0, r3
 8003c0c:	440b      	add	r3, r1
 8003c0e:	33b8      	adds	r3, #184	; 0xb8
 8003c10:	ed93 6b00 	vldr	d6, [r3]
 8003c14:	eeb0 4b46 	vmov.f64	d4, d6
 8003c18:	ed9f 3b13 	vldr	d3, [pc, #76]	; 8003c68 <Narwhal_Protocol+0x6c8>
 8003c1c:	eeb0 2b47 	vmov.f64	d2, d7
 8003c20:	ed97 1b50 	vldr	d1, [r7, #320]	; 0x140
 8003c24:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8003c28:	4610      	mov	r0, r2
 8003c2a:	f7fd fa39 	bl	80010a0 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003c2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c32:	3301      	adds	r3, #1
 8003c34:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003c38:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	ddb5      	ble.n	8003bac <Narwhal_Protocol+0x60c>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003c40:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <Narwhal_Protocol+0x6e8>)
 8003c42:	220f      	movs	r2, #15
 8003c44:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003c46:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <Narwhal_Protocol+0x6ec>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003c4c:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <Narwhal_Protocol+0x6f0>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <Narwhal_Protocol+0x6f0>)
 8003c54:	22ff      	movs	r2, #255	; 0xff
 8003c56:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003c58:	2003      	movs	r0, #3
 8003c5a:	f7ff fc81 	bl	8003560 <SentData>
				break;
 8003c5e:	f000 bccc 	b.w	80045fa <Narwhal_Protocol+0x105a>
 8003c62:	bf00      	nop
 8003c64:	f3af 8000 	nop.w
	...
 8003c74:	408f4000 	.word	0x408f4000
 8003c78:	00000000 	.word	0x00000000
 8003c7c:	40490000 	.word	0x40490000
 8003c80:	200009e0 	.word	0x200009e0
 8003c84:	200004a8 	.word	0x200004a8
 8003c88:	20000bd9 	.word	0x20000bd9
 8003c8c:	20000bdb 	.word	0x20000bdb
 8003c90:	200000a4 	.word	0x200000a4
 8003c94:	20000b68 	.word	0x20000b68
 8003c98:	20000bd0 	.word	0x20000bd0
 8003c9c:	20000094 	.word	0x20000094
			case 0xFD:
				/* Joint Set */
				t = 0;
 8003ca0:	49d5      	ldr	r1, [pc, #852]	; (8003ff8 <Narwhal_Protocol+0xa58>)
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	e9c1 2300 	strd	r2, r3, [r1]
				double Joint[4];
				double T = 1;
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	4bd2      	ldr	r3, [pc, #840]	; (8003ffc <Narwhal_Protocol+0xa5c>)
 8003cb4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				double Distance = -1;
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	4bd0      	ldr	r3, [pc, #832]	; (8004000 <Narwhal_Protocol+0xa60>)
 8003cbe:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
				for (int i = 0; i < 4; i++) {
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8003cc8:	e044      	b.n	8003d54 <Narwhal_Protocol+0x7b4>
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003cca:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003cce:	3301      	adds	r3, #1
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	4acc      	ldr	r2, [pc, #816]	; (8004004 <Narwhal_Protocol+0xa64>)
 8003cd4:	5cd3      	ldrb	r3, [r2, r3]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003cda:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	3303      	adds	r3, #3
 8003ce2:	49c8      	ldr	r1, [pc, #800]	; (8004004 <Narwhal_Protocol+0xa64>)
 8003ce4:	5ccb      	ldrb	r3, [r1, r3]
 8003ce6:	b21b      	sxth	r3, r3
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003cf4:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 8003fc0 <Narwhal_Protocol+0xa20>
 8003cf8:	ee86 7b05 	vdiv.f64	d7, d6, d5
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003cfc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003d00:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003d04:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	ed83 7b00 	vstr	d7, [r3]
					if (Joint[i] > Distance){
 8003d10:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003d14:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003d18:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	ed93 7b00 	vldr	d7, [r3]
 8003d24:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 8003d28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d30:	d50b      	bpl.n	8003d4a <Narwhal_Protocol+0x7aa>
						Distance = Joint[i];
 8003d32:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003d36:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003d3a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
				for (int i = 0; i < 4; i++) {
 8003d4a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003d4e:	3301      	adds	r3, #1
 8003d50:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8003d54:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	ddb6      	ble.n	8003cca <Narwhal_Protocol+0x72a>
					}
				}
				T += (Distance * 0.8);
 8003d5c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003d60:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8003fc8 <Narwhal_Protocol+0xa28>
 8003d64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003d68:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 8003d6c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d70:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
				for (int i = 0; i < 4; i++) {
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003d7a:	e037      	b.n	8003dec <Narwhal_Protocol+0x84c>
					Traj_Coeff_Cal(&Traj[i], T, Joint[i],
 8003d7c:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4a9f      	ldr	r2, [pc, #636]	; (8004008 <Narwhal_Protocol+0xa68>)
 8003d8a:	1899      	adds	r1, r3, r2
 8003d8c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003d90:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003d94:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	ed93 7b00 	vldr	d7, [r3]
 8003da0:	4a9a      	ldr	r2, [pc, #616]	; (800400c <Narwhal_Protocol+0xa6c>)
 8003da2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003da6:	20d8      	movs	r0, #216	; 0xd8
 8003da8:	fb00 f303 	mul.w	r3, r0, r3
 8003dac:	4413      	add	r3, r2
 8003dae:	3350      	adds	r3, #80	; 0x50
 8003db0:	ed93 6b00 	vldr	d6, [r3]
 8003db4:	4a95      	ldr	r2, [pc, #596]	; (800400c <Narwhal_Protocol+0xa6c>)
 8003db6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003dba:	20d8      	movs	r0, #216	; 0xd8
 8003dbc:	fb00 f303 	mul.w	r3, r0, r3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	33b8      	adds	r3, #184	; 0xb8
 8003dc4:	ed93 5b00 	vldr	d5, [r3]
 8003dc8:	eeb0 4b45 	vmov.f64	d4, d5
 8003dcc:	ed9f 3b80 	vldr	d3, [pc, #512]	; 8003fd0 <Narwhal_Protocol+0xa30>
 8003dd0:	eeb0 2b46 	vmov.f64	d2, d6
 8003dd4:	eeb0 1b47 	vmov.f64	d1, d7
 8003dd8:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 8003ddc:	4608      	mov	r0, r1
 8003dde:	f7fd f95f 	bl	80010a0 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003de2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003de6:	3301      	adds	r3, #1
 8003de8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003dec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	ddc3      	ble.n	8003d7c <Narwhal_Protocol+0x7dc>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003df4:	4b86      	ldr	r3, [pc, #536]	; (8004010 <Narwhal_Protocol+0xa70>)
 8003df6:	220f      	movs	r2, #15
 8003df8:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003dfa:	4b86      	ldr	r3, [pc, #536]	; (8004014 <Narwhal_Protocol+0xa74>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x03;
 8003e00:	4b85      	ldr	r3, [pc, #532]	; (8004018 <Narwhal_Protocol+0xa78>)
 8003e02:	2203      	movs	r2, #3
 8003e04:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003e06:	4b84      	ldr	r3, [pc, #528]	; (8004018 <Narwhal_Protocol+0xa78>)
 8003e08:	22ff      	movs	r2, #255	; 0xff
 8003e0a:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003e0c:	2003      	movs	r0, #3
 8003e0e:	f7ff fba7 	bl	8003560 <SentData>
				break;
 8003e12:	e3f2      	b.n	80045fa <Narwhal_Protocol+0x105a>
			case 0xFE:
				/* Cartesian Set */
				t = 0;
 8003e14:	4978      	ldr	r1, [pc, #480]	; (8003ff8 <Narwhal_Protocol+0xa58>)
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9c1 2300 	strd	r2, r3, [r1]
				double Task[3];
				for (int i = 0; i < 3; i++) {
 8003e22:	2300      	movs	r3, #0
 8003e24:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8003e28:	e026      	b.n	8003e78 <Narwhal_Protocol+0x8d8>
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003e2a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003e2e:	3301      	adds	r3, #1
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4a74      	ldr	r2, [pc, #464]	; (8004004 <Narwhal_Protocol+0xa64>)
 8003e34:	5cd3      	ldrb	r3, [r2, r3]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003e3a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	3303      	adds	r3, #3
 8003e42:	4970      	ldr	r1, [pc, #448]	; (8004004 <Narwhal_Protocol+0xa64>)
 8003e44:	5ccb      	ldrb	r3, [r1, r3]
 8003e46:	b21b      	sxth	r3, r3
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003e54:	ed9f 5b60 	vldr	d5, [pc, #384]	; 8003fd8 <Narwhal_Protocol+0xa38>
 8003e58:	ee86 7b05 	vdiv.f64	d7, d6, d5
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003e5c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e66:	443b      	add	r3, r7
 8003e68:	3bf0      	subs	r3, #240	; 0xf0
 8003e6a:	ed83 7b00 	vstr	d7, [r3]
				for (int i = 0; i < 3; i++) {
 8003e6e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003e72:	3301      	adds	r3, #1
 8003e74:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8003e78:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	ddd4      	ble.n	8003e2a <Narwhal_Protocol+0x88a>
				}
				double q_Feed[4];
				double Pne[3];
				q_Feed[0] = Control[0].PositionFeedback;
 8003e80:	4b62      	ldr	r3, [pc, #392]	; (800400c <Narwhal_Protocol+0xa6c>)
 8003e82:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003e86:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003e8a:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 8003e8e:	e9c1 2300 	strd	r2, r3, [r1]
				q_Feed[1] = Control[1].PositionFeedback;
 8003e92:	4b5e      	ldr	r3, [pc, #376]	; (800400c <Narwhal_Protocol+0xa6c>)
 8003e94:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8003e98:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003e9c:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 8003ea0:	e9c1 2302 	strd	r2, r3, [r1, #8]
				q_Feed[2] = Control[2].PositionFeedback;
 8003ea4:	4b59      	ldr	r3, [pc, #356]	; (800400c <Narwhal_Protocol+0xa6c>)
 8003ea6:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8003eaa:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003eae:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 8003eb2:	e9c1 2304 	strd	r2, r3, [r1, #16]
				q_Feed[3] = Control[3].PositionFeedback;
 8003eb6:	4b55      	ldr	r3, [pc, #340]	; (800400c <Narwhal_Protocol+0xa6c>)
 8003eb8:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8003ebc:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003ec0:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 8003ec4:	e9c1 2306 	strd	r2, r3, [r1, #24]

				FPK(q_Feed, 269.0f, Pne);
 8003ec8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003ecc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8003fe0 <Narwhal_Protocol+0xa40>
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fbc2 	bl	8002660 <FPK>
				double Time2MoveDynamic = 1.3;
 8003edc:	a342      	add	r3, pc, #264	; (adr r3, 8003fe8 <Narwhal_Protocol+0xa48>)
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
				Time2MoveDynamic += (sqrt(
						((Task[0] - Pne[0]) * (Task[0] - Pne[0]))
 8003ee6:	ed97 6b32 	vldr	d6, [r7, #200]	; 0xc8
 8003eea:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ef2:	ed93 7b00 	vldr	d7, [r3]
 8003ef6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003efa:	ed97 5b32 	vldr	d5, [r7, #200]	; 0xc8
 8003efe:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f06:	ed93 7b00 	vldr	d7, [r3]
 8003f0a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003f0e:	ee26 6b07 	vmul.f64	d6, d6, d7
								+ ((Task[1] - Pne[1]) * (Task[1] - Pne[1]))
 8003f12:	ed97 5b34 	vldr	d5, [r7, #208]	; 0xd0
 8003f16:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f1e:	ed93 7b02 	vldr	d7, [r3, #8]
 8003f22:	ee35 5b47 	vsub.f64	d5, d5, d7
 8003f26:	ed97 4b34 	vldr	d4, [r7, #208]	; 0xd0
 8003f2a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f32:	ed93 7b02 	vldr	d7, [r3, #8]
 8003f36:	ee34 7b47 	vsub.f64	d7, d4, d7
 8003f3a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003f3e:	ee36 6b07 	vadd.f64	d6, d6, d7
								+ ((Task[2] - Pne[2]) * (Task[2] - Pne[2]))))
 8003f42:	ed97 5b36 	vldr	d5, [r7, #216]	; 0xd8
 8003f46:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f4e:	ed93 7b04 	vldr	d7, [r3, #16]
 8003f52:	ee35 5b47 	vsub.f64	d5, d5, d7
 8003f56:	ed97 4b36 	vldr	d4, [r7, #216]	; 0xd8
 8003f5a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f62:	ed93 7b04 	vldr	d7, [r3, #16]
 8003f66:	ee34 7b47 	vsub.f64	d7, d4, d7
 8003f6a:	ee25 7b07 	vmul.f64	d7, d5, d7
				Time2MoveDynamic += (sqrt(
 8003f6e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f72:	eeb0 0b47 	vmov.f64	d0, d7
 8003f76:	f012 f86f 	bl	8016058 <sqrt>
 8003f7a:	eeb0 7b40 	vmov.f64	d7, d0
						* 0.0075;
 8003f7e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8003ff0 <Narwhal_Protocol+0xa50>
 8003f82:	ee27 7b06 	vmul.f64	d7, d7, d6
				Time2MoveDynamic += (sqrt(
 8003f86:	ed97 6b54 	vldr	d6, [r7, #336]	; 0x150
 8003f8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f8e:	ed87 7b54 	vstr	d7, [r7, #336]	; 0x150

				JMoveTaskSpace(Task, Time2MoveDynamic);
 8003f92:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003f96:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fdb8 	bl	8004b10 <JMoveTaskSpace>
				UART5_txBuffer[2] = 0x00;
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <Narwhal_Protocol+0xa78>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003fa6:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <Narwhal_Protocol+0xa78>)
 8003fa8:	22ff      	movs	r2, #255	; 0xff
 8003faa:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003fac:	2003      	movs	r0, #3
 8003fae:	f7ff fad7 	bl	8003560 <SentData>
				break;
 8003fb2:	e322      	b.n	80045fa <Narwhal_Protocol+0x105a>
			case 0xFF:
				/* Chess Move */
//				uint8_t ChessIndex[2];
				for (int i = 0; i < 2; i++) {
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003fba:	e03f      	b.n	800403c <Narwhal_Protocol+0xa9c>
 8003fbc:	f3af 8000 	nop.w
 8003fc0:	00000000 	.word	0x00000000
 8003fc4:	408f4000 	.word	0x408f4000
 8003fc8:	9999999a 	.word	0x9999999a
 8003fcc:	3fe99999 	.word	0x3fe99999
	...
 8003fdc:	40490000 	.word	0x40490000
 8003fe0:	00000000 	.word	0x00000000
 8003fe4:	4070d000 	.word	0x4070d000
 8003fe8:	cccccccd 	.word	0xcccccccd
 8003fec:	3ff4cccc 	.word	0x3ff4cccc
 8003ff0:	eb851eb8 	.word	0xeb851eb8
 8003ff4:	3f7eb851 	.word	0x3f7eb851
 8003ff8:	20000bd0 	.word	0x20000bd0
 8003ffc:	3ff00000 	.word	0x3ff00000
 8004000:	bff00000 	.word	0xbff00000
 8004004:	20000094 	.word	0x20000094
 8004008:	200009e0 	.word	0x200009e0
 800400c:	200004a8 	.word	0x200004a8
 8004010:	20000bd9 	.word	0x20000bd9
 8004014:	20000bdb 	.word	0x20000bdb
 8004018:	200000a4 	.word	0x200000a4
					ChessIndex[i] = (uint8_t) (UART5_rxBuffer[2 + i]);
 800401c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004020:	3302      	adds	r3, #2
 8004022:	4abf      	ldr	r2, [pc, #764]	; (8004320 <Narwhal_Protocol+0xd80>)
 8004024:	5cd1      	ldrb	r1, [r2, r3]
 8004026:	4abf      	ldr	r2, [pc, #764]	; (8004324 <Narwhal_Protocol+0xd84>)
 8004028:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800402c:	4413      	add	r3, r2
 800402e:	460a      	mov	r2, r1
 8004030:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 2; i++) {
 8004032:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004036:	3301      	adds	r3, #1
 8004038:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800403c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004040:	2b01      	cmp	r3, #1
 8004042:	ddeb      	ble.n	800401c <Narwhal_Protocol+0xa7c>
				}
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 8004044:	4bb6      	ldr	r3, [pc, #728]	; (8004320 <Narwhal_Protocol+0xd80>)
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	021b      	lsls	r3, r3, #8
						| (UART5_rxBuffer[5])) / 100.0f;
 800404a:	4ab5      	ldr	r2, [pc, #724]	; (8004320 <Narwhal_Protocol+0xd80>)
 800404c:	7952      	ldrb	r2, [r2, #5]
 800404e:	4313      	orrs	r3, r2
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 8004050:	ee07 3a90 	vmov	s15, r3
 8004054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						| (UART5_rxBuffer[5])) / 100.0f;
 8004058:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8004328 <Narwhal_Protocol+0xd88>
 800405c:	eec7 7a26 	vdiv.f32	s15, s14, s13
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 8004060:	4bb2      	ldr	r3, [pc, #712]	; (800432c <Narwhal_Protocol+0xd8c>)
 8004062:	edc3 7a00 	vstr	s15, [r3]

				if (ChessIndex[0] == 65 || ChessIndex[1] == 65){
 8004066:	4baf      	ldr	r3, [pc, #700]	; (8004324 <Narwhal_Protocol+0xd84>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b41      	cmp	r3, #65	; 0x41
 800406c:	d003      	beq.n	8004076 <Narwhal_Protocol+0xad6>
 800406e:	4bad      	ldr	r3, [pc, #692]	; (8004324 <Narwhal_Protocol+0xd84>)
 8004070:	785b      	ldrb	r3, [r3, #1]
 8004072:	2b41      	cmp	r3, #65	; 0x41
 8004074:	d102      	bne.n	800407c <Narwhal_Protocol+0xadc>
					ChessMoveStates = ChessMove_Finish;
 8004076:	4bae      	ldr	r3, [pc, #696]	; (8004330 <Narwhal_Protocol+0xd90>)
 8004078:	2209      	movs	r2, #9
 800407a:	701a      	strb	r2, [r3, #0]
				}

				Chess_Move_Start_Flag = 1;
 800407c:	4bad      	ldr	r3, [pc, #692]	; (8004334 <Narwhal_Protocol+0xd94>)
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x05;
 8004082:	4bad      	ldr	r3, [pc, #692]	; (8004338 <Narwhal_Protocol+0xd98>)
 8004084:	2205      	movs	r2, #5
 8004086:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8004088:	4bab      	ldr	r3, [pc, #684]	; (8004338 <Narwhal_Protocol+0xd98>)
 800408a:	22ff      	movs	r2, #255	; 0xff
 800408c:	705a      	strb	r2, [r3, #1]
				SentData(3);
 800408e:	2003      	movs	r0, #3
 8004090:	f7ff fa66 	bl	8003560 <SentData>
				break;
 8004094:	e2b1      	b.n	80045fa <Narwhal_Protocol+0x105a>
				/* 		Data to MCU End	*/

				/* 		Sent Data to Master Start 	*/
			case 0xA0:
				/* System Status */
				UART5_txBuffer[1] = 0xEE;
 8004096:	4ba8      	ldr	r3, [pc, #672]	; (8004338 <Narwhal_Protocol+0xd98>)
 8004098:	22ee      	movs	r2, #238	; 0xee
 800409a:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 800409c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	4ba4      	ldr	r3, [pc, #656]	; (8004338 <Narwhal_Protocol+0xd98>)
 80040a8:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Temperature_Protocol & 0xFF);
 80040aa:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	4ba1      	ldr	r3, [pc, #644]	; (8004338 <Narwhal_Protocol+0xd98>)
 80040b2:	70da      	strb	r2, [r3, #3]
				SentData(4);
 80040b4:	2004      	movs	r0, #4
 80040b6:	f7ff fa53 	bl	8003560 <SentData>
				break;
 80040ba:	e29e      	b.n	80045fa <Narwhal_Protocol+0x105a>
			case 0xA1:
				/* Station Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 80040bc:	4b9e      	ldr	r3, [pc, #632]	; (8004338 <Narwhal_Protocol+0xd98>)
 80040be:	22ee      	movs	r2, #238	; 0xee
 80040c0:	705a      	strb	r2, [r3, #1]
				Chess_Board_Base_Encoder2Sent = (int)(Chess_Board_Base_Encoder * 1000.0f);
 80040c2:	4b9e      	ldr	r3, [pc, #632]	; (800433c <Narwhal_Protocol+0xd9c>)
 80040c4:	ed93 7b00 	vldr	d7, [r3]
 80040c8:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8004310 <Narwhal_Protocol+0xd70>
 80040cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80040d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80040d4:	ee17 3a90 	vmov	r3, s15
 80040d8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				UART5_txBuffer[2] = (uint8_t) ((Chess_Board_Base_Encoder2Sent >> 8) & 0xFF);
 80040dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80040e0:	121b      	asrs	r3, r3, #8
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	4b94      	ldr	r3, [pc, #592]	; (8004338 <Narwhal_Protocol+0xd98>)
 80040e6:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Chess_Board_Base_Encoder2Sent & 0xFF);
 80040e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	4b92      	ldr	r3, [pc, #584]	; (8004338 <Narwhal_Protocol+0xd98>)
 80040f0:	70da      	strb	r2, [r3, #3]
				SentData(4);
 80040f2:	2004      	movs	r0, #4
 80040f4:	f7ff fa34 	bl	8003560 <SentData>
				break;
 80040f8:	e27f      	b.n	80045fa <Narwhal_Protocol+0x105a>
			case 0xA2:
				/* Raw Joint Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 80040fa:	4b8f      	ldr	r3, [pc, #572]	; (8004338 <Narwhal_Protocol+0xd98>)
 80040fc:	22ee      	movs	r2, #238	; 0xee
 80040fe:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 8004100:	2300      	movs	r3, #0
 8004102:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004106:	e028      	b.n	800415a <Narwhal_Protocol+0xbba>
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Encoder[i].Position >> 8)
 8004108:	498d      	ldr	r1, [pc, #564]	; (8004340 <Narwhal_Protocol+0xda0>)
 800410a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	440b      	add	r3, r1
 8004118:	330e      	adds	r3, #14
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	b29a      	uxth	r2, r3
 8004120:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004124:	3301      	adds	r3, #1
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	b2d1      	uxtb	r1, r2
 800412a:	4a83      	ldr	r2, [pc, #524]	; (8004338 <Narwhal_Protocol+0xd98>)
 800412c:	54d1      	strb	r1, [r2, r3]
							& 0xFF);
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Encoder[i].Position & 0xFF);
 800412e:	4984      	ldr	r1, [pc, #528]	; (8004340 <Narwhal_Protocol+0xda0>)
 8004130:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	440b      	add	r3, r1
 800413e:	330e      	adds	r3, #14
 8004140:	881a      	ldrh	r2, [r3, #0]
 8004142:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	3303      	adds	r3, #3
 800414a:	b2d1      	uxtb	r1, r2
 800414c:	4a7a      	ldr	r2, [pc, #488]	; (8004338 <Narwhal_Protocol+0xd98>)
 800414e:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8004150:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004154:	3301      	adds	r3, #1
 8004156:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800415a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800415e:	2b03      	cmp	r3, #3
 8004160:	ddd2      	ble.n	8004108 <Narwhal_Protocol+0xb68>
				}
				SentData(12);
 8004162:	200c      	movs	r0, #12
 8004164:	f7ff f9fc 	bl	8003560 <SentData>
				break;
 8004168:	e247      	b.n	80045fa <Narwhal_Protocol+0x105a>
			case 0xAA:
				/* Joint Position */
				UART5_txBuffer[1] = 0xEE;
 800416a:	4b73      	ldr	r3, [pc, #460]	; (8004338 <Narwhal_Protocol+0xd98>)
 800416c:	22ee      	movs	r2, #238	; 0xee
 800416e:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 8004170:	2300      	movs	r3, #0
 8004172:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004176:	e02c      	b.n	80041d2 <Narwhal_Protocol+0xc32>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8004178:	4a72      	ldr	r2, [pc, #456]	; (8004344 <Narwhal_Protocol+0xda4>)
 800417a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800417e:	21d8      	movs	r1, #216	; 0xd8
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	3350      	adds	r3, #80	; 0x50
 8004188:	ed93 7b00 	vldr	d7, [r3]
							* 1000.0f);
 800418c:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8004310 <Narwhal_Protocol+0xd70>
 8004190:	ee27 7b06 	vmul.f64	d7, d7, d6
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8004194:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004198:	ee17 3a90 	vmov	r3, s15
 800419c:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80041a0:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 80041a4:	121b      	asrs	r3, r3, #8
 80041a6:	b21a      	sxth	r2, r3
 80041a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80041ac:	3301      	adds	r3, #1
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	b2d1      	uxtb	r1, r2
 80041b2:	4a61      	ldr	r2, [pc, #388]	; (8004338 <Narwhal_Protocol+0xd98>)
 80041b4:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80041b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	3303      	adds	r3, #3
 80041be:	f8b7 2128 	ldrh.w	r2, [r7, #296]	; 0x128
 80041c2:	b2d1      	uxtb	r1, r2
 80041c4:	4a5c      	ldr	r2, [pc, #368]	; (8004338 <Narwhal_Protocol+0xd98>)
 80041c6:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 80041c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80041cc:	3301      	adds	r3, #1
 80041ce:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80041d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	ddce      	ble.n	8004178 <Narwhal_Protocol+0xbd8>
				}
				UART5_txBuffer[10] = 0;
 80041da:	4b57      	ldr	r3, [pc, #348]	; (8004338 <Narwhal_Protocol+0xd98>)
 80041dc:	2200      	movs	r2, #0
 80041de:	729a      	strb	r2, [r3, #10]
				UART5_txBuffer[11] = 0;
 80041e0:	4b55      	ldr	r3, [pc, #340]	; (8004338 <Narwhal_Protocol+0xd98>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	72da      	strb	r2, [r3, #11]
				SentData(12);
 80041e6:	200c      	movs	r0, #12
 80041e8:	f7ff f9ba 	bl	8003560 <SentData>
				break;
 80041ec:	e205      	b.n	80045fa <Narwhal_Protocol+0x105a>
			case 0xAB:
				/* Task Space Position */
				UART5_txBuffer[1] = 0xEE;
 80041ee:	4b52      	ldr	r3, [pc, #328]	; (8004338 <Narwhal_Protocol+0xd98>)
 80041f0:	22ee      	movs	r2, #238	; 0xee
 80041f2:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */

				for (int i = 0; i < 4; i++) {
 80041f4:	2300      	movs	r3, #0
 80041f6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80041fa:	e018      	b.n	800422e <Narwhal_Protocol+0xc8e>
					q_in[i] = Control[i].PositionFeedback;
 80041fc:	4a51      	ldr	r2, [pc, #324]	; (8004344 <Narwhal_Protocol+0xda4>)
 80041fe:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004202:	21d8      	movs	r1, #216	; 0xd8
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	4413      	add	r3, r2
 800420a:	3350      	adds	r3, #80	; 0x50
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8004214:	f5a1 70ac 	sub.w	r0, r1, #344	; 0x158
 8004218:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 800421c:	00c9      	lsls	r1, r1, #3
 800421e:	4401      	add	r1, r0
 8004220:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8004224:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004228:	3301      	adds	r3, #1
 800422a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800422e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004232:	2b03      	cmp	r3, #3
 8004234:	dde2      	ble.n	80041fc <Narwhal_Protocol+0xc5c>
				}
				FPK(q_in, 269.0f, task);
 8004236:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800423a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800423e:	4611      	mov	r1, r2
 8004240:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8004318 <Narwhal_Protocol+0xd78>
 8004244:	4618      	mov	r0, r3
 8004246:	f7fe fa0b 	bl	8002660 <FPK>

				for (int i = 0; i < 3; i++) {
 800424a:	2300      	movs	r3, #0
 800424c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004250:	e02b      	b.n	80042aa <Narwhal_Protocol+0xd0a>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 8004252:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800425c:	443b      	add	r3, r7
 800425e:	3bd8      	subs	r3, #216	; 0xd8
 8004260:	ed93 7b00 	vldr	d7, [r3]
 8004264:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004268:	ee27 7b06 	vmul.f64	d7, d7, d6
 800426c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004270:	ee17 3a90 	vmov	r3, s15
 8004274:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8004278:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 800427c:	121b      	asrs	r3, r3, #8
 800427e:	b21a      	sxth	r2, r3
 8004280:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8004284:	3301      	adds	r3, #1
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	b2d1      	uxtb	r1, r2
 800428a:	4a2b      	ldr	r2, [pc, #172]	; (8004338 <Narwhal_Protocol+0xd98>)
 800428c:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 800428e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	3303      	adds	r3, #3
 8004296:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 800429a:	b2d1      	uxtb	r1, r2
 800429c:	4a26      	ldr	r2, [pc, #152]	; (8004338 <Narwhal_Protocol+0xd98>)
 800429e:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 80042a0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80042a4:	3301      	adds	r3, #1
 80042a6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80042aa:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	ddcf      	ble.n	8004252 <Narwhal_Protocol+0xcb2>
				}
				SentData(8);
 80042b2:	2008      	movs	r0, #8
 80042b4:	f7ff f954 	bl	8003560 <SentData>
				break;
 80042b8:	e19f      	b.n	80045fa <Narwhal_Protocol+0x105a>
			case 0xAF:
				/* UI Feedback */
				UART5_txBuffer[1] = 0xEE;
 80042ba:	4b1f      	ldr	r3, [pc, #124]	; (8004338 <Narwhal_Protocol+0xd98>)
 80042bc:	22ee      	movs	r2, #238	; 0xee
 80042be:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */
				for (int i = 0; i < 4; i++) {
 80042c0:	2300      	movs	r3, #0
 80042c2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80042c6:	e018      	b.n	80042fa <Narwhal_Protocol+0xd5a>
					q_in[i] = Control[i].PositionFeedback;
 80042c8:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <Narwhal_Protocol+0xda4>)
 80042ca:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80042ce:	21d8      	movs	r1, #216	; 0xd8
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	3350      	adds	r3, #80	; 0x50
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80042e0:	f5a1 70ac 	sub.w	r0, r1, #344	; 0x158
 80042e4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80042e8:	00c9      	lsls	r1, r1, #3
 80042ea:	4401      	add	r1, r0
 80042ec:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 80042f0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80042f4:	3301      	adds	r3, #1
 80042f6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80042fa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80042fe:	2b03      	cmp	r3, #3
 8004300:	dde2      	ble.n	80042c8 <Narwhal_Protocol+0xd28>
				}
				for (int i = 0; i < 4; i++) {
 8004302:	2300      	movs	r3, #0
 8004304:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004308:	e037      	b.n	800437a <Narwhal_Protocol+0xdda>
 800430a:	bf00      	nop
 800430c:	f3af 8000 	nop.w
 8004310:	00000000 	.word	0x00000000
 8004314:	408f4000 	.word	0x408f4000
 8004318:	00000000 	.word	0x00000000
 800431c:	4070d000 	.word	0x4070d000
 8004320:	20000094 	.word	0x20000094
 8004324:	20000be4 	.word	0x20000be4
 8004328:	42c80000 	.word	0x42c80000
 800432c:	20000be8 	.word	0x20000be8
 8004330:	20000bed 	.word	0x20000bed
 8004334:	20000bec 	.word	0x20000bec
 8004338:	200000a4 	.word	0x200000a4
 800433c:	20000b68 	.word	0x20000b68
 8004340:	200002c8 	.word	0x200002c8
 8004344:	200004a8 	.word	0x200004a8
					q_in_Set[i] = Control[i].PositionSetpoint;
 8004348:	4ab5      	ldr	r2, [pc, #724]	; (8004620 <Narwhal_Protocol+0x1080>)
 800434a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800434e:	21d8      	movs	r1, #216	; 0xd8
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	3348      	adds	r3, #72	; 0x48
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8004360:	f5a1 7098 	sub.w	r0, r1, #304	; 0x130
 8004364:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004368:	00c9      	lsls	r1, r1, #3
 800436a:	4401      	add	r1, r0
 800436c:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8004370:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8004374:	3301      	adds	r3, #1
 8004376:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800437a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800437e:	2b03      	cmp	r3, #3
 8004380:	dde2      	ble.n	8004348 <Narwhal_Protocol+0xda8>
				}
				FPK(q_in, 269.0f, task);
 8004382:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8004386:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800438a:	4611      	mov	r1, r2
 800438c:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8004610 <Narwhal_Protocol+0x1070>
 8004390:	4618      	mov	r0, r3
 8004392:	f7fe f965 	bl	8002660 <FPK>
				FPK(q_in_Set, 269.0f, d_Task_Set);
 8004396:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800439a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800439e:	4611      	mov	r1, r2
 80043a0:	ed9f 0b9b 	vldr	d0, [pc, #620]	; 8004610 <Narwhal_Protocol+0x1070>
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe f95b 	bl	8002660 <FPK>

				/* Station Encoder */
				Chess_Board_Base_Encoder2Sent = Chess_Board_Base_Encoder * 1000.0f;
 80043aa:	4b9e      	ldr	r3, [pc, #632]	; (8004624 <Narwhal_Protocol+0x1084>)
 80043ac:	ed93 7b00 	vldr	d7, [r3]
 80043b0:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8004618 <Narwhal_Protocol+0x1078>
 80043b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80043b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80043bc:	ee17 3a90 	vmov	r3, s15
 80043c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				UART5_txBuffer[2] = (uint8_t) ((Chess_Board_Base_Encoder2Sent >> 8) & 0xFF);
 80043c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80043c8:	121b      	asrs	r3, r3, #8
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	4b96      	ldr	r3, [pc, #600]	; (8004628 <Narwhal_Protocol+0x1088>)
 80043ce:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Chess_Board_Base_Encoder2Sent & 0xFF);
 80043d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	4b94      	ldr	r3, [pc, #592]	; (8004628 <Narwhal_Protocol+0x1088>)
 80043d8:	70da      	strb	r2, [r3, #3]

				/* Temp */
				UART5_txBuffer[4] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 80043da:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80043de:	0a1b      	lsrs	r3, r3, #8
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	4b90      	ldr	r3, [pc, #576]	; (8004628 <Narwhal_Protocol+0x1088>)
 80043e6:	711a      	strb	r2, [r3, #4]
				UART5_txBuffer[5] = (uint8_t) (Temperature_Protocol & 0xFF);
 80043e8:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	4b8e      	ldr	r3, [pc, #568]	; (8004628 <Narwhal_Protocol+0x1088>)
 80043f0:	715a      	strb	r2, [r3, #5]
				UART5_txBuffer[6] = (uint8_t) ((Temperature_Protocol2 >> 8) & 0xFF);
 80043f2:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	4b8a      	ldr	r3, [pc, #552]	; (8004628 <Narwhal_Protocol+0x1088>)
 80043fe:	719a      	strb	r2, [r3, #6]
				UART5_txBuffer[7] = (uint8_t) (Temperature_Protocol2 & 0xFF);
 8004400:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8004404:	b2da      	uxtb	r2, r3
 8004406:	4b88      	ldr	r3, [pc, #544]	; (8004628 <Narwhal_Protocol+0x1088>)
 8004408:	71da      	strb	r2, [r3, #7]

				/* Joint Current */
				for (int i = 0; i < 4; i++) {
 800440a:	2300      	movs	r3, #0
 800440c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004410:	e02c      	b.n	800446c <Narwhal_Protocol+0xecc>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8004412:	4a83      	ldr	r2, [pc, #524]	; (8004620 <Narwhal_Protocol+0x1080>)
 8004414:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004418:	21d8      	movs	r1, #216	; 0xd8
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	4413      	add	r3, r2
 8004420:	3350      	adds	r3, #80	; 0x50
 8004422:	ed93 7b00 	vldr	d7, [r3]
							* 1000.0f);
 8004426:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8004618 <Narwhal_Protocol+0x1078>
 800442a:	ee27 7b06 	vmul.f64	d7, d7, d6
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 800442e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004432:	ee17 3a90 	vmov	r3, s15
 8004436:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
					UART5_txBuffer[8 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 800443a:	f9b7 312c 	ldrsh.w	r3, [r7, #300]	; 0x12c
 800443e:	121b      	asrs	r3, r3, #8
 8004440:	b21a      	sxth	r2, r3
 8004442:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004446:	3304      	adds	r3, #4
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	b2d1      	uxtb	r1, r2
 800444c:	4a76      	ldr	r2, [pc, #472]	; (8004628 <Narwhal_Protocol+0x1088>)
 800444e:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[9 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8004450:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	3309      	adds	r3, #9
 8004458:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 800445c:	b2d1      	uxtb	r1, r2
 800445e:	4a72      	ldr	r2, [pc, #456]	; (8004628 <Narwhal_Protocol+0x1088>)
 8004460:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8004462:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004466:	3301      	adds	r3, #1
 8004468:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800446c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004470:	2b03      	cmp	r3, #3
 8004472:	ddce      	ble.n	8004412 <Narwhal_Protocol+0xe72>
				}
				UART5_txBuffer[16] = 0;
 8004474:	4b6c      	ldr	r3, [pc, #432]	; (8004628 <Narwhal_Protocol+0x1088>)
 8004476:	2200      	movs	r2, #0
 8004478:	741a      	strb	r2, [r3, #16]
				UART5_txBuffer[17] = 0;
 800447a:	4b6b      	ldr	r3, [pc, #428]	; (8004628 <Narwhal_Protocol+0x1088>)
 800447c:	2200      	movs	r2, #0
 800447e:	745a      	strb	r2, [r3, #17]

				/* Joint Set point*/
				for (int i = 0; i < 4; i++) {
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004486:	e029      	b.n	80044dc <Narwhal_Protocol+0xf3c>
					int16_t Buf = (int16_t) (SetPoint_Position[i] * 1000.0f);
 8004488:	4a68      	ldr	r2, [pc, #416]	; (800462c <Narwhal_Protocol+0x108c>)
 800448a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	ed93 7b00 	vldr	d7, [r3]
 8004496:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8004618 <Narwhal_Protocol+0x1078>
 800449a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800449e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80044a2:	ee17 3a90 	vmov	r3, s15
 80044a6:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
					UART5_txBuffer[18 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80044aa:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 80044ae:	121b      	asrs	r3, r3, #8
 80044b0:	b21a      	sxth	r2, r3
 80044b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80044b6:	3309      	adds	r3, #9
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	b2d1      	uxtb	r1, r2
 80044bc:	4a5a      	ldr	r2, [pc, #360]	; (8004628 <Narwhal_Protocol+0x1088>)
 80044be:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[19 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80044c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	3313      	adds	r3, #19
 80044c8:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 80044cc:	b2d1      	uxtb	r1, r2
 80044ce:	4a56      	ldr	r2, [pc, #344]	; (8004628 <Narwhal_Protocol+0x1088>)
 80044d0:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 80044d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80044d6:	3301      	adds	r3, #1
 80044d8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80044dc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	ddd1      	ble.n	8004488 <Narwhal_Protocol+0xee8>
				}
				UART5_txBuffer[26] = 0;
 80044e4:	4b50      	ldr	r3, [pc, #320]	; (8004628 <Narwhal_Protocol+0x1088>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	769a      	strb	r2, [r3, #26]
				UART5_txBuffer[27] = 0;
 80044ea:	4b4f      	ldr	r3, [pc, #316]	; (8004628 <Narwhal_Protocol+0x1088>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	76da      	strb	r2, [r3, #27]

				for (int i = 0; i < 3; i++) {
 80044f0:	2300      	movs	r3, #0
 80044f2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80044f6:	e02b      	b.n	8004550 <Narwhal_Protocol+0xfb0>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 80044f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004502:	443b      	add	r3, r7
 8004504:	3bd8      	subs	r3, #216	; 0xd8
 8004506:	ed93 7b00 	vldr	d7, [r3]
 800450a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800450e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004512:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004516:	ee17 3a90 	vmov	r3, s15
 800451a:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
					UART5_txBuffer[28 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 800451e:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8004522:	121b      	asrs	r3, r3, #8
 8004524:	b21a      	sxth	r2, r3
 8004526:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800452a:	330e      	adds	r3, #14
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	b2d1      	uxtb	r1, r2
 8004530:	4a3d      	ldr	r2, [pc, #244]	; (8004628 <Narwhal_Protocol+0x1088>)
 8004532:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[29 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8004534:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	331d      	adds	r3, #29
 800453c:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 8004540:	b2d1      	uxtb	r1, r2
 8004542:	4a39      	ldr	r2, [pc, #228]	; (8004628 <Narwhal_Protocol+0x1088>)
 8004544:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 8004546:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800454a:	3301      	adds	r3, #1
 800454c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8004550:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004554:	2b02      	cmp	r3, #2
 8004556:	ddcf      	ble.n	80044f8 <Narwhal_Protocol+0xf58>
				}
				UART5_txBuffer[34] = Chess_Move_Start_Flag;
 8004558:	4b35      	ldr	r3, [pc, #212]	; (8004630 <Narwhal_Protocol+0x1090>)
 800455a:	781a      	ldrb	r2, [r3, #0]
 800455c:	4b32      	ldr	r3, [pc, #200]	; (8004628 <Narwhal_Protocol+0x1088>)
 800455e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				for (int i = 0; i < 3; i++) {
 8004562:	2300      	movs	r3, #0
 8004564:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004568:	e02b      	b.n	80045c2 <Narwhal_Protocol+0x1022>
					int16_t Buf = (int16_t) (d_Task_Set[i] * 10.0f);
 800456a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004574:	443b      	add	r3, r7
 8004576:	3bc0      	subs	r3, #192	; 0xc0
 8004578:	ed93 7b00 	vldr	d7, [r3]
 800457c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004580:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004584:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004588:	ee17 3a90 	vmov	r3, s15
 800458c:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
					UART5_txBuffer[35 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8004590:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 8004594:	121b      	asrs	r3, r3, #8
 8004596:	b21a      	sxth	r2, r3
 8004598:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	3323      	adds	r3, #35	; 0x23
 80045a0:	b2d1      	uxtb	r1, r2
 80045a2:	4a21      	ldr	r2, [pc, #132]	; (8004628 <Narwhal_Protocol+0x1088>)
 80045a4:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[36 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80045a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80045aa:	3312      	adds	r3, #18
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 80045b2:	b2d1      	uxtb	r1, r2
 80045b4:	4a1c      	ldr	r2, [pc, #112]	; (8004628 <Narwhal_Protocol+0x1088>)
 80045b6:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 80045b8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80045bc:	3301      	adds	r3, #1
 80045be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80045c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	ddcf      	ble.n	800456a <Narwhal_Protocol+0xfca>
				}
				SentData(41);
 80045ca:	2029      	movs	r0, #41	; 0x29
 80045cc:	f7fe ffc8 	bl	8003560 <SentData>
				break;
 80045d0:	e013      	b.n	80045fa <Narwhal_Protocol+0x105a>
			default:
				UART5_txBuffer[2] = 0xFF;
 80045d2:	4b15      	ldr	r3, [pc, #84]	; (8004628 <Narwhal_Protocol+0x1088>)
 80045d4:	22ff      	movs	r2, #255	; 0xff
 80045d6:	709a      	strb	r2, [r3, #2]
				SentData(3);
 80045d8:	2003      	movs	r0, #3
 80045da:	f7fe ffc1 	bl	8003560 <SentData>
 80045de:	e00c      	b.n	80045fa <Narwhal_Protocol+0x105a>
				/* 		Sent Data to Master End 	*/
			}
		} else {
			/*		CRC Error		*/
			UART5_txBuffer[1] = 0xCC;
 80045e0:	4b11      	ldr	r3, [pc, #68]	; (8004628 <Narwhal_Protocol+0x1088>)
 80045e2:	22cc      	movs	r2, #204	; 0xcc
 80045e4:	705a      	strb	r2, [r3, #1]
			SentData(3);
 80045e6:	2003      	movs	r0, #3
 80045e8:	f7fe ffba 	bl	8003560 <SentData>
 80045ec:	e005      	b.n	80045fa <Narwhal_Protocol+0x105a>
		}
	} else {
		/*		Header Error	*/
		UART5_txBuffer[1] = 0xAA;
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <Narwhal_Protocol+0x1088>)
 80045f0:	22aa      	movs	r2, #170	; 0xaa
 80045f2:	705a      	strb	r2, [r3, #1]
		SentData(3);
 80045f4:	2003      	movs	r0, #3
 80045f6:	f7fe ffb3 	bl	8003560 <SentData>
	}
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 80045fa:	220e      	movs	r2, #14
 80045fc:	490d      	ldr	r1, [pc, #52]	; (8004634 <Narwhal_Protocol+0x1094>)
 80045fe:	480e      	ldr	r0, [pc, #56]	; (8004638 <Narwhal_Protocol+0x1098>)
 8004600:	f00e ff34 	bl	801346c <HAL_UART_Receive_IT>
}
 8004604:	bf00      	nop
 8004606:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 800460a:	46bd      	mov	sp, r7
 800460c:	bdb0      	pop	{r4, r5, r7, pc}
 800460e:	bf00      	nop
 8004610:	00000000 	.word	0x00000000
 8004614:	4070d000 	.word	0x4070d000
 8004618:	00000000 	.word	0x00000000
 800461c:	408f4000 	.word	0x408f4000
 8004620:	200004a8 	.word	0x200004a8
 8004624:	20000b68 	.word	0x20000b68
 8004628:	200000a4 	.word	0x200000a4
 800462c:	20000b80 	.word	0x20000b80
 8004630:	20000bec 	.word	0x20000bec
 8004634:	20000094 	.word	0x20000094
 8004638:	200011f4 	.word	0x200011f4
 800463c:	00000000 	.word	0x00000000

08004640 <Control_Function>:
	}
	Traj_Flag = 0x0F;
	Chessmove_State = 0;
}

inline void Control_Function() {
 8004640:	b5b0      	push	{r4, r5, r7, lr}
 8004642:	b0b8      	sub	sp, #224	; 0xe0
 8004644:	af00      	add	r7, sp, #0
	/***** Encoder Read *****/
	double J1, J2, J3, J4;
	J1 = EncPulse2Rad_Read(&Encoder[0], 1);
 8004646:	2101      	movs	r1, #1
 8004648:	48c7      	ldr	r0, [pc, #796]	; (8004968 <Control_Function+0x328>)
 800464a:	f7fb ffe3 	bl	8000614 <EncPulse2Rad_Read>
 800464e:	ed87 0b32 	vstr	d0, [r7, #200]	; 0xc8
	J2 = EncPulse2Rad_Read(&Encoder[1], 0);
 8004652:	2100      	movs	r1, #0
 8004654:	48c5      	ldr	r0, [pc, #788]	; (800496c <Control_Function+0x32c>)
 8004656:	f7fb ffdd 	bl	8000614 <EncPulse2Rad_Read>
 800465a:	ed87 0b30 	vstr	d0, [r7, #192]	; 0xc0
	J3 = EncPulse2Rad_Read(&Encoder[2], 0);
 800465e:	2100      	movs	r1, #0
 8004660:	48c3      	ldr	r0, [pc, #780]	; (8004970 <Control_Function+0x330>)
 8004662:	f7fb ffd7 	bl	8000614 <EncPulse2Rad_Read>
 8004666:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
	J4 = EncPulse2Rad_Read(&Encoder[3], 0);
 800466a:	2100      	movs	r1, #0
 800466c:	48c1      	ldr	r0, [pc, #772]	; (8004974 <Control_Function+0x334>)
 800466e:	f7fb ffd1 	bl	8000614 <EncPulse2Rad_Read>
 8004672:	ed87 0b2c 	vstr	d0, [r7, #176]	; 0xb0

	BaseENC[0] = TIM2->CNT;
 8004676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	b29a      	uxth	r2, r3
 800467e:	4bbe      	ldr	r3, [pc, #760]	; (8004978 <Control_Function+0x338>)
 8004680:	801a      	strh	r2, [r3, #0]
	int ds = BaseENC[0] - BaseENC[1]; //find delta s
 8004682:	4bbd      	ldr	r3, [pc, #756]	; (8004978 <Control_Function+0x338>)
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	4bbb      	ldr	r3, [pc, #748]	; (8004978 <Control_Function+0x338>)
 800468a:	885b      	ldrh	r3, [r3, #2]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	BaseENC[1] = BaseENC[0];
 8004692:	4bb9      	ldr	r3, [pc, #740]	; (8004978 <Control_Function+0x338>)
 8004694:	881a      	ldrh	r2, [r3, #0]
 8004696:	4bb8      	ldr	r3, [pc, #736]	; (8004978 <Control_Function+0x338>)
 8004698:	805a      	strh	r2, [r3, #2]
	//Unwrapping position
	if (ds >= 1024) {
 800469a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800469e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a2:	db06      	blt.n	80046b2 <Control_Function+0x72>
		ds -= 2047;
 80046a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a8:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 80046ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80046b0:	e00a      	b.n	80046c8 <Control_Function+0x88>
	} else if (ds <= -1024) {
 80046b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b6:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 80046ba:	dc05      	bgt.n	80046c8 <Control_Function+0x88>
		ds += 2047;
 80046bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046c0:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80046c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	}
	Chess_Board_Base_Encoder += (ds/2048.0f)*2.0f*PI;
 80046c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046cc:	ee07 3a90 	vmov	s15, r3
 80046d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046d4:	eddf 6aa9 	vldr	s13, [pc, #676]	; 800497c <Control_Function+0x33c>
 80046d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80046e0:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8004980 <Control_Function+0x340>
 80046e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046e8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80046ec:	4ba5      	ldr	r3, [pc, #660]	; (8004984 <Control_Function+0x344>)
 80046ee:	ed93 7b00 	vldr	d7, [r3]
 80046f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80046f6:	4ba3      	ldr	r3, [pc, #652]	; (8004984 <Control_Function+0x344>)
 80046f8:	ed83 7b00 	vstr	d7, [r3]

	/***** Joint Space SetPoint Gen *****/
	if (Chessmove_State == 0) {
 80046fc:	4ba2      	ldr	r3, [pc, #648]	; (8004988 <Control_Function+0x348>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	f040 808d 	bne.w	8004820 <Control_Function+0x1e0>
		if (Traj_Flag & 0x0F) {
 8004706:	4ba1      	ldr	r3, [pc, #644]	; (800498c <Control_Function+0x34c>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 8173 	beq.w	80049fa <Control_Function+0x3ba>
			double traj_t_set[5];
			traj_t_set[0] = t;
 8004714:	4b9e      	ldr	r3, [pc, #632]	; (8004990 <Control_Function+0x350>)
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			traj_t_set[1] = t * t;
 800471e:	4b9c      	ldr	r3, [pc, #624]	; (8004990 <Control_Function+0x350>)
 8004720:	ed93 6b00 	vldr	d6, [r3]
 8004724:	4b9a      	ldr	r3, [pc, #616]	; (8004990 <Control_Function+0x350>)
 8004726:	ed93 7b00 	vldr	d7, [r3]
 800472a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800472e:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
			traj_t_set[2] = traj_t_set[1] * t;
 8004732:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8004736:	4b96      	ldr	r3, [pc, #600]	; (8004990 <Control_Function+0x350>)
 8004738:	ed93 7b00 	vldr	d7, [r3]
 800473c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004740:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
			traj_t_set[3] = traj_t_set[2] * t;
 8004744:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8004748:	4b91      	ldr	r3, [pc, #580]	; (8004990 <Control_Function+0x350>)
 800474a:	ed93 7b00 	vldr	d7, [r3]
 800474e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004752:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			traj_t_set[4] = traj_t_set[3] * t;
 8004756:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800475a:	4b8d      	ldr	r3, [pc, #564]	; (8004990 <Control_Function+0x350>)
 800475c:	ed93 7b00 	vldr	d7, [r3]
 8004760:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004764:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int i = 0; i < 4; i++) {
 8004768:	2300      	movs	r3, #0
 800476a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800476e:	e048      	b.n	8004802 <Control_Function+0x1c2>
				if (Traj_Flag & (0x01 << i)) {
 8004770:	4b86      	ldr	r3, [pc, #536]	; (800498c <Control_Function+0x34c>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800477a:	fa42 f303 	asr.w	r3, r2, r3
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d038      	beq.n	80047f8 <Control_Function+0x1b8>
					TrajFollow(&Traj[i], traj_t_set, &SetPoint_Position[i],
 8004786:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800478a:	4613      	mov	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4a80      	ldr	r2, [pc, #512]	; (8004994 <Control_Function+0x354>)
 8004794:	1898      	adds	r0, r3, r2
 8004796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	4a7e      	ldr	r2, [pc, #504]	; (8004998 <Control_Function+0x358>)
 800479e:	441a      	add	r2, r3
 80047a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	497d      	ldr	r1, [pc, #500]	; (800499c <Control_Function+0x35c>)
 80047a8:	440b      	add	r3, r1
 80047aa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80047ae:	f7fc fd25 	bl	80011fc <TrajFollow>
							&SetPoint_Velocity[i]);
					if (t >= Traj[i].T) {
 80047b2:	4978      	ldr	r1, [pc, #480]	; (8004994 <Control_Function+0x354>)
 80047b4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80047b8:	4613      	mov	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	440b      	add	r3, r1
 80047c2:	3330      	adds	r3, #48	; 0x30
 80047c4:	ed93 6b00 	vldr	d6, [r3]
 80047c8:	4b71      	ldr	r3, [pc, #452]	; (8004990 <Control_Function+0x350>)
 80047ca:	ed93 7b00 	vldr	d7, [r3]
 80047ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80047d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d6:	d80f      	bhi.n	80047f8 <Control_Function+0x1b8>
						Traj_Flag &= ((0x01 << i) ^ 0xFF);
 80047d8:	2201      	movs	r2, #1
 80047da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	b25b      	sxtb	r3, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	b25a      	sxtb	r2, r3
 80047e8:	4b68      	ldr	r3, [pc, #416]	; (800498c <Control_Function+0x34c>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	b25b      	sxtb	r3, r3
 80047ee:	4013      	ands	r3, r2
 80047f0:	b25b      	sxtb	r3, r3
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	4b65      	ldr	r3, [pc, #404]	; (800498c <Control_Function+0x34c>)
 80047f6:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 80047f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047fc:	3301      	adds	r3, #1
 80047fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004806:	2b03      	cmp	r3, #3
 8004808:	ddb2      	ble.n	8004770 <Control_Function+0x130>
					}
				}
			}
			t += delta_t;
 800480a:	4b61      	ldr	r3, [pc, #388]	; (8004990 <Control_Function+0x350>)
 800480c:	ed93 7b00 	vldr	d7, [r3]
 8004810:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8004960 <Control_Function+0x320>
 8004814:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004818:	4b5d      	ldr	r3, [pc, #372]	; (8004990 <Control_Function+0x350>)
 800481a:	ed83 7b00 	vstr	d7, [r3]
 800481e:	e0ec      	b.n	80049fa <Control_Function+0x3ba>
		}
	}

	else if (Chessmove_State == 1) {
 8004820:	4b59      	ldr	r3, [pc, #356]	; (8004988 <Control_Function+0x348>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b01      	cmp	r3, #1
 8004826:	f040 80e8 	bne.w	80049fa <Control_Function+0x3ba>
		if (Traj_Flag & 0x0F) {
 800482a:	4b58      	ldr	r3, [pc, #352]	; (800498c <Control_Function+0x34c>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 80e1 	beq.w	80049fa <Control_Function+0x3ba>
			double gamma[3] = { 1, 1, -1 };
 8004838:	4b59      	ldr	r3, [pc, #356]	; (80049a0 <Control_Function+0x360>)
 800483a:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800483e:	461d      	mov	r5, r3
 8004840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004844:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004848:	e884 0003 	stmia.w	r4, {r0, r1}
			//*********** Chi Output ************//
			double SetPointPosition[4];
			double SetPointVelocity[4];

			double traj_t_set[5];
			traj_t_set[0] = t;
 800484c:	4b50      	ldr	r3, [pc, #320]	; (8004990 <Control_Function+0x350>)
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			traj_t_set[1] = t * t;
 8004856:	4b4e      	ldr	r3, [pc, #312]	; (8004990 <Control_Function+0x350>)
 8004858:	ed93 6b00 	vldr	d6, [r3]
 800485c:	4b4c      	ldr	r3, [pc, #304]	; (8004990 <Control_Function+0x350>)
 800485e:	ed93 7b00 	vldr	d7, [r3]
 8004862:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004866:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
			traj_t_set[2] = traj_t_set[1] * t;
 800486a:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 800486e:	4b48      	ldr	r3, [pc, #288]	; (8004990 <Control_Function+0x350>)
 8004870:	ed93 7b00 	vldr	d7, [r3]
 8004874:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004878:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
			traj_t_set[3] = traj_t_set[2] * t;
 800487c:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8004880:	4b43      	ldr	r3, [pc, #268]	; (8004990 <Control_Function+0x350>)
 8004882:	ed93 7b00 	vldr	d7, [r3]
 8004886:	ee26 7b07 	vmul.f64	d7, d6, d7
 800488a:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			traj_t_set[4] = traj_t_set[3] * t;
 800488e:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8004892:	4b3f      	ldr	r3, [pc, #252]	; (8004990 <Control_Function+0x350>)
 8004894:	ed93 7b00 	vldr	d7, [r3]
 8004898:	ee26 7b07 	vmul.f64	d7, d6, d7
 800489c:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int i = 4; i < 7; i++) {
 80048a0:	2304      	movs	r3, #4
 80048a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80048a6:	e040      	b.n	800492a <Control_Function+0x2ea>
				TrajFollow(&Traj[i], traj_t_set, &Chi_t[i], &ChiDot_t[i]);
 80048a8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80048ac:	4613      	mov	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	4a37      	ldr	r2, [pc, #220]	; (8004994 <Control_Function+0x354>)
 80048b6:	1898      	adds	r0, r3, r2
 80048b8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80048bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	18d4      	adds	r4, r2, r3
 80048c4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80048c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	4413      	add	r3, r2
 80048d0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80048d4:	4622      	mov	r2, r4
 80048d6:	f7fc fc91 	bl	80011fc <TrajFollow>
				if (t >= Traj[i].T) {
 80048da:	492e      	ldr	r1, [pc, #184]	; (8004994 <Control_Function+0x354>)
 80048dc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80048e0:	4613      	mov	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	440b      	add	r3, r1
 80048ea:	3330      	adds	r3, #48	; 0x30
 80048ec:	ed93 6b00 	vldr	d6, [r3]
 80048f0:	4b27      	ldr	r3, [pc, #156]	; (8004990 <Control_Function+0x350>)
 80048f2:	ed93 7b00 	vldr	d7, [r3]
 80048f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80048fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fe:	d80f      	bhi.n	8004920 <Control_Function+0x2e0>
					Traj_Flag &= ((0x01 << i) ^ 0xFF);
 8004900:	2201      	movs	r2, #1
 8004902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	b25b      	sxtb	r3, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	b25a      	sxtb	r2, r3
 8004910:	4b1e      	ldr	r3, [pc, #120]	; (800498c <Control_Function+0x34c>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	b25b      	sxtb	r3, r3
 8004916:	4013      	ands	r3, r2
 8004918:	b25b      	sxtb	r3, r3
 800491a:	b2da      	uxtb	r2, r3
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <Control_Function+0x34c>)
 800491e:	701a      	strb	r2, [r3, #0]
			for (int i = 4; i < 7; i++) {
 8004920:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004924:	3301      	adds	r3, #1
 8004926:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800492a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800492e:	2b06      	cmp	r3, #6
 8004930:	ddba      	ble.n	80048a8 <Control_Function+0x268>
				}
			}
			IPK(gamma, Chi_t, SetPointPosition);
 8004932:	463a      	mov	r2, r7
 8004934:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8004938:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800493c:	4618      	mov	r0, r3
 800493e:	f7fd fa87 	bl	8001e50 <IPK>
			IVK(SetPointPosition, ChiDot_t, SetPointVelocity);
 8004942:	f107 0220 	add.w	r2, r7, #32
 8004946:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800494a:	463b      	mov	r3, r7
 800494c:	4618      	mov	r0, r3
 800494e:	f7fd fbab 	bl	80020a8 <IVK>
			for (int i = 0; i < 4; i++) {
 8004952:	2300      	movs	r3, #0
 8004954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004958:	e041      	b.n	80049de <Control_Function+0x39e>
 800495a:	bf00      	nop
 800495c:	f3af 8000 	nop.w
 8004960:	d2f1a9fc 	.word	0xd2f1a9fc
 8004964:	3f50624d 	.word	0x3f50624d
 8004968:	200002c8 	.word	0x200002c8
 800496c:	200002f0 	.word	0x200002f0
 8004970:	20000318 	.word	0x20000318
 8004974:	20000340 	.word	0x20000340
 8004978:	20000b70 	.word	0x20000b70
 800497c:	45000000 	.word	0x45000000
 8004980:	40490fdb 	.word	0x40490fdb
 8004984:	20000b68 	.word	0x20000b68
 8004988:	20000bdb 	.word	0x20000bdb
 800498c:	20000bd9 	.word	0x20000bd9
 8004990:	20000bd0 	.word	0x20000bd0
 8004994:	200009e0 	.word	0x200009e0
 8004998:	20000b80 	.word	0x20000b80
 800499c:	20000ba8 	.word	0x20000ba8
 80049a0:	08016fb0 	.word	0x08016fb0
				TrajFollow(&Traj[i], traj_t_set, &SetPointPosition[i],
 80049a4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049a8:	4613      	mov	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4a47      	ldr	r2, [pc, #284]	; (8004ad0 <Control_Function+0x490>)
 80049b2:	1898      	adds	r0, r3, r2
 80049b4:	463a      	mov	r2, r7
 80049b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	18d4      	adds	r4, r2, r3
 80049be:	f107 0220 	add.w	r2, r7, #32
 80049c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	4413      	add	r3, r2
 80049ca:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80049ce:	4622      	mov	r2, r4
 80049d0:	f7fc fc14 	bl	80011fc <TrajFollow>
			for (int i = 0; i < 4; i++) {
 80049d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80049d8:	3301      	adds	r3, #1
 80049da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	ddde      	ble.n	80049a4 <Control_Function+0x364>
						&SetPointVelocity[i]);
			}
			t += delta_t;
 80049e6:	4b3b      	ldr	r3, [pc, #236]	; (8004ad4 <Control_Function+0x494>)
 80049e8:	ed93 7b00 	vldr	d7, [r3]
 80049ec:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8004ac8 <Control_Function+0x488>
 80049f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80049f4:	4b37      	ldr	r3, [pc, #220]	; (8004ad4 <Control_Function+0x494>)
 80049f6:	ed83 7b00 	vstr	d7, [r3]
		}
	}

	CascadeControl(&Control[0], &Kalman[0], J1, SetPoint_Position[0], SetPoint_Velocity[0]);
 80049fa:	4b37      	ldr	r3, [pc, #220]	; (8004ad8 <Control_Function+0x498>)
 80049fc:	ed93 7b00 	vldr	d7, [r3]
 8004a00:	4b36      	ldr	r3, [pc, #216]	; (8004adc <Control_Function+0x49c>)
 8004a02:	ed93 6b00 	vldr	d6, [r3]
 8004a06:	eeb0 2b46 	vmov.f64	d2, d6
 8004a0a:	eeb0 1b47 	vmov.f64	d1, d7
 8004a0e:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 8004a12:	4933      	ldr	r1, [pc, #204]	; (8004ae0 <Control_Function+0x4a0>)
 8004a14:	4833      	ldr	r0, [pc, #204]	; (8004ae4 <Control_Function+0x4a4>)
 8004a16:	f7fc ff46 	bl	80018a6 <CascadeControl>
	CascadeControl(&Control[1], &Kalman[1], J2, SetPoint_Position[1], SetPoint_Velocity[1]);
 8004a1a:	4b2f      	ldr	r3, [pc, #188]	; (8004ad8 <Control_Function+0x498>)
 8004a1c:	ed93 7b02 	vldr	d7, [r3, #8]
 8004a20:	4b2e      	ldr	r3, [pc, #184]	; (8004adc <Control_Function+0x49c>)
 8004a22:	ed93 6b02 	vldr	d6, [r3, #8]
 8004a26:	eeb0 2b46 	vmov.f64	d2, d6
 8004a2a:	eeb0 1b47 	vmov.f64	d1, d7
 8004a2e:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8004a32:	492d      	ldr	r1, [pc, #180]	; (8004ae8 <Control_Function+0x4a8>)
 8004a34:	482d      	ldr	r0, [pc, #180]	; (8004aec <Control_Function+0x4ac>)
 8004a36:	f7fc ff36 	bl	80018a6 <CascadeControl>
	CascadeControl(&Control[2], &Kalman[2], J3, SetPoint_Position[2], SetPoint_Velocity[2]);
 8004a3a:	4b27      	ldr	r3, [pc, #156]	; (8004ad8 <Control_Function+0x498>)
 8004a3c:	ed93 7b04 	vldr	d7, [r3, #16]
 8004a40:	4b26      	ldr	r3, [pc, #152]	; (8004adc <Control_Function+0x49c>)
 8004a42:	ed93 6b04 	vldr	d6, [r3, #16]
 8004a46:	eeb0 2b46 	vmov.f64	d2, d6
 8004a4a:	eeb0 1b47 	vmov.f64	d1, d7
 8004a4e:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 8004a52:	4927      	ldr	r1, [pc, #156]	; (8004af0 <Control_Function+0x4b0>)
 8004a54:	4827      	ldr	r0, [pc, #156]	; (8004af4 <Control_Function+0x4b4>)
 8004a56:	f7fc ff26 	bl	80018a6 <CascadeControl>
	CascadeControl(&Control[3], &Kalman[3], J4, SetPoint_Position[3], SetPoint_Velocity[3]);
 8004a5a:	4b1f      	ldr	r3, [pc, #124]	; (8004ad8 <Control_Function+0x498>)
 8004a5c:	ed93 7b06 	vldr	d7, [r3, #24]
 8004a60:	4b1e      	ldr	r3, [pc, #120]	; (8004adc <Control_Function+0x49c>)
 8004a62:	ed93 6b06 	vldr	d6, [r3, #24]
 8004a66:	eeb0 2b46 	vmov.f64	d2, d6
 8004a6a:	eeb0 1b47 	vmov.f64	d1, d7
 8004a6e:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 8004a72:	4921      	ldr	r1, [pc, #132]	; (8004af8 <Control_Function+0x4b8>)
 8004a74:	4821      	ldr	r0, [pc, #132]	; (8004afc <Control_Function+0x4bc>)
 8004a76:	f7fc ff16 	bl	80018a6 <CascadeControl>

	Step_Driver(&Stepper[0], Control[0].Output);
 8004a7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ae4 <Control_Function+0x4a4>)
 8004a7c:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8004a80:	eeb0 0b47 	vmov.f64	d0, d7
 8004a84:	481e      	ldr	r0, [pc, #120]	; (8004b00 <Control_Function+0x4c0>)
 8004a86:	f7fc f9e3 	bl	8000e50 <Step_Driver>
	Step_Driver(&Stepper[1], Control[1].Output);
 8004a8a:	4b16      	ldr	r3, [pc, #88]	; (8004ae4 <Control_Function+0x4a4>)
 8004a8c:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8004a90:	eeb0 0b47 	vmov.f64	d0, d7
 8004a94:	481b      	ldr	r0, [pc, #108]	; (8004b04 <Control_Function+0x4c4>)
 8004a96:	f7fc f9db 	bl	8000e50 <Step_Driver>
	Step_Driver(&Stepper[2], Control[2].Output);
 8004a9a:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <Control_Function+0x4a4>)
 8004a9c:	ed93 7ba0 	vldr	d7, [r3, #640]	; 0x280
 8004aa0:	eeb0 0b47 	vmov.f64	d0, d7
 8004aa4:	4818      	ldr	r0, [pc, #96]	; (8004b08 <Control_Function+0x4c8>)
 8004aa6:	f7fc f9d3 	bl	8000e50 <Step_Driver>
	Step_Driver(&Stepper[3], Control[3].Output);
 8004aaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <Control_Function+0x4a4>)
 8004aac:	ed93 7bd6 	vldr	d7, [r3, #856]	; 0x358
 8004ab0:	eeb0 0b47 	vmov.f64	d0, d7
 8004ab4:	4815      	ldr	r0, [pc, #84]	; (8004b0c <Control_Function+0x4cc>)
 8004ab6:	f7fc f9cb 	bl	8000e50 <Step_Driver>
}
 8004aba:	bf00      	nop
 8004abc:	37e0      	adds	r7, #224	; 0xe0
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004acc:	3f50624d 	.word	0x3f50624d
 8004ad0:	200009e0 	.word	0x200009e0
 8004ad4:	20000bd0 	.word	0x20000bd0
 8004ad8:	20000b80 	.word	0x20000b80
 8004adc:	20000ba8 	.word	0x20000ba8
 8004ae0:	20000368 	.word	0x20000368
 8004ae4:	200004a8 	.word	0x200004a8
 8004ae8:	200003a8 	.word	0x200003a8
 8004aec:	20000580 	.word	0x20000580
 8004af0:	200003e8 	.word	0x200003e8
 8004af4:	20000658 	.word	0x20000658
 8004af8:	20000428 	.word	0x20000428
 8004afc:	20000730 	.word	0x20000730
 8004b00:	20000808 	.word	0x20000808
 8004b04:	2000081c 	.word	0x2000081c
 8004b08:	20000830 	.word	0x20000830
 8004b0c:	20000844 	.word	0x20000844

08004b10 <JMoveTaskSpace>:

inline void JMoveTaskSpace(double Task2Go[3], double Time2Move){
 8004b10:	b5b0      	push	{r4, r5, r7, lr}
 8004b12:	b094      	sub	sp, #80	; 0x50
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	ed87 0b00 	vstr	d0, [r7]
	double gamma[3] = { 1, 1, -1 };
 8004b1c:	4b2e      	ldr	r3, [pc, #184]	; (8004bd8 <JMoveTaskSpace+0xc8>)
 8004b1e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004b22:	461d      	mov	r5, r3
 8004b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004b2c:	e884 0003 	stmia.w	r4, {r0, r1}
	double q_inv[4];
	IPK(gamma, Task2Go, q_inv);
 8004b30:	f107 0210 	add.w	r2, r7, #16
 8004b34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b38:	68f9      	ldr	r1, [r7, #12]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fd f988 	bl	8001e50 <IPK>
	t = 0;
 8004b40:	4926      	ldr	r1, [pc, #152]	; (8004bdc <JMoveTaskSpace+0xcc>)
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 4; i++) {
 8004b4e:	2300      	movs	r3, #0
 8004b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b52:	e02f      	b.n	8004bb4 <JMoveTaskSpace+0xa4>
		Traj_Coeff_Cal(&Traj[i], Time2Move, q_inv[i], Control[i].PositionFeedback, 0,
 8004b54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b56:	4613      	mov	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4a20      	ldr	r2, [pc, #128]	; (8004be0 <JMoveTaskSpace+0xd0>)
 8004b60:	441a      	add	r2, r3
 8004b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	3350      	adds	r3, #80	; 0x50
 8004b68:	443b      	add	r3, r7
 8004b6a:	3b40      	subs	r3, #64	; 0x40
 8004b6c:	ed93 7b00 	vldr	d7, [r3]
 8004b70:	491c      	ldr	r1, [pc, #112]	; (8004be4 <JMoveTaskSpace+0xd4>)
 8004b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b74:	20d8      	movs	r0, #216	; 0xd8
 8004b76:	fb00 f303 	mul.w	r3, r0, r3
 8004b7a:	440b      	add	r3, r1
 8004b7c:	3350      	adds	r3, #80	; 0x50
 8004b7e:	ed93 6b00 	vldr	d6, [r3]
 8004b82:	4918      	ldr	r1, [pc, #96]	; (8004be4 <JMoveTaskSpace+0xd4>)
 8004b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b86:	20d8      	movs	r0, #216	; 0xd8
 8004b88:	fb00 f303 	mul.w	r3, r0, r3
 8004b8c:	440b      	add	r3, r1
 8004b8e:	33b8      	adds	r3, #184	; 0xb8
 8004b90:	ed93 5b00 	vldr	d5, [r3]
 8004b94:	eeb0 4b45 	vmov.f64	d4, d5
 8004b98:	ed9f 3b0d 	vldr	d3, [pc, #52]	; 8004bd0 <JMoveTaskSpace+0xc0>
 8004b9c:	eeb0 2b46 	vmov.f64	d2, d6
 8004ba0:	eeb0 1b47 	vmov.f64	d1, d7
 8004ba4:	ed97 0b00 	vldr	d0, [r7]
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f7fc fa79 	bl	80010a0 <Traj_Coeff_Cal>
	for (int i = 0; i < 4; i++) {
 8004bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	ddcc      	ble.n	8004b54 <JMoveTaskSpace+0x44>
				Control[i].VelocityFeedback);
	}
	Traj_Flag = 0x0F;
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <JMoveTaskSpace+0xd8>)
 8004bbc:	220f      	movs	r2, #15
 8004bbe:	701a      	strb	r2, [r3, #0]
	Chessmove_State = 0;
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <JMoveTaskSpace+0xdc>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	3750      	adds	r7, #80	; 0x50
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8004bce:	bf00      	nop
	...
 8004bd8:	08016fb0 	.word	0x08016fb0
 8004bdc:	20000bd0 	.word	0x20000bd0
 8004be0:	200009e0 	.word	0x200009e0
 8004be4:	200004a8 	.word	0x200004a8
 8004be8:	20000bd9 	.word	0x20000bd9
 8004bec:	20000bdb 	.word	0x20000bdb

08004bf0 <ChessNotMovePathWay>:
	}
	Traj_Flag = 0x0F;
	Chessmove_State = 1; // Change to TaskSpace Traj
}

inline void ChessNotMovePathWay(uint8_t Index2Move, double Z_Offset, uint8_t IsJMove) {
 8004bf0:	b5b0      	push	{r4, r5, r7, lr}
 8004bf2:	b0a6      	sub	sp, #152	; 0x98
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	ed87 0b00 	vstr	d0, [r7]
 8004bfc:	460a      	mov	r2, r1
 8004bfe:	73fb      	strb	r3, [r7, #15]
 8004c00:	4613      	mov	r3, r2
 8004c02:	73bb      	strb	r3, [r7, #14]
	/***** Encoder Read *****/
	double PositionXY[2];
	double SafePose[3] = {210, -270, 250};
 8004c04:	4b8a      	ldr	r3, [pc, #552]	; (8004e30 <ChessNotMovePathWay+0x240>)
 8004c06:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004c14:	e884 0003 	stmia.w	r4, {r0, r1}

	/***** Base Encoder Read *****/
//	BaseEnc = BaseENCRead();   //?????????????????????????????????????????????????????????
	ChessPose(Index2Move, Chess_Board_Base_Encoder, PositionXY);
 8004c18:	4b86      	ldr	r3, [pc, #536]	; (8004e34 <ChessNotMovePathWay+0x244>)
 8004c1a:	ed93 7b00 	vldr	d7, [r3]
 8004c1e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	4611      	mov	r1, r2
 8004c26:	eeb0 0b47 	vmov.f64	d0, d7
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fd ff44 	bl	8002ab8 <ChessPose>
	double q_Feed[4];
	double Pne[3];
	q_Feed[0] = Control[0].PositionFeedback;
 8004c30:	4b81      	ldr	r3, [pc, #516]	; (8004e38 <ChessNotMovePathWay+0x248>)
 8004c32:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004c36:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	q_Feed[1] = Control[1].PositionFeedback;
 8004c3a:	4b7f      	ldr	r3, [pc, #508]	; (8004e38 <ChessNotMovePathWay+0x248>)
 8004c3c:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8004c40:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	q_Feed[2] = Control[2].PositionFeedback;
 8004c44:	4b7c      	ldr	r3, [pc, #496]	; (8004e38 <ChessNotMovePathWay+0x248>)
 8004c46:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8004c4a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	q_Feed[3] = Control[3].PositionFeedback;
 8004c4e:	4b7a      	ldr	r3, [pc, #488]	; (8004e38 <ChessNotMovePathWay+0x248>)
 8004c50:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8004c54:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	FPK(q_Feed, 269.0f, Pne);
 8004c58:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c60:	4611      	mov	r1, r2
 8004c62:	ed9f 0b65 	vldr	d0, [pc, #404]	; 8004df8 <ChessNotMovePathWay+0x208>
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fd fcfa 	bl	8002660 <FPK>
	double Time2MoveDynamic = 1.2;
 8004c6c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004c70:	4b72      	ldr	r3, [pc, #456]	; (8004e3c <ChessNotMovePathWay+0x24c>)
 8004c72:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	Time2MoveDynamic += (sqrt(
			((PositionXY[0] - Pne[0]) * (PositionXY[0] - Pne[0]))
 8004c76:	ed97 6b1e 	vldr	d6, [r7, #120]	; 0x78
 8004c7a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004c7e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004c82:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8004c86:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004c8a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004c8e:	ee26 6b07 	vmul.f64	d6, d6, d7
					+ ((PositionXY[1] - Pne[1]) * (PositionXY[1] - Pne[1])))) * 0.01;
 8004c92:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8004c96:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004c9a:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004c9e:	ed97 4b20 	vldr	d4, [r7, #128]	; 0x80
 8004ca2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004ca6:	ee34 7b47 	vsub.f64	d7, d4, d7
 8004caa:	ee25 7b07 	vmul.f64	d7, d5, d7
	Time2MoveDynamic += (sqrt(
 8004cae:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004cb2:	eeb0 0b47 	vmov.f64	d0, d7
 8004cb6:	f011 f9cf 	bl	8016058 <sqrt>
 8004cba:	eeb0 7b40 	vmov.f64	d7, d0
					+ ((PositionXY[1] - Pne[1]) * (PositionXY[1] - Pne[1])))) * 0.01;
 8004cbe:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8004e00 <ChessNotMovePathWay+0x210>
 8004cc2:	ee27 7b06 	vmul.f64	d7, d7, d6
	Time2MoveDynamic += (sqrt(
 8004cc6:	ed97 6b22 	vldr	d6, [r7, #136]	; 0x88
 8004cca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004cce:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88

	double TaskSpace2Go[3];
	if (Index2Move == 64){
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	d11e      	bne.n	8004d16 <ChessNotMovePathWay+0x126>
		TaskSpace2Go[0] = SafePose[0];
 8004cd8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TaskSpace2Go[1] = SafePose[1];
 8004ce0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004ce4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		TaskSpace2Go[2] = SafePose[2];
 8004ce8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004cec:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (IsJMove) {
 8004cf0:	7bbb      	ldrb	r3, [r7, #14]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <ChessNotMovePathWay+0x116>
			JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 8004cf6:	f107 0310 	add.w	r3, r7, #16
 8004cfa:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff ff06 	bl	8004b10 <JMoveTaskSpace>
			JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
		} else {
			JMoveTaskSpace(TaskSpace2Go, 2);
		}
	}
}
 8004d04:	e073      	b.n	8004dee <ChessNotMovePathWay+0x1fe>
			JMoveTaskSpace(TaskSpace2Go, 1);
 8004d06:	f107 0310 	add.w	r3, r7, #16
 8004d0a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff fefe 	bl	8004b10 <JMoveTaskSpace>
}
 8004d14:	e06b      	b.n	8004dee <ChessNotMovePathWay+0x1fe>
		if (PositionXY[0] > 250 && PositionXY[0] < 450) {
 8004d16:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004d1a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8004e08 <ChessNotMovePathWay+0x218>
 8004d1e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d26:	dd17      	ble.n	8004d58 <ChessNotMovePathWay+0x168>
 8004d28:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004d2c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8004e10 <ChessNotMovePathWay+0x220>
 8004d30:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	d50e      	bpl.n	8004d58 <ChessNotMovePathWay+0x168>
			Z_Board_Offset = (PositionXY[0] - 250) * 0.05f;
 8004d3a:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004d3e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8004e08 <ChessNotMovePathWay+0x218>
 8004d42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d46:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8004e18 <ChessNotMovePathWay+0x228>
 8004d4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004d52:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 8004d56:	e01f      	b.n	8004d98 <ChessNotMovePathWay+0x1a8>
		} else if (PositionXY[0] > 450 && PositionXY[0] < 700) {
 8004d58:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004d5c:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8004e10 <ChessNotMovePathWay+0x220>
 8004d60:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d68:	dd16      	ble.n	8004d98 <ChessNotMovePathWay+0x1a8>
 8004d6a:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004d6e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8004e20 <ChessNotMovePathWay+0x230>
 8004d72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7a:	d50d      	bpl.n	8004d98 <ChessNotMovePathWay+0x1a8>
			Z_Board_Offset = (PositionXY[0] - 450) * 0.1f;
 8004d7c:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004d80:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8004e10 <ChessNotMovePathWay+0x220>
 8004d84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d88:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8004e28 <ChessNotMovePathWay+0x238>
 8004d8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004d94:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		TaskSpace2Go[0] = PositionXY[0];
 8004d98:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004d9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TaskSpace2Go[1] = PositionXY[1];
 8004da0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004da4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		TaskSpace2Go[2] = Z_Offset + ChessHight + Z_Board_Offset;
 8004da8:	4b25      	ldr	r3, [pc, #148]	; (8004e40 <ChessNotMovePathWay+0x250>)
 8004daa:	edd3 7a00 	vldr	s15, [r3]
 8004dae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004db2:	ed97 7b00 	vldr	d7, [r7]
 8004db6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004dba:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8004dbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004dc2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004dc6:	ed87 7b08 	vstr	d7, [r7, #32]
		if (IsJMove) {
 8004dca:	7bbb      	ldrb	r3, [r7, #14]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d007      	beq.n	8004de0 <ChessNotMovePathWay+0x1f0>
			JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 8004dd0:	f107 0310 	add.w	r3, r7, #16
 8004dd4:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff fe99 	bl	8004b10 <JMoveTaskSpace>
}
 8004dde:	e006      	b.n	8004dee <ChessNotMovePathWay+0x1fe>
			JMoveTaskSpace(TaskSpace2Go, 2);
 8004de0:	f107 0310 	add.w	r3, r7, #16
 8004de4:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fe91 	bl	8004b10 <JMoveTaskSpace>
}
 8004dee:	bf00      	nop
 8004df0:	3798      	adds	r7, #152	; 0x98
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bdb0      	pop	{r4, r5, r7, pc}
 8004df6:	bf00      	nop
 8004df8:	00000000 	.word	0x00000000
 8004dfc:	4070d000 	.word	0x4070d000
 8004e00:	47ae147b 	.word	0x47ae147b
 8004e04:	3f847ae1 	.word	0x3f847ae1
 8004e08:	00000000 	.word	0x00000000
 8004e0c:	406f4000 	.word	0x406f4000
 8004e10:	00000000 	.word	0x00000000
 8004e14:	407c2000 	.word	0x407c2000
 8004e18:	a0000000 	.word	0xa0000000
 8004e1c:	3fa99999 	.word	0x3fa99999
 8004e20:	00000000 	.word	0x00000000
 8004e24:	4085e000 	.word	0x4085e000
 8004e28:	a0000000 	.word	0xa0000000
 8004e2c:	3fb99999 	.word	0x3fb99999
 8004e30:	08016fc8 	.word	0x08016fc8
 8004e34:	20000b68 	.word	0x20000b68
 8004e38:	200004a8 	.word	0x200004a8
 8004e3c:	3ff33333 	.word	0x3ff33333
 8004e40:	20000be8 	.word	0x20000be8
 8004e44:	00000000 	.word	0x00000000

08004e48 <ChessMoveStateMachine>:

void ChessMoveStateMachine() {
 8004e48:	b5b0      	push	{r4, r5, r7, lr}
 8004e4a:	b098      	sub	sp, #96	; 0x60
 8004e4c:	af00      	add	r7, sp, #0
	static uint8_t ChangeState = 0;
	double Speed_Error = 0.05;
 8004e4e:	a3b1      	add	r3, pc, #708	; (adr r3, 8005114 <ChessMoveStateMachine+0x2cc>)
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double SafePose[3] = {210, -270, 250};
 8004e58:	4ba5      	ldr	r3, [pc, #660]	; (80050f0 <ChessMoveStateMachine+0x2a8>)
 8004e5a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004e5e:	461d      	mov	r5, r3
 8004e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004e68:	e884 0003 	stmia.w	r4, {r0, r1}
	double Time2MoveDynamic = 1.3;
 8004e6c:	a39e      	add	r3, pc, #632	; (adr r3, 80050e8 <ChessMoveStateMachine+0x2a0>)
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double q_Feed[4];
	double Pne[3];

	switch (ChessMoveStates) {
 8004e76:	4b9f      	ldr	r3, [pc, #636]	; (80050f4 <ChessMoveStateMachine+0x2ac>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b09      	cmp	r3, #9
 8004e7c:	f200 81b7 	bhi.w	80051ee <ChessMoveStateMachine+0x3a6>
 8004e80:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <ChessMoveStateMachine+0x40>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004eb1 	.word	0x08004eb1
 8004e8c:	08004ec9 	.word	0x08004ec9
 8004e90:	08004f1d 	.word	0x08004f1d
 8004e94:	08004f79 	.word	0x08004f79
 8004e98:	08004f89 	.word	0x08004f89
 8004e9c:	08004fdd 	.word	0x08004fdd
 8004ea0:	08005031 	.word	0x08005031
 8004ea4:	08005085 	.word	0x08005085
 8004ea8:	08005095 	.word	0x08005095
 8004eac:	0800511d 	.word	0x0800511d
	case Chess_idle:
		if (Chess_Move_Start_Flag) {
 8004eb0:	4b91      	ldr	r3, [pc, #580]	; (80050f8 <ChessMoveStateMachine+0x2b0>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 819c 	beq.w	80051f2 <ChessMoveStateMachine+0x3aa>
			ChessMoveStates = Move_2_Start_Top_Point;
 8004eba:	4b8e      	ldr	r3, [pc, #568]	; (80050f4 <ChessMoveStateMachine+0x2ac>)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	701a      	strb	r2, [r3, #0]
			ChangeState = 1;
 8004ec0:	4b8e      	ldr	r3, [pc, #568]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004ec6:	e194      	b.n	80051f2 <ChessMoveStateMachine+0x3aa>
	case Move_2_Start_Top_Point:
		if (ChangeState) {
 8004ec8:	4b8c      	ldr	r3, [pc, #560]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00d      	beq.n	8004eec <ChessMoveStateMachine+0xa4>
			ChessNotMovePathWay(ChessIndex[0], Z_TopOffset, 1);
 8004ed0:	4b8b      	ldr	r3, [pc, #556]	; (8005100 <ChessMoveStateMachine+0x2b8>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	4a8b      	ldr	r2, [pc, #556]	; (8005104 <ChessMoveStateMachine+0x2bc>)
 8004ed6:	ed92 7b00 	vldr	d7, [r2]
 8004eda:	2101      	movs	r1, #1
 8004edc:	eeb0 0b47 	vmov.f64	d0, d7
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff fe85 	bl	8004bf0 <ChessNotMovePathWay>
			ChangeState = 0;
 8004ee6:	4b85      	ldr	r3, [pc, #532]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004eec:	4b86      	ldr	r3, [pc, #536]	; (8005108 <ChessMoveStateMachine+0x2c0>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 8180 	bne.w	80051f6 <ChessMoveStateMachine+0x3ae>
			if(All_Joint_Speed_Avg() <= Speed_Error){
 8004ef6:	f000 f99d 	bl	8005234 <All_Joint_Speed_Avg>
 8004efa:	eeb0 6b40 	vmov.f64	d6, d0
 8004efe:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004f02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0a:	da00      	bge.n	8004f0e <ChessMoveStateMachine+0xc6>
				ChessMoveStates = Move_2_Start_Grip_Point;
				ChangeState = 1;
			}
		}
		break;
 8004f0c:	e173      	b.n	80051f6 <ChessMoveStateMachine+0x3ae>
				ChessMoveStates = Move_2_Start_Grip_Point;
 8004f0e:	4b79      	ldr	r3, [pc, #484]	; (80050f4 <ChessMoveStateMachine+0x2ac>)
 8004f10:	2202      	movs	r2, #2
 8004f12:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8004f14:	4b79      	ldr	r3, [pc, #484]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	701a      	strb	r2, [r3, #0]
		break;
 8004f1a:	e16c      	b.n	80051f6 <ChessMoveStateMachine+0x3ae>
	case Move_2_Start_Grip_Point:
		if (ChangeState) {
 8004f1c:	4b77      	ldr	r3, [pc, #476]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00d      	beq.n	8004f40 <ChessMoveStateMachine+0xf8>
			ChessNotMovePathWay(ChessIndex[0], Z_2GripOffset, 0);
 8004f24:	4b76      	ldr	r3, [pc, #472]	; (8005100 <ChessMoveStateMachine+0x2b8>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	4a78      	ldr	r2, [pc, #480]	; (800510c <ChessMoveStateMachine+0x2c4>)
 8004f2a:	ed92 7b00 	vldr	d7, [r2]
 8004f2e:	2100      	movs	r1, #0
 8004f30:	eeb0 0b47 	vmov.f64	d0, d7
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fe5b 	bl	8004bf0 <ChessNotMovePathWay>
			ChangeState = 0;
 8004f3a:	4b70      	ldr	r3, [pc, #448]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004f40:	4b71      	ldr	r3, [pc, #452]	; (8005108 <ChessMoveStateMachine+0x2c0>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f040 8158 	bne.w	80051fa <ChessMoveStateMachine+0x3b2>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8004f4a:	f000 f973 	bl	8005234 <All_Joint_Speed_Avg>
 8004f4e:	eeb0 6b40 	vmov.f64	d6, d0
 8004f52:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004f56:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5e:	da00      	bge.n	8004f62 <ChessMoveStateMachine+0x11a>
				ChessMoveStates = Move_2_Start_Point_and_Griping;
				Servo_Drive(&Servo[0], 110); //Ungrip
				ChangeState = 1;
			}
		}
		break;
 8004f60:	e14b      	b.n	80051fa <ChessMoveStateMachine+0x3b2>
				ChessMoveStates = Move_2_Start_Point_and_Griping;
 8004f62:	4b64      	ldr	r3, [pc, #400]	; (80050f4 <ChessMoveStateMachine+0x2ac>)
 8004f64:	2203      	movs	r2, #3
 8004f66:	701a      	strb	r2, [r3, #0]
				Servo_Drive(&Servo[0], 110); //Ungrip
 8004f68:	216e      	movs	r1, #110	; 0x6e
 8004f6a:	4869      	ldr	r0, [pc, #420]	; (8005110 <ChessMoveStateMachine+0x2c8>)
 8004f6c:	f7fc f83e 	bl	8000fec <Servo_Drive>
				ChangeState = 1;
 8004f70:	4b62      	ldr	r3, [pc, #392]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8004f72:	2201      	movs	r2, #1
 8004f74:	701a      	strb	r2, [r3, #0]
		break;
 8004f76:	e140      	b.n	80051fa <ChessMoveStateMachine+0x3b2>
	case Move_2_Start_Point_and_Griping:
		// Grip Chess
		Servo_Drive(&Servo[0], 0); //Grip
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4865      	ldr	r0, [pc, #404]	; (8005110 <ChessMoveStateMachine+0x2c8>)
 8004f7c:	f7fc f836 	bl	8000fec <Servo_Drive>

		ChessMoveStates = Back_2_Start_Top_Point;
 8004f80:	4b5c      	ldr	r3, [pc, #368]	; (80050f4 <ChessMoveStateMachine+0x2ac>)
 8004f82:	2204      	movs	r2, #4
 8004f84:	701a      	strb	r2, [r3, #0]
		break;
 8004f86:	e141      	b.n	800520c <ChessMoveStateMachine+0x3c4>
	case Back_2_Start_Top_Point:
		if (ChangeState) {
 8004f88:	4b5c      	ldr	r3, [pc, #368]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00d      	beq.n	8004fac <ChessMoveStateMachine+0x164>
			ChessNotMovePathWay(ChessIndex[0], Z_TopOffset, 0);
 8004f90:	4b5b      	ldr	r3, [pc, #364]	; (8005100 <ChessMoveStateMachine+0x2b8>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	4a5b      	ldr	r2, [pc, #364]	; (8005104 <ChessMoveStateMachine+0x2bc>)
 8004f96:	ed92 7b00 	vldr	d7, [r2]
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	eeb0 0b47 	vmov.f64	d0, d7
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fe25 	bl	8004bf0 <ChessNotMovePathWay>
			ChangeState = 0;
 8004fa6:	4b55      	ldr	r3, [pc, #340]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004fac:	4b56      	ldr	r3, [pc, #344]	; (8005108 <ChessMoveStateMachine+0x2c0>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 8124 	bne.w	80051fe <ChessMoveStateMachine+0x3b6>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8004fb6:	f000 f93d 	bl	8005234 <All_Joint_Speed_Avg>
 8004fba:	eeb0 6b40 	vmov.f64	d6, d0
 8004fbe:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004fc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fca:	da00      	bge.n	8004fce <ChessMoveStateMachine+0x186>
				ChessMoveStates = Move_2_End_Top_Point;
				ChangeState = 1;
			}
		}
		break;
 8004fcc:	e117      	b.n	80051fe <ChessMoveStateMachine+0x3b6>
				ChessMoveStates = Move_2_End_Top_Point;
 8004fce:	4b49      	ldr	r3, [pc, #292]	; (80050f4 <ChessMoveStateMachine+0x2ac>)
 8004fd0:	2205      	movs	r2, #5
 8004fd2:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8004fd4:	4b49      	ldr	r3, [pc, #292]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	701a      	strb	r2, [r3, #0]
		break;
 8004fda:	e110      	b.n	80051fe <ChessMoveStateMachine+0x3b6>

		// Finish To Grip Chess

	case Move_2_End_Top_Point:
		if (ChangeState) {
 8004fdc:	4b47      	ldr	r3, [pc, #284]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00d      	beq.n	8005000 <ChessMoveStateMachine+0x1b8>
			ChessNotMovePathWay(ChessIndex[1], Z_TopOffset, 1);
 8004fe4:	4b46      	ldr	r3, [pc, #280]	; (8005100 <ChessMoveStateMachine+0x2b8>)
 8004fe6:	785b      	ldrb	r3, [r3, #1]
 8004fe8:	4a46      	ldr	r2, [pc, #280]	; (8005104 <ChessMoveStateMachine+0x2bc>)
 8004fea:	ed92 7b00 	vldr	d7, [r2]
 8004fee:	2101      	movs	r1, #1
 8004ff0:	eeb0 0b47 	vmov.f64	d0, d7
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff fdfb 	bl	8004bf0 <ChessNotMovePathWay>
			ChangeState = 0;
 8004ffa:	4b40      	ldr	r3, [pc, #256]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8005000:	4b41      	ldr	r3, [pc, #260]	; (8005108 <ChessMoveStateMachine+0x2c0>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	f040 80fc 	bne.w	8005202 <ChessMoveStateMachine+0x3ba>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 800500a:	f000 f913 	bl	8005234 <All_Joint_Speed_Avg>
 800500e:	eeb0 6b40 	vmov.f64	d6, d0
 8005012:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005016:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800501a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501e:	da00      	bge.n	8005022 <ChessMoveStateMachine+0x1da>
				ChessMoveStates = Move_2_End_Ungrip_Point;
				ChangeState = 1;
			}
		}
		break;
 8005020:	e0ef      	b.n	8005202 <ChessMoveStateMachine+0x3ba>
				ChessMoveStates = Move_2_End_Ungrip_Point;
 8005022:	4b34      	ldr	r3, [pc, #208]	; (80050f4 <ChessMoveStateMachine+0x2ac>)
 8005024:	2206      	movs	r2, #6
 8005026:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8005028:	4b34      	ldr	r3, [pc, #208]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 800502a:	2201      	movs	r2, #1
 800502c:	701a      	strb	r2, [r3, #0]
		break;
 800502e:	e0e8      	b.n	8005202 <ChessMoveStateMachine+0x3ba>
	case Move_2_End_Ungrip_Point:
		if (ChangeState) {
 8005030:	4b32      	ldr	r3, [pc, #200]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00d      	beq.n	8005054 <ChessMoveStateMachine+0x20c>
			ChessNotMovePathWay(ChessIndex[1], Z_2GripOffset, 0);
 8005038:	4b31      	ldr	r3, [pc, #196]	; (8005100 <ChessMoveStateMachine+0x2b8>)
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	4a33      	ldr	r2, [pc, #204]	; (800510c <ChessMoveStateMachine+0x2c4>)
 800503e:	ed92 7b00 	vldr	d7, [r2]
 8005042:	2100      	movs	r1, #0
 8005044:	eeb0 0b47 	vmov.f64	d0, d7
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fdd1 	bl	8004bf0 <ChessNotMovePathWay>
			ChangeState = 0;
 800504e:	4b2b      	ldr	r3, [pc, #172]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8005054:	4b2c      	ldr	r3, [pc, #176]	; (8005108 <ChessMoveStateMachine+0x2c0>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f040 80d4 	bne.w	8005206 <ChessMoveStateMachine+0x3be>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 800505e:	f000 f8e9 	bl	8005234 <All_Joint_Speed_Avg>
 8005062:	eeb0 6b40 	vmov.f64	d6, d0
 8005066:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800506a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005072:	da00      	bge.n	8005076 <ChessMoveStateMachine+0x22e>
				ChessMoveStates = Move_2_End_Point_and_Ungriping;
				ChangeState = 1;
			}
		}
		break;
 8005074:	e0c7      	b.n	8005206 <ChessMoveStateMachine+0x3be>
				ChessMoveStates = Move_2_End_Point_and_Ungriping;
 8005076:	4b1f      	ldr	r3, [pc, #124]	; (80050f4 <ChessMoveStateMachine+0x2ac>)
 8005078:	2207      	movs	r2, #7
 800507a:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 800507c:	4b1f      	ldr	r3, [pc, #124]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 800507e:	2201      	movs	r2, #1
 8005080:	701a      	strb	r2, [r3, #0]
		break;
 8005082:	e0c0      	b.n	8005206 <ChessMoveStateMachine+0x3be>
	case Move_2_End_Point_and_Ungriping:
		// Grip Chess
		Servo_Drive(&Servo[0], 110); //Ungrip
 8005084:	216e      	movs	r1, #110	; 0x6e
 8005086:	4822      	ldr	r0, [pc, #136]	; (8005110 <ChessMoveStateMachine+0x2c8>)
 8005088:	f7fb ffb0 	bl	8000fec <Servo_Drive>
		ChessMoveStates = Back_2_End_Top_Point;
 800508c:	4b19      	ldr	r3, [pc, #100]	; (80050f4 <ChessMoveStateMachine+0x2ac>)
 800508e:	2208      	movs	r2, #8
 8005090:	701a      	strb	r2, [r3, #0]
		break;
 8005092:	e0bb      	b.n	800520c <ChessMoveStateMachine+0x3c4>
	case Back_2_End_Top_Point:
		if (ChangeState) {
 8005094:	4b19      	ldr	r3, [pc, #100]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00d      	beq.n	80050b8 <ChessMoveStateMachine+0x270>
			ChessNotMovePathWay(ChessIndex[1], Z_TopOffset, 0);
 800509c:	4b18      	ldr	r3, [pc, #96]	; (8005100 <ChessMoveStateMachine+0x2b8>)
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	4a18      	ldr	r2, [pc, #96]	; (8005104 <ChessMoveStateMachine+0x2bc>)
 80050a2:	ed92 7b00 	vldr	d7, [r2]
 80050a6:	2100      	movs	r1, #0
 80050a8:	eeb0 0b47 	vmov.f64	d0, d7
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff fd9f 	bl	8004bf0 <ChessNotMovePathWay>
			ChangeState = 0;
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 80050b8:	4b13      	ldr	r3, [pc, #76]	; (8005108 <ChessMoveStateMachine+0x2c0>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f040 80a4 	bne.w	800520a <ChessMoveStateMachine+0x3c2>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 80050c2:	f000 f8b7 	bl	8005234 <All_Joint_Speed_Avg>
 80050c6:	eeb0 6b40 	vmov.f64	d6, d0
 80050ca:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80050ce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80050d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d6:	da00      	bge.n	80050da <ChessMoveStateMachine+0x292>
				ChessMoveStates = ChessMove_Finish;
				ChangeState = 1;
			}
		}
		break;
 80050d8:	e097      	b.n	800520a <ChessMoveStateMachine+0x3c2>
				ChessMoveStates = ChessMove_Finish;
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <ChessMoveStateMachine+0x2ac>)
 80050dc:	2209      	movs	r2, #9
 80050de:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 80050e0:	4b06      	ldr	r3, [pc, #24]	; (80050fc <ChessMoveStateMachine+0x2b4>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	701a      	strb	r2, [r3, #0]
		break;
 80050e6:	e090      	b.n	800520a <ChessMoveStateMachine+0x3c2>
 80050e8:	cccccccd 	.word	0xcccccccd
 80050ec:	3ff4cccc 	.word	0x3ff4cccc
 80050f0:	08016fc8 	.word	0x08016fc8
 80050f4:	20000bed 	.word	0x20000bed
 80050f8:	20000bec 	.word	0x20000bec
 80050fc:	20000c40 	.word	0x20000c40
 8005100:	20000be4 	.word	0x20000be4
 8005104:	20000000 	.word	0x20000000
 8005108:	20000bd9 	.word	0x20000bd9
 800510c:	20000008 	.word	0x20000008
 8005110:	20000858 	.word	0x20000858
 8005114:	9999999a 	.word	0x9999999a
 8005118:	3fa99999 	.word	0x3fa99999
	case ChessMove_Finish:
		q_Feed[0] = Control[0].PositionFeedback;
 800511c:	4b42      	ldr	r3, [pc, #264]	; (8005228 <ChessMoveStateMachine+0x3e0>)
 800511e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005122:	e9c7 2306 	strd	r2, r3, [r7, #24]
		q_Feed[1] = Control[1].PositionFeedback;
 8005126:	4b40      	ldr	r3, [pc, #256]	; (8005228 <ChessMoveStateMachine+0x3e0>)
 8005128:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 800512c:	e9c7 2308 	strd	r2, r3, [r7, #32]
		q_Feed[2] = Control[2].PositionFeedback;
 8005130:	4b3d      	ldr	r3, [pc, #244]	; (8005228 <ChessMoveStateMachine+0x3e0>)
 8005132:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8005136:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		q_Feed[3] = Control[3].PositionFeedback;
 800513a:	4b3b      	ldr	r3, [pc, #236]	; (8005228 <ChessMoveStateMachine+0x3e0>)
 800513c:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8005140:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		FPK(q_Feed, 269.0f, Pne);
 8005144:	463a      	mov	r2, r7
 8005146:	f107 0318 	add.w	r3, r7, #24
 800514a:	4611      	mov	r1, r2
 800514c:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8005218 <ChessMoveStateMachine+0x3d0>
 8005150:	4618      	mov	r0, r3
 8005152:	f7fd fa85 	bl	8002660 <FPK>
		Time2MoveDynamic += (sqrt(
				((SafePose[0] - Pne[0]) * (SafePose[0] - Pne[0]))
 8005156:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800515a:	ed97 7b00 	vldr	d7, [r7]
 800515e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005162:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8005166:	ed97 7b00 	vldr	d7, [r7]
 800516a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800516e:	ee26 6b07 	vmul.f64	d6, d6, d7
						+ ((SafePose[1] - Pne[1]) * (SafePose[1] - Pne[1]))
 8005172:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
 8005176:	ed97 7b02 	vldr	d7, [r7, #8]
 800517a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800517e:	ed97 4b10 	vldr	d4, [r7, #64]	; 0x40
 8005182:	ed97 7b02 	vldr	d7, [r7, #8]
 8005186:	ee34 7b47 	vsub.f64	d7, d4, d7
 800518a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800518e:	ee36 6b07 	vadd.f64	d6, d6, d7
						+ ((SafePose[2] - Pne[2]) * (SafePose[2] - Pne[2]))))
 8005192:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 8005196:	ed97 7b04 	vldr	d7, [r7, #16]
 800519a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800519e:	ed97 4b12 	vldr	d4, [r7, #72]	; 0x48
 80051a2:	ed97 7b04 	vldr	d7, [r7, #16]
 80051a6:	ee34 7b47 	vsub.f64	d7, d4, d7
 80051aa:	ee25 7b07 	vmul.f64	d7, d5, d7
		Time2MoveDynamic += (sqrt(
 80051ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051b2:	eeb0 0b47 	vmov.f64	d0, d7
 80051b6:	f010 ff4f 	bl	8016058 <sqrt>
 80051ba:	eeb0 7b40 	vmov.f64	d7, d0
				* 0.0075;
 80051be:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8005220 <ChessMoveStateMachine+0x3d8>
 80051c2:	ee27 7b06 	vmul.f64	d7, d7, d6
		Time2MoveDynamic += (sqrt(
 80051c6:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80051ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051ce:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

		JMoveTaskSpace(SafePose, Time2MoveDynamic);
 80051d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80051d6:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fc98 	bl	8004b10 <JMoveTaskSpace>
		Chess_Move_Start_Flag = 0;
 80051e0:	4b12      	ldr	r3, [pc, #72]	; (800522c <ChessMoveStateMachine+0x3e4>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]
		ChessMoveStates = Chess_idle;
 80051e6:	4b12      	ldr	r3, [pc, #72]	; (8005230 <ChessMoveStateMachine+0x3e8>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	701a      	strb	r2, [r3, #0]
		break;
 80051ec:	e00e      	b.n	800520c <ChessMoveStateMachine+0x3c4>
	default:
		break;
 80051ee:	bf00      	nop
 80051f0:	e00c      	b.n	800520c <ChessMoveStateMachine+0x3c4>
		break;
 80051f2:	bf00      	nop
 80051f4:	e00a      	b.n	800520c <ChessMoveStateMachine+0x3c4>
		break;
 80051f6:	bf00      	nop
 80051f8:	e008      	b.n	800520c <ChessMoveStateMachine+0x3c4>
		break;
 80051fa:	bf00      	nop
 80051fc:	e006      	b.n	800520c <ChessMoveStateMachine+0x3c4>
		break;
 80051fe:	bf00      	nop
 8005200:	e004      	b.n	800520c <ChessMoveStateMachine+0x3c4>
		break;
 8005202:	bf00      	nop
 8005204:	e002      	b.n	800520c <ChessMoveStateMachine+0x3c4>
		break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <ChessMoveStateMachine+0x3c4>
		break;
 800520a:	bf00      	nop
	}
}
 800520c:	bf00      	nop
 800520e:	3760      	adds	r7, #96	; 0x60
 8005210:	46bd      	mov	sp, r7
 8005212:	bdb0      	pop	{r4, r5, r7, pc}
 8005214:	f3af 8000 	nop.w
 8005218:	00000000 	.word	0x00000000
 800521c:	4070d000 	.word	0x4070d000
 8005220:	eb851eb8 	.word	0xeb851eb8
 8005224:	3f7eb851 	.word	0x3f7eb851
 8005228:	200004a8 	.word	0x200004a8
 800522c:	20000bec 	.word	0x20000bec
 8005230:	20000bed 	.word	0x20000bed

08005234 <All_Joint_Speed_Avg>:

double All_Joint_Speed_Avg(){
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
	double Buf;
	for (int i=4;i<4;i++){
 800523a:	2304      	movs	r3, #4
 800523c:	607b      	str	r3, [r7, #4]
 800523e:	e013      	b.n	8005268 <All_Joint_Speed_Avg+0x34>
		Buf += fabs(Control[i].VelocityFeedback);
 8005240:	4a12      	ldr	r2, [pc, #72]	; (800528c <All_Joint_Speed_Avg+0x58>)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	21d8      	movs	r1, #216	; 0xd8
 8005246:	fb01 f303 	mul.w	r3, r1, r3
 800524a:	4413      	add	r3, r2
 800524c:	33b8      	adds	r3, #184	; 0xb8
 800524e:	ed93 7b00 	vldr	d7, [r3]
 8005252:	eeb0 7bc7 	vabs.f64	d7, d7
 8005256:	ed97 6b02 	vldr	d6, [r7, #8]
 800525a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800525e:	ed87 7b02 	vstr	d7, [r7, #8]
	for (int i=4;i<4;i++){
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3301      	adds	r3, #1
 8005266:	607b      	str	r3, [r7, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b03      	cmp	r3, #3
 800526c:	dde8      	ble.n	8005240 <All_Joint_Speed_Avg+0xc>
	}
	return Buf/4.0f;
 800526e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005272:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005276:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800527a:	eeb0 7b45 	vmov.f64	d7, d5
}
 800527e:	eeb0 0b47 	vmov.f64	d0, d7
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	200004a8 	.word	0x200004a8

08005290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005294:	b672      	cpsid	i
}
 8005296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005298:	e7fe      	b.n	8005298 <Error_Handler+0x8>
	...

0800529c <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80052a0:	4b28      	ldr	r3, [pc, #160]	; (8005344 <MX_SPI3_Init+0xa8>)
 80052a2:	4a29      	ldr	r2, [pc, #164]	; (8005348 <MX_SPI3_Init+0xac>)
 80052a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80052a6:	4b27      	ldr	r3, [pc, #156]	; (8005344 <MX_SPI3_Init+0xa8>)
 80052a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80052ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80052ae:	4b25      	ldr	r3, [pc, #148]	; (8005344 <MX_SPI3_Init+0xa8>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80052b4:	4b23      	ldr	r3, [pc, #140]	; (8005344 <MX_SPI3_Init+0xa8>)
 80052b6:	2207      	movs	r2, #7
 80052b8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052ba:	4b22      	ldr	r3, [pc, #136]	; (8005344 <MX_SPI3_Init+0xa8>)
 80052bc:	2200      	movs	r2, #0
 80052be:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80052c0:	4b20      	ldr	r3, [pc, #128]	; (8005344 <MX_SPI3_Init+0xa8>)
 80052c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80052c8:	4b1e      	ldr	r3, [pc, #120]	; (8005344 <MX_SPI3_Init+0xa8>)
 80052ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80052ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80052d0:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <MX_SPI3_Init+0xa8>)
 80052d2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80052d6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052d8:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <MX_SPI3_Init+0xa8>)
 80052da:	2200      	movs	r2, #0
 80052dc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80052de:	4b19      	ldr	r3, [pc, #100]	; (8005344 <MX_SPI3_Init+0xa8>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052e4:	4b17      	ldr	r3, [pc, #92]	; (8005344 <MX_SPI3_Init+0xa8>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 80052ea:	4b16      	ldr	r3, [pc, #88]	; (8005344 <MX_SPI3_Init+0xa8>)
 80052ec:	221d      	movs	r2, #29
 80052ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80052f0:	4b14      	ldr	r3, [pc, #80]	; (8005344 <MX_SPI3_Init+0xa8>)
 80052f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052f6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80052f8:	4b12      	ldr	r3, [pc, #72]	; (8005344 <MX_SPI3_Init+0xa8>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80052fe:	4b11      	ldr	r3, [pc, #68]	; (8005344 <MX_SPI3_Init+0xa8>)
 8005300:	2200      	movs	r2, #0
 8005302:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005304:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <MX_SPI3_Init+0xa8>)
 8005306:	2200      	movs	r2, #0
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800530a:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <MX_SPI3_Init+0xa8>)
 800530c:	2200      	movs	r2, #0
 800530e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <MX_SPI3_Init+0xa8>)
 8005312:	2200      	movs	r2, #0
 8005314:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <MX_SPI3_Init+0xa8>)
 8005318:	2200      	movs	r2, #0
 800531a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <MX_SPI3_Init+0xa8>)
 800531e:	2200      	movs	r2, #0
 8005320:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8005322:	4b08      	ldr	r3, [pc, #32]	; (8005344 <MX_SPI3_Init+0xa8>)
 8005324:	2200      	movs	r2, #0
 8005326:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8005328:	4b06      	ldr	r3, [pc, #24]	; (8005344 <MX_SPI3_Init+0xa8>)
 800532a:	2200      	movs	r2, #0
 800532c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800532e:	4805      	ldr	r0, [pc, #20]	; (8005344 <MX_SPI3_Init+0xa8>)
 8005330:	f00b fa9e 	bl	8010870 <HAL_SPI_Init>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800533a:	f7ff ffa9 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800533e:	bf00      	nop
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000c44 	.word	0x20000c44
 8005348:	40003c00 	.word	0x40003c00

0800534c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8005350:	4b27      	ldr	r3, [pc, #156]	; (80053f0 <MX_SPI4_Init+0xa4>)
 8005352:	4a28      	ldr	r2, [pc, #160]	; (80053f4 <MX_SPI4_Init+0xa8>)
 8005354:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8005356:	4b26      	ldr	r3, [pc, #152]	; (80053f0 <MX_SPI4_Init+0xa4>)
 8005358:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800535c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800535e:	4b24      	ldr	r3, [pc, #144]	; (80053f0 <MX_SPI4_Init+0xa4>)
 8005360:	2200      	movs	r2, #0
 8005362:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8005364:	4b22      	ldr	r3, [pc, #136]	; (80053f0 <MX_SPI4_Init+0xa4>)
 8005366:	220f      	movs	r2, #15
 8005368:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800536a:	4b21      	ldr	r3, [pc, #132]	; (80053f0 <MX_SPI4_Init+0xa4>)
 800536c:	2200      	movs	r2, #0
 800536e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005370:	4b1f      	ldr	r3, [pc, #124]	; (80053f0 <MX_SPI4_Init+0xa4>)
 8005372:	2200      	movs	r2, #0
 8005374:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8005376:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <MX_SPI4_Init+0xa4>)
 8005378:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800537c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800537e:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <MX_SPI4_Init+0xa4>)
 8005380:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005384:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005386:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <MX_SPI4_Init+0xa4>)
 8005388:	2200      	movs	r2, #0
 800538a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800538c:	4b18      	ldr	r3, [pc, #96]	; (80053f0 <MX_SPI4_Init+0xa4>)
 800538e:	2200      	movs	r2, #0
 8005390:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005392:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <MX_SPI4_Init+0xa4>)
 8005394:	2200      	movs	r2, #0
 8005396:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8005398:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <MX_SPI4_Init+0xa4>)
 800539a:	2200      	movs	r2, #0
 800539c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800539e:	4b14      	ldr	r3, [pc, #80]	; (80053f0 <MX_SPI4_Init+0xa4>)
 80053a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80053a4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <MX_SPI4_Init+0xa4>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80053ac:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <MX_SPI4_Init+0xa4>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80053b2:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <MX_SPI4_Init+0xa4>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80053b8:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <MX_SPI4_Init+0xa4>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80053be:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <MX_SPI4_Init+0xa4>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80053c4:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <MX_SPI4_Init+0xa4>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80053ca:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <MX_SPI4_Init+0xa4>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <MX_SPI4_Init+0xa4>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80053d6:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <MX_SPI4_Init+0xa4>)
 80053d8:	2200      	movs	r2, #0
 80053da:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80053dc:	4804      	ldr	r0, [pc, #16]	; (80053f0 <MX_SPI4_Init+0xa4>)
 80053de:	f00b fa47 	bl	8010870 <HAL_SPI_Init>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80053e8:	f7ff ff52 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80053ec:	bf00      	nop
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20000ccc 	.word	0x20000ccc
 80053f4:	40013400 	.word	0x40013400

080053f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b0b8      	sub	sp, #224	; 0xe0
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005400:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	609a      	str	r2, [r3, #8]
 800540c:	60da      	str	r2, [r3, #12]
 800540e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005410:	f107 0318 	add.w	r3, r7, #24
 8005414:	22b4      	movs	r2, #180	; 0xb4
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f010 fd79 	bl	8015f10 <memset>
  if(spiHandle->Instance==SPI3)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a4b      	ldr	r2, [pc, #300]	; (8005550 <HAL_SPI_MspInit+0x158>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d156      	bne.n	80054d6 <HAL_SPI_MspInit+0xde>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8005428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800542c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 800542e:	2319      	movs	r3, #25
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 8005432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005436:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8005438:	2302      	movs	r3, #2
 800543a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800543c:	2302      	movs	r3, #2
 800543e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8005440:	2302      	movs	r3, #2
 8005442:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8005444:	2300      	movs	r3, #0
 8005446:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8005448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800544c:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8005452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005456:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005458:	f107 0318 	add.w	r3, r7, #24
 800545c:	4618      	mov	r0, r3
 800545e:	f009 f973 	bl	800e748 <HAL_RCCEx_PeriphCLKConfig>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8005468:	f7ff ff12 	bl	8005290 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800546c:	4b39      	ldr	r3, [pc, #228]	; (8005554 <HAL_SPI_MspInit+0x15c>)
 800546e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005472:	4a38      	ldr	r2, [pc, #224]	; (8005554 <HAL_SPI_MspInit+0x15c>)
 8005474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005478:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800547c:	4b35      	ldr	r3, [pc, #212]	; (8005554 <HAL_SPI_MspInit+0x15c>)
 800547e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800548a:	4b32      	ldr	r3, [pc, #200]	; (8005554 <HAL_SPI_MspInit+0x15c>)
 800548c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005490:	4a30      	ldr	r2, [pc, #192]	; (8005554 <HAL_SPI_MspInit+0x15c>)
 8005492:	f043 0304 	orr.w	r3, r3, #4
 8005496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800549a:	4b2e      	ldr	r3, [pc, #184]	; (8005554 <HAL_SPI_MspInit+0x15c>)
 800549c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80054a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80054ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b0:	2302      	movs	r3, #2
 80054b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054bc:	2300      	movs	r3, #0
 80054be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80054c2:	2306      	movs	r3, #6
 80054c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80054cc:	4619      	mov	r1, r3
 80054ce:	4822      	ldr	r0, [pc, #136]	; (8005558 <HAL_SPI_MspInit+0x160>)
 80054d0:	f006 fc18 	bl	800bd04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80054d4:	e038      	b.n	8005548 <HAL_SPI_MspInit+0x150>
  else if(spiHandle->Instance==SPI4)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a20      	ldr	r2, [pc, #128]	; (800555c <HAL_SPI_MspInit+0x164>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d133      	bne.n	8005548 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80054e0:	4b1c      	ldr	r3, [pc, #112]	; (8005554 <HAL_SPI_MspInit+0x15c>)
 80054e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054e6:	4a1b      	ldr	r2, [pc, #108]	; (8005554 <HAL_SPI_MspInit+0x15c>)
 80054e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80054f0:	4b18      	ldr	r3, [pc, #96]	; (8005554 <HAL_SPI_MspInit+0x15c>)
 80054f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80054fe:	4b15      	ldr	r3, [pc, #84]	; (8005554 <HAL_SPI_MspInit+0x15c>)
 8005500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005504:	4a13      	ldr	r2, [pc, #76]	; (8005554 <HAL_SPI_MspInit+0x15c>)
 8005506:	f043 0310 	orr.w	r3, r3, #16
 800550a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800550e:	4b11      	ldr	r3, [pc, #68]	; (8005554 <HAL_SPI_MspInit+0x15c>)
 8005510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005514:	f003 0310 	and.w	r3, r3, #16
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 800551c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8005520:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005524:	2302      	movs	r3, #2
 8005526:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552a:	2300      	movs	r3, #0
 800552c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005530:	2300      	movs	r3, #0
 8005532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005536:	2305      	movs	r3, #5
 8005538:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800553c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005540:	4619      	mov	r1, r3
 8005542:	4807      	ldr	r0, [pc, #28]	; (8005560 <HAL_SPI_MspInit+0x168>)
 8005544:	f006 fbde 	bl	800bd04 <HAL_GPIO_Init>
}
 8005548:	bf00      	nop
 800554a:	37e0      	adds	r7, #224	; 0xe0
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40003c00 	.word	0x40003c00
 8005554:	58024400 	.word	0x58024400
 8005558:	58020800 	.word	0x58020800
 800555c:	40013400 	.word	0x40013400
 8005560:	58021000 	.word	0x58021000

08005564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800556a:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <HAL_MspInit+0x30>)
 800556c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005570:	4a08      	ldr	r2, [pc, #32]	; (8005594 <HAL_MspInit+0x30>)
 8005572:	f043 0302 	orr.w	r3, r3, #2
 8005576:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800557a:	4b06      	ldr	r3, [pc, #24]	; (8005594 <HAL_MspInit+0x30>)
 800557c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	607b      	str	r3, [r7, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	58024400 	.word	0x58024400

08005598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800559c:	e7fe      	b.n	800559c <NMI_Handler+0x4>

0800559e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800559e:	b480      	push	{r7}
 80055a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055a2:	e7fe      	b.n	80055a2 <HardFault_Handler+0x4>

080055a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055a8:	e7fe      	b.n	80055a8 <MemManage_Handler+0x4>

080055aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055aa:	b480      	push	{r7}
 80055ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055ae:	e7fe      	b.n	80055ae <BusFault_Handler+0x4>

080055b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055b4:	e7fe      	b.n	80055b4 <UsageFault_Handler+0x4>

080055b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055b6:	b480      	push	{r7}
 80055b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055ba:	bf00      	nop
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055c8:	bf00      	nop
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055d2:	b480      	push	{r7}
 80055d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055d6:	bf00      	nop
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055e4:	f001 fcbc 	bl	8006f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055e8:	bf00      	nop
 80055ea:	bd80      	pop	{r7, pc}

080055ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80055f0:	4802      	ldr	r0, [pc, #8]	; (80055fc <DMA1_Stream0_IRQHandler+0x10>)
 80055f2:	f005 fa13 	bl	800aa1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80055f6:	bf00      	nop
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	200013a4 	.word	0x200013a4

08005600 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8005604:	4802      	ldr	r0, [pc, #8]	; (8005610 <DMA1_Stream1_IRQHandler+0x10>)
 8005606:	f005 fa09 	bl	800aa1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800560a:	bf00      	nop
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	2000141c 	.word	0x2000141c

08005614 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8005618:	4802      	ldr	r0, [pc, #8]	; (8005624 <DMA1_Stream2_IRQHandler+0x10>)
 800561a:	f005 f9ff 	bl	800aa1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800561e:	bf00      	nop
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	2000117c 	.word	0x2000117c

08005628 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800562c:	4802      	ldr	r0, [pc, #8]	; (8005638 <I2C2_ER_IRQHandler+0x10>)
 800562e:	f006 ffbf 	bl	800c5b0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8005632:	bf00      	nop
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	2000026c 	.word	0x2000026c

0800563c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005640:	4802      	ldr	r0, [pc, #8]	; (800564c <USART3_IRQHandler+0x10>)
 8005642:	f00d ff69 	bl	8013518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005646:	bf00      	nop
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20001314 	.word	0x20001314

08005650 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005654:	4802      	ldr	r0, [pc, #8]	; (8005660 <UART5_IRQHandler+0x10>)
 8005656:	f00d ff5f 	bl	8013518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	200011f4 	.word	0x200011f4

08005664 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8005668:	4802      	ldr	r0, [pc, #8]	; (8005674 <ADC3_IRQHandler+0x10>)
 800566a:	f002 fae9 	bl	8007c40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	200001d4 	.word	0x200001d4

08005678 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 800567c:	4802      	ldr	r0, [pc, #8]	; (8005688 <TIM23_IRQHandler+0x10>)
 800567e:	f00c fd19 	bl	80120b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8005682:	bf00      	nop
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	200010e4 	.word	0x200010e4

0800568c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005690:	4b34      	ldr	r3, [pc, #208]	; (8005764 <SystemInit+0xd8>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005696:	4a33      	ldr	r2, [pc, #204]	; (8005764 <SystemInit+0xd8>)
 8005698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800569c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80056a0:	4b31      	ldr	r3, [pc, #196]	; (8005768 <SystemInit+0xdc>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	2b06      	cmp	r3, #6
 80056aa:	d807      	bhi.n	80056bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80056ac:	4b2e      	ldr	r3, [pc, #184]	; (8005768 <SystemInit+0xdc>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f023 030f 	bic.w	r3, r3, #15
 80056b4:	4a2c      	ldr	r2, [pc, #176]	; (8005768 <SystemInit+0xdc>)
 80056b6:	f043 0307 	orr.w	r3, r3, #7
 80056ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80056bc:	4b2b      	ldr	r3, [pc, #172]	; (800576c <SystemInit+0xe0>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a2a      	ldr	r2, [pc, #168]	; (800576c <SystemInit+0xe0>)
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80056c8:	4b28      	ldr	r3, [pc, #160]	; (800576c <SystemInit+0xe0>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80056ce:	4b27      	ldr	r3, [pc, #156]	; (800576c <SystemInit+0xe0>)
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4926      	ldr	r1, [pc, #152]	; (800576c <SystemInit+0xe0>)
 80056d4:	4b26      	ldr	r3, [pc, #152]	; (8005770 <SystemInit+0xe4>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80056da:	4b23      	ldr	r3, [pc, #140]	; (8005768 <SystemInit+0xdc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d007      	beq.n	80056f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80056e6:	4b20      	ldr	r3, [pc, #128]	; (8005768 <SystemInit+0xdc>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f023 030f 	bic.w	r3, r3, #15
 80056ee:	4a1e      	ldr	r2, [pc, #120]	; (8005768 <SystemInit+0xdc>)
 80056f0:	f043 0307 	orr.w	r3, r3, #7
 80056f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80056f6:	4b1d      	ldr	r3, [pc, #116]	; (800576c <SystemInit+0xe0>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80056fc:	4b1b      	ldr	r3, [pc, #108]	; (800576c <SystemInit+0xe0>)
 80056fe:	2200      	movs	r2, #0
 8005700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005702:	4b1a      	ldr	r3, [pc, #104]	; (800576c <SystemInit+0xe0>)
 8005704:	2200      	movs	r2, #0
 8005706:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005708:	4b18      	ldr	r3, [pc, #96]	; (800576c <SystemInit+0xe0>)
 800570a:	4a1a      	ldr	r2, [pc, #104]	; (8005774 <SystemInit+0xe8>)
 800570c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800570e:	4b17      	ldr	r3, [pc, #92]	; (800576c <SystemInit+0xe0>)
 8005710:	4a19      	ldr	r2, [pc, #100]	; (8005778 <SystemInit+0xec>)
 8005712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005714:	4b15      	ldr	r3, [pc, #84]	; (800576c <SystemInit+0xe0>)
 8005716:	4a19      	ldr	r2, [pc, #100]	; (800577c <SystemInit+0xf0>)
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800571a:	4b14      	ldr	r3, [pc, #80]	; (800576c <SystemInit+0xe0>)
 800571c:	2200      	movs	r2, #0
 800571e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005720:	4b12      	ldr	r3, [pc, #72]	; (800576c <SystemInit+0xe0>)
 8005722:	4a16      	ldr	r2, [pc, #88]	; (800577c <SystemInit+0xf0>)
 8005724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005726:	4b11      	ldr	r3, [pc, #68]	; (800576c <SystemInit+0xe0>)
 8005728:	2200      	movs	r2, #0
 800572a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800572c:	4b0f      	ldr	r3, [pc, #60]	; (800576c <SystemInit+0xe0>)
 800572e:	4a13      	ldr	r2, [pc, #76]	; (800577c <SystemInit+0xf0>)
 8005730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005732:	4b0e      	ldr	r3, [pc, #56]	; (800576c <SystemInit+0xe0>)
 8005734:	2200      	movs	r2, #0
 8005736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005738:	4b0c      	ldr	r3, [pc, #48]	; (800576c <SystemInit+0xe0>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a0b      	ldr	r2, [pc, #44]	; (800576c <SystemInit+0xe0>)
 800573e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005744:	4b09      	ldr	r3, [pc, #36]	; (800576c <SystemInit+0xe0>)
 8005746:	2200      	movs	r2, #0
 8005748:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800574a:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <SystemInit+0xf4>)
 800574c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005750:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005752:	4b04      	ldr	r3, [pc, #16]	; (8005764 <SystemInit+0xd8>)
 8005754:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005758:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800575a:	bf00      	nop
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	e000ed00 	.word	0xe000ed00
 8005768:	52002000 	.word	0x52002000
 800576c:	58024400 	.word	0x58024400
 8005770:	eaf6ed7f 	.word	0xeaf6ed7f
 8005774:	02020200 	.word	0x02020200
 8005778:	01ff0000 	.word	0x01ff0000
 800577c:	01010280 	.word	0x01010280
 8005780:	52004000 	.word	0x52004000

08005784 <MX_TIM1_Init>:
TIM_HandleTypeDef htim24;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b098      	sub	sp, #96	; 0x60
 8005788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800578a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	605a      	str	r2, [r3, #4]
 8005794:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005796:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	605a      	str	r2, [r3, #4]
 80057a0:	609a      	str	r2, [r3, #8]
 80057a2:	60da      	str	r2, [r3, #12]
 80057a4:	611a      	str	r2, [r3, #16]
 80057a6:	615a      	str	r2, [r3, #20]
 80057a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80057aa:	1d3b      	adds	r3, r7, #4
 80057ac:	2234      	movs	r2, #52	; 0x34
 80057ae:	2100      	movs	r1, #0
 80057b0:	4618      	mov	r0, r3
 80057b2:	f010 fbad 	bl	8015f10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80057b6:	4b39      	ldr	r3, [pc, #228]	; (800589c <MX_TIM1_Init+0x118>)
 80057b8:	4a39      	ldr	r2, [pc, #228]	; (80058a0 <MX_TIM1_Init+0x11c>)
 80057ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80057bc:	4b37      	ldr	r3, [pc, #220]	; (800589c <MX_TIM1_Init+0x118>)
 80057be:	2200      	movs	r2, #0
 80057c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057c2:	4b36      	ldr	r3, [pc, #216]	; (800589c <MX_TIM1_Init+0x118>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 343;
 80057c8:	4b34      	ldr	r3, [pc, #208]	; (800589c <MX_TIM1_Init+0x118>)
 80057ca:	f240 1257 	movw	r2, #343	; 0x157
 80057ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057d0:	4b32      	ldr	r3, [pc, #200]	; (800589c <MX_TIM1_Init+0x118>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80057d6:	4b31      	ldr	r3, [pc, #196]	; (800589c <MX_TIM1_Init+0x118>)
 80057d8:	2200      	movs	r2, #0
 80057da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80057dc:	4b2f      	ldr	r3, [pc, #188]	; (800589c <MX_TIM1_Init+0x118>)
 80057de:	2280      	movs	r2, #128	; 0x80
 80057e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80057e2:	482e      	ldr	r0, [pc, #184]	; (800589c <MX_TIM1_Init+0x118>)
 80057e4:	f00c f8c6 	bl	8011974 <HAL_TIM_PWM_Init>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80057ee:	f7ff fd4f 	bl	8005290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057f2:	2300      	movs	r3, #0
 80057f4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80057f6:	2300      	movs	r3, #0
 80057f8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80057fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005802:	4619      	mov	r1, r3
 8005804:	4825      	ldr	r0, [pc, #148]	; (800589c <MX_TIM1_Init+0x118>)
 8005806:	f00d fbdf 	bl	8012fc8 <HAL_TIMEx_MasterConfigSynchronization>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005810:	f7ff fd3e 	bl	8005290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005814:	2360      	movs	r3, #96	; 0x60
 8005816:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800581c:	2300      	movs	r3, #0
 800581e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005820:	2300      	movs	r3, #0
 8005822:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005824:	2304      	movs	r3, #4
 8005826:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005828:	2300      	movs	r3, #0
 800582a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800582c:	2300      	movs	r3, #0
 800582e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005830:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005834:	2200      	movs	r2, #0
 8005836:	4619      	mov	r1, r3
 8005838:	4818      	ldr	r0, [pc, #96]	; (800589c <MX_TIM1_Init+0x118>)
 800583a:	f00c fd5b 	bl	80122f4 <HAL_TIM_PWM_ConfigChannel>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005844:	f7ff fd24 	bl	8005290 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005848:	2300      	movs	r3, #0
 800584a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800584c:	2300      	movs	r3, #0
 800584e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800585c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005860:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005866:	2300      	movs	r3, #0
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800586a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005874:	2300      	movs	r3, #0
 8005876:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005878:	1d3b      	adds	r3, r7, #4
 800587a:	4619      	mov	r1, r3
 800587c:	4807      	ldr	r0, [pc, #28]	; (800589c <MX_TIM1_Init+0x118>)
 800587e:	f00d fc3f 	bl	8013100 <HAL_TIMEx_ConfigBreakDeadTime>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8005888:	f7ff fd02 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800588c:	4803      	ldr	r0, [pc, #12]	; (800589c <MX_TIM1_Init+0x118>)
 800588e:	f000 ff5d 	bl	800674c <HAL_TIM_MspPostInit>

}
 8005892:	bf00      	nop
 8005894:	3760      	adds	r7, #96	; 0x60
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000d54 	.word	0x20000d54
 80058a0:	40010000 	.word	0x40010000

080058a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08c      	sub	sp, #48	; 0x30
 80058a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80058aa:	f107 030c 	add.w	r3, r7, #12
 80058ae:	2224      	movs	r2, #36	; 0x24
 80058b0:	2100      	movs	r1, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f010 fb2c 	bl	8015f10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058b8:	463b      	mov	r3, r7
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	605a      	str	r2, [r3, #4]
 80058c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80058c2:	4b21      	ldr	r3, [pc, #132]	; (8005948 <MX_TIM2_Init+0xa4>)
 80058c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80058ca:	4b1f      	ldr	r3, [pc, #124]	; (8005948 <MX_TIM2_Init+0xa4>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058d0:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <MX_TIM2_Init+0xa4>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2048;
 80058d6:	4b1c      	ldr	r3, [pc, #112]	; (8005948 <MX_TIM2_Init+0xa4>)
 80058d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058de:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <MX_TIM2_Init+0xa4>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80058e4:	4b18      	ldr	r3, [pc, #96]	; (8005948 <MX_TIM2_Init+0xa4>)
 80058e6:	2280      	movs	r2, #128	; 0x80
 80058e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80058ea:	2303      	movs	r3, #3
 80058ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80058f2:	2301      	movs	r3, #1
 80058f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80058fa:	230a      	movs	r3, #10
 80058fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80058fe:	2300      	movs	r3, #0
 8005900:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005902:	2301      	movs	r3, #1
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005906:	2300      	movs	r3, #0
 8005908:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800590a:	230a      	movs	r3, #10
 800590c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800590e:	f107 030c 	add.w	r3, r7, #12
 8005912:	4619      	mov	r1, r3
 8005914:	480c      	ldr	r0, [pc, #48]	; (8005948 <MX_TIM2_Init+0xa4>)
 8005916:	f00c fa99 	bl	8011e4c <HAL_TIM_Encoder_Init>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8005920:	f7ff fcb6 	bl	8005290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005924:	2300      	movs	r3, #0
 8005926:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005928:	2300      	movs	r3, #0
 800592a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800592c:	463b      	mov	r3, r7
 800592e:	4619      	mov	r1, r3
 8005930:	4805      	ldr	r0, [pc, #20]	; (8005948 <MX_TIM2_Init+0xa4>)
 8005932:	f00d fb49 	bl	8012fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800593c:	f7ff fca8 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005940:	bf00      	nop
 8005942:	3730      	adds	r7, #48	; 0x30
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000da0 	.word	0x20000da0

0800594c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08e      	sub	sp, #56	; 0x38
 8005950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	605a      	str	r2, [r3, #4]
 800595c:	609a      	str	r2, [r3, #8]
 800595e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005960:	f107 031c 	add.w	r3, r7, #28
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	605a      	str	r2, [r3, #4]
 800596a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800596c:	463b      	mov	r3, r7
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	605a      	str	r2, [r3, #4]
 8005974:	609a      	str	r2, [r3, #8]
 8005976:	60da      	str	r2, [r3, #12]
 8005978:	611a      	str	r2, [r3, #16]
 800597a:	615a      	str	r2, [r3, #20]
 800597c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800597e:	4b34      	ldr	r3, [pc, #208]	; (8005a50 <MX_TIM3_Init+0x104>)
 8005980:	4a34      	ldr	r2, [pc, #208]	; (8005a54 <MX_TIM3_Init+0x108>)
 8005982:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 275-1;
 8005984:	4b32      	ldr	r3, [pc, #200]	; (8005a50 <MX_TIM3_Init+0x104>)
 8005986:	f44f 7289 	mov.w	r2, #274	; 0x112
 800598a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800598c:	4b30      	ldr	r3, [pc, #192]	; (8005a50 <MX_TIM3_Init+0x104>)
 800598e:	2200      	movs	r2, #0
 8005990:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8005992:	4b2f      	ldr	r3, [pc, #188]	; (8005a50 <MX_TIM3_Init+0x104>)
 8005994:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005998:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800599a:	4b2d      	ldr	r3, [pc, #180]	; (8005a50 <MX_TIM3_Init+0x104>)
 800599c:	2200      	movs	r2, #0
 800599e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059a0:	4b2b      	ldr	r3, [pc, #172]	; (8005a50 <MX_TIM3_Init+0x104>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80059a6:	482a      	ldr	r0, [pc, #168]	; (8005a50 <MX_TIM3_Init+0x104>)
 80059a8:	f00b ff07 	bl	80117ba <HAL_TIM_Base_Init>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80059b2:	f7ff fc6d 	bl	8005290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80059b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80059bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059c0:	4619      	mov	r1, r3
 80059c2:	4823      	ldr	r0, [pc, #140]	; (8005a50 <MX_TIM3_Init+0x104>)
 80059c4:	f00c fdaa 	bl	801251c <HAL_TIM_ConfigClockSource>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80059ce:	f7ff fc5f 	bl	8005290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80059d2:	481f      	ldr	r0, [pc, #124]	; (8005a50 <MX_TIM3_Init+0x104>)
 80059d4:	f00b ffce 	bl	8011974 <HAL_TIM_PWM_Init>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80059de:	f7ff fc57 	bl	8005290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059e6:	2300      	movs	r3, #0
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80059ea:	f107 031c 	add.w	r3, r7, #28
 80059ee:	4619      	mov	r1, r3
 80059f0:	4817      	ldr	r0, [pc, #92]	; (8005a50 <MX_TIM3_Init+0x104>)
 80059f2:	f00d fae9 	bl	8012fc8 <HAL_TIMEx_MasterConfigSynchronization>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80059fc:	f7ff fc48 	bl	8005290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a00:	2360      	movs	r3, #96	; 0x60
 8005a02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1999;
 8005a04:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8005a08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a12:	463b      	mov	r3, r7
 8005a14:	2200      	movs	r2, #0
 8005a16:	4619      	mov	r1, r3
 8005a18:	480d      	ldr	r0, [pc, #52]	; (8005a50 <MX_TIM3_Init+0x104>)
 8005a1a:	f00c fc6b 	bl	80122f4 <HAL_TIM_PWM_ConfigChannel>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8005a24:	f7ff fc34 	bl	8005290 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	2204      	movs	r2, #4
 8005a30:	4619      	mov	r1, r3
 8005a32:	4807      	ldr	r0, [pc, #28]	; (8005a50 <MX_TIM3_Init+0x104>)
 8005a34:	f00c fc5e 	bl	80122f4 <HAL_TIM_PWM_ConfigChannel>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8005a3e:	f7ff fc27 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005a42:	4803      	ldr	r0, [pc, #12]	; (8005a50 <MX_TIM3_Init+0x104>)
 8005a44:	f000 fe82 	bl	800674c <HAL_TIM_MspPostInit>

}
 8005a48:	bf00      	nop
 8005a4a:	3738      	adds	r7, #56	; 0x38
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20000dec 	.word	0x20000dec
 8005a54:	40000400 	.word	0x40000400

08005a58 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08c      	sub	sp, #48	; 0x30
 8005a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005a5e:	f107 030c 	add.w	r3, r7, #12
 8005a62:	2224      	movs	r2, #36	; 0x24
 8005a64:	2100      	movs	r1, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f010 fa52 	bl	8015f10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a6c:	463b      	mov	r3, r7
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	605a      	str	r2, [r3, #4]
 8005a74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005a76:	4b21      	ldr	r3, [pc, #132]	; (8005afc <MX_TIM4_Init+0xa4>)
 8005a78:	4a21      	ldr	r2, [pc, #132]	; (8005b00 <MX_TIM4_Init+0xa8>)
 8005a7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005a7c:	4b1f      	ldr	r3, [pc, #124]	; (8005afc <MX_TIM4_Init+0xa4>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a82:	4b1e      	ldr	r3, [pc, #120]	; (8005afc <MX_TIM4_Init+0xa4>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8005a88:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <MX_TIM4_Init+0xa4>)
 8005a8a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8005a8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a90:	4b1a      	ldr	r3, [pc, #104]	; (8005afc <MX_TIM4_Init+0xa4>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a96:	4b19      	ldr	r3, [pc, #100]	; (8005afc <MX_TIM4_Init+0xa4>)
 8005a98:	2280      	movs	r2, #128	; 0x80
 8005a9a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005abc:	2300      	movs	r3, #0
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005ac0:	f107 030c 	add.w	r3, r7, #12
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	480d      	ldr	r0, [pc, #52]	; (8005afc <MX_TIM4_Init+0xa4>)
 8005ac8:	f00c f9c0 	bl	8011e4c <HAL_TIM_Encoder_Init>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005ad2:	f7ff fbdd 	bl	8005290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005ade:	463b      	mov	r3, r7
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4806      	ldr	r0, [pc, #24]	; (8005afc <MX_TIM4_Init+0xa4>)
 8005ae4:	f00d fa70 	bl	8012fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005aee:	f7ff fbcf 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005af2:	bf00      	nop
 8005af4:	3730      	adds	r7, #48	; 0x30
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000e38 	.word	0x20000e38
 8005b00:	40000800 	.word	0x40000800

08005b04 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08e      	sub	sp, #56	; 0x38
 8005b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	605a      	str	r2, [r3, #4]
 8005b14:	609a      	str	r2, [r3, #8]
 8005b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b18:	f107 031c 	add.w	r3, r7, #28
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b24:	463b      	mov	r3, r7
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	605a      	str	r2, [r3, #4]
 8005b2c:	609a      	str	r2, [r3, #8]
 8005b2e:	60da      	str	r2, [r3, #12]
 8005b30:	611a      	str	r2, [r3, #16]
 8005b32:	615a      	str	r2, [r3, #20]
 8005b34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005b36:	4b33      	ldr	r3, [pc, #204]	; (8005c04 <MX_TIM5_Init+0x100>)
 8005b38:	4a33      	ldr	r2, [pc, #204]	; (8005c08 <MX_TIM5_Init+0x104>)
 8005b3a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 8005b3c:	4b31      	ldr	r3, [pc, #196]	; (8005c04 <MX_TIM5_Init+0x100>)
 8005b3e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005b42:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b44:	4b2f      	ldr	r3, [pc, #188]	; (8005c04 <MX_TIM5_Init+0x100>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8005b4a:	4b2e      	ldr	r3, [pc, #184]	; (8005c04 <MX_TIM5_Init+0x100>)
 8005b4c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005b50:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b52:	4b2c      	ldr	r3, [pc, #176]	; (8005c04 <MX_TIM5_Init+0x100>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b58:	4b2a      	ldr	r3, [pc, #168]	; (8005c04 <MX_TIM5_Init+0x100>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005b5e:	4829      	ldr	r0, [pc, #164]	; (8005c04 <MX_TIM5_Init+0x100>)
 8005b60:	f00b fe2b 	bl	80117ba <HAL_TIM_Base_Init>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 8005b6a:	f7ff fb91 	bl	8005290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005b74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4822      	ldr	r0, [pc, #136]	; (8005c04 <MX_TIM5_Init+0x100>)
 8005b7c:	f00c fcce 	bl	801251c <HAL_TIM_ConfigClockSource>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 8005b86:	f7ff fb83 	bl	8005290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005b8a:	481e      	ldr	r0, [pc, #120]	; (8005c04 <MX_TIM5_Init+0x100>)
 8005b8c:	f00b fef2 	bl	8011974 <HAL_TIM_PWM_Init>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8005b96:	f7ff fb7b 	bl	8005290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005ba2:	f107 031c 	add.w	r3, r7, #28
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4816      	ldr	r0, [pc, #88]	; (8005c04 <MX_TIM5_Init+0x100>)
 8005baa:	f00d fa0d 	bl	8012fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8005bb4:	f7ff fb6c 	bl	8005290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005bb8:	2360      	movs	r3, #96	; 0x60
 8005bba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500-1;
 8005bbc:	f240 53db 	movw	r3, #1499	; 0x5db
 8005bc0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005bca:	463b      	mov	r3, r7
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4619      	mov	r1, r3
 8005bd0:	480c      	ldr	r0, [pc, #48]	; (8005c04 <MX_TIM5_Init+0x100>)
 8005bd2:	f00c fb8f 	bl	80122f4 <HAL_TIM_PWM_ConfigChannel>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8005bdc:	f7ff fb58 	bl	8005290 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005be0:	463b      	mov	r3, r7
 8005be2:	2204      	movs	r2, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	4807      	ldr	r0, [pc, #28]	; (8005c04 <MX_TIM5_Init+0x100>)
 8005be8:	f00c fb84 	bl	80122f4 <HAL_TIM_PWM_ConfigChannel>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8005bf2:	f7ff fb4d 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005bf6:	4803      	ldr	r0, [pc, #12]	; (8005c04 <MX_TIM5_Init+0x100>)
 8005bf8:	f000 fda8 	bl	800674c <HAL_TIM_MspPostInit>

}
 8005bfc:	bf00      	nop
 8005bfe:	3738      	adds	r7, #56	; 0x38
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	20000e84 	.word	0x20000e84
 8005c08:	40000c00 	.word	0x40000c00

08005c0c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c12:	1d3b      	adds	r3, r7, #4
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	605a      	str	r2, [r3, #4]
 8005c1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005c1c:	4b15      	ldr	r3, [pc, #84]	; (8005c74 <MX_TIM6_Init+0x68>)
 8005c1e:	4a16      	ldr	r2, [pc, #88]	; (8005c78 <MX_TIM6_Init+0x6c>)
 8005c20:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 8005c22:	4b14      	ldr	r3, [pc, #80]	; (8005c74 <MX_TIM6_Init+0x68>)
 8005c24:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005c28:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c2a:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <MX_TIM6_Init+0x68>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8005c30:	4b10      	ldr	r3, [pc, #64]	; (8005c74 <MX_TIM6_Init+0x68>)
 8005c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c36:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c38:	4b0e      	ldr	r3, [pc, #56]	; (8005c74 <MX_TIM6_Init+0x68>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005c3e:	480d      	ldr	r0, [pc, #52]	; (8005c74 <MX_TIM6_Init+0x68>)
 8005c40:	f00b fdbb 	bl	80117ba <HAL_TIM_Base_Init>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8005c4a:	f7ff fb21 	bl	8005290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005c56:	1d3b      	adds	r3, r7, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4806      	ldr	r0, [pc, #24]	; (8005c74 <MX_TIM6_Init+0x68>)
 8005c5c:	f00d f9b4 	bl	8012fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8005c66:	f7ff fb13 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005c6a:	bf00      	nop
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000ed0 	.word	0x20000ed0
 8005c78:	40001000 	.word	0x40001000

08005c7c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08c      	sub	sp, #48	; 0x30
 8005c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005c82:	f107 030c 	add.w	r3, r7, #12
 8005c86:	2224      	movs	r2, #36	; 0x24
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f010 f940 	bl	8015f10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c90:	463b      	mov	r3, r7
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	605a      	str	r2, [r3, #4]
 8005c98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005c9a:	4b23      	ldr	r3, [pc, #140]	; (8005d28 <MX_TIM8_Init+0xac>)
 8005c9c:	4a23      	ldr	r2, [pc, #140]	; (8005d2c <MX_TIM8_Init+0xb0>)
 8005c9e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005ca0:	4b21      	ldr	r3, [pc, #132]	; (8005d28 <MX_TIM8_Init+0xac>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ca6:	4b20      	ldr	r3, [pc, #128]	; (8005d28 <MX_TIM8_Init+0xac>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 8005cac:	4b1e      	ldr	r3, [pc, #120]	; (8005d28 <MX_TIM8_Init+0xac>)
 8005cae:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8005cb2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cb4:	4b1c      	ldr	r3, [pc, #112]	; (8005d28 <MX_TIM8_Init+0xac>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005cba:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <MX_TIM8_Init+0xac>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005cc0:	4b19      	ldr	r3, [pc, #100]	; (8005d28 <MX_TIM8_Init+0xac>)
 8005cc2:	2280      	movs	r2, #128	; 0x80
 8005cc4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005cea:	f107 030c 	add.w	r3, r7, #12
 8005cee:	4619      	mov	r1, r3
 8005cf0:	480d      	ldr	r0, [pc, #52]	; (8005d28 <MX_TIM8_Init+0xac>)
 8005cf2:	f00c f8ab 	bl	8011e4c <HAL_TIM_Encoder_Init>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8005cfc:	f7ff fac8 	bl	8005290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d00:	2300      	movs	r3, #0
 8005d02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005d04:	2300      	movs	r3, #0
 8005d06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005d0c:	463b      	mov	r3, r7
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4805      	ldr	r0, [pc, #20]	; (8005d28 <MX_TIM8_Init+0xac>)
 8005d12:	f00d f959 	bl	8012fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005d1c:	f7ff fab8 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005d20:	bf00      	nop
 8005d22:	3730      	adds	r7, #48	; 0x30
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20000f1c 	.word	0x20000f1c
 8005d2c:	40010400 	.word	0x40010400

08005d30 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d36:	1d3b      	adds	r3, r7, #4
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	605a      	str	r2, [r3, #4]
 8005d3e:	609a      	str	r2, [r3, #8]
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	611a      	str	r2, [r3, #16]
 8005d44:	615a      	str	r2, [r3, #20]
 8005d46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005d48:	4b1f      	ldr	r3, [pc, #124]	; (8005dc8 <MX_TIM13_Init+0x98>)
 8005d4a:	4a20      	ldr	r2, [pc, #128]	; (8005dcc <MX_TIM13_Init+0x9c>)
 8005d4c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550-1;
 8005d4e:	4b1e      	ldr	r3, [pc, #120]	; (8005dc8 <MX_TIM13_Init+0x98>)
 8005d50:	f240 2225 	movw	r2, #549	; 0x225
 8005d54:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d56:	4b1c      	ldr	r3, [pc, #112]	; (8005dc8 <MX_TIM13_Init+0x98>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8005d5c:	4b1a      	ldr	r3, [pc, #104]	; (8005dc8 <MX_TIM13_Init+0x98>)
 8005d5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005d62:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d64:	4b18      	ldr	r3, [pc, #96]	; (8005dc8 <MX_TIM13_Init+0x98>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d6a:	4b17      	ldr	r3, [pc, #92]	; (8005dc8 <MX_TIM13_Init+0x98>)
 8005d6c:	2280      	movs	r2, #128	; 0x80
 8005d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005d70:	4815      	ldr	r0, [pc, #84]	; (8005dc8 <MX_TIM13_Init+0x98>)
 8005d72:	f00b fd22 	bl	80117ba <HAL_TIM_Base_Init>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8005d7c:	f7ff fa88 	bl	8005290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8005d80:	4811      	ldr	r0, [pc, #68]	; (8005dc8 <MX_TIM13_Init+0x98>)
 8005d82:	f00b fdf7 	bl	8011974 <HAL_TIM_PWM_Init>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8005d8c:	f7ff fa80 	bl	8005290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d90:	2360      	movs	r3, #96	; 0x60
 8005d92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8005d94:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005d98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005da2:	1d3b      	adds	r3, r7, #4
 8005da4:	2200      	movs	r2, #0
 8005da6:	4619      	mov	r1, r3
 8005da8:	4807      	ldr	r0, [pc, #28]	; (8005dc8 <MX_TIM13_Init+0x98>)
 8005daa:	f00c faa3 	bl	80122f4 <HAL_TIM_PWM_ConfigChannel>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8005db4:	f7ff fa6c 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8005db8:	4803      	ldr	r0, [pc, #12]	; (8005dc8 <MX_TIM13_Init+0x98>)
 8005dba:	f000 fcc7 	bl	800674c <HAL_TIM_MspPostInit>

}
 8005dbe:	bf00      	nop
 8005dc0:	3720      	adds	r7, #32
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000f68 	.word	0x20000f68
 8005dcc:	40001c00 	.word	0x40001c00

08005dd0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005dd6:	1d3b      	adds	r3, r7, #4
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	609a      	str	r2, [r3, #8]
 8005de0:	60da      	str	r2, [r3, #12]
 8005de2:	611a      	str	r2, [r3, #16]
 8005de4:	615a      	str	r2, [r3, #20]
 8005de6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005de8:	4b1f      	ldr	r3, [pc, #124]	; (8005e68 <MX_TIM14_Init+0x98>)
 8005dea:	4a20      	ldr	r2, [pc, #128]	; (8005e6c <MX_TIM14_Init+0x9c>)
 8005dec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 8005dee:	4b1e      	ldr	r3, [pc, #120]	; (8005e68 <MX_TIM14_Init+0x98>)
 8005df0:	f240 2225 	movw	r2, #549	; 0x225
 8005df4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005df6:	4b1c      	ldr	r3, [pc, #112]	; (8005e68 <MX_TIM14_Init+0x98>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8005dfc:	4b1a      	ldr	r3, [pc, #104]	; (8005e68 <MX_TIM14_Init+0x98>)
 8005dfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005e02:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e04:	4b18      	ldr	r3, [pc, #96]	; (8005e68 <MX_TIM14_Init+0x98>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e0a:	4b17      	ldr	r3, [pc, #92]	; (8005e68 <MX_TIM14_Init+0x98>)
 8005e0c:	2280      	movs	r2, #128	; 0x80
 8005e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005e10:	4815      	ldr	r0, [pc, #84]	; (8005e68 <MX_TIM14_Init+0x98>)
 8005e12:	f00b fcd2 	bl	80117ba <HAL_TIM_Base_Init>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8005e1c:	f7ff fa38 	bl	8005290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8005e20:	4811      	ldr	r0, [pc, #68]	; (8005e68 <MX_TIM14_Init+0x98>)
 8005e22:	f00b fda7 	bl	8011974 <HAL_TIM_PWM_Init>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8005e2c:	f7ff fa30 	bl	8005290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e30:	2360      	movs	r3, #96	; 0x60
 8005e32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8005e34:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005e38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e42:	1d3b      	adds	r3, r7, #4
 8005e44:	2200      	movs	r2, #0
 8005e46:	4619      	mov	r1, r3
 8005e48:	4807      	ldr	r0, [pc, #28]	; (8005e68 <MX_TIM14_Init+0x98>)
 8005e4a:	f00c fa53 	bl	80122f4 <HAL_TIM_PWM_ConfigChannel>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8005e54:	f7ff fa1c 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8005e58:	4803      	ldr	r0, [pc, #12]	; (8005e68 <MX_TIM14_Init+0x98>)
 8005e5a:	f000 fc77 	bl	800674c <HAL_TIM_MspPostInit>

}
 8005e5e:	bf00      	nop
 8005e60:	3720      	adds	r7, #32
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20000fb4 	.word	0x20000fb4
 8005e6c:	40002000 	.word	0x40002000

08005e70 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b098      	sub	sp, #96	; 0x60
 8005e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	605a      	str	r2, [r3, #4]
 8005e8c:	609a      	str	r2, [r3, #8]
 8005e8e:	60da      	str	r2, [r3, #12]
 8005e90:	611a      	str	r2, [r3, #16]
 8005e92:	615a      	str	r2, [r3, #20]
 8005e94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005e96:	1d3b      	adds	r3, r7, #4
 8005e98:	2234      	movs	r2, #52	; 0x34
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f010 f837 	bl	8015f10 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005ea2:	4b35      	ldr	r3, [pc, #212]	; (8005f78 <MX_TIM15_Init+0x108>)
 8005ea4:	4a35      	ldr	r2, [pc, #212]	; (8005f7c <MX_TIM15_Init+0x10c>)
 8005ea6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550-1;
 8005ea8:	4b33      	ldr	r3, [pc, #204]	; (8005f78 <MX_TIM15_Init+0x108>)
 8005eaa:	f240 2225 	movw	r2, #549	; 0x225
 8005eae:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eb0:	4b31      	ldr	r3, [pc, #196]	; (8005f78 <MX_TIM15_Init+0x108>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 8005eb6:	4b30      	ldr	r3, [pc, #192]	; (8005f78 <MX_TIM15_Init+0x108>)
 8005eb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ebc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ebe:	4b2e      	ldr	r3, [pc, #184]	; (8005f78 <MX_TIM15_Init+0x108>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005ec4:	4b2c      	ldr	r3, [pc, #176]	; (8005f78 <MX_TIM15_Init+0x108>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005eca:	4b2b      	ldr	r3, [pc, #172]	; (8005f78 <MX_TIM15_Init+0x108>)
 8005ecc:	2280      	movs	r2, #128	; 0x80
 8005ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005ed0:	4829      	ldr	r0, [pc, #164]	; (8005f78 <MX_TIM15_Init+0x108>)
 8005ed2:	f00b fd4f 	bl	8011974 <HAL_TIM_PWM_Init>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8005edc:	f7ff f9d8 	bl	8005290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005ee8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005eec:	4619      	mov	r1, r3
 8005eee:	4822      	ldr	r0, [pc, #136]	; (8005f78 <MX_TIM15_Init+0x108>)
 8005ef0:	f00d f86a 	bl	8012fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8005efa:	f7ff f9c9 	bl	8005290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005efe:	2360      	movs	r3, #96	; 0x60
 8005f00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 8005f02:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f10:	2300      	movs	r3, #0
 8005f12:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005f14:	2300      	movs	r3, #0
 8005f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f20:	2200      	movs	r2, #0
 8005f22:	4619      	mov	r1, r3
 8005f24:	4814      	ldr	r0, [pc, #80]	; (8005f78 <MX_TIM15_Init+0x108>)
 8005f26:	f00c f9e5 	bl	80122f4 <HAL_TIM_PWM_ConfigChannel>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 8005f30:	f7ff f9ae 	bl	8005290 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005f34:	2300      	movs	r3, #0
 8005f36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005f52:	2300      	movs	r3, #0
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005f56:	1d3b      	adds	r3, r7, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4807      	ldr	r0, [pc, #28]	; (8005f78 <MX_TIM15_Init+0x108>)
 8005f5c:	f00d f8d0 	bl	8013100 <HAL_TIMEx_ConfigBreakDeadTime>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8005f66:	f7ff f993 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8005f6a:	4803      	ldr	r0, [pc, #12]	; (8005f78 <MX_TIM15_Init+0x108>)
 8005f6c:	f000 fbee 	bl	800674c <HAL_TIM_MspPostInit>

}
 8005f70:	bf00      	nop
 8005f72:	3760      	adds	r7, #96	; 0x60
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20001000 	.word	0x20001000
 8005f7c:	40014000 	.word	0x40014000

08005f80 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b094      	sub	sp, #80	; 0x50
 8005f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	605a      	str	r2, [r3, #4]
 8005f90:	609a      	str	r2, [r3, #8]
 8005f92:	60da      	str	r2, [r3, #12]
 8005f94:	611a      	str	r2, [r3, #16]
 8005f96:	615a      	str	r2, [r3, #20]
 8005f98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005f9a:	463b      	mov	r3, r7
 8005f9c:	2234      	movs	r2, #52	; 0x34
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f00f ffb5 	bl	8015f10 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005fa6:	4b32      	ldr	r3, [pc, #200]	; (8006070 <MX_TIM16_Init+0xf0>)
 8005fa8:	4a32      	ldr	r2, [pc, #200]	; (8006074 <MX_TIM16_Init+0xf4>)
 8005faa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8005fac:	4b30      	ldr	r3, [pc, #192]	; (8006070 <MX_TIM16_Init+0xf0>)
 8005fae:	f240 2225 	movw	r2, #549	; 0x225
 8005fb2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fb4:	4b2e      	ldr	r3, [pc, #184]	; (8006070 <MX_TIM16_Init+0xf0>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8005fba:	4b2d      	ldr	r3, [pc, #180]	; (8006070 <MX_TIM16_Init+0xf0>)
 8005fbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005fc0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fc2:	4b2b      	ldr	r3, [pc, #172]	; (8006070 <MX_TIM16_Init+0xf0>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005fc8:	4b29      	ldr	r3, [pc, #164]	; (8006070 <MX_TIM16_Init+0xf0>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005fce:	4b28      	ldr	r3, [pc, #160]	; (8006070 <MX_TIM16_Init+0xf0>)
 8005fd0:	2280      	movs	r2, #128	; 0x80
 8005fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005fd4:	4826      	ldr	r0, [pc, #152]	; (8006070 <MX_TIM16_Init+0xf0>)
 8005fd6:	f00b fbf0 	bl	80117ba <HAL_TIM_Base_Init>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8005fe0:	f7ff f956 	bl	8005290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8005fe4:	4822      	ldr	r0, [pc, #136]	; (8006070 <MX_TIM16_Init+0xf0>)
 8005fe6:	f00b fcc5 	bl	8011974 <HAL_TIM_PWM_Init>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8005ff0:	f7ff f94e 	bl	8005290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ff4:	2360      	movs	r3, #96	; 0x60
 8005ff6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8005ff8:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ffe:	2300      	movs	r3, #0
 8006000:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006002:	2300      	movs	r3, #0
 8006004:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006006:	2300      	movs	r3, #0
 8006008:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800600a:	2300      	movs	r3, #0
 800600c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800600e:	2300      	movs	r3, #0
 8006010:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006012:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006016:	2200      	movs	r2, #0
 8006018:	4619      	mov	r1, r3
 800601a:	4815      	ldr	r0, [pc, #84]	; (8006070 <MX_TIM16_Init+0xf0>)
 800601c:	f00c f96a 	bl	80122f4 <HAL_TIM_PWM_ConfigChannel>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 8006026:	f7ff f933 	bl	8005290 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800602a:	2300      	movs	r3, #0
 800602c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800602e:	2300      	movs	r3, #0
 8006030:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006032:	2300      	movs	r3, #0
 8006034:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800603a:	2300      	movs	r3, #0
 800603c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800603e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006042:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006048:	2300      	movs	r3, #0
 800604a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800604c:	463b      	mov	r3, r7
 800604e:	4619      	mov	r1, r3
 8006050:	4807      	ldr	r0, [pc, #28]	; (8006070 <MX_TIM16_Init+0xf0>)
 8006052:	f00d f855 	bl	8013100 <HAL_TIMEx_ConfigBreakDeadTime>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 800605c:	f7ff f918 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8006060:	4803      	ldr	r0, [pc, #12]	; (8006070 <MX_TIM16_Init+0xf0>)
 8006062:	f000 fb73 	bl	800674c <HAL_TIM_MspPostInit>

}
 8006066:	bf00      	nop
 8006068:	3750      	adds	r7, #80	; 0x50
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	2000104c 	.word	0x2000104c
 8006074:	40014400 	.word	0x40014400

08006078 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b094      	sub	sp, #80	; 0x50
 800607c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800607e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	605a      	str	r2, [r3, #4]
 8006088:	609a      	str	r2, [r3, #8]
 800608a:	60da      	str	r2, [r3, #12]
 800608c:	611a      	str	r2, [r3, #16]
 800608e:	615a      	str	r2, [r3, #20]
 8006090:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006092:	463b      	mov	r3, r7
 8006094:	2234      	movs	r2, #52	; 0x34
 8006096:	2100      	movs	r1, #0
 8006098:	4618      	mov	r0, r3
 800609a:	f00f ff39 	bl	8015f10 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800609e:	4b32      	ldr	r3, [pc, #200]	; (8006168 <MX_TIM17_Init+0xf0>)
 80060a0:	4a32      	ldr	r2, [pc, #200]	; (800616c <MX_TIM17_Init+0xf4>)
 80060a2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 80060a4:	4b30      	ldr	r3, [pc, #192]	; (8006168 <MX_TIM17_Init+0xf0>)
 80060a6:	f240 2225 	movw	r2, #549	; 0x225
 80060aa:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060ac:	4b2e      	ldr	r3, [pc, #184]	; (8006168 <MX_TIM17_Init+0xf0>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 80060b2:	4b2d      	ldr	r3, [pc, #180]	; (8006168 <MX_TIM17_Init+0xf0>)
 80060b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80060b8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060ba:	4b2b      	ldr	r3, [pc, #172]	; (8006168 <MX_TIM17_Init+0xf0>)
 80060bc:	2200      	movs	r2, #0
 80060be:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80060c0:	4b29      	ldr	r3, [pc, #164]	; (8006168 <MX_TIM17_Init+0xf0>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80060c6:	4b28      	ldr	r3, [pc, #160]	; (8006168 <MX_TIM17_Init+0xf0>)
 80060c8:	2280      	movs	r2, #128	; 0x80
 80060ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80060cc:	4826      	ldr	r0, [pc, #152]	; (8006168 <MX_TIM17_Init+0xf0>)
 80060ce:	f00b fb74 	bl	80117ba <HAL_TIM_Base_Init>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 80060d8:	f7ff f8da 	bl	8005290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80060dc:	4822      	ldr	r0, [pc, #136]	; (8006168 <MX_TIM17_Init+0xf0>)
 80060de:	f00b fc49 	bl	8011974 <HAL_TIM_PWM_Init>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80060e8:	f7ff f8d2 	bl	8005290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80060ec:	2360      	movs	r3, #96	; 0x60
 80060ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 80060f0:	f240 13f3 	movw	r3, #499	; 0x1f3
 80060f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80060f6:	2300      	movs	r3, #0
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80060fa:	2300      	movs	r3, #0
 80060fc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80060fe:	2300      	movs	r3, #0
 8006100:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006102:	2300      	movs	r3, #0
 8006104:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006106:	2300      	movs	r3, #0
 8006108:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800610a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800610e:	2200      	movs	r2, #0
 8006110:	4619      	mov	r1, r3
 8006112:	4815      	ldr	r0, [pc, #84]	; (8006168 <MX_TIM17_Init+0xf0>)
 8006114:	f00c f8ee 	bl	80122f4 <HAL_TIM_PWM_ConfigChannel>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 800611e:	f7ff f8b7 	bl	8005290 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006122:	2300      	movs	r3, #0
 8006124:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006126:	2300      	movs	r3, #0
 8006128:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006132:	2300      	movs	r3, #0
 8006134:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800613a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006140:	2300      	movs	r3, #0
 8006142:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8006144:	463b      	mov	r3, r7
 8006146:	4619      	mov	r1, r3
 8006148:	4807      	ldr	r0, [pc, #28]	; (8006168 <MX_TIM17_Init+0xf0>)
 800614a:	f00c ffd9 	bl	8013100 <HAL_TIMEx_ConfigBreakDeadTime>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8006154:	f7ff f89c 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8006158:	4803      	ldr	r0, [pc, #12]	; (8006168 <MX_TIM17_Init+0xf0>)
 800615a:	f000 faf7 	bl	800674c <HAL_TIM_MspPostInit>

}
 800615e:	bf00      	nop
 8006160:	3750      	adds	r7, #80	; 0x50
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20001098 	.word	0x20001098
 800616c:	40014800 	.word	0x40014800

08006170 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006176:	f107 0310 	add.w	r3, r7, #16
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	605a      	str	r2, [r3, #4]
 8006180:	609a      	str	r2, [r3, #8]
 8006182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006184:	1d3b      	adds	r3, r7, #4
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	605a      	str	r2, [r3, #4]
 800618c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800618e:	4b1e      	ldr	r3, [pc, #120]	; (8006208 <MX_TIM23_Init+0x98>)
 8006190:	4a1e      	ldr	r2, [pc, #120]	; (800620c <MX_TIM23_Init+0x9c>)
 8006192:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8006194:	4b1c      	ldr	r3, [pc, #112]	; (8006208 <MX_TIM23_Init+0x98>)
 8006196:	f44f 7289 	mov.w	r2, #274	; 0x112
 800619a:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800619c:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <MX_TIM23_Init+0x98>)
 800619e:	2200      	movs	r2, #0
 80061a0:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 1000-1;
 80061a2:	4b19      	ldr	r3, [pc, #100]	; (8006208 <MX_TIM23_Init+0x98>)
 80061a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80061a8:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061aa:	4b17      	ldr	r3, [pc, #92]	; (8006208 <MX_TIM23_Init+0x98>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80061b0:	4b15      	ldr	r3, [pc, #84]	; (8006208 <MX_TIM23_Init+0x98>)
 80061b2:	2280      	movs	r2, #128	; 0x80
 80061b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 80061b6:	4814      	ldr	r0, [pc, #80]	; (8006208 <MX_TIM23_Init+0x98>)
 80061b8:	f00b faff 	bl	80117ba <HAL_TIM_Base_Init>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 80061c2:	f7ff f865 	bl	8005290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80061c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 80061cc:	f107 0310 	add.w	r3, r7, #16
 80061d0:	4619      	mov	r1, r3
 80061d2:	480d      	ldr	r0, [pc, #52]	; (8006208 <MX_TIM23_Init+0x98>)
 80061d4:	f00c f9a2 	bl	801251c <HAL_TIM_ConfigClockSource>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 80061de:	f7ff f857 	bl	8005290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061e2:	2300      	movs	r3, #0
 80061e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80061ea:	1d3b      	adds	r3, r7, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4806      	ldr	r0, [pc, #24]	; (8006208 <MX_TIM23_Init+0x98>)
 80061f0:	f00c feea 	bl	8012fc8 <HAL_TIMEx_MasterConfigSynchronization>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 80061fa:	f7ff f849 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80061fe:	bf00      	nop
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	200010e4 	.word	0x200010e4
 800620c:	4000e000 	.word	0x4000e000

08006210 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006216:	f107 0310 	add.w	r3, r7, #16
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	605a      	str	r2, [r3, #4]
 8006220:	609a      	str	r2, [r3, #8]
 8006222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006224:	1d3b      	adds	r3, r7, #4
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	605a      	str	r2, [r3, #4]
 800622c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800622e:	4b1e      	ldr	r3, [pc, #120]	; (80062a8 <MX_TIM24_Init+0x98>)
 8006230:	4a1e      	ldr	r2, [pc, #120]	; (80062ac <MX_TIM24_Init+0x9c>)
 8006232:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 8006234:	4b1c      	ldr	r3, [pc, #112]	; (80062a8 <MX_TIM24_Init+0x98>)
 8006236:	f44f 7289 	mov.w	r2, #274	; 0x112
 800623a:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800623c:	4b1a      	ldr	r3, [pc, #104]	; (80062a8 <MX_TIM24_Init+0x98>)
 800623e:	2200      	movs	r2, #0
 8006240:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8006242:	4b19      	ldr	r3, [pc, #100]	; (80062a8 <MX_TIM24_Init+0x98>)
 8006244:	f04f 32ff 	mov.w	r2, #4294967295
 8006248:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800624a:	4b17      	ldr	r3, [pc, #92]	; (80062a8 <MX_TIM24_Init+0x98>)
 800624c:	2200      	movs	r2, #0
 800624e:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006250:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <MX_TIM24_Init+0x98>)
 8006252:	2200      	movs	r2, #0
 8006254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8006256:	4814      	ldr	r0, [pc, #80]	; (80062a8 <MX_TIM24_Init+0x98>)
 8006258:	f00b faaf 	bl	80117ba <HAL_TIM_Base_Init>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8006262:	f7ff f815 	bl	8005290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800626a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 800626c:	f107 0310 	add.w	r3, r7, #16
 8006270:	4619      	mov	r1, r3
 8006272:	480d      	ldr	r0, [pc, #52]	; (80062a8 <MX_TIM24_Init+0x98>)
 8006274:	f00c f952 	bl	801251c <HAL_TIM_ConfigClockSource>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 800627e:	f7ff f807 	bl	8005290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006282:	2300      	movs	r3, #0
 8006284:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800628a:	1d3b      	adds	r3, r7, #4
 800628c:	4619      	mov	r1, r3
 800628e:	4806      	ldr	r0, [pc, #24]	; (80062a8 <MX_TIM24_Init+0x98>)
 8006290:	f00c fe9a 	bl	8012fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 800629a:	f7fe fff9 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800629e:	bf00      	nop
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20001130 	.word	0x20001130
 80062ac:	4000e400 	.word	0x4000e400

080062b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	; 0x28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062b8:	f107 0314 	add.w	r3, r7, #20
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	605a      	str	r2, [r3, #4]
 80062c2:	609a      	str	r2, [r3, #8]
 80062c4:	60da      	str	r2, [r3, #12]
 80062c6:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a3c      	ldr	r2, [pc, #240]	; (80063c0 <HAL_TIM_PWM_MspInit+0x110>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d15e      	bne.n	8006390 <HAL_TIM_PWM_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80062d2:	4b3c      	ldr	r3, [pc, #240]	; (80063c4 <HAL_TIM_PWM_MspInit+0x114>)
 80062d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062d8:	4a3a      	ldr	r2, [pc, #232]	; (80063c4 <HAL_TIM_PWM_MspInit+0x114>)
 80062da:	f043 0301 	orr.w	r3, r3, #1
 80062de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80062e2:	4b38      	ldr	r3, [pc, #224]	; (80063c4 <HAL_TIM_PWM_MspInit+0x114>)
 80062e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062f0:	4b34      	ldr	r3, [pc, #208]	; (80063c4 <HAL_TIM_PWM_MspInit+0x114>)
 80062f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062f6:	4a33      	ldr	r2, [pc, #204]	; (80063c4 <HAL_TIM_PWM_MspInit+0x114>)
 80062f8:	f043 0301 	orr.w	r3, r3, #1
 80062fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006300:	4b30      	ldr	r3, [pc, #192]	; (80063c4 <HAL_TIM_PWM_MspInit+0x114>)
 8006302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 800630e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006314:	2302      	movs	r3, #2
 8006316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006318:	2300      	movs	r3, #0
 800631a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800631c:	2300      	movs	r3, #0
 800631e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006320:	2301      	movs	r3, #1
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 8006324:	f107 0314 	add.w	r3, r7, #20
 8006328:	4619      	mov	r1, r3
 800632a:	4827      	ldr	r0, [pc, #156]	; (80063c8 <HAL_TIM_PWM_MspInit+0x118>)
 800632c:	f005 fcea 	bl	800bd04 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream2;
 8006330:	4b26      	ldr	r3, [pc, #152]	; (80063cc <HAL_TIM_PWM_MspInit+0x11c>)
 8006332:	4a27      	ldr	r2, [pc, #156]	; (80063d0 <HAL_TIM_PWM_MspInit+0x120>)
 8006334:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8006336:	4b25      	ldr	r3, [pc, #148]	; (80063cc <HAL_TIM_PWM_MspInit+0x11c>)
 8006338:	220b      	movs	r2, #11
 800633a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800633c:	4b23      	ldr	r3, [pc, #140]	; (80063cc <HAL_TIM_PWM_MspInit+0x11c>)
 800633e:	2240      	movs	r2, #64	; 0x40
 8006340:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006342:	4b22      	ldr	r3, [pc, #136]	; (80063cc <HAL_TIM_PWM_MspInit+0x11c>)
 8006344:	2200      	movs	r2, #0
 8006346:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006348:	4b20      	ldr	r3, [pc, #128]	; (80063cc <HAL_TIM_PWM_MspInit+0x11c>)
 800634a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800634e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006350:	4b1e      	ldr	r3, [pc, #120]	; (80063cc <HAL_TIM_PWM_MspInit+0x11c>)
 8006352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006356:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006358:	4b1c      	ldr	r3, [pc, #112]	; (80063cc <HAL_TIM_PWM_MspInit+0x11c>)
 800635a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800635e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8006360:	4b1a      	ldr	r3, [pc, #104]	; (80063cc <HAL_TIM_PWM_MspInit+0x11c>)
 8006362:	2200      	movs	r2, #0
 8006364:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006366:	4b19      	ldr	r3, [pc, #100]	; (80063cc <HAL_TIM_PWM_MspInit+0x11c>)
 8006368:	2200      	movs	r2, #0
 800636a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800636c:	4b17      	ldr	r3, [pc, #92]	; (80063cc <HAL_TIM_PWM_MspInit+0x11c>)
 800636e:	2200      	movs	r2, #0
 8006370:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8006372:	4816      	ldr	r0, [pc, #88]	; (80063cc <HAL_TIM_PWM_MspInit+0x11c>)
 8006374:	f003 fa94 	bl	80098a0 <HAL_DMA_Init>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <HAL_TIM_PWM_MspInit+0xd2>
    {
      Error_Handler();
 800637e:	f7fe ff87 	bl	8005290 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a11      	ldr	r2, [pc, #68]	; (80063cc <HAL_TIM_PWM_MspInit+0x11c>)
 8006386:	625a      	str	r2, [r3, #36]	; 0x24
 8006388:	4a10      	ldr	r2, [pc, #64]	; (80063cc <HAL_TIM_PWM_MspInit+0x11c>)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800638e:	e013      	b.n	80063b8 <HAL_TIM_PWM_MspInit+0x108>
  else if(tim_pwmHandle->Instance==TIM15)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a0f      	ldr	r2, [pc, #60]	; (80063d4 <HAL_TIM_PWM_MspInit+0x124>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d10e      	bne.n	80063b8 <HAL_TIM_PWM_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800639a:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <HAL_TIM_PWM_MspInit+0x114>)
 800639c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063a0:	4a08      	ldr	r2, [pc, #32]	; (80063c4 <HAL_TIM_PWM_MspInit+0x114>)
 80063a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80063aa:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <HAL_TIM_PWM_MspInit+0x114>)
 80063ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063b4:	60bb      	str	r3, [r7, #8]
 80063b6:	68bb      	ldr	r3, [r7, #8]
}
 80063b8:	bf00      	nop
 80063ba:	3728      	adds	r7, #40	; 0x28
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40010000 	.word	0x40010000
 80063c4:	58024400 	.word	0x58024400
 80063c8:	58020000 	.word	0x58020000
 80063cc:	2000117c 	.word	0x2000117c
 80063d0:	40020040 	.word	0x40020040
 80063d4:	40014000 	.word	0x40014000

080063d8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08e      	sub	sp, #56	; 0x38
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	605a      	str	r2, [r3, #4]
 80063ea:	609a      	str	r2, [r3, #8]
 80063ec:	60da      	str	r2, [r3, #12]
 80063ee:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f8:	d14e      	bne.n	8006498 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80063fa:	4b5d      	ldr	r3, [pc, #372]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 80063fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006400:	4a5b      	ldr	r2, [pc, #364]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 8006402:	f043 0301 	orr.w	r3, r3, #1
 8006406:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800640a:	4b59      	ldr	r3, [pc, #356]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 800640c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	623b      	str	r3, [r7, #32]
 8006416:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006418:	4b55      	ldr	r3, [pc, #340]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 800641a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800641e:	4a54      	ldr	r2, [pc, #336]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 8006420:	f043 0301 	orr.w	r3, r3, #1
 8006424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006428:	4b51      	ldr	r3, [pc, #324]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 800642a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006436:	4b4e      	ldr	r3, [pc, #312]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 8006438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800643c:	4a4c      	ldr	r2, [pc, #304]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 800643e:	f043 0302 	orr.w	r3, r3, #2
 8006442:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006446:	4b4a      	ldr	r3, [pc, #296]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 8006448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	61bb      	str	r3, [r7, #24]
 8006452:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC6A_Pin;
 8006454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800645a:	2302      	movs	r3, #2
 800645c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800645e:	2300      	movs	r3, #0
 8006460:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006462:	2300      	movs	r3, #0
 8006464:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006466:	2301      	movs	r3, #1
 8006468:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 800646a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800646e:	4619      	mov	r1, r3
 8006470:	4840      	ldr	r0, [pc, #256]	; (8006574 <HAL_TIM_Encoder_MspInit+0x19c>)
 8006472:	f005 fc47 	bl	800bd04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC6B_Pin;
 8006476:	2308      	movs	r3, #8
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647a:	2302      	movs	r3, #2
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800647e:	2300      	movs	r3, #0
 8006480:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006482:	2300      	movs	r3, #0
 8006484:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006486:	2301      	movs	r3, #1
 8006488:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 800648a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800648e:	4619      	mov	r1, r3
 8006490:	4839      	ldr	r0, [pc, #228]	; (8006578 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8006492:	f005 fc37 	bl	800bd04 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8006496:	e067      	b.n	8006568 <HAL_TIM_Encoder_MspInit+0x190>
  else if(tim_encoderHandle->Instance==TIM4)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a37      	ldr	r2, [pc, #220]	; (800657c <HAL_TIM_Encoder_MspInit+0x1a4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d12f      	bne.n	8006502 <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80064a2:	4b33      	ldr	r3, [pc, #204]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 80064a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064a8:	4a31      	ldr	r2, [pc, #196]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 80064aa:	f043 0304 	orr.w	r3, r3, #4
 80064ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80064b2:	4b2f      	ldr	r3, [pc, #188]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 80064b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064c0:	4b2b      	ldr	r3, [pc, #172]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 80064c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064c6:	4a2a      	ldr	r2, [pc, #168]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 80064c8:	f043 0308 	orr.w	r3, r3, #8
 80064cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064d0:	4b27      	ldr	r3, [pc, #156]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 80064d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	613b      	str	r3, [r7, #16]
 80064dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 80064de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064e4:	2302      	movs	r3, #2
 80064e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064ec:	2300      	movs	r3, #0
 80064ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80064f0:	2302      	movs	r3, #2
 80064f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f8:	4619      	mov	r1, r3
 80064fa:	4821      	ldr	r0, [pc, #132]	; (8006580 <HAL_TIM_Encoder_MspInit+0x1a8>)
 80064fc:	f005 fc02 	bl	800bd04 <HAL_GPIO_Init>
}
 8006500:	e032      	b.n	8006568 <HAL_TIM_Encoder_MspInit+0x190>
  else if(tim_encoderHandle->Instance==TIM8)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1f      	ldr	r2, [pc, #124]	; (8006584 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d12d      	bne.n	8006568 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800650c:	4b18      	ldr	r3, [pc, #96]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 800650e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006512:	4a17      	ldr	r2, [pc, #92]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 8006514:	f043 0302 	orr.w	r3, r3, #2
 8006518:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800651c:	4b14      	ldr	r3, [pc, #80]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 800651e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800652a:	4b11      	ldr	r3, [pc, #68]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 800652c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006530:	4a0f      	ldr	r2, [pc, #60]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 8006532:	f043 0304 	orr.w	r3, r3, #4
 8006536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800653a:	4b0d      	ldr	r3, [pc, #52]	; (8006570 <HAL_TIM_Encoder_MspInit+0x198>)
 800653c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	60bb      	str	r3, [r7, #8]
 8006546:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 8006548:	23c0      	movs	r3, #192	; 0xc0
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800654c:	2302      	movs	r3, #2
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006550:	2300      	movs	r3, #0
 8006552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006554:	2300      	movs	r3, #0
 8006556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006558:	2303      	movs	r3, #3
 800655a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800655c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006560:	4619      	mov	r1, r3
 8006562:	4809      	ldr	r0, [pc, #36]	; (8006588 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8006564:	f005 fbce 	bl	800bd04 <HAL_GPIO_Init>
}
 8006568:	bf00      	nop
 800656a:	3738      	adds	r7, #56	; 0x38
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	58024400 	.word	0x58024400
 8006574:	58020000 	.word	0x58020000
 8006578:	58020400 	.word	0x58020400
 800657c:	40000800 	.word	0x40000800
 8006580:	58020c00 	.word	0x58020c00
 8006584:	40010400 	.word	0x40010400
 8006588:	58020800 	.word	0x58020800

0800658c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08c      	sub	sp, #48	; 0x30
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a62      	ldr	r2, [pc, #392]	; (8006724 <HAL_TIM_Base_MspInit+0x198>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d10f      	bne.n	80065be <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800659e:	4b62      	ldr	r3, [pc, #392]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 80065a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065a4:	4a60      	ldr	r2, [pc, #384]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 80065a6:	f043 0302 	orr.w	r3, r3, #2
 80065aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80065ae:	4b5e      	ldr	r3, [pc, #376]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 80065b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 80065bc:	e0ae      	b.n	800671c <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM5)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a5a      	ldr	r2, [pc, #360]	; (800672c <HAL_TIM_Base_MspInit+0x1a0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d10f      	bne.n	80065e8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80065c8:	4b57      	ldr	r3, [pc, #348]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 80065ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065ce:	4a56      	ldr	r2, [pc, #344]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 80065d0:	f043 0308 	orr.w	r3, r3, #8
 80065d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80065d8:	4b53      	ldr	r3, [pc, #332]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 80065da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80065e6:	e099      	b.n	800671c <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM6)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a50      	ldr	r2, [pc, #320]	; (8006730 <HAL_TIM_Base_MspInit+0x1a4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d10f      	bne.n	8006612 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80065f2:	4b4d      	ldr	r3, [pc, #308]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 80065f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065f8:	4a4b      	ldr	r2, [pc, #300]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 80065fa:	f043 0310 	orr.w	r3, r3, #16
 80065fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006602:	4b49      	ldr	r3, [pc, #292]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 8006604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006610:	e084      	b.n	800671c <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM13)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a47      	ldr	r2, [pc, #284]	; (8006734 <HAL_TIM_Base_MspInit+0x1a8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d10f      	bne.n	800663c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800661c:	4b42      	ldr	r3, [pc, #264]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 800661e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006622:	4a41      	ldr	r2, [pc, #260]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 8006624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006628:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800662c:	4b3e      	ldr	r3, [pc, #248]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 800662e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006636:	623b      	str	r3, [r7, #32]
 8006638:	6a3b      	ldr	r3, [r7, #32]
}
 800663a:	e06f      	b.n	800671c <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM14)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a3d      	ldr	r2, [pc, #244]	; (8006738 <HAL_TIM_Base_MspInit+0x1ac>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d10f      	bne.n	8006666 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006646:	4b38      	ldr	r3, [pc, #224]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 8006648:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800664c:	4a36      	ldr	r2, [pc, #216]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 800664e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006652:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006656:	4b34      	ldr	r3, [pc, #208]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 8006658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800665c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006660:	61fb      	str	r3, [r7, #28]
 8006662:	69fb      	ldr	r3, [r7, #28]
}
 8006664:	e05a      	b.n	800671c <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM16)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a34      	ldr	r2, [pc, #208]	; (800673c <HAL_TIM_Base_MspInit+0x1b0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d10f      	bne.n	8006690 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006670:	4b2d      	ldr	r3, [pc, #180]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 8006672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006676:	4a2c      	ldr	r2, [pc, #176]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 8006678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800667c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006680:	4b29      	ldr	r3, [pc, #164]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 8006682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668a:	61bb      	str	r3, [r7, #24]
 800668c:	69bb      	ldr	r3, [r7, #24]
}
 800668e:	e045      	b.n	800671c <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM17)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a2a      	ldr	r2, [pc, #168]	; (8006740 <HAL_TIM_Base_MspInit+0x1b4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d10f      	bne.n	80066ba <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800669a:	4b23      	ldr	r3, [pc, #140]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 800669c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066a0:	4a21      	ldr	r2, [pc, #132]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 80066a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80066aa:	4b1f      	ldr	r3, [pc, #124]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 80066ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	697b      	ldr	r3, [r7, #20]
}
 80066b8:	e030      	b.n	800671c <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM23)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a21      	ldr	r2, [pc, #132]	; (8006744 <HAL_TIM_Base_MspInit+0x1b8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d117      	bne.n	80066f4 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80066c4:	4b18      	ldr	r3, [pc, #96]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 80066c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80066ca:	4a17      	ldr	r2, [pc, #92]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 80066cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066d0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80066d4:	4b14      	ldr	r3, [pc, #80]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 80066d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80066da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 80066e2:	2200      	movs	r2, #0
 80066e4:	2100      	movs	r1, #0
 80066e6:	20a1      	movs	r0, #161	; 0xa1
 80066e8:	f002 fea7 	bl	800943a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 80066ec:	20a1      	movs	r0, #161	; 0xa1
 80066ee:	f002 febe 	bl	800946e <HAL_NVIC_EnableIRQ>
}
 80066f2:	e013      	b.n	800671c <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM24)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a13      	ldr	r2, [pc, #76]	; (8006748 <HAL_TIM_Base_MspInit+0x1bc>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d10e      	bne.n	800671c <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80066fe:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 8006700:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006704:	4a08      	ldr	r2, [pc, #32]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 8006706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800670a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800670e:	4b06      	ldr	r3, [pc, #24]	; (8006728 <HAL_TIM_Base_MspInit+0x19c>)
 8006710:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	68fb      	ldr	r3, [r7, #12]
}
 800671c:	bf00      	nop
 800671e:	3730      	adds	r7, #48	; 0x30
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40000400 	.word	0x40000400
 8006728:	58024400 	.word	0x58024400
 800672c:	40000c00 	.word	0x40000c00
 8006730:	40001000 	.word	0x40001000
 8006734:	40001c00 	.word	0x40001c00
 8006738:	40002000 	.word	0x40002000
 800673c:	40014400 	.word	0x40014400
 8006740:	40014800 	.word	0x40014800
 8006744:	4000e000 	.word	0x4000e000
 8006748:	4000e400 	.word	0x4000e400

0800674c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b090      	sub	sp, #64	; 0x40
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	605a      	str	r2, [r3, #4]
 800675e:	609a      	str	r2, [r3, #8]
 8006760:	60da      	str	r2, [r3, #12]
 8006762:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a95      	ldr	r2, [pc, #596]	; (80069c0 <HAL_TIM_MspPostInit+0x274>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d120      	bne.n	80067b0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800676e:	4b95      	ldr	r3, [pc, #596]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 8006770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006774:	4a93      	ldr	r2, [pc, #588]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 8006776:	f043 0301 	orr.w	r3, r3, #1
 800677a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800677e:	4b91      	ldr	r3, [pc, #580]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 8006780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	62bb      	str	r3, [r7, #40]	; 0x28
 800678a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 800678c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006792:	2302      	movs	r3, #2
 8006794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006796:	2300      	movs	r3, #0
 8006798:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800679a:	2300      	movs	r3, #0
 800679c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800679e:	2301      	movs	r3, #1
 80067a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 80067a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067a6:	4619      	mov	r1, r3
 80067a8:	4887      	ldr	r0, [pc, #540]	; (80069c8 <HAL_TIM_MspPostInit+0x27c>)
 80067aa:	f005 faab 	bl	800bd04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80067ae:	e103      	b.n	80069b8 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM3)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a85      	ldr	r2, [pc, #532]	; (80069cc <HAL_TIM_MspPostInit+0x280>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d11f      	bne.n	80067fa <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067ba:	4b82      	ldr	r3, [pc, #520]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 80067bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067c0:	4a80      	ldr	r2, [pc, #512]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 80067c2:	f043 0302 	orr.w	r3, r3, #2
 80067c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80067ca:	4b7e      	ldr	r3, [pc, #504]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 80067cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = ENC5A_GriperA_Pin|ENC5B_GriperB_Pin;
 80067d8:	2330      	movs	r3, #48	; 0x30
 80067da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067dc:	2302      	movs	r3, #2
 80067de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e0:	2300      	movs	r3, #0
 80067e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067e4:	2300      	movs	r3, #0
 80067e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80067e8:	2302      	movs	r3, #2
 80067ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067f0:	4619      	mov	r1, r3
 80067f2:	4877      	ldr	r0, [pc, #476]	; (80069d0 <HAL_TIM_MspPostInit+0x284>)
 80067f4:	f005 fa86 	bl	800bd04 <HAL_GPIO_Init>
}
 80067f8:	e0de      	b.n	80069b8 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM5)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a75      	ldr	r2, [pc, #468]	; (80069d4 <HAL_TIM_MspPostInit+0x288>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d11f      	bne.n	8006844 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006804:	4b6f      	ldr	r3, [pc, #444]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 8006806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800680a:	4a6e      	ldr	r2, [pc, #440]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 800680c:	f043 0301 	orr.w	r3, r3, #1
 8006810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006814:	4b6b      	ldr	r3, [pc, #428]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 8006816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	623b      	str	r3, [r7, #32]
 8006820:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006822:	2303      	movs	r3, #3
 8006824:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006826:	2302      	movs	r3, #2
 8006828:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800682a:	2300      	movs	r3, #0
 800682c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800682e:	2300      	movs	r3, #0
 8006830:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006832:	2302      	movs	r3, #2
 8006834:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800683a:	4619      	mov	r1, r3
 800683c:	4862      	ldr	r0, [pc, #392]	; (80069c8 <HAL_TIM_MspPostInit+0x27c>)
 800683e:	f005 fa61 	bl	800bd04 <HAL_GPIO_Init>
}
 8006842:	e0b9      	b.n	80069b8 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM13)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a63      	ldr	r2, [pc, #396]	; (80069d8 <HAL_TIM_MspPostInit+0x28c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d11f      	bne.n	800688e <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800684e:	4b5d      	ldr	r3, [pc, #372]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 8006850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006854:	4a5b      	ldr	r2, [pc, #364]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 8006856:	f043 0301 	orr.w	r3, r3, #1
 800685a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800685e:	4b59      	ldr	r3, [pc, #356]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 8006860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 800686c:	2340      	movs	r3, #64	; 0x40
 800686e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006870:	2302      	movs	r3, #2
 8006872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006874:	2300      	movs	r3, #0
 8006876:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006878:	2300      	movs	r3, #0
 800687a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800687c:	2309      	movs	r3, #9
 800687e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8006880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006884:	4619      	mov	r1, r3
 8006886:	4850      	ldr	r0, [pc, #320]	; (80069c8 <HAL_TIM_MspPostInit+0x27c>)
 8006888:	f005 fa3c 	bl	800bd04 <HAL_GPIO_Init>
}
 800688c:	e094      	b.n	80069b8 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM14)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a52      	ldr	r2, [pc, #328]	; (80069dc <HAL_TIM_MspPostInit+0x290>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d11f      	bne.n	80068d8 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006898:	4b4a      	ldr	r3, [pc, #296]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 800689a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800689e:	4a49      	ldr	r2, [pc, #292]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 80068a0:	f043 0301 	orr.w	r3, r3, #1
 80068a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80068a8:	4b46      	ldr	r3, [pc, #280]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 80068aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	61bb      	str	r3, [r7, #24]
 80068b4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP2_Pin;
 80068b6:	2380      	movs	r3, #128	; 0x80
 80068b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068ba:	2302      	movs	r3, #2
 80068bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068c2:	2300      	movs	r3, #0
 80068c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80068c6:	2309      	movs	r3, #9
 80068c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 80068ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80068ce:	4619      	mov	r1, r3
 80068d0:	483d      	ldr	r0, [pc, #244]	; (80069c8 <HAL_TIM_MspPostInit+0x27c>)
 80068d2:	f005 fa17 	bl	800bd04 <HAL_GPIO_Init>
}
 80068d6:	e06f      	b.n	80069b8 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM15)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a40      	ldr	r2, [pc, #256]	; (80069e0 <HAL_TIM_MspPostInit+0x294>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d11f      	bne.n	8006922 <HAL_TIM_MspPostInit+0x1d6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80068e2:	4b38      	ldr	r3, [pc, #224]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 80068e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068e8:	4a36      	ldr	r2, [pc, #216]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 80068ea:	f043 0310 	orr.w	r3, r3, #16
 80068ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80068f2:	4b34      	ldr	r3, [pc, #208]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 80068f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006900:	2320      	movs	r3, #32
 8006902:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006904:	2302      	movs	r3, #2
 8006906:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006908:	2300      	movs	r3, #0
 800690a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800690c:	2300      	movs	r3, #0
 800690e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006910:	2304      	movs	r3, #4
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006918:	4619      	mov	r1, r3
 800691a:	4832      	ldr	r0, [pc, #200]	; (80069e4 <HAL_TIM_MspPostInit+0x298>)
 800691c:	f005 f9f2 	bl	800bd04 <HAL_GPIO_Init>
}
 8006920:	e04a      	b.n	80069b8 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM16)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a30      	ldr	r2, [pc, #192]	; (80069e8 <HAL_TIM_MspPostInit+0x29c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d120      	bne.n	800696e <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800692c:	4b25      	ldr	r3, [pc, #148]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 800692e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006932:	4a24      	ldr	r2, [pc, #144]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 8006934:	f043 0302 	orr.w	r3, r3, #2
 8006938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800693c:	4b21      	ldr	r3, [pc, #132]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 800693e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP4_Pin;
 800694a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800694e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006950:	2302      	movs	r3, #2
 8006952:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006954:	2300      	movs	r3, #0
 8006956:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006958:	2300      	movs	r3, #0
 800695a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800695c:	2301      	movs	r3, #1
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 8006960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006964:	4619      	mov	r1, r3
 8006966:	481a      	ldr	r0, [pc, #104]	; (80069d0 <HAL_TIM_MspPostInit+0x284>)
 8006968:	f005 f9cc 	bl	800bd04 <HAL_GPIO_Init>
}
 800696c:	e024      	b.n	80069b8 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM17)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a1e      	ldr	r2, [pc, #120]	; (80069ec <HAL_TIM_MspPostInit+0x2a0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d11f      	bne.n	80069b8 <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006978:	4b12      	ldr	r3, [pc, #72]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 800697a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800697e:	4a11      	ldr	r2, [pc, #68]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 8006980:	f043 0302 	orr.w	r3, r3, #2
 8006984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006988:	4b0e      	ldr	r3, [pc, #56]	; (80069c4 <HAL_TIM_MspPostInit+0x278>)
 800698a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP5_Pin;
 8006996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800699a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800699c:	2302      	movs	r3, #2
 800699e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069a4:	2300      	movs	r3, #0
 80069a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80069a8:	2301      	movs	r3, #1
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 80069ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80069b0:	4619      	mov	r1, r3
 80069b2:	4807      	ldr	r0, [pc, #28]	; (80069d0 <HAL_TIM_MspPostInit+0x284>)
 80069b4:	f005 f9a6 	bl	800bd04 <HAL_GPIO_Init>
}
 80069b8:	bf00      	nop
 80069ba:	3740      	adds	r7, #64	; 0x40
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40010000 	.word	0x40010000
 80069c4:	58024400 	.word	0x58024400
 80069c8:	58020000 	.word	0x58020000
 80069cc:	40000400 	.word	0x40000400
 80069d0:	58020400 	.word	0x58020400
 80069d4:	40000c00 	.word	0x40000c00
 80069d8:	40001c00 	.word	0x40001c00
 80069dc:	40002000 	.word	0x40002000
 80069e0:	40014000 	.word	0x40014000
 80069e4:	58021000 	.word	0x58021000
 80069e8:	40014400 	.word	0x40014400
 80069ec:	40014800 	.word	0x40014800

080069f0 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80069f4:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <MX_UART5_Init+0x98>)
 80069f6:	4a25      	ldr	r2, [pc, #148]	; (8006a8c <MX_UART5_Init+0x9c>)
 80069f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 80069fa:	4b23      	ldr	r3, [pc, #140]	; (8006a88 <MX_UART5_Init+0x98>)
 80069fc:	4a24      	ldr	r2, [pc, #144]	; (8006a90 <MX_UART5_Init+0xa0>)
 80069fe:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006a00:	4b21      	ldr	r3, [pc, #132]	; (8006a88 <MX_UART5_Init+0x98>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006a06:	4b20      	ldr	r3, [pc, #128]	; (8006a88 <MX_UART5_Init+0x98>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006a0c:	4b1e      	ldr	r3, [pc, #120]	; (8006a88 <MX_UART5_Init+0x98>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006a12:	4b1d      	ldr	r3, [pc, #116]	; (8006a88 <MX_UART5_Init+0x98>)
 8006a14:	220c      	movs	r2, #12
 8006a16:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a18:	4b1b      	ldr	r3, [pc, #108]	; (8006a88 <MX_UART5_Init+0x98>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a1e:	4b1a      	ldr	r3, [pc, #104]	; (8006a88 <MX_UART5_Init+0x98>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006a24:	4b18      	ldr	r3, [pc, #96]	; (8006a88 <MX_UART5_Init+0x98>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006a2a:	4b17      	ldr	r3, [pc, #92]	; (8006a88 <MX_UART5_Init+0x98>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8006a30:	4b15      	ldr	r3, [pc, #84]	; (8006a88 <MX_UART5_Init+0x98>)
 8006a32:	2208      	movs	r2, #8
 8006a34:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8006a36:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <MX_UART5_Init+0x98>)
 8006a38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006a3c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006a3e:	4812      	ldr	r0, [pc, #72]	; (8006a88 <MX_UART5_Init+0x98>)
 8006a40:	f00c fc1c 	bl	801327c <HAL_UART_Init>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <MX_UART5_Init+0x5e>
  {
    Error_Handler();
 8006a4a:	f7fe fc21 	bl	8005290 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006a4e:	2100      	movs	r1, #0
 8006a50:	480d      	ldr	r0, [pc, #52]	; (8006a88 <MX_UART5_Init+0x98>)
 8006a52:	f00f f968 	bl	8015d26 <HAL_UARTEx_SetTxFifoThreshold>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <MX_UART5_Init+0x70>
  {
    Error_Handler();
 8006a5c:	f7fe fc18 	bl	8005290 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006a60:	2100      	movs	r1, #0
 8006a62:	4809      	ldr	r0, [pc, #36]	; (8006a88 <MX_UART5_Init+0x98>)
 8006a64:	f00f f99d 	bl	8015da2 <HAL_UARTEx_SetRxFifoThreshold>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <MX_UART5_Init+0x82>
  {
    Error_Handler();
 8006a6e:	f7fe fc0f 	bl	8005290 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8006a72:	4805      	ldr	r0, [pc, #20]	; (8006a88 <MX_UART5_Init+0x98>)
 8006a74:	f00f f91e 	bl	8015cb4 <HAL_UARTEx_DisableFifoMode>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <MX_UART5_Init+0x92>
  {
    Error_Handler();
 8006a7e:	f7fe fc07 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006a82:	bf00      	nop
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	200011f4 	.word	0x200011f4
 8006a8c:	40005000 	.word	0x40005000
 8006a90:	000f4240 	.word	0x000f4240

08006a94 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006a98:	4b22      	ldr	r3, [pc, #136]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006a9a:	4a23      	ldr	r2, [pc, #140]	; (8006b28 <MX_USART1_UART_Init+0x94>)
 8006a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8006a9e:	4b21      	ldr	r3, [pc, #132]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006aa0:	4a22      	ldr	r2, [pc, #136]	; (8006b2c <MX_USART1_UART_Init+0x98>)
 8006aa2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006aa4:	4b1f      	ldr	r3, [pc, #124]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006aaa:	4b1e      	ldr	r3, [pc, #120]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006ab0:	4b1c      	ldr	r3, [pc, #112]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006ab6:	4b1b      	ldr	r3, [pc, #108]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006ab8:	220c      	movs	r2, #12
 8006aba:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006abc:	4b19      	ldr	r3, [pc, #100]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ac2:	4b18      	ldr	r3, [pc, #96]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006ac8:	4b16      	ldr	r3, [pc, #88]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006ace:	4b15      	ldr	r3, [pc, #84]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006ad4:	4b13      	ldr	r3, [pc, #76]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006ada:	4812      	ldr	r0, [pc, #72]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006adc:	f00c fbce 	bl	801327c <HAL_UART_Init>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8006ae6:	f7fe fbd3 	bl	8005290 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006aea:	2100      	movs	r1, #0
 8006aec:	480d      	ldr	r0, [pc, #52]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006aee:	f00f f91a 	bl	8015d26 <HAL_UARTEx_SetTxFifoThreshold>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8006af8:	f7fe fbca 	bl	8005290 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006afc:	2100      	movs	r1, #0
 8006afe:	4809      	ldr	r0, [pc, #36]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006b00:	f00f f94f 	bl	8015da2 <HAL_UARTEx_SetRxFifoThreshold>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8006b0a:	f7fe fbc1 	bl	8005290 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006b0e:	4805      	ldr	r0, [pc, #20]	; (8006b24 <MX_USART1_UART_Init+0x90>)
 8006b10:	f00f f8d0 	bl	8015cb4 <HAL_UARTEx_DisableFifoMode>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8006b1a:	f7fe fbb9 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006b1e:	bf00      	nop
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20001284 	.word	0x20001284
 8006b28:	40011000 	.word	0x40011000
 8006b2c:	001e8480 	.word	0x001e8480

08006b30 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006b34:	4b22      	ldr	r3, [pc, #136]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006b36:	4a23      	ldr	r2, [pc, #140]	; (8006bc4 <MX_USART3_UART_Init+0x94>)
 8006b38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006b3a:	4b21      	ldr	r3, [pc, #132]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006b42:	4b1f      	ldr	r3, [pc, #124]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006b48:	4b1d      	ldr	r3, [pc, #116]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006b4e:	4b1c      	ldr	r3, [pc, #112]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006b54:	4b1a      	ldr	r3, [pc, #104]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006b56:	220c      	movs	r2, #12
 8006b58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b5a:	4b19      	ldr	r3, [pc, #100]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b60:	4b17      	ldr	r3, [pc, #92]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b66:	4b16      	ldr	r3, [pc, #88]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006b6c:	4b14      	ldr	r3, [pc, #80]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b72:	4b13      	ldr	r3, [pc, #76]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006b78:	4811      	ldr	r0, [pc, #68]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006b7a:	f00c fb7f 	bl	801327c <HAL_UART_Init>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006b84:	f7fe fb84 	bl	8005290 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b88:	2100      	movs	r1, #0
 8006b8a:	480d      	ldr	r0, [pc, #52]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006b8c:	f00f f8cb 	bl	8015d26 <HAL_UARTEx_SetTxFifoThreshold>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8006b96:	f7fe fb7b 	bl	8005290 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	4808      	ldr	r0, [pc, #32]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006b9e:	f00f f900 	bl	8015da2 <HAL_UARTEx_SetRxFifoThreshold>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006ba8:	f7fe fb72 	bl	8005290 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006bac:	4804      	ldr	r0, [pc, #16]	; (8006bc0 <MX_USART3_UART_Init+0x90>)
 8006bae:	f00f f881 	bl	8015cb4 <HAL_UARTEx_DisableFifoMode>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006bb8:	f7fe fb6a 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006bbc:	bf00      	nop
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	20001314 	.word	0x20001314
 8006bc4:	40004800 	.word	0x40004800

08006bc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08e      	sub	sp, #56	; 0x38
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	605a      	str	r2, [r3, #4]
 8006bda:	609a      	str	r2, [r3, #8]
 8006bdc:	60da      	str	r2, [r3, #12]
 8006bde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a86      	ldr	r2, [pc, #536]	; (8006e00 <HAL_UART_MspInit+0x238>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	f040 8094 	bne.w	8006d14 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8006bec:	4b85      	ldr	r3, [pc, #532]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006bee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bf2:	4a84      	ldr	r2, [pc, #528]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bf8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006bfc:	4b81      	ldr	r3, [pc, #516]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006bfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c06:	623b      	str	r3, [r7, #32]
 8006c08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c0a:	4b7e      	ldr	r3, [pc, #504]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c10:	4a7c      	ldr	r2, [pc, #496]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006c12:	f043 0302 	orr.w	r3, r3, #2
 8006c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c1a:	4b7a      	ldr	r3, [pc, #488]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006c28:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c2e:	2302      	movs	r3, #2
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c36:	2300      	movs	r3, #0
 8006c38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8006c3a:	230e      	movs	r3, #14
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c42:	4619      	mov	r1, r3
 8006c44:	4870      	ldr	r0, [pc, #448]	; (8006e08 <HAL_UART_MspInit+0x240>)
 8006c46:	f005 f85d 	bl	800bd04 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006c4a:	4b70      	ldr	r3, [pc, #448]	; (8006e0c <HAL_UART_MspInit+0x244>)
 8006c4c:	4a70      	ldr	r2, [pc, #448]	; (8006e10 <HAL_UART_MspInit+0x248>)
 8006c4e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8006c50:	4b6e      	ldr	r3, [pc, #440]	; (8006e0c <HAL_UART_MspInit+0x244>)
 8006c52:	2241      	movs	r2, #65	; 0x41
 8006c54:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c56:	4b6d      	ldr	r3, [pc, #436]	; (8006e0c <HAL_UART_MspInit+0x244>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c5c:	4b6b      	ldr	r3, [pc, #428]	; (8006e0c <HAL_UART_MspInit+0x244>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006c62:	4b6a      	ldr	r3, [pc, #424]	; (8006e0c <HAL_UART_MspInit+0x244>)
 8006c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c68:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c6a:	4b68      	ldr	r3, [pc, #416]	; (8006e0c <HAL_UART_MspInit+0x244>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c70:	4b66      	ldr	r3, [pc, #408]	; (8006e0c <HAL_UART_MspInit+0x244>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8006c76:	4b65      	ldr	r3, [pc, #404]	; (8006e0c <HAL_UART_MspInit+0x244>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006c7c:	4b63      	ldr	r3, [pc, #396]	; (8006e0c <HAL_UART_MspInit+0x244>)
 8006c7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c82:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c84:	4b61      	ldr	r3, [pc, #388]	; (8006e0c <HAL_UART_MspInit+0x244>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006c8a:	4860      	ldr	r0, [pc, #384]	; (8006e0c <HAL_UART_MspInit+0x244>)
 8006c8c:	f002 fe08 	bl	80098a0 <HAL_DMA_Init>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8006c96:	f7fe fafb 	bl	8005290 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a5b      	ldr	r2, [pc, #364]	; (8006e0c <HAL_UART_MspInit+0x244>)
 8006c9e:	67da      	str	r2, [r3, #124]	; 0x7c
 8006ca0:	4a5a      	ldr	r2, [pc, #360]	; (8006e0c <HAL_UART_MspInit+0x244>)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream1;
 8006ca6:	4b5b      	ldr	r3, [pc, #364]	; (8006e14 <HAL_UART_MspInit+0x24c>)
 8006ca8:	4a5b      	ldr	r2, [pc, #364]	; (8006e18 <HAL_UART_MspInit+0x250>)
 8006caa:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8006cac:	4b59      	ldr	r3, [pc, #356]	; (8006e14 <HAL_UART_MspInit+0x24c>)
 8006cae:	2242      	movs	r2, #66	; 0x42
 8006cb0:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cb2:	4b58      	ldr	r3, [pc, #352]	; (8006e14 <HAL_UART_MspInit+0x24c>)
 8006cb4:	2240      	movs	r2, #64	; 0x40
 8006cb6:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cb8:	4b56      	ldr	r3, [pc, #344]	; (8006e14 <HAL_UART_MspInit+0x24c>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006cbe:	4b55      	ldr	r3, [pc, #340]	; (8006e14 <HAL_UART_MspInit+0x24c>)
 8006cc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cc4:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cc6:	4b53      	ldr	r3, [pc, #332]	; (8006e14 <HAL_UART_MspInit+0x24c>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ccc:	4b51      	ldr	r3, [pc, #324]	; (8006e14 <HAL_UART_MspInit+0x24c>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8006cd2:	4b50      	ldr	r3, [pc, #320]	; (8006e14 <HAL_UART_MspInit+0x24c>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006cd8:	4b4e      	ldr	r3, [pc, #312]	; (8006e14 <HAL_UART_MspInit+0x24c>)
 8006cda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006cde:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ce0:	4b4c      	ldr	r3, [pc, #304]	; (8006e14 <HAL_UART_MspInit+0x24c>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8006ce6:	484b      	ldr	r0, [pc, #300]	; (8006e14 <HAL_UART_MspInit+0x24c>)
 8006ce8:	f002 fdda 	bl	80098a0 <HAL_DMA_Init>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8006cf2:	f7fe facd 	bl	8005290 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a46      	ldr	r2, [pc, #280]	; (8006e14 <HAL_UART_MspInit+0x24c>)
 8006cfa:	679a      	str	r2, [r3, #120]	; 0x78
 8006cfc:	4a45      	ldr	r2, [pc, #276]	; (8006e14 <HAL_UART_MspInit+0x24c>)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8006d02:	2200      	movs	r2, #0
 8006d04:	2100      	movs	r1, #0
 8006d06:	2035      	movs	r0, #53	; 0x35
 8006d08:	f002 fb97 	bl	800943a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006d0c:	2035      	movs	r0, #53	; 0x35
 8006d0e:	f002 fbae 	bl	800946e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006d12:	e070      	b.n	8006df6 <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART1)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a40      	ldr	r2, [pc, #256]	; (8006e1c <HAL_UART_MspInit+0x254>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d12f      	bne.n	8006d7e <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d1e:	4b39      	ldr	r3, [pc, #228]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d24:	4a37      	ldr	r2, [pc, #220]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006d26:	f043 0310 	orr.w	r3, r3, #16
 8006d2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006d2e:	4b35      	ldr	r3, [pc, #212]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d3c:	4b31      	ldr	r3, [pc, #196]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d42:	4a30      	ldr	r2, [pc, #192]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006d44:	f043 0302 	orr.w	r3, r3, #2
 8006d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d4c:	4b2d      	ldr	r3, [pc, #180]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006d5a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d60:	2302      	movs	r3, #2
 8006d62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d64:	2300      	movs	r3, #0
 8006d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d74:	4619      	mov	r1, r3
 8006d76:	4824      	ldr	r0, [pc, #144]	; (8006e08 <HAL_UART_MspInit+0x240>)
 8006d78:	f004 ffc4 	bl	800bd04 <HAL_GPIO_Init>
}
 8006d7c:	e03b      	b.n	8006df6 <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART3)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a27      	ldr	r2, [pc, #156]	; (8006e20 <HAL_UART_MspInit+0x258>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d136      	bne.n	8006df6 <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006d88:	4b1e      	ldr	r3, [pc, #120]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006d8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d8e:	4a1d      	ldr	r2, [pc, #116]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006d98:	4b1a      	ldr	r3, [pc, #104]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006d9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006da6:	4b17      	ldr	r3, [pc, #92]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dac:	4a15      	ldr	r2, [pc, #84]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006dae:	f043 0308 	orr.w	r3, r3, #8
 8006db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006db6:	4b13      	ldr	r3, [pc, #76]	; (8006e04 <HAL_UART_MspInit+0x23c>)
 8006db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dbc:	f003 0308 	and.w	r3, r3, #8
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006dc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006dd6:	2307      	movs	r3, #7
 8006dd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dde:	4619      	mov	r1, r3
 8006de0:	4810      	ldr	r0, [pc, #64]	; (8006e24 <HAL_UART_MspInit+0x25c>)
 8006de2:	f004 ff8f 	bl	800bd04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006de6:	2200      	movs	r2, #0
 8006de8:	2100      	movs	r1, #0
 8006dea:	2027      	movs	r0, #39	; 0x27
 8006dec:	f002 fb25 	bl	800943a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006df0:	2027      	movs	r0, #39	; 0x27
 8006df2:	f002 fb3c 	bl	800946e <HAL_NVIC_EnableIRQ>
}
 8006df6:	bf00      	nop
 8006df8:	3738      	adds	r7, #56	; 0x38
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	40005000 	.word	0x40005000
 8006e04:	58024400 	.word	0x58024400
 8006e08:	58020400 	.word	0x58020400
 8006e0c:	200013a4 	.word	0x200013a4
 8006e10:	40020010 	.word	0x40020010
 8006e14:	2000141c 	.word	0x2000141c
 8006e18:	40020028 	.word	0x40020028
 8006e1c:	40011000 	.word	0x40011000
 8006e20:	40004800 	.word	0x40004800
 8006e24:	58020c00 	.word	0x58020c00

08006e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006e2c:	f7fe fc2e 	bl	800568c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006e30:	480c      	ldr	r0, [pc, #48]	; (8006e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006e32:	490d      	ldr	r1, [pc, #52]	; (8006e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006e34:	4a0d      	ldr	r2, [pc, #52]	; (8006e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e38:	e002      	b.n	8006e40 <LoopCopyDataInit>

08006e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e3e:	3304      	adds	r3, #4

08006e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e44:	d3f9      	bcc.n	8006e3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e46:	4a0a      	ldr	r2, [pc, #40]	; (8006e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006e48:	4c0a      	ldr	r4, [pc, #40]	; (8006e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e4c:	e001      	b.n	8006e52 <LoopFillZerobss>

08006e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e50:	3204      	adds	r2, #4

08006e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e54:	d3fb      	bcc.n	8006e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006e56:	f00f f837 	bl	8015ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e5a:	f7fb fed5 	bl	8002c08 <main>
  bx  lr
 8006e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e68:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8006e6c:	08017278 	.word	0x08017278
  ldr r2, =_sbss
 8006e70:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8006e74:	20001498 	.word	0x20001498

08006e78 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e78:	e7fe      	b.n	8006e78 <ADC_IRQHandler>
	...

08006e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e82:	2003      	movs	r0, #3
 8006e84:	f002 face 	bl	8009424 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e88:	f007 fa88 	bl	800e39c <HAL_RCC_GetSysClockFreq>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	4b15      	ldr	r3, [pc, #84]	; (8006ee4 <HAL_Init+0x68>)
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	0a1b      	lsrs	r3, r3, #8
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	4913      	ldr	r1, [pc, #76]	; (8006ee8 <HAL_Init+0x6c>)
 8006e9a:	5ccb      	ldrb	r3, [r1, r3]
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ea6:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <HAL_Init+0x68>)
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	4a0e      	ldr	r2, [pc, #56]	; (8006ee8 <HAL_Init+0x6c>)
 8006eb0:	5cd3      	ldrb	r3, [r2, r3]
 8006eb2:	f003 031f 	and.w	r3, r3, #31
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebc:	4a0b      	ldr	r2, [pc, #44]	; (8006eec <HAL_Init+0x70>)
 8006ebe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ec0:	4a0b      	ldr	r2, [pc, #44]	; (8006ef0 <HAL_Init+0x74>)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f000 f814 	bl	8006ef4 <HAL_InitTick>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e002      	b.n	8006edc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006ed6:	f7fe fb45 	bl	8005564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	58024400 	.word	0x58024400
 8006ee8:	08016fe0 	.word	0x08016fe0
 8006eec:	20000024 	.word	0x20000024
 8006ef0:	20000020 	.word	0x20000020

08006ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006efc:	4b15      	ldr	r3, [pc, #84]	; (8006f54 <HAL_InitTick+0x60>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e021      	b.n	8006f4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006f08:	4b13      	ldr	r3, [pc, #76]	; (8006f58 <HAL_InitTick+0x64>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	4b11      	ldr	r3, [pc, #68]	; (8006f54 <HAL_InitTick+0x60>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	4619      	mov	r1, r3
 8006f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f002 fab3 	bl	800948a <HAL_SYSTICK_Config>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e00e      	b.n	8006f4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b0f      	cmp	r3, #15
 8006f32:	d80a      	bhi.n	8006f4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f34:	2200      	movs	r2, #0
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3c:	f002 fa7d 	bl	800943a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f40:	4a06      	ldr	r2, [pc, #24]	; (8006f5c <HAL_InitTick+0x68>)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e000      	b.n	8006f4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	2000002c 	.word	0x2000002c
 8006f58:	20000020 	.word	0x20000020
 8006f5c:	20000028 	.word	0x20000028

08006f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006f64:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <HAL_IncTick+0x20>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <HAL_IncTick+0x24>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4413      	add	r3, r2
 8006f70:	4a04      	ldr	r2, [pc, #16]	; (8006f84 <HAL_IncTick+0x24>)
 8006f72:	6013      	str	r3, [r2, #0]
}
 8006f74:	bf00      	nop
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	2000002c 	.word	0x2000002c
 8006f84:	20001494 	.word	0x20001494

08006f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8006f8c:	4b03      	ldr	r3, [pc, #12]	; (8006f9c <HAL_GetTick+0x14>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	20001494 	.word	0x20001494

08006fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fa8:	f7ff ffee 	bl	8006f88 <HAL_GetTick>
 8006fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb8:	d005      	beq.n	8006fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006fba:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <HAL_Delay+0x44>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006fc6:	bf00      	nop
 8006fc8:	f7ff ffde 	bl	8006f88 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d8f7      	bhi.n	8006fc8 <HAL_Delay+0x28>
  {
  }
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	2000002c 	.word	0x2000002c

08006fe8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	609a      	str	r2, [r3, #8]
}
 8007002:	bf00      	nop
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	431a      	orrs	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	609a      	str	r2, [r3, #8]
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3360      	adds	r3, #96	; 0x60
 8007062:	461a      	mov	r2, r3
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4a10      	ldr	r2, [pc, #64]	; (80070b0 <LL_ADC_SetOffset+0x60>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d10b      	bne.n	800708c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	4313      	orrs	r3, r2
 8007082:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800708a:	e00b      	b.n	80070a4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	430b      	orrs	r3, r1
 800709e:	431a      	orrs	r2, r3
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	601a      	str	r2, [r3, #0]
}
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	58026000 	.word	0x58026000

080070b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	3360      	adds	r3, #96	; 0x60
 80070c2:	461a      	mov	r2, r3
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f003 031f 	and.w	r3, r3, #31
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007100:	431a      	orrs	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	611a      	str	r2, [r3, #16]
}
 8007106:	bf00      	nop
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4a0c      	ldr	r2, [pc, #48]	; (8007154 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d00e      	beq.n	8007146 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3360      	adds	r3, #96	; 0x60
 800712c:	461a      	mov	r2, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	431a      	orrs	r2, r3
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	601a      	str	r2, [r3, #0]
  }
}
 8007146:	bf00      	nop
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	58026000 	.word	0x58026000

08007158 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4a0c      	ldr	r2, [pc, #48]	; (8007198 <LL_ADC_SetOffsetSaturation+0x40>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d10e      	bne.n	800718a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3360      	adds	r3, #96	; 0x60
 8007170:	461a      	mov	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	431a      	orrs	r2, r3
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	58026000 	.word	0x58026000

0800719c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4a0c      	ldr	r2, [pc, #48]	; (80071dc <LL_ADC_SetOffsetSign+0x40>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d10e      	bne.n	80071ce <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3360      	adds	r3, #96	; 0x60
 80071b4:	461a      	mov	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	431a      	orrs	r2, r3
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80071ce:	bf00      	nop
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	58026000 	.word	0x58026000

080071e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3360      	adds	r3, #96	; 0x60
 80071f0:	461a      	mov	r2, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4a0c      	ldr	r2, [pc, #48]	; (8007230 <LL_ADC_SetOffsetState+0x50>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d108      	bne.n	8007214 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	431a      	orrs	r2, r3
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8007212:	e007      	b.n	8007224 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	431a      	orrs	r2, r3
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	601a      	str	r2, [r3, #0]
}
 8007224:	bf00      	nop
 8007226:	371c      	adds	r7, #28
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	58026000 	.word	0x58026000

08007234 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007248:	2301      	movs	r3, #1
 800724a:	e000      	b.n	800724e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800725a:	b480      	push	{r7}
 800725c:	b087      	sub	sp, #28
 800725e:	af00      	add	r7, sp, #0
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3330      	adds	r3, #48	; 0x30
 800726a:	461a      	mov	r2, r3
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	0a1b      	lsrs	r3, r3, #8
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	f003 030c 	and.w	r3, r3, #12
 8007276:	4413      	add	r3, r2
 8007278:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f003 031f 	and.w	r3, r3, #31
 8007284:	211f      	movs	r1, #31
 8007286:	fa01 f303 	lsl.w	r3, r1, r3
 800728a:	43db      	mvns	r3, r3
 800728c:	401a      	ands	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	0e9b      	lsrs	r3, r3, #26
 8007292:	f003 011f 	and.w	r1, r3, #31
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f003 031f 	and.w	r3, r3, #31
 800729c:	fa01 f303 	lsl.w	r3, r1, r3
 80072a0:	431a      	orrs	r2, r3
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072be:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3314      	adds	r3, #20
 80072e8:	461a      	mov	r2, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	0e5b      	lsrs	r3, r3, #25
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	f003 0304 	and.w	r3, r3, #4
 80072f4:	4413      	add	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	0d1b      	lsrs	r3, r3, #20
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	2107      	movs	r1, #7
 8007306:	fa01 f303 	lsl.w	r3, r1, r3
 800730a:	43db      	mvns	r3, r3
 800730c:	401a      	ands	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	0d1b      	lsrs	r3, r3, #20
 8007312:	f003 031f 	and.w	r3, r3, #31
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	fa01 f303 	lsl.w	r3, r1, r3
 800731c:	431a      	orrs	r2, r3
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4a1a      	ldr	r2, [pc, #104]	; (80073a8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d115      	bne.n	8007370 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007350:	43db      	mvns	r3, r3
 8007352:	401a      	ands	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f003 0318 	and.w	r3, r3, #24
 800735a:	4914      	ldr	r1, [pc, #80]	; (80073ac <LL_ADC_SetChannelSingleDiff+0x7c>)
 800735c:	40d9      	lsrs	r1, r3
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	400b      	ands	r3, r1
 8007362:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007366:	431a      	orrs	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800736e:	e014      	b.n	800739a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800737c:	43db      	mvns	r3, r3
 800737e:	401a      	ands	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f003 0318 	and.w	r3, r3, #24
 8007386:	4909      	ldr	r1, [pc, #36]	; (80073ac <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007388:	40d9      	lsrs	r1, r3
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	400b      	ands	r3, r1
 800738e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007392:	431a      	orrs	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800739a:	bf00      	nop
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	58026000 	.word	0x58026000
 80073ac:	000fffff 	.word	0x000fffff

080073b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f003 031f 	and.w	r3, r3, #31
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689a      	ldr	r2, [r3, #8]
 80073f4:	4b04      	ldr	r3, [pc, #16]	; (8007408 <LL_ADC_DisableDeepPowerDown+0x20>)
 80073f6:	4013      	ands	r3, r2
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6093      	str	r3, [r2, #8]
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	5fffffc0 	.word	0x5fffffc0

0800740c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800741c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007420:	d101      	bne.n	8007426 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007422:	2301      	movs	r3, #1
 8007424:	e000      	b.n	8007428 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	4b05      	ldr	r3, [pc, #20]	; (8007458 <LL_ADC_EnableInternalRegulator+0x24>)
 8007442:	4013      	ands	r3, r2
 8007444:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	6fffffc0 	.word	0x6fffffc0

0800745c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800746c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007470:	d101      	bne.n	8007476 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007472:	2301      	movs	r3, #1
 8007474:	e000      	b.n	8007478 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	4b05      	ldr	r3, [pc, #20]	; (80074a8 <LL_ADC_Enable+0x24>)
 8007492:	4013      	ands	r3, r2
 8007494:	f043 0201 	orr.w	r2, r3, #1
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	7fffffc0 	.word	0x7fffffc0

080074ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <LL_ADC_Disable+0x24>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	f043 0202 	orr.w	r2, r3, #2
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	7fffffc0 	.word	0x7fffffc0

080074d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <LL_ADC_IsEnabled+0x18>
 80074e8:	2301      	movs	r3, #1
 80074ea:	e000      	b.n	80074ee <LL_ADC_IsEnabled+0x1a>
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	2b02      	cmp	r3, #2
 800750c:	d101      	bne.n	8007512 <LL_ADC_IsDisableOngoing+0x18>
 800750e:	2301      	movs	r3, #1
 8007510:	e000      	b.n	8007514 <LL_ADC_IsDisableOngoing+0x1a>
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	4b05      	ldr	r3, [pc, #20]	; (8007544 <LL_ADC_REG_StartConversion+0x24>)
 800752e:	4013      	ands	r3, r2
 8007530:	f043 0204 	orr.w	r2, r3, #4
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	7fffffc0 	.word	0x7fffffc0

08007548 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b04      	cmp	r3, #4
 800755a:	d101      	bne.n	8007560 <LL_ADC_REG_IsConversionOngoing+0x18>
 800755c:	2301      	movs	r3, #1
 800755e:	e000      	b.n	8007562 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b08      	cmp	r3, #8
 8007580:	d101      	bne.n	8007586 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007594:	b590      	push	{r4, r7, lr}
 8007596:	b089      	sub	sp, #36	; 0x24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80075a0:	2300      	movs	r3, #0
 80075a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e1ee      	b.n	800798c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7f9 fb6b 	bl	8000c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7ff ff19 	bl	800740c <LL_ADC_IsDeepPowerDownEnabled>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d004      	beq.n	80075ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff feff 	bl	80073e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff ff34 	bl	800745c <LL_ADC_IsInternalRegulatorEnabled>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d114      	bne.n	8007624 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7ff ff18 	bl	8007434 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007604:	4b8e      	ldr	r3, [pc, #568]	; (8007840 <HAL_ADC_Init+0x2ac>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	099b      	lsrs	r3, r3, #6
 800760a:	4a8e      	ldr	r2, [pc, #568]	; (8007844 <HAL_ADC_Init+0x2b0>)
 800760c:	fba2 2303 	umull	r2, r3, r2, r3
 8007610:	099b      	lsrs	r3, r3, #6
 8007612:	3301      	adds	r3, #1
 8007614:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007616:	e002      	b.n	800761e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	3b01      	subs	r3, #1
 800761c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1f9      	bne.n	8007618 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff ff17 	bl	800745c <LL_ADC_IsInternalRegulatorEnabled>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10d      	bne.n	8007650 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007638:	f043 0210 	orr.w	r2, r3, #16
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007644:	f043 0201 	orr.w	r2, r3, #1
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff ff77 	bl	8007548 <LL_ADC_REG_IsConversionOngoing>
 800765a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007660:	f003 0310 	and.w	r3, r3, #16
 8007664:	2b00      	cmp	r3, #0
 8007666:	f040 8188 	bne.w	800797a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f040 8184 	bne.w	800797a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007676:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800767a:	f043 0202 	orr.w	r2, r3, #2
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff ff24 	bl	80074d4 <LL_ADC_IsEnabled>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d136      	bne.n	8007700 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a6c      	ldr	r2, [pc, #432]	; (8007848 <HAL_ADC_Init+0x2b4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d004      	beq.n	80076a6 <HAL_ADC_Init+0x112>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a6a      	ldr	r2, [pc, #424]	; (800784c <HAL_ADC_Init+0x2b8>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d10e      	bne.n	80076c4 <HAL_ADC_Init+0x130>
 80076a6:	4868      	ldr	r0, [pc, #416]	; (8007848 <HAL_ADC_Init+0x2b4>)
 80076a8:	f7ff ff14 	bl	80074d4 <LL_ADC_IsEnabled>
 80076ac:	4604      	mov	r4, r0
 80076ae:	4867      	ldr	r0, [pc, #412]	; (800784c <HAL_ADC_Init+0x2b8>)
 80076b0:	f7ff ff10 	bl	80074d4 <LL_ADC_IsEnabled>
 80076b4:	4603      	mov	r3, r0
 80076b6:	4323      	orrs	r3, r4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	bf0c      	ite	eq
 80076bc:	2301      	moveq	r3, #1
 80076be:	2300      	movne	r3, #0
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	e008      	b.n	80076d6 <HAL_ADC_Init+0x142>
 80076c4:	4862      	ldr	r0, [pc, #392]	; (8007850 <HAL_ADC_Init+0x2bc>)
 80076c6:	f7ff ff05 	bl	80074d4 <LL_ADC_IsEnabled>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bf0c      	ite	eq
 80076d0:	2301      	moveq	r3, #1
 80076d2:	2300      	movne	r3, #0
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d012      	beq.n	8007700 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a5a      	ldr	r2, [pc, #360]	; (8007848 <HAL_ADC_Init+0x2b4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d004      	beq.n	80076ee <HAL_ADC_Init+0x15a>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a58      	ldr	r2, [pc, #352]	; (800784c <HAL_ADC_Init+0x2b8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d101      	bne.n	80076f2 <HAL_ADC_Init+0x15e>
 80076ee:	4a59      	ldr	r2, [pc, #356]	; (8007854 <HAL_ADC_Init+0x2c0>)
 80076f0:	e000      	b.n	80076f4 <HAL_ADC_Init+0x160>
 80076f2:	4a59      	ldr	r2, [pc, #356]	; (8007858 <HAL_ADC_Init+0x2c4>)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	4619      	mov	r1, r3
 80076fa:	4610      	mov	r0, r2
 80076fc:	f7ff fc74 	bl	8006fe8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a52      	ldr	r2, [pc, #328]	; (8007850 <HAL_ADC_Init+0x2bc>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d129      	bne.n	800775e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7e5b      	ldrb	r3, [r3, #25]
 800770e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007714:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800771a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	2b08      	cmp	r3, #8
 8007722:	d013      	beq.n	800774c <HAL_ADC_Init+0x1b8>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	2b0c      	cmp	r3, #12
 800772a:	d00d      	beq.n	8007748 <HAL_ADC_Init+0x1b4>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	2b1c      	cmp	r3, #28
 8007732:	d007      	beq.n	8007744 <HAL_ADC_Init+0x1b0>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	2b18      	cmp	r3, #24
 800773a:	d101      	bne.n	8007740 <HAL_ADC_Init+0x1ac>
 800773c:	2318      	movs	r3, #24
 800773e:	e006      	b.n	800774e <HAL_ADC_Init+0x1ba>
 8007740:	2300      	movs	r3, #0
 8007742:	e004      	b.n	800774e <HAL_ADC_Init+0x1ba>
 8007744:	2310      	movs	r3, #16
 8007746:	e002      	b.n	800774e <HAL_ADC_Init+0x1ba>
 8007748:	2308      	movs	r3, #8
 800774a:	e000      	b.n	800774e <HAL_ADC_Init+0x1ba>
 800774c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800774e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007756:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007758:	4313      	orrs	r3, r2
 800775a:	61bb      	str	r3, [r7, #24]
 800775c:	e00e      	b.n	800777c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	7e5b      	ldrb	r3, [r3, #25]
 8007762:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007768:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800776e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007776:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007778:	4313      	orrs	r3, r2
 800777a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d106      	bne.n	8007794 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	3b01      	subs	r3, #1
 800778c:	045b      	lsls	r3, r3, #17
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	4313      	orrs	r3, r2
 8007792:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	2b00      	cmp	r3, #0
 800779a:	d009      	beq.n	80077b0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a26      	ldr	r2, [pc, #152]	; (8007850 <HAL_ADC_Init+0x2bc>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d115      	bne.n	80077e6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	4b26      	ldr	r3, [pc, #152]	; (800785c <HAL_ADC_Init+0x2c8>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	69b9      	ldr	r1, [r7, #24]
 80077ca:	430b      	orrs	r3, r1
 80077cc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	611a      	str	r2, [r3, #16]
 80077e4:	e009      	b.n	80077fa <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	4b1c      	ldr	r3, [pc, #112]	; (8007860 <HAL_ADC_Init+0x2cc>)
 80077ee:	4013      	ands	r3, r2
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	6812      	ldr	r2, [r2, #0]
 80077f4:	69b9      	ldr	r1, [r7, #24]
 80077f6:	430b      	orrs	r3, r1
 80077f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff fea2 	bl	8007548 <LL_ADC_REG_IsConversionOngoing>
 8007804:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff feaf 	bl	800756e <LL_ADC_INJ_IsConversionOngoing>
 8007810:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	f040 808e 	bne.w	8007936 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	f040 808a 	bne.w	8007936 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a0a      	ldr	r2, [pc, #40]	; (8007850 <HAL_ADC_Init+0x2bc>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d11b      	bne.n	8007864 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	7e1b      	ldrb	r3, [r3, #24]
 8007830:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007838:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800783a:	4313      	orrs	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
 800783e:	e018      	b.n	8007872 <HAL_ADC_Init+0x2de>
 8007840:	20000020 	.word	0x20000020
 8007844:	053e2d63 	.word	0x053e2d63
 8007848:	40022000 	.word	0x40022000
 800784c:	40022100 	.word	0x40022100
 8007850:	58026000 	.word	0x58026000
 8007854:	40022300 	.word	0x40022300
 8007858:	58026300 	.word	0x58026300
 800785c:	fff04007 	.word	0xfff04007
 8007860:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	7e1b      	ldrb	r3, [r3, #24]
 8007868:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800786e:	4313      	orrs	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	4b46      	ldr	r3, [pc, #280]	; (8007994 <HAL_ADC_Init+0x400>)
 800787a:	4013      	ands	r3, r2
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	6812      	ldr	r2, [r2, #0]
 8007880:	69b9      	ldr	r1, [r7, #24]
 8007882:	430b      	orrs	r3, r1
 8007884:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800788c:	2b01      	cmp	r3, #1
 800788e:	d137      	bne.n	8007900 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007894:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a3f      	ldr	r2, [pc, #252]	; (8007998 <HAL_ADC_Init+0x404>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d116      	bne.n	80078ce <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	691a      	ldr	r2, [r3, #16]
 80078a6:	4b3d      	ldr	r3, [pc, #244]	; (800799c <HAL_ADC_Init+0x408>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80078b2:	4311      	orrs	r1, r2
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80078b8:	4311      	orrs	r1, r2
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80078be:	430a      	orrs	r2, r1
 80078c0:	431a      	orrs	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f042 0201 	orr.w	r2, r2, #1
 80078ca:	611a      	str	r2, [r3, #16]
 80078cc:	e020      	b.n	8007910 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691a      	ldr	r2, [r3, #16]
 80078d4:	4b32      	ldr	r3, [pc, #200]	; (80079a0 <HAL_ADC_Init+0x40c>)
 80078d6:	4013      	ands	r3, r2
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80078dc:	3a01      	subs	r2, #1
 80078de:	0411      	lsls	r1, r2, #16
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80078e4:	4311      	orrs	r1, r2
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80078ea:	4311      	orrs	r1, r2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80078f0:	430a      	orrs	r2, r1
 80078f2:	431a      	orrs	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0201 	orr.w	r2, r2, #1
 80078fc:	611a      	str	r2, [r3, #16]
 80078fe:	e007      	b.n	8007910 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	691a      	ldr	r2, [r3, #16]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0201 	bic.w	r2, r2, #1
 800790e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a1b      	ldr	r2, [pc, #108]	; (8007998 <HAL_ADC_Init+0x404>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d002      	beq.n	8007936 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 f9e9 	bl	8008d08 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d10c      	bne.n	8007958 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007944:	f023 010f 	bic.w	r1, r3, #15
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	1e5a      	subs	r2, r3, #1
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	631a      	str	r2, [r3, #48]	; 0x30
 8007956:	e007      	b.n	8007968 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 020f 	bic.w	r2, r2, #15
 8007966:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800796c:	f023 0303 	bic.w	r3, r3, #3
 8007970:	f043 0201 	orr.w	r2, r3, #1
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	661a      	str	r2, [r3, #96]	; 0x60
 8007978:	e007      	b.n	800798a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800797e:	f043 0210 	orr.w	r2, r3, #16
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800798a:	7ffb      	ldrb	r3, [r7, #31]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3724      	adds	r7, #36	; 0x24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd90      	pop	{r4, r7, pc}
 8007994:	ffffbffc 	.word	0xffffbffc
 8007998:	58026000 	.word	0x58026000
 800799c:	fc00f81f 	.word	0xfc00f81f
 80079a0:	fc00f81e 	.word	0xfc00f81e

080079a4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a90      	ldr	r2, [pc, #576]	; (8007bf4 <HAL_ADC_Start_IT+0x250>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d004      	beq.n	80079c0 <HAL_ADC_Start_IT+0x1c>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a8f      	ldr	r2, [pc, #572]	; (8007bf8 <HAL_ADC_Start_IT+0x254>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d101      	bne.n	80079c4 <HAL_ADC_Start_IT+0x20>
 80079c0:	4b8e      	ldr	r3, [pc, #568]	; (8007bfc <HAL_ADC_Start_IT+0x258>)
 80079c2:	e000      	b.n	80079c6 <HAL_ADC_Start_IT+0x22>
 80079c4:	4b8e      	ldr	r3, [pc, #568]	; (8007c00 <HAL_ADC_Start_IT+0x25c>)
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff fcf2 	bl	80073b0 <LL_ADC_GetMultimode>
 80079cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff fdb8 	bl	8007548 <LL_ADC_REG_IsConversionOngoing>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f040 8119 	bne.w	8007c12 <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d101      	bne.n	80079ee <HAL_ADC_Start_IT+0x4a>
 80079ea:	2302      	movs	r3, #2
 80079ec:	e116      	b.n	8007c1c <HAL_ADC_Start_IT+0x278>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 f89c 	bl	8008b34 <ADC_Enable>
 80079fc:	4603      	mov	r3, r0
 80079fe:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007a00:	7dfb      	ldrb	r3, [r7, #23]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f040 8100 	bne.w	8007c08 <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007a0c:	4b7d      	ldr	r3, [pc, #500]	; (8007c04 <HAL_ADC_Start_IT+0x260>)
 8007a0e:	4013      	ands	r3, r2
 8007a10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a76      	ldr	r2, [pc, #472]	; (8007bf8 <HAL_ADC_Start_IT+0x254>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d002      	beq.n	8007a28 <HAL_ADC_Start_IT+0x84>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	e000      	b.n	8007a2a <HAL_ADC_Start_IT+0x86>
 8007a28:	4b72      	ldr	r3, [pc, #456]	; (8007bf4 <HAL_ADC_Start_IT+0x250>)
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	6812      	ldr	r2, [r2, #0]
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d002      	beq.n	8007a38 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d105      	bne.n	8007a44 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a3c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d006      	beq.n	8007a5e <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a54:	f023 0206 	bic.w	r2, r3, #6
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	665a      	str	r2, [r3, #100]	; 0x64
 8007a5c:	e002      	b.n	8007a64 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	221c      	movs	r2, #28
 8007a6a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 021c 	bic.w	r2, r2, #28
 8007a82:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d108      	bne.n	8007a9e <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0208 	orr.w	r2, r2, #8
 8007a9a:	605a      	str	r2, [r3, #4]
          break;
 8007a9c:	e008      	b.n	8007ab0 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f042 0204 	orr.w	r2, r2, #4
 8007aac:	605a      	str	r2, [r3, #4]
          break;
 8007aae:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d107      	bne.n	8007ac8 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f042 0210 	orr.w	r2, r2, #16
 8007ac6:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a4a      	ldr	r2, [pc, #296]	; (8007bf8 <HAL_ADC_Start_IT+0x254>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d002      	beq.n	8007ad8 <HAL_ADC_Start_IT+0x134>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	e000      	b.n	8007ada <HAL_ADC_Start_IT+0x136>
 8007ad8:	4b46      	ldr	r3, [pc, #280]	; (8007bf4 <HAL_ADC_Start_IT+0x250>)
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	6812      	ldr	r2, [r2, #0]
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d008      	beq.n	8007af4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	2b05      	cmp	r3, #5
 8007aec:	d002      	beq.n	8007af4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2b09      	cmp	r3, #9
 8007af2:	d13b      	bne.n	8007b6c <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d02d      	beq.n	8007b5e <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	2b08      	cmp	r3, #8
 8007b18:	d110      	bne.n	8007b3c <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0220 	bic.w	r2, r2, #32
 8007b28:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b38:	605a      	str	r2, [r3, #4]
              break;
 8007b3a:	e011      	b.n	8007b60 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b4a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0220 	orr.w	r2, r2, #32
 8007b5a:	605a      	str	r2, [r3, #4]
              break;
 8007b5c:	e000      	b.n	8007b60 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 8007b5e:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7ff fcdb 	bl	8007520 <LL_ADC_REG_StartConversion>
 8007b6a:	e056      	b.n	8007c1a <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b70:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a1e      	ldr	r2, [pc, #120]	; (8007bf8 <HAL_ADC_Start_IT+0x254>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d002      	beq.n	8007b88 <HAL_ADC_Start_IT+0x1e4>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	e000      	b.n	8007b8a <HAL_ADC_Start_IT+0x1e6>
 8007b88:	4b1a      	ldr	r3, [pc, #104]	; (8007bf4 <HAL_ADC_Start_IT+0x250>)
 8007b8a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d03f      	beq.n	8007c18 <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007ba0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d110      	bne.n	8007bd2 <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0220 	bic.w	r2, r2, #32
 8007bbe:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bce:	605a      	str	r2, [r3, #4]
              break;
 8007bd0:	e023      	b.n	8007c1a <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007be0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f042 0220 	orr.w	r2, r2, #32
 8007bf0:	605a      	str	r2, [r3, #4]
              break;
 8007bf2:	e012      	b.n	8007c1a <HAL_ADC_Start_IT+0x276>
 8007bf4:	40022000 	.word	0x40022000
 8007bf8:	40022100 	.word	0x40022100
 8007bfc:	40022300 	.word	0x40022300
 8007c00:	58026300 	.word	0x58026300
 8007c04:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8007c10:	e003      	b.n	8007c1a <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007c12:	2302      	movs	r3, #2
 8007c14:	75fb      	strb	r3, [r7, #23]
 8007c16:	e000      	b.n	8007c1a <HAL_ADC_Start_IT+0x276>
        }
 8007c18:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
	...

08007c40 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08a      	sub	sp, #40	; 0x28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007c48:	2300      	movs	r3, #0
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a87      	ldr	r2, [pc, #540]	; (8007e80 <HAL_ADC_IRQHandler+0x240>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d004      	beq.n	8007c70 <HAL_ADC_IRQHandler+0x30>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a86      	ldr	r2, [pc, #536]	; (8007e84 <HAL_ADC_IRQHandler+0x244>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d101      	bne.n	8007c74 <HAL_ADC_IRQHandler+0x34>
 8007c70:	4b85      	ldr	r3, [pc, #532]	; (8007e88 <HAL_ADC_IRQHandler+0x248>)
 8007c72:	e000      	b.n	8007c76 <HAL_ADC_IRQHandler+0x36>
 8007c74:	4b85      	ldr	r3, [pc, #532]	; (8007e8c <HAL_ADC_IRQHandler+0x24c>)
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff fb9a 	bl	80073b0 <LL_ADC_GetMultimode>
 8007c7c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d017      	beq.n	8007cb8 <HAL_ADC_IRQHandler+0x78>
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d012      	beq.n	8007cb8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c96:	f003 0310 	and.w	r3, r3, #16
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d105      	bne.n	8007caa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 f9fe 	bl	80090ac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	f003 0304 	and.w	r3, r3, #4
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <HAL_ADC_IRQHandler+0x8c>
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	f003 0304 	and.w	r3, r3, #4
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10a      	bne.n	8007ce2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 8083 	beq.w	8007dde <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	f003 0308 	and.w	r3, r3, #8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d07d      	beq.n	8007dde <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ce6:	f003 0310 	and.w	r3, r3, #16
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d105      	bne.n	8007cfa <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7ff fa98 	bl	8007234 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d062      	beq.n	8007dd0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a5d      	ldr	r2, [pc, #372]	; (8007e84 <HAL_ADC_IRQHandler+0x244>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d002      	beq.n	8007d1a <HAL_ADC_IRQHandler+0xda>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	e000      	b.n	8007d1c <HAL_ADC_IRQHandler+0xdc>
 8007d1a:	4b59      	ldr	r3, [pc, #356]	; (8007e80 <HAL_ADC_IRQHandler+0x240>)
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6812      	ldr	r2, [r2, #0]
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d008      	beq.n	8007d36 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d005      	beq.n	8007d36 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2b05      	cmp	r3, #5
 8007d2e:	d002      	beq.n	8007d36 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2b09      	cmp	r3, #9
 8007d34:	d104      	bne.n	8007d40 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	623b      	str	r3, [r7, #32]
 8007d3e:	e00c      	b.n	8007d5a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a4f      	ldr	r2, [pc, #316]	; (8007e84 <HAL_ADC_IRQHandler+0x244>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d002      	beq.n	8007d50 <HAL_ADC_IRQHandler+0x110>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	e000      	b.n	8007d52 <HAL_ADC_IRQHandler+0x112>
 8007d50:	4b4b      	ldr	r3, [pc, #300]	; (8007e80 <HAL_ADC_IRQHandler+0x240>)
 8007d52:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d135      	bne.n	8007dd0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0308 	and.w	r3, r3, #8
 8007d6e:	2b08      	cmp	r3, #8
 8007d70:	d12e      	bne.n	8007dd0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fbe6 	bl	8007548 <LL_ADC_REG_IsConversionOngoing>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d11a      	bne.n	8007db8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 020c 	bic.w	r2, r2, #12
 8007d90:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d112      	bne.n	8007dd0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dae:	f043 0201 	orr.w	r2, r3, #1
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	661a      	str	r2, [r3, #96]	; 0x60
 8007db6:	e00b      	b.n	8007dd0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dbc:	f043 0210 	orr.w	r2, r3, #16
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc8:	f043 0201 	orr.w	r2, r3, #1
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7fb fb5b 	bl	800348c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	220c      	movs	r2, #12
 8007ddc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	f003 0320 	and.w	r3, r3, #32
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d004      	beq.n	8007df2 <HAL_ADC_IRQHandler+0x1b2>
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10b      	bne.n	8007e0a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 80a0 	beq.w	8007f3e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 809a 	beq.w	8007f3e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e0e:	f003 0310 	and.w	r3, r3, #16
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d105      	bne.n	8007e22 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff fa43 	bl	80072b2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007e2c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff f9fe 	bl	8007234 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007e38:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a11      	ldr	r2, [pc, #68]	; (8007e84 <HAL_ADC_IRQHandler+0x244>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d002      	beq.n	8007e4a <HAL_ADC_IRQHandler+0x20a>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	e000      	b.n	8007e4c <HAL_ADC_IRQHandler+0x20c>
 8007e4a:	4b0d      	ldr	r3, [pc, #52]	; (8007e80 <HAL_ADC_IRQHandler+0x240>)
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	6812      	ldr	r2, [r2, #0]
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d008      	beq.n	8007e66 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d005      	beq.n	8007e66 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b06      	cmp	r3, #6
 8007e5e:	d002      	beq.n	8007e66 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	2b07      	cmp	r3, #7
 8007e64:	d104      	bne.n	8007e70 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	623b      	str	r3, [r7, #32]
 8007e6e:	e014      	b.n	8007e9a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a03      	ldr	r2, [pc, #12]	; (8007e84 <HAL_ADC_IRQHandler+0x244>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00a      	beq.n	8007e90 <HAL_ADC_IRQHandler+0x250>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	e008      	b.n	8007e92 <HAL_ADC_IRQHandler+0x252>
 8007e80:	40022000 	.word	0x40022000
 8007e84:	40022100 	.word	0x40022100
 8007e88:	40022300 	.word	0x40022300
 8007e8c:	58026300 	.word	0x58026300
 8007e90:	4b84      	ldr	r3, [pc, #528]	; (80080a4 <HAL_ADC_IRQHandler+0x464>)
 8007e92:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d047      	beq.n	8007f30 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d007      	beq.n	8007eba <HAL_ADC_IRQHandler+0x27a>
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d03f      	beq.n	8007f30 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d13a      	bne.n	8007f30 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec4:	2b40      	cmp	r3, #64	; 0x40
 8007ec6:	d133      	bne.n	8007f30 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d12e      	bne.n	8007f30 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff fb49 	bl	800756e <LL_ADC_INJ_IsConversionOngoing>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d11a      	bne.n	8007f18 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ef0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d112      	bne.n	8007f30 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f0e:	f043 0201 	orr.w	r2, r3, #1
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	661a      	str	r2, [r3, #96]	; 0x60
 8007f16:	e00b      	b.n	8007f30 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f1c:	f043 0210 	orr.w	r2, r3, #16
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f28:	f043 0201 	orr.w	r2, r3, #1
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 f893 	bl	800905c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2260      	movs	r2, #96	; 0x60
 8007f3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d011      	beq.n	8007f6c <HAL_ADC_IRQHandler+0x32c>
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00c      	beq.n	8007f6c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f8a8 	bl	80080b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2280      	movs	r2, #128	; 0x80
 8007f6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d012      	beq.n	8007f9c <HAL_ADC_IRQHandler+0x35c>
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00d      	beq.n	8007f9c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f84:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 f879 	bl	8009084 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d012      	beq.n	8007fcc <HAL_ADC_IRQHandler+0x38c>
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00d      	beq.n	8007fcc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 f86b 	bl	8009098 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	f003 0310 	and.w	r3, r3, #16
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d043      	beq.n	800805e <HAL_ADC_IRQHandler+0x41e>
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d03e      	beq.n	800805e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d102      	bne.n	8007fee <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	627b      	str	r3, [r7, #36]	; 0x24
 8007fec:	e021      	b.n	8008032 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d015      	beq.n	8008020 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a2a      	ldr	r2, [pc, #168]	; (80080a4 <HAL_ADC_IRQHandler+0x464>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d004      	beq.n	8008008 <HAL_ADC_IRQHandler+0x3c8>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a29      	ldr	r2, [pc, #164]	; (80080a8 <HAL_ADC_IRQHandler+0x468>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d101      	bne.n	800800c <HAL_ADC_IRQHandler+0x3cc>
 8008008:	4b28      	ldr	r3, [pc, #160]	; (80080ac <HAL_ADC_IRQHandler+0x46c>)
 800800a:	e000      	b.n	800800e <HAL_ADC_IRQHandler+0x3ce>
 800800c:	4b28      	ldr	r3, [pc, #160]	; (80080b0 <HAL_ADC_IRQHandler+0x470>)
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff f9dc 	bl	80073cc <LL_ADC_GetMultiDMATransfer>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00b      	beq.n	8008032 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800801a:	2301      	movs	r3, #1
 800801c:	627b      	str	r3, [r7, #36]	; 0x24
 800801e:	e008      	b.n	8008032 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f003 0303 	and.w	r3, r3, #3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800802e:	2301      	movs	r3, #1
 8008030:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8008032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008034:	2b01      	cmp	r3, #1
 8008036:	d10e      	bne.n	8008056 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800803c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008048:	f043 0202 	orr.w	r2, r3, #2
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f839 	bl	80080c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2210      	movs	r2, #16
 800805c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008064:	2b00      	cmp	r3, #0
 8008066:	d018      	beq.n	800809a <HAL_ADC_IRQHandler+0x45a>
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800806e:	2b00      	cmp	r3, #0
 8008070:	d013      	beq.n	800809a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008076:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008082:	f043 0208 	orr.w	r2, r3, #8
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008092:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 ffeb 	bl	8009070 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800809a:	bf00      	nop
 800809c:	3728      	adds	r7, #40	; 0x28
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	40022000 	.word	0x40022000
 80080a8:	40022100 	.word	0x40022100
 80080ac:	40022300 	.word	0x40022300
 80080b0:	58026300 	.word	0x58026300

080080b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80080dc:	b590      	push	{r4, r7, lr}
 80080de:	b0b9      	sub	sp, #228	; 0xe4
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80080ec:	2300      	movs	r3, #0
 80080ee:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080f6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	4aa9      	ldr	r2, [pc, #676]	; (80083a4 <HAL_ADC_ConfigChannel+0x2c8>)
 80080fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008106:	2b01      	cmp	r3, #1
 8008108:	d102      	bne.n	8008110 <HAL_ADC_ConfigChannel+0x34>
 800810a:	2302      	movs	r3, #2
 800810c:	f000 bcfa 	b.w	8008b04 <HAL_ADC_ConfigChannel+0xa28>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4618      	mov	r0, r3
 800811e:	f7ff fa13 	bl	8007548 <LL_ADC_REG_IsConversionOngoing>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	f040 84de 	bne.w	8008ae6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a9e      	ldr	r2, [pc, #632]	; (80083a8 <HAL_ADC_ConfigChannel+0x2cc>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d033      	beq.n	800819c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800813c:	2b00      	cmp	r3, #0
 800813e:	d108      	bne.n	8008152 <HAL_ADC_ConfigChannel+0x76>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	0e9b      	lsrs	r3, r3, #26
 8008146:	f003 031f 	and.w	r3, r3, #31
 800814a:	2201      	movs	r2, #1
 800814c:	fa02 f303 	lsl.w	r3, r2, r3
 8008150:	e01d      	b.n	800818e <HAL_ADC_ConfigChannel+0xb2>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800815a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800815e:	fa93 f3a3 	rbit	r3, r3
 8008162:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008166:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800816a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800816e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8008176:	2320      	movs	r3, #32
 8008178:	e004      	b.n	8008184 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800817a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800817e:	fab3 f383 	clz	r3, r3
 8008182:	b2db      	uxtb	r3, r3
 8008184:	f003 031f 	and.w	r3, r3, #31
 8008188:	2201      	movs	r2, #1
 800818a:	fa02 f303 	lsl.w	r3, r2, r3
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	6812      	ldr	r2, [r2, #0]
 8008192:	69d1      	ldr	r1, [r2, #28]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	6812      	ldr	r2, [r2, #0]
 8008198:	430b      	orrs	r3, r1
 800819a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6818      	ldr	r0, [r3, #0]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	6859      	ldr	r1, [r3, #4]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	461a      	mov	r2, r3
 80081aa:	f7ff f856 	bl	800725a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7ff f9c8 	bl	8007548 <LL_ADC_REG_IsConversionOngoing>
 80081b8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7ff f9d4 	bl	800756e <LL_ADC_INJ_IsConversionOngoing>
 80081c6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80081ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f040 8270 	bne.w	80086b4 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80081d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f040 826b 	bne.w	80086b4 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6818      	ldr	r0, [r3, #0]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	6819      	ldr	r1, [r3, #0]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	461a      	mov	r2, r3
 80081ec:	f7ff f874 	bl	80072d8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a6c      	ldr	r2, [pc, #432]	; (80083a8 <HAL_ADC_ConfigChannel+0x2cc>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d10d      	bne.n	8008216 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	695a      	ldr	r2, [r3, #20]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	08db      	lsrs	r3, r3, #3
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	fa02 f303 	lsl.w	r3, r2, r3
 8008210:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008214:	e032      	b.n	800827c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008216:	4b65      	ldr	r3, [pc, #404]	; (80083ac <HAL_ADC_ConfigChannel+0x2d0>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800821e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008222:	d10b      	bne.n	800823c <HAL_ADC_ConfigChannel+0x160>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	695a      	ldr	r2, [r3, #20]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	089b      	lsrs	r3, r3, #2
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	fa02 f303 	lsl.w	r3, r2, r3
 800823a:	e01d      	b.n	8008278 <HAL_ADC_ConfigChannel+0x19c>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f003 0310 	and.w	r3, r3, #16
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10b      	bne.n	8008262 <HAL_ADC_ConfigChannel+0x186>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	695a      	ldr	r2, [r3, #20]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	089b      	lsrs	r3, r3, #2
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	fa02 f303 	lsl.w	r3, r2, r3
 8008260:	e00a      	b.n	8008278 <HAL_ADC_ConfigChannel+0x19c>
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	695a      	ldr	r2, [r3, #20]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	089b      	lsrs	r3, r3, #2
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	fa02 f303 	lsl.w	r3, r2, r3
 8008278:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	2b04      	cmp	r3, #4
 8008282:	d048      	beq.n	8008316 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	6919      	ldr	r1, [r3, #16]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008294:	f7fe fedc 	bl	8007050 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a42      	ldr	r2, [pc, #264]	; (80083a8 <HAL_ADC_ConfigChannel+0x2cc>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d119      	bne.n	80082d6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	6919      	ldr	r1, [r3, #16]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	461a      	mov	r2, r3
 80082b0:	f7fe ff74 	bl	800719c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6818      	ldr	r0, [r3, #0]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	6919      	ldr	r1, [r3, #16]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d102      	bne.n	80082cc <HAL_ADC_ConfigChannel+0x1f0>
 80082c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082ca:	e000      	b.n	80082ce <HAL_ADC_ConfigChannel+0x1f2>
 80082cc:	2300      	movs	r3, #0
 80082ce:	461a      	mov	r2, r3
 80082d0:	f7fe ff42 	bl	8007158 <LL_ADC_SetOffsetSaturation>
 80082d4:	e1ee      	b.n	80086b4 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6818      	ldr	r0, [r3, #0]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	6919      	ldr	r1, [r3, #16]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d102      	bne.n	80082ee <HAL_ADC_ConfigChannel+0x212>
 80082e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082ec:	e000      	b.n	80082f0 <HAL_ADC_ConfigChannel+0x214>
 80082ee:	2300      	movs	r3, #0
 80082f0:	461a      	mov	r2, r3
 80082f2:	f7fe ff0f 	bl	8007114 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	6919      	ldr	r1, [r3, #16]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	7e1b      	ldrb	r3, [r3, #24]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d102      	bne.n	800830c <HAL_ADC_ConfigChannel+0x230>
 8008306:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800830a:	e000      	b.n	800830e <HAL_ADC_ConfigChannel+0x232>
 800830c:	2300      	movs	r3, #0
 800830e:	461a      	mov	r2, r3
 8008310:	f7fe fee6 	bl	80070e0 <LL_ADC_SetDataRightShift>
 8008314:	e1ce      	b.n	80086b4 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a23      	ldr	r2, [pc, #140]	; (80083a8 <HAL_ADC_ConfigChannel+0x2cc>)
 800831c:	4293      	cmp	r3, r2
 800831e:	f040 8181 	bne.w	8008624 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2100      	movs	r1, #0
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe fec3 	bl	80070b4 <LL_ADC_GetOffsetChannel>
 800832e:	4603      	mov	r3, r0
 8008330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10a      	bne.n	800834e <HAL_ADC_ConfigChannel+0x272>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2100      	movs	r1, #0
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe feb8 	bl	80070b4 <LL_ADC_GetOffsetChannel>
 8008344:	4603      	mov	r3, r0
 8008346:	0e9b      	lsrs	r3, r3, #26
 8008348:	f003 021f 	and.w	r2, r3, #31
 800834c:	e01e      	b.n	800838c <HAL_ADC_ConfigChannel+0x2b0>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2100      	movs	r1, #0
 8008354:	4618      	mov	r0, r3
 8008356:	f7fe fead 	bl	80070b4 <LL_ADC_GetOffsetChannel>
 800835a:	4603      	mov	r3, r0
 800835c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008360:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008364:	fa93 f3a3 	rbit	r3, r3
 8008368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800836c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008370:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8008374:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800837c:	2320      	movs	r3, #32
 800837e:	e004      	b.n	800838a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8008380:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008384:	fab3 f383 	clz	r3, r3
 8008388:	b2db      	uxtb	r3, r3
 800838a:	461a      	mov	r2, r3
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10b      	bne.n	80083b0 <HAL_ADC_ConfigChannel+0x2d4>
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	0e9b      	lsrs	r3, r3, #26
 800839e:	f003 031f 	and.w	r3, r3, #31
 80083a2:	e01e      	b.n	80083e2 <HAL_ADC_ConfigChannel+0x306>
 80083a4:	47ff0000 	.word	0x47ff0000
 80083a8:	58026000 	.word	0x58026000
 80083ac:	5c001000 	.word	0x5c001000
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083bc:	fa93 f3a3 	rbit	r3, r3
 80083c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80083c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80083cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80083d4:	2320      	movs	r3, #32
 80083d6:	e004      	b.n	80083e2 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80083d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80083dc:	fab3 f383 	clz	r3, r3
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d106      	bne.n	80083f4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2200      	movs	r2, #0
 80083ec:	2100      	movs	r1, #0
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fe fef6 	bl	80071e0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2101      	movs	r1, #1
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe fe5a 	bl	80070b4 <LL_ADC_GetOffsetChannel>
 8008400:	4603      	mov	r3, r0
 8008402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10a      	bne.n	8008420 <HAL_ADC_ConfigChannel+0x344>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2101      	movs	r1, #1
 8008410:	4618      	mov	r0, r3
 8008412:	f7fe fe4f 	bl	80070b4 <LL_ADC_GetOffsetChannel>
 8008416:	4603      	mov	r3, r0
 8008418:	0e9b      	lsrs	r3, r3, #26
 800841a:	f003 021f 	and.w	r2, r3, #31
 800841e:	e01e      	b.n	800845e <HAL_ADC_ConfigChannel+0x382>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2101      	movs	r1, #1
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe fe44 	bl	80070b4 <LL_ADC_GetOffsetChannel>
 800842c:	4603      	mov	r3, r0
 800842e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008436:	fa93 f3a3 	rbit	r3, r3
 800843a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800843e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8008446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800844e:	2320      	movs	r3, #32
 8008450:	e004      	b.n	800845c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8008452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008456:	fab3 f383 	clz	r3, r3
 800845a:	b2db      	uxtb	r3, r3
 800845c:	461a      	mov	r2, r3
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008466:	2b00      	cmp	r3, #0
 8008468:	d105      	bne.n	8008476 <HAL_ADC_ConfigChannel+0x39a>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	0e9b      	lsrs	r3, r3, #26
 8008470:	f003 031f 	and.w	r3, r3, #31
 8008474:	e018      	b.n	80084a8 <HAL_ADC_ConfigChannel+0x3cc>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800847e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008482:	fa93 f3a3 	rbit	r3, r3
 8008486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800848a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800848e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8008492:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800849a:	2320      	movs	r3, #32
 800849c:	e004      	b.n	80084a8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800849e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084a2:	fab3 f383 	clz	r3, r3
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d106      	bne.n	80084ba <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2200      	movs	r2, #0
 80084b2:	2101      	movs	r1, #1
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fe fe93 	bl	80071e0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2102      	movs	r1, #2
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fe fdf7 	bl	80070b4 <LL_ADC_GetOffsetChannel>
 80084c6:	4603      	mov	r3, r0
 80084c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10a      	bne.n	80084e6 <HAL_ADC_ConfigChannel+0x40a>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2102      	movs	r1, #2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe fdec 	bl	80070b4 <LL_ADC_GetOffsetChannel>
 80084dc:	4603      	mov	r3, r0
 80084de:	0e9b      	lsrs	r3, r3, #26
 80084e0:	f003 021f 	and.w	r2, r3, #31
 80084e4:	e01e      	b.n	8008524 <HAL_ADC_ConfigChannel+0x448>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2102      	movs	r1, #2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fe fde1 	bl	80070b4 <LL_ADC_GetOffsetChannel>
 80084f2:	4603      	mov	r3, r0
 80084f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084fc:	fa93 f3a3 	rbit	r3, r3
 8008500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8008504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800850c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8008514:	2320      	movs	r3, #32
 8008516:	e004      	b.n	8008522 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8008518:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800851c:	fab3 f383 	clz	r3, r3
 8008520:	b2db      	uxtb	r3, r3
 8008522:	461a      	mov	r2, r3
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800852c:	2b00      	cmp	r3, #0
 800852e:	d105      	bne.n	800853c <HAL_ADC_ConfigChannel+0x460>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	0e9b      	lsrs	r3, r3, #26
 8008536:	f003 031f 	and.w	r3, r3, #31
 800853a:	e014      	b.n	8008566 <HAL_ADC_ConfigChannel+0x48a>
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008542:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008544:	fa93 f3a3 	rbit	r3, r3
 8008548:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800854a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800854c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8008550:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8008558:	2320      	movs	r3, #32
 800855a:	e004      	b.n	8008566 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800855c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008560:	fab3 f383 	clz	r3, r3
 8008564:	b2db      	uxtb	r3, r3
 8008566:	429a      	cmp	r2, r3
 8008568:	d106      	bne.n	8008578 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2200      	movs	r2, #0
 8008570:	2102      	movs	r1, #2
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe fe34 	bl	80071e0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2103      	movs	r1, #3
 800857e:	4618      	mov	r0, r3
 8008580:	f7fe fd98 	bl	80070b4 <LL_ADC_GetOffsetChannel>
 8008584:	4603      	mov	r3, r0
 8008586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10a      	bne.n	80085a4 <HAL_ADC_ConfigChannel+0x4c8>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2103      	movs	r1, #3
 8008594:	4618      	mov	r0, r3
 8008596:	f7fe fd8d 	bl	80070b4 <LL_ADC_GetOffsetChannel>
 800859a:	4603      	mov	r3, r0
 800859c:	0e9b      	lsrs	r3, r3, #26
 800859e:	f003 021f 	and.w	r2, r3, #31
 80085a2:	e017      	b.n	80085d4 <HAL_ADC_ConfigChannel+0x4f8>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2103      	movs	r1, #3
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fe fd82 	bl	80070b4 <LL_ADC_GetOffsetChannel>
 80085b0:	4603      	mov	r3, r0
 80085b2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085b6:	fa93 f3a3 	rbit	r3, r3
 80085ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80085bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085be:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80085c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80085c6:	2320      	movs	r3, #32
 80085c8:	e003      	b.n	80085d2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80085ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085cc:	fab3 f383 	clz	r3, r3
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	461a      	mov	r2, r3
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d105      	bne.n	80085ec <HAL_ADC_ConfigChannel+0x510>
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	0e9b      	lsrs	r3, r3, #26
 80085e6:	f003 031f 	and.w	r3, r3, #31
 80085ea:	e011      	b.n	8008610 <HAL_ADC_ConfigChannel+0x534>
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085f4:	fa93 f3a3 	rbit	r3, r3
 80085f8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80085fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085fc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80085fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8008604:	2320      	movs	r3, #32
 8008606:	e003      	b.n	8008610 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8008608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800860a:	fab3 f383 	clz	r3, r3
 800860e:	b2db      	uxtb	r3, r3
 8008610:	429a      	cmp	r2, r3
 8008612:	d14f      	bne.n	80086b4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2200      	movs	r2, #0
 800861a:	2103      	movs	r1, #3
 800861c:	4618      	mov	r0, r3
 800861e:	f7fe fddf 	bl	80071e0 <LL_ADC_SetOffsetState>
 8008622:	e047      	b.n	80086b4 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800862a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	069b      	lsls	r3, r3, #26
 8008634:	429a      	cmp	r2, r3
 8008636:	d107      	bne.n	8008648 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008646:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800864e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	069b      	lsls	r3, r3, #26
 8008658:	429a      	cmp	r2, r3
 800865a:	d107      	bne.n	800866c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800866a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008672:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	069b      	lsls	r3, r3, #26
 800867c:	429a      	cmp	r2, r3
 800867e:	d107      	bne.n	8008690 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800868e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008696:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	069b      	lsls	r3, r3, #26
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d107      	bne.n	80086b4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80086b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fe ff0b 	bl	80074d4 <LL_ADC_IsEnabled>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f040 8219 	bne.w	8008af8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	6819      	ldr	r1, [r3, #0]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	461a      	mov	r2, r3
 80086d4:	f7fe fe2c 	bl	8007330 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	4aa1      	ldr	r2, [pc, #644]	; (8008964 <HAL_ADC_ConfigChannel+0x888>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	f040 812e 	bne.w	8008940 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10b      	bne.n	800870c <HAL_ADC_ConfigChannel+0x630>
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	0e9b      	lsrs	r3, r3, #26
 80086fa:	3301      	adds	r3, #1
 80086fc:	f003 031f 	and.w	r3, r3, #31
 8008700:	2b09      	cmp	r3, #9
 8008702:	bf94      	ite	ls
 8008704:	2301      	movls	r3, #1
 8008706:	2300      	movhi	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	e019      	b.n	8008740 <HAL_ADC_ConfigChannel+0x664>
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008714:	fa93 f3a3 	rbit	r3, r3
 8008718:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800871a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800871c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800871e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8008724:	2320      	movs	r3, #32
 8008726:	e003      	b.n	8008730 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8008728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800872a:	fab3 f383 	clz	r3, r3
 800872e:	b2db      	uxtb	r3, r3
 8008730:	3301      	adds	r3, #1
 8008732:	f003 031f 	and.w	r3, r3, #31
 8008736:	2b09      	cmp	r3, #9
 8008738:	bf94      	ite	ls
 800873a:	2301      	movls	r3, #1
 800873c:	2300      	movhi	r3, #0
 800873e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008740:	2b00      	cmp	r3, #0
 8008742:	d079      	beq.n	8008838 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800874c:	2b00      	cmp	r3, #0
 800874e:	d107      	bne.n	8008760 <HAL_ADC_ConfigChannel+0x684>
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	0e9b      	lsrs	r3, r3, #26
 8008756:	3301      	adds	r3, #1
 8008758:	069b      	lsls	r3, r3, #26
 800875a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800875e:	e015      	b.n	800878c <HAL_ADC_ConfigChannel+0x6b0>
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008768:	fa93 f3a3 	rbit	r3, r3
 800876c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800876e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008770:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8008772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008774:	2b00      	cmp	r3, #0
 8008776:	d101      	bne.n	800877c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8008778:	2320      	movs	r3, #32
 800877a:	e003      	b.n	8008784 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800877c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800877e:	fab3 f383 	clz	r3, r3
 8008782:	b2db      	uxtb	r3, r3
 8008784:	3301      	adds	r3, #1
 8008786:	069b      	lsls	r3, r3, #26
 8008788:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008794:	2b00      	cmp	r3, #0
 8008796:	d109      	bne.n	80087ac <HAL_ADC_ConfigChannel+0x6d0>
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	0e9b      	lsrs	r3, r3, #26
 800879e:	3301      	adds	r3, #1
 80087a0:	f003 031f 	and.w	r3, r3, #31
 80087a4:	2101      	movs	r1, #1
 80087a6:	fa01 f303 	lsl.w	r3, r1, r3
 80087aa:	e017      	b.n	80087dc <HAL_ADC_ConfigChannel+0x700>
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b4:	fa93 f3a3 	rbit	r3, r3
 80087b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80087ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80087be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80087c4:	2320      	movs	r3, #32
 80087c6:	e003      	b.n	80087d0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80087c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ca:	fab3 f383 	clz	r3, r3
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	3301      	adds	r3, #1
 80087d2:	f003 031f 	and.w	r3, r3, #31
 80087d6:	2101      	movs	r1, #1
 80087d8:	fa01 f303 	lsl.w	r3, r1, r3
 80087dc:	ea42 0103 	orr.w	r1, r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <HAL_ADC_ConfigChannel+0x726>
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	0e9b      	lsrs	r3, r3, #26
 80087f2:	3301      	adds	r3, #1
 80087f4:	f003 021f 	and.w	r2, r3, #31
 80087f8:	4613      	mov	r3, r2
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	4413      	add	r3, r2
 80087fe:	051b      	lsls	r3, r3, #20
 8008800:	e018      	b.n	8008834 <HAL_ADC_ConfigChannel+0x758>
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880a:	fa93 f3a3 	rbit	r3, r3
 800880e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8008814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800881a:	2320      	movs	r3, #32
 800881c:	e003      	b.n	8008826 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	fab3 f383 	clz	r3, r3
 8008824:	b2db      	uxtb	r3, r3
 8008826:	3301      	adds	r3, #1
 8008828:	f003 021f 	and.w	r2, r3, #31
 800882c:	4613      	mov	r3, r2
 800882e:	005b      	lsls	r3, r3, #1
 8008830:	4413      	add	r3, r2
 8008832:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008834:	430b      	orrs	r3, r1
 8008836:	e07e      	b.n	8008936 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008840:	2b00      	cmp	r3, #0
 8008842:	d107      	bne.n	8008854 <HAL_ADC_ConfigChannel+0x778>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	0e9b      	lsrs	r3, r3, #26
 800884a:	3301      	adds	r3, #1
 800884c:	069b      	lsls	r3, r3, #26
 800884e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008852:	e015      	b.n	8008880 <HAL_ADC_ConfigChannel+0x7a4>
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	fa93 f3a3 	rbit	r3, r3
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8008866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800886c:	2320      	movs	r3, #32
 800886e:	e003      	b.n	8008878 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8008870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008872:	fab3 f383 	clz	r3, r3
 8008876:	b2db      	uxtb	r3, r3
 8008878:	3301      	adds	r3, #1
 800887a:	069b      	lsls	r3, r3, #26
 800887c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008888:	2b00      	cmp	r3, #0
 800888a:	d109      	bne.n	80088a0 <HAL_ADC_ConfigChannel+0x7c4>
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	0e9b      	lsrs	r3, r3, #26
 8008892:	3301      	adds	r3, #1
 8008894:	f003 031f 	and.w	r3, r3, #31
 8008898:	2101      	movs	r1, #1
 800889a:	fa01 f303 	lsl.w	r3, r1, r3
 800889e:	e017      	b.n	80088d0 <HAL_ADC_ConfigChannel+0x7f4>
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	fa93 f3a3 	rbit	r3, r3
 80088ac:	61bb      	str	r3, [r7, #24]
  return result;
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80088b8:	2320      	movs	r3, #32
 80088ba:	e003      	b.n	80088c4 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	fab3 f383 	clz	r3, r3
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	3301      	adds	r3, #1
 80088c6:	f003 031f 	and.w	r3, r3, #31
 80088ca:	2101      	movs	r1, #1
 80088cc:	fa01 f303 	lsl.w	r3, r1, r3
 80088d0:	ea42 0103 	orr.w	r1, r2, r3
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10d      	bne.n	80088fc <HAL_ADC_ConfigChannel+0x820>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	0e9b      	lsrs	r3, r3, #26
 80088e6:	3301      	adds	r3, #1
 80088e8:	f003 021f 	and.w	r2, r3, #31
 80088ec:	4613      	mov	r3, r2
 80088ee:	005b      	lsls	r3, r3, #1
 80088f0:	4413      	add	r3, r2
 80088f2:	3b1e      	subs	r3, #30
 80088f4:	051b      	lsls	r3, r3, #20
 80088f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80088fa:	e01b      	b.n	8008934 <HAL_ADC_ConfigChannel+0x858>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	fa93 f3a3 	rbit	r3, r3
 8008908:	60fb      	str	r3, [r7, #12]
  return result;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8008914:	2320      	movs	r3, #32
 8008916:	e003      	b.n	8008920 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	fab3 f383 	clz	r3, r3
 800891e:	b2db      	uxtb	r3, r3
 8008920:	3301      	adds	r3, #1
 8008922:	f003 021f 	and.w	r2, r3, #31
 8008926:	4613      	mov	r3, r2
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	4413      	add	r3, r2
 800892c:	3b1e      	subs	r3, #30
 800892e:	051b      	lsls	r3, r3, #20
 8008930:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008934:	430b      	orrs	r3, r1
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	6892      	ldr	r2, [r2, #8]
 800893a:	4619      	mov	r1, r3
 800893c:	f7fe fccc 	bl	80072d8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	f280 80d7 	bge.w	8008af8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a06      	ldr	r2, [pc, #24]	; (8008968 <HAL_ADC_ConfigChannel+0x88c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d004      	beq.n	800895e <HAL_ADC_ConfigChannel+0x882>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a04      	ldr	r2, [pc, #16]	; (800896c <HAL_ADC_ConfigChannel+0x890>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d10a      	bne.n	8008974 <HAL_ADC_ConfigChannel+0x898>
 800895e:	4b04      	ldr	r3, [pc, #16]	; (8008970 <HAL_ADC_ConfigChannel+0x894>)
 8008960:	e009      	b.n	8008976 <HAL_ADC_ConfigChannel+0x89a>
 8008962:	bf00      	nop
 8008964:	47ff0000 	.word	0x47ff0000
 8008968:	40022000 	.word	0x40022000
 800896c:	40022100 	.word	0x40022100
 8008970:	40022300 	.word	0x40022300
 8008974:	4b65      	ldr	r3, [pc, #404]	; (8008b0c <HAL_ADC_ConfigChannel+0xa30>)
 8008976:	4618      	mov	r0, r3
 8008978:	f7fe fb5c 	bl	8007034 <LL_ADC_GetCommonPathInternalCh>
 800897c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a62      	ldr	r2, [pc, #392]	; (8008b10 <HAL_ADC_ConfigChannel+0xa34>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d004      	beq.n	8008994 <HAL_ADC_ConfigChannel+0x8b8>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a61      	ldr	r2, [pc, #388]	; (8008b14 <HAL_ADC_ConfigChannel+0xa38>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d10e      	bne.n	80089b2 <HAL_ADC_ConfigChannel+0x8d6>
 8008994:	485e      	ldr	r0, [pc, #376]	; (8008b10 <HAL_ADC_ConfigChannel+0xa34>)
 8008996:	f7fe fd9d 	bl	80074d4 <LL_ADC_IsEnabled>
 800899a:	4604      	mov	r4, r0
 800899c:	485d      	ldr	r0, [pc, #372]	; (8008b14 <HAL_ADC_ConfigChannel+0xa38>)
 800899e:	f7fe fd99 	bl	80074d4 <LL_ADC_IsEnabled>
 80089a2:	4603      	mov	r3, r0
 80089a4:	4323      	orrs	r3, r4
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	bf0c      	ite	eq
 80089aa:	2301      	moveq	r3, #1
 80089ac:	2300      	movne	r3, #0
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	e008      	b.n	80089c4 <HAL_ADC_ConfigChannel+0x8e8>
 80089b2:	4859      	ldr	r0, [pc, #356]	; (8008b18 <HAL_ADC_ConfigChannel+0xa3c>)
 80089b4:	f7fe fd8e 	bl	80074d4 <LL_ADC_IsEnabled>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	bf0c      	ite	eq
 80089be:	2301      	moveq	r3, #1
 80089c0:	2300      	movne	r3, #0
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 8084 	beq.w	8008ad2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a53      	ldr	r2, [pc, #332]	; (8008b1c <HAL_ADC_ConfigChannel+0xa40>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d132      	bne.n	8008a3a <HAL_ADC_ConfigChannel+0x95e>
 80089d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80089d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d12c      	bne.n	8008a3a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a4c      	ldr	r2, [pc, #304]	; (8008b18 <HAL_ADC_ConfigChannel+0xa3c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	f040 8086 	bne.w	8008af8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a47      	ldr	r2, [pc, #284]	; (8008b10 <HAL_ADC_ConfigChannel+0xa34>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d004      	beq.n	8008a00 <HAL_ADC_ConfigChannel+0x924>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a46      	ldr	r2, [pc, #280]	; (8008b14 <HAL_ADC_ConfigChannel+0xa38>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d101      	bne.n	8008a04 <HAL_ADC_ConfigChannel+0x928>
 8008a00:	4a47      	ldr	r2, [pc, #284]	; (8008b20 <HAL_ADC_ConfigChannel+0xa44>)
 8008a02:	e000      	b.n	8008a06 <HAL_ADC_ConfigChannel+0x92a>
 8008a04:	4a41      	ldr	r2, [pc, #260]	; (8008b0c <HAL_ADC_ConfigChannel+0xa30>)
 8008a06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a0e:	4619      	mov	r1, r3
 8008a10:	4610      	mov	r0, r2
 8008a12:	f7fe fafc 	bl	800700e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008a16:	4b43      	ldr	r3, [pc, #268]	; (8008b24 <HAL_ADC_ConfigChannel+0xa48>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	099b      	lsrs	r3, r3, #6
 8008a1c:	4a42      	ldr	r2, [pc, #264]	; (8008b28 <HAL_ADC_ConfigChannel+0xa4c>)
 8008a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a22:	099b      	lsrs	r3, r3, #6
 8008a24:	3301      	adds	r3, #1
 8008a26:	005b      	lsls	r3, r3, #1
 8008a28:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008a2a:	e002      	b.n	8008a32 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1f9      	bne.n	8008a2c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008a38:	e05e      	b.n	8008af8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a3b      	ldr	r2, [pc, #236]	; (8008b2c <HAL_ADC_ConfigChannel+0xa50>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d120      	bne.n	8008a86 <HAL_ADC_ConfigChannel+0x9aa>
 8008a44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d11a      	bne.n	8008a86 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a30      	ldr	r2, [pc, #192]	; (8008b18 <HAL_ADC_ConfigChannel+0xa3c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d14e      	bne.n	8008af8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a2c      	ldr	r2, [pc, #176]	; (8008b10 <HAL_ADC_ConfigChannel+0xa34>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d004      	beq.n	8008a6e <HAL_ADC_ConfigChannel+0x992>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a2a      	ldr	r2, [pc, #168]	; (8008b14 <HAL_ADC_ConfigChannel+0xa38>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d101      	bne.n	8008a72 <HAL_ADC_ConfigChannel+0x996>
 8008a6e:	4a2c      	ldr	r2, [pc, #176]	; (8008b20 <HAL_ADC_ConfigChannel+0xa44>)
 8008a70:	e000      	b.n	8008a74 <HAL_ADC_ConfigChannel+0x998>
 8008a72:	4a26      	ldr	r2, [pc, #152]	; (8008b0c <HAL_ADC_ConfigChannel+0xa30>)
 8008a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4610      	mov	r0, r2
 8008a80:	f7fe fac5 	bl	800700e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008a84:	e038      	b.n	8008af8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a29      	ldr	r2, [pc, #164]	; (8008b30 <HAL_ADC_ConfigChannel+0xa54>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d133      	bne.n	8008af8 <HAL_ADC_ConfigChannel+0xa1c>
 8008a90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d12d      	bne.n	8008af8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a1d      	ldr	r2, [pc, #116]	; (8008b18 <HAL_ADC_ConfigChannel+0xa3c>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d128      	bne.n	8008af8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a19      	ldr	r2, [pc, #100]	; (8008b10 <HAL_ADC_ConfigChannel+0xa34>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d004      	beq.n	8008aba <HAL_ADC_ConfigChannel+0x9de>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a17      	ldr	r2, [pc, #92]	; (8008b14 <HAL_ADC_ConfigChannel+0xa38>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d101      	bne.n	8008abe <HAL_ADC_ConfigChannel+0x9e2>
 8008aba:	4a19      	ldr	r2, [pc, #100]	; (8008b20 <HAL_ADC_ConfigChannel+0xa44>)
 8008abc:	e000      	b.n	8008ac0 <HAL_ADC_ConfigChannel+0x9e4>
 8008abe:	4a13      	ldr	r2, [pc, #76]	; (8008b0c <HAL_ADC_ConfigChannel+0xa30>)
 8008ac0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4610      	mov	r0, r2
 8008acc:	f7fe fa9f 	bl	800700e <LL_ADC_SetCommonPathInternalCh>
 8008ad0:	e012      	b.n	8008af8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ad6:	f043 0220 	orr.w	r2, r3, #32
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8008ae4:	e008      	b.n	8008af8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aea:	f043 0220 	orr.w	r2, r3, #32
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008b00:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	37e4      	adds	r7, #228	; 0xe4
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd90      	pop	{r4, r7, pc}
 8008b0c:	58026300 	.word	0x58026300
 8008b10:	40022000 	.word	0x40022000
 8008b14:	40022100 	.word	0x40022100
 8008b18:	58026000 	.word	0x58026000
 8008b1c:	c7520000 	.word	0xc7520000
 8008b20:	40022300 	.word	0x40022300
 8008b24:	20000020 	.word	0x20000020
 8008b28:	053e2d63 	.word	0x053e2d63
 8008b2c:	c3210000 	.word	0xc3210000
 8008b30:	cb840000 	.word	0xcb840000

08008b34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe fcc7 	bl	80074d4 <LL_ADC_IsEnabled>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d16e      	bne.n	8008c2a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	689a      	ldr	r2, [r3, #8]
 8008b52:	4b38      	ldr	r3, [pc, #224]	; (8008c34 <ADC_Enable+0x100>)
 8008b54:	4013      	ands	r3, r2
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00d      	beq.n	8008b76 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b5e:	f043 0210 	orr.w	r2, r3, #16
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b6a:	f043 0201 	orr.w	r2, r3, #1
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e05a      	b.n	8008c2c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fe fc82 	bl	8007484 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008b80:	f7fe fa02 	bl	8006f88 <HAL_GetTick>
 8008b84:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a2b      	ldr	r2, [pc, #172]	; (8008c38 <ADC_Enable+0x104>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d004      	beq.n	8008b9a <ADC_Enable+0x66>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a29      	ldr	r2, [pc, #164]	; (8008c3c <ADC_Enable+0x108>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d101      	bne.n	8008b9e <ADC_Enable+0x6a>
 8008b9a:	4b29      	ldr	r3, [pc, #164]	; (8008c40 <ADC_Enable+0x10c>)
 8008b9c:	e000      	b.n	8008ba0 <ADC_Enable+0x6c>
 8008b9e:	4b29      	ldr	r3, [pc, #164]	; (8008c44 <ADC_Enable+0x110>)
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fe fc05 	bl	80073b0 <LL_ADC_GetMultimode>
 8008ba6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a23      	ldr	r2, [pc, #140]	; (8008c3c <ADC_Enable+0x108>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d002      	beq.n	8008bb8 <ADC_Enable+0x84>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	e000      	b.n	8008bba <ADC_Enable+0x86>
 8008bb8:	4b1f      	ldr	r3, [pc, #124]	; (8008c38 <ADC_Enable+0x104>)
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	6812      	ldr	r2, [r2, #0]
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d02c      	beq.n	8008c1c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d130      	bne.n	8008c2a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008bc8:	e028      	b.n	8008c1c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fe fc80 	bl	80074d4 <LL_ADC_IsEnabled>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d104      	bne.n	8008be4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe fc50 	bl	8007484 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008be4:	f7fe f9d0 	bl	8006f88 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d914      	bls.n	8008c1c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d00d      	beq.n	8008c1c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c04:	f043 0210 	orr.w	r2, r3, #16
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c10:	f043 0201 	orr.w	r2, r3, #1
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e007      	b.n	8008c2c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d1cf      	bne.n	8008bca <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	8000003f 	.word	0x8000003f
 8008c38:	40022000 	.word	0x40022000
 8008c3c:	40022100 	.word	0x40022100
 8008c40:	40022300 	.word	0x40022300
 8008c44:	58026300 	.word	0x58026300

08008c48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fe fc50 	bl	80074fa <LL_ADC_IsDisableOngoing>
 8008c5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fe fc37 	bl	80074d4 <LL_ADC_IsEnabled>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d047      	beq.n	8008cfc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d144      	bne.n	8008cfc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f003 030d 	and.w	r3, r3, #13
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d10c      	bne.n	8008c9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fe fc11 	bl	80074ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2203      	movs	r2, #3
 8008c90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008c92:	f7fe f979 	bl	8006f88 <HAL_GetTick>
 8008c96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008c98:	e029      	b.n	8008cee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c9e:	f043 0210 	orr.w	r2, r3, #16
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008caa:	f043 0201 	orr.w	r2, r3, #1
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e023      	b.n	8008cfe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008cb6:	f7fe f967 	bl	8006f88 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d914      	bls.n	8008cee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00d      	beq.n	8008cee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cd6:	f043 0210 	orr.w	r2, r3, #16
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ce2:	f043 0201 	orr.w	r2, r3, #1
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e007      	b.n	8008cfe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1dc      	bne.n	8008cb6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
	...

08008d08 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a6b      	ldr	r2, [pc, #428]	; (8008ec4 <ADC_ConfigureBoostMode+0x1bc>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d004      	beq.n	8008d24 <ADC_ConfigureBoostMode+0x1c>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a6a      	ldr	r2, [pc, #424]	; (8008ec8 <ADC_ConfigureBoostMode+0x1c0>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d109      	bne.n	8008d38 <ADC_ConfigureBoostMode+0x30>
 8008d24:	4b69      	ldr	r3, [pc, #420]	; (8008ecc <ADC_ConfigureBoostMode+0x1c4>)
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	bf14      	ite	ne
 8008d30:	2301      	movne	r3, #1
 8008d32:	2300      	moveq	r3, #0
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	e008      	b.n	8008d4a <ADC_ConfigureBoostMode+0x42>
 8008d38:	4b65      	ldr	r3, [pc, #404]	; (8008ed0 <ADC_ConfigureBoostMode+0x1c8>)
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	bf14      	ite	ne
 8008d44:	2301      	movne	r3, #1
 8008d46:	2300      	moveq	r3, #0
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d01c      	beq.n	8008d88 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8008d4e:	f005 fc9f 	bl	800e690 <HAL_RCC_GetHCLKFreq>
 8008d52:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d5c:	d010      	beq.n	8008d80 <ADC_ConfigureBoostMode+0x78>
 8008d5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d62:	d871      	bhi.n	8008e48 <ADC_ConfigureBoostMode+0x140>
 8008d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d68:	d002      	beq.n	8008d70 <ADC_ConfigureBoostMode+0x68>
 8008d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d6e:	d16b      	bne.n	8008e48 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	0c1b      	lsrs	r3, r3, #16
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7c:	60fb      	str	r3, [r7, #12]
        break;
 8008d7e:	e066      	b.n	8008e4e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	089b      	lsrs	r3, r3, #2
 8008d84:	60fb      	str	r3, [r7, #12]
        break;
 8008d86:	e062      	b.n	8008e4e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8008d88:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008d8c:	f006 fbd6 	bl	800f53c <HAL_RCCEx_GetPeriphCLKFreq>
 8008d90:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008d9a:	d051      	beq.n	8008e40 <ADC_ConfigureBoostMode+0x138>
 8008d9c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008da0:	d854      	bhi.n	8008e4c <ADC_ConfigureBoostMode+0x144>
 8008da2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008da6:	d047      	beq.n	8008e38 <ADC_ConfigureBoostMode+0x130>
 8008da8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008dac:	d84e      	bhi.n	8008e4c <ADC_ConfigureBoostMode+0x144>
 8008dae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008db2:	d03d      	beq.n	8008e30 <ADC_ConfigureBoostMode+0x128>
 8008db4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008db8:	d848      	bhi.n	8008e4c <ADC_ConfigureBoostMode+0x144>
 8008dba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dbe:	d033      	beq.n	8008e28 <ADC_ConfigureBoostMode+0x120>
 8008dc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dc4:	d842      	bhi.n	8008e4c <ADC_ConfigureBoostMode+0x144>
 8008dc6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008dca:	d029      	beq.n	8008e20 <ADC_ConfigureBoostMode+0x118>
 8008dcc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008dd0:	d83c      	bhi.n	8008e4c <ADC_ConfigureBoostMode+0x144>
 8008dd2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008dd6:	d01a      	beq.n	8008e0e <ADC_ConfigureBoostMode+0x106>
 8008dd8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008ddc:	d836      	bhi.n	8008e4c <ADC_ConfigureBoostMode+0x144>
 8008dde:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008de2:	d014      	beq.n	8008e0e <ADC_ConfigureBoostMode+0x106>
 8008de4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008de8:	d830      	bhi.n	8008e4c <ADC_ConfigureBoostMode+0x144>
 8008dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dee:	d00e      	beq.n	8008e0e <ADC_ConfigureBoostMode+0x106>
 8008df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008df4:	d82a      	bhi.n	8008e4c <ADC_ConfigureBoostMode+0x144>
 8008df6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008dfa:	d008      	beq.n	8008e0e <ADC_ConfigureBoostMode+0x106>
 8008dfc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008e00:	d824      	bhi.n	8008e4c <ADC_ConfigureBoostMode+0x144>
 8008e02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e06:	d002      	beq.n	8008e0e <ADC_ConfigureBoostMode+0x106>
 8008e08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008e0c:	d11e      	bne.n	8008e4c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	0c9b      	lsrs	r3, r3, #18
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1c:	60fb      	str	r3, [r7, #12]
        break;
 8008e1e:	e016      	b.n	8008e4e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	091b      	lsrs	r3, r3, #4
 8008e24:	60fb      	str	r3, [r7, #12]
        break;
 8008e26:	e012      	b.n	8008e4e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	095b      	lsrs	r3, r3, #5
 8008e2c:	60fb      	str	r3, [r7, #12]
        break;
 8008e2e:	e00e      	b.n	8008e4e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	099b      	lsrs	r3, r3, #6
 8008e34:	60fb      	str	r3, [r7, #12]
        break;
 8008e36:	e00a      	b.n	8008e4e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	09db      	lsrs	r3, r3, #7
 8008e3c:	60fb      	str	r3, [r7, #12]
        break;
 8008e3e:	e006      	b.n	8008e4e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	0a1b      	lsrs	r3, r3, #8
 8008e44:	60fb      	str	r3, [r7, #12]
        break;
 8008e46:	e002      	b.n	8008e4e <ADC_ConfigureBoostMode+0x146>
        break;
 8008e48:	bf00      	nop
 8008e4a:	e000      	b.n	8008e4e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8008e4c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	085b      	lsrs	r3, r3, #1
 8008e52:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4a1f      	ldr	r2, [pc, #124]	; (8008ed4 <ADC_ConfigureBoostMode+0x1cc>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d808      	bhi.n	8008e6e <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	689a      	ldr	r2, [r3, #8]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008e6a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008e6c:	e025      	b.n	8008eba <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4a19      	ldr	r2, [pc, #100]	; (8008ed8 <ADC_ConfigureBoostMode+0x1d0>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d80a      	bhi.n	8008e8c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e88:	609a      	str	r2, [r3, #8]
}
 8008e8a:	e016      	b.n	8008eba <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4a13      	ldr	r2, [pc, #76]	; (8008edc <ADC_ConfigureBoostMode+0x1d4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d80a      	bhi.n	8008eaa <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ea6:	609a      	str	r2, [r3, #8]
}
 8008ea8:	e007      	b.n	8008eba <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	689a      	ldr	r2, [r3, #8]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008eb8:	609a      	str	r2, [r3, #8]
}
 8008eba:	bf00      	nop
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	40022000 	.word	0x40022000
 8008ec8:	40022100 	.word	0x40022100
 8008ecc:	40022300 	.word	0x40022300
 8008ed0:	58026300 	.word	0x58026300
 8008ed4:	005f5e10 	.word	0x005f5e10
 8008ed8:	00bebc20 	.word	0x00bebc20
 8008edc:	017d7840 	.word	0x017d7840

08008ee0 <LL_ADC_IsEnabled>:
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d101      	bne.n	8008ef8 <LL_ADC_IsEnabled+0x18>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e000      	b.n	8008efa <LL_ADC_IsEnabled+0x1a>
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
	...

08008f08 <LL_ADC_StartCalibration>:
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	689a      	ldr	r2, [r3, #8]
 8008f18:	4b09      	ldr	r3, [pc, #36]	; (8008f40 <LL_ADC_StartCalibration+0x38>)
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	609a      	str	r2, [r3, #8]
}
 8008f34:	bf00      	nop
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	3ffeffc0 	.word	0x3ffeffc0

08008f44 <LL_ADC_IsCalibrationOnGoing>:
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f58:	d101      	bne.n	8008f5e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e000      	b.n	8008f60 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <LL_ADC_REG_IsConversionOngoing>:
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f003 0304 	and.w	r3, r3, #4
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	d101      	bne.n	8008f84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
	...

08008f94 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d101      	bne.n	8008fb2 <HAL_ADCEx_Calibration_Start+0x1e>
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e04c      	b.n	800904c <HAL_ADCEx_Calibration_Start+0xb8>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f7ff fe44 	bl	8008c48 <ADC_Disable>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008fc4:	7dfb      	ldrb	r3, [r7, #23]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d135      	bne.n	8009036 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008fce:	4b21      	ldr	r3, [pc, #132]	; (8009054 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	f043 0202 	orr.w	r2, r3, #2
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	68b9      	ldr	r1, [r7, #8]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7ff ff90 	bl	8008f08 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008fe8:	e014      	b.n	8009014 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	3301      	adds	r3, #1
 8008fee:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	4a19      	ldr	r2, [pc, #100]	; (8009058 <HAL_ADCEx_Calibration_Start+0xc4>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d30d      	bcc.n	8009014 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ffc:	f023 0312 	bic.w	r3, r3, #18
 8009000:	f043 0210 	orr.w	r2, r3, #16
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e01b      	b.n	800904c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4618      	mov	r0, r3
 800901a:	f7ff ff93 	bl	8008f44 <LL_ADC_IsCalibrationOnGoing>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1e2      	bne.n	8008fea <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009028:	f023 0303 	bic.w	r3, r3, #3
 800902c:	f043 0201 	orr.w	r2, r3, #1
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	661a      	str	r2, [r3, #96]	; 0x60
 8009034:	e005      	b.n	8009042 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800903a:	f043 0210 	orr.w	r2, r3, #16
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800904a:	7dfb      	ldrb	r3, [r7, #23]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	ffffeefd 	.word	0xffffeefd
 8009058:	25c3f800 	.word	0x25c3f800

0800905c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80090c0:	b590      	push	{r4, r7, lr}
 80090c2:	b0a3      	sub	sp, #140	; 0x8c
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d101      	bne.n	80090de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80090da:	2302      	movs	r3, #2
 80090dc:	e0c1      	b.n	8009262 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80090e6:	2300      	movs	r3, #0
 80090e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80090ea:	2300      	movs	r3, #0
 80090ec:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a5e      	ldr	r2, [pc, #376]	; (800926c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d102      	bne.n	80090fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80090f8:	4b5d      	ldr	r3, [pc, #372]	; (8009270 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	e001      	b.n	8009102 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80090fe:	2300      	movs	r3, #0
 8009100:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10b      	bne.n	8009120 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800910c:	f043 0220 	orr.w	r2, r3, #32
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e0a0      	b.n	8009262 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff ff22 	bl	8008f6c <LL_ADC_REG_IsConversionOngoing>
 8009128:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff ff1b 	bl	8008f6c <LL_ADC_REG_IsConversionOngoing>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	f040 8081 	bne.w	8009240 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800913e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009142:	2b00      	cmp	r3, #0
 8009144:	d17c      	bne.n	8009240 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a48      	ldr	r2, [pc, #288]	; (800926c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d004      	beq.n	800915a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a46      	ldr	r2, [pc, #280]	; (8009270 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d101      	bne.n	800915e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800915a:	4b46      	ldr	r3, [pc, #280]	; (8009274 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800915c:	e000      	b.n	8009160 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800915e:	4b46      	ldr	r3, [pc, #280]	; (8009278 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8009160:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d039      	beq.n	80091de <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800916a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	431a      	orrs	r2, r3
 8009178:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800917a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a3a      	ldr	r2, [pc, #232]	; (800926c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d004      	beq.n	8009190 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a39      	ldr	r2, [pc, #228]	; (8009270 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d10e      	bne.n	80091ae <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8009190:	4836      	ldr	r0, [pc, #216]	; (800926c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009192:	f7ff fea5 	bl	8008ee0 <LL_ADC_IsEnabled>
 8009196:	4604      	mov	r4, r0
 8009198:	4835      	ldr	r0, [pc, #212]	; (8009270 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800919a:	f7ff fea1 	bl	8008ee0 <LL_ADC_IsEnabled>
 800919e:	4603      	mov	r3, r0
 80091a0:	4323      	orrs	r3, r4
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bf0c      	ite	eq
 80091a6:	2301      	moveq	r3, #1
 80091a8:	2300      	movne	r3, #0
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	e008      	b.n	80091c0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80091ae:	4833      	ldr	r0, [pc, #204]	; (800927c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80091b0:	f7ff fe96 	bl	8008ee0 <LL_ADC_IsEnabled>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	bf0c      	ite	eq
 80091ba:	2301      	moveq	r3, #1
 80091bc:	2300      	movne	r3, #0
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d047      	beq.n	8009254 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80091c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091c6:	689a      	ldr	r2, [r3, #8]
 80091c8:	4b2d      	ldr	r3, [pc, #180]	; (8009280 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80091ca:	4013      	ands	r3, r2
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	6811      	ldr	r1, [r2, #0]
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	6892      	ldr	r2, [r2, #8]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	431a      	orrs	r2, r3
 80091d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091da:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80091dc:	e03a      	b.n	8009254 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80091de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80091e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091e8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a1f      	ldr	r2, [pc, #124]	; (800926c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d004      	beq.n	80091fe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a1d      	ldr	r2, [pc, #116]	; (8009270 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d10e      	bne.n	800921c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80091fe:	481b      	ldr	r0, [pc, #108]	; (800926c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009200:	f7ff fe6e 	bl	8008ee0 <LL_ADC_IsEnabled>
 8009204:	4604      	mov	r4, r0
 8009206:	481a      	ldr	r0, [pc, #104]	; (8009270 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009208:	f7ff fe6a 	bl	8008ee0 <LL_ADC_IsEnabled>
 800920c:	4603      	mov	r3, r0
 800920e:	4323      	orrs	r3, r4
 8009210:	2b00      	cmp	r3, #0
 8009212:	bf0c      	ite	eq
 8009214:	2301      	moveq	r3, #1
 8009216:	2300      	movne	r3, #0
 8009218:	b2db      	uxtb	r3, r3
 800921a:	e008      	b.n	800922e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800921c:	4817      	ldr	r0, [pc, #92]	; (800927c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800921e:	f7ff fe5f 	bl	8008ee0 <LL_ADC_IsEnabled>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	bf0c      	ite	eq
 8009228:	2301      	moveq	r3, #1
 800922a:	2300      	movne	r3, #0
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d010      	beq.n	8009254 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009234:	689a      	ldr	r2, [r3, #8]
 8009236:	4b12      	ldr	r3, [pc, #72]	; (8009280 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009238:	4013      	ands	r3, r2
 800923a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800923c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800923e:	e009      	b.n	8009254 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009244:	f043 0220 	orr.w	r2, r3, #32
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8009252:	e000      	b.n	8009256 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009254:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800925e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8009262:	4618      	mov	r0, r3
 8009264:	378c      	adds	r7, #140	; 0x8c
 8009266:	46bd      	mov	sp, r7
 8009268:	bd90      	pop	{r4, r7, pc}
 800926a:	bf00      	nop
 800926c:	40022000 	.word	0x40022000
 8009270:	40022100 	.word	0x40022100
 8009274:	40022300 	.word	0x40022300
 8009278:	58026300 	.word	0x58026300
 800927c:	58026000 	.word	0x58026000
 8009280:	fffff0e0 	.word	0xfffff0e0

08009284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f003 0307 	and.w	r3, r3, #7
 8009292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009294:	4b0b      	ldr	r3, [pc, #44]	; (80092c4 <__NVIC_SetPriorityGrouping+0x40>)
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80092a0:	4013      	ands	r3, r2
 80092a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80092ac:	4b06      	ldr	r3, [pc, #24]	; (80092c8 <__NVIC_SetPriorityGrouping+0x44>)
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80092b2:	4a04      	ldr	r2, [pc, #16]	; (80092c4 <__NVIC_SetPriorityGrouping+0x40>)
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	60d3      	str	r3, [r2, #12]
}
 80092b8:	bf00      	nop
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	e000ed00 	.word	0xe000ed00
 80092c8:	05fa0000 	.word	0x05fa0000

080092cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80092cc:	b480      	push	{r7}
 80092ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80092d0:	4b04      	ldr	r3, [pc, #16]	; (80092e4 <__NVIC_GetPriorityGrouping+0x18>)
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	0a1b      	lsrs	r3, r3, #8
 80092d6:	f003 0307 	and.w	r3, r3, #7
}
 80092da:	4618      	mov	r0, r3
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	e000ed00 	.word	0xe000ed00

080092e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80092f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	db0b      	blt.n	8009312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80092fa:	88fb      	ldrh	r3, [r7, #6]
 80092fc:	f003 021f 	and.w	r2, r3, #31
 8009300:	4907      	ldr	r1, [pc, #28]	; (8009320 <__NVIC_EnableIRQ+0x38>)
 8009302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009306:	095b      	lsrs	r3, r3, #5
 8009308:	2001      	movs	r0, #1
 800930a:	fa00 f202 	lsl.w	r2, r0, r2
 800930e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009312:	bf00      	nop
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	e000e100 	.word	0xe000e100

08009324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	4603      	mov	r3, r0
 800932c:	6039      	str	r1, [r7, #0]
 800932e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009330:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009334:	2b00      	cmp	r3, #0
 8009336:	db0a      	blt.n	800934e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	b2da      	uxtb	r2, r3
 800933c:	490c      	ldr	r1, [pc, #48]	; (8009370 <__NVIC_SetPriority+0x4c>)
 800933e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009342:	0112      	lsls	r2, r2, #4
 8009344:	b2d2      	uxtb	r2, r2
 8009346:	440b      	add	r3, r1
 8009348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800934c:	e00a      	b.n	8009364 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	b2da      	uxtb	r2, r3
 8009352:	4908      	ldr	r1, [pc, #32]	; (8009374 <__NVIC_SetPriority+0x50>)
 8009354:	88fb      	ldrh	r3, [r7, #6]
 8009356:	f003 030f 	and.w	r3, r3, #15
 800935a:	3b04      	subs	r3, #4
 800935c:	0112      	lsls	r2, r2, #4
 800935e:	b2d2      	uxtb	r2, r2
 8009360:	440b      	add	r3, r1
 8009362:	761a      	strb	r2, [r3, #24]
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	e000e100 	.word	0xe000e100
 8009374:	e000ed00 	.word	0xe000ed00

08009378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009378:	b480      	push	{r7}
 800937a:	b089      	sub	sp, #36	; 0x24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	f1c3 0307 	rsb	r3, r3, #7
 8009392:	2b04      	cmp	r3, #4
 8009394:	bf28      	it	cs
 8009396:	2304      	movcs	r3, #4
 8009398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	3304      	adds	r3, #4
 800939e:	2b06      	cmp	r3, #6
 80093a0:	d902      	bls.n	80093a8 <NVIC_EncodePriority+0x30>
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	3b03      	subs	r3, #3
 80093a6:	e000      	b.n	80093aa <NVIC_EncodePriority+0x32>
 80093a8:	2300      	movs	r3, #0
 80093aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80093ac:	f04f 32ff 	mov.w	r2, #4294967295
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	fa02 f303 	lsl.w	r3, r2, r3
 80093b6:	43da      	mvns	r2, r3
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	401a      	ands	r2, r3
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80093c0:	f04f 31ff 	mov.w	r1, #4294967295
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	fa01 f303 	lsl.w	r3, r1, r3
 80093ca:	43d9      	mvns	r1, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80093d0:	4313      	orrs	r3, r2
         );
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3724      	adds	r7, #36	; 0x24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
	...

080093e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093f0:	d301      	bcc.n	80093f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80093f2:	2301      	movs	r3, #1
 80093f4:	e00f      	b.n	8009416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80093f6:	4a0a      	ldr	r2, [pc, #40]	; (8009420 <SysTick_Config+0x40>)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80093fe:	210f      	movs	r1, #15
 8009400:	f04f 30ff 	mov.w	r0, #4294967295
 8009404:	f7ff ff8e 	bl	8009324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009408:	4b05      	ldr	r3, [pc, #20]	; (8009420 <SysTick_Config+0x40>)
 800940a:	2200      	movs	r2, #0
 800940c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800940e:	4b04      	ldr	r3, [pc, #16]	; (8009420 <SysTick_Config+0x40>)
 8009410:	2207      	movs	r2, #7
 8009412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	e000e010 	.word	0xe000e010

08009424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7ff ff29 	bl	8009284 <__NVIC_SetPriorityGrouping>
}
 8009432:	bf00      	nop
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b086      	sub	sp, #24
 800943e:	af00      	add	r7, sp, #0
 8009440:	4603      	mov	r3, r0
 8009442:	60b9      	str	r1, [r7, #8]
 8009444:	607a      	str	r2, [r7, #4]
 8009446:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009448:	f7ff ff40 	bl	80092cc <__NVIC_GetPriorityGrouping>
 800944c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	68b9      	ldr	r1, [r7, #8]
 8009452:	6978      	ldr	r0, [r7, #20]
 8009454:	f7ff ff90 	bl	8009378 <NVIC_EncodePriority>
 8009458:	4602      	mov	r2, r0
 800945a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800945e:	4611      	mov	r1, r2
 8009460:	4618      	mov	r0, r3
 8009462:	f7ff ff5f 	bl	8009324 <__NVIC_SetPriority>
}
 8009466:	bf00      	nop
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	4603      	mov	r3, r0
 8009476:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800947c:	4618      	mov	r0, r3
 800947e:	f7ff ff33 	bl	80092e8 <__NVIC_EnableIRQ>
}
 8009482:	bf00      	nop
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7ff ffa4 	bl	80093e0 <SysTick_Config>
 8009498:	4603      	mov	r3, r0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e054      	b.n	8009560 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	7f5b      	ldrb	r3, [r3, #29]
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d105      	bne.n	80094cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7f8 fa86 	bl	80019d8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2202      	movs	r2, #2
 80094d0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	791b      	ldrb	r3, [r3, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10c      	bne.n	80094f4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a22      	ldr	r2, [pc, #136]	; (8009568 <HAL_CRC_Init+0xc4>)
 80094e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f022 0218 	bic.w	r2, r2, #24
 80094f0:	609a      	str	r2, [r3, #8]
 80094f2:	e00c      	b.n	800950e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6899      	ldr	r1, [r3, #8]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	461a      	mov	r2, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f948 	bl	8009794 <HAL_CRCEx_Polynomial_Set>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e028      	b.n	8009560 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	795b      	ldrb	r3, [r3, #5]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d105      	bne.n	8009522 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f04f 32ff 	mov.w	r2, #4294967295
 800951e:	611a      	str	r2, [r3, #16]
 8009520:	e004      	b.n	800952c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	6912      	ldr	r2, [r2, #16]
 800952a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	695a      	ldr	r2, [r3, #20]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	699a      	ldr	r2, [r3, #24]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	430a      	orrs	r2, r1
 8009556:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	04c11db7 	.word	0x04c11db7

0800956c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8009578:	2300      	movs	r3, #0
 800957a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2202      	movs	r2, #2
 8009580:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f042 0201 	orr.w	r2, r2, #1
 8009590:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	2b03      	cmp	r3, #3
 8009598:	d006      	beq.n	80095a8 <HAL_CRC_Calculate+0x3c>
 800959a:	2b03      	cmp	r3, #3
 800959c:	d829      	bhi.n	80095f2 <HAL_CRC_Calculate+0x86>
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d019      	beq.n	80095d6 <HAL_CRC_Calculate+0x6a>
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d01e      	beq.n	80095e4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80095a6:	e024      	b.n	80095f2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80095a8:	2300      	movs	r3, #0
 80095aa:	617b      	str	r3, [r7, #20]
 80095ac:	e00a      	b.n	80095c4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	441a      	add	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6812      	ldr	r2, [r2, #0]
 80095bc:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	3301      	adds	r3, #1
 80095c2:	617b      	str	r3, [r7, #20]
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d3f0      	bcc.n	80095ae <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	613b      	str	r3, [r7, #16]
      break;
 80095d4:	e00e      	b.n	80095f4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	68b9      	ldr	r1, [r7, #8]
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f000 f812 	bl	8009604 <CRC_Handle_8>
 80095e0:	6138      	str	r0, [r7, #16]
      break;
 80095e2:	e007      	b.n	80095f4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	68b9      	ldr	r1, [r7, #8]
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f000 f899 	bl	8009720 <CRC_Handle_16>
 80095ee:	6138      	str	r0, [r7, #16]
      break;
 80095f0:	e000      	b.n	80095f4 <HAL_CRC_Calculate+0x88>
      break;
 80095f2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2201      	movs	r2, #1
 80095f8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80095fa:	693b      	ldr	r3, [r7, #16]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3718      	adds	r7, #24
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8009604:	b480      	push	{r7}
 8009606:	b089      	sub	sp, #36	; 0x24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009610:	2300      	movs	r3, #0
 8009612:	61fb      	str	r3, [r7, #28]
 8009614:	e023      	b.n	800965e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	4413      	add	r3, r2
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	3301      	adds	r3, #1
 8009628:	68b9      	ldr	r1, [r7, #8]
 800962a:	440b      	add	r3, r1
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009630:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	3302      	adds	r3, #2
 8009638:	68b9      	ldr	r1, [r7, #8]
 800963a:	440b      	add	r3, r1
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009640:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	3303      	adds	r3, #3
 8009648:	68b9      	ldr	r1, [r7, #8]
 800964a:	440b      	add	r3, r1
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009654:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009656:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	3301      	adds	r3, #1
 800965c:	61fb      	str	r3, [r7, #28]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	089b      	lsrs	r3, r3, #2
 8009662:	69fa      	ldr	r2, [r7, #28]
 8009664:	429a      	cmp	r2, r3
 8009666:	d3d6      	bcc.n	8009616 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f003 0303 	and.w	r3, r3, #3
 800966e:	2b00      	cmp	r3, #0
 8009670:	d04d      	beq.n	800970e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f003 0303 	and.w	r3, r3, #3
 8009678:	2b01      	cmp	r3, #1
 800967a:	d107      	bne.n	800968c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	4413      	add	r3, r2
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	6812      	ldr	r2, [r2, #0]
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	2b02      	cmp	r3, #2
 8009694:	d116      	bne.n	80096c4 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	4413      	add	r3, r2
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	021b      	lsls	r3, r3, #8
 80096a2:	b21a      	sxth	r2, r3
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	3301      	adds	r3, #1
 80096aa:	68b9      	ldr	r1, [r7, #8]
 80096ac:	440b      	add	r3, r1
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	b21b      	sxth	r3, r3
 80096b2:	4313      	orrs	r3, r2
 80096b4:	b21b      	sxth	r3, r3
 80096b6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	8b7a      	ldrh	r2, [r7, #26]
 80096c2:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f003 0303 	and.w	r3, r3, #3
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d11f      	bne.n	800970e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	4413      	add	r3, r2
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	021b      	lsls	r3, r3, #8
 80096da:	b21a      	sxth	r2, r3
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	3301      	adds	r3, #1
 80096e2:	68b9      	ldr	r1, [r7, #8]
 80096e4:	440b      	add	r3, r1
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	b21b      	sxth	r3, r3
 80096ea:	4313      	orrs	r3, r2
 80096ec:	b21b      	sxth	r3, r3
 80096ee:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	8b7a      	ldrh	r2, [r7, #26]
 80096fa:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	3302      	adds	r3, #2
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	4413      	add	r3, r2
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	6812      	ldr	r2, [r2, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3724      	adds	r7, #36	; 0x24
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800972c:	2300      	movs	r3, #0
 800972e:	617b      	str	r3, [r7, #20]
 8009730:	e013      	b.n	800975a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	4413      	add	r3, r2
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	041a      	lsls	r2, r3, #16
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	3302      	adds	r3, #2
 8009744:	68b9      	ldr	r1, [r7, #8]
 8009746:	440b      	add	r3, r1
 8009748:	881b      	ldrh	r3, [r3, #0]
 800974a:	4619      	mov	r1, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	430a      	orrs	r2, r1
 8009752:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	3301      	adds	r3, #1
 8009758:	617b      	str	r3, [r7, #20]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	085b      	lsrs	r3, r3, #1
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	429a      	cmp	r2, r3
 8009762:	d3e6      	bcc.n	8009732 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f003 0301 	and.w	r3, r3, #1
 800976a:	2b00      	cmp	r3, #0
 800976c:	d009      	beq.n	8009782 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	4413      	add	r3, r2
 800977c:	881a      	ldrh	r2, [r3, #0]
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
}
 8009788:	4618      	mov	r0, r3
 800978a:	371c      	adds	r7, #28
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80097a4:	231f      	movs	r3, #31
 80097a6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80097a8:	bf00      	nop
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	1e5a      	subs	r2, r3, #1
 80097ae:	613a      	str	r2, [r7, #16]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d009      	beq.n	80097c8 <HAL_CRCEx_Polynomial_Set+0x34>
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f003 031f 	and.w	r3, r3, #31
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	fa22 f303 	lsr.w	r3, r2, r3
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d0f0      	beq.n	80097aa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b18      	cmp	r3, #24
 80097cc:	d846      	bhi.n	800985c <HAL_CRCEx_Polynomial_Set+0xc8>
 80097ce:	a201      	add	r2, pc, #4	; (adr r2, 80097d4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d4:	08009863 	.word	0x08009863
 80097d8:	0800985d 	.word	0x0800985d
 80097dc:	0800985d 	.word	0x0800985d
 80097e0:	0800985d 	.word	0x0800985d
 80097e4:	0800985d 	.word	0x0800985d
 80097e8:	0800985d 	.word	0x0800985d
 80097ec:	0800985d 	.word	0x0800985d
 80097f0:	0800985d 	.word	0x0800985d
 80097f4:	08009851 	.word	0x08009851
 80097f8:	0800985d 	.word	0x0800985d
 80097fc:	0800985d 	.word	0x0800985d
 8009800:	0800985d 	.word	0x0800985d
 8009804:	0800985d 	.word	0x0800985d
 8009808:	0800985d 	.word	0x0800985d
 800980c:	0800985d 	.word	0x0800985d
 8009810:	0800985d 	.word	0x0800985d
 8009814:	08009845 	.word	0x08009845
 8009818:	0800985d 	.word	0x0800985d
 800981c:	0800985d 	.word	0x0800985d
 8009820:	0800985d 	.word	0x0800985d
 8009824:	0800985d 	.word	0x0800985d
 8009828:	0800985d 	.word	0x0800985d
 800982c:	0800985d 	.word	0x0800985d
 8009830:	0800985d 	.word	0x0800985d
 8009834:	08009839 	.word	0x08009839
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	2b06      	cmp	r3, #6
 800983c:	d913      	bls.n	8009866 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009842:	e010      	b.n	8009866 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	2b07      	cmp	r3, #7
 8009848:	d90f      	bls.n	800986a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800984e:	e00c      	b.n	800986a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	2b0f      	cmp	r3, #15
 8009854:	d90b      	bls.n	800986e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800985a:	e008      	b.n	800986e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	75fb      	strb	r3, [r7, #23]
      break;
 8009860:	e006      	b.n	8009870 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009862:	bf00      	nop
 8009864:	e004      	b.n	8009870 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009866:	bf00      	nop
 8009868:	e002      	b.n	8009870 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800986a:	bf00      	nop
 800986c:	e000      	b.n	8009870 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800986e:	bf00      	nop
  }
  if (status == HAL_OK)
 8009870:	7dfb      	ldrb	r3, [r7, #23]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10d      	bne.n	8009892 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	f023 0118 	bic.w	r1, r3, #24
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	430a      	orrs	r2, r1
 8009890:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009892:	7dfb      	ldrb	r3, [r7, #23]
}
 8009894:	4618      	mov	r0, r3
 8009896:	371c      	adds	r7, #28
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80098a8:	f7fd fb6e 	bl	8006f88 <HAL_GetTick>
 80098ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e314      	b.n	8009ee2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a66      	ldr	r2, [pc, #408]	; (8009a58 <HAL_DMA_Init+0x1b8>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d04a      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a65      	ldr	r2, [pc, #404]	; (8009a5c <HAL_DMA_Init+0x1bc>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d045      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a63      	ldr	r2, [pc, #396]	; (8009a60 <HAL_DMA_Init+0x1c0>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d040      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a62      	ldr	r2, [pc, #392]	; (8009a64 <HAL_DMA_Init+0x1c4>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d03b      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a60      	ldr	r2, [pc, #384]	; (8009a68 <HAL_DMA_Init+0x1c8>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d036      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a5f      	ldr	r2, [pc, #380]	; (8009a6c <HAL_DMA_Init+0x1cc>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d031      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a5d      	ldr	r2, [pc, #372]	; (8009a70 <HAL_DMA_Init+0x1d0>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d02c      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a5c      	ldr	r2, [pc, #368]	; (8009a74 <HAL_DMA_Init+0x1d4>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d027      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a5a      	ldr	r2, [pc, #360]	; (8009a78 <HAL_DMA_Init+0x1d8>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d022      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a59      	ldr	r2, [pc, #356]	; (8009a7c <HAL_DMA_Init+0x1dc>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d01d      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a57      	ldr	r2, [pc, #348]	; (8009a80 <HAL_DMA_Init+0x1e0>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d018      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a56      	ldr	r2, [pc, #344]	; (8009a84 <HAL_DMA_Init+0x1e4>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d013      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a54      	ldr	r2, [pc, #336]	; (8009a88 <HAL_DMA_Init+0x1e8>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d00e      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a53      	ldr	r2, [pc, #332]	; (8009a8c <HAL_DMA_Init+0x1ec>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d009      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a51      	ldr	r2, [pc, #324]	; (8009a90 <HAL_DMA_Init+0x1f0>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d004      	beq.n	8009958 <HAL_DMA_Init+0xb8>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a50      	ldr	r2, [pc, #320]	; (8009a94 <HAL_DMA_Init+0x1f4>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d101      	bne.n	800995c <HAL_DMA_Init+0xbc>
 8009958:	2301      	movs	r3, #1
 800995a:	e000      	b.n	800995e <HAL_DMA_Init+0xbe>
 800995c:	2300      	movs	r3, #0
 800995e:	2b00      	cmp	r3, #0
 8009960:	f000 813c 	beq.w	8009bdc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2202      	movs	r2, #2
 8009968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a37      	ldr	r2, [pc, #220]	; (8009a58 <HAL_DMA_Init+0x1b8>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d04a      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a36      	ldr	r2, [pc, #216]	; (8009a5c <HAL_DMA_Init+0x1bc>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d045      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a34      	ldr	r2, [pc, #208]	; (8009a60 <HAL_DMA_Init+0x1c0>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d040      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a33      	ldr	r2, [pc, #204]	; (8009a64 <HAL_DMA_Init+0x1c4>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d03b      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a31      	ldr	r2, [pc, #196]	; (8009a68 <HAL_DMA_Init+0x1c8>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d036      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a30      	ldr	r2, [pc, #192]	; (8009a6c <HAL_DMA_Init+0x1cc>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d031      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a2e      	ldr	r2, [pc, #184]	; (8009a70 <HAL_DMA_Init+0x1d0>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d02c      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a2d      	ldr	r2, [pc, #180]	; (8009a74 <HAL_DMA_Init+0x1d4>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d027      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a2b      	ldr	r2, [pc, #172]	; (8009a78 <HAL_DMA_Init+0x1d8>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d022      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a2a      	ldr	r2, [pc, #168]	; (8009a7c <HAL_DMA_Init+0x1dc>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d01d      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a28      	ldr	r2, [pc, #160]	; (8009a80 <HAL_DMA_Init+0x1e0>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d018      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a27      	ldr	r2, [pc, #156]	; (8009a84 <HAL_DMA_Init+0x1e4>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d013      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a25      	ldr	r2, [pc, #148]	; (8009a88 <HAL_DMA_Init+0x1e8>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d00e      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a24      	ldr	r2, [pc, #144]	; (8009a8c <HAL_DMA_Init+0x1ec>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d009      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a22      	ldr	r2, [pc, #136]	; (8009a90 <HAL_DMA_Init+0x1f0>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d004      	beq.n	8009a14 <HAL_DMA_Init+0x174>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a21      	ldr	r2, [pc, #132]	; (8009a94 <HAL_DMA_Init+0x1f4>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d108      	bne.n	8009a26 <HAL_DMA_Init+0x186>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f022 0201 	bic.w	r2, r2, #1
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	e007      	b.n	8009a36 <HAL_DMA_Init+0x196>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f022 0201 	bic.w	r2, r2, #1
 8009a34:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009a36:	e02f      	b.n	8009a98 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009a38:	f7fd faa6 	bl	8006f88 <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	2b05      	cmp	r3, #5
 8009a44:	d928      	bls.n	8009a98 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2203      	movs	r2, #3
 8009a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e244      	b.n	8009ee2 <HAL_DMA_Init+0x642>
 8009a58:	40020010 	.word	0x40020010
 8009a5c:	40020028 	.word	0x40020028
 8009a60:	40020040 	.word	0x40020040
 8009a64:	40020058 	.word	0x40020058
 8009a68:	40020070 	.word	0x40020070
 8009a6c:	40020088 	.word	0x40020088
 8009a70:	400200a0 	.word	0x400200a0
 8009a74:	400200b8 	.word	0x400200b8
 8009a78:	40020410 	.word	0x40020410
 8009a7c:	40020428 	.word	0x40020428
 8009a80:	40020440 	.word	0x40020440
 8009a84:	40020458 	.word	0x40020458
 8009a88:	40020470 	.word	0x40020470
 8009a8c:	40020488 	.word	0x40020488
 8009a90:	400204a0 	.word	0x400204a0
 8009a94:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1c8      	bne.n	8009a38 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009aae:	697a      	ldr	r2, [r7, #20]
 8009ab0:	4b84      	ldr	r3, [pc, #528]	; (8009cc4 <HAL_DMA_Init+0x424>)
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8009abe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009aca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ad6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a1b      	ldr	r3, [r3, #32]
 8009adc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	2b04      	cmp	r3, #4
 8009aea:	d107      	bne.n	8009afc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af4:	4313      	orrs	r3, r2
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	2b28      	cmp	r3, #40	; 0x28
 8009b02:	d903      	bls.n	8009b0c <HAL_DMA_Init+0x26c>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	2b2e      	cmp	r3, #46	; 0x2e
 8009b0a:	d91f      	bls.n	8009b4c <HAL_DMA_Init+0x2ac>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	2b3e      	cmp	r3, #62	; 0x3e
 8009b12:	d903      	bls.n	8009b1c <HAL_DMA_Init+0x27c>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	2b42      	cmp	r3, #66	; 0x42
 8009b1a:	d917      	bls.n	8009b4c <HAL_DMA_Init+0x2ac>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	2b46      	cmp	r3, #70	; 0x46
 8009b22:	d903      	bls.n	8009b2c <HAL_DMA_Init+0x28c>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	2b48      	cmp	r3, #72	; 0x48
 8009b2a:	d90f      	bls.n	8009b4c <HAL_DMA_Init+0x2ac>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	2b4e      	cmp	r3, #78	; 0x4e
 8009b32:	d903      	bls.n	8009b3c <HAL_DMA_Init+0x29c>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	2b52      	cmp	r3, #82	; 0x52
 8009b3a:	d907      	bls.n	8009b4c <HAL_DMA_Init+0x2ac>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	2b73      	cmp	r3, #115	; 0x73
 8009b42:	d905      	bls.n	8009b50 <HAL_DMA_Init+0x2b0>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	2b77      	cmp	r3, #119	; 0x77
 8009b4a:	d801      	bhi.n	8009b50 <HAL_DMA_Init+0x2b0>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e000      	b.n	8009b52 <HAL_DMA_Init+0x2b2>
 8009b50:	2300      	movs	r3, #0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d003      	beq.n	8009b5e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b5c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	695b      	ldr	r3, [r3, #20]
 8009b6c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f023 0307 	bic.w	r3, r3, #7
 8009b74:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	2b04      	cmp	r3, #4
 8009b86:	d117      	bne.n	8009bb8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00e      	beq.n	8009bb8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f001 ff28 	bl	800b9f0 <DMA_CheckFifoParam>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d008      	beq.n	8009bb8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2240      	movs	r2, #64	; 0x40
 8009baa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e194      	b.n	8009ee2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f001 fe63 	bl	800b88c <DMA_CalcBaseAndBitshift>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bce:	f003 031f 	and.w	r3, r3, #31
 8009bd2:	223f      	movs	r2, #63	; 0x3f
 8009bd4:	409a      	lsls	r2, r3
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	609a      	str	r2, [r3, #8]
 8009bda:	e0ca      	b.n	8009d72 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a39      	ldr	r2, [pc, #228]	; (8009cc8 <HAL_DMA_Init+0x428>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d022      	beq.n	8009c2c <HAL_DMA_Init+0x38c>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a38      	ldr	r2, [pc, #224]	; (8009ccc <HAL_DMA_Init+0x42c>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d01d      	beq.n	8009c2c <HAL_DMA_Init+0x38c>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a36      	ldr	r2, [pc, #216]	; (8009cd0 <HAL_DMA_Init+0x430>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d018      	beq.n	8009c2c <HAL_DMA_Init+0x38c>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a35      	ldr	r2, [pc, #212]	; (8009cd4 <HAL_DMA_Init+0x434>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d013      	beq.n	8009c2c <HAL_DMA_Init+0x38c>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a33      	ldr	r2, [pc, #204]	; (8009cd8 <HAL_DMA_Init+0x438>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d00e      	beq.n	8009c2c <HAL_DMA_Init+0x38c>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a32      	ldr	r2, [pc, #200]	; (8009cdc <HAL_DMA_Init+0x43c>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d009      	beq.n	8009c2c <HAL_DMA_Init+0x38c>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a30      	ldr	r2, [pc, #192]	; (8009ce0 <HAL_DMA_Init+0x440>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d004      	beq.n	8009c2c <HAL_DMA_Init+0x38c>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a2f      	ldr	r2, [pc, #188]	; (8009ce4 <HAL_DMA_Init+0x444>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d101      	bne.n	8009c30 <HAL_DMA_Init+0x390>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e000      	b.n	8009c32 <HAL_DMA_Init+0x392>
 8009c30:	2300      	movs	r3, #0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f000 8094 	beq.w	8009d60 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a22      	ldr	r2, [pc, #136]	; (8009cc8 <HAL_DMA_Init+0x428>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d021      	beq.n	8009c86 <HAL_DMA_Init+0x3e6>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a21      	ldr	r2, [pc, #132]	; (8009ccc <HAL_DMA_Init+0x42c>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d01c      	beq.n	8009c86 <HAL_DMA_Init+0x3e6>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a1f      	ldr	r2, [pc, #124]	; (8009cd0 <HAL_DMA_Init+0x430>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d017      	beq.n	8009c86 <HAL_DMA_Init+0x3e6>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a1e      	ldr	r2, [pc, #120]	; (8009cd4 <HAL_DMA_Init+0x434>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d012      	beq.n	8009c86 <HAL_DMA_Init+0x3e6>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a1c      	ldr	r2, [pc, #112]	; (8009cd8 <HAL_DMA_Init+0x438>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d00d      	beq.n	8009c86 <HAL_DMA_Init+0x3e6>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a1b      	ldr	r2, [pc, #108]	; (8009cdc <HAL_DMA_Init+0x43c>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d008      	beq.n	8009c86 <HAL_DMA_Init+0x3e6>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a19      	ldr	r2, [pc, #100]	; (8009ce0 <HAL_DMA_Init+0x440>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d003      	beq.n	8009c86 <HAL_DMA_Init+0x3e6>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a18      	ldr	r2, [pc, #96]	; (8009ce4 <HAL_DMA_Init+0x444>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	4b11      	ldr	r3, [pc, #68]	; (8009ce8 <HAL_DMA_Init+0x448>)
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	2b40      	cmp	r3, #64	; 0x40
 8009cae:	d01d      	beq.n	8009cec <HAL_DMA_Init+0x44c>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	2b80      	cmp	r3, #128	; 0x80
 8009cb6:	d102      	bne.n	8009cbe <HAL_DMA_Init+0x41e>
 8009cb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009cbc:	e017      	b.n	8009cee <HAL_DMA_Init+0x44e>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	e015      	b.n	8009cee <HAL_DMA_Init+0x44e>
 8009cc2:	bf00      	nop
 8009cc4:	fe10803f 	.word	0xfe10803f
 8009cc8:	58025408 	.word	0x58025408
 8009ccc:	5802541c 	.word	0x5802541c
 8009cd0:	58025430 	.word	0x58025430
 8009cd4:	58025444 	.word	0x58025444
 8009cd8:	58025458 	.word	0x58025458
 8009cdc:	5802546c 	.word	0x5802546c
 8009ce0:	58025480 	.word	0x58025480
 8009ce4:	58025494 	.word	0x58025494
 8009ce8:	fffe000f 	.word	0xfffe000f
 8009cec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	68d2      	ldr	r2, [r2, #12]
 8009cf2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009cf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009cfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009d04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009d0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009d14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009d1c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	461a      	mov	r2, r3
 8009d32:	4b6e      	ldr	r3, [pc, #440]	; (8009eec <HAL_DMA_Init+0x64c>)
 8009d34:	4413      	add	r3, r2
 8009d36:	4a6e      	ldr	r2, [pc, #440]	; (8009ef0 <HAL_DMA_Init+0x650>)
 8009d38:	fba2 2303 	umull	r2, r3, r2, r3
 8009d3c:	091b      	lsrs	r3, r3, #4
 8009d3e:	009a      	lsls	r2, r3, #2
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f001 fda1 	bl	800b88c <DMA_CalcBaseAndBitshift>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d52:	f003 031f 	and.w	r3, r3, #31
 8009d56:	2201      	movs	r2, #1
 8009d58:	409a      	lsls	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	605a      	str	r2, [r3, #4]
 8009d5e:	e008      	b.n	8009d72 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2240      	movs	r2, #64	; 0x40
 8009d64:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2203      	movs	r2, #3
 8009d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e0b7      	b.n	8009ee2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a5f      	ldr	r2, [pc, #380]	; (8009ef4 <HAL_DMA_Init+0x654>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d072      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a5d      	ldr	r2, [pc, #372]	; (8009ef8 <HAL_DMA_Init+0x658>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d06d      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a5c      	ldr	r2, [pc, #368]	; (8009efc <HAL_DMA_Init+0x65c>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d068      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a5a      	ldr	r2, [pc, #360]	; (8009f00 <HAL_DMA_Init+0x660>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d063      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a59      	ldr	r2, [pc, #356]	; (8009f04 <HAL_DMA_Init+0x664>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d05e      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a57      	ldr	r2, [pc, #348]	; (8009f08 <HAL_DMA_Init+0x668>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d059      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a56      	ldr	r2, [pc, #344]	; (8009f0c <HAL_DMA_Init+0x66c>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d054      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a54      	ldr	r2, [pc, #336]	; (8009f10 <HAL_DMA_Init+0x670>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d04f      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a53      	ldr	r2, [pc, #332]	; (8009f14 <HAL_DMA_Init+0x674>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d04a      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a51      	ldr	r2, [pc, #324]	; (8009f18 <HAL_DMA_Init+0x678>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d045      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a50      	ldr	r2, [pc, #320]	; (8009f1c <HAL_DMA_Init+0x67c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d040      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a4e      	ldr	r2, [pc, #312]	; (8009f20 <HAL_DMA_Init+0x680>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d03b      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a4d      	ldr	r2, [pc, #308]	; (8009f24 <HAL_DMA_Init+0x684>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d036      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a4b      	ldr	r2, [pc, #300]	; (8009f28 <HAL_DMA_Init+0x688>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d031      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a4a      	ldr	r2, [pc, #296]	; (8009f2c <HAL_DMA_Init+0x68c>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d02c      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a48      	ldr	r2, [pc, #288]	; (8009f30 <HAL_DMA_Init+0x690>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d027      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a47      	ldr	r2, [pc, #284]	; (8009f34 <HAL_DMA_Init+0x694>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d022      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a45      	ldr	r2, [pc, #276]	; (8009f38 <HAL_DMA_Init+0x698>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d01d      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a44      	ldr	r2, [pc, #272]	; (8009f3c <HAL_DMA_Init+0x69c>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d018      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a42      	ldr	r2, [pc, #264]	; (8009f40 <HAL_DMA_Init+0x6a0>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d013      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a41      	ldr	r2, [pc, #260]	; (8009f44 <HAL_DMA_Init+0x6a4>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d00e      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a3f      	ldr	r2, [pc, #252]	; (8009f48 <HAL_DMA_Init+0x6a8>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d009      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a3e      	ldr	r2, [pc, #248]	; (8009f4c <HAL_DMA_Init+0x6ac>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d004      	beq.n	8009e62 <HAL_DMA_Init+0x5c2>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a3c      	ldr	r2, [pc, #240]	; (8009f50 <HAL_DMA_Init+0x6b0>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d101      	bne.n	8009e66 <HAL_DMA_Init+0x5c6>
 8009e62:	2301      	movs	r3, #1
 8009e64:	e000      	b.n	8009e68 <HAL_DMA_Init+0x5c8>
 8009e66:	2300      	movs	r3, #0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d032      	beq.n	8009ed2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f001 fe3b 	bl	800bae8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	2b80      	cmp	r3, #128	; 0x80
 8009e78:	d102      	bne.n	8009e80 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685a      	ldr	r2, [r3, #4]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e88:	b2d2      	uxtb	r2, r2
 8009e8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009e94:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d010      	beq.n	8009ec0 <HAL_DMA_Init+0x620>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	2b08      	cmp	r3, #8
 8009ea4:	d80c      	bhi.n	8009ec0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 feb8 	bl	800bc1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009ebc:	605a      	str	r2, [r3, #4]
 8009ebe:	e008      	b.n	8009ed2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3718      	adds	r7, #24
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	a7fdabf8 	.word	0xa7fdabf8
 8009ef0:	cccccccd 	.word	0xcccccccd
 8009ef4:	40020010 	.word	0x40020010
 8009ef8:	40020028 	.word	0x40020028
 8009efc:	40020040 	.word	0x40020040
 8009f00:	40020058 	.word	0x40020058
 8009f04:	40020070 	.word	0x40020070
 8009f08:	40020088 	.word	0x40020088
 8009f0c:	400200a0 	.word	0x400200a0
 8009f10:	400200b8 	.word	0x400200b8
 8009f14:	40020410 	.word	0x40020410
 8009f18:	40020428 	.word	0x40020428
 8009f1c:	40020440 	.word	0x40020440
 8009f20:	40020458 	.word	0x40020458
 8009f24:	40020470 	.word	0x40020470
 8009f28:	40020488 	.word	0x40020488
 8009f2c:	400204a0 	.word	0x400204a0
 8009f30:	400204b8 	.word	0x400204b8
 8009f34:	58025408 	.word	0x58025408
 8009f38:	5802541c 	.word	0x5802541c
 8009f3c:	58025430 	.word	0x58025430
 8009f40:	58025444 	.word	0x58025444
 8009f44:	58025458 	.word	0x58025458
 8009f48:	5802546c 	.word	0x5802546c
 8009f4c:	58025480 	.word	0x58025480
 8009f50:	58025494 	.word	0x58025494

08009f54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009f5c:	f7fd f814 	bl	8006f88 <HAL_GetTick>
 8009f60:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d101      	bne.n	8009f6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e2dc      	b.n	800a526 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d008      	beq.n	8009f8a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2280      	movs	r2, #128	; 0x80
 8009f7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e2cd      	b.n	800a526 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a76      	ldr	r2, [pc, #472]	; (800a168 <HAL_DMA_Abort+0x214>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d04a      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a74      	ldr	r2, [pc, #464]	; (800a16c <HAL_DMA_Abort+0x218>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d045      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a73      	ldr	r2, [pc, #460]	; (800a170 <HAL_DMA_Abort+0x21c>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d040      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a71      	ldr	r2, [pc, #452]	; (800a174 <HAL_DMA_Abort+0x220>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d03b      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a70      	ldr	r2, [pc, #448]	; (800a178 <HAL_DMA_Abort+0x224>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d036      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a6e      	ldr	r2, [pc, #440]	; (800a17c <HAL_DMA_Abort+0x228>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d031      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a6d      	ldr	r2, [pc, #436]	; (800a180 <HAL_DMA_Abort+0x22c>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d02c      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a6b      	ldr	r2, [pc, #428]	; (800a184 <HAL_DMA_Abort+0x230>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d027      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a6a      	ldr	r2, [pc, #424]	; (800a188 <HAL_DMA_Abort+0x234>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d022      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a68      	ldr	r2, [pc, #416]	; (800a18c <HAL_DMA_Abort+0x238>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d01d      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a67      	ldr	r2, [pc, #412]	; (800a190 <HAL_DMA_Abort+0x23c>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d018      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a65      	ldr	r2, [pc, #404]	; (800a194 <HAL_DMA_Abort+0x240>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d013      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a64      	ldr	r2, [pc, #400]	; (800a198 <HAL_DMA_Abort+0x244>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d00e      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a62      	ldr	r2, [pc, #392]	; (800a19c <HAL_DMA_Abort+0x248>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d009      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a61      	ldr	r2, [pc, #388]	; (800a1a0 <HAL_DMA_Abort+0x24c>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d004      	beq.n	800a02a <HAL_DMA_Abort+0xd6>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a5f      	ldr	r2, [pc, #380]	; (800a1a4 <HAL_DMA_Abort+0x250>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d101      	bne.n	800a02e <HAL_DMA_Abort+0xda>
 800a02a:	2301      	movs	r3, #1
 800a02c:	e000      	b.n	800a030 <HAL_DMA_Abort+0xdc>
 800a02e:	2300      	movs	r3, #0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d013      	beq.n	800a05c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f022 021e 	bic.w	r2, r2, #30
 800a042:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	695a      	ldr	r2, [r3, #20]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a052:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	617b      	str	r3, [r7, #20]
 800a05a:	e00a      	b.n	800a072 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 020e 	bic.w	r2, r2, #14
 800a06a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a3c      	ldr	r2, [pc, #240]	; (800a168 <HAL_DMA_Abort+0x214>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d072      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a3a      	ldr	r2, [pc, #232]	; (800a16c <HAL_DMA_Abort+0x218>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d06d      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a39      	ldr	r2, [pc, #228]	; (800a170 <HAL_DMA_Abort+0x21c>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d068      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a37      	ldr	r2, [pc, #220]	; (800a174 <HAL_DMA_Abort+0x220>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d063      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a36      	ldr	r2, [pc, #216]	; (800a178 <HAL_DMA_Abort+0x224>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d05e      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a34      	ldr	r2, [pc, #208]	; (800a17c <HAL_DMA_Abort+0x228>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d059      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a33      	ldr	r2, [pc, #204]	; (800a180 <HAL_DMA_Abort+0x22c>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d054      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a31      	ldr	r2, [pc, #196]	; (800a184 <HAL_DMA_Abort+0x230>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d04f      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a30      	ldr	r2, [pc, #192]	; (800a188 <HAL_DMA_Abort+0x234>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d04a      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a2e      	ldr	r2, [pc, #184]	; (800a18c <HAL_DMA_Abort+0x238>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d045      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a2d      	ldr	r2, [pc, #180]	; (800a190 <HAL_DMA_Abort+0x23c>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d040      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a2b      	ldr	r2, [pc, #172]	; (800a194 <HAL_DMA_Abort+0x240>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d03b      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a2a      	ldr	r2, [pc, #168]	; (800a198 <HAL_DMA_Abort+0x244>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d036      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a28      	ldr	r2, [pc, #160]	; (800a19c <HAL_DMA_Abort+0x248>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d031      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a27      	ldr	r2, [pc, #156]	; (800a1a0 <HAL_DMA_Abort+0x24c>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d02c      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a25      	ldr	r2, [pc, #148]	; (800a1a4 <HAL_DMA_Abort+0x250>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d027      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a24      	ldr	r2, [pc, #144]	; (800a1a8 <HAL_DMA_Abort+0x254>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d022      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a22      	ldr	r2, [pc, #136]	; (800a1ac <HAL_DMA_Abort+0x258>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d01d      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a21      	ldr	r2, [pc, #132]	; (800a1b0 <HAL_DMA_Abort+0x25c>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d018      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a1f      	ldr	r2, [pc, #124]	; (800a1b4 <HAL_DMA_Abort+0x260>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d013      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a1e      	ldr	r2, [pc, #120]	; (800a1b8 <HAL_DMA_Abort+0x264>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d00e      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a1c      	ldr	r2, [pc, #112]	; (800a1bc <HAL_DMA_Abort+0x268>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d009      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a1b      	ldr	r2, [pc, #108]	; (800a1c0 <HAL_DMA_Abort+0x26c>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d004      	beq.n	800a162 <HAL_DMA_Abort+0x20e>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a19      	ldr	r2, [pc, #100]	; (800a1c4 <HAL_DMA_Abort+0x270>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d132      	bne.n	800a1c8 <HAL_DMA_Abort+0x274>
 800a162:	2301      	movs	r3, #1
 800a164:	e031      	b.n	800a1ca <HAL_DMA_Abort+0x276>
 800a166:	bf00      	nop
 800a168:	40020010 	.word	0x40020010
 800a16c:	40020028 	.word	0x40020028
 800a170:	40020040 	.word	0x40020040
 800a174:	40020058 	.word	0x40020058
 800a178:	40020070 	.word	0x40020070
 800a17c:	40020088 	.word	0x40020088
 800a180:	400200a0 	.word	0x400200a0
 800a184:	400200b8 	.word	0x400200b8
 800a188:	40020410 	.word	0x40020410
 800a18c:	40020428 	.word	0x40020428
 800a190:	40020440 	.word	0x40020440
 800a194:	40020458 	.word	0x40020458
 800a198:	40020470 	.word	0x40020470
 800a19c:	40020488 	.word	0x40020488
 800a1a0:	400204a0 	.word	0x400204a0
 800a1a4:	400204b8 	.word	0x400204b8
 800a1a8:	58025408 	.word	0x58025408
 800a1ac:	5802541c 	.word	0x5802541c
 800a1b0:	58025430 	.word	0x58025430
 800a1b4:	58025444 	.word	0x58025444
 800a1b8:	58025458 	.word	0x58025458
 800a1bc:	5802546c 	.word	0x5802546c
 800a1c0:	58025480 	.word	0x58025480
 800a1c4:	58025494 	.word	0x58025494
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d007      	beq.n	800a1de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a6d      	ldr	r2, [pc, #436]	; (800a398 <HAL_DMA_Abort+0x444>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d04a      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a6b      	ldr	r2, [pc, #428]	; (800a39c <HAL_DMA_Abort+0x448>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d045      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a6a      	ldr	r2, [pc, #424]	; (800a3a0 <HAL_DMA_Abort+0x44c>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d040      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a68      	ldr	r2, [pc, #416]	; (800a3a4 <HAL_DMA_Abort+0x450>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d03b      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a67      	ldr	r2, [pc, #412]	; (800a3a8 <HAL_DMA_Abort+0x454>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d036      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a65      	ldr	r2, [pc, #404]	; (800a3ac <HAL_DMA_Abort+0x458>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d031      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a64      	ldr	r2, [pc, #400]	; (800a3b0 <HAL_DMA_Abort+0x45c>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d02c      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a62      	ldr	r2, [pc, #392]	; (800a3b4 <HAL_DMA_Abort+0x460>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d027      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a61      	ldr	r2, [pc, #388]	; (800a3b8 <HAL_DMA_Abort+0x464>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d022      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a5f      	ldr	r2, [pc, #380]	; (800a3bc <HAL_DMA_Abort+0x468>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d01d      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a5e      	ldr	r2, [pc, #376]	; (800a3c0 <HAL_DMA_Abort+0x46c>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d018      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a5c      	ldr	r2, [pc, #368]	; (800a3c4 <HAL_DMA_Abort+0x470>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d013      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a5b      	ldr	r2, [pc, #364]	; (800a3c8 <HAL_DMA_Abort+0x474>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d00e      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a59      	ldr	r2, [pc, #356]	; (800a3cc <HAL_DMA_Abort+0x478>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d009      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a58      	ldr	r2, [pc, #352]	; (800a3d0 <HAL_DMA_Abort+0x47c>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d004      	beq.n	800a27e <HAL_DMA_Abort+0x32a>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a56      	ldr	r2, [pc, #344]	; (800a3d4 <HAL_DMA_Abort+0x480>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d108      	bne.n	800a290 <HAL_DMA_Abort+0x33c>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f022 0201 	bic.w	r2, r2, #1
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	e007      	b.n	800a2a0 <HAL_DMA_Abort+0x34c>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f022 0201 	bic.w	r2, r2, #1
 800a29e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a2a0:	e013      	b.n	800a2ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a2a2:	f7fc fe71 	bl	8006f88 <HAL_GetTick>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	2b05      	cmp	r3, #5
 800a2ae:	d90c      	bls.n	800a2ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2203      	movs	r2, #3
 800a2ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e12d      	b.n	800a526 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1e5      	bne.n	800a2a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a2f      	ldr	r2, [pc, #188]	; (800a398 <HAL_DMA_Abort+0x444>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d04a      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a2d      	ldr	r2, [pc, #180]	; (800a39c <HAL_DMA_Abort+0x448>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d045      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a2c      	ldr	r2, [pc, #176]	; (800a3a0 <HAL_DMA_Abort+0x44c>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d040      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a2a      	ldr	r2, [pc, #168]	; (800a3a4 <HAL_DMA_Abort+0x450>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d03b      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a29      	ldr	r2, [pc, #164]	; (800a3a8 <HAL_DMA_Abort+0x454>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d036      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a27      	ldr	r2, [pc, #156]	; (800a3ac <HAL_DMA_Abort+0x458>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d031      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a26      	ldr	r2, [pc, #152]	; (800a3b0 <HAL_DMA_Abort+0x45c>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d02c      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a24      	ldr	r2, [pc, #144]	; (800a3b4 <HAL_DMA_Abort+0x460>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d027      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a23      	ldr	r2, [pc, #140]	; (800a3b8 <HAL_DMA_Abort+0x464>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d022      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a21      	ldr	r2, [pc, #132]	; (800a3bc <HAL_DMA_Abort+0x468>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d01d      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a20      	ldr	r2, [pc, #128]	; (800a3c0 <HAL_DMA_Abort+0x46c>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d018      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a1e      	ldr	r2, [pc, #120]	; (800a3c4 <HAL_DMA_Abort+0x470>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d013      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a1d      	ldr	r2, [pc, #116]	; (800a3c8 <HAL_DMA_Abort+0x474>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d00e      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a1b      	ldr	r2, [pc, #108]	; (800a3cc <HAL_DMA_Abort+0x478>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d009      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a1a      	ldr	r2, [pc, #104]	; (800a3d0 <HAL_DMA_Abort+0x47c>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d004      	beq.n	800a376 <HAL_DMA_Abort+0x422>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a18      	ldr	r2, [pc, #96]	; (800a3d4 <HAL_DMA_Abort+0x480>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d101      	bne.n	800a37a <HAL_DMA_Abort+0x426>
 800a376:	2301      	movs	r3, #1
 800a378:	e000      	b.n	800a37c <HAL_DMA_Abort+0x428>
 800a37a:	2300      	movs	r3, #0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d02b      	beq.n	800a3d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a384:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a38a:	f003 031f 	and.w	r3, r3, #31
 800a38e:	223f      	movs	r2, #63	; 0x3f
 800a390:	409a      	lsls	r2, r3
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	609a      	str	r2, [r3, #8]
 800a396:	e02a      	b.n	800a3ee <HAL_DMA_Abort+0x49a>
 800a398:	40020010 	.word	0x40020010
 800a39c:	40020028 	.word	0x40020028
 800a3a0:	40020040 	.word	0x40020040
 800a3a4:	40020058 	.word	0x40020058
 800a3a8:	40020070 	.word	0x40020070
 800a3ac:	40020088 	.word	0x40020088
 800a3b0:	400200a0 	.word	0x400200a0
 800a3b4:	400200b8 	.word	0x400200b8
 800a3b8:	40020410 	.word	0x40020410
 800a3bc:	40020428 	.word	0x40020428
 800a3c0:	40020440 	.word	0x40020440
 800a3c4:	40020458 	.word	0x40020458
 800a3c8:	40020470 	.word	0x40020470
 800a3cc:	40020488 	.word	0x40020488
 800a3d0:	400204a0 	.word	0x400204a0
 800a3d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3e2:	f003 031f 	and.w	r3, r3, #31
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	409a      	lsls	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a4f      	ldr	r2, [pc, #316]	; (800a530 <HAL_DMA_Abort+0x5dc>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d072      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a4d      	ldr	r2, [pc, #308]	; (800a534 <HAL_DMA_Abort+0x5e0>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d06d      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a4c      	ldr	r2, [pc, #304]	; (800a538 <HAL_DMA_Abort+0x5e4>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d068      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a4a      	ldr	r2, [pc, #296]	; (800a53c <HAL_DMA_Abort+0x5e8>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d063      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a49      	ldr	r2, [pc, #292]	; (800a540 <HAL_DMA_Abort+0x5ec>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d05e      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a47      	ldr	r2, [pc, #284]	; (800a544 <HAL_DMA_Abort+0x5f0>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d059      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a46      	ldr	r2, [pc, #280]	; (800a548 <HAL_DMA_Abort+0x5f4>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d054      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a44      	ldr	r2, [pc, #272]	; (800a54c <HAL_DMA_Abort+0x5f8>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d04f      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a43      	ldr	r2, [pc, #268]	; (800a550 <HAL_DMA_Abort+0x5fc>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d04a      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a41      	ldr	r2, [pc, #260]	; (800a554 <HAL_DMA_Abort+0x600>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d045      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a40      	ldr	r2, [pc, #256]	; (800a558 <HAL_DMA_Abort+0x604>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d040      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a3e      	ldr	r2, [pc, #248]	; (800a55c <HAL_DMA_Abort+0x608>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d03b      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a3d      	ldr	r2, [pc, #244]	; (800a560 <HAL_DMA_Abort+0x60c>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d036      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a3b      	ldr	r2, [pc, #236]	; (800a564 <HAL_DMA_Abort+0x610>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d031      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a3a      	ldr	r2, [pc, #232]	; (800a568 <HAL_DMA_Abort+0x614>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d02c      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a38      	ldr	r2, [pc, #224]	; (800a56c <HAL_DMA_Abort+0x618>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d027      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a37      	ldr	r2, [pc, #220]	; (800a570 <HAL_DMA_Abort+0x61c>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d022      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a35      	ldr	r2, [pc, #212]	; (800a574 <HAL_DMA_Abort+0x620>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d01d      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a34      	ldr	r2, [pc, #208]	; (800a578 <HAL_DMA_Abort+0x624>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d018      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a32      	ldr	r2, [pc, #200]	; (800a57c <HAL_DMA_Abort+0x628>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d013      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a31      	ldr	r2, [pc, #196]	; (800a580 <HAL_DMA_Abort+0x62c>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d00e      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a2f      	ldr	r2, [pc, #188]	; (800a584 <HAL_DMA_Abort+0x630>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d009      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a2e      	ldr	r2, [pc, #184]	; (800a588 <HAL_DMA_Abort+0x634>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d004      	beq.n	800a4de <HAL_DMA_Abort+0x58a>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a2c      	ldr	r2, [pc, #176]	; (800a58c <HAL_DMA_Abort+0x638>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d101      	bne.n	800a4e2 <HAL_DMA_Abort+0x58e>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e000      	b.n	800a4e4 <HAL_DMA_Abort+0x590>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d015      	beq.n	800a514 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a4f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00c      	beq.n	800a514 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a508:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a512:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3718      	adds	r7, #24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	40020010 	.word	0x40020010
 800a534:	40020028 	.word	0x40020028
 800a538:	40020040 	.word	0x40020040
 800a53c:	40020058 	.word	0x40020058
 800a540:	40020070 	.word	0x40020070
 800a544:	40020088 	.word	0x40020088
 800a548:	400200a0 	.word	0x400200a0
 800a54c:	400200b8 	.word	0x400200b8
 800a550:	40020410 	.word	0x40020410
 800a554:	40020428 	.word	0x40020428
 800a558:	40020440 	.word	0x40020440
 800a55c:	40020458 	.word	0x40020458
 800a560:	40020470 	.word	0x40020470
 800a564:	40020488 	.word	0x40020488
 800a568:	400204a0 	.word	0x400204a0
 800a56c:	400204b8 	.word	0x400204b8
 800a570:	58025408 	.word	0x58025408
 800a574:	5802541c 	.word	0x5802541c
 800a578:	58025430 	.word	0x58025430
 800a57c:	58025444 	.word	0x58025444
 800a580:	58025458 	.word	0x58025458
 800a584:	5802546c 	.word	0x5802546c
 800a588:	58025480 	.word	0x58025480
 800a58c:	58025494 	.word	0x58025494

0800a590 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e237      	b.n	800aa12 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d004      	beq.n	800a5b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2280      	movs	r2, #128	; 0x80
 800a5b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e22c      	b.n	800aa12 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a5c      	ldr	r2, [pc, #368]	; (800a730 <HAL_DMA_Abort_IT+0x1a0>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d04a      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a5b      	ldr	r2, [pc, #364]	; (800a734 <HAL_DMA_Abort_IT+0x1a4>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d045      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a59      	ldr	r2, [pc, #356]	; (800a738 <HAL_DMA_Abort_IT+0x1a8>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d040      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a58      	ldr	r2, [pc, #352]	; (800a73c <HAL_DMA_Abort_IT+0x1ac>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d03b      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a56      	ldr	r2, [pc, #344]	; (800a740 <HAL_DMA_Abort_IT+0x1b0>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d036      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a55      	ldr	r2, [pc, #340]	; (800a744 <HAL_DMA_Abort_IT+0x1b4>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d031      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a53      	ldr	r2, [pc, #332]	; (800a748 <HAL_DMA_Abort_IT+0x1b8>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d02c      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a52      	ldr	r2, [pc, #328]	; (800a74c <HAL_DMA_Abort_IT+0x1bc>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d027      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a50      	ldr	r2, [pc, #320]	; (800a750 <HAL_DMA_Abort_IT+0x1c0>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d022      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a4f      	ldr	r2, [pc, #316]	; (800a754 <HAL_DMA_Abort_IT+0x1c4>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d01d      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a4d      	ldr	r2, [pc, #308]	; (800a758 <HAL_DMA_Abort_IT+0x1c8>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d018      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a4c      	ldr	r2, [pc, #304]	; (800a75c <HAL_DMA_Abort_IT+0x1cc>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d013      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a4a      	ldr	r2, [pc, #296]	; (800a760 <HAL_DMA_Abort_IT+0x1d0>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d00e      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a49      	ldr	r2, [pc, #292]	; (800a764 <HAL_DMA_Abort_IT+0x1d4>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d009      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a47      	ldr	r2, [pc, #284]	; (800a768 <HAL_DMA_Abort_IT+0x1d8>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d004      	beq.n	800a658 <HAL_DMA_Abort_IT+0xc8>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a46      	ldr	r2, [pc, #280]	; (800a76c <HAL_DMA_Abort_IT+0x1dc>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d101      	bne.n	800a65c <HAL_DMA_Abort_IT+0xcc>
 800a658:	2301      	movs	r3, #1
 800a65a:	e000      	b.n	800a65e <HAL_DMA_Abort_IT+0xce>
 800a65c:	2300      	movs	r3, #0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 8086 	beq.w	800a770 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2204      	movs	r2, #4
 800a668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a2f      	ldr	r2, [pc, #188]	; (800a730 <HAL_DMA_Abort_IT+0x1a0>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d04a      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a2e      	ldr	r2, [pc, #184]	; (800a734 <HAL_DMA_Abort_IT+0x1a4>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d045      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a2c      	ldr	r2, [pc, #176]	; (800a738 <HAL_DMA_Abort_IT+0x1a8>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d040      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a2b      	ldr	r2, [pc, #172]	; (800a73c <HAL_DMA_Abort_IT+0x1ac>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d03b      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a29      	ldr	r2, [pc, #164]	; (800a740 <HAL_DMA_Abort_IT+0x1b0>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d036      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a28      	ldr	r2, [pc, #160]	; (800a744 <HAL_DMA_Abort_IT+0x1b4>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d031      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a26      	ldr	r2, [pc, #152]	; (800a748 <HAL_DMA_Abort_IT+0x1b8>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d02c      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a25      	ldr	r2, [pc, #148]	; (800a74c <HAL_DMA_Abort_IT+0x1bc>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d027      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a23      	ldr	r2, [pc, #140]	; (800a750 <HAL_DMA_Abort_IT+0x1c0>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d022      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a22      	ldr	r2, [pc, #136]	; (800a754 <HAL_DMA_Abort_IT+0x1c4>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d01d      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a20      	ldr	r2, [pc, #128]	; (800a758 <HAL_DMA_Abort_IT+0x1c8>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d018      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a1f      	ldr	r2, [pc, #124]	; (800a75c <HAL_DMA_Abort_IT+0x1cc>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d013      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a1d      	ldr	r2, [pc, #116]	; (800a760 <HAL_DMA_Abort_IT+0x1d0>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d00e      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a1c      	ldr	r2, [pc, #112]	; (800a764 <HAL_DMA_Abort_IT+0x1d4>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d009      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a1a      	ldr	r2, [pc, #104]	; (800a768 <HAL_DMA_Abort_IT+0x1d8>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d004      	beq.n	800a70c <HAL_DMA_Abort_IT+0x17c>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a19      	ldr	r2, [pc, #100]	; (800a76c <HAL_DMA_Abort_IT+0x1dc>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d108      	bne.n	800a71e <HAL_DMA_Abort_IT+0x18e>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f022 0201 	bic.w	r2, r2, #1
 800a71a:	601a      	str	r2, [r3, #0]
 800a71c:	e178      	b.n	800aa10 <HAL_DMA_Abort_IT+0x480>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f022 0201 	bic.w	r2, r2, #1
 800a72c:	601a      	str	r2, [r3, #0]
 800a72e:	e16f      	b.n	800aa10 <HAL_DMA_Abort_IT+0x480>
 800a730:	40020010 	.word	0x40020010
 800a734:	40020028 	.word	0x40020028
 800a738:	40020040 	.word	0x40020040
 800a73c:	40020058 	.word	0x40020058
 800a740:	40020070 	.word	0x40020070
 800a744:	40020088 	.word	0x40020088
 800a748:	400200a0 	.word	0x400200a0
 800a74c:	400200b8 	.word	0x400200b8
 800a750:	40020410 	.word	0x40020410
 800a754:	40020428 	.word	0x40020428
 800a758:	40020440 	.word	0x40020440
 800a75c:	40020458 	.word	0x40020458
 800a760:	40020470 	.word	0x40020470
 800a764:	40020488 	.word	0x40020488
 800a768:	400204a0 	.word	0x400204a0
 800a76c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f022 020e 	bic.w	r2, r2, #14
 800a77e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a6c      	ldr	r2, [pc, #432]	; (800a938 <HAL_DMA_Abort_IT+0x3a8>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d04a      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a6b      	ldr	r2, [pc, #428]	; (800a93c <HAL_DMA_Abort_IT+0x3ac>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d045      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a69      	ldr	r2, [pc, #420]	; (800a940 <HAL_DMA_Abort_IT+0x3b0>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d040      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a68      	ldr	r2, [pc, #416]	; (800a944 <HAL_DMA_Abort_IT+0x3b4>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d03b      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a66      	ldr	r2, [pc, #408]	; (800a948 <HAL_DMA_Abort_IT+0x3b8>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d036      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a65      	ldr	r2, [pc, #404]	; (800a94c <HAL_DMA_Abort_IT+0x3bc>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d031      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a63      	ldr	r2, [pc, #396]	; (800a950 <HAL_DMA_Abort_IT+0x3c0>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d02c      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a62      	ldr	r2, [pc, #392]	; (800a954 <HAL_DMA_Abort_IT+0x3c4>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d027      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a60      	ldr	r2, [pc, #384]	; (800a958 <HAL_DMA_Abort_IT+0x3c8>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d022      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a5f      	ldr	r2, [pc, #380]	; (800a95c <HAL_DMA_Abort_IT+0x3cc>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d01d      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a5d      	ldr	r2, [pc, #372]	; (800a960 <HAL_DMA_Abort_IT+0x3d0>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d018      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a5c      	ldr	r2, [pc, #368]	; (800a964 <HAL_DMA_Abort_IT+0x3d4>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d013      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a5a      	ldr	r2, [pc, #360]	; (800a968 <HAL_DMA_Abort_IT+0x3d8>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d00e      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a59      	ldr	r2, [pc, #356]	; (800a96c <HAL_DMA_Abort_IT+0x3dc>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d009      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a57      	ldr	r2, [pc, #348]	; (800a970 <HAL_DMA_Abort_IT+0x3e0>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d004      	beq.n	800a820 <HAL_DMA_Abort_IT+0x290>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a56      	ldr	r2, [pc, #344]	; (800a974 <HAL_DMA_Abort_IT+0x3e4>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d108      	bne.n	800a832 <HAL_DMA_Abort_IT+0x2a2>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f022 0201 	bic.w	r2, r2, #1
 800a82e:	601a      	str	r2, [r3, #0]
 800a830:	e007      	b.n	800a842 <HAL_DMA_Abort_IT+0x2b2>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f022 0201 	bic.w	r2, r2, #1
 800a840:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a3c      	ldr	r2, [pc, #240]	; (800a938 <HAL_DMA_Abort_IT+0x3a8>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d072      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a3a      	ldr	r2, [pc, #232]	; (800a93c <HAL_DMA_Abort_IT+0x3ac>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d06d      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a39      	ldr	r2, [pc, #228]	; (800a940 <HAL_DMA_Abort_IT+0x3b0>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d068      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a37      	ldr	r2, [pc, #220]	; (800a944 <HAL_DMA_Abort_IT+0x3b4>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d063      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a36      	ldr	r2, [pc, #216]	; (800a948 <HAL_DMA_Abort_IT+0x3b8>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d05e      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a34      	ldr	r2, [pc, #208]	; (800a94c <HAL_DMA_Abort_IT+0x3bc>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d059      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a33      	ldr	r2, [pc, #204]	; (800a950 <HAL_DMA_Abort_IT+0x3c0>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d054      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a31      	ldr	r2, [pc, #196]	; (800a954 <HAL_DMA_Abort_IT+0x3c4>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d04f      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a30      	ldr	r2, [pc, #192]	; (800a958 <HAL_DMA_Abort_IT+0x3c8>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d04a      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a2e      	ldr	r2, [pc, #184]	; (800a95c <HAL_DMA_Abort_IT+0x3cc>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d045      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a2d      	ldr	r2, [pc, #180]	; (800a960 <HAL_DMA_Abort_IT+0x3d0>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d040      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a2b      	ldr	r2, [pc, #172]	; (800a964 <HAL_DMA_Abort_IT+0x3d4>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d03b      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a2a      	ldr	r2, [pc, #168]	; (800a968 <HAL_DMA_Abort_IT+0x3d8>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d036      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a28      	ldr	r2, [pc, #160]	; (800a96c <HAL_DMA_Abort_IT+0x3dc>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d031      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a27      	ldr	r2, [pc, #156]	; (800a970 <HAL_DMA_Abort_IT+0x3e0>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d02c      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a25      	ldr	r2, [pc, #148]	; (800a974 <HAL_DMA_Abort_IT+0x3e4>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d027      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a24      	ldr	r2, [pc, #144]	; (800a978 <HAL_DMA_Abort_IT+0x3e8>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d022      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a22      	ldr	r2, [pc, #136]	; (800a97c <HAL_DMA_Abort_IT+0x3ec>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d01d      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a21      	ldr	r2, [pc, #132]	; (800a980 <HAL_DMA_Abort_IT+0x3f0>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d018      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a1f      	ldr	r2, [pc, #124]	; (800a984 <HAL_DMA_Abort_IT+0x3f4>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d013      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a1e      	ldr	r2, [pc, #120]	; (800a988 <HAL_DMA_Abort_IT+0x3f8>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d00e      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a1c      	ldr	r2, [pc, #112]	; (800a98c <HAL_DMA_Abort_IT+0x3fc>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d009      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a1b      	ldr	r2, [pc, #108]	; (800a990 <HAL_DMA_Abort_IT+0x400>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d004      	beq.n	800a932 <HAL_DMA_Abort_IT+0x3a2>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a19      	ldr	r2, [pc, #100]	; (800a994 <HAL_DMA_Abort_IT+0x404>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d132      	bne.n	800a998 <HAL_DMA_Abort_IT+0x408>
 800a932:	2301      	movs	r3, #1
 800a934:	e031      	b.n	800a99a <HAL_DMA_Abort_IT+0x40a>
 800a936:	bf00      	nop
 800a938:	40020010 	.word	0x40020010
 800a93c:	40020028 	.word	0x40020028
 800a940:	40020040 	.word	0x40020040
 800a944:	40020058 	.word	0x40020058
 800a948:	40020070 	.word	0x40020070
 800a94c:	40020088 	.word	0x40020088
 800a950:	400200a0 	.word	0x400200a0
 800a954:	400200b8 	.word	0x400200b8
 800a958:	40020410 	.word	0x40020410
 800a95c:	40020428 	.word	0x40020428
 800a960:	40020440 	.word	0x40020440
 800a964:	40020458 	.word	0x40020458
 800a968:	40020470 	.word	0x40020470
 800a96c:	40020488 	.word	0x40020488
 800a970:	400204a0 	.word	0x400204a0
 800a974:	400204b8 	.word	0x400204b8
 800a978:	58025408 	.word	0x58025408
 800a97c:	5802541c 	.word	0x5802541c
 800a980:	58025430 	.word	0x58025430
 800a984:	58025444 	.word	0x58025444
 800a988:	58025458 	.word	0x58025458
 800a98c:	5802546c 	.word	0x5802546c
 800a990:	58025480 	.word	0x58025480
 800a994:	58025494 	.word	0x58025494
 800a998:	2300      	movs	r3, #0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d028      	beq.n	800a9f0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a9ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9b8:	f003 031f 	and.w	r3, r3, #31
 800a9bc:	2201      	movs	r2, #1
 800a9be:	409a      	lsls	r2, r3
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a9cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00c      	beq.n	800a9f0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a9e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a9ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d003      	beq.n	800aa10 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop

0800aa1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08a      	sub	sp, #40	; 0x28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800aa24:	2300      	movs	r3, #0
 800aa26:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aa28:	4b67      	ldr	r3, [pc, #412]	; (800abc8 <HAL_DMA_IRQHandler+0x1ac>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a67      	ldr	r2, [pc, #412]	; (800abcc <HAL_DMA_IRQHandler+0x1b0>)
 800aa2e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa32:	0a9b      	lsrs	r3, r3, #10
 800aa34:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa3a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa40:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800aa42:	6a3b      	ldr	r3, [r7, #32]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a5f      	ldr	r2, [pc, #380]	; (800abd0 <HAL_DMA_IRQHandler+0x1b4>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d04a      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a5d      	ldr	r2, [pc, #372]	; (800abd4 <HAL_DMA_IRQHandler+0x1b8>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d045      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a5c      	ldr	r2, [pc, #368]	; (800abd8 <HAL_DMA_IRQHandler+0x1bc>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d040      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a5a      	ldr	r2, [pc, #360]	; (800abdc <HAL_DMA_IRQHandler+0x1c0>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d03b      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a59      	ldr	r2, [pc, #356]	; (800abe0 <HAL_DMA_IRQHandler+0x1c4>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d036      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a57      	ldr	r2, [pc, #348]	; (800abe4 <HAL_DMA_IRQHandler+0x1c8>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d031      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a56      	ldr	r2, [pc, #344]	; (800abe8 <HAL_DMA_IRQHandler+0x1cc>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d02c      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a54      	ldr	r2, [pc, #336]	; (800abec <HAL_DMA_IRQHandler+0x1d0>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d027      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a53      	ldr	r2, [pc, #332]	; (800abf0 <HAL_DMA_IRQHandler+0x1d4>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d022      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a51      	ldr	r2, [pc, #324]	; (800abf4 <HAL_DMA_IRQHandler+0x1d8>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d01d      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a50      	ldr	r2, [pc, #320]	; (800abf8 <HAL_DMA_IRQHandler+0x1dc>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d018      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a4e      	ldr	r2, [pc, #312]	; (800abfc <HAL_DMA_IRQHandler+0x1e0>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d013      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a4d      	ldr	r2, [pc, #308]	; (800ac00 <HAL_DMA_IRQHandler+0x1e4>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d00e      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a4b      	ldr	r2, [pc, #300]	; (800ac04 <HAL_DMA_IRQHandler+0x1e8>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d009      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a4a      	ldr	r2, [pc, #296]	; (800ac08 <HAL_DMA_IRQHandler+0x1ec>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d004      	beq.n	800aaee <HAL_DMA_IRQHandler+0xd2>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a48      	ldr	r2, [pc, #288]	; (800ac0c <HAL_DMA_IRQHandler+0x1f0>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d101      	bne.n	800aaf2 <HAL_DMA_IRQHandler+0xd6>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e000      	b.n	800aaf4 <HAL_DMA_IRQHandler+0xd8>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 842b 	beq.w	800b350 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aafe:	f003 031f 	and.w	r3, r3, #31
 800ab02:	2208      	movs	r2, #8
 800ab04:	409a      	lsls	r2, r3
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	4013      	ands	r3, r2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f000 80a2 	beq.w	800ac54 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a2e      	ldr	r2, [pc, #184]	; (800abd0 <HAL_DMA_IRQHandler+0x1b4>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d04a      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a2d      	ldr	r2, [pc, #180]	; (800abd4 <HAL_DMA_IRQHandler+0x1b8>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d045      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a2b      	ldr	r2, [pc, #172]	; (800abd8 <HAL_DMA_IRQHandler+0x1bc>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d040      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a2a      	ldr	r2, [pc, #168]	; (800abdc <HAL_DMA_IRQHandler+0x1c0>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d03b      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a28      	ldr	r2, [pc, #160]	; (800abe0 <HAL_DMA_IRQHandler+0x1c4>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d036      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a27      	ldr	r2, [pc, #156]	; (800abe4 <HAL_DMA_IRQHandler+0x1c8>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d031      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a25      	ldr	r2, [pc, #148]	; (800abe8 <HAL_DMA_IRQHandler+0x1cc>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d02c      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a24      	ldr	r2, [pc, #144]	; (800abec <HAL_DMA_IRQHandler+0x1d0>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d027      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a22      	ldr	r2, [pc, #136]	; (800abf0 <HAL_DMA_IRQHandler+0x1d4>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d022      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a21      	ldr	r2, [pc, #132]	; (800abf4 <HAL_DMA_IRQHandler+0x1d8>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d01d      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a1f      	ldr	r2, [pc, #124]	; (800abf8 <HAL_DMA_IRQHandler+0x1dc>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d018      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a1e      	ldr	r2, [pc, #120]	; (800abfc <HAL_DMA_IRQHandler+0x1e0>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d013      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a1c      	ldr	r2, [pc, #112]	; (800ac00 <HAL_DMA_IRQHandler+0x1e4>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d00e      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a1b      	ldr	r2, [pc, #108]	; (800ac04 <HAL_DMA_IRQHandler+0x1e8>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d009      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a19      	ldr	r2, [pc, #100]	; (800ac08 <HAL_DMA_IRQHandler+0x1ec>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d004      	beq.n	800abb0 <HAL_DMA_IRQHandler+0x194>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a18      	ldr	r2, [pc, #96]	; (800ac0c <HAL_DMA_IRQHandler+0x1f0>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d12f      	bne.n	800ac10 <HAL_DMA_IRQHandler+0x1f4>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 0304 	and.w	r3, r3, #4
 800abba:	2b00      	cmp	r3, #0
 800abbc:	bf14      	ite	ne
 800abbe:	2301      	movne	r3, #1
 800abc0:	2300      	moveq	r3, #0
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	e02e      	b.n	800ac24 <HAL_DMA_IRQHandler+0x208>
 800abc6:	bf00      	nop
 800abc8:	20000020 	.word	0x20000020
 800abcc:	1b4e81b5 	.word	0x1b4e81b5
 800abd0:	40020010 	.word	0x40020010
 800abd4:	40020028 	.word	0x40020028
 800abd8:	40020040 	.word	0x40020040
 800abdc:	40020058 	.word	0x40020058
 800abe0:	40020070 	.word	0x40020070
 800abe4:	40020088 	.word	0x40020088
 800abe8:	400200a0 	.word	0x400200a0
 800abec:	400200b8 	.word	0x400200b8
 800abf0:	40020410 	.word	0x40020410
 800abf4:	40020428 	.word	0x40020428
 800abf8:	40020440 	.word	0x40020440
 800abfc:	40020458 	.word	0x40020458
 800ac00:	40020470 	.word	0x40020470
 800ac04:	40020488 	.word	0x40020488
 800ac08:	400204a0 	.word	0x400204a0
 800ac0c:	400204b8 	.word	0x400204b8
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 0308 	and.w	r3, r3, #8
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	bf14      	ite	ne
 800ac1e:	2301      	movne	r3, #1
 800ac20:	2300      	moveq	r3, #0
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d015      	beq.n	800ac54 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f022 0204 	bic.w	r2, r2, #4
 800ac36:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac3c:	f003 031f 	and.w	r3, r3, #31
 800ac40:	2208      	movs	r2, #8
 800ac42:	409a      	lsls	r2, r3
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac4c:	f043 0201 	orr.w	r2, r3, #1
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac58:	f003 031f 	and.w	r3, r3, #31
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d06e      	beq.n	800ad48 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a69      	ldr	r2, [pc, #420]	; (800ae14 <HAL_DMA_IRQHandler+0x3f8>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d04a      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a67      	ldr	r2, [pc, #412]	; (800ae18 <HAL_DMA_IRQHandler+0x3fc>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d045      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a66      	ldr	r2, [pc, #408]	; (800ae1c <HAL_DMA_IRQHandler+0x400>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d040      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a64      	ldr	r2, [pc, #400]	; (800ae20 <HAL_DMA_IRQHandler+0x404>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d03b      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a63      	ldr	r2, [pc, #396]	; (800ae24 <HAL_DMA_IRQHandler+0x408>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d036      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a61      	ldr	r2, [pc, #388]	; (800ae28 <HAL_DMA_IRQHandler+0x40c>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d031      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a60      	ldr	r2, [pc, #384]	; (800ae2c <HAL_DMA_IRQHandler+0x410>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d02c      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a5e      	ldr	r2, [pc, #376]	; (800ae30 <HAL_DMA_IRQHandler+0x414>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d027      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a5d      	ldr	r2, [pc, #372]	; (800ae34 <HAL_DMA_IRQHandler+0x418>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d022      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a5b      	ldr	r2, [pc, #364]	; (800ae38 <HAL_DMA_IRQHandler+0x41c>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d01d      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a5a      	ldr	r2, [pc, #360]	; (800ae3c <HAL_DMA_IRQHandler+0x420>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d018      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a58      	ldr	r2, [pc, #352]	; (800ae40 <HAL_DMA_IRQHandler+0x424>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d013      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a57      	ldr	r2, [pc, #348]	; (800ae44 <HAL_DMA_IRQHandler+0x428>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d00e      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a55      	ldr	r2, [pc, #340]	; (800ae48 <HAL_DMA_IRQHandler+0x42c>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d009      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a54      	ldr	r2, [pc, #336]	; (800ae4c <HAL_DMA_IRQHandler+0x430>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d004      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x2ee>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a52      	ldr	r2, [pc, #328]	; (800ae50 <HAL_DMA_IRQHandler+0x434>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d10a      	bne.n	800ad20 <HAL_DMA_IRQHandler+0x304>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	bf14      	ite	ne
 800ad18:	2301      	movne	r3, #1
 800ad1a:	2300      	moveq	r3, #0
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	e003      	b.n	800ad28 <HAL_DMA_IRQHandler+0x30c>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2300      	movs	r3, #0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00d      	beq.n	800ad48 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad30:	f003 031f 	and.w	r3, r3, #31
 800ad34:	2201      	movs	r2, #1
 800ad36:	409a      	lsls	r2, r3
 800ad38:	6a3b      	ldr	r3, [r7, #32]
 800ad3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad40:	f043 0202 	orr.w	r2, r3, #2
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad4c:	f003 031f 	and.w	r3, r3, #31
 800ad50:	2204      	movs	r2, #4
 800ad52:	409a      	lsls	r2, r3
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	4013      	ands	r3, r2
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f000 808f 	beq.w	800ae7c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a2c      	ldr	r2, [pc, #176]	; (800ae14 <HAL_DMA_IRQHandler+0x3f8>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d04a      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a2a      	ldr	r2, [pc, #168]	; (800ae18 <HAL_DMA_IRQHandler+0x3fc>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d045      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a29      	ldr	r2, [pc, #164]	; (800ae1c <HAL_DMA_IRQHandler+0x400>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d040      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a27      	ldr	r2, [pc, #156]	; (800ae20 <HAL_DMA_IRQHandler+0x404>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d03b      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a26      	ldr	r2, [pc, #152]	; (800ae24 <HAL_DMA_IRQHandler+0x408>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d036      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a24      	ldr	r2, [pc, #144]	; (800ae28 <HAL_DMA_IRQHandler+0x40c>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d031      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a23      	ldr	r2, [pc, #140]	; (800ae2c <HAL_DMA_IRQHandler+0x410>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d02c      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a21      	ldr	r2, [pc, #132]	; (800ae30 <HAL_DMA_IRQHandler+0x414>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d027      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a20      	ldr	r2, [pc, #128]	; (800ae34 <HAL_DMA_IRQHandler+0x418>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d022      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a1e      	ldr	r2, [pc, #120]	; (800ae38 <HAL_DMA_IRQHandler+0x41c>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d01d      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a1d      	ldr	r2, [pc, #116]	; (800ae3c <HAL_DMA_IRQHandler+0x420>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d018      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a1b      	ldr	r2, [pc, #108]	; (800ae40 <HAL_DMA_IRQHandler+0x424>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d013      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a1a      	ldr	r2, [pc, #104]	; (800ae44 <HAL_DMA_IRQHandler+0x428>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d00e      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a18      	ldr	r2, [pc, #96]	; (800ae48 <HAL_DMA_IRQHandler+0x42c>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d009      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a17      	ldr	r2, [pc, #92]	; (800ae4c <HAL_DMA_IRQHandler+0x430>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d004      	beq.n	800adfe <HAL_DMA_IRQHandler+0x3e2>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a15      	ldr	r2, [pc, #84]	; (800ae50 <HAL_DMA_IRQHandler+0x434>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d12a      	bne.n	800ae54 <HAL_DMA_IRQHandler+0x438>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 0302 	and.w	r3, r3, #2
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bf14      	ite	ne
 800ae0c:	2301      	movne	r3, #1
 800ae0e:	2300      	moveq	r3, #0
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	e023      	b.n	800ae5c <HAL_DMA_IRQHandler+0x440>
 800ae14:	40020010 	.word	0x40020010
 800ae18:	40020028 	.word	0x40020028
 800ae1c:	40020040 	.word	0x40020040
 800ae20:	40020058 	.word	0x40020058
 800ae24:	40020070 	.word	0x40020070
 800ae28:	40020088 	.word	0x40020088
 800ae2c:	400200a0 	.word	0x400200a0
 800ae30:	400200b8 	.word	0x400200b8
 800ae34:	40020410 	.word	0x40020410
 800ae38:	40020428 	.word	0x40020428
 800ae3c:	40020440 	.word	0x40020440
 800ae40:	40020458 	.word	0x40020458
 800ae44:	40020470 	.word	0x40020470
 800ae48:	40020488 	.word	0x40020488
 800ae4c:	400204a0 	.word	0x400204a0
 800ae50:	400204b8 	.word	0x400204b8
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00d      	beq.n	800ae7c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae64:	f003 031f 	and.w	r3, r3, #31
 800ae68:	2204      	movs	r2, #4
 800ae6a:	409a      	lsls	r2, r3
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae74:	f043 0204 	orr.w	r2, r3, #4
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae80:	f003 031f 	and.w	r3, r3, #31
 800ae84:	2210      	movs	r2, #16
 800ae86:	409a      	lsls	r2, r3
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f000 80a6 	beq.w	800afde <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a85      	ldr	r2, [pc, #532]	; (800b0ac <HAL_DMA_IRQHandler+0x690>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d04a      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a83      	ldr	r2, [pc, #524]	; (800b0b0 <HAL_DMA_IRQHandler+0x694>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d045      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a82      	ldr	r2, [pc, #520]	; (800b0b4 <HAL_DMA_IRQHandler+0x698>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d040      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a80      	ldr	r2, [pc, #512]	; (800b0b8 <HAL_DMA_IRQHandler+0x69c>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d03b      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a7f      	ldr	r2, [pc, #508]	; (800b0bc <HAL_DMA_IRQHandler+0x6a0>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d036      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a7d      	ldr	r2, [pc, #500]	; (800b0c0 <HAL_DMA_IRQHandler+0x6a4>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d031      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a7c      	ldr	r2, [pc, #496]	; (800b0c4 <HAL_DMA_IRQHandler+0x6a8>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d02c      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a7a      	ldr	r2, [pc, #488]	; (800b0c8 <HAL_DMA_IRQHandler+0x6ac>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d027      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a79      	ldr	r2, [pc, #484]	; (800b0cc <HAL_DMA_IRQHandler+0x6b0>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d022      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a77      	ldr	r2, [pc, #476]	; (800b0d0 <HAL_DMA_IRQHandler+0x6b4>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d01d      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a76      	ldr	r2, [pc, #472]	; (800b0d4 <HAL_DMA_IRQHandler+0x6b8>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d018      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a74      	ldr	r2, [pc, #464]	; (800b0d8 <HAL_DMA_IRQHandler+0x6bc>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d013      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a73      	ldr	r2, [pc, #460]	; (800b0dc <HAL_DMA_IRQHandler+0x6c0>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d00e      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a71      	ldr	r2, [pc, #452]	; (800b0e0 <HAL_DMA_IRQHandler+0x6c4>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d009      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a70      	ldr	r2, [pc, #448]	; (800b0e4 <HAL_DMA_IRQHandler+0x6c8>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d004      	beq.n	800af32 <HAL_DMA_IRQHandler+0x516>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a6e      	ldr	r2, [pc, #440]	; (800b0e8 <HAL_DMA_IRQHandler+0x6cc>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d10a      	bne.n	800af48 <HAL_DMA_IRQHandler+0x52c>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 0308 	and.w	r3, r3, #8
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	bf14      	ite	ne
 800af40:	2301      	movne	r3, #1
 800af42:	2300      	moveq	r3, #0
 800af44:	b2db      	uxtb	r3, r3
 800af46:	e009      	b.n	800af5c <HAL_DMA_IRQHandler+0x540>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 0304 	and.w	r3, r3, #4
 800af52:	2b00      	cmp	r3, #0
 800af54:	bf14      	ite	ne
 800af56:	2301      	movne	r3, #1
 800af58:	2300      	moveq	r3, #0
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d03e      	beq.n	800afde <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af64:	f003 031f 	and.w	r3, r3, #31
 800af68:	2210      	movs	r2, #16
 800af6a:	409a      	lsls	r2, r3
 800af6c:	6a3b      	ldr	r3, [r7, #32]
 800af6e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d018      	beq.n	800afb0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d108      	bne.n	800af9e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af90:	2b00      	cmp	r3, #0
 800af92:	d024      	beq.n	800afde <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	4798      	blx	r3
 800af9c:	e01f      	b.n	800afde <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d01b      	beq.n	800afde <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	4798      	blx	r3
 800afae:	e016      	b.n	800afde <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d107      	bne.n	800afce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f022 0208 	bic.w	r2, r2, #8
 800afcc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d003      	beq.n	800afde <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afe2:	f003 031f 	and.w	r3, r3, #31
 800afe6:	2220      	movs	r2, #32
 800afe8:	409a      	lsls	r2, r3
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	4013      	ands	r3, r2
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f000 8110 	beq.w	800b214 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a2c      	ldr	r2, [pc, #176]	; (800b0ac <HAL_DMA_IRQHandler+0x690>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d04a      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a2b      	ldr	r2, [pc, #172]	; (800b0b0 <HAL_DMA_IRQHandler+0x694>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d045      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a29      	ldr	r2, [pc, #164]	; (800b0b4 <HAL_DMA_IRQHandler+0x698>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d040      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a28      	ldr	r2, [pc, #160]	; (800b0b8 <HAL_DMA_IRQHandler+0x69c>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d03b      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a26      	ldr	r2, [pc, #152]	; (800b0bc <HAL_DMA_IRQHandler+0x6a0>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d036      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a25      	ldr	r2, [pc, #148]	; (800b0c0 <HAL_DMA_IRQHandler+0x6a4>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d031      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a23      	ldr	r2, [pc, #140]	; (800b0c4 <HAL_DMA_IRQHandler+0x6a8>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d02c      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a22      	ldr	r2, [pc, #136]	; (800b0c8 <HAL_DMA_IRQHandler+0x6ac>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d027      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a20      	ldr	r2, [pc, #128]	; (800b0cc <HAL_DMA_IRQHandler+0x6b0>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d022      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a1f      	ldr	r2, [pc, #124]	; (800b0d0 <HAL_DMA_IRQHandler+0x6b4>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d01d      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a1d      	ldr	r2, [pc, #116]	; (800b0d4 <HAL_DMA_IRQHandler+0x6b8>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d018      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a1c      	ldr	r2, [pc, #112]	; (800b0d8 <HAL_DMA_IRQHandler+0x6bc>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d013      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a1a      	ldr	r2, [pc, #104]	; (800b0dc <HAL_DMA_IRQHandler+0x6c0>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d00e      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a19      	ldr	r2, [pc, #100]	; (800b0e0 <HAL_DMA_IRQHandler+0x6c4>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d009      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a17      	ldr	r2, [pc, #92]	; (800b0e4 <HAL_DMA_IRQHandler+0x6c8>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d004      	beq.n	800b094 <HAL_DMA_IRQHandler+0x678>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a16      	ldr	r2, [pc, #88]	; (800b0e8 <HAL_DMA_IRQHandler+0x6cc>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d12b      	bne.n	800b0ec <HAL_DMA_IRQHandler+0x6d0>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 0310 	and.w	r3, r3, #16
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	bf14      	ite	ne
 800b0a2:	2301      	movne	r3, #1
 800b0a4:	2300      	moveq	r3, #0
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	e02a      	b.n	800b100 <HAL_DMA_IRQHandler+0x6e4>
 800b0aa:	bf00      	nop
 800b0ac:	40020010 	.word	0x40020010
 800b0b0:	40020028 	.word	0x40020028
 800b0b4:	40020040 	.word	0x40020040
 800b0b8:	40020058 	.word	0x40020058
 800b0bc:	40020070 	.word	0x40020070
 800b0c0:	40020088 	.word	0x40020088
 800b0c4:	400200a0 	.word	0x400200a0
 800b0c8:	400200b8 	.word	0x400200b8
 800b0cc:	40020410 	.word	0x40020410
 800b0d0:	40020428 	.word	0x40020428
 800b0d4:	40020440 	.word	0x40020440
 800b0d8:	40020458 	.word	0x40020458
 800b0dc:	40020470 	.word	0x40020470
 800b0e0:	40020488 	.word	0x40020488
 800b0e4:	400204a0 	.word	0x400204a0
 800b0e8:	400204b8 	.word	0x400204b8
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 0302 	and.w	r3, r3, #2
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	bf14      	ite	ne
 800b0fa:	2301      	movne	r3, #1
 800b0fc:	2300      	moveq	r3, #0
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	2b00      	cmp	r3, #0
 800b102:	f000 8087 	beq.w	800b214 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b10a:	f003 031f 	and.w	r3, r3, #31
 800b10e:	2220      	movs	r2, #32
 800b110:	409a      	lsls	r2, r3
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b04      	cmp	r3, #4
 800b120:	d139      	bne.n	800b196 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f022 0216 	bic.w	r2, r2, #22
 800b130:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	695a      	ldr	r2, [r3, #20]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b140:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b146:	2b00      	cmp	r3, #0
 800b148:	d103      	bne.n	800b152 <HAL_DMA_IRQHandler+0x736>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d007      	beq.n	800b162 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f022 0208 	bic.w	r2, r2, #8
 800b160:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b166:	f003 031f 	and.w	r3, r3, #31
 800b16a:	223f      	movs	r2, #63	; 0x3f
 800b16c:	409a      	lsls	r2, r3
 800b16e:	6a3b      	ldr	r3, [r7, #32]
 800b170:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2201      	movs	r2, #1
 800b176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 834a 	beq.w	800b820 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	4798      	blx	r3
          }
          return;
 800b194:	e344      	b.n	800b820 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d018      	beq.n	800b1d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d108      	bne.n	800b1c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d02c      	beq.n	800b214 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	4798      	blx	r3
 800b1c2:	e027      	b.n	800b214 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d023      	beq.n	800b214 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	4798      	blx	r3
 800b1d4:	e01e      	b.n	800b214 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d10f      	bne.n	800b204 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f022 0210 	bic.w	r2, r2, #16
 800b1f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 8306 	beq.w	800b82a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	2b00      	cmp	r3, #0
 800b228:	f000 8088 	beq.w	800b33c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2204      	movs	r2, #4
 800b230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a7a      	ldr	r2, [pc, #488]	; (800b424 <HAL_DMA_IRQHandler+0xa08>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d04a      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a79      	ldr	r2, [pc, #484]	; (800b428 <HAL_DMA_IRQHandler+0xa0c>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d045      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a77      	ldr	r2, [pc, #476]	; (800b42c <HAL_DMA_IRQHandler+0xa10>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d040      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a76      	ldr	r2, [pc, #472]	; (800b430 <HAL_DMA_IRQHandler+0xa14>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d03b      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a74      	ldr	r2, [pc, #464]	; (800b434 <HAL_DMA_IRQHandler+0xa18>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d036      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a73      	ldr	r2, [pc, #460]	; (800b438 <HAL_DMA_IRQHandler+0xa1c>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d031      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a71      	ldr	r2, [pc, #452]	; (800b43c <HAL_DMA_IRQHandler+0xa20>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d02c      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a70      	ldr	r2, [pc, #448]	; (800b440 <HAL_DMA_IRQHandler+0xa24>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d027      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a6e      	ldr	r2, [pc, #440]	; (800b444 <HAL_DMA_IRQHandler+0xa28>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d022      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a6d      	ldr	r2, [pc, #436]	; (800b448 <HAL_DMA_IRQHandler+0xa2c>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d01d      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a6b      	ldr	r2, [pc, #428]	; (800b44c <HAL_DMA_IRQHandler+0xa30>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d018      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a6a      	ldr	r2, [pc, #424]	; (800b450 <HAL_DMA_IRQHandler+0xa34>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d013      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a68      	ldr	r2, [pc, #416]	; (800b454 <HAL_DMA_IRQHandler+0xa38>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d00e      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a67      	ldr	r2, [pc, #412]	; (800b458 <HAL_DMA_IRQHandler+0xa3c>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d009      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a65      	ldr	r2, [pc, #404]	; (800b45c <HAL_DMA_IRQHandler+0xa40>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d004      	beq.n	800b2d4 <HAL_DMA_IRQHandler+0x8b8>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a64      	ldr	r2, [pc, #400]	; (800b460 <HAL_DMA_IRQHandler+0xa44>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d108      	bne.n	800b2e6 <HAL_DMA_IRQHandler+0x8ca>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f022 0201 	bic.w	r2, r2, #1
 800b2e2:	601a      	str	r2, [r3, #0]
 800b2e4:	e007      	b.n	800b2f6 <HAL_DMA_IRQHandler+0x8da>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f022 0201 	bic.w	r2, r2, #1
 800b2f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d307      	bcc.n	800b312 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 0301 	and.w	r3, r3, #1
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1f2      	bne.n	800b2f6 <HAL_DMA_IRQHandler+0x8da>
 800b310:	e000      	b.n	800b314 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800b312:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f003 0301 	and.w	r3, r3, #1
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d004      	beq.n	800b32c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2203      	movs	r2, #3
 800b326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b32a:	e003      	b.n	800b334 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 8272 	beq.w	800b82a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	4798      	blx	r3
 800b34e:	e26c      	b.n	800b82a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a43      	ldr	r2, [pc, #268]	; (800b464 <HAL_DMA_IRQHandler+0xa48>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d022      	beq.n	800b3a0 <HAL_DMA_IRQHandler+0x984>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a42      	ldr	r2, [pc, #264]	; (800b468 <HAL_DMA_IRQHandler+0xa4c>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d01d      	beq.n	800b3a0 <HAL_DMA_IRQHandler+0x984>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a40      	ldr	r2, [pc, #256]	; (800b46c <HAL_DMA_IRQHandler+0xa50>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d018      	beq.n	800b3a0 <HAL_DMA_IRQHandler+0x984>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a3f      	ldr	r2, [pc, #252]	; (800b470 <HAL_DMA_IRQHandler+0xa54>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d013      	beq.n	800b3a0 <HAL_DMA_IRQHandler+0x984>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a3d      	ldr	r2, [pc, #244]	; (800b474 <HAL_DMA_IRQHandler+0xa58>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d00e      	beq.n	800b3a0 <HAL_DMA_IRQHandler+0x984>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a3c      	ldr	r2, [pc, #240]	; (800b478 <HAL_DMA_IRQHandler+0xa5c>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d009      	beq.n	800b3a0 <HAL_DMA_IRQHandler+0x984>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a3a      	ldr	r2, [pc, #232]	; (800b47c <HAL_DMA_IRQHandler+0xa60>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d004      	beq.n	800b3a0 <HAL_DMA_IRQHandler+0x984>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a39      	ldr	r2, [pc, #228]	; (800b480 <HAL_DMA_IRQHandler+0xa64>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d101      	bne.n	800b3a4 <HAL_DMA_IRQHandler+0x988>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e000      	b.n	800b3a6 <HAL_DMA_IRQHandler+0x98a>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f000 823f 	beq.w	800b82a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3b8:	f003 031f 	and.w	r3, r3, #31
 800b3bc:	2204      	movs	r2, #4
 800b3be:	409a      	lsls	r2, r3
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	4013      	ands	r3, r2
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f000 80cd 	beq.w	800b564 <HAL_DMA_IRQHandler+0xb48>
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	f003 0304 	and.w	r3, r3, #4
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f000 80c7 	beq.w	800b564 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3da:	f003 031f 	and.w	r3, r3, #31
 800b3de:	2204      	movs	r2, #4
 800b3e0:	409a      	lsls	r2, r3
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d049      	beq.n	800b484 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d109      	bne.n	800b40e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f000 8210 	beq.w	800b824 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b40c:	e20a      	b.n	800b824 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b412:	2b00      	cmp	r3, #0
 800b414:	f000 8206 	beq.w	800b824 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b420:	e200      	b.n	800b824 <HAL_DMA_IRQHandler+0xe08>
 800b422:	bf00      	nop
 800b424:	40020010 	.word	0x40020010
 800b428:	40020028 	.word	0x40020028
 800b42c:	40020040 	.word	0x40020040
 800b430:	40020058 	.word	0x40020058
 800b434:	40020070 	.word	0x40020070
 800b438:	40020088 	.word	0x40020088
 800b43c:	400200a0 	.word	0x400200a0
 800b440:	400200b8 	.word	0x400200b8
 800b444:	40020410 	.word	0x40020410
 800b448:	40020428 	.word	0x40020428
 800b44c:	40020440 	.word	0x40020440
 800b450:	40020458 	.word	0x40020458
 800b454:	40020470 	.word	0x40020470
 800b458:	40020488 	.word	0x40020488
 800b45c:	400204a0 	.word	0x400204a0
 800b460:	400204b8 	.word	0x400204b8
 800b464:	58025408 	.word	0x58025408
 800b468:	5802541c 	.word	0x5802541c
 800b46c:	58025430 	.word	0x58025430
 800b470:	58025444 	.word	0x58025444
 800b474:	58025458 	.word	0x58025458
 800b478:	5802546c 	.word	0x5802546c
 800b47c:	58025480 	.word	0x58025480
 800b480:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	f003 0320 	and.w	r3, r3, #32
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d160      	bne.n	800b550 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a7f      	ldr	r2, [pc, #508]	; (800b690 <HAL_DMA_IRQHandler+0xc74>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d04a      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a7d      	ldr	r2, [pc, #500]	; (800b694 <HAL_DMA_IRQHandler+0xc78>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d045      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a7c      	ldr	r2, [pc, #496]	; (800b698 <HAL_DMA_IRQHandler+0xc7c>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d040      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a7a      	ldr	r2, [pc, #488]	; (800b69c <HAL_DMA_IRQHandler+0xc80>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d03b      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a79      	ldr	r2, [pc, #484]	; (800b6a0 <HAL_DMA_IRQHandler+0xc84>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d036      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a77      	ldr	r2, [pc, #476]	; (800b6a4 <HAL_DMA_IRQHandler+0xc88>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d031      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a76      	ldr	r2, [pc, #472]	; (800b6a8 <HAL_DMA_IRQHandler+0xc8c>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d02c      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a74      	ldr	r2, [pc, #464]	; (800b6ac <HAL_DMA_IRQHandler+0xc90>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d027      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a73      	ldr	r2, [pc, #460]	; (800b6b0 <HAL_DMA_IRQHandler+0xc94>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d022      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a71      	ldr	r2, [pc, #452]	; (800b6b4 <HAL_DMA_IRQHandler+0xc98>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d01d      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a70      	ldr	r2, [pc, #448]	; (800b6b8 <HAL_DMA_IRQHandler+0xc9c>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d018      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a6e      	ldr	r2, [pc, #440]	; (800b6bc <HAL_DMA_IRQHandler+0xca0>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d013      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a6d      	ldr	r2, [pc, #436]	; (800b6c0 <HAL_DMA_IRQHandler+0xca4>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d00e      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a6b      	ldr	r2, [pc, #428]	; (800b6c4 <HAL_DMA_IRQHandler+0xca8>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d009      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a6a      	ldr	r2, [pc, #424]	; (800b6c8 <HAL_DMA_IRQHandler+0xcac>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d004      	beq.n	800b52e <HAL_DMA_IRQHandler+0xb12>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a68      	ldr	r2, [pc, #416]	; (800b6cc <HAL_DMA_IRQHandler+0xcb0>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d108      	bne.n	800b540 <HAL_DMA_IRQHandler+0xb24>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f022 0208 	bic.w	r2, r2, #8
 800b53c:	601a      	str	r2, [r3, #0]
 800b53e:	e007      	b.n	800b550 <HAL_DMA_IRQHandler+0xb34>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f022 0204 	bic.w	r2, r2, #4
 800b54e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 8165 	beq.w	800b824 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b562:	e15f      	b.n	800b824 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b568:	f003 031f 	and.w	r3, r3, #31
 800b56c:	2202      	movs	r2, #2
 800b56e:	409a      	lsls	r2, r3
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	4013      	ands	r3, r2
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 80c5 	beq.w	800b704 <HAL_DMA_IRQHandler+0xce8>
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	f003 0302 	and.w	r3, r3, #2
 800b580:	2b00      	cmp	r3, #0
 800b582:	f000 80bf 	beq.w	800b704 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b58a:	f003 031f 	and.w	r3, r3, #31
 800b58e:	2202      	movs	r2, #2
 800b590:	409a      	lsls	r2, r3
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d018      	beq.n	800b5d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d109      	bne.n	800b5be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	f000 813a 	beq.w	800b828 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b5bc:	e134      	b.n	800b828 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f000 8130 	beq.w	800b828 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b5d0:	e12a      	b.n	800b828 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	f003 0320 	and.w	r3, r3, #32
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f040 8089 	bne.w	800b6f0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a2b      	ldr	r2, [pc, #172]	; (800b690 <HAL_DMA_IRQHandler+0xc74>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d04a      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a29      	ldr	r2, [pc, #164]	; (800b694 <HAL_DMA_IRQHandler+0xc78>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d045      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a28      	ldr	r2, [pc, #160]	; (800b698 <HAL_DMA_IRQHandler+0xc7c>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d040      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a26      	ldr	r2, [pc, #152]	; (800b69c <HAL_DMA_IRQHandler+0xc80>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d03b      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a25      	ldr	r2, [pc, #148]	; (800b6a0 <HAL_DMA_IRQHandler+0xc84>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d036      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a23      	ldr	r2, [pc, #140]	; (800b6a4 <HAL_DMA_IRQHandler+0xc88>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d031      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a22      	ldr	r2, [pc, #136]	; (800b6a8 <HAL_DMA_IRQHandler+0xc8c>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d02c      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a20      	ldr	r2, [pc, #128]	; (800b6ac <HAL_DMA_IRQHandler+0xc90>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d027      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a1f      	ldr	r2, [pc, #124]	; (800b6b0 <HAL_DMA_IRQHandler+0xc94>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d022      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a1d      	ldr	r2, [pc, #116]	; (800b6b4 <HAL_DMA_IRQHandler+0xc98>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d01d      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a1c      	ldr	r2, [pc, #112]	; (800b6b8 <HAL_DMA_IRQHandler+0xc9c>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d018      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a1a      	ldr	r2, [pc, #104]	; (800b6bc <HAL_DMA_IRQHandler+0xca0>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d013      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a19      	ldr	r2, [pc, #100]	; (800b6c0 <HAL_DMA_IRQHandler+0xca4>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d00e      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a17      	ldr	r2, [pc, #92]	; (800b6c4 <HAL_DMA_IRQHandler+0xca8>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d009      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a16      	ldr	r2, [pc, #88]	; (800b6c8 <HAL_DMA_IRQHandler+0xcac>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d004      	beq.n	800b67e <HAL_DMA_IRQHandler+0xc62>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a14      	ldr	r2, [pc, #80]	; (800b6cc <HAL_DMA_IRQHandler+0xcb0>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d128      	bne.n	800b6d0 <HAL_DMA_IRQHandler+0xcb4>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f022 0214 	bic.w	r2, r2, #20
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	e027      	b.n	800b6e0 <HAL_DMA_IRQHandler+0xcc4>
 800b690:	40020010 	.word	0x40020010
 800b694:	40020028 	.word	0x40020028
 800b698:	40020040 	.word	0x40020040
 800b69c:	40020058 	.word	0x40020058
 800b6a0:	40020070 	.word	0x40020070
 800b6a4:	40020088 	.word	0x40020088
 800b6a8:	400200a0 	.word	0x400200a0
 800b6ac:	400200b8 	.word	0x400200b8
 800b6b0:	40020410 	.word	0x40020410
 800b6b4:	40020428 	.word	0x40020428
 800b6b8:	40020440 	.word	0x40020440
 800b6bc:	40020458 	.word	0x40020458
 800b6c0:	40020470 	.word	0x40020470
 800b6c4:	40020488 	.word	0x40020488
 800b6c8:	400204a0 	.word	0x400204a0
 800b6cc:	400204b8 	.word	0x400204b8
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f022 020a 	bic.w	r2, r2, #10
 800b6de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f000 8097 	beq.w	800b828 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b702:	e091      	b.n	800b828 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b708:	f003 031f 	and.w	r3, r3, #31
 800b70c:	2208      	movs	r2, #8
 800b70e:	409a      	lsls	r2, r3
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	4013      	ands	r3, r2
 800b714:	2b00      	cmp	r3, #0
 800b716:	f000 8088 	beq.w	800b82a <HAL_DMA_IRQHandler+0xe0e>
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	f003 0308 	and.w	r3, r3, #8
 800b720:	2b00      	cmp	r3, #0
 800b722:	f000 8082 	beq.w	800b82a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a41      	ldr	r2, [pc, #260]	; (800b830 <HAL_DMA_IRQHandler+0xe14>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d04a      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a3f      	ldr	r2, [pc, #252]	; (800b834 <HAL_DMA_IRQHandler+0xe18>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d045      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a3e      	ldr	r2, [pc, #248]	; (800b838 <HAL_DMA_IRQHandler+0xe1c>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d040      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a3c      	ldr	r2, [pc, #240]	; (800b83c <HAL_DMA_IRQHandler+0xe20>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d03b      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a3b      	ldr	r2, [pc, #236]	; (800b840 <HAL_DMA_IRQHandler+0xe24>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d036      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a39      	ldr	r2, [pc, #228]	; (800b844 <HAL_DMA_IRQHandler+0xe28>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d031      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a38      	ldr	r2, [pc, #224]	; (800b848 <HAL_DMA_IRQHandler+0xe2c>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d02c      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a36      	ldr	r2, [pc, #216]	; (800b84c <HAL_DMA_IRQHandler+0xe30>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d027      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a35      	ldr	r2, [pc, #212]	; (800b850 <HAL_DMA_IRQHandler+0xe34>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d022      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a33      	ldr	r2, [pc, #204]	; (800b854 <HAL_DMA_IRQHandler+0xe38>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d01d      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a32      	ldr	r2, [pc, #200]	; (800b858 <HAL_DMA_IRQHandler+0xe3c>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d018      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a30      	ldr	r2, [pc, #192]	; (800b85c <HAL_DMA_IRQHandler+0xe40>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d013      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a2f      	ldr	r2, [pc, #188]	; (800b860 <HAL_DMA_IRQHandler+0xe44>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d00e      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a2d      	ldr	r2, [pc, #180]	; (800b864 <HAL_DMA_IRQHandler+0xe48>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d009      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a2c      	ldr	r2, [pc, #176]	; (800b868 <HAL_DMA_IRQHandler+0xe4c>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d004      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0xdaa>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a2a      	ldr	r2, [pc, #168]	; (800b86c <HAL_DMA_IRQHandler+0xe50>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d108      	bne.n	800b7d8 <HAL_DMA_IRQHandler+0xdbc>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f022 021c 	bic.w	r2, r2, #28
 800b7d4:	601a      	str	r2, [r3, #0]
 800b7d6:	e007      	b.n	800b7e8 <HAL_DMA_IRQHandler+0xdcc>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f022 020e 	bic.w	r2, r2, #14
 800b7e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7ec:	f003 031f 	and.w	r3, r3, #31
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	409a      	lsls	r2, r3
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2201      	movs	r2, #1
 800b802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b812:	2b00      	cmp	r3, #0
 800b814:	d009      	beq.n	800b82a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	4798      	blx	r3
 800b81e:	e004      	b.n	800b82a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b820:	bf00      	nop
 800b822:	e002      	b.n	800b82a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b824:	bf00      	nop
 800b826:	e000      	b.n	800b82a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b828:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b82a:	3728      	adds	r7, #40	; 0x28
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	40020010 	.word	0x40020010
 800b834:	40020028 	.word	0x40020028
 800b838:	40020040 	.word	0x40020040
 800b83c:	40020058 	.word	0x40020058
 800b840:	40020070 	.word	0x40020070
 800b844:	40020088 	.word	0x40020088
 800b848:	400200a0 	.word	0x400200a0
 800b84c:	400200b8 	.word	0x400200b8
 800b850:	40020410 	.word	0x40020410
 800b854:	40020428 	.word	0x40020428
 800b858:	40020440 	.word	0x40020440
 800b85c:	40020458 	.word	0x40020458
 800b860:	40020470 	.word	0x40020470
 800b864:	40020488 	.word	0x40020488
 800b868:	400204a0 	.word	0x400204a0
 800b86c:	400204b8 	.word	0x400204b8

0800b870 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b87e:	b2db      	uxtb	r3, r3
}
 800b880:	4618      	mov	r0, r3
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a42      	ldr	r2, [pc, #264]	; (800b9a4 <DMA_CalcBaseAndBitshift+0x118>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d04a      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a41      	ldr	r2, [pc, #260]	; (800b9a8 <DMA_CalcBaseAndBitshift+0x11c>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d045      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a3f      	ldr	r2, [pc, #252]	; (800b9ac <DMA_CalcBaseAndBitshift+0x120>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d040      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a3e      	ldr	r2, [pc, #248]	; (800b9b0 <DMA_CalcBaseAndBitshift+0x124>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d03b      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a3c      	ldr	r2, [pc, #240]	; (800b9b4 <DMA_CalcBaseAndBitshift+0x128>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d036      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a3b      	ldr	r2, [pc, #236]	; (800b9b8 <DMA_CalcBaseAndBitshift+0x12c>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d031      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a39      	ldr	r2, [pc, #228]	; (800b9bc <DMA_CalcBaseAndBitshift+0x130>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d02c      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a38      	ldr	r2, [pc, #224]	; (800b9c0 <DMA_CalcBaseAndBitshift+0x134>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d027      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a36      	ldr	r2, [pc, #216]	; (800b9c4 <DMA_CalcBaseAndBitshift+0x138>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d022      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a35      	ldr	r2, [pc, #212]	; (800b9c8 <DMA_CalcBaseAndBitshift+0x13c>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d01d      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a33      	ldr	r2, [pc, #204]	; (800b9cc <DMA_CalcBaseAndBitshift+0x140>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d018      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a32      	ldr	r2, [pc, #200]	; (800b9d0 <DMA_CalcBaseAndBitshift+0x144>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d013      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a30      	ldr	r2, [pc, #192]	; (800b9d4 <DMA_CalcBaseAndBitshift+0x148>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d00e      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a2f      	ldr	r2, [pc, #188]	; (800b9d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d009      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a2d      	ldr	r2, [pc, #180]	; (800b9dc <DMA_CalcBaseAndBitshift+0x150>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d004      	beq.n	800b934 <DMA_CalcBaseAndBitshift+0xa8>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a2c      	ldr	r2, [pc, #176]	; (800b9e0 <DMA_CalcBaseAndBitshift+0x154>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d101      	bne.n	800b938 <DMA_CalcBaseAndBitshift+0xac>
 800b934:	2301      	movs	r3, #1
 800b936:	e000      	b.n	800b93a <DMA_CalcBaseAndBitshift+0xae>
 800b938:	2300      	movs	r3, #0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d024      	beq.n	800b988 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	b2db      	uxtb	r3, r3
 800b944:	3b10      	subs	r3, #16
 800b946:	4a27      	ldr	r2, [pc, #156]	; (800b9e4 <DMA_CalcBaseAndBitshift+0x158>)
 800b948:	fba2 2303 	umull	r2, r3, r2, r3
 800b94c:	091b      	lsrs	r3, r3, #4
 800b94e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f003 0307 	and.w	r3, r3, #7
 800b956:	4a24      	ldr	r2, [pc, #144]	; (800b9e8 <DMA_CalcBaseAndBitshift+0x15c>)
 800b958:	5cd3      	ldrb	r3, [r2, r3]
 800b95a:	461a      	mov	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2b03      	cmp	r3, #3
 800b964:	d908      	bls.n	800b978 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	461a      	mov	r2, r3
 800b96c:	4b1f      	ldr	r3, [pc, #124]	; (800b9ec <DMA_CalcBaseAndBitshift+0x160>)
 800b96e:	4013      	ands	r3, r2
 800b970:	1d1a      	adds	r2, r3, #4
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	659a      	str	r2, [r3, #88]	; 0x58
 800b976:	e00d      	b.n	800b994 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	461a      	mov	r2, r3
 800b97e:	4b1b      	ldr	r3, [pc, #108]	; (800b9ec <DMA_CalcBaseAndBitshift+0x160>)
 800b980:	4013      	ands	r3, r2
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	6593      	str	r3, [r2, #88]	; 0x58
 800b986:	e005      	b.n	800b994 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3714      	adds	r7, #20
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr
 800b9a4:	40020010 	.word	0x40020010
 800b9a8:	40020028 	.word	0x40020028
 800b9ac:	40020040 	.word	0x40020040
 800b9b0:	40020058 	.word	0x40020058
 800b9b4:	40020070 	.word	0x40020070
 800b9b8:	40020088 	.word	0x40020088
 800b9bc:	400200a0 	.word	0x400200a0
 800b9c0:	400200b8 	.word	0x400200b8
 800b9c4:	40020410 	.word	0x40020410
 800b9c8:	40020428 	.word	0x40020428
 800b9cc:	40020440 	.word	0x40020440
 800b9d0:	40020458 	.word	0x40020458
 800b9d4:	40020470 	.word	0x40020470
 800b9d8:	40020488 	.word	0x40020488
 800b9dc:	400204a0 	.word	0x400204a0
 800b9e0:	400204b8 	.word	0x400204b8
 800b9e4:	aaaaaaab 	.word	0xaaaaaaab
 800b9e8:	08016ff0 	.word	0x08016ff0
 800b9ec:	fffffc00 	.word	0xfffffc00

0800b9f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	699b      	ldr	r3, [r3, #24]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d120      	bne.n	800ba46 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba08:	2b03      	cmp	r3, #3
 800ba0a:	d858      	bhi.n	800babe <DMA_CheckFifoParam+0xce>
 800ba0c:	a201      	add	r2, pc, #4	; (adr r2, 800ba14 <DMA_CheckFifoParam+0x24>)
 800ba0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba12:	bf00      	nop
 800ba14:	0800ba25 	.word	0x0800ba25
 800ba18:	0800ba37 	.word	0x0800ba37
 800ba1c:	0800ba25 	.word	0x0800ba25
 800ba20:	0800babf 	.word	0x0800babf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d048      	beq.n	800bac2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800ba30:	2301      	movs	r3, #1
 800ba32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ba34:	e045      	b.n	800bac2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ba3e:	d142      	bne.n	800bac6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ba44:	e03f      	b.n	800bac6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	699b      	ldr	r3, [r3, #24]
 800ba4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba4e:	d123      	bne.n	800ba98 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba54:	2b03      	cmp	r3, #3
 800ba56:	d838      	bhi.n	800baca <DMA_CheckFifoParam+0xda>
 800ba58:	a201      	add	r2, pc, #4	; (adr r2, 800ba60 <DMA_CheckFifoParam+0x70>)
 800ba5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5e:	bf00      	nop
 800ba60:	0800ba71 	.word	0x0800ba71
 800ba64:	0800ba77 	.word	0x0800ba77
 800ba68:	0800ba71 	.word	0x0800ba71
 800ba6c:	0800ba89 	.word	0x0800ba89
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	73fb      	strb	r3, [r7, #15]
        break;
 800ba74:	e030      	b.n	800bad8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d025      	beq.n	800bace <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800ba82:	2301      	movs	r3, #1
 800ba84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ba86:	e022      	b.n	800bace <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ba90:	d11f      	bne.n	800bad2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ba96:	e01c      	b.n	800bad2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d902      	bls.n	800baa6 <DMA_CheckFifoParam+0xb6>
 800baa0:	2b03      	cmp	r3, #3
 800baa2:	d003      	beq.n	800baac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800baa4:	e018      	b.n	800bad8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	73fb      	strb	r3, [r7, #15]
        break;
 800baaa:	e015      	b.n	800bad8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00e      	beq.n	800bad6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	73fb      	strb	r3, [r7, #15]
    break;
 800babc:	e00b      	b.n	800bad6 <DMA_CheckFifoParam+0xe6>
        break;
 800babe:	bf00      	nop
 800bac0:	e00a      	b.n	800bad8 <DMA_CheckFifoParam+0xe8>
        break;
 800bac2:	bf00      	nop
 800bac4:	e008      	b.n	800bad8 <DMA_CheckFifoParam+0xe8>
        break;
 800bac6:	bf00      	nop
 800bac8:	e006      	b.n	800bad8 <DMA_CheckFifoParam+0xe8>
        break;
 800baca:	bf00      	nop
 800bacc:	e004      	b.n	800bad8 <DMA_CheckFifoParam+0xe8>
        break;
 800bace:	bf00      	nop
 800bad0:	e002      	b.n	800bad8 <DMA_CheckFifoParam+0xe8>
        break;
 800bad2:	bf00      	nop
 800bad4:	e000      	b.n	800bad8 <DMA_CheckFifoParam+0xe8>
    break;
 800bad6:	bf00      	nop
    }
  }

  return status;
 800bad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3714      	adds	r7, #20
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop

0800bae8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a38      	ldr	r2, [pc, #224]	; (800bbdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d022      	beq.n	800bb46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a36      	ldr	r2, [pc, #216]	; (800bbe0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d01d      	beq.n	800bb46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a35      	ldr	r2, [pc, #212]	; (800bbe4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d018      	beq.n	800bb46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a33      	ldr	r2, [pc, #204]	; (800bbe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d013      	beq.n	800bb46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a32      	ldr	r2, [pc, #200]	; (800bbec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d00e      	beq.n	800bb46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a30      	ldr	r2, [pc, #192]	; (800bbf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d009      	beq.n	800bb46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a2f      	ldr	r2, [pc, #188]	; (800bbf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d004      	beq.n	800bb46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a2d      	ldr	r2, [pc, #180]	; (800bbf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d101      	bne.n	800bb4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800bb46:	2301      	movs	r3, #1
 800bb48:	e000      	b.n	800bb4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d01a      	beq.n	800bb86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	3b08      	subs	r3, #8
 800bb58:	4a28      	ldr	r2, [pc, #160]	; (800bbfc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800bb5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb5e:	091b      	lsrs	r3, r3, #4
 800bb60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	4b26      	ldr	r3, [pc, #152]	; (800bc00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800bb66:	4413      	add	r3, r2
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a24      	ldr	r2, [pc, #144]	; (800bc04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800bb74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f003 031f 	and.w	r3, r3, #31
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	409a      	lsls	r2, r3
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800bb84:	e024      	b.n	800bbd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	3b10      	subs	r3, #16
 800bb8e:	4a1e      	ldr	r2, [pc, #120]	; (800bc08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800bb90:	fba2 2303 	umull	r2, r3, r2, r3
 800bb94:	091b      	lsrs	r3, r3, #4
 800bb96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	4a1c      	ldr	r2, [pc, #112]	; (800bc0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d806      	bhi.n	800bbae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	4a1b      	ldr	r2, [pc, #108]	; (800bc10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d902      	bls.n	800bbae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	3308      	adds	r3, #8
 800bbac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	4b18      	ldr	r3, [pc, #96]	; (800bc14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800bbb2:	4413      	add	r3, r2
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a16      	ldr	r2, [pc, #88]	; (800bc18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800bbc0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f003 031f 	and.w	r3, r3, #31
 800bbc8:	2201      	movs	r2, #1
 800bbca:	409a      	lsls	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	669a      	str	r2, [r3, #104]	; 0x68
}
 800bbd0:	bf00      	nop
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	58025408 	.word	0x58025408
 800bbe0:	5802541c 	.word	0x5802541c
 800bbe4:	58025430 	.word	0x58025430
 800bbe8:	58025444 	.word	0x58025444
 800bbec:	58025458 	.word	0x58025458
 800bbf0:	5802546c 	.word	0x5802546c
 800bbf4:	58025480 	.word	0x58025480
 800bbf8:	58025494 	.word	0x58025494
 800bbfc:	cccccccd 	.word	0xcccccccd
 800bc00:	16009600 	.word	0x16009600
 800bc04:	58025880 	.word	0x58025880
 800bc08:	aaaaaaab 	.word	0xaaaaaaab
 800bc0c:	400204b8 	.word	0x400204b8
 800bc10:	4002040f 	.word	0x4002040f
 800bc14:	10008200 	.word	0x10008200
 800bc18:	40020880 	.word	0x40020880

0800bc1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d04a      	beq.n	800bcc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b08      	cmp	r3, #8
 800bc36:	d847      	bhi.n	800bcc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a25      	ldr	r2, [pc, #148]	; (800bcd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d022      	beq.n	800bc88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a24      	ldr	r2, [pc, #144]	; (800bcd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d01d      	beq.n	800bc88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a22      	ldr	r2, [pc, #136]	; (800bcdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d018      	beq.n	800bc88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a21      	ldr	r2, [pc, #132]	; (800bce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d013      	beq.n	800bc88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a1f      	ldr	r2, [pc, #124]	; (800bce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d00e      	beq.n	800bc88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a1e      	ldr	r2, [pc, #120]	; (800bce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d009      	beq.n	800bc88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a1c      	ldr	r2, [pc, #112]	; (800bcec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d004      	beq.n	800bc88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a1b      	ldr	r2, [pc, #108]	; (800bcf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d101      	bne.n	800bc8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e000      	b.n	800bc8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00a      	beq.n	800bca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	4b17      	ldr	r3, [pc, #92]	; (800bcf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800bc96:	4413      	add	r3, r2
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a15      	ldr	r2, [pc, #84]	; (800bcf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800bca4:	671a      	str	r2, [r3, #112]	; 0x70
 800bca6:	e009      	b.n	800bcbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	4b14      	ldr	r3, [pc, #80]	; (800bcfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800bcac:	4413      	add	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a11      	ldr	r2, [pc, #68]	; (800bd00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800bcba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	409a      	lsls	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800bcc8:	bf00      	nop
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr
 800bcd4:	58025408 	.word	0x58025408
 800bcd8:	5802541c 	.word	0x5802541c
 800bcdc:	58025430 	.word	0x58025430
 800bce0:	58025444 	.word	0x58025444
 800bce4:	58025458 	.word	0x58025458
 800bce8:	5802546c 	.word	0x5802546c
 800bcec:	58025480 	.word	0x58025480
 800bcf0:	58025494 	.word	0x58025494
 800bcf4:	1600963f 	.word	0x1600963f
 800bcf8:	58025940 	.word	0x58025940
 800bcfc:	1000823f 	.word	0x1000823f
 800bd00:	40020940 	.word	0x40020940

0800bd04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b089      	sub	sp, #36	; 0x24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800bd12:	4b86      	ldr	r3, [pc, #536]	; (800bf2c <HAL_GPIO_Init+0x228>)
 800bd14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bd16:	e18c      	b.n	800c032 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	2101      	movs	r1, #1
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	fa01 f303 	lsl.w	r3, r1, r3
 800bd24:	4013      	ands	r3, r2
 800bd26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f000 817e 	beq.w	800c02c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	f003 0303 	and.w	r3, r3, #3
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d005      	beq.n	800bd48 <HAL_GPIO_Init+0x44>
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	f003 0303 	and.w	r3, r3, #3
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d130      	bne.n	800bdaa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	005b      	lsls	r3, r3, #1
 800bd52:	2203      	movs	r2, #3
 800bd54:	fa02 f303 	lsl.w	r3, r2, r3
 800bd58:	43db      	mvns	r3, r3
 800bd5a:	69ba      	ldr	r2, [r7, #24]
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	68da      	ldr	r2, [r3, #12]
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	005b      	lsls	r3, r3, #1
 800bd68:	fa02 f303 	lsl.w	r3, r2, r3
 800bd6c:	69ba      	ldr	r2, [r7, #24]
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	69ba      	ldr	r2, [r7, #24]
 800bd76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bd7e:	2201      	movs	r2, #1
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	fa02 f303 	lsl.w	r3, r2, r3
 800bd86:	43db      	mvns	r3, r3
 800bd88:	69ba      	ldr	r2, [r7, #24]
 800bd8a:	4013      	ands	r3, r2
 800bd8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	091b      	lsrs	r3, r3, #4
 800bd94:	f003 0201 	and.w	r2, r3, #1
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd9e:	69ba      	ldr	r2, [r7, #24]
 800bda0:	4313      	orrs	r3, r2
 800bda2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	69ba      	ldr	r2, [r7, #24]
 800bda8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	f003 0303 	and.w	r3, r3, #3
 800bdb2:	2b03      	cmp	r3, #3
 800bdb4:	d017      	beq.n	800bde6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	005b      	lsls	r3, r3, #1
 800bdc0:	2203      	movs	r2, #3
 800bdc2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdc6:	43db      	mvns	r3, r3
 800bdc8:	69ba      	ldr	r2, [r7, #24]
 800bdca:	4013      	ands	r3, r2
 800bdcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	689a      	ldr	r2, [r3, #8]
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	005b      	lsls	r3, r3, #1
 800bdd6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdda:	69ba      	ldr	r2, [r7, #24]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	69ba      	ldr	r2, [r7, #24]
 800bde4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	f003 0303 	and.w	r3, r3, #3
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	d123      	bne.n	800be3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	08da      	lsrs	r2, r3, #3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	3208      	adds	r2, #8
 800bdfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	f003 0307 	and.w	r3, r3, #7
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	220f      	movs	r2, #15
 800be0a:	fa02 f303 	lsl.w	r3, r2, r3
 800be0e:	43db      	mvns	r3, r3
 800be10:	69ba      	ldr	r2, [r7, #24]
 800be12:	4013      	ands	r3, r2
 800be14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	691a      	ldr	r2, [r3, #16]
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	f003 0307 	and.w	r3, r3, #7
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	fa02 f303 	lsl.w	r3, r2, r3
 800be26:	69ba      	ldr	r2, [r7, #24]
 800be28:	4313      	orrs	r3, r2
 800be2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	08da      	lsrs	r2, r3, #3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	3208      	adds	r2, #8
 800be34:	69b9      	ldr	r1, [r7, #24]
 800be36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	005b      	lsls	r3, r3, #1
 800be44:	2203      	movs	r2, #3
 800be46:	fa02 f303 	lsl.w	r3, r2, r3
 800be4a:	43db      	mvns	r3, r3
 800be4c:	69ba      	ldr	r2, [r7, #24]
 800be4e:	4013      	ands	r3, r2
 800be50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	f003 0203 	and.w	r2, r3, #3
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	005b      	lsls	r3, r3, #1
 800be5e:	fa02 f303 	lsl.w	r3, r2, r3
 800be62:	69ba      	ldr	r2, [r7, #24]
 800be64:	4313      	orrs	r3, r2
 800be66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	69ba      	ldr	r2, [r7, #24]
 800be6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800be76:	2b00      	cmp	r3, #0
 800be78:	f000 80d8 	beq.w	800c02c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be7c:	4b2c      	ldr	r3, [pc, #176]	; (800bf30 <HAL_GPIO_Init+0x22c>)
 800be7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800be82:	4a2b      	ldr	r2, [pc, #172]	; (800bf30 <HAL_GPIO_Init+0x22c>)
 800be84:	f043 0302 	orr.w	r3, r3, #2
 800be88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800be8c:	4b28      	ldr	r3, [pc, #160]	; (800bf30 <HAL_GPIO_Init+0x22c>)
 800be8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800be92:	f003 0302 	and.w	r3, r3, #2
 800be96:	60fb      	str	r3, [r7, #12]
 800be98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800be9a:	4a26      	ldr	r2, [pc, #152]	; (800bf34 <HAL_GPIO_Init+0x230>)
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	089b      	lsrs	r3, r3, #2
 800bea0:	3302      	adds	r3, #2
 800bea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	f003 0303 	and.w	r3, r3, #3
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	220f      	movs	r2, #15
 800beb2:	fa02 f303 	lsl.w	r3, r2, r3
 800beb6:	43db      	mvns	r3, r3
 800beb8:	69ba      	ldr	r2, [r7, #24]
 800beba:	4013      	ands	r3, r2
 800bebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a1d      	ldr	r2, [pc, #116]	; (800bf38 <HAL_GPIO_Init+0x234>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d04a      	beq.n	800bf5c <HAL_GPIO_Init+0x258>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a1c      	ldr	r2, [pc, #112]	; (800bf3c <HAL_GPIO_Init+0x238>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d02b      	beq.n	800bf26 <HAL_GPIO_Init+0x222>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4a1b      	ldr	r2, [pc, #108]	; (800bf40 <HAL_GPIO_Init+0x23c>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d025      	beq.n	800bf22 <HAL_GPIO_Init+0x21e>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4a1a      	ldr	r2, [pc, #104]	; (800bf44 <HAL_GPIO_Init+0x240>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d01f      	beq.n	800bf1e <HAL_GPIO_Init+0x21a>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4a19      	ldr	r2, [pc, #100]	; (800bf48 <HAL_GPIO_Init+0x244>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d019      	beq.n	800bf1a <HAL_GPIO_Init+0x216>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4a18      	ldr	r2, [pc, #96]	; (800bf4c <HAL_GPIO_Init+0x248>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d013      	beq.n	800bf16 <HAL_GPIO_Init+0x212>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	4a17      	ldr	r2, [pc, #92]	; (800bf50 <HAL_GPIO_Init+0x24c>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d00d      	beq.n	800bf12 <HAL_GPIO_Init+0x20e>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4a16      	ldr	r2, [pc, #88]	; (800bf54 <HAL_GPIO_Init+0x250>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d007      	beq.n	800bf0e <HAL_GPIO_Init+0x20a>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4a15      	ldr	r2, [pc, #84]	; (800bf58 <HAL_GPIO_Init+0x254>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d101      	bne.n	800bf0a <HAL_GPIO_Init+0x206>
 800bf06:	2309      	movs	r3, #9
 800bf08:	e029      	b.n	800bf5e <HAL_GPIO_Init+0x25a>
 800bf0a:	230a      	movs	r3, #10
 800bf0c:	e027      	b.n	800bf5e <HAL_GPIO_Init+0x25a>
 800bf0e:	2307      	movs	r3, #7
 800bf10:	e025      	b.n	800bf5e <HAL_GPIO_Init+0x25a>
 800bf12:	2306      	movs	r3, #6
 800bf14:	e023      	b.n	800bf5e <HAL_GPIO_Init+0x25a>
 800bf16:	2305      	movs	r3, #5
 800bf18:	e021      	b.n	800bf5e <HAL_GPIO_Init+0x25a>
 800bf1a:	2304      	movs	r3, #4
 800bf1c:	e01f      	b.n	800bf5e <HAL_GPIO_Init+0x25a>
 800bf1e:	2303      	movs	r3, #3
 800bf20:	e01d      	b.n	800bf5e <HAL_GPIO_Init+0x25a>
 800bf22:	2302      	movs	r3, #2
 800bf24:	e01b      	b.n	800bf5e <HAL_GPIO_Init+0x25a>
 800bf26:	2301      	movs	r3, #1
 800bf28:	e019      	b.n	800bf5e <HAL_GPIO_Init+0x25a>
 800bf2a:	bf00      	nop
 800bf2c:	58000080 	.word	0x58000080
 800bf30:	58024400 	.word	0x58024400
 800bf34:	58000400 	.word	0x58000400
 800bf38:	58020000 	.word	0x58020000
 800bf3c:	58020400 	.word	0x58020400
 800bf40:	58020800 	.word	0x58020800
 800bf44:	58020c00 	.word	0x58020c00
 800bf48:	58021000 	.word	0x58021000
 800bf4c:	58021400 	.word	0x58021400
 800bf50:	58021800 	.word	0x58021800
 800bf54:	58021c00 	.word	0x58021c00
 800bf58:	58022400 	.word	0x58022400
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	69fa      	ldr	r2, [r7, #28]
 800bf60:	f002 0203 	and.w	r2, r2, #3
 800bf64:	0092      	lsls	r2, r2, #2
 800bf66:	4093      	lsls	r3, r2
 800bf68:	69ba      	ldr	r2, [r7, #24]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bf6e:	4938      	ldr	r1, [pc, #224]	; (800c050 <HAL_GPIO_Init+0x34c>)
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	089b      	lsrs	r3, r3, #2
 800bf74:	3302      	adds	r3, #2
 800bf76:	69ba      	ldr	r2, [r7, #24]
 800bf78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bf7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	43db      	mvns	r3, r3
 800bf88:	69ba      	ldr	r2, [r7, #24]
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d003      	beq.n	800bfa2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800bf9a:	69ba      	ldr	r2, [r7, #24]
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800bfa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800bfaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	43db      	mvns	r3, r3
 800bfb6:	69ba      	ldr	r2, [r7, #24]
 800bfb8:	4013      	ands	r3, r2
 800bfba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d003      	beq.n	800bfd0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800bfc8:	69ba      	ldr	r2, [r7, #24]
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800bfd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	43db      	mvns	r3, r3
 800bfe2:	69ba      	ldr	r2, [r7, #24]
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d003      	beq.n	800bffc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	4313      	orrs	r3, r2
 800bffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	69ba      	ldr	r2, [r7, #24]
 800c000:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	43db      	mvns	r3, r3
 800c00c:	69ba      	ldr	r2, [r7, #24]
 800c00e:	4013      	ands	r3, r2
 800c010:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d003      	beq.n	800c026 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800c01e:	69ba      	ldr	r2, [r7, #24]
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	4313      	orrs	r3, r2
 800c024:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	69ba      	ldr	r2, [r7, #24]
 800c02a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	3301      	adds	r3, #1
 800c030:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	fa22 f303 	lsr.w	r3, r2, r3
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f47f ae6b 	bne.w	800bd18 <HAL_GPIO_Init+0x14>
  }
}
 800c042:	bf00      	nop
 800c044:	bf00      	nop
 800c046:	3724      	adds	r7, #36	; 0x24
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr
 800c050:	58000400 	.word	0x58000400

0800c054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	460b      	mov	r3, r1
 800c05e:	807b      	strh	r3, [r7, #2]
 800c060:	4613      	mov	r3, r2
 800c062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c064:	787b      	ldrb	r3, [r7, #1]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d003      	beq.n	800c072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c06a:	887a      	ldrh	r2, [r7, #2]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800c070:	e003      	b.n	800c07a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800c072:	887b      	ldrh	r3, [r7, #2]
 800c074:	041a      	lsls	r2, r3, #16
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	619a      	str	r2, [r3, #24]
}
 800c07a:	bf00      	nop
 800c07c:	370c      	adds	r7, #12
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c086:	b480      	push	{r7}
 800c088:	b085      	sub	sp, #20
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	460b      	mov	r3, r1
 800c090:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	695b      	ldr	r3, [r3, #20]
 800c096:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c098:	887a      	ldrh	r2, [r7, #2]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	4013      	ands	r3, r2
 800c09e:	041a      	lsls	r2, r3, #16
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	43d9      	mvns	r1, r3
 800c0a4:	887b      	ldrh	r3, [r7, #2]
 800c0a6:	400b      	ands	r3, r1
 800c0a8:	431a      	orrs	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	619a      	str	r2, [r3, #24]
}
 800c0ae:	bf00      	nop
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
	...

0800c0bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e07f      	b.n	800c1ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d106      	bne.n	800c0e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7f5 fe44 	bl	8001d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2224      	movs	r2, #36	; 0x24
 800c0ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f022 0201 	bic.w	r2, r2, #1
 800c0fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685a      	ldr	r2, [r3, #4]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c10c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	689a      	ldr	r2, [r3, #8]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c11c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	2b01      	cmp	r3, #1
 800c124:	d107      	bne.n	800c136 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	689a      	ldr	r2, [r3, #8]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c132:	609a      	str	r2, [r3, #8]
 800c134:	e006      	b.n	800c144 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	689a      	ldr	r2, [r3, #8]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c142:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d104      	bne.n	800c156 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c154:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	6859      	ldr	r1, [r3, #4]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	4b1d      	ldr	r3, [pc, #116]	; (800c1d8 <HAL_I2C_Init+0x11c>)
 800c162:	430b      	orrs	r3, r1
 800c164:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	68da      	ldr	r2, [r3, #12]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c174:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	691a      	ldr	r2, [r3, #16]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	695b      	ldr	r3, [r3, #20]
 800c17e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	699b      	ldr	r3, [r3, #24]
 800c186:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	430a      	orrs	r2, r1
 800c18e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	69d9      	ldr	r1, [r3, #28]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6a1a      	ldr	r2, [r3, #32]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	430a      	orrs	r2, r1
 800c19e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f042 0201 	orr.w	r2, r2, #1
 800c1ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2220      	movs	r2, #32
 800c1ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	02008000 	.word	0x02008000

0800c1dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b088      	sub	sp, #32
 800c1e0:	af02      	add	r7, sp, #8
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	607a      	str	r2, [r7, #4]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	817b      	strh	r3, [r7, #10]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	2b20      	cmp	r3, #32
 800c1fa:	f040 80da 	bne.w	800c3b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c204:	2b01      	cmp	r3, #1
 800c206:	d101      	bne.n	800c20c <HAL_I2C_Master_Transmit+0x30>
 800c208:	2302      	movs	r3, #2
 800c20a:	e0d3      	b.n	800c3b4 <HAL_I2C_Master_Transmit+0x1d8>
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2201      	movs	r2, #1
 800c210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c214:	f7fa feb8 	bl	8006f88 <HAL_GetTick>
 800c218:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	9300      	str	r3, [sp, #0]
 800c21e:	2319      	movs	r3, #25
 800c220:	2201      	movs	r2, #1
 800c222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c226:	68f8      	ldr	r0, [r7, #12]
 800c228:	f000 ffcf 	bl	800d1ca <I2C_WaitOnFlagUntilTimeout>
 800c22c:	4603      	mov	r3, r0
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d001      	beq.n	800c236 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	e0be      	b.n	800c3b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2221      	movs	r2, #33	; 0x21
 800c23a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2210      	movs	r2, #16
 800c242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	893a      	ldrh	r2, [r7, #8]
 800c256:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2200      	movs	r2, #0
 800c25c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c262:	b29b      	uxth	r3, r3
 800c264:	2bff      	cmp	r3, #255	; 0xff
 800c266:	d90e      	bls.n	800c286 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	22ff      	movs	r2, #255	; 0xff
 800c26c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c272:	b2da      	uxtb	r2, r3
 800c274:	8979      	ldrh	r1, [r7, #10]
 800c276:	4b51      	ldr	r3, [pc, #324]	; (800c3bc <HAL_I2C_Master_Transmit+0x1e0>)
 800c278:	9300      	str	r3, [sp, #0]
 800c27a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f001 f9c6 	bl	800d610 <I2C_TransferConfig>
 800c284:	e06c      	b.n	800c360 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c294:	b2da      	uxtb	r2, r3
 800c296:	8979      	ldrh	r1, [r7, #10]
 800c298:	4b48      	ldr	r3, [pc, #288]	; (800c3bc <HAL_I2C_Master_Transmit+0x1e0>)
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2a0:	68f8      	ldr	r0, [r7, #12]
 800c2a2:	f001 f9b5 	bl	800d610 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800c2a6:	e05b      	b.n	800c360 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c2a8:	697a      	ldr	r2, [r7, #20]
 800c2aa:	6a39      	ldr	r1, [r7, #32]
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f000 ffcc 	bl	800d24a <I2C_WaitOnTXISFlagUntilTimeout>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d001      	beq.n	800c2bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e07b      	b.n	800c3b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c0:	781a      	ldrb	r2, [r3, #0]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2cc:	1c5a      	adds	r2, r3, #1
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d034      	beq.n	800c360 <HAL_I2C_Master_Transmit+0x184>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d130      	bne.n	800c360 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	6a3b      	ldr	r3, [r7, #32]
 800c304:	2200      	movs	r2, #0
 800c306:	2180      	movs	r1, #128	; 0x80
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f000 ff5e 	bl	800d1ca <I2C_WaitOnFlagUntilTimeout>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800c314:	2301      	movs	r3, #1
 800c316:	e04d      	b.n	800c3b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	2bff      	cmp	r3, #255	; 0xff
 800c320:	d90e      	bls.n	800c340 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	22ff      	movs	r2, #255	; 0xff
 800c326:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c32c:	b2da      	uxtb	r2, r3
 800c32e:	8979      	ldrh	r1, [r7, #10]
 800c330:	2300      	movs	r3, #0
 800c332:	9300      	str	r3, [sp, #0]
 800c334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f001 f969 	bl	800d610 <I2C_TransferConfig>
 800c33e:	e00f      	b.n	800c360 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c344:	b29a      	uxth	r2, r3
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c34e:	b2da      	uxtb	r2, r3
 800c350:	8979      	ldrh	r1, [r7, #10]
 800c352:	2300      	movs	r3, #0
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f001 f958 	bl	800d610 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c364:	b29b      	uxth	r3, r3
 800c366:	2b00      	cmp	r3, #0
 800c368:	d19e      	bne.n	800c2a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c36a:	697a      	ldr	r2, [r7, #20]
 800c36c:	6a39      	ldr	r1, [r7, #32]
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f000 ffab 	bl	800d2ca <I2C_WaitOnSTOPFlagUntilTimeout>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d001      	beq.n	800c37e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800c37a:	2301      	movs	r3, #1
 800c37c:	e01a      	b.n	800c3b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2220      	movs	r2, #32
 800c384:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	6859      	ldr	r1, [r3, #4]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	4b0b      	ldr	r3, [pc, #44]	; (800c3c0 <HAL_I2C_Master_Transmit+0x1e4>)
 800c392:	400b      	ands	r3, r1
 800c394:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2220      	movs	r2, #32
 800c39a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	e000      	b.n	800c3b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800c3b2:	2302      	movs	r3, #2
  }
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3718      	adds	r7, #24
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	80002000 	.word	0x80002000
 800c3c0:	fe00e800 	.word	0xfe00e800

0800c3c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b088      	sub	sp, #32
 800c3c8:	af02      	add	r7, sp, #8
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	607a      	str	r2, [r7, #4]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	817b      	strh	r3, [r7, #10]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	2b20      	cmp	r3, #32
 800c3e2:	f040 80db 	bne.w	800c59c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d101      	bne.n	800c3f4 <HAL_I2C_Master_Receive+0x30>
 800c3f0:	2302      	movs	r3, #2
 800c3f2:	e0d4      	b.n	800c59e <HAL_I2C_Master_Receive+0x1da>
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c3fc:	f7fa fdc4 	bl	8006f88 <HAL_GetTick>
 800c400:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	2319      	movs	r3, #25
 800c408:	2201      	movs	r2, #1
 800c40a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f000 fedb 	bl	800d1ca <I2C_WaitOnFlagUntilTimeout>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	e0bf      	b.n	800c59e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2222      	movs	r2, #34	; 0x22
 800c422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2210      	movs	r2, #16
 800c42a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2200      	movs	r2, #0
 800c432:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	893a      	ldrh	r2, [r7, #8]
 800c43e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	2bff      	cmp	r3, #255	; 0xff
 800c44e:	d90e      	bls.n	800c46e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	22ff      	movs	r2, #255	; 0xff
 800c454:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	8979      	ldrh	r1, [r7, #10]
 800c45e:	4b52      	ldr	r3, [pc, #328]	; (800c5a8 <HAL_I2C_Master_Receive+0x1e4>)
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f001 f8d2 	bl	800d610 <I2C_TransferConfig>
 800c46c:	e06d      	b.n	800c54a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c472:	b29a      	uxth	r2, r3
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c47c:	b2da      	uxtb	r2, r3
 800c47e:	8979      	ldrh	r1, [r7, #10]
 800c480:	4b49      	ldr	r3, [pc, #292]	; (800c5a8 <HAL_I2C_Master_Receive+0x1e4>)
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f001 f8c1 	bl	800d610 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800c48e:	e05c      	b.n	800c54a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c490:	697a      	ldr	r2, [r7, #20]
 800c492:	6a39      	ldr	r1, [r7, #32]
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f000 ff55 	bl	800d344 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d001      	beq.n	800c4a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	e07c      	b.n	800c59e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ae:	b2d2      	uxtb	r2, r2
 800c4b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b6:	1c5a      	adds	r2, r3, #1
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d034      	beq.n	800c54a <HAL_I2C_Master_Receive+0x186>
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d130      	bne.n	800c54a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	6a3b      	ldr	r3, [r7, #32]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	2180      	movs	r1, #128	; 0x80
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f000 fe69 	bl	800d1ca <I2C_WaitOnFlagUntilTimeout>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d001      	beq.n	800c502 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e04d      	b.n	800c59e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c506:	b29b      	uxth	r3, r3
 800c508:	2bff      	cmp	r3, #255	; 0xff
 800c50a:	d90e      	bls.n	800c52a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	22ff      	movs	r2, #255	; 0xff
 800c510:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c516:	b2da      	uxtb	r2, r3
 800c518:	8979      	ldrh	r1, [r7, #10]
 800c51a:	2300      	movs	r3, #0
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c522:	68f8      	ldr	r0, [r7, #12]
 800c524:	f001 f874 	bl	800d610 <I2C_TransferConfig>
 800c528:	e00f      	b.n	800c54a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c52e:	b29a      	uxth	r2, r3
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	8979      	ldrh	r1, [r7, #10]
 800c53c:	2300      	movs	r3, #0
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f001 f863 	bl	800d610 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c54e:	b29b      	uxth	r3, r3
 800c550:	2b00      	cmp	r3, #0
 800c552:	d19d      	bne.n	800c490 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c554:	697a      	ldr	r2, [r7, #20]
 800c556:	6a39      	ldr	r1, [r7, #32]
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	f000 feb6 	bl	800d2ca <I2C_WaitOnSTOPFlagUntilTimeout>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d001      	beq.n	800c568 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800c564:	2301      	movs	r3, #1
 800c566:	e01a      	b.n	800c59e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2220      	movs	r2, #32
 800c56e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	6859      	ldr	r1, [r3, #4]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	4b0c      	ldr	r3, [pc, #48]	; (800c5ac <HAL_I2C_Master_Receive+0x1e8>)
 800c57c:	400b      	ands	r3, r1
 800c57e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2220      	movs	r2, #32
 800c584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c598:	2300      	movs	r3, #0
 800c59a:	e000      	b.n	800c59e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800c59c:	2302      	movs	r3, #2
  }
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	80002400 	.word	0x80002400
 800c5ac:	fe00e800 	.word	0xfe00e800

0800c5b0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	699b      	ldr	r3, [r3, #24]
 800c5be:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	0a1b      	lsrs	r3, r3, #8
 800c5cc:	f003 0301 	and.w	r3, r3, #1
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d010      	beq.n	800c5f6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	09db      	lsrs	r3, r3, #7
 800c5d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00a      	beq.n	800c5f6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5e4:	f043 0201 	orr.w	r2, r3, #1
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5f4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	0a9b      	lsrs	r3, r3, #10
 800c5fa:	f003 0301 	and.w	r3, r3, #1
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d010      	beq.n	800c624 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	09db      	lsrs	r3, r3, #7
 800c606:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00a      	beq.n	800c624 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c612:	f043 0208 	orr.w	r2, r3, #8
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c622:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	0a5b      	lsrs	r3, r3, #9
 800c628:	f003 0301 	and.w	r3, r3, #1
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d010      	beq.n	800c652 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	09db      	lsrs	r3, r3, #7
 800c634:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00a      	beq.n	800c652 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c640:	f043 0202 	orr.w	r2, r3, #2
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c650:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c656:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f003 030b 	and.w	r3, r3, #11
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800c662:	68f9      	ldr	r1, [r7, #12]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fc77 	bl	800cf58 <I2C_ITError>
  }
}
 800c66a:	bf00      	nop
 800c66c:	3718      	adds	r7, #24
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c672:	b480      	push	{r7}
 800c674:	b083      	sub	sp, #12
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c67a:	bf00      	nop
 800c67c:	370c      	adds	r7, #12
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr

0800c686 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c686:	b480      	push	{r7}
 800c688:	b083      	sub	sp, #12
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c68e:	bf00      	nop
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr

0800c69a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c69a:	b480      	push	{r7}
 800c69c:	b083      	sub	sp, #12
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	70fb      	strb	r3, [r7, #3]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c6aa:	bf00      	nop
 800c6ac:	370c      	adds	r7, #12
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr

0800c6b6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c6b6:	b480      	push	{r7}
 800c6b8:	b083      	sub	sp, #12
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c6be:	bf00      	nop
 800c6c0:	370c      	adds	r7, #12
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr

0800c6ca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c6ca:	b480      	push	{r7}
 800c6cc:	b083      	sub	sp, #12
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c6d2:	bf00      	nop
 800c6d4:	370c      	adds	r7, #12
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr

0800c6de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c6de:	b480      	push	{r7}
 800c6e0:	b083      	sub	sp, #12
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c6e6:	bf00      	nop
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b086      	sub	sp, #24
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	60f8      	str	r0, [r7, #12]
 800c6fa:	60b9      	str	r1, [r7, #8]
 800c6fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c702:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d101      	bne.n	800c716 <I2C_Slave_ISR_IT+0x24>
 800c712:	2302      	movs	r3, #2
 800c714:	e0ec      	b.n	800c8f0 <I2C_Slave_ISR_IT+0x1fe>
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2201      	movs	r2, #1
 800c71a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	095b      	lsrs	r3, r3, #5
 800c722:	f003 0301 	and.w	r3, r3, #1
 800c726:	2b00      	cmp	r3, #0
 800c728:	d009      	beq.n	800c73e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	095b      	lsrs	r3, r3, #5
 800c72e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c732:	2b00      	cmp	r3, #0
 800c734:	d003      	beq.n	800c73e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c736:	6939      	ldr	r1, [r7, #16]
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f000 f9bf 	bl	800cabc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	091b      	lsrs	r3, r3, #4
 800c742:	f003 0301 	and.w	r3, r3, #1
 800c746:	2b00      	cmp	r3, #0
 800c748:	d04d      	beq.n	800c7e6 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	091b      	lsrs	r3, r3, #4
 800c74e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c752:	2b00      	cmp	r3, #0
 800c754:	d047      	beq.n	800c7e6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d128      	bne.n	800c7b2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c766:	b2db      	uxtb	r3, r3
 800c768:	2b28      	cmp	r3, #40	; 0x28
 800c76a:	d108      	bne.n	800c77e <I2C_Slave_ISR_IT+0x8c>
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c772:	d104      	bne.n	800c77e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c774:	6939      	ldr	r1, [r7, #16]
 800c776:	68f8      	ldr	r0, [r7, #12]
 800c778:	f000 fb98 	bl	800ceac <I2C_ITListenCplt>
 800c77c:	e032      	b.n	800c7e4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c784:	b2db      	uxtb	r3, r3
 800c786:	2b29      	cmp	r3, #41	; 0x29
 800c788:	d10e      	bne.n	800c7a8 <I2C_Slave_ISR_IT+0xb6>
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c790:	d00a      	beq.n	800c7a8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2210      	movs	r2, #16
 800c798:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f000 fcd3 	bl	800d146 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	f000 f92d 	bl	800ca00 <I2C_ITSlaveSeqCplt>
 800c7a6:	e01d      	b.n	800c7e4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2210      	movs	r2, #16
 800c7ae:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c7b0:	e096      	b.n	800c8e0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2210      	movs	r2, #16
 800c7b8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7be:	f043 0204 	orr.w	r2, r3, #4
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d004      	beq.n	800c7d6 <I2C_Slave_ISR_IT+0xe4>
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c7d2:	f040 8085 	bne.w	800c8e0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7da:	4619      	mov	r1, r3
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f000 fbbb 	bl	800cf58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c7e2:	e07d      	b.n	800c8e0 <I2C_Slave_ISR_IT+0x1ee>
 800c7e4:	e07c      	b.n	800c8e0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	089b      	lsrs	r3, r3, #2
 800c7ea:	f003 0301 	and.w	r3, r3, #1
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d030      	beq.n	800c854 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	089b      	lsrs	r3, r3, #2
 800c7f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d02a      	beq.n	800c854 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c802:	b29b      	uxth	r3, r3
 800c804:	2b00      	cmp	r3, #0
 800c806:	d018      	beq.n	800c83a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c812:	b2d2      	uxtb	r2, r2
 800c814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c81a:	1c5a      	adds	r2, r3, #1
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c824:	3b01      	subs	r3, #1
 800c826:	b29a      	uxth	r2, r3
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c830:	b29b      	uxth	r3, r3
 800c832:	3b01      	subs	r3, #1
 800c834:	b29a      	uxth	r2, r3
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c83e:	b29b      	uxth	r3, r3
 800c840:	2b00      	cmp	r3, #0
 800c842:	d14f      	bne.n	800c8e4 <I2C_Slave_ISR_IT+0x1f2>
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c84a:	d04b      	beq.n	800c8e4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	f000 f8d7 	bl	800ca00 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c852:	e047      	b.n	800c8e4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	08db      	lsrs	r3, r3, #3
 800c858:	f003 0301 	and.w	r3, r3, #1
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00a      	beq.n	800c876 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	08db      	lsrs	r3, r3, #3
 800c864:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d004      	beq.n	800c876 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c86c:	6939      	ldr	r1, [r7, #16]
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f000 f842 	bl	800c8f8 <I2C_ITAddrCplt>
 800c874:	e037      	b.n	800c8e6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	085b      	lsrs	r3, r3, #1
 800c87a:	f003 0301 	and.w	r3, r3, #1
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d031      	beq.n	800c8e6 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	085b      	lsrs	r3, r3, #1
 800c886:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d02b      	beq.n	800c8e6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c892:	b29b      	uxth	r3, r3
 800c894:	2b00      	cmp	r3, #0
 800c896:	d018      	beq.n	800c8ca <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89c:	781a      	ldrb	r2, [r3, #0]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a8:	1c5a      	adds	r2, r3, #1
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	851a      	strh	r2, [r3, #40]	; 0x28
 800c8c8:	e00d      	b.n	800c8e6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c8d0:	d002      	beq.n	800c8d8 <I2C_Slave_ISR_IT+0x1e6>
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d106      	bne.n	800c8e6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f000 f891 	bl	800ca00 <I2C_ITSlaveSeqCplt>
 800c8de:	e002      	b.n	800c8e6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800c8e0:	bf00      	nop
 800c8e2:	e000      	b.n	800c8e6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800c8e4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3718      	adds	r7, #24
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c90e:	2b28      	cmp	r3, #40	; 0x28
 800c910:	d16a      	bne.n	800c9e8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	699b      	ldr	r3, [r3, #24]
 800c918:	0c1b      	lsrs	r3, r3, #16
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	f003 0301 	and.w	r3, r3, #1
 800c920:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	0c1b      	lsrs	r3, r3, #16
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c930:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	b29b      	uxth	r3, r3
 800c93a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c93e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	b29b      	uxth	r3, r3
 800c948:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c94c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	2b02      	cmp	r3, #2
 800c954:	d138      	bne.n	800c9c8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c956:	897b      	ldrh	r3, [r7, #10]
 800c958:	09db      	lsrs	r3, r3, #7
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	89bb      	ldrh	r3, [r7, #12]
 800c95e:	4053      	eors	r3, r2
 800c960:	b29b      	uxth	r3, r3
 800c962:	f003 0306 	and.w	r3, r3, #6
 800c966:	2b00      	cmp	r3, #0
 800c968:	d11c      	bne.n	800c9a4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c96a:	897b      	ldrh	r3, [r7, #10]
 800c96c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c972:	1c5a      	adds	r2, r3, #1
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c97c:	2b02      	cmp	r3, #2
 800c97e:	d13b      	bne.n	800c9f8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2208      	movs	r2, #8
 800c98c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c996:	89ba      	ldrh	r2, [r7, #12]
 800c998:	7bfb      	ldrb	r3, [r7, #15]
 800c99a:	4619      	mov	r1, r3
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7ff fe7c 	bl	800c69a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c9a2:	e029      	b.n	800c9f8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c9a4:	893b      	ldrh	r3, [r7, #8]
 800c9a6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c9a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fe61 	bl	800d674 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c9ba:	89ba      	ldrh	r2, [r7, #12]
 800c9bc:	7bfb      	ldrb	r3, [r7, #15]
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff fe6a 	bl	800c69a <HAL_I2C_AddrCallback>
}
 800c9c6:	e017      	b.n	800c9f8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c9c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 fe51 	bl	800d674 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c9da:	89ba      	ldrh	r2, [r7, #12]
 800c9dc:	7bfb      	ldrb	r3, [r7, #15]
 800c9de:	4619      	mov	r1, r3
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7ff fe5a 	bl	800c69a <HAL_I2C_AddrCallback>
}
 800c9e6:	e007      	b.n	800c9f8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2208      	movs	r2, #8
 800c9ee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c9f8:	bf00      	nop
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	0b9b      	lsrs	r3, r3, #14
 800ca1c:	f003 0301 	and.w	r3, r3, #1
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d008      	beq.n	800ca36 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ca32:	601a      	str	r2, [r3, #0]
 800ca34:	e00d      	b.n	800ca52 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	0bdb      	lsrs	r3, r3, #15
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d007      	beq.n	800ca52 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ca50:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b29      	cmp	r3, #41	; 0x29
 800ca5c:	d112      	bne.n	800ca84 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2228      	movs	r2, #40	; 0x28
 800ca62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2221      	movs	r2, #33	; 0x21
 800ca6a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ca6c:	2101      	movs	r1, #1
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fe00 	bl	800d674 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f7ff fdf8 	bl	800c672 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ca82:	e017      	b.n	800cab4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	2b2a      	cmp	r3, #42	; 0x2a
 800ca8e:	d111      	bne.n	800cab4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2228      	movs	r2, #40	; 0x28
 800ca94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2222      	movs	r2, #34	; 0x22
 800ca9c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ca9e:	2102      	movs	r1, #2
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fde7 	bl	800d674 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f7ff fde9 	bl	800c686 <HAL_I2C_SlaveRxCpltCallback>
}
 800cab4:	bf00      	nop
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cad8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2220      	movs	r2, #32
 800cae0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cae2:	7bfb      	ldrb	r3, [r7, #15]
 800cae4:	2b21      	cmp	r3, #33	; 0x21
 800cae6:	d002      	beq.n	800caee <I2C_ITSlaveCplt+0x32>
 800cae8:	7bfb      	ldrb	r3, [r7, #15]
 800caea:	2b29      	cmp	r3, #41	; 0x29
 800caec:	d108      	bne.n	800cb00 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800caee:	f248 0101 	movw	r1, #32769	; 0x8001
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 fdbe 	bl	800d674 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2221      	movs	r2, #33	; 0x21
 800cafc:	631a      	str	r2, [r3, #48]	; 0x30
 800cafe:	e00d      	b.n	800cb1c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
 800cb02:	2b22      	cmp	r3, #34	; 0x22
 800cb04:	d002      	beq.n	800cb0c <I2C_ITSlaveCplt+0x50>
 800cb06:	7bfb      	ldrb	r3, [r7, #15]
 800cb08:	2b2a      	cmp	r3, #42	; 0x2a
 800cb0a:	d107      	bne.n	800cb1c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800cb0c:	f248 0102 	movw	r1, #32770	; 0x8002
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f000 fdaf 	bl	800d674 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2222      	movs	r2, #34	; 0x22
 800cb1a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	685a      	ldr	r2, [r3, #4]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb2a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	6859      	ldr	r1, [r3, #4]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	4b80      	ldr	r3, [pc, #512]	; (800cd38 <I2C_ITSlaveCplt+0x27c>)
 800cb38:	400b      	ands	r3, r1
 800cb3a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fb02 	bl	800d146 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	0b9b      	lsrs	r3, r3, #14
 800cb46:	f003 0301 	and.w	r3, r3, #1
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d07a      	beq.n	800cc44 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cb5c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f000 8111 	beq.w	800cd8a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4a73      	ldr	r2, [pc, #460]	; (800cd3c <I2C_ITSlaveCplt+0x280>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d059      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a71      	ldr	r2, [pc, #452]	; (800cd40 <I2C_ITSlaveCplt+0x284>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d053      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a6f      	ldr	r2, [pc, #444]	; (800cd44 <I2C_ITSlaveCplt+0x288>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d04d      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a6d      	ldr	r2, [pc, #436]	; (800cd48 <I2C_ITSlaveCplt+0x28c>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d047      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a6b      	ldr	r2, [pc, #428]	; (800cd4c <I2C_ITSlaveCplt+0x290>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d041      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a69      	ldr	r2, [pc, #420]	; (800cd50 <I2C_ITSlaveCplt+0x294>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d03b      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a67      	ldr	r2, [pc, #412]	; (800cd54 <I2C_ITSlaveCplt+0x298>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d035      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4a65      	ldr	r2, [pc, #404]	; (800cd58 <I2C_ITSlaveCplt+0x29c>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d02f      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a63      	ldr	r2, [pc, #396]	; (800cd5c <I2C_ITSlaveCplt+0x2a0>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d029      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a61      	ldr	r2, [pc, #388]	; (800cd60 <I2C_ITSlaveCplt+0x2a4>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d023      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a5f      	ldr	r2, [pc, #380]	; (800cd64 <I2C_ITSlaveCplt+0x2a8>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d01d      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a5d      	ldr	r2, [pc, #372]	; (800cd68 <I2C_ITSlaveCplt+0x2ac>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d017      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a5b      	ldr	r2, [pc, #364]	; (800cd6c <I2C_ITSlaveCplt+0x2b0>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d011      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a59      	ldr	r2, [pc, #356]	; (800cd70 <I2C_ITSlaveCplt+0x2b4>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d00b      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a57      	ldr	r2, [pc, #348]	; (800cd74 <I2C_ITSlaveCplt+0x2b8>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d005      	beq.n	800cc28 <I2C_ITSlaveCplt+0x16c>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4a55      	ldr	r2, [pc, #340]	; (800cd78 <I2C_ITSlaveCplt+0x2bc>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d105      	bne.n	800cc34 <I2C_ITSlaveCplt+0x178>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	e004      	b.n	800cc3e <I2C_ITSlaveCplt+0x182>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	8553      	strh	r3, [r2, #42]	; 0x2a
 800cc42:	e0a2      	b.n	800cd8a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	0bdb      	lsrs	r3, r3, #15
 800cc48:	f003 0301 	and.w	r3, r3, #1
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f000 809c 	beq.w	800cd8a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cc60:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	f000 808f 	beq.w	800cd8a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a32      	ldr	r2, [pc, #200]	; (800cd3c <I2C_ITSlaveCplt+0x280>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d059      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a30      	ldr	r2, [pc, #192]	; (800cd40 <I2C_ITSlaveCplt+0x284>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d053      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a2e      	ldr	r2, [pc, #184]	; (800cd44 <I2C_ITSlaveCplt+0x288>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d04d      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a2c      	ldr	r2, [pc, #176]	; (800cd48 <I2C_ITSlaveCplt+0x28c>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d047      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4a2a      	ldr	r2, [pc, #168]	; (800cd4c <I2C_ITSlaveCplt+0x290>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d041      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4a28      	ldr	r2, [pc, #160]	; (800cd50 <I2C_ITSlaveCplt+0x294>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d03b      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a26      	ldr	r2, [pc, #152]	; (800cd54 <I2C_ITSlaveCplt+0x298>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d035      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a24      	ldr	r2, [pc, #144]	; (800cd58 <I2C_ITSlaveCplt+0x29c>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d02f      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4a22      	ldr	r2, [pc, #136]	; (800cd5c <I2C_ITSlaveCplt+0x2a0>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d029      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4a20      	ldr	r2, [pc, #128]	; (800cd60 <I2C_ITSlaveCplt+0x2a4>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d023      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a1e      	ldr	r2, [pc, #120]	; (800cd64 <I2C_ITSlaveCplt+0x2a8>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d01d      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a1c      	ldr	r2, [pc, #112]	; (800cd68 <I2C_ITSlaveCplt+0x2ac>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d017      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a1a      	ldr	r2, [pc, #104]	; (800cd6c <I2C_ITSlaveCplt+0x2b0>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d011      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a18      	ldr	r2, [pc, #96]	; (800cd70 <I2C_ITSlaveCplt+0x2b4>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d00b      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a16      	ldr	r2, [pc, #88]	; (800cd74 <I2C_ITSlaveCplt+0x2b8>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d005      	beq.n	800cd2c <I2C_ITSlaveCplt+0x270>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a14      	ldr	r2, [pc, #80]	; (800cd78 <I2C_ITSlaveCplt+0x2bc>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d127      	bne.n	800cd7c <I2C_ITSlaveCplt+0x2c0>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	e026      	b.n	800cd86 <I2C_ITSlaveCplt+0x2ca>
 800cd38:	fe00e800 	.word	0xfe00e800
 800cd3c:	40020010 	.word	0x40020010
 800cd40:	40020028 	.word	0x40020028
 800cd44:	40020040 	.word	0x40020040
 800cd48:	40020058 	.word	0x40020058
 800cd4c:	40020070 	.word	0x40020070
 800cd50:	40020088 	.word	0x40020088
 800cd54:	400200a0 	.word	0x400200a0
 800cd58:	400200b8 	.word	0x400200b8
 800cd5c:	40020410 	.word	0x40020410
 800cd60:	40020428 	.word	0x40020428
 800cd64:	40020440 	.word	0x40020440
 800cd68:	40020458 	.word	0x40020458
 800cd6c:	40020470 	.word	0x40020470
 800cd70:	40020488 	.word	0x40020488
 800cd74:	400204a0 	.word	0x400204a0
 800cd78:	400204b8 	.word	0x400204b8
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	089b      	lsrs	r3, r3, #2
 800cd8e:	f003 0301 	and.w	r3, r3, #1
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d020      	beq.n	800cdd8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	f023 0304 	bic.w	r3, r3, #4
 800cd9c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda8:	b2d2      	uxtb	r2, r2
 800cdaa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb0:	1c5a      	adds	r2, r3, #1
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00c      	beq.n	800cdd8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d005      	beq.n	800cdee <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cde6:	f043 0204 	orr.w	r2, r3, #4
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d010      	beq.n	800ce26 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce08:	4619      	mov	r1, r3
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f8a4 	bl	800cf58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	2b28      	cmp	r3, #40	; 0x28
 800ce1a:	d141      	bne.n	800cea0 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ce1c:	6979      	ldr	r1, [r7, #20]
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 f844 	bl	800ceac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ce24:	e03c      	b.n	800cea0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ce2e:	d014      	beq.n	800ce5a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f7ff fde5 	bl	800ca00 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	4a1b      	ldr	r2, [pc, #108]	; (800cea8 <I2C_ITSlaveCplt+0x3ec>)
 800ce3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2220      	movs	r2, #32
 800ce40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f7ff fc2f 	bl	800c6b6 <HAL_I2C_ListenCpltCallback>
}
 800ce58:	e022      	b.n	800cea0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	2b22      	cmp	r3, #34	; 0x22
 800ce64:	d10e      	bne.n	800ce84 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2220      	movs	r2, #32
 800ce6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7ff fc02 	bl	800c686 <HAL_I2C_SlaveRxCpltCallback>
}
 800ce82:	e00d      	b.n	800cea0 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2220      	movs	r2, #32
 800ce88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f7ff fbe9 	bl	800c672 <HAL_I2C_SlaveTxCpltCallback>
}
 800cea0:	bf00      	nop
 800cea2:	3718      	adds	r7, #24
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	ffff0000 	.word	0xffff0000

0800ceac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	4a26      	ldr	r2, [pc, #152]	; (800cf54 <I2C_ITListenCplt+0xa8>)
 800ceba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2220      	movs	r2, #32
 800cec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	089b      	lsrs	r3, r3, #2
 800cedc:	f003 0301 	and.w	r3, r3, #1
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d022      	beq.n	800cf2a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceee:	b2d2      	uxtb	r2, r2
 800cef0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef6:	1c5a      	adds	r2, r3, #1
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d012      	beq.n	800cf2a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf08:	3b01      	subs	r3, #1
 800cf0a:	b29a      	uxth	r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	3b01      	subs	r3, #1
 800cf18:	b29a      	uxth	r2, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf22:	f043 0204 	orr.w	r2, r3, #4
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cf2a:	f248 0103 	movw	r1, #32771	; 0x8003
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fba0 	bl	800d674 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2210      	movs	r2, #16
 800cf3a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7ff fbb6 	bl	800c6b6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cf4a:	bf00      	nop
 800cf4c:	3708      	adds	r7, #8
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	ffff0000 	.word	0xffff0000

0800cf58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	4a5d      	ldr	r2, [pc, #372]	; (800d0ec <I2C_ITError+0x194>)
 800cf76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	431a      	orrs	r2, r3
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cf8a:	7bfb      	ldrb	r3, [r7, #15]
 800cf8c:	2b28      	cmp	r3, #40	; 0x28
 800cf8e:	d005      	beq.n	800cf9c <I2C_ITError+0x44>
 800cf90:	7bfb      	ldrb	r3, [r7, #15]
 800cf92:	2b29      	cmp	r3, #41	; 0x29
 800cf94:	d002      	beq.n	800cf9c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cf96:	7bfb      	ldrb	r3, [r7, #15]
 800cf98:	2b2a      	cmp	r3, #42	; 0x2a
 800cf9a:	d10b      	bne.n	800cfb4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cf9c:	2103      	movs	r1, #3
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 fb68 	bl	800d674 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2228      	movs	r2, #40	; 0x28
 800cfa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4a50      	ldr	r2, [pc, #320]	; (800d0f0 <I2C_ITError+0x198>)
 800cfb0:	635a      	str	r2, [r3, #52]	; 0x34
 800cfb2:	e011      	b.n	800cfd8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cfb4:	f248 0103 	movw	r1, #32771	; 0x8003
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 fb5b 	bl	800d674 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b60      	cmp	r3, #96	; 0x60
 800cfc8:	d003      	beq.n	800cfd2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2220      	movs	r2, #32
 800cfce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfdc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d039      	beq.n	800d05a <I2C_ITError+0x102>
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	2b11      	cmp	r3, #17
 800cfea:	d002      	beq.n	800cff2 <I2C_ITError+0x9a>
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	2b21      	cmp	r3, #33	; 0x21
 800cff0:	d133      	bne.n	800d05a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d000:	d107      	bne.n	800d012 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d010:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d016:	4618      	mov	r0, r3
 800d018:	f7fe fc2a 	bl	800b870 <HAL_DMA_GetState>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d017      	beq.n	800d052 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d026:	4a33      	ldr	r2, [pc, #204]	; (800d0f4 <I2C_ITError+0x19c>)
 800d028:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d036:	4618      	mov	r0, r3
 800d038:	f7fd faaa 	bl	800a590 <HAL_DMA_Abort_IT>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d04d      	beq.n	800d0de <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d04c:	4610      	mov	r0, r2
 800d04e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d050:	e045      	b.n	800d0de <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 f850 	bl	800d0f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d058:	e041      	b.n	800d0de <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d039      	beq.n	800d0d6 <I2C_ITError+0x17e>
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	2b12      	cmp	r3, #18
 800d066:	d002      	beq.n	800d06e <I2C_ITError+0x116>
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	2b22      	cmp	r3, #34	; 0x22
 800d06c:	d133      	bne.n	800d0d6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d07c:	d107      	bne.n	800d08e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d08c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d092:	4618      	mov	r0, r3
 800d094:	f7fe fbec 	bl	800b870 <HAL_DMA_GetState>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d017      	beq.n	800d0ce <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0a2:	4a14      	ldr	r2, [pc, #80]	; (800d0f4 <I2C_ITError+0x19c>)
 800d0a4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fd fa6c 	bl	800a590 <HAL_DMA_Abort_IT>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d011      	beq.n	800d0e2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d0cc:	e009      	b.n	800d0e2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f812 	bl	800d0f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d0d4:	e005      	b.n	800d0e2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f80e 	bl	800d0f8 <I2C_TreatErrorCallback>
  }
}
 800d0dc:	e002      	b.n	800d0e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d0de:	bf00      	nop
 800d0e0:	e000      	b.n	800d0e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d0e2:	bf00      	nop
}
 800d0e4:	bf00      	nop
 800d0e6:	3710      	adds	r7, #16
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}
 800d0ec:	ffff0000 	.word	0xffff0000
 800d0f0:	0800c6f3 	.word	0x0800c6f3
 800d0f4:	0800d18f 	.word	0x0800d18f

0800d0f8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d106:	b2db      	uxtb	r3, r3
 800d108:	2b60      	cmp	r3, #96	; 0x60
 800d10a:	d10e      	bne.n	800d12a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2220      	movs	r2, #32
 800d110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f7ff fadb 	bl	800c6de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d128:	e009      	b.n	800d13e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f7ff fac6 	bl	800c6ca <HAL_I2C_ErrorCallback>
}
 800d13e:	bf00      	nop
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d146:	b480      	push	{r7}
 800d148:	b083      	sub	sp, #12
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	699b      	ldr	r3, [r3, #24]
 800d154:	f003 0302 	and.w	r3, r3, #2
 800d158:	2b02      	cmp	r3, #2
 800d15a:	d103      	bne.n	800d164 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2200      	movs	r2, #0
 800d162:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	f003 0301 	and.w	r3, r3, #1
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d007      	beq.n	800d182 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	699a      	ldr	r2, [r3, #24]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f042 0201 	orr.w	r2, r2, #1
 800d180:	619a      	str	r2, [r3, #24]
  }
}
 800d182:	bf00      	nop
 800d184:	370c      	adds	r7, #12
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr

0800d18e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b084      	sub	sp, #16
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d003      	beq.n	800d1ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d003      	beq.n	800d1bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f7ff ff9b 	bl	800d0f8 <I2C_TreatErrorCallback>
}
 800d1c2:	bf00      	nop
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}

0800d1ca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d1ca:	b580      	push	{r7, lr}
 800d1cc:	b084      	sub	sp, #16
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	60f8      	str	r0, [r7, #12]
 800d1d2:	60b9      	str	r1, [r7, #8]
 800d1d4:	603b      	str	r3, [r7, #0]
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d1da:	e022      	b.n	800d222 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e2:	d01e      	beq.n	800d222 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1e4:	f7f9 fed0 	bl	8006f88 <HAL_GetTick>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	1ad3      	subs	r3, r2, r3
 800d1ee:	683a      	ldr	r2, [r7, #0]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d302      	bcc.n	800d1fa <I2C_WaitOnFlagUntilTimeout+0x30>
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d113      	bne.n	800d222 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1fe:	f043 0220 	orr.w	r2, r3, #32
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2220      	movs	r2, #32
 800d20a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2200      	movs	r2, #0
 800d212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2200      	movs	r2, #0
 800d21a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800d21e:	2301      	movs	r3, #1
 800d220:	e00f      	b.n	800d242 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	699a      	ldr	r2, [r3, #24]
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	4013      	ands	r3, r2
 800d22c:	68ba      	ldr	r2, [r7, #8]
 800d22e:	429a      	cmp	r2, r3
 800d230:	bf0c      	ite	eq
 800d232:	2301      	moveq	r3, #1
 800d234:	2300      	movne	r3, #0
 800d236:	b2db      	uxtb	r3, r3
 800d238:	461a      	mov	r2, r3
 800d23a:	79fb      	ldrb	r3, [r7, #7]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d0cd      	beq.n	800d1dc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b084      	sub	sp, #16
 800d24e:	af00      	add	r7, sp, #0
 800d250:	60f8      	str	r0, [r7, #12]
 800d252:	60b9      	str	r1, [r7, #8]
 800d254:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d256:	e02c      	b.n	800d2b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	68b9      	ldr	r1, [r7, #8]
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	f000 f8eb 	bl	800d438 <I2C_IsErrorOccurred>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d268:	2301      	movs	r3, #1
 800d26a:	e02a      	b.n	800d2c2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d272:	d01e      	beq.n	800d2b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d274:	f7f9 fe88 	bl	8006f88 <HAL_GetTick>
 800d278:	4602      	mov	r2, r0
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	429a      	cmp	r2, r3
 800d282:	d302      	bcc.n	800d28a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d113      	bne.n	800d2b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d28e:	f043 0220 	orr.w	r2, r3, #32
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2220      	movs	r2, #32
 800d29a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e007      	b.n	800d2c2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	699b      	ldr	r3, [r3, #24]
 800d2b8:	f003 0302 	and.w	r3, r3, #2
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d1cb      	bne.n	800d258 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b084      	sub	sp, #16
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	60f8      	str	r0, [r7, #12]
 800d2d2:	60b9      	str	r1, [r7, #8]
 800d2d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d2d6:	e028      	b.n	800d32a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	68b9      	ldr	r1, [r7, #8]
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f000 f8ab 	bl	800d438 <I2C_IsErrorOccurred>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d001      	beq.n	800d2ec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	e026      	b.n	800d33a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2ec:	f7f9 fe4c 	bl	8006f88 <HAL_GetTick>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	1ad3      	subs	r3, r2, r3
 800d2f6:	68ba      	ldr	r2, [r7, #8]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d302      	bcc.n	800d302 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d113      	bne.n	800d32a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d306:	f043 0220 	orr.w	r2, r3, #32
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2220      	movs	r2, #32
 800d312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2200      	movs	r2, #0
 800d31a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d326:	2301      	movs	r3, #1
 800d328:	e007      	b.n	800d33a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	699b      	ldr	r3, [r3, #24]
 800d330:	f003 0320 	and.w	r3, r3, #32
 800d334:	2b20      	cmp	r3, #32
 800d336:	d1cf      	bne.n	800d2d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3710      	adds	r7, #16
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
	...

0800d344 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d350:	e064      	b.n	800d41c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	68b9      	ldr	r1, [r7, #8]
 800d356:	68f8      	ldr	r0, [r7, #12]
 800d358:	f000 f86e 	bl	800d438 <I2C_IsErrorOccurred>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d001      	beq.n	800d366 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d362:	2301      	movs	r3, #1
 800d364:	e062      	b.n	800d42c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	f003 0320 	and.w	r3, r3, #32
 800d370:	2b20      	cmp	r3, #32
 800d372:	d138      	bne.n	800d3e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	699b      	ldr	r3, [r3, #24]
 800d37a:	f003 0304 	and.w	r3, r3, #4
 800d37e:	2b04      	cmp	r3, #4
 800d380:	d105      	bne.n	800d38e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d386:	2b00      	cmp	r3, #0
 800d388:	d001      	beq.n	800d38e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800d38a:	2300      	movs	r3, #0
 800d38c:	e04e      	b.n	800d42c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	699b      	ldr	r3, [r3, #24]
 800d394:	f003 0310 	and.w	r3, r3, #16
 800d398:	2b10      	cmp	r3, #16
 800d39a:	d107      	bne.n	800d3ac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2210      	movs	r2, #16
 800d3a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2204      	movs	r2, #4
 800d3a8:	645a      	str	r2, [r3, #68]	; 0x44
 800d3aa:	e002      	b.n	800d3b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	2220      	movs	r2, #32
 800d3b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	6859      	ldr	r1, [r3, #4]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	4b1b      	ldr	r3, [pc, #108]	; (800d434 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800d3c6:	400b      	ands	r3, r1
 800d3c8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2220      	movs	r2, #32
 800d3ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e022      	b.n	800d42c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3e6:	f7f9 fdcf 	bl	8006f88 <HAL_GetTick>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	1ad3      	subs	r3, r2, r3
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d302      	bcc.n	800d3fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d10f      	bne.n	800d41c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d400:	f043 0220 	orr.w	r2, r3, #32
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2220      	movs	r2, #32
 800d40c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2200      	movs	r2, #0
 800d414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d418:	2301      	movs	r3, #1
 800d41a:	e007      	b.n	800d42c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	699b      	ldr	r3, [r3, #24]
 800d422:	f003 0304 	and.w	r3, r3, #4
 800d426:	2b04      	cmp	r3, #4
 800d428:	d193      	bne.n	800d352 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d42a:	2300      	movs	r3, #0
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	fe00e800 	.word	0xfe00e800

0800d438 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b08a      	sub	sp, #40	; 0x28
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d444:	2300      	movs	r3, #0
 800d446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	699b      	ldr	r3, [r3, #24]
 800d450:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d452:	2300      	movs	r3, #0
 800d454:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	f003 0310 	and.w	r3, r3, #16
 800d460:	2b00      	cmp	r3, #0
 800d462:	d075      	beq.n	800d550 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	2210      	movs	r2, #16
 800d46a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d46c:	e056      	b.n	800d51c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d474:	d052      	beq.n	800d51c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d476:	f7f9 fd87 	bl	8006f88 <HAL_GetTick>
 800d47a:	4602      	mov	r2, r0
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	1ad3      	subs	r3, r2, r3
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	429a      	cmp	r2, r3
 800d484:	d302      	bcc.n	800d48c <I2C_IsErrorOccurred+0x54>
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d147      	bne.n	800d51c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d496:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d49e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	699b      	ldr	r3, [r3, #24]
 800d4a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4ae:	d12e      	bne.n	800d50e <I2C_IsErrorOccurred+0xd6>
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4b6:	d02a      	beq.n	800d50e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800d4b8:	7cfb      	ldrb	r3, [r7, #19]
 800d4ba:	2b20      	cmp	r3, #32
 800d4bc:	d027      	beq.n	800d50e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	685a      	ldr	r2, [r3, #4]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d4cc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d4ce:	f7f9 fd5b 	bl	8006f88 <HAL_GetTick>
 800d4d2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d4d4:	e01b      	b.n	800d50e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d4d6:	f7f9 fd57 	bl	8006f88 <HAL_GetTick>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	1ad3      	subs	r3, r2, r3
 800d4e0:	2b19      	cmp	r3, #25
 800d4e2:	d914      	bls.n	800d50e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4e8:	f043 0220 	orr.w	r2, r3, #32
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2220      	movs	r2, #32
 800d4f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2200      	movs	r2, #0
 800d504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800d508:	2301      	movs	r3, #1
 800d50a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	699b      	ldr	r3, [r3, #24]
 800d514:	f003 0320 	and.w	r3, r3, #32
 800d518:	2b20      	cmp	r3, #32
 800d51a:	d1dc      	bne.n	800d4d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	699b      	ldr	r3, [r3, #24]
 800d522:	f003 0320 	and.w	r3, r3, #32
 800d526:	2b20      	cmp	r3, #32
 800d528:	d003      	beq.n	800d532 <I2C_IsErrorOccurred+0xfa>
 800d52a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d09d      	beq.n	800d46e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d536:	2b00      	cmp	r3, #0
 800d538:	d103      	bne.n	800d542 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2220      	movs	r2, #32
 800d540:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d542:	6a3b      	ldr	r3, [r7, #32]
 800d544:	f043 0304 	orr.w	r3, r3, #4
 800d548:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d54a:	2301      	movs	r3, #1
 800d54c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	699b      	ldr	r3, [r3, #24]
 800d556:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d558:	69bb      	ldr	r3, [r7, #24]
 800d55a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d00b      	beq.n	800d57a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d562:	6a3b      	ldr	r3, [r7, #32]
 800d564:	f043 0301 	orr.w	r3, r3, #1
 800d568:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d572:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d574:	2301      	movs	r3, #1
 800d576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00b      	beq.n	800d59c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d584:	6a3b      	ldr	r3, [r7, #32]
 800d586:	f043 0308 	orr.w	r3, r3, #8
 800d58a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d594:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00b      	beq.n	800d5be <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d5a6:	6a3b      	ldr	r3, [r7, #32]
 800d5a8:	f043 0302 	orr.w	r3, r3, #2
 800d5ac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800d5be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d01c      	beq.n	800d600 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f7ff fdbd 	bl	800d146 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	6859      	ldr	r1, [r3, #4]
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	4b0d      	ldr	r3, [pc, #52]	; (800d60c <I2C_IsErrorOccurred+0x1d4>)
 800d5d8:	400b      	ands	r3, r1
 800d5da:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5e0:	6a3b      	ldr	r3, [r7, #32]
 800d5e2:	431a      	orrs	r2, r3
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2220      	movs	r2, #32
 800d5ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800d600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d604:	4618      	mov	r0, r3
 800d606:	3728      	adds	r7, #40	; 0x28
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	fe00e800 	.word	0xfe00e800

0800d610 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d610:	b480      	push	{r7}
 800d612:	b087      	sub	sp, #28
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	607b      	str	r3, [r7, #4]
 800d61a:	460b      	mov	r3, r1
 800d61c:	817b      	strh	r3, [r7, #10]
 800d61e:	4613      	mov	r3, r2
 800d620:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d622:	897b      	ldrh	r3, [r7, #10]
 800d624:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d628:	7a7b      	ldrb	r3, [r7, #9]
 800d62a:	041b      	lsls	r3, r3, #16
 800d62c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d630:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d636:	6a3b      	ldr	r3, [r7, #32]
 800d638:	4313      	orrs	r3, r2
 800d63a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d63e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	685a      	ldr	r2, [r3, #4]
 800d646:	6a3b      	ldr	r3, [r7, #32]
 800d648:	0d5b      	lsrs	r3, r3, #21
 800d64a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d64e:	4b08      	ldr	r3, [pc, #32]	; (800d670 <I2C_TransferConfig+0x60>)
 800d650:	430b      	orrs	r3, r1
 800d652:	43db      	mvns	r3, r3
 800d654:	ea02 0103 	and.w	r1, r2, r3
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	430a      	orrs	r2, r1
 800d660:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d662:	bf00      	nop
 800d664:	371c      	adds	r7, #28
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	03ff63ff 	.word	0x03ff63ff

0800d674 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	460b      	mov	r3, r1
 800d67e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d680:	2300      	movs	r3, #0
 800d682:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d684:	887b      	ldrh	r3, [r7, #2]
 800d686:	f003 0301 	and.w	r3, r3, #1
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00f      	beq.n	800d6ae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d694:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d6a2:	2b28      	cmp	r3, #40	; 0x28
 800d6a4:	d003      	beq.n	800d6ae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d6ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d6ae:	887b      	ldrh	r3, [r7, #2]
 800d6b0:	f003 0302 	and.w	r3, r3, #2
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00f      	beq.n	800d6d8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d6be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d6cc:	2b28      	cmp	r3, #40	; 0x28
 800d6ce:	d003      	beq.n	800d6d8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d6d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d6d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	da03      	bge.n	800d6e8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d6e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d6e8:	887b      	ldrh	r3, [r7, #2]
 800d6ea:	2b10      	cmp	r3, #16
 800d6ec:	d103      	bne.n	800d6f6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d6f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d6f6:	887b      	ldrh	r3, [r7, #2]
 800d6f8:	2b20      	cmp	r3, #32
 800d6fa:	d103      	bne.n	800d704 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f043 0320 	orr.w	r3, r3, #32
 800d702:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d704:	887b      	ldrh	r3, [r7, #2]
 800d706:	2b40      	cmp	r3, #64	; 0x40
 800d708:	d103      	bne.n	800d712 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d710:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	6819      	ldr	r1, [r3, #0]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	43da      	mvns	r2, r3
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	400a      	ands	r2, r1
 800d722:	601a      	str	r2, [r3, #0]
}
 800d724:	bf00      	nop
 800d726:	3714      	adds	r7, #20
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr

0800d730 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d730:	b480      	push	{r7}
 800d732:	b083      	sub	sp, #12
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d740:	b2db      	uxtb	r3, r3
 800d742:	2b20      	cmp	r3, #32
 800d744:	d138      	bne.n	800d7b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d101      	bne.n	800d754 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d750:	2302      	movs	r3, #2
 800d752:	e032      	b.n	800d7ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2224      	movs	r2, #36	; 0x24
 800d760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f022 0201 	bic.w	r2, r2, #1
 800d772:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d782:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	6819      	ldr	r1, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	430a      	orrs	r2, r1
 800d792:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f042 0201 	orr.w	r2, r2, #1
 800d7a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2220      	movs	r2, #32
 800d7a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	e000      	b.n	800d7ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d7b8:	2302      	movs	r3, #2
  }
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	370c      	adds	r7, #12
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr

0800d7c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d7c6:	b480      	push	{r7}
 800d7c8:	b085      	sub	sp, #20
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
 800d7ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d7d6:	b2db      	uxtb	r3, r3
 800d7d8:	2b20      	cmp	r3, #32
 800d7da:	d139      	bne.n	800d850 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d101      	bne.n	800d7ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d7e6:	2302      	movs	r3, #2
 800d7e8:	e033      	b.n	800d852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2224      	movs	r2, #36	; 0x24
 800d7f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f022 0201 	bic.w	r2, r2, #1
 800d808:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d818:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	021b      	lsls	r3, r3, #8
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	4313      	orrs	r3, r2
 800d822:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f042 0201 	orr.w	r2, r2, #1
 800d83a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2220      	movs	r2, #32
 800d840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2200      	movs	r2, #0
 800d848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d84c:	2300      	movs	r3, #0
 800d84e:	e000      	b.n	800d852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d850:	2302      	movs	r3, #2
  }
}
 800d852:	4618      	mov	r0, r3
 800d854:	3714      	adds	r7, #20
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
	...

0800d860 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d868:	4b19      	ldr	r3, [pc, #100]	; (800d8d0 <HAL_PWREx_ConfigSupply+0x70>)
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	f003 0304 	and.w	r3, r3, #4
 800d870:	2b04      	cmp	r3, #4
 800d872:	d00a      	beq.n	800d88a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d874:	4b16      	ldr	r3, [pc, #88]	; (800d8d0 <HAL_PWREx_ConfigSupply+0x70>)
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	f003 0307 	and.w	r3, r3, #7
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d001      	beq.n	800d886 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d882:	2301      	movs	r3, #1
 800d884:	e01f      	b.n	800d8c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d886:	2300      	movs	r3, #0
 800d888:	e01d      	b.n	800d8c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d88a:	4b11      	ldr	r3, [pc, #68]	; (800d8d0 <HAL_PWREx_ConfigSupply+0x70>)
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	f023 0207 	bic.w	r2, r3, #7
 800d892:	490f      	ldr	r1, [pc, #60]	; (800d8d0 <HAL_PWREx_ConfigSupply+0x70>)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	4313      	orrs	r3, r2
 800d898:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d89a:	f7f9 fb75 	bl	8006f88 <HAL_GetTick>
 800d89e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d8a0:	e009      	b.n	800d8b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d8a2:	f7f9 fb71 	bl	8006f88 <HAL_GetTick>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	1ad3      	subs	r3, r2, r3
 800d8ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8b0:	d901      	bls.n	800d8b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e007      	b.n	800d8c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d8b6:	4b06      	ldr	r3, [pc, #24]	; (800d8d0 <HAL_PWREx_ConfigSupply+0x70>)
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d8be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8c2:	d1ee      	bne.n	800d8a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3710      	adds	r7, #16
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	58024800 	.word	0x58024800

0800d8d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b08c      	sub	sp, #48	; 0x30
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d101      	bne.n	800d8e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e39d      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f003 0301 	and.w	r3, r3, #1
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f000 8087 	beq.w	800da02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d8f4:	4b88      	ldr	r3, [pc, #544]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d8f6:	691b      	ldr	r3, [r3, #16]
 800d8f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d8fe:	4b86      	ldr	r3, [pc, #536]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d902:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	2b10      	cmp	r3, #16
 800d908:	d007      	beq.n	800d91a <HAL_RCC_OscConfig+0x46>
 800d90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90c:	2b18      	cmp	r3, #24
 800d90e:	d110      	bne.n	800d932 <HAL_RCC_OscConfig+0x5e>
 800d910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d912:	f003 0303 	and.w	r3, r3, #3
 800d916:	2b02      	cmp	r3, #2
 800d918:	d10b      	bne.n	800d932 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d91a:	4b7f      	ldr	r3, [pc, #508]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d922:	2b00      	cmp	r3, #0
 800d924:	d06c      	beq.n	800da00 <HAL_RCC_OscConfig+0x12c>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d168      	bne.n	800da00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800d92e:	2301      	movs	r3, #1
 800d930:	e377      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d93a:	d106      	bne.n	800d94a <HAL_RCC_OscConfig+0x76>
 800d93c:	4b76      	ldr	r3, [pc, #472]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a75      	ldr	r2, [pc, #468]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	e02e      	b.n	800d9a8 <HAL_RCC_OscConfig+0xd4>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d10c      	bne.n	800d96c <HAL_RCC_OscConfig+0x98>
 800d952:	4b71      	ldr	r3, [pc, #452]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a70      	ldr	r2, [pc, #448]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d95c:	6013      	str	r3, [r2, #0]
 800d95e:	4b6e      	ldr	r3, [pc, #440]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4a6d      	ldr	r2, [pc, #436]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d968:	6013      	str	r3, [r2, #0]
 800d96a:	e01d      	b.n	800d9a8 <HAL_RCC_OscConfig+0xd4>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d974:	d10c      	bne.n	800d990 <HAL_RCC_OscConfig+0xbc>
 800d976:	4b68      	ldr	r3, [pc, #416]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4a67      	ldr	r2, [pc, #412]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d97c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d980:	6013      	str	r3, [r2, #0]
 800d982:	4b65      	ldr	r3, [pc, #404]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4a64      	ldr	r2, [pc, #400]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d98c:	6013      	str	r3, [r2, #0]
 800d98e:	e00b      	b.n	800d9a8 <HAL_RCC_OscConfig+0xd4>
 800d990:	4b61      	ldr	r3, [pc, #388]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a60      	ldr	r2, [pc, #384]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d99a:	6013      	str	r3, [r2, #0]
 800d99c:	4b5e      	ldr	r3, [pc, #376]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a5d      	ldr	r2, [pc, #372]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d9a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d9a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d013      	beq.n	800d9d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9b0:	f7f9 faea 	bl	8006f88 <HAL_GetTick>
 800d9b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d9b6:	e008      	b.n	800d9ca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d9b8:	f7f9 fae6 	bl	8006f88 <HAL_GetTick>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	2b64      	cmp	r3, #100	; 0x64
 800d9c4:	d901      	bls.n	800d9ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800d9c6:	2303      	movs	r3, #3
 800d9c8:	e32b      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d9ca:	4b53      	ldr	r3, [pc, #332]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d0f0      	beq.n	800d9b8 <HAL_RCC_OscConfig+0xe4>
 800d9d6:	e014      	b.n	800da02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9d8:	f7f9 fad6 	bl	8006f88 <HAL_GetTick>
 800d9dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d9de:	e008      	b.n	800d9f2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d9e0:	f7f9 fad2 	bl	8006f88 <HAL_GetTick>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e8:	1ad3      	subs	r3, r2, r3
 800d9ea:	2b64      	cmp	r3, #100	; 0x64
 800d9ec:	d901      	bls.n	800d9f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800d9ee:	2303      	movs	r3, #3
 800d9f0:	e317      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d9f2:	4b49      	ldr	r3, [pc, #292]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d1f0      	bne.n	800d9e0 <HAL_RCC_OscConfig+0x10c>
 800d9fe:	e000      	b.n	800da02 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800da00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f003 0302 	and.w	r3, r3, #2
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f000 808c 	beq.w	800db28 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da10:	4b41      	ldr	r3, [pc, #260]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800da12:	691b      	ldr	r3, [r3, #16]
 800da14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da18:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800da1a:	4b3f      	ldr	r3, [pc, #252]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800da1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da1e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800da20:	6a3b      	ldr	r3, [r7, #32]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d007      	beq.n	800da36 <HAL_RCC_OscConfig+0x162>
 800da26:	6a3b      	ldr	r3, [r7, #32]
 800da28:	2b18      	cmp	r3, #24
 800da2a:	d137      	bne.n	800da9c <HAL_RCC_OscConfig+0x1c8>
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	f003 0303 	and.w	r3, r3, #3
 800da32:	2b00      	cmp	r3, #0
 800da34:	d132      	bne.n	800da9c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800da36:	4b38      	ldr	r3, [pc, #224]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f003 0304 	and.w	r3, r3, #4
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d005      	beq.n	800da4e <HAL_RCC_OscConfig+0x17a>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	68db      	ldr	r3, [r3, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d101      	bne.n	800da4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	e2e9      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800da4e:	4b32      	ldr	r3, [pc, #200]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f023 0219 	bic.w	r2, r3, #25
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	492f      	ldr	r1, [pc, #188]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800da5c:	4313      	orrs	r3, r2
 800da5e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800da60:	f7f9 fa92 	bl	8006f88 <HAL_GetTick>
 800da64:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800da66:	e008      	b.n	800da7a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800da68:	f7f9 fa8e 	bl	8006f88 <HAL_GetTick>
 800da6c:	4602      	mov	r2, r0
 800da6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	2b02      	cmp	r3, #2
 800da74:	d901      	bls.n	800da7a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800da76:	2303      	movs	r3, #3
 800da78:	e2d3      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800da7a:	4b27      	ldr	r3, [pc, #156]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f003 0304 	and.w	r3, r3, #4
 800da82:	2b00      	cmp	r3, #0
 800da84:	d0f0      	beq.n	800da68 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da86:	4b24      	ldr	r3, [pc, #144]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	691b      	ldr	r3, [r3, #16]
 800da92:	061b      	lsls	r3, r3, #24
 800da94:	4920      	ldr	r1, [pc, #128]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800da96:	4313      	orrs	r3, r2
 800da98:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800da9a:	e045      	b.n	800db28 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d026      	beq.n	800daf2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800daa4:	4b1c      	ldr	r3, [pc, #112]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f023 0219 	bic.w	r2, r3, #25
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	68db      	ldr	r3, [r3, #12]
 800dab0:	4919      	ldr	r1, [pc, #100]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800dab2:	4313      	orrs	r3, r2
 800dab4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dab6:	f7f9 fa67 	bl	8006f88 <HAL_GetTick>
 800daba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dabc:	e008      	b.n	800dad0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dabe:	f7f9 fa63 	bl	8006f88 <HAL_GetTick>
 800dac2:	4602      	mov	r2, r0
 800dac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	2b02      	cmp	r3, #2
 800daca:	d901      	bls.n	800dad0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800dacc:	2303      	movs	r3, #3
 800dace:	e2a8      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dad0:	4b11      	ldr	r3, [pc, #68]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f003 0304 	and.w	r3, r3, #4
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d0f0      	beq.n	800dabe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dadc:	4b0e      	ldr	r3, [pc, #56]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	691b      	ldr	r3, [r3, #16]
 800dae8:	061b      	lsls	r3, r3, #24
 800daea:	490b      	ldr	r1, [pc, #44]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800daec:	4313      	orrs	r3, r2
 800daee:	604b      	str	r3, [r1, #4]
 800daf0:	e01a      	b.n	800db28 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800daf2:	4b09      	ldr	r3, [pc, #36]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a08      	ldr	r2, [pc, #32]	; (800db18 <HAL_RCC_OscConfig+0x244>)
 800daf8:	f023 0301 	bic.w	r3, r3, #1
 800dafc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dafe:	f7f9 fa43 	bl	8006f88 <HAL_GetTick>
 800db02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800db04:	e00a      	b.n	800db1c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800db06:	f7f9 fa3f 	bl	8006f88 <HAL_GetTick>
 800db0a:	4602      	mov	r2, r0
 800db0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0e:	1ad3      	subs	r3, r2, r3
 800db10:	2b02      	cmp	r3, #2
 800db12:	d903      	bls.n	800db1c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800db14:	2303      	movs	r3, #3
 800db16:	e284      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
 800db18:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800db1c:	4b96      	ldr	r3, [pc, #600]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f003 0304 	and.w	r3, r3, #4
 800db24:	2b00      	cmp	r3, #0
 800db26:	d1ee      	bne.n	800db06 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f003 0310 	and.w	r3, r3, #16
 800db30:	2b00      	cmp	r3, #0
 800db32:	d06a      	beq.n	800dc0a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800db34:	4b90      	ldr	r3, [pc, #576]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db3c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800db3e:	4b8e      	ldr	r3, [pc, #568]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800db40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db42:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800db44:	69bb      	ldr	r3, [r7, #24]
 800db46:	2b08      	cmp	r3, #8
 800db48:	d007      	beq.n	800db5a <HAL_RCC_OscConfig+0x286>
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	2b18      	cmp	r3, #24
 800db4e:	d11b      	bne.n	800db88 <HAL_RCC_OscConfig+0x2b4>
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	f003 0303 	and.w	r3, r3, #3
 800db56:	2b01      	cmp	r3, #1
 800db58:	d116      	bne.n	800db88 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800db5a:	4b87      	ldr	r3, [pc, #540]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db62:	2b00      	cmp	r3, #0
 800db64:	d005      	beq.n	800db72 <HAL_RCC_OscConfig+0x29e>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	69db      	ldr	r3, [r3, #28]
 800db6a:	2b80      	cmp	r3, #128	; 0x80
 800db6c:	d001      	beq.n	800db72 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800db6e:	2301      	movs	r3, #1
 800db70:	e257      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800db72:	4b81      	ldr	r3, [pc, #516]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	061b      	lsls	r3, r3, #24
 800db80:	497d      	ldr	r1, [pc, #500]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800db82:	4313      	orrs	r3, r2
 800db84:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800db86:	e040      	b.n	800dc0a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	69db      	ldr	r3, [r3, #28]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d023      	beq.n	800dbd8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800db90:	4b79      	ldr	r3, [pc, #484]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a78      	ldr	r2, [pc, #480]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800db96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db9c:	f7f9 f9f4 	bl	8006f88 <HAL_GetTick>
 800dba0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dba2:	e008      	b.n	800dbb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800dba4:	f7f9 f9f0 	bl	8006f88 <HAL_GetTick>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	2b02      	cmp	r3, #2
 800dbb0:	d901      	bls.n	800dbb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800dbb2:	2303      	movs	r3, #3
 800dbb4:	e235      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dbb6:	4b70      	ldr	r3, [pc, #448]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d0f0      	beq.n	800dba4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dbc2:	4b6d      	ldr	r3, [pc, #436]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dbc4:	68db      	ldr	r3, [r3, #12]
 800dbc6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6a1b      	ldr	r3, [r3, #32]
 800dbce:	061b      	lsls	r3, r3, #24
 800dbd0:	4969      	ldr	r1, [pc, #420]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	60cb      	str	r3, [r1, #12]
 800dbd6:	e018      	b.n	800dc0a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800dbd8:	4b67      	ldr	r3, [pc, #412]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a66      	ldr	r2, [pc, #408]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dbde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbe4:	f7f9 f9d0 	bl	8006f88 <HAL_GetTick>
 800dbe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dbea:	e008      	b.n	800dbfe <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800dbec:	f7f9 f9cc 	bl	8006f88 <HAL_GetTick>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf4:	1ad3      	subs	r3, r2, r3
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d901      	bls.n	800dbfe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800dbfa:	2303      	movs	r3, #3
 800dbfc:	e211      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dbfe:	4b5e      	ldr	r3, [pc, #376]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1f0      	bne.n	800dbec <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f003 0308 	and.w	r3, r3, #8
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d036      	beq.n	800dc84 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	695b      	ldr	r3, [r3, #20]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d019      	beq.n	800dc52 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dc1e:	4b56      	ldr	r3, [pc, #344]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dc20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc22:	4a55      	ldr	r2, [pc, #340]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dc24:	f043 0301 	orr.w	r3, r3, #1
 800dc28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc2a:	f7f9 f9ad 	bl	8006f88 <HAL_GetTick>
 800dc2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dc30:	e008      	b.n	800dc44 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dc32:	f7f9 f9a9 	bl	8006f88 <HAL_GetTick>
 800dc36:	4602      	mov	r2, r0
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	1ad3      	subs	r3, r2, r3
 800dc3c:	2b02      	cmp	r3, #2
 800dc3e:	d901      	bls.n	800dc44 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800dc40:	2303      	movs	r3, #3
 800dc42:	e1ee      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dc44:	4b4c      	ldr	r3, [pc, #304]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dc46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc48:	f003 0302 	and.w	r3, r3, #2
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d0f0      	beq.n	800dc32 <HAL_RCC_OscConfig+0x35e>
 800dc50:	e018      	b.n	800dc84 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dc52:	4b49      	ldr	r3, [pc, #292]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dc54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc56:	4a48      	ldr	r2, [pc, #288]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dc58:	f023 0301 	bic.w	r3, r3, #1
 800dc5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc5e:	f7f9 f993 	bl	8006f88 <HAL_GetTick>
 800dc62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dc64:	e008      	b.n	800dc78 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dc66:	f7f9 f98f 	bl	8006f88 <HAL_GetTick>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6e:	1ad3      	subs	r3, r2, r3
 800dc70:	2b02      	cmp	r3, #2
 800dc72:	d901      	bls.n	800dc78 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800dc74:	2303      	movs	r3, #3
 800dc76:	e1d4      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dc78:	4b3f      	ldr	r3, [pc, #252]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dc7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc7c:	f003 0302 	and.w	r3, r3, #2
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d1f0      	bne.n	800dc66 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f003 0320 	and.w	r3, r3, #32
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d036      	beq.n	800dcfe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	699b      	ldr	r3, [r3, #24]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d019      	beq.n	800dccc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800dc98:	4b37      	ldr	r3, [pc, #220]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a36      	ldr	r2, [pc, #216]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dc9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dca2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800dca4:	f7f9 f970 	bl	8006f88 <HAL_GetTick>
 800dca8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800dcaa:	e008      	b.n	800dcbe <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800dcac:	f7f9 f96c 	bl	8006f88 <HAL_GetTick>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb4:	1ad3      	subs	r3, r2, r3
 800dcb6:	2b02      	cmp	r3, #2
 800dcb8:	d901      	bls.n	800dcbe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800dcba:	2303      	movs	r3, #3
 800dcbc:	e1b1      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800dcbe:	4b2e      	ldr	r3, [pc, #184]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d0f0      	beq.n	800dcac <HAL_RCC_OscConfig+0x3d8>
 800dcca:	e018      	b.n	800dcfe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800dccc:	4b2a      	ldr	r3, [pc, #168]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a29      	ldr	r2, [pc, #164]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dcd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800dcd8:	f7f9 f956 	bl	8006f88 <HAL_GetTick>
 800dcdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800dcde:	e008      	b.n	800dcf2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800dce0:	f7f9 f952 	bl	8006f88 <HAL_GetTick>
 800dce4:	4602      	mov	r2, r0
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce8:	1ad3      	subs	r3, r2, r3
 800dcea:	2b02      	cmp	r3, #2
 800dcec:	d901      	bls.n	800dcf2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800dcee:	2303      	movs	r3, #3
 800dcf0:	e197      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800dcf2:	4b21      	ldr	r3, [pc, #132]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d1f0      	bne.n	800dce0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f003 0304 	and.w	r3, r3, #4
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f000 8086 	beq.w	800de18 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800dd0c:	4b1b      	ldr	r3, [pc, #108]	; (800dd7c <HAL_RCC_OscConfig+0x4a8>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a1a      	ldr	r2, [pc, #104]	; (800dd7c <HAL_RCC_OscConfig+0x4a8>)
 800dd12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dd18:	f7f9 f936 	bl	8006f88 <HAL_GetTick>
 800dd1c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dd1e:	e008      	b.n	800dd32 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800dd20:	f7f9 f932 	bl	8006f88 <HAL_GetTick>
 800dd24:	4602      	mov	r2, r0
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	2b64      	cmp	r3, #100	; 0x64
 800dd2c:	d901      	bls.n	800dd32 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800dd2e:	2303      	movs	r3, #3
 800dd30:	e177      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dd32:	4b12      	ldr	r3, [pc, #72]	; (800dd7c <HAL_RCC_OscConfig+0x4a8>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d0f0      	beq.n	800dd20 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d106      	bne.n	800dd54 <HAL_RCC_OscConfig+0x480>
 800dd46:	4b0c      	ldr	r3, [pc, #48]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dd48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd4a:	4a0b      	ldr	r2, [pc, #44]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dd4c:	f043 0301 	orr.w	r3, r3, #1
 800dd50:	6713      	str	r3, [r2, #112]	; 0x70
 800dd52:	e032      	b.n	800ddba <HAL_RCC_OscConfig+0x4e6>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d111      	bne.n	800dd80 <HAL_RCC_OscConfig+0x4ac>
 800dd5c:	4b06      	ldr	r3, [pc, #24]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dd5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd60:	4a05      	ldr	r2, [pc, #20]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dd62:	f023 0301 	bic.w	r3, r3, #1
 800dd66:	6713      	str	r3, [r2, #112]	; 0x70
 800dd68:	4b03      	ldr	r3, [pc, #12]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dd6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd6c:	4a02      	ldr	r2, [pc, #8]	; (800dd78 <HAL_RCC_OscConfig+0x4a4>)
 800dd6e:	f023 0304 	bic.w	r3, r3, #4
 800dd72:	6713      	str	r3, [r2, #112]	; 0x70
 800dd74:	e021      	b.n	800ddba <HAL_RCC_OscConfig+0x4e6>
 800dd76:	bf00      	nop
 800dd78:	58024400 	.word	0x58024400
 800dd7c:	58024800 	.word	0x58024800
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	2b05      	cmp	r3, #5
 800dd86:	d10c      	bne.n	800dda2 <HAL_RCC_OscConfig+0x4ce>
 800dd88:	4b83      	ldr	r3, [pc, #524]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800dd8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd8c:	4a82      	ldr	r2, [pc, #520]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800dd8e:	f043 0304 	orr.w	r3, r3, #4
 800dd92:	6713      	str	r3, [r2, #112]	; 0x70
 800dd94:	4b80      	ldr	r3, [pc, #512]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800dd96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd98:	4a7f      	ldr	r2, [pc, #508]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800dd9a:	f043 0301 	orr.w	r3, r3, #1
 800dd9e:	6713      	str	r3, [r2, #112]	; 0x70
 800dda0:	e00b      	b.n	800ddba <HAL_RCC_OscConfig+0x4e6>
 800dda2:	4b7d      	ldr	r3, [pc, #500]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800dda4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dda6:	4a7c      	ldr	r2, [pc, #496]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800dda8:	f023 0301 	bic.w	r3, r3, #1
 800ddac:	6713      	str	r3, [r2, #112]	; 0x70
 800ddae:	4b7a      	ldr	r3, [pc, #488]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800ddb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddb2:	4a79      	ldr	r2, [pc, #484]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800ddb4:	f023 0304 	bic.w	r3, r3, #4
 800ddb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	689b      	ldr	r3, [r3, #8]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d015      	beq.n	800ddee <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddc2:	f7f9 f8e1 	bl	8006f88 <HAL_GetTick>
 800ddc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ddc8:	e00a      	b.n	800dde0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ddca:	f7f9 f8dd 	bl	8006f88 <HAL_GetTick>
 800ddce:	4602      	mov	r2, r0
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd2:	1ad3      	subs	r3, r2, r3
 800ddd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d901      	bls.n	800dde0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800dddc:	2303      	movs	r3, #3
 800ddde:	e120      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dde0:	4b6d      	ldr	r3, [pc, #436]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800dde2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dde4:	f003 0302 	and.w	r3, r3, #2
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d0ee      	beq.n	800ddca <HAL_RCC_OscConfig+0x4f6>
 800ddec:	e014      	b.n	800de18 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddee:	f7f9 f8cb 	bl	8006f88 <HAL_GetTick>
 800ddf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ddf4:	e00a      	b.n	800de0c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ddf6:	f7f9 f8c7 	bl	8006f88 <HAL_GetTick>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfe:	1ad3      	subs	r3, r2, r3
 800de00:	f241 3288 	movw	r2, #5000	; 0x1388
 800de04:	4293      	cmp	r3, r2
 800de06:	d901      	bls.n	800de0c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800de08:	2303      	movs	r3, #3
 800de0a:	e10a      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800de0c:	4b62      	ldr	r3, [pc, #392]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800de0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de10:	f003 0302 	and.w	r3, r3, #2
 800de14:	2b00      	cmp	r3, #0
 800de16:	d1ee      	bne.n	800ddf6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	f000 80ff 	beq.w	800e020 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800de22:	4b5d      	ldr	r3, [pc, #372]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800de24:	691b      	ldr	r3, [r3, #16]
 800de26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de2a:	2b18      	cmp	r3, #24
 800de2c:	f000 80ba 	beq.w	800dfa4 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de34:	2b02      	cmp	r3, #2
 800de36:	f040 8095 	bne.w	800df64 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800de3a:	4b57      	ldr	r3, [pc, #348]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4a56      	ldr	r2, [pc, #344]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800de40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800de44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de46:	f7f9 f89f 	bl	8006f88 <HAL_GetTick>
 800de4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800de4c:	e008      	b.n	800de60 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800de4e:	f7f9 f89b 	bl	8006f88 <HAL_GetTick>
 800de52:	4602      	mov	r2, r0
 800de54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de56:	1ad3      	subs	r3, r2, r3
 800de58:	2b02      	cmp	r3, #2
 800de5a:	d901      	bls.n	800de60 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800de5c:	2303      	movs	r3, #3
 800de5e:	e0e0      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800de60:	4b4d      	ldr	r3, [pc, #308]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1f0      	bne.n	800de4e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800de6c:	4b4a      	ldr	r3, [pc, #296]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800de6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de70:	4b4a      	ldr	r3, [pc, #296]	; (800df9c <HAL_RCC_OscConfig+0x6c8>)
 800de72:	4013      	ands	r3, r2
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800de7c:	0112      	lsls	r2, r2, #4
 800de7e:	430a      	orrs	r2, r1
 800de80:	4945      	ldr	r1, [pc, #276]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800de82:	4313      	orrs	r3, r2
 800de84:	628b      	str	r3, [r1, #40]	; 0x28
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de8a:	3b01      	subs	r3, #1
 800de8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de94:	3b01      	subs	r3, #1
 800de96:	025b      	lsls	r3, r3, #9
 800de98:	b29b      	uxth	r3, r3
 800de9a:	431a      	orrs	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea0:	3b01      	subs	r3, #1
 800dea2:	041b      	lsls	r3, r3, #16
 800dea4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dea8:	431a      	orrs	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deae:	3b01      	subs	r3, #1
 800deb0:	061b      	lsls	r3, r3, #24
 800deb2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800deb6:	4938      	ldr	r1, [pc, #224]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800deb8:	4313      	orrs	r3, r2
 800deba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800debc:	4b36      	ldr	r3, [pc, #216]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800debe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec0:	4a35      	ldr	r2, [pc, #212]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800dec2:	f023 0301 	bic.w	r3, r3, #1
 800dec6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800dec8:	4b33      	ldr	r3, [pc, #204]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800deca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800decc:	4b34      	ldr	r3, [pc, #208]	; (800dfa0 <HAL_RCC_OscConfig+0x6cc>)
 800dece:	4013      	ands	r3, r2
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ded4:	00d2      	lsls	r2, r2, #3
 800ded6:	4930      	ldr	r1, [pc, #192]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800ded8:	4313      	orrs	r3, r2
 800deda:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800dedc:	4b2e      	ldr	r3, [pc, #184]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800dede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee0:	f023 020c 	bic.w	r2, r3, #12
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dee8:	492b      	ldr	r1, [pc, #172]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800deea:	4313      	orrs	r3, r2
 800deec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800deee:	4b2a      	ldr	r3, [pc, #168]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800def0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def2:	f023 0202 	bic.w	r2, r3, #2
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800defa:	4927      	ldr	r1, [pc, #156]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800defc:	4313      	orrs	r3, r2
 800defe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800df00:	4b25      	ldr	r3, [pc, #148]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800df02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df04:	4a24      	ldr	r2, [pc, #144]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800df06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df0c:	4b22      	ldr	r3, [pc, #136]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800df0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df10:	4a21      	ldr	r2, [pc, #132]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800df12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800df18:	4b1f      	ldr	r3, [pc, #124]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800df1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1c:	4a1e      	ldr	r2, [pc, #120]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800df1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800df22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800df24:	4b1c      	ldr	r3, [pc, #112]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800df26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df28:	4a1b      	ldr	r2, [pc, #108]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800df2a:	f043 0301 	orr.w	r3, r3, #1
 800df2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800df30:	4b19      	ldr	r3, [pc, #100]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a18      	ldr	r2, [pc, #96]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800df36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800df3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df3c:	f7f9 f824 	bl	8006f88 <HAL_GetTick>
 800df40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800df42:	e008      	b.n	800df56 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800df44:	f7f9 f820 	bl	8006f88 <HAL_GetTick>
 800df48:	4602      	mov	r2, r0
 800df4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4c:	1ad3      	subs	r3, r2, r3
 800df4e:	2b02      	cmp	r3, #2
 800df50:	d901      	bls.n	800df56 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800df52:	2303      	movs	r3, #3
 800df54:	e065      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800df56:	4b10      	ldr	r3, [pc, #64]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d0f0      	beq.n	800df44 <HAL_RCC_OscConfig+0x670>
 800df62:	e05d      	b.n	800e020 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800df64:	4b0c      	ldr	r3, [pc, #48]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a0b      	ldr	r2, [pc, #44]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800df6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800df6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df70:	f7f9 f80a 	bl	8006f88 <HAL_GetTick>
 800df74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800df76:	e008      	b.n	800df8a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800df78:	f7f9 f806 	bl	8006f88 <HAL_GetTick>
 800df7c:	4602      	mov	r2, r0
 800df7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	2b02      	cmp	r3, #2
 800df84:	d901      	bls.n	800df8a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800df86:	2303      	movs	r3, #3
 800df88:	e04b      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800df8a:	4b03      	ldr	r3, [pc, #12]	; (800df98 <HAL_RCC_OscConfig+0x6c4>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df92:	2b00      	cmp	r3, #0
 800df94:	d1f0      	bne.n	800df78 <HAL_RCC_OscConfig+0x6a4>
 800df96:	e043      	b.n	800e020 <HAL_RCC_OscConfig+0x74c>
 800df98:	58024400 	.word	0x58024400
 800df9c:	fffffc0c 	.word	0xfffffc0c
 800dfa0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800dfa4:	4b21      	ldr	r3, [pc, #132]	; (800e02c <HAL_RCC_OscConfig+0x758>)
 800dfa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfa8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800dfaa:	4b20      	ldr	r3, [pc, #128]	; (800e02c <HAL_RCC_OscConfig+0x758>)
 800dfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	d031      	beq.n	800e01c <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	f003 0203 	and.w	r2, r3, #3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d12a      	bne.n	800e01c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	091b      	lsrs	r3, r3, #4
 800dfca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d122      	bne.n	800e01c <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfe0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d11a      	bne.n	800e01c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	0a5b      	lsrs	r3, r3, #9
 800dfea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dff2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d111      	bne.n	800e01c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	0c1b      	lsrs	r3, r3, #16
 800dffc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e004:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e006:	429a      	cmp	r2, r3
 800e008:	d108      	bne.n	800e01c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	0e1b      	lsrs	r3, r3, #24
 800e00e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e016:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e018:	429a      	cmp	r2, r3
 800e01a:	d001      	beq.n	800e020 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800e01c:	2301      	movs	r3, #1
 800e01e:	e000      	b.n	800e022 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800e020:	2300      	movs	r3, #0
}
 800e022:	4618      	mov	r0, r3
 800e024:	3730      	adds	r7, #48	; 0x30
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	58024400 	.word	0x58024400

0800e030 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d101      	bne.n	800e044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e040:	2301      	movs	r3, #1
 800e042:	e19c      	b.n	800e37e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e044:	4b8a      	ldr	r3, [pc, #552]	; (800e270 <HAL_RCC_ClockConfig+0x240>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f003 030f 	and.w	r3, r3, #15
 800e04c:	683a      	ldr	r2, [r7, #0]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d910      	bls.n	800e074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e052:	4b87      	ldr	r3, [pc, #540]	; (800e270 <HAL_RCC_ClockConfig+0x240>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f023 020f 	bic.w	r2, r3, #15
 800e05a:	4985      	ldr	r1, [pc, #532]	; (800e270 <HAL_RCC_ClockConfig+0x240>)
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	4313      	orrs	r3, r2
 800e060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e062:	4b83      	ldr	r3, [pc, #524]	; (800e270 <HAL_RCC_ClockConfig+0x240>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f003 030f 	and.w	r3, r3, #15
 800e06a:	683a      	ldr	r2, [r7, #0]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d001      	beq.n	800e074 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e070:	2301      	movs	r3, #1
 800e072:	e184      	b.n	800e37e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f003 0304 	and.w	r3, r3, #4
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d010      	beq.n	800e0a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	691a      	ldr	r2, [r3, #16]
 800e084:	4b7b      	ldr	r3, [pc, #492]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e086:	699b      	ldr	r3, [r3, #24]
 800e088:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d908      	bls.n	800e0a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e090:	4b78      	ldr	r3, [pc, #480]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e092:	699b      	ldr	r3, [r3, #24]
 800e094:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	691b      	ldr	r3, [r3, #16]
 800e09c:	4975      	ldr	r1, [pc, #468]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f003 0308 	and.w	r3, r3, #8
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d010      	beq.n	800e0d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	695a      	ldr	r2, [r3, #20]
 800e0b2:	4b70      	ldr	r3, [pc, #448]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e0b4:	69db      	ldr	r3, [r3, #28]
 800e0b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d908      	bls.n	800e0d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e0be:	4b6d      	ldr	r3, [pc, #436]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e0c0:	69db      	ldr	r3, [r3, #28]
 800e0c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	695b      	ldr	r3, [r3, #20]
 800e0ca:	496a      	ldr	r1, [pc, #424]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f003 0310 	and.w	r3, r3, #16
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d010      	beq.n	800e0fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	699a      	ldr	r2, [r3, #24]
 800e0e0:	4b64      	ldr	r3, [pc, #400]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e0e2:	69db      	ldr	r3, [r3, #28]
 800e0e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d908      	bls.n	800e0fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e0ec:	4b61      	ldr	r3, [pc, #388]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e0ee:	69db      	ldr	r3, [r3, #28]
 800e0f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	699b      	ldr	r3, [r3, #24]
 800e0f8:	495e      	ldr	r1, [pc, #376]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f003 0320 	and.w	r3, r3, #32
 800e106:	2b00      	cmp	r3, #0
 800e108:	d010      	beq.n	800e12c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	69da      	ldr	r2, [r3, #28]
 800e10e:	4b59      	ldr	r3, [pc, #356]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e110:	6a1b      	ldr	r3, [r3, #32]
 800e112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e116:	429a      	cmp	r2, r3
 800e118:	d908      	bls.n	800e12c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800e11a:	4b56      	ldr	r3, [pc, #344]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e11c:	6a1b      	ldr	r3, [r3, #32]
 800e11e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	69db      	ldr	r3, [r3, #28]
 800e126:	4953      	ldr	r1, [pc, #332]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e128:	4313      	orrs	r3, r2
 800e12a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f003 0302 	and.w	r3, r3, #2
 800e134:	2b00      	cmp	r3, #0
 800e136:	d010      	beq.n	800e15a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	68da      	ldr	r2, [r3, #12]
 800e13c:	4b4d      	ldr	r3, [pc, #308]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e13e:	699b      	ldr	r3, [r3, #24]
 800e140:	f003 030f 	and.w	r3, r3, #15
 800e144:	429a      	cmp	r2, r3
 800e146:	d908      	bls.n	800e15a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e148:	4b4a      	ldr	r3, [pc, #296]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e14a:	699b      	ldr	r3, [r3, #24]
 800e14c:	f023 020f 	bic.w	r2, r3, #15
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	4947      	ldr	r1, [pc, #284]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e156:	4313      	orrs	r3, r2
 800e158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f003 0301 	and.w	r3, r3, #1
 800e162:	2b00      	cmp	r3, #0
 800e164:	d055      	beq.n	800e212 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e166:	4b43      	ldr	r3, [pc, #268]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e168:	699b      	ldr	r3, [r3, #24]
 800e16a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	4940      	ldr	r1, [pc, #256]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e174:	4313      	orrs	r3, r2
 800e176:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	2b02      	cmp	r3, #2
 800e17e:	d107      	bne.n	800e190 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e180:	4b3c      	ldr	r3, [pc, #240]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d121      	bne.n	800e1d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800e18c:	2301      	movs	r3, #1
 800e18e:	e0f6      	b.n	800e37e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	2b03      	cmp	r3, #3
 800e196:	d107      	bne.n	800e1a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e198:	4b36      	ldr	r3, [pc, #216]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d115      	bne.n	800e1d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	e0ea      	b.n	800e37e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d107      	bne.n	800e1c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e1b0:	4b30      	ldr	r3, [pc, #192]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d109      	bne.n	800e1d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e0de      	b.n	800e37e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e1c0:	4b2c      	ldr	r3, [pc, #176]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f003 0304 	and.w	r3, r3, #4
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d101      	bne.n	800e1d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	e0d6      	b.n	800e37e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e1d0:	4b28      	ldr	r3, [pc, #160]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e1d2:	691b      	ldr	r3, [r3, #16]
 800e1d4:	f023 0207 	bic.w	r2, r3, #7
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	4925      	ldr	r1, [pc, #148]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e1e2:	f7f8 fed1 	bl	8006f88 <HAL_GetTick>
 800e1e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e1e8:	e00a      	b.n	800e200 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e1ea:	f7f8 fecd 	bl	8006f88 <HAL_GetTick>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	1ad3      	subs	r3, r2, r3
 800e1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d901      	bls.n	800e200 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800e1fc:	2303      	movs	r3, #3
 800e1fe:	e0be      	b.n	800e37e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e200:	4b1c      	ldr	r3, [pc, #112]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e202:	691b      	ldr	r3, [r3, #16]
 800e204:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	00db      	lsls	r3, r3, #3
 800e20e:	429a      	cmp	r2, r3
 800e210:	d1eb      	bne.n	800e1ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f003 0302 	and.w	r3, r3, #2
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d010      	beq.n	800e240 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	68da      	ldr	r2, [r3, #12]
 800e222:	4b14      	ldr	r3, [pc, #80]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e224:	699b      	ldr	r3, [r3, #24]
 800e226:	f003 030f 	and.w	r3, r3, #15
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d208      	bcs.n	800e240 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e22e:	4b11      	ldr	r3, [pc, #68]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e230:	699b      	ldr	r3, [r3, #24]
 800e232:	f023 020f 	bic.w	r2, r3, #15
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	490e      	ldr	r1, [pc, #56]	; (800e274 <HAL_RCC_ClockConfig+0x244>)
 800e23c:	4313      	orrs	r3, r2
 800e23e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e240:	4b0b      	ldr	r3, [pc, #44]	; (800e270 <HAL_RCC_ClockConfig+0x240>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f003 030f 	and.w	r3, r3, #15
 800e248:	683a      	ldr	r2, [r7, #0]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d214      	bcs.n	800e278 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e24e:	4b08      	ldr	r3, [pc, #32]	; (800e270 <HAL_RCC_ClockConfig+0x240>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f023 020f 	bic.w	r2, r3, #15
 800e256:	4906      	ldr	r1, [pc, #24]	; (800e270 <HAL_RCC_ClockConfig+0x240>)
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	4313      	orrs	r3, r2
 800e25c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e25e:	4b04      	ldr	r3, [pc, #16]	; (800e270 <HAL_RCC_ClockConfig+0x240>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f003 030f 	and.w	r3, r3, #15
 800e266:	683a      	ldr	r2, [r7, #0]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d005      	beq.n	800e278 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	e086      	b.n	800e37e <HAL_RCC_ClockConfig+0x34e>
 800e270:	52002000 	.word	0x52002000
 800e274:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f003 0304 	and.w	r3, r3, #4
 800e280:	2b00      	cmp	r3, #0
 800e282:	d010      	beq.n	800e2a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	691a      	ldr	r2, [r3, #16]
 800e288:	4b3f      	ldr	r3, [pc, #252]	; (800e388 <HAL_RCC_ClockConfig+0x358>)
 800e28a:	699b      	ldr	r3, [r3, #24]
 800e28c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e290:	429a      	cmp	r2, r3
 800e292:	d208      	bcs.n	800e2a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e294:	4b3c      	ldr	r3, [pc, #240]	; (800e388 <HAL_RCC_ClockConfig+0x358>)
 800e296:	699b      	ldr	r3, [r3, #24]
 800e298:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	691b      	ldr	r3, [r3, #16]
 800e2a0:	4939      	ldr	r1, [pc, #228]	; (800e388 <HAL_RCC_ClockConfig+0x358>)
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f003 0308 	and.w	r3, r3, #8
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d010      	beq.n	800e2d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	695a      	ldr	r2, [r3, #20]
 800e2b6:	4b34      	ldr	r3, [pc, #208]	; (800e388 <HAL_RCC_ClockConfig+0x358>)
 800e2b8:	69db      	ldr	r3, [r3, #28]
 800e2ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d208      	bcs.n	800e2d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e2c2:	4b31      	ldr	r3, [pc, #196]	; (800e388 <HAL_RCC_ClockConfig+0x358>)
 800e2c4:	69db      	ldr	r3, [r3, #28]
 800e2c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	695b      	ldr	r3, [r3, #20]
 800e2ce:	492e      	ldr	r1, [pc, #184]	; (800e388 <HAL_RCC_ClockConfig+0x358>)
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f003 0310 	and.w	r3, r3, #16
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d010      	beq.n	800e302 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	699a      	ldr	r2, [r3, #24]
 800e2e4:	4b28      	ldr	r3, [pc, #160]	; (800e388 <HAL_RCC_ClockConfig+0x358>)
 800e2e6:	69db      	ldr	r3, [r3, #28]
 800e2e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d208      	bcs.n	800e302 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e2f0:	4b25      	ldr	r3, [pc, #148]	; (800e388 <HAL_RCC_ClockConfig+0x358>)
 800e2f2:	69db      	ldr	r3, [r3, #28]
 800e2f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	699b      	ldr	r3, [r3, #24]
 800e2fc:	4922      	ldr	r1, [pc, #136]	; (800e388 <HAL_RCC_ClockConfig+0x358>)
 800e2fe:	4313      	orrs	r3, r2
 800e300:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f003 0320 	and.w	r3, r3, #32
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d010      	beq.n	800e330 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	69da      	ldr	r2, [r3, #28]
 800e312:	4b1d      	ldr	r3, [pc, #116]	; (800e388 <HAL_RCC_ClockConfig+0x358>)
 800e314:	6a1b      	ldr	r3, [r3, #32]
 800e316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d208      	bcs.n	800e330 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800e31e:	4b1a      	ldr	r3, [pc, #104]	; (800e388 <HAL_RCC_ClockConfig+0x358>)
 800e320:	6a1b      	ldr	r3, [r3, #32]
 800e322:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	69db      	ldr	r3, [r3, #28]
 800e32a:	4917      	ldr	r1, [pc, #92]	; (800e388 <HAL_RCC_ClockConfig+0x358>)
 800e32c:	4313      	orrs	r3, r2
 800e32e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e330:	f000 f834 	bl	800e39c <HAL_RCC_GetSysClockFreq>
 800e334:	4602      	mov	r2, r0
 800e336:	4b14      	ldr	r3, [pc, #80]	; (800e388 <HAL_RCC_ClockConfig+0x358>)
 800e338:	699b      	ldr	r3, [r3, #24]
 800e33a:	0a1b      	lsrs	r3, r3, #8
 800e33c:	f003 030f 	and.w	r3, r3, #15
 800e340:	4912      	ldr	r1, [pc, #72]	; (800e38c <HAL_RCC_ClockConfig+0x35c>)
 800e342:	5ccb      	ldrb	r3, [r1, r3]
 800e344:	f003 031f 	and.w	r3, r3, #31
 800e348:	fa22 f303 	lsr.w	r3, r2, r3
 800e34c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e34e:	4b0e      	ldr	r3, [pc, #56]	; (800e388 <HAL_RCC_ClockConfig+0x358>)
 800e350:	699b      	ldr	r3, [r3, #24]
 800e352:	f003 030f 	and.w	r3, r3, #15
 800e356:	4a0d      	ldr	r2, [pc, #52]	; (800e38c <HAL_RCC_ClockConfig+0x35c>)
 800e358:	5cd3      	ldrb	r3, [r2, r3]
 800e35a:	f003 031f 	and.w	r3, r3, #31
 800e35e:	693a      	ldr	r2, [r7, #16]
 800e360:	fa22 f303 	lsr.w	r3, r2, r3
 800e364:	4a0a      	ldr	r2, [pc, #40]	; (800e390 <HAL_RCC_ClockConfig+0x360>)
 800e366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e368:	4a0a      	ldr	r2, [pc, #40]	; (800e394 <HAL_RCC_ClockConfig+0x364>)
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800e36e:	4b0a      	ldr	r3, [pc, #40]	; (800e398 <HAL_RCC_ClockConfig+0x368>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4618      	mov	r0, r3
 800e374:	f7f8 fdbe 	bl	8006ef4 <HAL_InitTick>
 800e378:	4603      	mov	r3, r0
 800e37a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3718      	adds	r7, #24
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	58024400 	.word	0x58024400
 800e38c:	08016fe0 	.word	0x08016fe0
 800e390:	20000024 	.word	0x20000024
 800e394:	20000020 	.word	0x20000020
 800e398:	20000028 	.word	0x20000028

0800e39c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b089      	sub	sp, #36	; 0x24
 800e3a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e3a2:	4bb3      	ldr	r3, [pc, #716]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e3a4:	691b      	ldr	r3, [r3, #16]
 800e3a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e3aa:	2b18      	cmp	r3, #24
 800e3ac:	f200 8155 	bhi.w	800e65a <HAL_RCC_GetSysClockFreq+0x2be>
 800e3b0:	a201      	add	r2, pc, #4	; (adr r2, 800e3b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b6:	bf00      	nop
 800e3b8:	0800e41d 	.word	0x0800e41d
 800e3bc:	0800e65b 	.word	0x0800e65b
 800e3c0:	0800e65b 	.word	0x0800e65b
 800e3c4:	0800e65b 	.word	0x0800e65b
 800e3c8:	0800e65b 	.word	0x0800e65b
 800e3cc:	0800e65b 	.word	0x0800e65b
 800e3d0:	0800e65b 	.word	0x0800e65b
 800e3d4:	0800e65b 	.word	0x0800e65b
 800e3d8:	0800e443 	.word	0x0800e443
 800e3dc:	0800e65b 	.word	0x0800e65b
 800e3e0:	0800e65b 	.word	0x0800e65b
 800e3e4:	0800e65b 	.word	0x0800e65b
 800e3e8:	0800e65b 	.word	0x0800e65b
 800e3ec:	0800e65b 	.word	0x0800e65b
 800e3f0:	0800e65b 	.word	0x0800e65b
 800e3f4:	0800e65b 	.word	0x0800e65b
 800e3f8:	0800e449 	.word	0x0800e449
 800e3fc:	0800e65b 	.word	0x0800e65b
 800e400:	0800e65b 	.word	0x0800e65b
 800e404:	0800e65b 	.word	0x0800e65b
 800e408:	0800e65b 	.word	0x0800e65b
 800e40c:	0800e65b 	.word	0x0800e65b
 800e410:	0800e65b 	.word	0x0800e65b
 800e414:	0800e65b 	.word	0x0800e65b
 800e418:	0800e44f 	.word	0x0800e44f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e41c:	4b94      	ldr	r3, [pc, #592]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f003 0320 	and.w	r3, r3, #32
 800e424:	2b00      	cmp	r3, #0
 800e426:	d009      	beq.n	800e43c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e428:	4b91      	ldr	r3, [pc, #580]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	08db      	lsrs	r3, r3, #3
 800e42e:	f003 0303 	and.w	r3, r3, #3
 800e432:	4a90      	ldr	r2, [pc, #576]	; (800e674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e434:	fa22 f303 	lsr.w	r3, r2, r3
 800e438:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800e43a:	e111      	b.n	800e660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e43c:	4b8d      	ldr	r3, [pc, #564]	; (800e674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e43e:	61bb      	str	r3, [r7, #24]
    break;
 800e440:	e10e      	b.n	800e660 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800e442:	4b8d      	ldr	r3, [pc, #564]	; (800e678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e444:	61bb      	str	r3, [r7, #24]
    break;
 800e446:	e10b      	b.n	800e660 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800e448:	4b8c      	ldr	r3, [pc, #560]	; (800e67c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e44a:	61bb      	str	r3, [r7, #24]
    break;
 800e44c:	e108      	b.n	800e660 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e44e:	4b88      	ldr	r3, [pc, #544]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e452:	f003 0303 	and.w	r3, r3, #3
 800e456:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800e458:	4b85      	ldr	r3, [pc, #532]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e45c:	091b      	lsrs	r3, r3, #4
 800e45e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e462:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e464:	4b82      	ldr	r3, [pc, #520]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e468:	f003 0301 	and.w	r3, r3, #1
 800e46c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e46e:	4b80      	ldr	r3, [pc, #512]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e472:	08db      	lsrs	r3, r3, #3
 800e474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e478:	68fa      	ldr	r2, [r7, #12]
 800e47a:	fb02 f303 	mul.w	r3, r2, r3
 800e47e:	ee07 3a90 	vmov	s15, r3
 800e482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e486:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f000 80e1 	beq.w	800e654 <HAL_RCC_GetSysClockFreq+0x2b8>
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	2b02      	cmp	r3, #2
 800e496:	f000 8083 	beq.w	800e5a0 <HAL_RCC_GetSysClockFreq+0x204>
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	2b02      	cmp	r3, #2
 800e49e:	f200 80a1 	bhi.w	800e5e4 <HAL_RCC_GetSysClockFreq+0x248>
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d003      	beq.n	800e4b0 <HAL_RCC_GetSysClockFreq+0x114>
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d056      	beq.n	800e55c <HAL_RCC_GetSysClockFreq+0x1c0>
 800e4ae:	e099      	b.n	800e5e4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4b0:	4b6f      	ldr	r3, [pc, #444]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f003 0320 	and.w	r3, r3, #32
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d02d      	beq.n	800e518 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e4bc:	4b6c      	ldr	r3, [pc, #432]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	08db      	lsrs	r3, r3, #3
 800e4c2:	f003 0303 	and.w	r3, r3, #3
 800e4c6:	4a6b      	ldr	r2, [pc, #428]	; (800e674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e4c8:	fa22 f303 	lsr.w	r3, r2, r3
 800e4cc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	ee07 3a90 	vmov	s15, r3
 800e4d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	ee07 3a90 	vmov	s15, r3
 800e4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4e6:	4b62      	ldr	r3, [pc, #392]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4ee:	ee07 3a90 	vmov	s15, r3
 800e4f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e4fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 800e680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e4fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e50a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e512:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800e516:	e087      	b.n	800e628 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	ee07 3a90 	vmov	s15, r3
 800e51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e522:	eddf 6a58 	vldr	s13, [pc, #352]	; 800e684 <HAL_RCC_GetSysClockFreq+0x2e8>
 800e526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e52a:	4b51      	ldr	r3, [pc, #324]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e532:	ee07 3a90 	vmov	s15, r3
 800e536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e53a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e53e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800e680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e54a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e55a:	e065      	b.n	800e628 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	ee07 3a90 	vmov	s15, r3
 800e562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e566:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e56a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e56e:	4b40      	ldr	r3, [pc, #256]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e576:	ee07 3a90 	vmov	s15, r3
 800e57a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e57e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e582:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e58a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e58e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e59a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e59e:	e043      	b.n	800e628 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	ee07 3a90 	vmov	s15, r3
 800e5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800e68c <HAL_RCC_GetSysClockFreq+0x2f0>
 800e5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5b2:	4b2f      	ldr	r3, [pc, #188]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5ba:	ee07 3a90 	vmov	s15, r3
 800e5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e5c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e5e2:	e021      	b.n	800e628 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	ee07 3a90 	vmov	s15, r3
 800e5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e5f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5f6:	4b1e      	ldr	r3, [pc, #120]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5fe:	ee07 3a90 	vmov	s15, r3
 800e602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e606:	ed97 6a02 	vldr	s12, [r7, #8]
 800e60a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800e680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e60e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e626:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800e628:	4b11      	ldr	r3, [pc, #68]	; (800e670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e62c:	0a5b      	lsrs	r3, r3, #9
 800e62e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e632:	3301      	adds	r3, #1
 800e634:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	ee07 3a90 	vmov	s15, r3
 800e63c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e640:	edd7 6a07 	vldr	s13, [r7, #28]
 800e644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e64c:	ee17 3a90 	vmov	r3, s15
 800e650:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800e652:	e005      	b.n	800e660 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800e654:	2300      	movs	r3, #0
 800e656:	61bb      	str	r3, [r7, #24]
    break;
 800e658:	e002      	b.n	800e660 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800e65a:	4b07      	ldr	r3, [pc, #28]	; (800e678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e65c:	61bb      	str	r3, [r7, #24]
    break;
 800e65e:	bf00      	nop
  }

  return sysclockfreq;
 800e660:	69bb      	ldr	r3, [r7, #24]
}
 800e662:	4618      	mov	r0, r3
 800e664:	3724      	adds	r7, #36	; 0x24
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr
 800e66e:	bf00      	nop
 800e670:	58024400 	.word	0x58024400
 800e674:	03d09000 	.word	0x03d09000
 800e678:	003d0900 	.word	0x003d0900
 800e67c:	017d7840 	.word	0x017d7840
 800e680:	46000000 	.word	0x46000000
 800e684:	4c742400 	.word	0x4c742400
 800e688:	4a742400 	.word	0x4a742400
 800e68c:	4bbebc20 	.word	0x4bbebc20

0800e690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e696:	f7ff fe81 	bl	800e39c <HAL_RCC_GetSysClockFreq>
 800e69a:	4602      	mov	r2, r0
 800e69c:	4b10      	ldr	r3, [pc, #64]	; (800e6e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800e69e:	699b      	ldr	r3, [r3, #24]
 800e6a0:	0a1b      	lsrs	r3, r3, #8
 800e6a2:	f003 030f 	and.w	r3, r3, #15
 800e6a6:	490f      	ldr	r1, [pc, #60]	; (800e6e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800e6a8:	5ccb      	ldrb	r3, [r1, r3]
 800e6aa:	f003 031f 	and.w	r3, r3, #31
 800e6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800e6b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e6b4:	4b0a      	ldr	r3, [pc, #40]	; (800e6e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800e6b6:	699b      	ldr	r3, [r3, #24]
 800e6b8:	f003 030f 	and.w	r3, r3, #15
 800e6bc:	4a09      	ldr	r2, [pc, #36]	; (800e6e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800e6be:	5cd3      	ldrb	r3, [r2, r3]
 800e6c0:	f003 031f 	and.w	r3, r3, #31
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800e6ca:	4a07      	ldr	r2, [pc, #28]	; (800e6e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800e6cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e6ce:	4a07      	ldr	r2, [pc, #28]	; (800e6ec <HAL_RCC_GetHCLKFreq+0x5c>)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e6d4:	4b04      	ldr	r3, [pc, #16]	; (800e6e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3708      	adds	r7, #8
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	58024400 	.word	0x58024400
 800e6e4:	08016fe0 	.word	0x08016fe0
 800e6e8:	20000024 	.word	0x20000024
 800e6ec:	20000020 	.word	0x20000020

0800e6f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e6f4:	f7ff ffcc 	bl	800e690 <HAL_RCC_GetHCLKFreq>
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	4b06      	ldr	r3, [pc, #24]	; (800e714 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e6fc:	69db      	ldr	r3, [r3, #28]
 800e6fe:	091b      	lsrs	r3, r3, #4
 800e700:	f003 0307 	and.w	r3, r3, #7
 800e704:	4904      	ldr	r1, [pc, #16]	; (800e718 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e706:	5ccb      	ldrb	r3, [r1, r3]
 800e708:	f003 031f 	and.w	r3, r3, #31
 800e70c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e710:	4618      	mov	r0, r3
 800e712:	bd80      	pop	{r7, pc}
 800e714:	58024400 	.word	0x58024400
 800e718:	08016fe0 	.word	0x08016fe0

0800e71c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e720:	f7ff ffb6 	bl	800e690 <HAL_RCC_GetHCLKFreq>
 800e724:	4602      	mov	r2, r0
 800e726:	4b06      	ldr	r3, [pc, #24]	; (800e740 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e728:	69db      	ldr	r3, [r3, #28]
 800e72a:	0a1b      	lsrs	r3, r3, #8
 800e72c:	f003 0307 	and.w	r3, r3, #7
 800e730:	4904      	ldr	r1, [pc, #16]	; (800e744 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e732:	5ccb      	ldrb	r3, [r1, r3]
 800e734:	f003 031f 	and.w	r3, r3, #31
 800e738:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	58024400 	.word	0x58024400
 800e744:	08016fe0 	.word	0x08016fe0

0800e748 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b086      	sub	sp, #24
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e750:	2300      	movs	r3, #0
 800e752:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e754:	2300      	movs	r3, #0
 800e756:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e760:	2b00      	cmp	r3, #0
 800e762:	d03f      	beq.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e768:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e76c:	d02a      	beq.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800e76e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e772:	d824      	bhi.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e778:	d018      	beq.n	800e7ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e77a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e77e:	d81e      	bhi.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e780:	2b00      	cmp	r3, #0
 800e782:	d003      	beq.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800e784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e788:	d007      	beq.n	800e79a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800e78a:	e018      	b.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e78c:	4ba4      	ldr	r3, [pc, #656]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e790:	4aa3      	ldr	r2, [pc, #652]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e796:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e798:	e015      	b.n	800e7c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	3304      	adds	r3, #4
 800e79e:	2102      	movs	r1, #2
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f001 ff01 	bl	80105a8 <RCCEx_PLL2_Config>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e7aa:	e00c      	b.n	800e7c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	3324      	adds	r3, #36	; 0x24
 800e7b0:	2102      	movs	r1, #2
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f001 ffaa 	bl	801070c <RCCEx_PLL3_Config>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e7bc:	e003      	b.n	800e7c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	75fb      	strb	r3, [r7, #23]
      break;
 800e7c2:	e000      	b.n	800e7c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800e7c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e7c6:	7dfb      	ldrb	r3, [r7, #23]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d109      	bne.n	800e7e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e7cc:	4b94      	ldr	r3, [pc, #592]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e7ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7d8:	4991      	ldr	r1, [pc, #580]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	650b      	str	r3, [r1, #80]	; 0x50
 800e7de:	e001      	b.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7e0:	7dfb      	ldrb	r3, [r7, #23]
 800e7e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d03d      	beq.n	800e86c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7f4:	2b04      	cmp	r3, #4
 800e7f6:	d826      	bhi.n	800e846 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800e7f8:	a201      	add	r2, pc, #4	; (adr r2, 800e800 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800e7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7fe:	bf00      	nop
 800e800:	0800e815 	.word	0x0800e815
 800e804:	0800e823 	.word	0x0800e823
 800e808:	0800e835 	.word	0x0800e835
 800e80c:	0800e84d 	.word	0x0800e84d
 800e810:	0800e84d 	.word	0x0800e84d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e814:	4b82      	ldr	r3, [pc, #520]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e818:	4a81      	ldr	r2, [pc, #516]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e81a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e81e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e820:	e015      	b.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	3304      	adds	r3, #4
 800e826:	2100      	movs	r1, #0
 800e828:	4618      	mov	r0, r3
 800e82a:	f001 febd 	bl	80105a8 <RCCEx_PLL2_Config>
 800e82e:	4603      	mov	r3, r0
 800e830:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e832:	e00c      	b.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	3324      	adds	r3, #36	; 0x24
 800e838:	2100      	movs	r1, #0
 800e83a:	4618      	mov	r0, r3
 800e83c:	f001 ff66 	bl	801070c <RCCEx_PLL3_Config>
 800e840:	4603      	mov	r3, r0
 800e842:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e844:	e003      	b.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	75fb      	strb	r3, [r7, #23]
      break;
 800e84a:	e000      	b.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800e84c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e84e:	7dfb      	ldrb	r3, [r7, #23]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d109      	bne.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e854:	4b72      	ldr	r3, [pc, #456]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e858:	f023 0207 	bic.w	r2, r3, #7
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e860:	496f      	ldr	r1, [pc, #444]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e862:	4313      	orrs	r3, r2
 800e864:	650b      	str	r3, [r1, #80]	; 0x50
 800e866:	e001      	b.n	800e86c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e868:	7dfb      	ldrb	r3, [r7, #23]
 800e86a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e874:	2b00      	cmp	r3, #0
 800e876:	d051      	beq.n	800e91c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e87e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800e882:	d036      	beq.n	800e8f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e884:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800e888:	d830      	bhi.n	800e8ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e88a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e88e:	d032      	beq.n	800e8f6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800e890:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e894:	d82a      	bhi.n	800e8ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e896:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e89a:	d02e      	beq.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800e89c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e8a0:	d824      	bhi.n	800e8ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e8a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e8a6:	d018      	beq.n	800e8da <HAL_RCCEx_PeriphCLKConfig+0x192>
 800e8a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e8ac:	d81e      	bhi.n	800e8ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d003      	beq.n	800e8ba <HAL_RCCEx_PeriphCLKConfig+0x172>
 800e8b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e8b6:	d007      	beq.n	800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800e8b8:	e018      	b.n	800e8ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e8ba:	4b59      	ldr	r3, [pc, #356]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8be:	4a58      	ldr	r2, [pc, #352]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e8c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e8c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e8c6:	e019      	b.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	3304      	adds	r3, #4
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f001 fe6a 	bl	80105a8 <RCCEx_PLL2_Config>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800e8d8:	e010      	b.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	3324      	adds	r3, #36	; 0x24
 800e8de:	2100      	movs	r1, #0
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f001 ff13 	bl	801070c <RCCEx_PLL3_Config>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e8ea:	e007      	b.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	75fb      	strb	r3, [r7, #23]
      break;
 800e8f0:	e004      	b.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e8f2:	bf00      	nop
 800e8f4:	e002      	b.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e8f6:	bf00      	nop
 800e8f8:	e000      	b.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e8fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e8fc:	7dfb      	ldrb	r3, [r7, #23]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d10a      	bne.n	800e918 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e902:	4b47      	ldr	r3, [pc, #284]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e906:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e910:	4943      	ldr	r1, [pc, #268]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e912:	4313      	orrs	r3, r2
 800e914:	658b      	str	r3, [r1, #88]	; 0x58
 800e916:	e001      	b.n	800e91c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e918:	7dfb      	ldrb	r3, [r7, #23]
 800e91a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e924:	2b00      	cmp	r3, #0
 800e926:	d051      	beq.n	800e9cc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e92e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800e932:	d036      	beq.n	800e9a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800e934:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800e938:	d830      	bhi.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e93a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e93e:	d032      	beq.n	800e9a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800e940:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e944:	d82a      	bhi.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e946:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e94a:	d02e      	beq.n	800e9aa <HAL_RCCEx_PeriphCLKConfig+0x262>
 800e94c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e950:	d824      	bhi.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e956:	d018      	beq.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0x242>
 800e958:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e95c:	d81e      	bhi.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d003      	beq.n	800e96a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800e962:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e966:	d007      	beq.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800e968:	e018      	b.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e96a:	4b2d      	ldr	r3, [pc, #180]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e96e:	4a2c      	ldr	r2, [pc, #176]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e974:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e976:	e019      	b.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	3304      	adds	r3, #4
 800e97c:	2100      	movs	r1, #0
 800e97e:	4618      	mov	r0, r3
 800e980:	f001 fe12 	bl	80105a8 <RCCEx_PLL2_Config>
 800e984:	4603      	mov	r3, r0
 800e986:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800e988:	e010      	b.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	3324      	adds	r3, #36	; 0x24
 800e98e:	2100      	movs	r1, #0
 800e990:	4618      	mov	r0, r3
 800e992:	f001 febb 	bl	801070c <RCCEx_PLL3_Config>
 800e996:	4603      	mov	r3, r0
 800e998:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e99a:	e007      	b.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800e99c:	2301      	movs	r3, #1
 800e99e:	75fb      	strb	r3, [r7, #23]
      break;
 800e9a0:	e004      	b.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e9a2:	bf00      	nop
 800e9a4:	e002      	b.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e9a6:	bf00      	nop
 800e9a8:	e000      	b.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e9aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e9ac:	7dfb      	ldrb	r3, [r7, #23]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d10a      	bne.n	800e9c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e9b2:	4b1b      	ldr	r3, [pc, #108]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e9b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9b6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e9c0:	4917      	ldr	r1, [pc, #92]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e9c2:	4313      	orrs	r3, r2
 800e9c4:	658b      	str	r3, [r1, #88]	; 0x58
 800e9c6:	e001      	b.n	800e9cc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9c8:	7dfb      	ldrb	r3, [r7, #23]
 800e9ca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d035      	beq.n	800ea44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9dc:	2b30      	cmp	r3, #48	; 0x30
 800e9de:	d01c      	beq.n	800ea1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e9e0:	2b30      	cmp	r3, #48	; 0x30
 800e9e2:	d817      	bhi.n	800ea14 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800e9e4:	2b20      	cmp	r3, #32
 800e9e6:	d00c      	beq.n	800ea02 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800e9e8:	2b20      	cmp	r3, #32
 800e9ea:	d813      	bhi.n	800ea14 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d019      	beq.n	800ea24 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800e9f0:	2b10      	cmp	r3, #16
 800e9f2:	d10f      	bne.n	800ea14 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9f8:	4a09      	ldr	r2, [pc, #36]	; (800ea20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e9fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e9fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800ea00:	e011      	b.n	800ea26 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	3304      	adds	r3, #4
 800ea06:	2102      	movs	r1, #2
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f001 fdcd 	bl	80105a8 <RCCEx_PLL2_Config>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800ea12:	e008      	b.n	800ea26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ea14:	2301      	movs	r3, #1
 800ea16:	75fb      	strb	r3, [r7, #23]
      break;
 800ea18:	e005      	b.n	800ea26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800ea1a:	bf00      	nop
 800ea1c:	e003      	b.n	800ea26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ea1e:	bf00      	nop
 800ea20:	58024400 	.word	0x58024400
      break;
 800ea24:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ea26:	7dfb      	ldrb	r3, [r7, #23]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d109      	bne.n	800ea40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ea2c:	4ba3      	ldr	r3, [pc, #652]	; (800ecbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ea2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea38:	49a0      	ldr	r1, [pc, #640]	; (800ecbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ea3a:	4313      	orrs	r3, r2
 800ea3c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ea3e:	e001      	b.n	800ea44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea40:	7dfb      	ldrb	r3, [r7, #23]
 800ea42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d047      	beq.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ea58:	d030      	beq.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800ea5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ea5e:	d82a      	bhi.n	800eab6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ea60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ea64:	d02c      	beq.n	800eac0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800ea66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ea6a:	d824      	bhi.n	800eab6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ea6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea70:	d018      	beq.n	800eaa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ea72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea76:	d81e      	bhi.n	800eab6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d003      	beq.n	800ea84 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ea7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea80:	d007      	beq.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ea82:	e018      	b.n	800eab6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea84:	4b8d      	ldr	r3, [pc, #564]	; (800ecbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ea86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea88:	4a8c      	ldr	r2, [pc, #560]	; (800ecbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ea8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ea8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ea90:	e017      	b.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	3304      	adds	r3, #4
 800ea96:	2100      	movs	r1, #0
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f001 fd85 	bl	80105a8 <RCCEx_PLL2_Config>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800eaa2:	e00e      	b.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	3324      	adds	r3, #36	; 0x24
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f001 fe2e 	bl	801070c <RCCEx_PLL3_Config>
 800eab0:	4603      	mov	r3, r0
 800eab2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800eab4:	e005      	b.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800eab6:	2301      	movs	r3, #1
 800eab8:	75fb      	strb	r3, [r7, #23]
      break;
 800eaba:	e002      	b.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800eabc:	bf00      	nop
 800eabe:	e000      	b.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800eac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800eac2:	7dfb      	ldrb	r3, [r7, #23]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d109      	bne.n	800eadc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800eac8:	4b7c      	ldr	r3, [pc, #496]	; (800ecbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800eaca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eacc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ead4:	4979      	ldr	r1, [pc, #484]	; (800ecbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ead6:	4313      	orrs	r3, r2
 800ead8:	650b      	str	r3, [r1, #80]	; 0x50
 800eada:	e001      	b.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eadc:	7dfb      	ldrb	r3, [r7, #23]
 800eade:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d049      	beq.n	800eb80 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eaf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800eaf4:	d02e      	beq.n	800eb54 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800eaf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800eafa:	d828      	bhi.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800eafc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800eb00:	d02a      	beq.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800eb02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800eb06:	d822      	bhi.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800eb08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800eb0c:	d026      	beq.n	800eb5c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800eb0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800eb12:	d81c      	bhi.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800eb14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb18:	d010      	beq.n	800eb3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800eb1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb1e:	d816      	bhi.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d01d      	beq.n	800eb60 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800eb24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb28:	d111      	bne.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	3304      	adds	r3, #4
 800eb2e:	2101      	movs	r1, #1
 800eb30:	4618      	mov	r0, r3
 800eb32:	f001 fd39 	bl	80105a8 <RCCEx_PLL2_Config>
 800eb36:	4603      	mov	r3, r0
 800eb38:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800eb3a:	e012      	b.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	3324      	adds	r3, #36	; 0x24
 800eb40:	2101      	movs	r1, #1
 800eb42:	4618      	mov	r0, r3
 800eb44:	f001 fde2 	bl	801070c <RCCEx_PLL3_Config>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800eb4c:	e009      	b.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	75fb      	strb	r3, [r7, #23]
      break;
 800eb52:	e006      	b.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800eb54:	bf00      	nop
 800eb56:	e004      	b.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800eb58:	bf00      	nop
 800eb5a:	e002      	b.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800eb5c:	bf00      	nop
 800eb5e:	e000      	b.n	800eb62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800eb60:	bf00      	nop
    }

    if(ret == HAL_OK)
 800eb62:	7dfb      	ldrb	r3, [r7, #23]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d109      	bne.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800eb68:	4b54      	ldr	r3, [pc, #336]	; (800ecbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800eb6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb74:	4951      	ldr	r1, [pc, #324]	; (800ecbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800eb76:	4313      	orrs	r3, r2
 800eb78:	650b      	str	r3, [r1, #80]	; 0x50
 800eb7a:	e001      	b.n	800eb80 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb7c:	7dfb      	ldrb	r3, [r7, #23]
 800eb7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d04b      	beq.n	800ec24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800eb92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb96:	d02e      	beq.n	800ebf6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800eb98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb9c:	d828      	bhi.n	800ebf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800eb9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eba2:	d02a      	beq.n	800ebfa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800eba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eba8:	d822      	bhi.n	800ebf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ebaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ebae:	d026      	beq.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800ebb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ebb4:	d81c      	bhi.n	800ebf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ebb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ebba:	d010      	beq.n	800ebde <HAL_RCCEx_PeriphCLKConfig+0x496>
 800ebbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ebc0:	d816      	bhi.n	800ebf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d01d      	beq.n	800ec02 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800ebc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ebca:	d111      	bne.n	800ebf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	3304      	adds	r3, #4
 800ebd0:	2101      	movs	r1, #1
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f001 fce8 	bl	80105a8 <RCCEx_PLL2_Config>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ebdc:	e012      	b.n	800ec04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	3324      	adds	r3, #36	; 0x24
 800ebe2:	2101      	movs	r1, #1
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f001 fd91 	bl	801070c <RCCEx_PLL3_Config>
 800ebea:	4603      	mov	r3, r0
 800ebec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ebee:	e009      	b.n	800ec04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	75fb      	strb	r3, [r7, #23]
      break;
 800ebf4:	e006      	b.n	800ec04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ebf6:	bf00      	nop
 800ebf8:	e004      	b.n	800ec04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ebfa:	bf00      	nop
 800ebfc:	e002      	b.n	800ec04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ebfe:	bf00      	nop
 800ec00:	e000      	b.n	800ec04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ec02:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ec04:	7dfb      	ldrb	r3, [r7, #23]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d10a      	bne.n	800ec20 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ec0a:	4b2c      	ldr	r3, [pc, #176]	; (800ecbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ec0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ec18:	4928      	ldr	r1, [pc, #160]	; (800ecbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	658b      	str	r3, [r1, #88]	; 0x58
 800ec1e:	e001      	b.n	800ec24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec20:	7dfb      	ldrb	r3, [r7, #23]
 800ec22:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d02f      	beq.n	800ec90 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ec38:	d00e      	beq.n	800ec58 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800ec3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ec3e:	d814      	bhi.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d015      	beq.n	800ec70 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800ec44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ec48:	d10f      	bne.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec4a:	4b1c      	ldr	r3, [pc, #112]	; (800ecbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ec4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec4e:	4a1b      	ldr	r2, [pc, #108]	; (800ecbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ec50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ec56:	e00c      	b.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	3304      	adds	r3, #4
 800ec5c:	2101      	movs	r1, #1
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f001 fca2 	bl	80105a8 <RCCEx_PLL2_Config>
 800ec64:	4603      	mov	r3, r0
 800ec66:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ec68:	e003      	b.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	75fb      	strb	r3, [r7, #23]
      break;
 800ec6e:	e000      	b.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800ec70:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ec72:	7dfb      	ldrb	r3, [r7, #23]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d109      	bne.n	800ec8c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ec78:	4b10      	ldr	r3, [pc, #64]	; (800ecbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ec7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec84:	490d      	ldr	r1, [pc, #52]	; (800ecbc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800ec86:	4313      	orrs	r3, r2
 800ec88:	650b      	str	r3, [r1, #80]	; 0x50
 800ec8a:	e001      	b.n	800ec90 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec8c:	7dfb      	ldrb	r3, [r7, #23]
 800ec8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d034      	beq.n	800ed06 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eca0:	2b03      	cmp	r3, #3
 800eca2:	d81d      	bhi.n	800ece0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800eca4:	a201      	add	r2, pc, #4	; (adr r2, 800ecac <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800eca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecaa:	bf00      	nop
 800ecac:	0800ece7 	.word	0x0800ece7
 800ecb0:	0800ecc1 	.word	0x0800ecc1
 800ecb4:	0800eccf 	.word	0x0800eccf
 800ecb8:	0800ece7 	.word	0x0800ece7
 800ecbc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ecc0:	4bb1      	ldr	r3, [pc, #708]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ecc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc4:	4ab0      	ldr	r2, [pc, #704]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ecc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ecca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800eccc:	e00c      	b.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	3304      	adds	r3, #4
 800ecd2:	2102      	movs	r1, #2
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f001 fc67 	bl	80105a8 <RCCEx_PLL2_Config>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ecde:	e003      	b.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ece0:	2301      	movs	r3, #1
 800ece2:	75fb      	strb	r3, [r7, #23]
      break;
 800ece4:	e000      	b.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800ece6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ece8:	7dfb      	ldrb	r3, [r7, #23]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d109      	bne.n	800ed02 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ecee:	4ba6      	ldr	r3, [pc, #664]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ecf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecf2:	f023 0203 	bic.w	r2, r3, #3
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecfa:	49a3      	ldr	r1, [pc, #652]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ecfc:	4313      	orrs	r3, r2
 800ecfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ed00:	e001      	b.n	800ed06 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed02:	7dfb      	ldrb	r3, [r7, #23]
 800ed04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	f000 8086 	beq.w	800ee20 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ed14:	4b9d      	ldr	r3, [pc, #628]	; (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4a9c      	ldr	r2, [pc, #624]	; (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800ed1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ed1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ed20:	f7f8 f932 	bl	8006f88 <HAL_GetTick>
 800ed24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ed26:	e009      	b.n	800ed3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ed28:	f7f8 f92e 	bl	8006f88 <HAL_GetTick>
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	1ad3      	subs	r3, r2, r3
 800ed32:	2b64      	cmp	r3, #100	; 0x64
 800ed34:	d902      	bls.n	800ed3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800ed36:	2303      	movs	r3, #3
 800ed38:	75fb      	strb	r3, [r7, #23]
        break;
 800ed3a:	e005      	b.n	800ed48 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ed3c:	4b93      	ldr	r3, [pc, #588]	; (800ef8c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d0ef      	beq.n	800ed28 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800ed48:	7dfb      	ldrb	r3, [r7, #23]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d166      	bne.n	800ee1c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ed4e:	4b8e      	ldr	r3, [pc, #568]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ed50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ed58:	4053      	eors	r3, r2
 800ed5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d013      	beq.n	800ed8a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ed62:	4b89      	ldr	r3, [pc, #548]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ed64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed6a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ed6c:	4b86      	ldr	r3, [pc, #536]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ed6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed70:	4a85      	ldr	r2, [pc, #532]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ed72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ed76:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ed78:	4b83      	ldr	r3, [pc, #524]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ed7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed7c:	4a82      	ldr	r2, [pc, #520]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ed7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ed82:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ed84:	4a80      	ldr	r2, [pc, #512]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ed90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed94:	d115      	bne.n	800edc2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed96:	f7f8 f8f7 	bl	8006f88 <HAL_GetTick>
 800ed9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ed9c:	e00b      	b.n	800edb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ed9e:	f7f8 f8f3 	bl	8006f88 <HAL_GetTick>
 800eda2:	4602      	mov	r2, r0
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	1ad3      	subs	r3, r2, r3
 800eda8:	f241 3288 	movw	r2, #5000	; 0x1388
 800edac:	4293      	cmp	r3, r2
 800edae:	d902      	bls.n	800edb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800edb0:	2303      	movs	r3, #3
 800edb2:	75fb      	strb	r3, [r7, #23]
            break;
 800edb4:	e005      	b.n	800edc2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800edb6:	4b74      	ldr	r3, [pc, #464]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800edb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edba:	f003 0302 	and.w	r3, r3, #2
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d0ed      	beq.n	800ed9e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800edc2:	7dfb      	ldrb	r3, [r7, #23]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d126      	bne.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800edce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800edd6:	d10d      	bne.n	800edf4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800edd8:	4b6b      	ldr	r3, [pc, #428]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800edda:	691b      	ldr	r3, [r3, #16]
 800eddc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ede6:	0919      	lsrs	r1, r3, #4
 800ede8:	4b69      	ldr	r3, [pc, #420]	; (800ef90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800edea:	400b      	ands	r3, r1
 800edec:	4966      	ldr	r1, [pc, #408]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800edee:	4313      	orrs	r3, r2
 800edf0:	610b      	str	r3, [r1, #16]
 800edf2:	e005      	b.n	800ee00 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800edf4:	4b64      	ldr	r3, [pc, #400]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800edf6:	691b      	ldr	r3, [r3, #16]
 800edf8:	4a63      	ldr	r2, [pc, #396]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800edfa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800edfe:	6113      	str	r3, [r2, #16]
 800ee00:	4b61      	ldr	r3, [pc, #388]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ee02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ee0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee0e:	495e      	ldr	r1, [pc, #376]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ee10:	4313      	orrs	r3, r2
 800ee12:	670b      	str	r3, [r1, #112]	; 0x70
 800ee14:	e004      	b.n	800ee20 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ee16:	7dfb      	ldrb	r3, [r7, #23]
 800ee18:	75bb      	strb	r3, [r7, #22]
 800ee1a:	e001      	b.n	800ee20 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee1c:	7dfb      	ldrb	r3, [r7, #23]
 800ee1e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	f003 0301 	and.w	r3, r3, #1
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d07e      	beq.n	800ef2a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee30:	2b28      	cmp	r3, #40	; 0x28
 800ee32:	d867      	bhi.n	800ef04 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800ee34:	a201      	add	r2, pc, #4	; (adr r2, 800ee3c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800ee36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3a:	bf00      	nop
 800ee3c:	0800ef0b 	.word	0x0800ef0b
 800ee40:	0800ef05 	.word	0x0800ef05
 800ee44:	0800ef05 	.word	0x0800ef05
 800ee48:	0800ef05 	.word	0x0800ef05
 800ee4c:	0800ef05 	.word	0x0800ef05
 800ee50:	0800ef05 	.word	0x0800ef05
 800ee54:	0800ef05 	.word	0x0800ef05
 800ee58:	0800ef05 	.word	0x0800ef05
 800ee5c:	0800eee1 	.word	0x0800eee1
 800ee60:	0800ef05 	.word	0x0800ef05
 800ee64:	0800ef05 	.word	0x0800ef05
 800ee68:	0800ef05 	.word	0x0800ef05
 800ee6c:	0800ef05 	.word	0x0800ef05
 800ee70:	0800ef05 	.word	0x0800ef05
 800ee74:	0800ef05 	.word	0x0800ef05
 800ee78:	0800ef05 	.word	0x0800ef05
 800ee7c:	0800eef3 	.word	0x0800eef3
 800ee80:	0800ef05 	.word	0x0800ef05
 800ee84:	0800ef05 	.word	0x0800ef05
 800ee88:	0800ef05 	.word	0x0800ef05
 800ee8c:	0800ef05 	.word	0x0800ef05
 800ee90:	0800ef05 	.word	0x0800ef05
 800ee94:	0800ef05 	.word	0x0800ef05
 800ee98:	0800ef05 	.word	0x0800ef05
 800ee9c:	0800ef0b 	.word	0x0800ef0b
 800eea0:	0800ef05 	.word	0x0800ef05
 800eea4:	0800ef05 	.word	0x0800ef05
 800eea8:	0800ef05 	.word	0x0800ef05
 800eeac:	0800ef05 	.word	0x0800ef05
 800eeb0:	0800ef05 	.word	0x0800ef05
 800eeb4:	0800ef05 	.word	0x0800ef05
 800eeb8:	0800ef05 	.word	0x0800ef05
 800eebc:	0800ef0b 	.word	0x0800ef0b
 800eec0:	0800ef05 	.word	0x0800ef05
 800eec4:	0800ef05 	.word	0x0800ef05
 800eec8:	0800ef05 	.word	0x0800ef05
 800eecc:	0800ef05 	.word	0x0800ef05
 800eed0:	0800ef05 	.word	0x0800ef05
 800eed4:	0800ef05 	.word	0x0800ef05
 800eed8:	0800ef05 	.word	0x0800ef05
 800eedc:	0800ef0b 	.word	0x0800ef0b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	3304      	adds	r3, #4
 800eee4:	2101      	movs	r1, #1
 800eee6:	4618      	mov	r0, r3
 800eee8:	f001 fb5e 	bl	80105a8 <RCCEx_PLL2_Config>
 800eeec:	4603      	mov	r3, r0
 800eeee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800eef0:	e00c      	b.n	800ef0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	3324      	adds	r3, #36	; 0x24
 800eef6:	2101      	movs	r1, #1
 800eef8:	4618      	mov	r0, r3
 800eefa:	f001 fc07 	bl	801070c <RCCEx_PLL3_Config>
 800eefe:	4603      	mov	r3, r0
 800ef00:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ef02:	e003      	b.n	800ef0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ef04:	2301      	movs	r3, #1
 800ef06:	75fb      	strb	r3, [r7, #23]
      break;
 800ef08:	e000      	b.n	800ef0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800ef0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ef0c:	7dfb      	ldrb	r3, [r7, #23]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d109      	bne.n	800ef26 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ef12:	4b1d      	ldr	r3, [pc, #116]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ef14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef16:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef1e:	491a      	ldr	r1, [pc, #104]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ef20:	4313      	orrs	r3, r2
 800ef22:	654b      	str	r3, [r1, #84]	; 0x54
 800ef24:	e001      	b.n	800ef2a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef26:	7dfb      	ldrb	r3, [r7, #23]
 800ef28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f003 0302 	and.w	r3, r3, #2
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d03e      	beq.n	800efb4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef3a:	2b05      	cmp	r3, #5
 800ef3c:	d820      	bhi.n	800ef80 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800ef3e:	a201      	add	r2, pc, #4	; (adr r2, 800ef44 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800ef40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef44:	0800ef95 	.word	0x0800ef95
 800ef48:	0800ef5d 	.word	0x0800ef5d
 800ef4c:	0800ef6f 	.word	0x0800ef6f
 800ef50:	0800ef95 	.word	0x0800ef95
 800ef54:	0800ef95 	.word	0x0800ef95
 800ef58:	0800ef95 	.word	0x0800ef95
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	3304      	adds	r3, #4
 800ef60:	2101      	movs	r1, #1
 800ef62:	4618      	mov	r0, r3
 800ef64:	f001 fb20 	bl	80105a8 <RCCEx_PLL2_Config>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ef6c:	e013      	b.n	800ef96 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	3324      	adds	r3, #36	; 0x24
 800ef72:	2101      	movs	r1, #1
 800ef74:	4618      	mov	r0, r3
 800ef76:	f001 fbc9 	bl	801070c <RCCEx_PLL3_Config>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ef7e:	e00a      	b.n	800ef96 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ef80:	2301      	movs	r3, #1
 800ef82:	75fb      	strb	r3, [r7, #23]
      break;
 800ef84:	e007      	b.n	800ef96 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800ef86:	bf00      	nop
 800ef88:	58024400 	.word	0x58024400
 800ef8c:	58024800 	.word	0x58024800
 800ef90:	00ffffcf 	.word	0x00ffffcf
      break;
 800ef94:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ef96:	7dfb      	ldrb	r3, [r7, #23]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d109      	bne.n	800efb0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ef9c:	4b9f      	ldr	r3, [pc, #636]	; (800f21c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ef9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efa0:	f023 0207 	bic.w	r2, r3, #7
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efa8:	499c      	ldr	r1, [pc, #624]	; (800f21c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800efaa:	4313      	orrs	r3, r2
 800efac:	654b      	str	r3, [r1, #84]	; 0x54
 800efae:	e001      	b.n	800efb4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efb0:	7dfb      	ldrb	r3, [r7, #23]
 800efb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	f003 0304 	and.w	r3, r3, #4
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d039      	beq.n	800f034 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efc6:	2b05      	cmp	r3, #5
 800efc8:	d820      	bhi.n	800f00c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800efca:	a201      	add	r2, pc, #4	; (adr r2, 800efd0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800efcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efd0:	0800f013 	.word	0x0800f013
 800efd4:	0800efe9 	.word	0x0800efe9
 800efd8:	0800effb 	.word	0x0800effb
 800efdc:	0800f013 	.word	0x0800f013
 800efe0:	0800f013 	.word	0x0800f013
 800efe4:	0800f013 	.word	0x0800f013
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	3304      	adds	r3, #4
 800efec:	2101      	movs	r1, #1
 800efee:	4618      	mov	r0, r3
 800eff0:	f001 fada 	bl	80105a8 <RCCEx_PLL2_Config>
 800eff4:	4603      	mov	r3, r0
 800eff6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800eff8:	e00c      	b.n	800f014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	3324      	adds	r3, #36	; 0x24
 800effe:	2101      	movs	r1, #1
 800f000:	4618      	mov	r0, r3
 800f002:	f001 fb83 	bl	801070c <RCCEx_PLL3_Config>
 800f006:	4603      	mov	r3, r0
 800f008:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800f00a:	e003      	b.n	800f014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f00c:	2301      	movs	r3, #1
 800f00e:	75fb      	strb	r3, [r7, #23]
      break;
 800f010:	e000      	b.n	800f014 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800f012:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f014:	7dfb      	ldrb	r3, [r7, #23]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d10a      	bne.n	800f030 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f01a:	4b80      	ldr	r3, [pc, #512]	; (800f21c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800f01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f01e:	f023 0207 	bic.w	r2, r3, #7
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f028:	497c      	ldr	r1, [pc, #496]	; (800f21c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800f02a:	4313      	orrs	r3, r2
 800f02c:	658b      	str	r3, [r1, #88]	; 0x58
 800f02e:	e001      	b.n	800f034 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f030:	7dfb      	ldrb	r3, [r7, #23]
 800f032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f003 0320 	and.w	r3, r3, #32
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d04b      	beq.n	800f0d8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f04a:	d02e      	beq.n	800f0aa <HAL_RCCEx_PeriphCLKConfig+0x962>
 800f04c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f050:	d828      	bhi.n	800f0a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800f052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f056:	d02a      	beq.n	800f0ae <HAL_RCCEx_PeriphCLKConfig+0x966>
 800f058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f05c:	d822      	bhi.n	800f0a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800f05e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f062:	d026      	beq.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800f064:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f068:	d81c      	bhi.n	800f0a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800f06a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f06e:	d010      	beq.n	800f092 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800f070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f074:	d816      	bhi.n	800f0a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800f076:	2b00      	cmp	r3, #0
 800f078:	d01d      	beq.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800f07a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f07e:	d111      	bne.n	800f0a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	3304      	adds	r3, #4
 800f084:	2100      	movs	r1, #0
 800f086:	4618      	mov	r0, r3
 800f088:	f001 fa8e 	bl	80105a8 <RCCEx_PLL2_Config>
 800f08c:	4603      	mov	r3, r0
 800f08e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800f090:	e012      	b.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	3324      	adds	r3, #36	; 0x24
 800f096:	2102      	movs	r1, #2
 800f098:	4618      	mov	r0, r3
 800f09a:	f001 fb37 	bl	801070c <RCCEx_PLL3_Config>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800f0a2:	e009      	b.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	75fb      	strb	r3, [r7, #23]
      break;
 800f0a8:	e006      	b.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800f0aa:	bf00      	nop
 800f0ac:	e004      	b.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800f0ae:	bf00      	nop
 800f0b0:	e002      	b.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800f0b2:	bf00      	nop
 800f0b4:	e000      	b.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800f0b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f0b8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d10a      	bne.n	800f0d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f0be:	4b57      	ldr	r3, [pc, #348]	; (800f21c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800f0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0cc:	4953      	ldr	r1, [pc, #332]	; (800f21c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800f0ce:	4313      	orrs	r3, r2
 800f0d0:	654b      	str	r3, [r1, #84]	; 0x54
 800f0d2:	e001      	b.n	800f0d8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0d4:	7dfb      	ldrb	r3, [r7, #23]
 800f0d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d04b      	beq.n	800f17c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f0ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f0ee:	d02e      	beq.n	800f14e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800f0f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f0f4:	d828      	bhi.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800f0f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0fa:	d02a      	beq.n	800f152 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800f0fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f100:	d822      	bhi.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800f102:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f106:	d026      	beq.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800f108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f10c:	d81c      	bhi.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800f10e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f112:	d010      	beq.n	800f136 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800f114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f118:	d816      	bhi.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d01d      	beq.n	800f15a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800f11e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f122:	d111      	bne.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	3304      	adds	r3, #4
 800f128:	2100      	movs	r1, #0
 800f12a:	4618      	mov	r0, r3
 800f12c:	f001 fa3c 	bl	80105a8 <RCCEx_PLL2_Config>
 800f130:	4603      	mov	r3, r0
 800f132:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800f134:	e012      	b.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	3324      	adds	r3, #36	; 0x24
 800f13a:	2102      	movs	r1, #2
 800f13c:	4618      	mov	r0, r3
 800f13e:	f001 fae5 	bl	801070c <RCCEx_PLL3_Config>
 800f142:	4603      	mov	r3, r0
 800f144:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800f146:	e009      	b.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f148:	2301      	movs	r3, #1
 800f14a:	75fb      	strb	r3, [r7, #23]
      break;
 800f14c:	e006      	b.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800f14e:	bf00      	nop
 800f150:	e004      	b.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800f152:	bf00      	nop
 800f154:	e002      	b.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800f156:	bf00      	nop
 800f158:	e000      	b.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800f15a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f15c:	7dfb      	ldrb	r3, [r7, #23]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d10a      	bne.n	800f178 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f162:	4b2e      	ldr	r3, [pc, #184]	; (800f21c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800f164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f166:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f170:	492a      	ldr	r1, [pc, #168]	; (800f21c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800f172:	4313      	orrs	r3, r2
 800f174:	658b      	str	r3, [r1, #88]	; 0x58
 800f176:	e001      	b.n	800f17c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f178:	7dfb      	ldrb	r3, [r7, #23]
 800f17a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f184:	2b00      	cmp	r3, #0
 800f186:	d04d      	beq.n	800f224 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f18e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f192:	d02e      	beq.n	800f1f2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800f194:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f198:	d828      	bhi.n	800f1ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800f19a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f19e:	d02a      	beq.n	800f1f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800f1a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1a4:	d822      	bhi.n	800f1ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800f1a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f1aa:	d026      	beq.n	800f1fa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800f1ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f1b0:	d81c      	bhi.n	800f1ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800f1b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f1b6:	d010      	beq.n	800f1da <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800f1b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f1bc:	d816      	bhi.n	800f1ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d01d      	beq.n	800f1fe <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800f1c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f1c6:	d111      	bne.n	800f1ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f001 f9ea 	bl	80105a8 <RCCEx_PLL2_Config>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800f1d8:	e012      	b.n	800f200 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	3324      	adds	r3, #36	; 0x24
 800f1de:	2102      	movs	r1, #2
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f001 fa93 	bl	801070c <RCCEx_PLL3_Config>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800f1ea:	e009      	b.n	800f200 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	75fb      	strb	r3, [r7, #23]
      break;
 800f1f0:	e006      	b.n	800f200 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800f1f2:	bf00      	nop
 800f1f4:	e004      	b.n	800f200 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800f1f6:	bf00      	nop
 800f1f8:	e002      	b.n	800f200 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800f1fa:	bf00      	nop
 800f1fc:	e000      	b.n	800f200 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800f1fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f200:	7dfb      	ldrb	r3, [r7, #23]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d10c      	bne.n	800f220 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f206:	4b05      	ldr	r3, [pc, #20]	; (800f21c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800f208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f20a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f214:	4901      	ldr	r1, [pc, #4]	; (800f21c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800f216:	4313      	orrs	r3, r2
 800f218:	658b      	str	r3, [r1, #88]	; 0x58
 800f21a:	e003      	b.n	800f224 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800f21c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f220:	7dfb      	ldrb	r3, [r7, #23]
 800f222:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f003 0308 	and.w	r3, r3, #8
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d018      	beq.n	800f262 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f238:	d10a      	bne.n	800f250 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	3324      	adds	r3, #36	; 0x24
 800f23e:	2102      	movs	r1, #2
 800f240:	4618      	mov	r0, r3
 800f242:	f001 fa63 	bl	801070c <RCCEx_PLL3_Config>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d001      	beq.n	800f250 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800f24c:	2301      	movs	r3, #1
 800f24e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800f250:	4b8a      	ldr	r3, [pc, #552]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f254:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f25c:	4987      	ldr	r1, [pc, #540]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f25e:	4313      	orrs	r3, r2
 800f260:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f003 0310 	and.w	r3, r3, #16
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d01a      	beq.n	800f2a4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f278:	d10a      	bne.n	800f290 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	3324      	adds	r3, #36	; 0x24
 800f27e:	2102      	movs	r1, #2
 800f280:	4618      	mov	r0, r3
 800f282:	f001 fa43 	bl	801070c <RCCEx_PLL3_Config>
 800f286:	4603      	mov	r3, r0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d001      	beq.n	800f290 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800f28c:	2301      	movs	r3, #1
 800f28e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f290:	4b7a      	ldr	r3, [pc, #488]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f29e:	4977      	ldr	r1, [pc, #476]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d034      	beq.n	800f31a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f2b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f2ba:	d01d      	beq.n	800f2f8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800f2bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f2c0:	d817      	bhi.n	800f2f2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d003      	beq.n	800f2ce <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800f2c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2ca:	d009      	beq.n	800f2e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800f2cc:	e011      	b.n	800f2f2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	3304      	adds	r3, #4
 800f2d2:	2100      	movs	r1, #0
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f001 f967 	bl	80105a8 <RCCEx_PLL2_Config>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800f2de:	e00c      	b.n	800f2fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	3324      	adds	r3, #36	; 0x24
 800f2e4:	2102      	movs	r1, #2
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f001 fa10 	bl	801070c <RCCEx_PLL3_Config>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800f2f0:	e003      	b.n	800f2fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	75fb      	strb	r3, [r7, #23]
      break;
 800f2f6:	e000      	b.n	800f2fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800f2f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f2fa:	7dfb      	ldrb	r3, [r7, #23]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d10a      	bne.n	800f316 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f300:	4b5e      	ldr	r3, [pc, #376]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f30e:	495b      	ldr	r1, [pc, #364]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f310:	4313      	orrs	r3, r2
 800f312:	658b      	str	r3, [r1, #88]	; 0x58
 800f314:	e001      	b.n	800f31a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f316:	7dfb      	ldrb	r3, [r7, #23]
 800f318:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f322:	2b00      	cmp	r3, #0
 800f324:	d033      	beq.n	800f38e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f32c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f330:	d01c      	beq.n	800f36c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800f332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f336:	d816      	bhi.n	800f366 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f33c:	d003      	beq.n	800f346 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800f33e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f342:	d007      	beq.n	800f354 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800f344:	e00f      	b.n	800f366 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f346:	4b4d      	ldr	r3, [pc, #308]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f34a:	4a4c      	ldr	r2, [pc, #304]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f34c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f350:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800f352:	e00c      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	3324      	adds	r3, #36	; 0x24
 800f358:	2101      	movs	r1, #1
 800f35a:	4618      	mov	r0, r3
 800f35c:	f001 f9d6 	bl	801070c <RCCEx_PLL3_Config>
 800f360:	4603      	mov	r3, r0
 800f362:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800f364:	e003      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f366:	2301      	movs	r3, #1
 800f368:	75fb      	strb	r3, [r7, #23]
      break;
 800f36a:	e000      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800f36c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f36e:	7dfb      	ldrb	r3, [r7, #23]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d10a      	bne.n	800f38a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f374:	4b41      	ldr	r3, [pc, #260]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f378:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f382:	493e      	ldr	r1, [pc, #248]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f384:	4313      	orrs	r3, r2
 800f386:	654b      	str	r3, [r1, #84]	; 0x54
 800f388:	e001      	b.n	800f38e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f38a:	7dfb      	ldrb	r3, [r7, #23]
 800f38c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f396:	2b00      	cmp	r3, #0
 800f398:	d029      	beq.n	800f3ee <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d003      	beq.n	800f3aa <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800f3a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3a6:	d007      	beq.n	800f3b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800f3a8:	e00f      	b.n	800f3ca <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f3aa:	4b34      	ldr	r3, [pc, #208]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ae:	4a33      	ldr	r2, [pc, #204]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f3b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f3b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800f3b6:	e00b      	b.n	800f3d0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	3304      	adds	r3, #4
 800f3bc:	2102      	movs	r1, #2
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f001 f8f2 	bl	80105a8 <RCCEx_PLL2_Config>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800f3c8:	e002      	b.n	800f3d0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	75fb      	strb	r3, [r7, #23]
      break;
 800f3ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f3d0:	7dfb      	ldrb	r3, [r7, #23]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d109      	bne.n	800f3ea <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f3d6:	4b29      	ldr	r3, [pc, #164]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f3d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3e2:	4926      	ldr	r1, [pc, #152]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800f3e8:	e001      	b.n	800f3ee <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3ea:	7dfb      	ldrb	r3, [r7, #23]
 800f3ec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00a      	beq.n	800f410 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	3324      	adds	r3, #36	; 0x24
 800f3fe:	2102      	movs	r1, #2
 800f400:	4618      	mov	r0, r3
 800f402:	f001 f983 	bl	801070c <RCCEx_PLL3_Config>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d001      	beq.n	800f410 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800f40c:	2301      	movs	r3, #1
 800f40e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d033      	beq.n	800f484 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f424:	d017      	beq.n	800f456 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800f426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f42a:	d811      	bhi.n	800f450 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f42c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f430:	d013      	beq.n	800f45a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800f432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f436:	d80b      	bhi.n	800f450 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d010      	beq.n	800f45e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800f43c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f440:	d106      	bne.n	800f450 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f442:	4b0e      	ldr	r3, [pc, #56]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f446:	4a0d      	ldr	r2, [pc, #52]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f44c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800f44e:	e007      	b.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f450:	2301      	movs	r3, #1
 800f452:	75fb      	strb	r3, [r7, #23]
      break;
 800f454:	e004      	b.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800f456:	bf00      	nop
 800f458:	e002      	b.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800f45a:	bf00      	nop
 800f45c:	e000      	b.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800f45e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f460:	7dfb      	ldrb	r3, [r7, #23]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d10c      	bne.n	800f480 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f466:	4b05      	ldr	r3, [pc, #20]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f46a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f472:	4902      	ldr	r1, [pc, #8]	; (800f47c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f474:	4313      	orrs	r3, r2
 800f476:	654b      	str	r3, [r1, #84]	; 0x54
 800f478:	e004      	b.n	800f484 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800f47a:	bf00      	nop
 800f47c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f480:	7dfb      	ldrb	r3, [r7, #23]
 800f482:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d008      	beq.n	800f4a2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f490:	4b29      	ldr	r3, [pc, #164]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f494:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f49c:	4926      	ldr	r1, [pc, #152]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d008      	beq.n	800f4c0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f4ae:	4b22      	ldr	r3, [pc, #136]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f4b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4ba:	491f      	ldr	r1, [pc, #124]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f4bc:	4313      	orrs	r3, r2
 800f4be:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d00d      	beq.n	800f4e8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f4cc:	4b1a      	ldr	r3, [pc, #104]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f4ce:	691b      	ldr	r3, [r3, #16]
 800f4d0:	4a19      	ldr	r2, [pc, #100]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f4d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f4d6:	6113      	str	r3, [r2, #16]
 800f4d8:	4b17      	ldr	r3, [pc, #92]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f4da:	691a      	ldr	r2, [r3, #16]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f4e2:	4915      	ldr	r1, [pc, #84]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	da08      	bge.n	800f502 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f4f0:	4b11      	ldr	r3, [pc, #68]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f4f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4fc:	490e      	ldr	r1, [pc, #56]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f4fe:	4313      	orrs	r3, r2
 800f500:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d009      	beq.n	800f522 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f50e:	4b0a      	ldr	r3, [pc, #40]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f512:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f51c:	4906      	ldr	r1, [pc, #24]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f51e:	4313      	orrs	r3, r2
 800f520:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800f522:	7dbb      	ldrb	r3, [r7, #22]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d101      	bne.n	800f52c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800f528:	2300      	movs	r3, #0
 800f52a:	e000      	b.n	800f52e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800f52c:	2301      	movs	r3, #1
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3718      	adds	r7, #24
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	58024400 	.word	0x58024400

0800f53c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b090      	sub	sp, #64	; 0x40
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f54a:	f040 8089 	bne.w	800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800f54e:	4b95      	ldr	r3, [pc, #596]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f552:	f003 0307 	and.w	r3, r3, #7
 800f556:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800f558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55a:	2b04      	cmp	r3, #4
 800f55c:	d87d      	bhi.n	800f65a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800f55e:	a201      	add	r2, pc, #4	; (adr r2, 800f564 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800f560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f564:	0800f579 	.word	0x0800f579
 800f568:	0800f59d 	.word	0x0800f59d
 800f56c:	0800f5c1 	.word	0x0800f5c1
 800f570:	0800f655 	.word	0x0800f655
 800f574:	0800f5e5 	.word	0x0800f5e5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f578:	4b8a      	ldr	r3, [pc, #552]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f584:	d107      	bne.n	800f596 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f58a:	4618      	mov	r0, r3
 800f58c:	f000 feba 	bl	8010304 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800f590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f592:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f594:	e3ef      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f596:	2300      	movs	r3, #0
 800f598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f59a:	e3ec      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f59c:	4b81      	ldr	r3, [pc, #516]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f5a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f5a8:	d107      	bne.n	800f5ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5aa:	f107 0318 	add.w	r3, r7, #24
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f000 fc00 	bl	800fdb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f5b4:	69bb      	ldr	r3, [r7, #24]
 800f5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f5b8:	e3dd      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f5be:	e3da      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f5c0:	4b78      	ldr	r3, [pc, #480]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f5c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f5cc:	d107      	bne.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5ce:	f107 030c 	add.w	r3, r7, #12
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f000 fd42 	bl	801005c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f5dc:	e3cb      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f5e2:	e3c8      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f5e4:	4b6f      	ldr	r3, [pc, #444]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f5e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f5ec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f5ee:	4b6d      	ldr	r3, [pc, #436]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f003 0304 	and.w	r3, r3, #4
 800f5f6:	2b04      	cmp	r3, #4
 800f5f8:	d10c      	bne.n	800f614 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800f5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d109      	bne.n	800f614 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f600:	4b68      	ldr	r3, [pc, #416]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	08db      	lsrs	r3, r3, #3
 800f606:	f003 0303 	and.w	r3, r3, #3
 800f60a:	4a67      	ldr	r2, [pc, #412]	; (800f7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800f60c:	fa22 f303 	lsr.w	r3, r2, r3
 800f610:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f612:	e01e      	b.n	800f652 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f614:	4b63      	ldr	r3, [pc, #396]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f61c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f620:	d106      	bne.n	800f630 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800f622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f628:	d102      	bne.n	800f630 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f62a:	4b60      	ldr	r3, [pc, #384]	; (800f7ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800f62c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f62e:	e010      	b.n	800f652 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f630:	4b5c      	ldr	r3, [pc, #368]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f63c:	d106      	bne.n	800f64c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800f63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f644:	d102      	bne.n	800f64c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f646:	4b5a      	ldr	r3, [pc, #360]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800f648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f64a:	e002      	b.n	800f652 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f64c:	2300      	movs	r3, #0
 800f64e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f650:	e391      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f652:	e390      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f654:	4b57      	ldr	r3, [pc, #348]	; (800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800f656:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f658:	e38d      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800f65a:	2300      	movs	r3, #0
 800f65c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f65e:	e38a      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f666:	f040 80a7 	bne.w	800f7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800f66a:	4b4e      	ldr	r3, [pc, #312]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f66c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f66e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800f672:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800f674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f676:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f67a:	d054      	beq.n	800f726 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800f67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f682:	f200 808b 	bhi.w	800f79c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800f686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f688:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f68c:	f000 8083 	beq.w	800f796 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800f690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f692:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f696:	f200 8081 	bhi.w	800f79c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800f69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f6a0:	d02f      	beq.n	800f702 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800f6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f6a8:	d878      	bhi.n	800f79c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800f6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d004      	beq.n	800f6ba <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800f6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f6b6:	d012      	beq.n	800f6de <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800f6b8:	e070      	b.n	800f79c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f6ba:	4b3a      	ldr	r3, [pc, #232]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f6c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f6c6:	d107      	bne.n	800f6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f6c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f000 fe19 	bl	8010304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f6d6:	e34e      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f6dc:	e34b      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f6de:	4b31      	ldr	r3, [pc, #196]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f6e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f6ea:	d107      	bne.n	800f6fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6ec:	f107 0318 	add.w	r3, r7, #24
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f000 fb5f 	bl	800fdb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f6f6:	69bb      	ldr	r3, [r7, #24]
 800f6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f6fa:	e33c      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f700:	e339      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f702:	4b28      	ldr	r3, [pc, #160]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f70a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f70e:	d107      	bne.n	800f720 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f710:	f107 030c 	add.w	r3, r7, #12
 800f714:	4618      	mov	r0, r3
 800f716:	f000 fca1 	bl	801005c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f71e:	e32a      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f720:	2300      	movs	r3, #0
 800f722:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f724:	e327      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f726:	4b1f      	ldr	r3, [pc, #124]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f72a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f72e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f730:	4b1c      	ldr	r3, [pc, #112]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	f003 0304 	and.w	r3, r3, #4
 800f738:	2b04      	cmp	r3, #4
 800f73a:	d10c      	bne.n	800f756 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800f73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d109      	bne.n	800f756 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f742:	4b18      	ldr	r3, [pc, #96]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	08db      	lsrs	r3, r3, #3
 800f748:	f003 0303 	and.w	r3, r3, #3
 800f74c:	4a16      	ldr	r2, [pc, #88]	; (800f7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800f74e:	fa22 f303 	lsr.w	r3, r2, r3
 800f752:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f754:	e01e      	b.n	800f794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f756:	4b13      	ldr	r3, [pc, #76]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f75e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f762:	d106      	bne.n	800f772 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800f764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f76a:	d102      	bne.n	800f772 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f76c:	4b0f      	ldr	r3, [pc, #60]	; (800f7ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800f76e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f770:	e010      	b.n	800f794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f772:	4b0c      	ldr	r3, [pc, #48]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f77a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f77e:	d106      	bne.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800f780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f786:	d102      	bne.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f788:	4b09      	ldr	r3, [pc, #36]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800f78a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f78c:	e002      	b.n	800f794 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f78e:	2300      	movs	r3, #0
 800f790:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f792:	e2f0      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f794:	e2ef      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f796:	4b07      	ldr	r3, [pc, #28]	; (800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800f798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f79a:	e2ec      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800f79c:	2300      	movs	r3, #0
 800f79e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f7a0:	e2e9      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f7a2:	bf00      	nop
 800f7a4:	58024400 	.word	0x58024400
 800f7a8:	03d09000 	.word	0x03d09000
 800f7ac:	003d0900 	.word	0x003d0900
 800f7b0:	017d7840 	.word	0x017d7840
 800f7b4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f7be:	f040 809c 	bne.w	800f8fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800f7c2:	4b9d      	ldr	r3, [pc, #628]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7c6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800f7ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800f7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f7d2:	d054      	beq.n	800f87e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800f7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f7da:	f200 808b 	bhi.w	800f8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f7e4:	f000 8083 	beq.w	800f8ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f7ee:	f200 8081 	bhi.w	800f8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f7f8:	d02f      	beq.n	800f85a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800f7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f800:	d878      	bhi.n	800f8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f804:	2b00      	cmp	r3, #0
 800f806:	d004      	beq.n	800f812 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800f808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f80a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f80e:	d012      	beq.n	800f836 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800f810:	e070      	b.n	800f8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f812:	4b89      	ldr	r3, [pc, #548]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f81a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f81e:	d107      	bne.n	800f830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f824:	4618      	mov	r0, r3
 800f826:	f000 fd6d 	bl	8010304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f82e:	e2a2      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f830:	2300      	movs	r3, #0
 800f832:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f834:	e29f      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f836:	4b80      	ldr	r3, [pc, #512]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f83e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f842:	d107      	bne.n	800f854 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f844:	f107 0318 	add.w	r3, r7, #24
 800f848:	4618      	mov	r0, r3
 800f84a:	f000 fab3 	bl	800fdb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f84e:	69bb      	ldr	r3, [r7, #24]
 800f850:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800f852:	e290      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f854:	2300      	movs	r3, #0
 800f856:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f858:	e28d      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f85a:	4b77      	ldr	r3, [pc, #476]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f866:	d107      	bne.n	800f878 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f868:	f107 030c 	add.w	r3, r7, #12
 800f86c:	4618      	mov	r0, r3
 800f86e:	f000 fbf5 	bl	801005c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f876:	e27e      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f878:	2300      	movs	r3, #0
 800f87a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f87c:	e27b      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f87e:	4b6e      	ldr	r3, [pc, #440]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f882:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f886:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f888:	4b6b      	ldr	r3, [pc, #428]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	f003 0304 	and.w	r3, r3, #4
 800f890:	2b04      	cmp	r3, #4
 800f892:	d10c      	bne.n	800f8ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f896:	2b00      	cmp	r3, #0
 800f898:	d109      	bne.n	800f8ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f89a:	4b67      	ldr	r3, [pc, #412]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	08db      	lsrs	r3, r3, #3
 800f8a0:	f003 0303 	and.w	r3, r3, #3
 800f8a4:	4a65      	ldr	r2, [pc, #404]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f8a6:	fa22 f303 	lsr.w	r3, r2, r3
 800f8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8ac:	e01e      	b.n	800f8ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f8ae:	4b62      	ldr	r3, [pc, #392]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8ba:	d106      	bne.n	800f8ca <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800f8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f8c2:	d102      	bne.n	800f8ca <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f8c4:	4b5e      	ldr	r3, [pc, #376]	; (800fa40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800f8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8c8:	e010      	b.n	800f8ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f8ca:	4b5b      	ldr	r3, [pc, #364]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f8d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f8d6:	d106      	bne.n	800f8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800f8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f8de:	d102      	bne.n	800f8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f8e0:	4b58      	ldr	r3, [pc, #352]	; (800fa44 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800f8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8e4:	e002      	b.n	800f8ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f8ea:	e244      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f8ec:	e243      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f8ee:	4b56      	ldr	r3, [pc, #344]	; (800fa48 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800f8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f8f2:	e240      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f8f8:	e23d      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f900:	f040 80a7 	bne.w	800fa52 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800f904:	4b4c      	ldr	r3, [pc, #304]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f908:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f90c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f914:	d055      	beq.n	800f9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800f916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f91c:	f200 8096 	bhi.w	800fa4c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800f920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f922:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f926:	f000 8084 	beq.w	800fa32 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800f92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f930:	f200 808c 	bhi.w	800fa4c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800f934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f93a:	d030      	beq.n	800f99e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800f93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f942:	f200 8083 	bhi.w	800fa4c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800f946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d004      	beq.n	800f956 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800f94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f952:	d012      	beq.n	800f97a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800f954:	e07a      	b.n	800fa4c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f956:	4b38      	ldr	r3, [pc, #224]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f95e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f962:	d107      	bne.n	800f974 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f968:	4618      	mov	r0, r3
 800f96a:	f000 fccb 	bl	8010304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f970:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f972:	e200      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f974:	2300      	movs	r3, #0
 800f976:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f978:	e1fd      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f97a:	4b2f      	ldr	r3, [pc, #188]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f986:	d107      	bne.n	800f998 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f988:	f107 0318 	add.w	r3, r7, #24
 800f98c:	4618      	mov	r0, r3
 800f98e:	f000 fa11 	bl	800fdb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f992:	69bb      	ldr	r3, [r7, #24]
 800f994:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f996:	e1ee      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f998:	2300      	movs	r3, #0
 800f99a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f99c:	e1eb      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f99e:	4b26      	ldr	r3, [pc, #152]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f9a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f9aa:	d107      	bne.n	800f9bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9ac:	f107 030c 	add.w	r3, r7, #12
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f000 fb53 	bl	801005c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f9ba:	e1dc      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f9c0:	e1d9      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f9c2:	4b1d      	ldr	r3, [pc, #116]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f9c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f9ca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f9cc:	4b1a      	ldr	r3, [pc, #104]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f003 0304 	and.w	r3, r3, #4
 800f9d4:	2b04      	cmp	r3, #4
 800f9d6:	d10c      	bne.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800f9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d109      	bne.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f9de:	4b16      	ldr	r3, [pc, #88]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	08db      	lsrs	r3, r3, #3
 800f9e4:	f003 0303 	and.w	r3, r3, #3
 800f9e8:	4a14      	ldr	r2, [pc, #80]	; (800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f9ea:	fa22 f303 	lsr.w	r3, r2, r3
 800f9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9f0:	e01e      	b.n	800fa30 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f9f2:	4b11      	ldr	r3, [pc, #68]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9fe:	d106      	bne.n	800fa0e <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800fa00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa06:	d102      	bne.n	800fa0e <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800fa08:	4b0d      	ldr	r3, [pc, #52]	; (800fa40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800fa0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa0c:	e010      	b.n	800fa30 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fa0e:	4b0a      	ldr	r3, [pc, #40]	; (800fa38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa1a:	d106      	bne.n	800fa2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800fa1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa22:	d102      	bne.n	800fa2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800fa24:	4b07      	ldr	r3, [pc, #28]	; (800fa44 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800fa26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa28:	e002      	b.n	800fa30 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800fa2e:	e1a2      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800fa30:	e1a1      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800fa32:	4b05      	ldr	r3, [pc, #20]	; (800fa48 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800fa34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fa36:	e19e      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800fa38:	58024400 	.word	0x58024400
 800fa3c:	03d09000 	.word	0x03d09000
 800fa40:	003d0900 	.word	0x003d0900
 800fa44:	017d7840 	.word	0x017d7840
 800fa48:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fa50:	e191      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800fa58:	d173      	bne.n	800fb42 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800fa5a:	4b9b      	ldr	r3, [pc, #620]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fa5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800fa62:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800fa64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa6a:	d02f      	beq.n	800facc <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800fa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa72:	d863      	bhi.n	800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800fa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d004      	beq.n	800fa84 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800fa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa80:	d012      	beq.n	800faa8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800fa82:	e05b      	b.n	800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fa84:	4b90      	ldr	r3, [pc, #576]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fa8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fa90:	d107      	bne.n	800faa2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa92:	f107 0318 	add.w	r3, r7, #24
 800fa96:	4618      	mov	r0, r3
 800fa98:	f000 f98c 	bl	800fdb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800faa0:	e169      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800faa2:	2300      	movs	r3, #0
 800faa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800faa6:	e166      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800faa8:	4b87      	ldr	r3, [pc, #540]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fab4:	d107      	bne.n	800fac6 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fab6:	f107 030c 	add.w	r3, r7, #12
 800faba:	4618      	mov	r0, r3
 800fabc:	f000 face 	bl	801005c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800fac4:	e157      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800fac6:	2300      	movs	r3, #0
 800fac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800faca:	e154      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800facc:	4b7e      	ldr	r3, [pc, #504]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800face:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fad4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fad6:	4b7c      	ldr	r3, [pc, #496]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	f003 0304 	and.w	r3, r3, #4
 800fade:	2b04      	cmp	r3, #4
 800fae0:	d10c      	bne.n	800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800fae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d109      	bne.n	800fafc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fae8:	4b77      	ldr	r3, [pc, #476]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	08db      	lsrs	r3, r3, #3
 800faee:	f003 0303 	and.w	r3, r3, #3
 800faf2:	4a76      	ldr	r2, [pc, #472]	; (800fccc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800faf4:	fa22 f303 	lsr.w	r3, r2, r3
 800faf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fafa:	e01e      	b.n	800fb3a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fafc:	4b72      	ldr	r3, [pc, #456]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb08:	d106      	bne.n	800fb18 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800fb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fb10:	d102      	bne.n	800fb18 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800fb12:	4b6f      	ldr	r3, [pc, #444]	; (800fcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800fb14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb16:	e010      	b.n	800fb3a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fb18:	4b6b      	ldr	r3, [pc, #428]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb24:	d106      	bne.n	800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800fb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fb2c:	d102      	bne.n	800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800fb2e:	4b69      	ldr	r3, [pc, #420]	; (800fcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800fb30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb32:	e002      	b.n	800fb3a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800fb34:	2300      	movs	r3, #0
 800fb36:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800fb38:	e11d      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800fb3a:	e11c      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fb40:	e119      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb48:	d133      	bne.n	800fbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800fb4a:	4b5f      	ldr	r3, [pc, #380]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fb4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fb52:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800fb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d004      	beq.n	800fb64 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800fb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb60:	d012      	beq.n	800fb88 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800fb62:	e023      	b.n	800fbac <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fb64:	4b58      	ldr	r3, [pc, #352]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fb70:	d107      	bne.n	800fb82 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fb72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb76:	4618      	mov	r0, r3
 800fb78:	f000 fbc4 	bl	8010304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fb80:	e0f9      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fb82:	2300      	movs	r3, #0
 800fb84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fb86:	e0f6      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fb88:	4b4f      	ldr	r3, [pc, #316]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fb94:	d107      	bne.n	800fba6 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb96:	f107 0318 	add.w	r3, r7, #24
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f000 f90a 	bl	800fdb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800fba0:	6a3b      	ldr	r3, [r7, #32]
 800fba2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fba4:	e0e7      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fba6:	2300      	movs	r3, #0
 800fba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fbaa:	e0e4      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800fbac:	2300      	movs	r3, #0
 800fbae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fbb0:	e0e1      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fbb8:	f040 808e 	bne.w	800fcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800fbbc:	4b42      	ldr	r3, [pc, #264]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fbbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbc0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800fbc4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800fbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fbcc:	d06b      	beq.n	800fca6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800fbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fbd4:	d874      	bhi.n	800fcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800fbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbdc:	d056      	beq.n	800fc8c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800fbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbe4:	d86c      	bhi.n	800fcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800fbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fbec:	d03b      	beq.n	800fc66 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800fbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fbf4:	d864      	bhi.n	800fcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800fbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fbfc:	d021      	beq.n	800fc42 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800fbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc04:	d85c      	bhi.n	800fcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800fc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d004      	beq.n	800fc16 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800fc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fc12:	d004      	beq.n	800fc1e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800fc14:	e054      	b.n	800fcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800fc16:	f000 f8b7 	bl	800fd88 <HAL_RCCEx_GetD3PCLK1Freq>
 800fc1a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800fc1c:	e0ab      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fc1e:	4b2a      	ldr	r3, [pc, #168]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fc2a:	d107      	bne.n	800fc3c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc2c:	f107 0318 	add.w	r3, r7, #24
 800fc30:	4618      	mov	r0, r3
 800fc32:	f000 f8bf 	bl	800fdb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fc36:	69fb      	ldr	r3, [r7, #28]
 800fc38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fc3a:	e09c      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fc40:	e099      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fc42:	4b21      	ldr	r3, [pc, #132]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fc4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc4e:	d107      	bne.n	800fc60 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc50:	f107 030c 	add.w	r3, r7, #12
 800fc54:	4618      	mov	r0, r3
 800fc56:	f000 fa01 	bl	801005c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fc5e:	e08a      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fc60:	2300      	movs	r3, #0
 800fc62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fc64:	e087      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fc66:	4b18      	ldr	r3, [pc, #96]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	f003 0304 	and.w	r3, r3, #4
 800fc6e:	2b04      	cmp	r3, #4
 800fc70:	d109      	bne.n	800fc86 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fc72:	4b15      	ldr	r3, [pc, #84]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	08db      	lsrs	r3, r3, #3
 800fc78:	f003 0303 	and.w	r3, r3, #3
 800fc7c:	4a13      	ldr	r2, [pc, #76]	; (800fccc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800fc7e:	fa22 f303 	lsr.w	r3, r2, r3
 800fc82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fc84:	e077      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fc86:	2300      	movs	r3, #0
 800fc88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fc8a:	e074      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fc8c:	4b0e      	ldr	r3, [pc, #56]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc98:	d102      	bne.n	800fca0 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800fc9a:	4b0d      	ldr	r3, [pc, #52]	; (800fcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800fc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800fc9e:	e06a      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800fca0:	2300      	movs	r3, #0
 800fca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fca4:	e067      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fca6:	4b08      	ldr	r3, [pc, #32]	; (800fcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fcae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fcb2:	d102      	bne.n	800fcba <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800fcb4:	4b07      	ldr	r3, [pc, #28]	; (800fcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800fcb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fcb8:	e05d      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fcbe:	e05a      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fcc4:	e057      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800fcc6:	bf00      	nop
 800fcc8:	58024400 	.word	0x58024400
 800fccc:	03d09000 	.word	0x03d09000
 800fcd0:	003d0900 	.word	0x003d0900
 800fcd4:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fcde:	d148      	bne.n	800fd72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800fce0:	4b27      	ldr	r3, [pc, #156]	; (800fd80 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800fce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fce4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fce8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800fcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fcf0:	d02a      	beq.n	800fd48 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800fcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fcf8:	d838      	bhi.n	800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800fcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d004      	beq.n	800fd0a <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 800fd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd06:	d00d      	beq.n	800fd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800fd08:	e030      	b.n	800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fd0a:	4b1d      	ldr	r3, [pc, #116]	; (800fd80 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd16:	d102      	bne.n	800fd1e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800fd18:	4b1a      	ldr	r3, [pc, #104]	; (800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800fd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fd1c:	e02b      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fd22:	e028      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fd24:	4b16      	ldr	r3, [pc, #88]	; (800fd80 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fd30:	d107      	bne.n	800fd42 <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fd32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd36:	4618      	mov	r0, r3
 800fd38:	f000 fae4 	bl	8010304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fd40:	e019      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fd42:	2300      	movs	r3, #0
 800fd44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fd46:	e016      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fd48:	4b0d      	ldr	r3, [pc, #52]	; (800fd80 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fd50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fd54:	d107      	bne.n	800fd66 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd56:	f107 0318 	add.w	r3, r7, #24
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f000 f82a 	bl	800fdb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fd60:	69fb      	ldr	r3, [r7, #28]
 800fd62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fd64:	e007      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fd66:	2300      	movs	r3, #0
 800fd68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fd6a:	e004      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fd70:	e001      	b.n	800fd76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 800fd72:	2300      	movs	r3, #0
 800fd74:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800fd76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3740      	adds	r7, #64	; 0x40
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	58024400 	.word	0x58024400
 800fd84:	017d7840 	.word	0x017d7840

0800fd88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fd8c:	f7fe fc80 	bl	800e690 <HAL_RCC_GetHCLKFreq>
 800fd90:	4602      	mov	r2, r0
 800fd92:	4b06      	ldr	r3, [pc, #24]	; (800fdac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fd94:	6a1b      	ldr	r3, [r3, #32]
 800fd96:	091b      	lsrs	r3, r3, #4
 800fd98:	f003 0307 	and.w	r3, r3, #7
 800fd9c:	4904      	ldr	r1, [pc, #16]	; (800fdb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fd9e:	5ccb      	ldrb	r3, [r1, r3]
 800fda0:	f003 031f 	and.w	r3, r3, #31
 800fda4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	58024400 	.word	0x58024400
 800fdb0:	08016fe0 	.word	0x08016fe0

0800fdb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b089      	sub	sp, #36	; 0x24
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fdbc:	4ba1      	ldr	r3, [pc, #644]	; (8010044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdc0:	f003 0303 	and.w	r3, r3, #3
 800fdc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800fdc6:	4b9f      	ldr	r3, [pc, #636]	; (8010044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdca:	0b1b      	lsrs	r3, r3, #12
 800fdcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fdd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fdd2:	4b9c      	ldr	r3, [pc, #624]	; (8010044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdd6:	091b      	lsrs	r3, r3, #4
 800fdd8:	f003 0301 	and.w	r3, r3, #1
 800fddc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800fdde:	4b99      	ldr	r3, [pc, #612]	; (8010044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fde2:	08db      	lsrs	r3, r3, #3
 800fde4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fde8:	693a      	ldr	r2, [r7, #16]
 800fdea:	fb02 f303 	mul.w	r3, r2, r3
 800fdee:	ee07 3a90 	vmov	s15, r3
 800fdf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f000 8111 	beq.w	8010024 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800fe02:	69bb      	ldr	r3, [r7, #24]
 800fe04:	2b02      	cmp	r3, #2
 800fe06:	f000 8083 	beq.w	800ff10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fe0a:	69bb      	ldr	r3, [r7, #24]
 800fe0c:	2b02      	cmp	r3, #2
 800fe0e:	f200 80a1 	bhi.w	800ff54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fe12:	69bb      	ldr	r3, [r7, #24]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d003      	beq.n	800fe20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fe18:	69bb      	ldr	r3, [r7, #24]
 800fe1a:	2b01      	cmp	r3, #1
 800fe1c:	d056      	beq.n	800fecc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fe1e:	e099      	b.n	800ff54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe20:	4b88      	ldr	r3, [pc, #544]	; (8010044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f003 0320 	and.w	r3, r3, #32
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d02d      	beq.n	800fe88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fe2c:	4b85      	ldr	r3, [pc, #532]	; (8010044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	08db      	lsrs	r3, r3, #3
 800fe32:	f003 0303 	and.w	r3, r3, #3
 800fe36:	4a84      	ldr	r2, [pc, #528]	; (8010048 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800fe38:	fa22 f303 	lsr.w	r3, r2, r3
 800fe3c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	ee07 3a90 	vmov	s15, r3
 800fe44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	ee07 3a90 	vmov	s15, r3
 800fe4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe56:	4b7b      	ldr	r3, [pc, #492]	; (8010044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe5e:	ee07 3a90 	vmov	s15, r3
 800fe62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe66:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 801004c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fe6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800fe86:	e087      	b.n	800ff98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	ee07 3a90 	vmov	s15, r3
 800fe8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010050 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fe96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe9a:	4b6a      	ldr	r3, [pc, #424]	; (8010044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fea2:	ee07 3a90 	vmov	s15, r3
 800fea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800feaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800feae:	eddf 5a67 	vldr	s11, [pc, #412]	; 801004c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800feb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800feb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800feba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800febe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fec6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800feca:	e065      	b.n	800ff98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	ee07 3a90 	vmov	s15, r3
 800fed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fed6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010054 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800feda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fede:	4b59      	ldr	r3, [pc, #356]	; (8010044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fee6:	ee07 3a90 	vmov	s15, r3
 800feea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800feee:	ed97 6a03 	vldr	s12, [r7, #12]
 800fef2:	eddf 5a56 	vldr	s11, [pc, #344]	; 801004c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fefa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fefe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ff0e:	e043      	b.n	800ff98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	ee07 3a90 	vmov	s15, r3
 800ff16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ff1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff22:	4b48      	ldr	r3, [pc, #288]	; (8010044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff2a:	ee07 3a90 	vmov	s15, r3
 800ff2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff36:	eddf 5a45 	vldr	s11, [pc, #276]	; 801004c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ff52:	e021      	b.n	800ff98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	ee07 3a90 	vmov	s15, r3
 800ff5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010054 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ff62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff66:	4b37      	ldr	r3, [pc, #220]	; (8010044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff6e:	ee07 3a90 	vmov	s15, r3
 800ff72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff76:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801004c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ff96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ff98:	4b2a      	ldr	r3, [pc, #168]	; (8010044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff9c:	0a5b      	lsrs	r3, r3, #9
 800ff9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffa2:	ee07 3a90 	vmov	s15, r3
 800ffa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ffae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ffb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ffb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffbe:	ee17 2a90 	vmov	r2, s15
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ffc6:	4b1f      	ldr	r3, [pc, #124]	; (8010044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffca:	0c1b      	lsrs	r3, r3, #16
 800ffcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffd0:	ee07 3a90 	vmov	s15, r3
 800ffd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ffdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ffe0:	edd7 6a07 	vldr	s13, [r7, #28]
 800ffe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffec:	ee17 2a90 	vmov	r2, s15
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800fff4:	4b13      	ldr	r3, [pc, #76]	; (8010044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fff8:	0e1b      	lsrs	r3, r3, #24
 800fffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fffe:	ee07 3a90 	vmov	s15, r3
 8010002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801000a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801000e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801001a:	ee17 2a90 	vmov	r2, s15
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010022:	e008      	b.n	8010036 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2200      	movs	r2, #0
 801002e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2200      	movs	r2, #0
 8010034:	609a      	str	r2, [r3, #8]
}
 8010036:	bf00      	nop
 8010038:	3724      	adds	r7, #36	; 0x24
 801003a:	46bd      	mov	sp, r7
 801003c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010040:	4770      	bx	lr
 8010042:	bf00      	nop
 8010044:	58024400 	.word	0x58024400
 8010048:	03d09000 	.word	0x03d09000
 801004c:	46000000 	.word	0x46000000
 8010050:	4c742400 	.word	0x4c742400
 8010054:	4a742400 	.word	0x4a742400
 8010058:	4bbebc20 	.word	0x4bbebc20

0801005c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 801005c:	b480      	push	{r7}
 801005e:	b089      	sub	sp, #36	; 0x24
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010064:	4ba1      	ldr	r3, [pc, #644]	; (80102ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010068:	f003 0303 	and.w	r3, r3, #3
 801006c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 801006e:	4b9f      	ldr	r3, [pc, #636]	; (80102ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010072:	0d1b      	lsrs	r3, r3, #20
 8010074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010078:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801007a:	4b9c      	ldr	r3, [pc, #624]	; (80102ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801007c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801007e:	0a1b      	lsrs	r3, r3, #8
 8010080:	f003 0301 	and.w	r3, r3, #1
 8010084:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8010086:	4b99      	ldr	r3, [pc, #612]	; (80102ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801008a:	08db      	lsrs	r3, r3, #3
 801008c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010090:	693a      	ldr	r2, [r7, #16]
 8010092:	fb02 f303 	mul.w	r3, r2, r3
 8010096:	ee07 3a90 	vmov	s15, r3
 801009a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801009e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f000 8111 	beq.w	80102cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80100aa:	69bb      	ldr	r3, [r7, #24]
 80100ac:	2b02      	cmp	r3, #2
 80100ae:	f000 8083 	beq.w	80101b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80100b2:	69bb      	ldr	r3, [r7, #24]
 80100b4:	2b02      	cmp	r3, #2
 80100b6:	f200 80a1 	bhi.w	80101fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80100ba:	69bb      	ldr	r3, [r7, #24]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d003      	beq.n	80100c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80100c0:	69bb      	ldr	r3, [r7, #24]
 80100c2:	2b01      	cmp	r3, #1
 80100c4:	d056      	beq.n	8010174 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80100c6:	e099      	b.n	80101fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100c8:	4b88      	ldr	r3, [pc, #544]	; (80102ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	f003 0320 	and.w	r3, r3, #32
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d02d      	beq.n	8010130 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80100d4:	4b85      	ldr	r3, [pc, #532]	; (80102ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	08db      	lsrs	r3, r3, #3
 80100da:	f003 0303 	and.w	r3, r3, #3
 80100de:	4a84      	ldr	r2, [pc, #528]	; (80102f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80100e0:	fa22 f303 	lsr.w	r3, r2, r3
 80100e4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	ee07 3a90 	vmov	s15, r3
 80100ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	ee07 3a90 	vmov	s15, r3
 80100f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100fe:	4b7b      	ldr	r3, [pc, #492]	; (80102ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010106:	ee07 3a90 	vmov	s15, r3
 801010a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801010e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010112:	eddf 5a78 	vldr	s11, [pc, #480]	; 80102f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801011a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801011e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010126:	ee67 7a27 	vmul.f32	s15, s14, s15
 801012a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801012e:	e087      	b.n	8010240 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	ee07 3a90 	vmov	s15, r3
 8010136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801013a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80102f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801013e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010142:	4b6a      	ldr	r3, [pc, #424]	; (80102ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801014a:	ee07 3a90 	vmov	s15, r3
 801014e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010152:	ed97 6a03 	vldr	s12, [r7, #12]
 8010156:	eddf 5a67 	vldr	s11, [pc, #412]	; 80102f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801015a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801015e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801016a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801016e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010172:	e065      	b.n	8010240 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	ee07 3a90 	vmov	s15, r3
 801017a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801017e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80102fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010186:	4b59      	ldr	r3, [pc, #356]	; (80102ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801018a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801018e:	ee07 3a90 	vmov	s15, r3
 8010192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010196:	ed97 6a03 	vldr	s12, [r7, #12]
 801019a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80102f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801019e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80101b6:	e043      	b.n	8010240 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	ee07 3a90 	vmov	s15, r3
 80101be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010300 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80101c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101ca:	4b48      	ldr	r3, [pc, #288]	; (80102ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80101cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101d2:	ee07 3a90 	vmov	s15, r3
 80101d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101da:	ed97 6a03 	vldr	s12, [r7, #12]
 80101de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80102f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80101e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80101fa:	e021      	b.n	8010240 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	ee07 3a90 	vmov	s15, r3
 8010202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010206:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80102fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801020a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801020e:	4b37      	ldr	r3, [pc, #220]	; (80102ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010216:	ee07 3a90 	vmov	s15, r3
 801021a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801021e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010222:	eddf 5a34 	vldr	s11, [pc, #208]	; 80102f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801022a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801022e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010236:	ee67 7a27 	vmul.f32	s15, s14, s15
 801023a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801023e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8010240:	4b2a      	ldr	r3, [pc, #168]	; (80102ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010244:	0a5b      	lsrs	r3, r3, #9
 8010246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801024a:	ee07 3a90 	vmov	s15, r3
 801024e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010256:	ee37 7a87 	vadd.f32	s14, s15, s14
 801025a:	edd7 6a07 	vldr	s13, [r7, #28]
 801025e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010266:	ee17 2a90 	vmov	r2, s15
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 801026e:	4b1f      	ldr	r3, [pc, #124]	; (80102ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010272:	0c1b      	lsrs	r3, r3, #16
 8010274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010278:	ee07 3a90 	vmov	s15, r3
 801027c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010280:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010284:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010288:	edd7 6a07 	vldr	s13, [r7, #28]
 801028c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010294:	ee17 2a90 	vmov	r2, s15
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 801029c:	4b13      	ldr	r3, [pc, #76]	; (80102ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801029e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102a0:	0e1b      	lsrs	r3, r3, #24
 80102a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102a6:	ee07 3a90 	vmov	s15, r3
 80102aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80102b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80102ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102c2:	ee17 2a90 	vmov	r2, s15
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80102ca:	e008      	b.n	80102de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2200      	movs	r2, #0
 80102d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2200      	movs	r2, #0
 80102dc:	609a      	str	r2, [r3, #8]
}
 80102de:	bf00      	nop
 80102e0:	3724      	adds	r7, #36	; 0x24
 80102e2:	46bd      	mov	sp, r7
 80102e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e8:	4770      	bx	lr
 80102ea:	bf00      	nop
 80102ec:	58024400 	.word	0x58024400
 80102f0:	03d09000 	.word	0x03d09000
 80102f4:	46000000 	.word	0x46000000
 80102f8:	4c742400 	.word	0x4c742400
 80102fc:	4a742400 	.word	0x4a742400
 8010300:	4bbebc20 	.word	0x4bbebc20

08010304 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8010304:	b480      	push	{r7}
 8010306:	b089      	sub	sp, #36	; 0x24
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801030c:	4ba0      	ldr	r3, [pc, #640]	; (8010590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801030e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010310:	f003 0303 	and.w	r3, r3, #3
 8010314:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8010316:	4b9e      	ldr	r3, [pc, #632]	; (8010590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801031a:	091b      	lsrs	r3, r3, #4
 801031c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010320:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010322:	4b9b      	ldr	r3, [pc, #620]	; (8010590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010326:	f003 0301 	and.w	r3, r3, #1
 801032a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801032c:	4b98      	ldr	r3, [pc, #608]	; (8010590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801032e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010330:	08db      	lsrs	r3, r3, #3
 8010332:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010336:	693a      	ldr	r2, [r7, #16]
 8010338:	fb02 f303 	mul.w	r3, r2, r3
 801033c:	ee07 3a90 	vmov	s15, r3
 8010340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010344:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	2b00      	cmp	r3, #0
 801034c:	f000 8111 	beq.w	8010572 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	2b02      	cmp	r3, #2
 8010354:	f000 8083 	beq.w	801045e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010358:	69bb      	ldr	r3, [r7, #24]
 801035a:	2b02      	cmp	r3, #2
 801035c:	f200 80a1 	bhi.w	80104a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010360:	69bb      	ldr	r3, [r7, #24]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d003      	beq.n	801036e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010366:	69bb      	ldr	r3, [r7, #24]
 8010368:	2b01      	cmp	r3, #1
 801036a:	d056      	beq.n	801041a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801036c:	e099      	b.n	80104a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801036e:	4b88      	ldr	r3, [pc, #544]	; (8010590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	f003 0320 	and.w	r3, r3, #32
 8010376:	2b00      	cmp	r3, #0
 8010378:	d02d      	beq.n	80103d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801037a:	4b85      	ldr	r3, [pc, #532]	; (8010590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	08db      	lsrs	r3, r3, #3
 8010380:	f003 0303 	and.w	r3, r3, #3
 8010384:	4a83      	ldr	r2, [pc, #524]	; (8010594 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010386:	fa22 f303 	lsr.w	r3, r2, r3
 801038a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	ee07 3a90 	vmov	s15, r3
 8010392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	ee07 3a90 	vmov	s15, r3
 801039c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80103a4:	4b7a      	ldr	r3, [pc, #488]	; (8010590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103ac:	ee07 3a90 	vmov	s15, r3
 80103b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80103b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8010598 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80103bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80103c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80103c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80103c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80103cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80103d0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80103d4:	e087      	b.n	80104e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	ee07 3a90 	vmov	s15, r3
 80103dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801059c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80103e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80103e8:	4b69      	ldr	r3, [pc, #420]	; (8010590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103f0:	ee07 3a90 	vmov	s15, r3
 80103f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80103fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8010598 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010400:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010404:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010408:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801040c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010414:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010418:	e065      	b.n	80104e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	ee07 3a90 	vmov	s15, r3
 8010420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010424:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80105a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801042c:	4b58      	ldr	r3, [pc, #352]	; (8010590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801042e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010434:	ee07 3a90 	vmov	s15, r3
 8010438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801043c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010440:	eddf 5a55 	vldr	s11, [pc, #340]	; 8010598 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801044c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010458:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801045c:	e043      	b.n	80104e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	ee07 3a90 	vmov	s15, r3
 8010464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010468:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80105a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801046c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010470:	4b47      	ldr	r3, [pc, #284]	; (8010590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010478:	ee07 3a90 	vmov	s15, r3
 801047c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010480:	ed97 6a03 	vldr	s12, [r7, #12]
 8010484:	eddf 5a44 	vldr	s11, [pc, #272]	; 8010598 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801048c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010498:	ee67 7a27 	vmul.f32	s15, s14, s15
 801049c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80104a0:	e021      	b.n	80104e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	ee07 3a90 	vmov	s15, r3
 80104a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104ac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801059c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80104b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104b4:	4b36      	ldr	r3, [pc, #216]	; (8010590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80104b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104bc:	ee07 3a90 	vmov	s15, r3
 80104c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80104c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010598 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80104cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80104e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80104e6:	4b2a      	ldr	r3, [pc, #168]	; (8010590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80104e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104ea:	0a5b      	lsrs	r3, r3, #9
 80104ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104f0:	ee07 3a90 	vmov	s15, r3
 80104f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80104fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010500:	edd7 6a07 	vldr	s13, [r7, #28]
 8010504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801050c:	ee17 2a90 	vmov	r2, s15
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8010514:	4b1e      	ldr	r3, [pc, #120]	; (8010590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010518:	0c1b      	lsrs	r3, r3, #16
 801051a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801051e:	ee07 3a90 	vmov	s15, r3
 8010522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801052a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801052e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801053a:	ee17 2a90 	vmov	r2, s15
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8010542:	4b13      	ldr	r3, [pc, #76]	; (8010590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010546:	0e1b      	lsrs	r3, r3, #24
 8010548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801054c:	ee07 3a90 	vmov	s15, r3
 8010550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010554:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010558:	ee37 7a87 	vadd.f32	s14, s15, s14
 801055c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010568:	ee17 2a90 	vmov	r2, s15
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010570:	e008      	b.n	8010584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2200      	movs	r2, #0
 8010576:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2200      	movs	r2, #0
 801057c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2200      	movs	r2, #0
 8010582:	609a      	str	r2, [r3, #8]
}
 8010584:	bf00      	nop
 8010586:	3724      	adds	r7, #36	; 0x24
 8010588:	46bd      	mov	sp, r7
 801058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058e:	4770      	bx	lr
 8010590:	58024400 	.word	0x58024400
 8010594:	03d09000 	.word	0x03d09000
 8010598:	46000000 	.word	0x46000000
 801059c:	4c742400 	.word	0x4c742400
 80105a0:	4a742400 	.word	0x4a742400
 80105a4:	4bbebc20 	.word	0x4bbebc20

080105a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b084      	sub	sp, #16
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80105b2:	2300      	movs	r3, #0
 80105b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80105b6:	4b53      	ldr	r3, [pc, #332]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 80105b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105ba:	f003 0303 	and.w	r3, r3, #3
 80105be:	2b03      	cmp	r3, #3
 80105c0:	d101      	bne.n	80105c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80105c2:	2301      	movs	r3, #1
 80105c4:	e099      	b.n	80106fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80105c6:	4b4f      	ldr	r3, [pc, #316]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	4a4e      	ldr	r2, [pc, #312]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 80105cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80105d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80105d2:	f7f6 fcd9 	bl	8006f88 <HAL_GetTick>
 80105d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80105d8:	e008      	b.n	80105ec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80105da:	f7f6 fcd5 	bl	8006f88 <HAL_GetTick>
 80105de:	4602      	mov	r2, r0
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	1ad3      	subs	r3, r2, r3
 80105e4:	2b02      	cmp	r3, #2
 80105e6:	d901      	bls.n	80105ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80105e8:	2303      	movs	r3, #3
 80105ea:	e086      	b.n	80106fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80105ec:	4b45      	ldr	r3, [pc, #276]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d1f0      	bne.n	80105da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80105f8:	4b42      	ldr	r3, [pc, #264]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 80105fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	031b      	lsls	r3, r3, #12
 8010606:	493f      	ldr	r1, [pc, #252]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 8010608:	4313      	orrs	r3, r2
 801060a:	628b      	str	r3, [r1, #40]	; 0x28
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	3b01      	subs	r3, #1
 8010612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	3b01      	subs	r3, #1
 801061c:	025b      	lsls	r3, r3, #9
 801061e:	b29b      	uxth	r3, r3
 8010620:	431a      	orrs	r2, r3
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	68db      	ldr	r3, [r3, #12]
 8010626:	3b01      	subs	r3, #1
 8010628:	041b      	lsls	r3, r3, #16
 801062a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801062e:	431a      	orrs	r2, r3
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	691b      	ldr	r3, [r3, #16]
 8010634:	3b01      	subs	r3, #1
 8010636:	061b      	lsls	r3, r3, #24
 8010638:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801063c:	4931      	ldr	r1, [pc, #196]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 801063e:	4313      	orrs	r3, r2
 8010640:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8010642:	4b30      	ldr	r3, [pc, #192]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 8010644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010646:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	695b      	ldr	r3, [r3, #20]
 801064e:	492d      	ldr	r1, [pc, #180]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 8010650:	4313      	orrs	r3, r2
 8010652:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010654:	4b2b      	ldr	r3, [pc, #172]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 8010656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010658:	f023 0220 	bic.w	r2, r3, #32
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	699b      	ldr	r3, [r3, #24]
 8010660:	4928      	ldr	r1, [pc, #160]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 8010662:	4313      	orrs	r3, r2
 8010664:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8010666:	4b27      	ldr	r3, [pc, #156]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 8010668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801066a:	4a26      	ldr	r2, [pc, #152]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 801066c:	f023 0310 	bic.w	r3, r3, #16
 8010670:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010672:	4b24      	ldr	r3, [pc, #144]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 8010674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010676:	4b24      	ldr	r3, [pc, #144]	; (8010708 <RCCEx_PLL2_Config+0x160>)
 8010678:	4013      	ands	r3, r2
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	69d2      	ldr	r2, [r2, #28]
 801067e:	00d2      	lsls	r2, r2, #3
 8010680:	4920      	ldr	r1, [pc, #128]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 8010682:	4313      	orrs	r3, r2
 8010684:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8010686:	4b1f      	ldr	r3, [pc, #124]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 8010688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801068a:	4a1e      	ldr	r2, [pc, #120]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 801068c:	f043 0310 	orr.w	r3, r3, #16
 8010690:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d106      	bne.n	80106a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010698:	4b1a      	ldr	r3, [pc, #104]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 801069a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801069c:	4a19      	ldr	r2, [pc, #100]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 801069e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80106a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80106a4:	e00f      	b.n	80106c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	2b01      	cmp	r3, #1
 80106aa:	d106      	bne.n	80106ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80106ac:	4b15      	ldr	r3, [pc, #84]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 80106ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106b0:	4a14      	ldr	r2, [pc, #80]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 80106b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80106b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80106b8:	e005      	b.n	80106c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80106ba:	4b12      	ldr	r3, [pc, #72]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 80106bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106be:	4a11      	ldr	r2, [pc, #68]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 80106c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80106c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80106c6:	4b0f      	ldr	r3, [pc, #60]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	4a0e      	ldr	r2, [pc, #56]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 80106cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80106d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80106d2:	f7f6 fc59 	bl	8006f88 <HAL_GetTick>
 80106d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80106d8:	e008      	b.n	80106ec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80106da:	f7f6 fc55 	bl	8006f88 <HAL_GetTick>
 80106de:	4602      	mov	r2, r0
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	1ad3      	subs	r3, r2, r3
 80106e4:	2b02      	cmp	r3, #2
 80106e6:	d901      	bls.n	80106ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80106e8:	2303      	movs	r3, #3
 80106ea:	e006      	b.n	80106fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80106ec:	4b05      	ldr	r3, [pc, #20]	; (8010704 <RCCEx_PLL2_Config+0x15c>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d0f0      	beq.n	80106da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80106f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3710      	adds	r7, #16
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}
 8010702:	bf00      	nop
 8010704:	58024400 	.word	0x58024400
 8010708:	ffff0007 	.word	0xffff0007

0801070c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010716:	2300      	movs	r3, #0
 8010718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801071a:	4b53      	ldr	r3, [pc, #332]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 801071c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801071e:	f003 0303 	and.w	r3, r3, #3
 8010722:	2b03      	cmp	r3, #3
 8010724:	d101      	bne.n	801072a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8010726:	2301      	movs	r3, #1
 8010728:	e099      	b.n	801085e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801072a:	4b4f      	ldr	r3, [pc, #316]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	4a4e      	ldr	r2, [pc, #312]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 8010730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010736:	f7f6 fc27 	bl	8006f88 <HAL_GetTick>
 801073a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801073c:	e008      	b.n	8010750 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801073e:	f7f6 fc23 	bl	8006f88 <HAL_GetTick>
 8010742:	4602      	mov	r2, r0
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	1ad3      	subs	r3, r2, r3
 8010748:	2b02      	cmp	r3, #2
 801074a:	d901      	bls.n	8010750 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801074c:	2303      	movs	r3, #3
 801074e:	e086      	b.n	801085e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010750:	4b45      	ldr	r3, [pc, #276]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010758:	2b00      	cmp	r3, #0
 801075a:	d1f0      	bne.n	801073e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801075c:	4b42      	ldr	r3, [pc, #264]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 801075e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010760:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	051b      	lsls	r3, r3, #20
 801076a:	493f      	ldr	r1, [pc, #252]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 801076c:	4313      	orrs	r3, r2
 801076e:	628b      	str	r3, [r1, #40]	; 0x28
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	3b01      	subs	r3, #1
 8010776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	689b      	ldr	r3, [r3, #8]
 801077e:	3b01      	subs	r3, #1
 8010780:	025b      	lsls	r3, r3, #9
 8010782:	b29b      	uxth	r3, r3
 8010784:	431a      	orrs	r2, r3
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	68db      	ldr	r3, [r3, #12]
 801078a:	3b01      	subs	r3, #1
 801078c:	041b      	lsls	r3, r3, #16
 801078e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010792:	431a      	orrs	r2, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	691b      	ldr	r3, [r3, #16]
 8010798:	3b01      	subs	r3, #1
 801079a:	061b      	lsls	r3, r3, #24
 801079c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80107a0:	4931      	ldr	r1, [pc, #196]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 80107a2:	4313      	orrs	r3, r2
 80107a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80107a6:	4b30      	ldr	r3, [pc, #192]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 80107a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	695b      	ldr	r3, [r3, #20]
 80107b2:	492d      	ldr	r1, [pc, #180]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 80107b4:	4313      	orrs	r3, r2
 80107b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80107b8:	4b2b      	ldr	r3, [pc, #172]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 80107ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	699b      	ldr	r3, [r3, #24]
 80107c4:	4928      	ldr	r1, [pc, #160]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 80107c6:	4313      	orrs	r3, r2
 80107c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80107ca:	4b27      	ldr	r3, [pc, #156]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 80107cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ce:	4a26      	ldr	r2, [pc, #152]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 80107d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80107d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80107d6:	4b24      	ldr	r3, [pc, #144]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 80107d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80107da:	4b24      	ldr	r3, [pc, #144]	; (801086c <RCCEx_PLL3_Config+0x160>)
 80107dc:	4013      	ands	r3, r2
 80107de:	687a      	ldr	r2, [r7, #4]
 80107e0:	69d2      	ldr	r2, [r2, #28]
 80107e2:	00d2      	lsls	r2, r2, #3
 80107e4:	4920      	ldr	r1, [pc, #128]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 80107e6:	4313      	orrs	r3, r2
 80107e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80107ea:	4b1f      	ldr	r3, [pc, #124]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 80107ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ee:	4a1e      	ldr	r2, [pc, #120]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 80107f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80107f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d106      	bne.n	801080a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80107fc:	4b1a      	ldr	r3, [pc, #104]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 80107fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010800:	4a19      	ldr	r2, [pc, #100]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 8010802:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010806:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010808:	e00f      	b.n	801082a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	2b01      	cmp	r3, #1
 801080e:	d106      	bne.n	801081e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010810:	4b15      	ldr	r3, [pc, #84]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 8010812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010814:	4a14      	ldr	r2, [pc, #80]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 8010816:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801081a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801081c:	e005      	b.n	801082a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801081e:	4b12      	ldr	r3, [pc, #72]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 8010820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010822:	4a11      	ldr	r2, [pc, #68]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 8010824:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010828:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801082a:	4b0f      	ldr	r3, [pc, #60]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	4a0e      	ldr	r2, [pc, #56]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 8010830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010836:	f7f6 fba7 	bl	8006f88 <HAL_GetTick>
 801083a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801083c:	e008      	b.n	8010850 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801083e:	f7f6 fba3 	bl	8006f88 <HAL_GetTick>
 8010842:	4602      	mov	r2, r0
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	1ad3      	subs	r3, r2, r3
 8010848:	2b02      	cmp	r3, #2
 801084a:	d901      	bls.n	8010850 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801084c:	2303      	movs	r3, #3
 801084e:	e006      	b.n	801085e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010850:	4b05      	ldr	r3, [pc, #20]	; (8010868 <RCCEx_PLL3_Config+0x15c>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010858:	2b00      	cmp	r3, #0
 801085a:	d0f0      	beq.n	801083e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801085c:	7bfb      	ldrb	r3, [r7, #15]
}
 801085e:	4618      	mov	r0, r3
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	58024400 	.word	0x58024400
 801086c:	ffff0007 	.word	0xffff0007

08010870 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d101      	bne.n	8010882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801087e:	2301      	movs	r3, #1
 8010880:	e0f1      	b.n	8010a66 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2200      	movs	r2, #0
 8010886:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	4a78      	ldr	r2, [pc, #480]	; (8010a70 <HAL_SPI_Init+0x200>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d00f      	beq.n	80108b2 <HAL_SPI_Init+0x42>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4a77      	ldr	r2, [pc, #476]	; (8010a74 <HAL_SPI_Init+0x204>)
 8010898:	4293      	cmp	r3, r2
 801089a:	d00a      	beq.n	80108b2 <HAL_SPI_Init+0x42>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4a75      	ldr	r2, [pc, #468]	; (8010a78 <HAL_SPI_Init+0x208>)
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d005      	beq.n	80108b2 <HAL_SPI_Init+0x42>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	68db      	ldr	r3, [r3, #12]
 80108aa:	2b0f      	cmp	r3, #15
 80108ac:	d901      	bls.n	80108b2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80108ae:	2301      	movs	r3, #1
 80108b0:	e0d9      	b.n	8010a66 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f000 ff66 	bl	8011784 <SPI_GetPacketSize>
 80108b8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	4a6c      	ldr	r2, [pc, #432]	; (8010a70 <HAL_SPI_Init+0x200>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d00c      	beq.n	80108de <HAL_SPI_Init+0x6e>
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	4a6a      	ldr	r2, [pc, #424]	; (8010a74 <HAL_SPI_Init+0x204>)
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d007      	beq.n	80108de <HAL_SPI_Init+0x6e>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	4a69      	ldr	r2, [pc, #420]	; (8010a78 <HAL_SPI_Init+0x208>)
 80108d4:	4293      	cmp	r3, r2
 80108d6:	d002      	beq.n	80108de <HAL_SPI_Init+0x6e>
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	2b08      	cmp	r3, #8
 80108dc:	d811      	bhi.n	8010902 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80108e2:	4a63      	ldr	r2, [pc, #396]	; (8010a70 <HAL_SPI_Init+0x200>)
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d009      	beq.n	80108fc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4a61      	ldr	r2, [pc, #388]	; (8010a74 <HAL_SPI_Init+0x204>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d004      	beq.n	80108fc <HAL_SPI_Init+0x8c>
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	4a60      	ldr	r2, [pc, #384]	; (8010a78 <HAL_SPI_Init+0x208>)
 80108f8:	4293      	cmp	r3, r2
 80108fa:	d104      	bne.n	8010906 <HAL_SPI_Init+0x96>
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2b10      	cmp	r3, #16
 8010900:	d901      	bls.n	8010906 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8010902:	2301      	movs	r3, #1
 8010904:	e0af      	b.n	8010a66 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801090c:	b2db      	uxtb	r3, r3
 801090e:	2b00      	cmp	r3, #0
 8010910:	d106      	bne.n	8010920 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2200      	movs	r2, #0
 8010916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f7f4 fd6c 	bl	80053f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2202      	movs	r2, #2
 8010924:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	681a      	ldr	r2, [r3, #0]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f022 0201 	bic.w	r2, r2, #1
 8010936:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	689b      	ldr	r3, [r3, #8]
 801093e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8010942:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	699b      	ldr	r3, [r3, #24]
 8010948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801094c:	d119      	bne.n	8010982 <HAL_SPI_Init+0x112>
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010956:	d103      	bne.n	8010960 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801095c:	2b00      	cmp	r3, #0
 801095e:	d008      	beq.n	8010972 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010964:	2b00      	cmp	r3, #0
 8010966:	d10c      	bne.n	8010982 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801096c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010970:	d107      	bne.n	8010982 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010980:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	69da      	ldr	r2, [r3, #28]
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801098a:	431a      	orrs	r2, r3
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	431a      	orrs	r2, r3
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010994:	ea42 0103 	orr.w	r1, r2, r3
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	68da      	ldr	r2, [r3, #12]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	430a      	orrs	r2, r1
 80109a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ac:	431a      	orrs	r2, r3
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109b2:	431a      	orrs	r2, r3
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	699b      	ldr	r3, [r3, #24]
 80109b8:	431a      	orrs	r2, r3
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	691b      	ldr	r3, [r3, #16]
 80109be:	431a      	orrs	r2, r3
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	695b      	ldr	r3, [r3, #20]
 80109c4:	431a      	orrs	r2, r3
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6a1b      	ldr	r3, [r3, #32]
 80109ca:	431a      	orrs	r2, r3
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	685b      	ldr	r3, [r3, #4]
 80109d0:	431a      	orrs	r2, r3
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109d6:	431a      	orrs	r2, r3
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	689b      	ldr	r3, [r3, #8]
 80109dc:	431a      	orrs	r2, r3
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109e2:	ea42 0103 	orr.w	r1, r2, r3
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	430a      	orrs	r2, r1
 80109f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	685b      	ldr	r3, [r3, #4]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d113      	bne.n	8010a22 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	689b      	ldr	r3, [r3, #8]
 8010a00:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a0c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	689b      	ldr	r3, [r3, #8]
 8010a14:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010a20:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f022 0201 	bic.w	r2, r2, #1
 8010a30:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d00a      	beq.n	8010a54 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	430a      	orrs	r2, r1
 8010a52:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2200      	movs	r2, #0
 8010a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2201      	movs	r2, #1
 8010a60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8010a64:	2300      	movs	r3, #0
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	40013000 	.word	0x40013000
 8010a74:	40003800 	.word	0x40003800
 8010a78:	40003c00 	.word	0x40003c00

08010a7c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b08a      	sub	sp, #40	; 0x28
 8010a80:	af02      	add	r7, sp, #8
 8010a82:	60f8      	str	r0, [r7, #12]
 8010a84:	60b9      	str	r1, [r7, #8]
 8010a86:	603b      	str	r3, [r7, #0]
 8010a88:	4613      	mov	r3, r2
 8010a8a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	3320      	adds	r3, #32
 8010a92:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010a94:	2300      	movs	r3, #0
 8010a96:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	d101      	bne.n	8010aa6 <HAL_SPI_Transmit+0x2a>
 8010aa2:	2302      	movs	r3, #2
 8010aa4:	e1d7      	b.n	8010e56 <HAL_SPI_Transmit+0x3da>
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2201      	movs	r2, #1
 8010aaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010aae:	f7f6 fa6b 	bl	8006f88 <HAL_GetTick>
 8010ab2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010aba:	b2db      	uxtb	r3, r3
 8010abc:	2b01      	cmp	r3, #1
 8010abe:	d007      	beq.n	8010ad0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8010ac0:	2302      	movs	r3, #2
 8010ac2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010acc:	7efb      	ldrb	r3, [r7, #27]
 8010ace:	e1c2      	b.n	8010e56 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d002      	beq.n	8010adc <HAL_SPI_Transmit+0x60>
 8010ad6:	88fb      	ldrh	r3, [r7, #6]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d107      	bne.n	8010aec <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8010adc:	2301      	movs	r3, #1
 8010ade:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010ae8:	7efb      	ldrb	r3, [r7, #27]
 8010aea:	e1b4      	b.n	8010e56 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2203      	movs	r2, #3
 8010af0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2200      	movs	r2, #0
 8010af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	68ba      	ldr	r2, [r7, #8]
 8010b00:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	88fa      	ldrh	r2, [r7, #6]
 8010b06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	88fa      	ldrh	r2, [r7, #6]
 8010b0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	2200      	movs	r2, #0
 8010b16:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2200      	movs	r2, #0
 8010b24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2200      	movs	r2, #0
 8010b32:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	689b      	ldr	r3, [r3, #8]
 8010b38:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010b3c:	d107      	bne.n	8010b4e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	681a      	ldr	r2, [r3, #0]
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010b4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	685a      	ldr	r2, [r3, #4]
 8010b54:	4b96      	ldr	r3, [pc, #600]	; (8010db0 <HAL_SPI_Transmit+0x334>)
 8010b56:	4013      	ands	r3, r2
 8010b58:	88f9      	ldrh	r1, [r7, #6]
 8010b5a:	68fa      	ldr	r2, [r7, #12]
 8010b5c:	6812      	ldr	r2, [r2, #0]
 8010b5e:	430b      	orrs	r3, r1
 8010b60:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f042 0201 	orr.w	r2, r2, #1
 8010b70:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010b7a:	d107      	bne.n	8010b8c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	68db      	ldr	r3, [r3, #12]
 8010b90:	2b0f      	cmp	r3, #15
 8010b92:	d947      	bls.n	8010c24 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010b94:	e03f      	b.n	8010c16 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	695b      	ldr	r3, [r3, #20]
 8010b9c:	f003 0302 	and.w	r3, r3, #2
 8010ba0:	2b02      	cmp	r3, #2
 8010ba2:	d114      	bne.n	8010bce <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	6812      	ldr	r2, [r2, #0]
 8010bae:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010bb4:	1d1a      	adds	r2, r3, #4
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	3b01      	subs	r3, #1
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010bcc:	e023      	b.n	8010c16 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010bce:	f7f6 f9db 	bl	8006f88 <HAL_GetTick>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	683a      	ldr	r2, [r7, #0]
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d803      	bhi.n	8010be6 <HAL_SPI_Transmit+0x16a>
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010be4:	d102      	bne.n	8010bec <HAL_SPI_Transmit+0x170>
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d114      	bne.n	8010c16 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010bec:	68f8      	ldr	r0, [r7, #12]
 8010bee:	f000 fcfb 	bl	80115e8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	2201      	movs	r2, #1
 8010c0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010c12:	2303      	movs	r3, #3
 8010c14:	e11f      	b.n	8010e56 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d1b9      	bne.n	8010b96 <HAL_SPI_Transmit+0x11a>
 8010c22:	e0f2      	b.n	8010e0a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	2b07      	cmp	r3, #7
 8010c2a:	f240 80e7 	bls.w	8010dfc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010c2e:	e05d      	b.n	8010cec <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	695b      	ldr	r3, [r3, #20]
 8010c36:	f003 0302 	and.w	r3, r3, #2
 8010c3a:	2b02      	cmp	r3, #2
 8010c3c:	d132      	bne.n	8010ca4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	2b01      	cmp	r3, #1
 8010c48:	d918      	bls.n	8010c7c <HAL_SPI_Transmit+0x200>
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d014      	beq.n	8010c7c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	6812      	ldr	r2, [r2, #0]
 8010c5c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c62:	1d1a      	adds	r2, r3, #4
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c6e:	b29b      	uxth	r3, r3
 8010c70:	3b02      	subs	r3, #2
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010c7a:	e037      	b.n	8010cec <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c80:	881a      	ldrh	r2, [r3, #0]
 8010c82:	69fb      	ldr	r3, [r7, #28]
 8010c84:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c8a:	1c9a      	adds	r2, r3, #2
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	3b01      	subs	r3, #1
 8010c9a:	b29a      	uxth	r2, r3
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010ca2:	e023      	b.n	8010cec <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010ca4:	f7f6 f970 	bl	8006f88 <HAL_GetTick>
 8010ca8:	4602      	mov	r2, r0
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	1ad3      	subs	r3, r2, r3
 8010cae:	683a      	ldr	r2, [r7, #0]
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	d803      	bhi.n	8010cbc <HAL_SPI_Transmit+0x240>
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cba:	d102      	bne.n	8010cc2 <HAL_SPI_Transmit+0x246>
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d114      	bne.n	8010cec <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010cc2:	68f8      	ldr	r0, [r7, #12]
 8010cc4:	f000 fc90 	bl	80115e8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010cd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010ce8:	2303      	movs	r3, #3
 8010cea:	e0b4      	b.n	8010e56 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d19b      	bne.n	8010c30 <HAL_SPI_Transmit+0x1b4>
 8010cf8:	e087      	b.n	8010e0a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	695b      	ldr	r3, [r3, #20]
 8010d00:	f003 0302 	and.w	r3, r3, #2
 8010d04:	2b02      	cmp	r3, #2
 8010d06:	d155      	bne.n	8010db4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	2b03      	cmp	r3, #3
 8010d12:	d918      	bls.n	8010d46 <HAL_SPI_Transmit+0x2ca>
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d18:	2b40      	cmp	r3, #64	; 0x40
 8010d1a:	d914      	bls.n	8010d46 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	6812      	ldr	r2, [r2, #0]
 8010d26:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d2c:	1d1a      	adds	r2, r3, #4
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	3b04      	subs	r3, #4
 8010d3c:	b29a      	uxth	r2, r3
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010d44:	e05a      	b.n	8010dfc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010d4c:	b29b      	uxth	r3, r3
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	d917      	bls.n	8010d82 <HAL_SPI_Transmit+0x306>
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d013      	beq.n	8010d82 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d5e:	881a      	ldrh	r2, [r3, #0]
 8010d60:	69fb      	ldr	r3, [r7, #28]
 8010d62:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d68:	1c9a      	adds	r2, r3, #2
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010d74:	b29b      	uxth	r3, r3
 8010d76:	3b02      	subs	r3, #2
 8010d78:	b29a      	uxth	r2, r3
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010d80:	e03c      	b.n	8010dfc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	3320      	adds	r3, #32
 8010d8c:	7812      	ldrb	r2, [r2, #0]
 8010d8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d94:	1c5a      	adds	r2, r3, #1
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010da0:	b29b      	uxth	r3, r3
 8010da2:	3b01      	subs	r3, #1
 8010da4:	b29a      	uxth	r2, r3
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010dac:	e026      	b.n	8010dfc <HAL_SPI_Transmit+0x380>
 8010dae:	bf00      	nop
 8010db0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010db4:	f7f6 f8e8 	bl	8006f88 <HAL_GetTick>
 8010db8:	4602      	mov	r2, r0
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	1ad3      	subs	r3, r2, r3
 8010dbe:	683a      	ldr	r2, [r7, #0]
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d803      	bhi.n	8010dcc <HAL_SPI_Transmit+0x350>
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dca:	d102      	bne.n	8010dd2 <HAL_SPI_Transmit+0x356>
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d114      	bne.n	8010dfc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010dd2:	68f8      	ldr	r0, [r7, #12]
 8010dd4:	f000 fc08 	bl	80115e8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010de6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2201      	movs	r2, #1
 8010df4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010df8:	2303      	movs	r3, #3
 8010dfa:	e02c      	b.n	8010e56 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010e02:	b29b      	uxth	r3, r3
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	f47f af78 	bne.w	8010cfa <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	9300      	str	r3, [sp, #0]
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	2200      	movs	r2, #0
 8010e12:	2108      	movs	r1, #8
 8010e14:	68f8      	ldr	r0, [r7, #12]
 8010e16:	f000 fc87 	bl	8011728 <SPI_WaitOnFlagUntilTimeout>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d007      	beq.n	8010e30 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e26:	f043 0220 	orr.w	r2, r3, #32
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010e30:	68f8      	ldr	r0, [r7, #12]
 8010e32:	f000 fbd9 	bl	80115e8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2201      	movs	r2, #1
 8010e42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d001      	beq.n	8010e54 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8010e50:	2301      	movs	r3, #1
 8010e52:	e000      	b.n	8010e56 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8010e54:	7efb      	ldrb	r3, [r7, #27]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3720      	adds	r7, #32
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop

08010e60 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b08a      	sub	sp, #40	; 0x28
 8010e64:	af02      	add	r7, sp, #8
 8010e66:	60f8      	str	r0, [r7, #12]
 8010e68:	60b9      	str	r1, [r7, #8]
 8010e6a:	603b      	str	r3, [r7, #0]
 8010e6c:	4613      	mov	r3, r2
 8010e6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010e70:	2300      	movs	r3, #0
 8010e72:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	3330      	adds	r3, #48	; 0x30
 8010e7a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010e84:	d112      	bne.n	8010eac <HAL_SPI_Receive+0x4c>
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	689b      	ldr	r3, [r3, #8]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d10e      	bne.n	8010eac <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	2204      	movs	r2, #4
 8010e92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010e96:	88fa      	ldrh	r2, [r7, #6]
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	9300      	str	r3, [sp, #0]
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	68ba      	ldr	r2, [r7, #8]
 8010ea0:	68b9      	ldr	r1, [r7, #8]
 8010ea2:	68f8      	ldr	r0, [r7, #12]
 8010ea4:	f000 f978 	bl	8011198 <HAL_SPI_TransmitReceive>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	e16f      	b.n	801118c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010eb2:	2b01      	cmp	r3, #1
 8010eb4:	d101      	bne.n	8010eba <HAL_SPI_Receive+0x5a>
 8010eb6:	2302      	movs	r3, #2
 8010eb8:	e168      	b.n	801118c <HAL_SPI_Receive+0x32c>
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010ec2:	f7f6 f861 	bl	8006f88 <HAL_GetTick>
 8010ec6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010ece:	b2db      	uxtb	r3, r3
 8010ed0:	2b01      	cmp	r3, #1
 8010ed2:	d007      	beq.n	8010ee4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8010ed4:	2302      	movs	r3, #2
 8010ed6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	2200      	movs	r2, #0
 8010edc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010ee0:	7ffb      	ldrb	r3, [r7, #31]
 8010ee2:	e153      	b.n	801118c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d002      	beq.n	8010ef0 <HAL_SPI_Receive+0x90>
 8010eea:	88fb      	ldrh	r3, [r7, #6]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d107      	bne.n	8010f00 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010efc:	7ffb      	ldrb	r3, [r7, #31]
 8010efe:	e145      	b.n	801118c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	2204      	movs	r2, #4
 8010f04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	68ba      	ldr	r2, [r7, #8]
 8010f14:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	88fa      	ldrh	r2, [r7, #6]
 8010f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	88fa      	ldrh	r2, [r7, #6]
 8010f22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2200      	movs	r2, #0
 8010f2a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	2200      	movs	r2, #0
 8010f38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	2200      	movs	r2, #0
 8010f46:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	689b      	ldr	r3, [r3, #8]
 8010f4c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010f50:	d107      	bne.n	8010f62 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	681a      	ldr	r2, [r3, #0]
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010f60:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	685a      	ldr	r2, [r3, #4]
 8010f68:	4b8a      	ldr	r3, [pc, #552]	; (8011194 <HAL_SPI_Receive+0x334>)
 8010f6a:	4013      	ands	r3, r2
 8010f6c:	88f9      	ldrh	r1, [r7, #6]
 8010f6e:	68fa      	ldr	r2, [r7, #12]
 8010f70:	6812      	ldr	r2, [r2, #0]
 8010f72:	430b      	orrs	r3, r1
 8010f74:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	681a      	ldr	r2, [r3, #0]
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	f042 0201 	orr.w	r2, r2, #1
 8010f84:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010f8e:	d107      	bne.n	8010fa0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	681a      	ldr	r2, [r3, #0]
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010f9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	2b0f      	cmp	r3, #15
 8010fa6:	d948      	bls.n	801103a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010fa8:	e040      	b.n	801102c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	695a      	ldr	r2, [r3, #20]
 8010fb0:	f248 0308 	movw	r3, #32776	; 0x8008
 8010fb4:	4013      	ands	r3, r2
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d014      	beq.n	8010fe4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	681a      	ldr	r2, [r3, #0]
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010fc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010fc4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010fca:	1d1a      	adds	r2, r3, #4
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	3b01      	subs	r3, #1
 8010fda:	b29a      	uxth	r2, r3
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010fe2:	e023      	b.n	801102c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010fe4:	f7f5 ffd0 	bl	8006f88 <HAL_GetTick>
 8010fe8:	4602      	mov	r2, r0
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	1ad3      	subs	r3, r2, r3
 8010fee:	683a      	ldr	r2, [r7, #0]
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d803      	bhi.n	8010ffc <HAL_SPI_Receive+0x19c>
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ffa:	d102      	bne.n	8011002 <HAL_SPI_Receive+0x1a2>
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d114      	bne.n	801102c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011002:	68f8      	ldr	r0, [r7, #12]
 8011004:	f000 faf0 	bl	80115e8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	2200      	movs	r2, #0
 801100c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011016:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	2201      	movs	r2, #1
 8011024:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011028:	2303      	movs	r3, #3
 801102a:	e0af      	b.n	801118c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011032:	b29b      	uxth	r3, r3
 8011034:	2b00      	cmp	r3, #0
 8011036:	d1b8      	bne.n	8010faa <HAL_SPI_Receive+0x14a>
 8011038:	e095      	b.n	8011166 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	2b07      	cmp	r3, #7
 8011040:	f240 808b 	bls.w	801115a <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8011044:	e03f      	b.n	80110c6 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	695b      	ldr	r3, [r3, #20]
 801104c:	f003 0301 	and.w	r3, r3, #1
 8011050:	2b01      	cmp	r3, #1
 8011052:	d114      	bne.n	801107e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011058:	69ba      	ldr	r2, [r7, #24]
 801105a:	8812      	ldrh	r2, [r2, #0]
 801105c:	b292      	uxth	r2, r2
 801105e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011064:	1c9a      	adds	r2, r3, #2
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011070:	b29b      	uxth	r3, r3
 8011072:	3b01      	subs	r3, #1
 8011074:	b29a      	uxth	r2, r3
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801107c:	e023      	b.n	80110c6 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801107e:	f7f5 ff83 	bl	8006f88 <HAL_GetTick>
 8011082:	4602      	mov	r2, r0
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	1ad3      	subs	r3, r2, r3
 8011088:	683a      	ldr	r2, [r7, #0]
 801108a:	429a      	cmp	r2, r3
 801108c:	d803      	bhi.n	8011096 <HAL_SPI_Receive+0x236>
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011094:	d102      	bne.n	801109c <HAL_SPI_Receive+0x23c>
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d114      	bne.n	80110c6 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801109c:	68f8      	ldr	r0, [r7, #12]
 801109e:	f000 faa3 	bl	80115e8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2200      	movs	r2, #0
 80110a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	2201      	movs	r2, #1
 80110be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80110c2:	2303      	movs	r3, #3
 80110c4:	e062      	b.n	801118c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80110cc:	b29b      	uxth	r3, r3
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d1b9      	bne.n	8011046 <HAL_SPI_Receive+0x1e6>
 80110d2:	e048      	b.n	8011166 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	695b      	ldr	r3, [r3, #20]
 80110da:	f003 0301 	and.w	r3, r3, #1
 80110de:	2b01      	cmp	r3, #1
 80110e0:	d117      	bne.n	8011112 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80110ee:	7812      	ldrb	r2, [r2, #0]
 80110f0:	b2d2      	uxtb	r2, r2
 80110f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80110f8:	1c5a      	adds	r2, r3, #1
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011104:	b29b      	uxth	r3, r3
 8011106:	3b01      	subs	r3, #1
 8011108:	b29a      	uxth	r2, r3
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011110:	e023      	b.n	801115a <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011112:	f7f5 ff39 	bl	8006f88 <HAL_GetTick>
 8011116:	4602      	mov	r2, r0
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	1ad3      	subs	r3, r2, r3
 801111c:	683a      	ldr	r2, [r7, #0]
 801111e:	429a      	cmp	r2, r3
 8011120:	d803      	bhi.n	801112a <HAL_SPI_Receive+0x2ca>
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011128:	d102      	bne.n	8011130 <HAL_SPI_Receive+0x2d0>
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d114      	bne.n	801115a <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011130:	68f8      	ldr	r0, [r7, #12]
 8011132:	f000 fa59 	bl	80115e8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2200      	movs	r2, #0
 801113a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011144:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2201      	movs	r2, #1
 8011152:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011156:	2303      	movs	r3, #3
 8011158:	e018      	b.n	801118c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011160:	b29b      	uxth	r3, r3
 8011162:	2b00      	cmp	r3, #0
 8011164:	d1b6      	bne.n	80110d4 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011166:	68f8      	ldr	r0, [r7, #12]
 8011168:	f000 fa3e 	bl	80115e8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	2200      	movs	r2, #0
 8011170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2201      	movs	r2, #1
 8011178:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011182:	2b00      	cmp	r3, #0
 8011184:	d001      	beq.n	801118a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8011186:	2301      	movs	r3, #1
 8011188:	e000      	b.n	801118c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 801118a:	7ffb      	ldrb	r3, [r7, #31]
}
 801118c:	4618      	mov	r0, r3
 801118e:	3720      	adds	r7, #32
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}
 8011194:	ffff0000 	.word	0xffff0000

08011198 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b08e      	sub	sp, #56	; 0x38
 801119c:	af02      	add	r7, sp, #8
 801119e:	60f8      	str	r0, [r7, #12]
 80111a0:	60b9      	str	r1, [r7, #8]
 80111a2:	607a      	str	r2, [r7, #4]
 80111a4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80111a6:	2300      	movs	r3, #0
 80111a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	3320      	adds	r3, #32
 80111b2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	3330      	adds	r3, #48	; 0x30
 80111ba:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80111c2:	2b01      	cmp	r3, #1
 80111c4:	d101      	bne.n	80111ca <HAL_SPI_TransmitReceive+0x32>
 80111c6:	2302      	movs	r3, #2
 80111c8:	e209      	b.n	80115de <HAL_SPI_TransmitReceive+0x446>
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	2201      	movs	r2, #1
 80111ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80111d2:	f7f5 fed9 	bl	8006f88 <HAL_GetTick>
 80111d6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80111d8:	887b      	ldrh	r3, [r7, #2]
 80111da:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80111dc:	887b      	ldrh	r3, [r7, #2]
 80111de:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80111e6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	685b      	ldr	r3, [r3, #4]
 80111ec:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80111ee:	7efb      	ldrb	r3, [r7, #27]
 80111f0:	2b01      	cmp	r3, #1
 80111f2:	d014      	beq.n	801121e <HAL_SPI_TransmitReceive+0x86>
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80111fa:	d106      	bne.n	801120a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8011200:	2b00      	cmp	r3, #0
 8011202:	d102      	bne.n	801120a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8011204:	7efb      	ldrb	r3, [r7, #27]
 8011206:	2b04      	cmp	r3, #4
 8011208:	d009      	beq.n	801121e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 801120a:	2302      	movs	r3, #2
 801120c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	2200      	movs	r2, #0
 8011214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011218:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801121c:	e1df      	b.n	80115de <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d005      	beq.n	8011230 <HAL_SPI_TransmitReceive+0x98>
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d002      	beq.n	8011230 <HAL_SPI_TransmitReceive+0x98>
 801122a:	887b      	ldrh	r3, [r7, #2]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d109      	bne.n	8011244 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8011230:	2301      	movs	r3, #1
 8011232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	2200      	movs	r2, #0
 801123a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801123e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011242:	e1cc      	b.n	80115de <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801124a:	b2db      	uxtb	r3, r3
 801124c:	2b04      	cmp	r3, #4
 801124e:	d003      	beq.n	8011258 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2205      	movs	r2, #5
 8011254:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2200      	movs	r2, #0
 801125c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	687a      	ldr	r2, [r7, #4]
 8011264:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	887a      	ldrh	r2, [r7, #2]
 801126a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	887a      	ldrh	r2, [r7, #2]
 8011272:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	68ba      	ldr	r2, [r7, #8]
 801127a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	887a      	ldrh	r2, [r7, #2]
 8011280:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	887a      	ldrh	r2, [r7, #2]
 8011288:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	2200      	movs	r2, #0
 8011290:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2200      	movs	r2, #0
 8011296:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	685a      	ldr	r2, [r3, #4]
 801129e:	4b82      	ldr	r3, [pc, #520]	; (80114a8 <HAL_SPI_TransmitReceive+0x310>)
 80112a0:	4013      	ands	r3, r2
 80112a2:	8879      	ldrh	r1, [r7, #2]
 80112a4:	68fa      	ldr	r2, [r7, #12]
 80112a6:	6812      	ldr	r2, [r2, #0]
 80112a8:	430b      	orrs	r3, r1
 80112aa:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	681a      	ldr	r2, [r3, #0]
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	f042 0201 	orr.w	r2, r2, #1
 80112ba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	685b      	ldr	r3, [r3, #4]
 80112c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80112c4:	d107      	bne.n	80112d6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80112d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	68db      	ldr	r3, [r3, #12]
 80112da:	2b0f      	cmp	r3, #15
 80112dc:	d970      	bls.n	80113c0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80112de:	e068      	b.n	80113b2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	695b      	ldr	r3, [r3, #20]
 80112e6:	f003 0302 	and.w	r3, r3, #2
 80112ea:	2b02      	cmp	r3, #2
 80112ec:	d11a      	bne.n	8011324 <HAL_SPI_TransmitReceive+0x18c>
 80112ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d017      	beq.n	8011324 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	6812      	ldr	r2, [r2, #0]
 80112fe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011304:	1d1a      	adds	r2, r3, #4
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011310:	b29b      	uxth	r3, r3
 8011312:	3b01      	subs	r3, #1
 8011314:	b29a      	uxth	r2, r3
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011322:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	695a      	ldr	r2, [r3, #20]
 801132a:	f248 0308 	movw	r3, #32776	; 0x8008
 801132e:	4013      	ands	r3, r2
 8011330:	2b00      	cmp	r3, #0
 8011332:	d01a      	beq.n	801136a <HAL_SPI_TransmitReceive+0x1d2>
 8011334:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011336:	2b00      	cmp	r3, #0
 8011338:	d017      	beq.n	801136a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	681a      	ldr	r2, [r3, #0]
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011342:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011344:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801134a:	1d1a      	adds	r2, r3, #4
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011356:	b29b      	uxth	r3, r3
 8011358:	3b01      	subs	r3, #1
 801135a:	b29a      	uxth	r2, r3
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011368:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801136a:	f7f5 fe0d 	bl	8006f88 <HAL_GetTick>
 801136e:	4602      	mov	r2, r0
 8011370:	69fb      	ldr	r3, [r7, #28]
 8011372:	1ad3      	subs	r3, r2, r3
 8011374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011376:	429a      	cmp	r2, r3
 8011378:	d803      	bhi.n	8011382 <HAL_SPI_TransmitReceive+0x1ea>
 801137a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011380:	d102      	bne.n	8011388 <HAL_SPI_TransmitReceive+0x1f0>
 8011382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011384:	2b00      	cmp	r3, #0
 8011386:	d114      	bne.n	80113b2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8011388:	68f8      	ldr	r0, [r7, #12]
 801138a:	f000 f92d 	bl	80115e8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2200      	movs	r2, #0
 8011392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801139c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2201      	movs	r2, #1
 80113aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80113ae:	2303      	movs	r3, #3
 80113b0:	e115      	b.n	80115de <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80113b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d193      	bne.n	80112e0 <HAL_SPI_TransmitReceive+0x148>
 80113b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d190      	bne.n	80112e0 <HAL_SPI_TransmitReceive+0x148>
 80113be:	e0e7      	b.n	8011590 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	2b07      	cmp	r3, #7
 80113c6:	f240 80dd 	bls.w	8011584 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80113ca:	e066      	b.n	801149a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	695b      	ldr	r3, [r3, #20]
 80113d2:	f003 0302 	and.w	r3, r3, #2
 80113d6:	2b02      	cmp	r3, #2
 80113d8:	d119      	bne.n	801140e <HAL_SPI_TransmitReceive+0x276>
 80113da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d016      	beq.n	801140e <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113e4:	881a      	ldrh	r2, [r3, #0]
 80113e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113ee:	1c9a      	adds	r2, r3, #2
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	3b01      	subs	r3, #1
 80113fe:	b29a      	uxth	r2, r3
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801140c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	695b      	ldr	r3, [r3, #20]
 8011414:	f003 0301 	and.w	r3, r3, #1
 8011418:	2b01      	cmp	r3, #1
 801141a:	d11a      	bne.n	8011452 <HAL_SPI_TransmitReceive+0x2ba>
 801141c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801141e:	2b00      	cmp	r3, #0
 8011420:	d017      	beq.n	8011452 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011426:	6a3a      	ldr	r2, [r7, #32]
 8011428:	8812      	ldrh	r2, [r2, #0]
 801142a:	b292      	uxth	r2, r2
 801142c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011432:	1c9a      	adds	r2, r3, #2
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801143e:	b29b      	uxth	r3, r3
 8011440:	3b01      	subs	r3, #1
 8011442:	b29a      	uxth	r2, r3
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011450:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011452:	f7f5 fd99 	bl	8006f88 <HAL_GetTick>
 8011456:	4602      	mov	r2, r0
 8011458:	69fb      	ldr	r3, [r7, #28]
 801145a:	1ad3      	subs	r3, r2, r3
 801145c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801145e:	429a      	cmp	r2, r3
 8011460:	d803      	bhi.n	801146a <HAL_SPI_TransmitReceive+0x2d2>
 8011462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011468:	d102      	bne.n	8011470 <HAL_SPI_TransmitReceive+0x2d8>
 801146a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801146c:	2b00      	cmp	r3, #0
 801146e:	d114      	bne.n	801149a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8011470:	68f8      	ldr	r0, [r7, #12]
 8011472:	f000 f8b9 	bl	80115e8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	2200      	movs	r2, #0
 801147a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011484:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	2201      	movs	r2, #1
 8011492:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8011496:	2303      	movs	r3, #3
 8011498:	e0a1      	b.n	80115de <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801149a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801149c:	2b00      	cmp	r3, #0
 801149e:	d195      	bne.n	80113cc <HAL_SPI_TransmitReceive+0x234>
 80114a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d192      	bne.n	80113cc <HAL_SPI_TransmitReceive+0x234>
 80114a6:	e073      	b.n	8011590 <HAL_SPI_TransmitReceive+0x3f8>
 80114a8:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	695b      	ldr	r3, [r3, #20]
 80114b2:	f003 0302 	and.w	r3, r3, #2
 80114b6:	2b02      	cmp	r3, #2
 80114b8:	d11b      	bne.n	80114f2 <HAL_SPI_TransmitReceive+0x35a>
 80114ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d018      	beq.n	80114f2 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	3320      	adds	r3, #32
 80114ca:	7812      	ldrb	r2, [r2, #0]
 80114cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80114d2:	1c5a      	adds	r2, r3, #1
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80114de:	b29b      	uxth	r3, r3
 80114e0:	3b01      	subs	r3, #1
 80114e2:	b29a      	uxth	r2, r3
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80114f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	695b      	ldr	r3, [r3, #20]
 80114f8:	f003 0301 	and.w	r3, r3, #1
 80114fc:	2b01      	cmp	r3, #1
 80114fe:	d11d      	bne.n	801153c <HAL_SPI_TransmitReceive+0x3a4>
 8011500:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011502:	2b00      	cmp	r3, #0
 8011504:	d01a      	beq.n	801153c <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011512:	7812      	ldrb	r2, [r2, #0]
 8011514:	b2d2      	uxtb	r2, r2
 8011516:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801151c:	1c5a      	adds	r2, r3, #1
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011528:	b29b      	uxth	r3, r3
 801152a:	3b01      	subs	r3, #1
 801152c:	b29a      	uxth	r2, r3
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801153a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801153c:	f7f5 fd24 	bl	8006f88 <HAL_GetTick>
 8011540:	4602      	mov	r2, r0
 8011542:	69fb      	ldr	r3, [r7, #28]
 8011544:	1ad3      	subs	r3, r2, r3
 8011546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011548:	429a      	cmp	r2, r3
 801154a:	d803      	bhi.n	8011554 <HAL_SPI_TransmitReceive+0x3bc>
 801154c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801154e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011552:	d102      	bne.n	801155a <HAL_SPI_TransmitReceive+0x3c2>
 8011554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011556:	2b00      	cmp	r3, #0
 8011558:	d114      	bne.n	8011584 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 801155a:	68f8      	ldr	r0, [r7, #12]
 801155c:	f000 f844 	bl	80115e8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	2200      	movs	r2, #0
 8011564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801156e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	2201      	movs	r2, #1
 801157c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8011580:	2303      	movs	r3, #3
 8011582:	e02c      	b.n	80115de <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011584:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011586:	2b00      	cmp	r3, #0
 8011588:	d190      	bne.n	80114ac <HAL_SPI_TransmitReceive+0x314>
 801158a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801158c:	2b00      	cmp	r3, #0
 801158e:	d18d      	bne.n	80114ac <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8011590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011592:	9300      	str	r3, [sp, #0]
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	2200      	movs	r2, #0
 8011598:	2108      	movs	r1, #8
 801159a:	68f8      	ldr	r0, [r7, #12]
 801159c:	f000 f8c4 	bl	8011728 <SPI_WaitOnFlagUntilTimeout>
 80115a0:	4603      	mov	r3, r0
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d007      	beq.n	80115b6 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80115ac:	f043 0220 	orr.w	r2, r3, #32
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80115b6:	68f8      	ldr	r0, [r7, #12]
 80115b8:	f000 f816 	bl	80115e8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2200      	movs	r2, #0
 80115c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	2201      	movs	r2, #1
 80115c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d001      	beq.n	80115da <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80115d6:	2301      	movs	r3, #1
 80115d8:	e001      	b.n	80115de <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80115da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3730      	adds	r7, #48	; 0x30
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}
 80115e6:	bf00      	nop

080115e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80115e8:	b480      	push	{r7}
 80115ea:	b085      	sub	sp, #20
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	695b      	ldr	r3, [r3, #20]
 80115f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	699a      	ldr	r2, [r3, #24]
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f042 0208 	orr.w	r2, r2, #8
 8011606:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	699a      	ldr	r2, [r3, #24]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	f042 0210 	orr.w	r2, r2, #16
 8011616:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	681a      	ldr	r2, [r3, #0]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	f022 0201 	bic.w	r2, r2, #1
 8011626:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	6919      	ldr	r1, [r3, #16]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	4b3c      	ldr	r3, [pc, #240]	; (8011724 <SPI_CloseTransfer+0x13c>)
 8011634:	400b      	ands	r3, r1
 8011636:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	689a      	ldr	r2, [r3, #8]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011646:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801164e:	b2db      	uxtb	r3, r3
 8011650:	2b04      	cmp	r3, #4
 8011652:	d014      	beq.n	801167e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	f003 0320 	and.w	r3, r3, #32
 801165a:	2b00      	cmp	r3, #0
 801165c:	d00f      	beq.n	801167e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011664:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	699a      	ldr	r2, [r3, #24]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	f042 0220 	orr.w	r2, r2, #32
 801167c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011684:	b2db      	uxtb	r3, r3
 8011686:	2b03      	cmp	r3, #3
 8011688:	d014      	beq.n	80116b4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011690:	2b00      	cmp	r3, #0
 8011692:	d00f      	beq.n	80116b4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801169a:	f043 0204 	orr.w	r2, r3, #4
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	699a      	ldr	r2, [r3, #24]
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80116b2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d00f      	beq.n	80116de <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116c4:	f043 0201 	orr.w	r2, r3, #1
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	699a      	ldr	r2, [r3, #24]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80116dc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d00f      	beq.n	8011708 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116ee:	f043 0208 	orr.w	r2, r3, #8
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	699a      	ldr	r2, [r3, #24]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011706:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2200      	movs	r2, #0
 801170c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2200      	movs	r2, #0
 8011714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8011718:	bf00      	nop
 801171a:	3714      	adds	r7, #20
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr
 8011724:	fffffc90 	.word	0xfffffc90

08011728 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b084      	sub	sp, #16
 801172c:	af00      	add	r7, sp, #0
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	60b9      	str	r1, [r7, #8]
 8011732:	603b      	str	r3, [r7, #0]
 8011734:	4613      	mov	r3, r2
 8011736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011738:	e010      	b.n	801175c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801173a:	f7f5 fc25 	bl	8006f88 <HAL_GetTick>
 801173e:	4602      	mov	r2, r0
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	1ad3      	subs	r3, r2, r3
 8011744:	69ba      	ldr	r2, [r7, #24]
 8011746:	429a      	cmp	r2, r3
 8011748:	d803      	bhi.n	8011752 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801174a:	69bb      	ldr	r3, [r7, #24]
 801174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011750:	d102      	bne.n	8011758 <SPI_WaitOnFlagUntilTimeout+0x30>
 8011752:	69bb      	ldr	r3, [r7, #24]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d101      	bne.n	801175c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011758:	2303      	movs	r3, #3
 801175a:	e00f      	b.n	801177c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	695a      	ldr	r2, [r3, #20]
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	4013      	ands	r3, r2
 8011766:	68ba      	ldr	r2, [r7, #8]
 8011768:	429a      	cmp	r2, r3
 801176a:	bf0c      	ite	eq
 801176c:	2301      	moveq	r3, #1
 801176e:	2300      	movne	r3, #0
 8011770:	b2db      	uxtb	r3, r3
 8011772:	461a      	mov	r2, r3
 8011774:	79fb      	ldrb	r3, [r7, #7]
 8011776:	429a      	cmp	r2, r3
 8011778:	d0df      	beq.n	801173a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801177a:	2300      	movs	r3, #0
}
 801177c:	4618      	mov	r0, r3
 801177e:	3710      	adds	r7, #16
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}

08011784 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8011784:	b480      	push	{r7}
 8011786:	b085      	sub	sp, #20
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011790:	095b      	lsrs	r3, r3, #5
 8011792:	3301      	adds	r3, #1
 8011794:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	68db      	ldr	r3, [r3, #12]
 801179a:	3301      	adds	r3, #1
 801179c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	3307      	adds	r3, #7
 80117a2:	08db      	lsrs	r3, r3, #3
 80117a4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	68fa      	ldr	r2, [r7, #12]
 80117aa:	fb02 f303 	mul.w	r3, r2, r3
}
 80117ae:	4618      	mov	r0, r3
 80117b0:	3714      	adds	r7, #20
 80117b2:	46bd      	mov	sp, r7
 80117b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b8:	4770      	bx	lr

080117ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80117ba:	b580      	push	{r7, lr}
 80117bc:	b082      	sub	sp, #8
 80117be:	af00      	add	r7, sp, #0
 80117c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d101      	bne.n	80117cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80117c8:	2301      	movs	r3, #1
 80117ca:	e049      	b.n	8011860 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80117d2:	b2db      	uxtb	r3, r3
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d106      	bne.n	80117e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2200      	movs	r2, #0
 80117dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f7f4 fed3 	bl	800658c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2202      	movs	r2, #2
 80117ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	3304      	adds	r3, #4
 80117f6:	4619      	mov	r1, r3
 80117f8:	4610      	mov	r0, r2
 80117fa:	f000 ffa5 	bl	8012748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2201      	movs	r2, #1
 8011802:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2201      	movs	r2, #1
 801180a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2201      	movs	r2, #1
 8011812:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2201      	movs	r2, #1
 801181a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	2201      	movs	r2, #1
 8011822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2201      	movs	r2, #1
 801182a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2201      	movs	r2, #1
 8011832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2201      	movs	r2, #1
 801183a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2201      	movs	r2, #1
 8011842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2201      	movs	r2, #1
 801184a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	2201      	movs	r2, #1
 8011852:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2201      	movs	r2, #1
 801185a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801185e:	2300      	movs	r3, #0
}
 8011860:	4618      	mov	r0, r3
 8011862:	3708      	adds	r7, #8
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}

08011868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011868:	b480      	push	{r7}
 801186a:	b085      	sub	sp, #20
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011876:	b2db      	uxtb	r3, r3
 8011878:	2b01      	cmp	r3, #1
 801187a:	d001      	beq.n	8011880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801187c:	2301      	movs	r3, #1
 801187e:	e05e      	b.n	801193e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2202      	movs	r2, #2
 8011884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	68da      	ldr	r2, [r3, #12]
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	f042 0201 	orr.w	r2, r2, #1
 8011896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	4a2b      	ldr	r2, [pc, #172]	; (801194c <HAL_TIM_Base_Start_IT+0xe4>)
 801189e:	4293      	cmp	r3, r2
 80118a0:	d02c      	beq.n	80118fc <HAL_TIM_Base_Start_IT+0x94>
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80118aa:	d027      	beq.n	80118fc <HAL_TIM_Base_Start_IT+0x94>
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	4a27      	ldr	r2, [pc, #156]	; (8011950 <HAL_TIM_Base_Start_IT+0xe8>)
 80118b2:	4293      	cmp	r3, r2
 80118b4:	d022      	beq.n	80118fc <HAL_TIM_Base_Start_IT+0x94>
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4a26      	ldr	r2, [pc, #152]	; (8011954 <HAL_TIM_Base_Start_IT+0xec>)
 80118bc:	4293      	cmp	r3, r2
 80118be:	d01d      	beq.n	80118fc <HAL_TIM_Base_Start_IT+0x94>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	4a24      	ldr	r2, [pc, #144]	; (8011958 <HAL_TIM_Base_Start_IT+0xf0>)
 80118c6:	4293      	cmp	r3, r2
 80118c8:	d018      	beq.n	80118fc <HAL_TIM_Base_Start_IT+0x94>
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	4a23      	ldr	r2, [pc, #140]	; (801195c <HAL_TIM_Base_Start_IT+0xf4>)
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d013      	beq.n	80118fc <HAL_TIM_Base_Start_IT+0x94>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	4a21      	ldr	r2, [pc, #132]	; (8011960 <HAL_TIM_Base_Start_IT+0xf8>)
 80118da:	4293      	cmp	r3, r2
 80118dc:	d00e      	beq.n	80118fc <HAL_TIM_Base_Start_IT+0x94>
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	4a20      	ldr	r2, [pc, #128]	; (8011964 <HAL_TIM_Base_Start_IT+0xfc>)
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d009      	beq.n	80118fc <HAL_TIM_Base_Start_IT+0x94>
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	4a1e      	ldr	r2, [pc, #120]	; (8011968 <HAL_TIM_Base_Start_IT+0x100>)
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d004      	beq.n	80118fc <HAL_TIM_Base_Start_IT+0x94>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	4a1d      	ldr	r2, [pc, #116]	; (801196c <HAL_TIM_Base_Start_IT+0x104>)
 80118f8:	4293      	cmp	r3, r2
 80118fa:	d115      	bne.n	8011928 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	689a      	ldr	r2, [r3, #8]
 8011902:	4b1b      	ldr	r3, [pc, #108]	; (8011970 <HAL_TIM_Base_Start_IT+0x108>)
 8011904:	4013      	ands	r3, r2
 8011906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2b06      	cmp	r3, #6
 801190c:	d015      	beq.n	801193a <HAL_TIM_Base_Start_IT+0xd2>
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011914:	d011      	beq.n	801193a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	681a      	ldr	r2, [r3, #0]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	f042 0201 	orr.w	r2, r2, #1
 8011924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011926:	e008      	b.n	801193a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	681a      	ldr	r2, [r3, #0]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f042 0201 	orr.w	r2, r2, #1
 8011936:	601a      	str	r2, [r3, #0]
 8011938:	e000      	b.n	801193c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801193a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801193c:	2300      	movs	r3, #0
}
 801193e:	4618      	mov	r0, r3
 8011940:	3714      	adds	r7, #20
 8011942:	46bd      	mov	sp, r7
 8011944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011948:	4770      	bx	lr
 801194a:	bf00      	nop
 801194c:	40010000 	.word	0x40010000
 8011950:	40000400 	.word	0x40000400
 8011954:	40000800 	.word	0x40000800
 8011958:	40000c00 	.word	0x40000c00
 801195c:	40010400 	.word	0x40010400
 8011960:	40001800 	.word	0x40001800
 8011964:	40014000 	.word	0x40014000
 8011968:	4000e000 	.word	0x4000e000
 801196c:	4000e400 	.word	0x4000e400
 8011970:	00010007 	.word	0x00010007

08011974 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d101      	bne.n	8011986 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011982:	2301      	movs	r3, #1
 8011984:	e049      	b.n	8011a1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801198c:	b2db      	uxtb	r3, r3
 801198e:	2b00      	cmp	r3, #0
 8011990:	d106      	bne.n	80119a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2200      	movs	r2, #0
 8011996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f7f4 fc88 	bl	80062b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2202      	movs	r2, #2
 80119a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681a      	ldr	r2, [r3, #0]
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	3304      	adds	r3, #4
 80119b0:	4619      	mov	r1, r3
 80119b2:	4610      	mov	r0, r2
 80119b4:	f000 fec8 	bl	8012748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2201      	movs	r2, #1
 80119bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2201      	movs	r2, #1
 80119c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2201      	movs	r2, #1
 80119cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2201      	movs	r2, #1
 80119d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2201      	movs	r2, #1
 80119dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2201      	movs	r2, #1
 80119e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2201      	movs	r2, #1
 80119ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2201      	movs	r2, #1
 80119f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2201      	movs	r2, #1
 80119fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2201      	movs	r2, #1
 8011a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2201      	movs	r2, #1
 8011a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011a18:	2300      	movs	r3, #0
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3708      	adds	r7, #8
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}
	...

08011a24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b084      	sub	sp, #16
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
 8011a2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d109      	bne.n	8011a48 <HAL_TIM_PWM_Start+0x24>
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	2b01      	cmp	r3, #1
 8011a3e:	bf14      	ite	ne
 8011a40:	2301      	movne	r3, #1
 8011a42:	2300      	moveq	r3, #0
 8011a44:	b2db      	uxtb	r3, r3
 8011a46:	e03c      	b.n	8011ac2 <HAL_TIM_PWM_Start+0x9e>
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	2b04      	cmp	r3, #4
 8011a4c:	d109      	bne.n	8011a62 <HAL_TIM_PWM_Start+0x3e>
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011a54:	b2db      	uxtb	r3, r3
 8011a56:	2b01      	cmp	r3, #1
 8011a58:	bf14      	ite	ne
 8011a5a:	2301      	movne	r3, #1
 8011a5c:	2300      	moveq	r3, #0
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	e02f      	b.n	8011ac2 <HAL_TIM_PWM_Start+0x9e>
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	2b08      	cmp	r3, #8
 8011a66:	d109      	bne.n	8011a7c <HAL_TIM_PWM_Start+0x58>
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a6e:	b2db      	uxtb	r3, r3
 8011a70:	2b01      	cmp	r3, #1
 8011a72:	bf14      	ite	ne
 8011a74:	2301      	movne	r3, #1
 8011a76:	2300      	moveq	r3, #0
 8011a78:	b2db      	uxtb	r3, r3
 8011a7a:	e022      	b.n	8011ac2 <HAL_TIM_PWM_Start+0x9e>
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	2b0c      	cmp	r3, #12
 8011a80:	d109      	bne.n	8011a96 <HAL_TIM_PWM_Start+0x72>
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011a88:	b2db      	uxtb	r3, r3
 8011a8a:	2b01      	cmp	r3, #1
 8011a8c:	bf14      	ite	ne
 8011a8e:	2301      	movne	r3, #1
 8011a90:	2300      	moveq	r3, #0
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	e015      	b.n	8011ac2 <HAL_TIM_PWM_Start+0x9e>
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	2b10      	cmp	r3, #16
 8011a9a:	d109      	bne.n	8011ab0 <HAL_TIM_PWM_Start+0x8c>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011aa2:	b2db      	uxtb	r3, r3
 8011aa4:	2b01      	cmp	r3, #1
 8011aa6:	bf14      	ite	ne
 8011aa8:	2301      	movne	r3, #1
 8011aaa:	2300      	moveq	r3, #0
 8011aac:	b2db      	uxtb	r3, r3
 8011aae:	e008      	b.n	8011ac2 <HAL_TIM_PWM_Start+0x9e>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011ab6:	b2db      	uxtb	r3, r3
 8011ab8:	2b01      	cmp	r3, #1
 8011aba:	bf14      	ite	ne
 8011abc:	2301      	movne	r3, #1
 8011abe:	2300      	moveq	r3, #0
 8011ac0:	b2db      	uxtb	r3, r3
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d001      	beq.n	8011aca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	e0ab      	b.n	8011c22 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d104      	bne.n	8011ada <HAL_TIM_PWM_Start+0xb6>
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2202      	movs	r2, #2
 8011ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011ad8:	e023      	b.n	8011b22 <HAL_TIM_PWM_Start+0xfe>
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	2b04      	cmp	r3, #4
 8011ade:	d104      	bne.n	8011aea <HAL_TIM_PWM_Start+0xc6>
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2202      	movs	r2, #2
 8011ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011ae8:	e01b      	b.n	8011b22 <HAL_TIM_PWM_Start+0xfe>
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	2b08      	cmp	r3, #8
 8011aee:	d104      	bne.n	8011afa <HAL_TIM_PWM_Start+0xd6>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2202      	movs	r2, #2
 8011af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011af8:	e013      	b.n	8011b22 <HAL_TIM_PWM_Start+0xfe>
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	2b0c      	cmp	r3, #12
 8011afe:	d104      	bne.n	8011b0a <HAL_TIM_PWM_Start+0xe6>
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2202      	movs	r2, #2
 8011b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011b08:	e00b      	b.n	8011b22 <HAL_TIM_PWM_Start+0xfe>
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	2b10      	cmp	r3, #16
 8011b0e:	d104      	bne.n	8011b1a <HAL_TIM_PWM_Start+0xf6>
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2202      	movs	r2, #2
 8011b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011b18:	e003      	b.n	8011b22 <HAL_TIM_PWM_Start+0xfe>
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2202      	movs	r2, #2
 8011b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	2201      	movs	r2, #1
 8011b28:	6839      	ldr	r1, [r7, #0]
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f001 fa26 	bl	8012f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	4a3d      	ldr	r2, [pc, #244]	; (8011c2c <HAL_TIM_PWM_Start+0x208>)
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d013      	beq.n	8011b62 <HAL_TIM_PWM_Start+0x13e>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	4a3c      	ldr	r2, [pc, #240]	; (8011c30 <HAL_TIM_PWM_Start+0x20c>)
 8011b40:	4293      	cmp	r3, r2
 8011b42:	d00e      	beq.n	8011b62 <HAL_TIM_PWM_Start+0x13e>
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	4a3a      	ldr	r2, [pc, #232]	; (8011c34 <HAL_TIM_PWM_Start+0x210>)
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d009      	beq.n	8011b62 <HAL_TIM_PWM_Start+0x13e>
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	4a39      	ldr	r2, [pc, #228]	; (8011c38 <HAL_TIM_PWM_Start+0x214>)
 8011b54:	4293      	cmp	r3, r2
 8011b56:	d004      	beq.n	8011b62 <HAL_TIM_PWM_Start+0x13e>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	4a37      	ldr	r2, [pc, #220]	; (8011c3c <HAL_TIM_PWM_Start+0x218>)
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	d101      	bne.n	8011b66 <HAL_TIM_PWM_Start+0x142>
 8011b62:	2301      	movs	r3, #1
 8011b64:	e000      	b.n	8011b68 <HAL_TIM_PWM_Start+0x144>
 8011b66:	2300      	movs	r3, #0
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d007      	beq.n	8011b7c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011b7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	4a2a      	ldr	r2, [pc, #168]	; (8011c2c <HAL_TIM_PWM_Start+0x208>)
 8011b82:	4293      	cmp	r3, r2
 8011b84:	d02c      	beq.n	8011be0 <HAL_TIM_PWM_Start+0x1bc>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b8e:	d027      	beq.n	8011be0 <HAL_TIM_PWM_Start+0x1bc>
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4a2a      	ldr	r2, [pc, #168]	; (8011c40 <HAL_TIM_PWM_Start+0x21c>)
 8011b96:	4293      	cmp	r3, r2
 8011b98:	d022      	beq.n	8011be0 <HAL_TIM_PWM_Start+0x1bc>
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	4a29      	ldr	r2, [pc, #164]	; (8011c44 <HAL_TIM_PWM_Start+0x220>)
 8011ba0:	4293      	cmp	r3, r2
 8011ba2:	d01d      	beq.n	8011be0 <HAL_TIM_PWM_Start+0x1bc>
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	4a27      	ldr	r2, [pc, #156]	; (8011c48 <HAL_TIM_PWM_Start+0x224>)
 8011baa:	4293      	cmp	r3, r2
 8011bac:	d018      	beq.n	8011be0 <HAL_TIM_PWM_Start+0x1bc>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	4a1f      	ldr	r2, [pc, #124]	; (8011c30 <HAL_TIM_PWM_Start+0x20c>)
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	d013      	beq.n	8011be0 <HAL_TIM_PWM_Start+0x1bc>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	4a23      	ldr	r2, [pc, #140]	; (8011c4c <HAL_TIM_PWM_Start+0x228>)
 8011bbe:	4293      	cmp	r3, r2
 8011bc0:	d00e      	beq.n	8011be0 <HAL_TIM_PWM_Start+0x1bc>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	4a1b      	ldr	r2, [pc, #108]	; (8011c34 <HAL_TIM_PWM_Start+0x210>)
 8011bc8:	4293      	cmp	r3, r2
 8011bca:	d009      	beq.n	8011be0 <HAL_TIM_PWM_Start+0x1bc>
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	4a1f      	ldr	r2, [pc, #124]	; (8011c50 <HAL_TIM_PWM_Start+0x22c>)
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	d004      	beq.n	8011be0 <HAL_TIM_PWM_Start+0x1bc>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	4a1e      	ldr	r2, [pc, #120]	; (8011c54 <HAL_TIM_PWM_Start+0x230>)
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	d115      	bne.n	8011c0c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	689a      	ldr	r2, [r3, #8]
 8011be6:	4b1c      	ldr	r3, [pc, #112]	; (8011c58 <HAL_TIM_PWM_Start+0x234>)
 8011be8:	4013      	ands	r3, r2
 8011bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	2b06      	cmp	r3, #6
 8011bf0:	d015      	beq.n	8011c1e <HAL_TIM_PWM_Start+0x1fa>
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bf8:	d011      	beq.n	8011c1e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f042 0201 	orr.w	r2, r2, #1
 8011c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c0a:	e008      	b.n	8011c1e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	681a      	ldr	r2, [r3, #0]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	f042 0201 	orr.w	r2, r2, #1
 8011c1a:	601a      	str	r2, [r3, #0]
 8011c1c:	e000      	b.n	8011c20 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011c20:	2300      	movs	r3, #0
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3710      	adds	r7, #16
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}
 8011c2a:	bf00      	nop
 8011c2c:	40010000 	.word	0x40010000
 8011c30:	40010400 	.word	0x40010400
 8011c34:	40014000 	.word	0x40014000
 8011c38:	40014400 	.word	0x40014400
 8011c3c:	40014800 	.word	0x40014800
 8011c40:	40000400 	.word	0x40000400
 8011c44:	40000800 	.word	0x40000800
 8011c48:	40000c00 	.word	0x40000c00
 8011c4c:	40001800 	.word	0x40001800
 8011c50:	4000e000 	.word	0x4000e000
 8011c54:	4000e400 	.word	0x4000e400
 8011c58:	00010007 	.word	0x00010007

08011c5c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b084      	sub	sp, #16
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011c66:	2300      	movs	r3, #0
 8011c68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	2b0c      	cmp	r3, #12
 8011c6e:	d855      	bhi.n	8011d1c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8011c70:	a201      	add	r2, pc, #4	; (adr r2, 8011c78 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8011c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c76:	bf00      	nop
 8011c78:	08011cad 	.word	0x08011cad
 8011c7c:	08011d1d 	.word	0x08011d1d
 8011c80:	08011d1d 	.word	0x08011d1d
 8011c84:	08011d1d 	.word	0x08011d1d
 8011c88:	08011cc9 	.word	0x08011cc9
 8011c8c:	08011d1d 	.word	0x08011d1d
 8011c90:	08011d1d 	.word	0x08011d1d
 8011c94:	08011d1d 	.word	0x08011d1d
 8011c98:	08011ce5 	.word	0x08011ce5
 8011c9c:	08011d1d 	.word	0x08011d1d
 8011ca0:	08011d1d 	.word	0x08011d1d
 8011ca4:	08011d1d 	.word	0x08011d1d
 8011ca8:	08011d01 	.word	0x08011d01
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	68da      	ldr	r2, [r3, #12]
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8011cba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7f8 fc65 	bl	800a590 <HAL_DMA_Abort_IT>
      break;
 8011cc6:	e02c      	b.n	8011d22 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	68da      	ldr	r2, [r3, #12]
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011cd6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7f8 fc57 	bl	800a590 <HAL_DMA_Abort_IT>
      break;
 8011ce2:	e01e      	b.n	8011d22 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	68da      	ldr	r2, [r3, #12]
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011cf2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7f8 fc49 	bl	800a590 <HAL_DMA_Abort_IT>
      break;
 8011cfe:	e010      	b.n	8011d22 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	68da      	ldr	r2, [r3, #12]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011d0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7f8 fc3b 	bl	800a590 <HAL_DMA_Abort_IT>
      break;
 8011d1a:	e002      	b.n	8011d22 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8011d20:	bf00      	nop
  }

  if (status == HAL_OK)
 8011d22:	7bfb      	ldrb	r3, [r7, #15]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	f040 8081 	bne.w	8011e2c <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	2200      	movs	r2, #0
 8011d30:	6839      	ldr	r1, [r7, #0]
 8011d32:	4618      	mov	r0, r3
 8011d34:	f001 f922 	bl	8012f7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	4a3e      	ldr	r2, [pc, #248]	; (8011e38 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8011d3e:	4293      	cmp	r3, r2
 8011d40:	d013      	beq.n	8011d6a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	4a3d      	ldr	r2, [pc, #244]	; (8011e3c <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8011d48:	4293      	cmp	r3, r2
 8011d4a:	d00e      	beq.n	8011d6a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	4a3b      	ldr	r2, [pc, #236]	; (8011e40 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8011d52:	4293      	cmp	r3, r2
 8011d54:	d009      	beq.n	8011d6a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	4a3a      	ldr	r2, [pc, #232]	; (8011e44 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8011d5c:	4293      	cmp	r3, r2
 8011d5e:	d004      	beq.n	8011d6a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	4a38      	ldr	r2, [pc, #224]	; (8011e48 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8011d66:	4293      	cmp	r3, r2
 8011d68:	d101      	bne.n	8011d6e <HAL_TIM_PWM_Stop_DMA+0x112>
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	e000      	b.n	8011d70 <HAL_TIM_PWM_Stop_DMA+0x114>
 8011d6e:	2300      	movs	r3, #0
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d017      	beq.n	8011da4 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	6a1a      	ldr	r2, [r3, #32]
 8011d7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8011d7e:	4013      	ands	r3, r2
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d10f      	bne.n	8011da4 <HAL_TIM_PWM_Stop_DMA+0x148>
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	6a1a      	ldr	r2, [r3, #32]
 8011d8a:	f240 4344 	movw	r3, #1092	; 0x444
 8011d8e:	4013      	ands	r3, r2
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d107      	bne.n	8011da4 <HAL_TIM_PWM_Stop_DMA+0x148>
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011da2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	6a1a      	ldr	r2, [r3, #32]
 8011daa:	f241 1311 	movw	r3, #4369	; 0x1111
 8011dae:	4013      	ands	r3, r2
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d10f      	bne.n	8011dd4 <HAL_TIM_PWM_Stop_DMA+0x178>
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	6a1a      	ldr	r2, [r3, #32]
 8011dba:	f240 4344 	movw	r3, #1092	; 0x444
 8011dbe:	4013      	ands	r3, r2
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d107      	bne.n	8011dd4 <HAL_TIM_PWM_Stop_DMA+0x178>
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	681a      	ldr	r2, [r3, #0]
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	f022 0201 	bic.w	r2, r2, #1
 8011dd2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d104      	bne.n	8011de4 <HAL_TIM_PWM_Stop_DMA+0x188>
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2201      	movs	r2, #1
 8011dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011de2:	e023      	b.n	8011e2c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	2b04      	cmp	r3, #4
 8011de8:	d104      	bne.n	8011df4 <HAL_TIM_PWM_Stop_DMA+0x198>
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2201      	movs	r2, #1
 8011dee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011df2:	e01b      	b.n	8011e2c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	2b08      	cmp	r3, #8
 8011df8:	d104      	bne.n	8011e04 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2201      	movs	r2, #1
 8011dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011e02:	e013      	b.n	8011e2c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	2b0c      	cmp	r3, #12
 8011e08:	d104      	bne.n	8011e14 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011e12:	e00b      	b.n	8011e2c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	2b10      	cmp	r3, #16
 8011e18:	d104      	bne.n	8011e24 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2201      	movs	r2, #1
 8011e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011e22:	e003      	b.n	8011e2c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2201      	movs	r2, #1
 8011e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8011e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3710      	adds	r7, #16
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}
 8011e36:	bf00      	nop
 8011e38:	40010000 	.word	0x40010000
 8011e3c:	40010400 	.word	0x40010400
 8011e40:	40014000 	.word	0x40014000
 8011e44:	40014400 	.word	0x40014400
 8011e48:	40014800 	.word	0x40014800

08011e4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b086      	sub	sp, #24
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d101      	bne.n	8011e60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	e08f      	b.n	8011f80 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d106      	bne.n	8011e7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2200      	movs	r2, #0
 8011e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f7f4 faaf 	bl	80063d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	2202      	movs	r2, #2
 8011e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	6899      	ldr	r1, [r3, #8]
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681a      	ldr	r2, [r3, #0]
 8011e8c:	4b3e      	ldr	r3, [pc, #248]	; (8011f88 <HAL_TIM_Encoder_Init+0x13c>)
 8011e8e:	400b      	ands	r3, r1
 8011e90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681a      	ldr	r2, [r3, #0]
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	3304      	adds	r3, #4
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	4610      	mov	r0, r2
 8011e9e:	f000 fc53 	bl	8012748 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	689b      	ldr	r3, [r3, #8]
 8011ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	699b      	ldr	r3, [r3, #24]
 8011eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	6a1b      	ldr	r3, [r3, #32]
 8011eb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	697a      	ldr	r2, [r7, #20]
 8011ec0:	4313      	orrs	r3, r2
 8011ec2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011ec4:	693a      	ldr	r2, [r7, #16]
 8011ec6:	4b31      	ldr	r3, [pc, #196]	; (8011f8c <HAL_TIM_Encoder_Init+0x140>)
 8011ec8:	4013      	ands	r3, r2
 8011eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	689a      	ldr	r2, [r3, #8]
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	699b      	ldr	r3, [r3, #24]
 8011ed4:	021b      	lsls	r3, r3, #8
 8011ed6:	4313      	orrs	r3, r2
 8011ed8:	693a      	ldr	r2, [r7, #16]
 8011eda:	4313      	orrs	r3, r2
 8011edc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8011ede:	693a      	ldr	r2, [r7, #16]
 8011ee0:	4b2b      	ldr	r3, [pc, #172]	; (8011f90 <HAL_TIM_Encoder_Init+0x144>)
 8011ee2:	4013      	ands	r3, r2
 8011ee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8011ee6:	693a      	ldr	r2, [r7, #16]
 8011ee8:	4b2a      	ldr	r3, [pc, #168]	; (8011f94 <HAL_TIM_Encoder_Init+0x148>)
 8011eea:	4013      	ands	r3, r2
 8011eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	68da      	ldr	r2, [r3, #12]
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	69db      	ldr	r3, [r3, #28]
 8011ef6:	021b      	lsls	r3, r3, #8
 8011ef8:	4313      	orrs	r3, r2
 8011efa:	693a      	ldr	r2, [r7, #16]
 8011efc:	4313      	orrs	r3, r2
 8011efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	691b      	ldr	r3, [r3, #16]
 8011f04:	011a      	lsls	r2, r3, #4
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	6a1b      	ldr	r3, [r3, #32]
 8011f0a:	031b      	lsls	r3, r3, #12
 8011f0c:	4313      	orrs	r3, r2
 8011f0e:	693a      	ldr	r2, [r7, #16]
 8011f10:	4313      	orrs	r3, r2
 8011f12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8011f1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8011f22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	685a      	ldr	r2, [r3, #4]
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	695b      	ldr	r3, [r3, #20]
 8011f2c:	011b      	lsls	r3, r3, #4
 8011f2e:	4313      	orrs	r3, r2
 8011f30:	68fa      	ldr	r2, [r7, #12]
 8011f32:	4313      	orrs	r3, r2
 8011f34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	697a      	ldr	r2, [r7, #20]
 8011f3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	693a      	ldr	r2, [r7, #16]
 8011f44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	68fa      	ldr	r2, [r7, #12]
 8011f4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2201      	movs	r2, #1
 8011f52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2201      	movs	r2, #1
 8011f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2201      	movs	r2, #1
 8011f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2201      	movs	r2, #1
 8011f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2201      	movs	r2, #1
 8011f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2201      	movs	r2, #1
 8011f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011f7e:	2300      	movs	r3, #0
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3718      	adds	r7, #24
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}
 8011f88:	fffebff8 	.word	0xfffebff8
 8011f8c:	fffffcfc 	.word	0xfffffcfc
 8011f90:	fffff3f3 	.word	0xfffff3f3
 8011f94:	ffff0f0f 	.word	0xffff0f0f

08011f98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011fa8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011fb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011fb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fc0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d110      	bne.n	8011fea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8011fc8:	7bfb      	ldrb	r3, [r7, #15]
 8011fca:	2b01      	cmp	r3, #1
 8011fcc:	d102      	bne.n	8011fd4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8011fce:	7b7b      	ldrb	r3, [r7, #13]
 8011fd0:	2b01      	cmp	r3, #1
 8011fd2:	d001      	beq.n	8011fd8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	e069      	b.n	80120ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2202      	movs	r2, #2
 8011fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2202      	movs	r2, #2
 8011fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011fe8:	e031      	b.n	801204e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8011fea:	683b      	ldr	r3, [r7, #0]
 8011fec:	2b04      	cmp	r3, #4
 8011fee:	d110      	bne.n	8012012 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8011ff0:	7bbb      	ldrb	r3, [r7, #14]
 8011ff2:	2b01      	cmp	r3, #1
 8011ff4:	d102      	bne.n	8011ffc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8011ff6:	7b3b      	ldrb	r3, [r7, #12]
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d001      	beq.n	8012000 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	e055      	b.n	80120ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2202      	movs	r2, #2
 8012004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2202      	movs	r2, #2
 801200c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012010:	e01d      	b.n	801204e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8012012:	7bfb      	ldrb	r3, [r7, #15]
 8012014:	2b01      	cmp	r3, #1
 8012016:	d108      	bne.n	801202a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8012018:	7bbb      	ldrb	r3, [r7, #14]
 801201a:	2b01      	cmp	r3, #1
 801201c:	d105      	bne.n	801202a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801201e:	7b7b      	ldrb	r3, [r7, #13]
 8012020:	2b01      	cmp	r3, #1
 8012022:	d102      	bne.n	801202a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8012024:	7b3b      	ldrb	r3, [r7, #12]
 8012026:	2b01      	cmp	r3, #1
 8012028:	d001      	beq.n	801202e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 801202a:	2301      	movs	r3, #1
 801202c:	e03e      	b.n	80120ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	2202      	movs	r2, #2
 8012032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2202      	movs	r2, #2
 801203a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2202      	movs	r2, #2
 8012042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	2202      	movs	r2, #2
 801204a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d003      	beq.n	801205c <HAL_TIM_Encoder_Start+0xc4>
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	2b04      	cmp	r3, #4
 8012058:	d008      	beq.n	801206c <HAL_TIM_Encoder_Start+0xd4>
 801205a:	e00f      	b.n	801207c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	2201      	movs	r2, #1
 8012062:	2100      	movs	r1, #0
 8012064:	4618      	mov	r0, r3
 8012066:	f000 ff89 	bl	8012f7c <TIM_CCxChannelCmd>
      break;
 801206a:	e016      	b.n	801209a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	2201      	movs	r2, #1
 8012072:	2104      	movs	r1, #4
 8012074:	4618      	mov	r0, r3
 8012076:	f000 ff81 	bl	8012f7c <TIM_CCxChannelCmd>
      break;
 801207a:	e00e      	b.n	801209a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	2201      	movs	r2, #1
 8012082:	2100      	movs	r1, #0
 8012084:	4618      	mov	r0, r3
 8012086:	f000 ff79 	bl	8012f7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	2201      	movs	r2, #1
 8012090:	2104      	movs	r1, #4
 8012092:	4618      	mov	r0, r3
 8012094:	f000 ff72 	bl	8012f7c <TIM_CCxChannelCmd>
      break;
 8012098:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	681a      	ldr	r2, [r3, #0]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f042 0201 	orr.w	r2, r2, #1
 80120a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80120aa:	2300      	movs	r3, #0
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3710      	adds	r7, #16
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	691b      	ldr	r3, [r3, #16]
 80120c2:	f003 0302 	and.w	r3, r3, #2
 80120c6:	2b02      	cmp	r3, #2
 80120c8:	d122      	bne.n	8012110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	f003 0302 	and.w	r3, r3, #2
 80120d4:	2b02      	cmp	r3, #2
 80120d6:	d11b      	bne.n	8012110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	f06f 0202 	mvn.w	r2, #2
 80120e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2201      	movs	r2, #1
 80120e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	699b      	ldr	r3, [r3, #24]
 80120ee:	f003 0303 	and.w	r3, r3, #3
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d003      	beq.n	80120fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f000 fb12 	bl	8012720 <HAL_TIM_IC_CaptureCallback>
 80120fc:	e005      	b.n	801210a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f000 fb04 	bl	801270c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f7f1 f9af 	bl	8003468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2200      	movs	r2, #0
 801210e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	691b      	ldr	r3, [r3, #16]
 8012116:	f003 0304 	and.w	r3, r3, #4
 801211a:	2b04      	cmp	r3, #4
 801211c:	d122      	bne.n	8012164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	68db      	ldr	r3, [r3, #12]
 8012124:	f003 0304 	and.w	r3, r3, #4
 8012128:	2b04      	cmp	r3, #4
 801212a:	d11b      	bne.n	8012164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	f06f 0204 	mvn.w	r2, #4
 8012134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2202      	movs	r2, #2
 801213a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	699b      	ldr	r3, [r3, #24]
 8012142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012146:	2b00      	cmp	r3, #0
 8012148:	d003      	beq.n	8012152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f000 fae8 	bl	8012720 <HAL_TIM_IC_CaptureCallback>
 8012150:	e005      	b.n	801215e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f000 fada 	bl	801270c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f7f1 f985 	bl	8003468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2200      	movs	r2, #0
 8012162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	691b      	ldr	r3, [r3, #16]
 801216a:	f003 0308 	and.w	r3, r3, #8
 801216e:	2b08      	cmp	r3, #8
 8012170:	d122      	bne.n	80121b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	68db      	ldr	r3, [r3, #12]
 8012178:	f003 0308 	and.w	r3, r3, #8
 801217c:	2b08      	cmp	r3, #8
 801217e:	d11b      	bne.n	80121b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	f06f 0208 	mvn.w	r2, #8
 8012188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	2204      	movs	r2, #4
 801218e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	69db      	ldr	r3, [r3, #28]
 8012196:	f003 0303 	and.w	r3, r3, #3
 801219a:	2b00      	cmp	r3, #0
 801219c:	d003      	beq.n	80121a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f000 fabe 	bl	8012720 <HAL_TIM_IC_CaptureCallback>
 80121a4:	e005      	b.n	80121b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	f000 fab0 	bl	801270c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f7f1 f95b 	bl	8003468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2200      	movs	r2, #0
 80121b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	691b      	ldr	r3, [r3, #16]
 80121be:	f003 0310 	and.w	r3, r3, #16
 80121c2:	2b10      	cmp	r3, #16
 80121c4:	d122      	bne.n	801220c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	68db      	ldr	r3, [r3, #12]
 80121cc:	f003 0310 	and.w	r3, r3, #16
 80121d0:	2b10      	cmp	r3, #16
 80121d2:	d11b      	bne.n	801220c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	f06f 0210 	mvn.w	r2, #16
 80121dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2208      	movs	r2, #8
 80121e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	69db      	ldr	r3, [r3, #28]
 80121ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d003      	beq.n	80121fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f000 fa94 	bl	8012720 <HAL_TIM_IC_CaptureCallback>
 80121f8:	e005      	b.n	8012206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f000 fa86 	bl	801270c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f7f1 f931 	bl	8003468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2200      	movs	r2, #0
 801220a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	691b      	ldr	r3, [r3, #16]
 8012212:	f003 0301 	and.w	r3, r3, #1
 8012216:	2b01      	cmp	r3, #1
 8012218:	d10e      	bne.n	8012238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	68db      	ldr	r3, [r3, #12]
 8012220:	f003 0301 	and.w	r3, r3, #1
 8012224:	2b01      	cmp	r3, #1
 8012226:	d107      	bne.n	8012238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	f06f 0201 	mvn.w	r2, #1
 8012230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f7f1 f968 	bl	8003508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	691b      	ldr	r3, [r3, #16]
 801223e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012242:	2b80      	cmp	r3, #128	; 0x80
 8012244:	d10e      	bne.n	8012264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	68db      	ldr	r3, [r3, #12]
 801224c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012250:	2b80      	cmp	r3, #128	; 0x80
 8012252:	d107      	bne.n	8012264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f000 fff8 	bl	8013254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	691b      	ldr	r3, [r3, #16]
 801226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801226e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012272:	d10e      	bne.n	8012292 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	68db      	ldr	r3, [r3, #12]
 801227a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801227e:	2b80      	cmp	r3, #128	; 0x80
 8012280:	d107      	bne.n	8012292 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801228a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f000 ffeb 	bl	8013268 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	691b      	ldr	r3, [r3, #16]
 8012298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801229c:	2b40      	cmp	r3, #64	; 0x40
 801229e:	d10e      	bne.n	80122be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	68db      	ldr	r3, [r3, #12]
 80122a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122aa:	2b40      	cmp	r3, #64	; 0x40
 80122ac:	d107      	bne.n	80122be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80122b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 fa3b 	bl	8012734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	691b      	ldr	r3, [r3, #16]
 80122c4:	f003 0320 	and.w	r3, r3, #32
 80122c8:	2b20      	cmp	r3, #32
 80122ca:	d10e      	bne.n	80122ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	68db      	ldr	r3, [r3, #12]
 80122d2:	f003 0320 	and.w	r3, r3, #32
 80122d6:	2b20      	cmp	r3, #32
 80122d8:	d107      	bne.n	80122ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	f06f 0220 	mvn.w	r2, #32
 80122e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f000 ffab 	bl	8013240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80122ea:	bf00      	nop
 80122ec:	3708      	adds	r7, #8
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}
	...

080122f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b086      	sub	sp, #24
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012300:	2300      	movs	r3, #0
 8012302:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801230a:	2b01      	cmp	r3, #1
 801230c:	d101      	bne.n	8012312 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801230e:	2302      	movs	r3, #2
 8012310:	e0ff      	b.n	8012512 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	2201      	movs	r2, #1
 8012316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2b14      	cmp	r3, #20
 801231e:	f200 80f0 	bhi.w	8012502 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012322:	a201      	add	r2, pc, #4	; (adr r2, 8012328 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012328:	0801237d 	.word	0x0801237d
 801232c:	08012503 	.word	0x08012503
 8012330:	08012503 	.word	0x08012503
 8012334:	08012503 	.word	0x08012503
 8012338:	080123bd 	.word	0x080123bd
 801233c:	08012503 	.word	0x08012503
 8012340:	08012503 	.word	0x08012503
 8012344:	08012503 	.word	0x08012503
 8012348:	080123ff 	.word	0x080123ff
 801234c:	08012503 	.word	0x08012503
 8012350:	08012503 	.word	0x08012503
 8012354:	08012503 	.word	0x08012503
 8012358:	0801243f 	.word	0x0801243f
 801235c:	08012503 	.word	0x08012503
 8012360:	08012503 	.word	0x08012503
 8012364:	08012503 	.word	0x08012503
 8012368:	08012481 	.word	0x08012481
 801236c:	08012503 	.word	0x08012503
 8012370:	08012503 	.word	0x08012503
 8012374:	08012503 	.word	0x08012503
 8012378:	080124c1 	.word	0x080124c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	68b9      	ldr	r1, [r7, #8]
 8012382:	4618      	mov	r0, r3
 8012384:	f000 fa86 	bl	8012894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	699a      	ldr	r2, [r3, #24]
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	f042 0208 	orr.w	r2, r2, #8
 8012396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	699a      	ldr	r2, [r3, #24]
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	f022 0204 	bic.w	r2, r2, #4
 80123a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	6999      	ldr	r1, [r3, #24]
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	691a      	ldr	r2, [r3, #16]
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	430a      	orrs	r2, r1
 80123b8:	619a      	str	r2, [r3, #24]
      break;
 80123ba:	e0a5      	b.n	8012508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	68b9      	ldr	r1, [r7, #8]
 80123c2:	4618      	mov	r0, r3
 80123c4:	f000 faf6 	bl	80129b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	699a      	ldr	r2, [r3, #24]
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80123d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	699a      	ldr	r2, [r3, #24]
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80123e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	6999      	ldr	r1, [r3, #24]
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	691b      	ldr	r3, [r3, #16]
 80123f2:	021a      	lsls	r2, r3, #8
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	430a      	orrs	r2, r1
 80123fa:	619a      	str	r2, [r3, #24]
      break;
 80123fc:	e084      	b.n	8012508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	68b9      	ldr	r1, [r7, #8]
 8012404:	4618      	mov	r0, r3
 8012406:	f000 fb5f 	bl	8012ac8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	69da      	ldr	r2, [r3, #28]
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	f042 0208 	orr.w	r2, r2, #8
 8012418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	69da      	ldr	r2, [r3, #28]
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	f022 0204 	bic.w	r2, r2, #4
 8012428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	69d9      	ldr	r1, [r3, #28]
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	691a      	ldr	r2, [r3, #16]
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	430a      	orrs	r2, r1
 801243a:	61da      	str	r2, [r3, #28]
      break;
 801243c:	e064      	b.n	8012508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	68b9      	ldr	r1, [r7, #8]
 8012444:	4618      	mov	r0, r3
 8012446:	f000 fbc7 	bl	8012bd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	69da      	ldr	r2, [r3, #28]
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	69da      	ldr	r2, [r3, #28]
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	69d9      	ldr	r1, [r3, #28]
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	691b      	ldr	r3, [r3, #16]
 8012474:	021a      	lsls	r2, r3, #8
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	430a      	orrs	r2, r1
 801247c:	61da      	str	r2, [r3, #28]
      break;
 801247e:	e043      	b.n	8012508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	68b9      	ldr	r1, [r7, #8]
 8012486:	4618      	mov	r0, r3
 8012488:	f000 fc10 	bl	8012cac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	f042 0208 	orr.w	r2, r2, #8
 801249a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	f022 0204 	bic.w	r2, r2, #4
 80124aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	691a      	ldr	r2, [r3, #16]
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	430a      	orrs	r2, r1
 80124bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80124be:	e023      	b.n	8012508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	68b9      	ldr	r1, [r7, #8]
 80124c6:	4618      	mov	r0, r3
 80124c8:	f000 fc54 	bl	8012d74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80124da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80124ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80124f2:	68bb      	ldr	r3, [r7, #8]
 80124f4:	691b      	ldr	r3, [r3, #16]
 80124f6:	021a      	lsls	r2, r3, #8
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	430a      	orrs	r2, r1
 80124fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012500:	e002      	b.n	8012508 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012502:	2301      	movs	r3, #1
 8012504:	75fb      	strb	r3, [r7, #23]
      break;
 8012506:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	2200      	movs	r2, #0
 801250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012510:	7dfb      	ldrb	r3, [r7, #23]
}
 8012512:	4618      	mov	r0, r3
 8012514:	3718      	adds	r7, #24
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
 801251a:	bf00      	nop

0801251c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b084      	sub	sp, #16
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
 8012524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012526:	2300      	movs	r3, #0
 8012528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012530:	2b01      	cmp	r3, #1
 8012532:	d101      	bne.n	8012538 <HAL_TIM_ConfigClockSource+0x1c>
 8012534:	2302      	movs	r3, #2
 8012536:	e0dc      	b.n	80126f2 <HAL_TIM_ConfigClockSource+0x1d6>
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2201      	movs	r2, #1
 801253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2202      	movs	r2, #2
 8012544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	689b      	ldr	r3, [r3, #8]
 801254e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012550:	68ba      	ldr	r2, [r7, #8]
 8012552:	4b6a      	ldr	r3, [pc, #424]	; (80126fc <HAL_TIM_ConfigClockSource+0x1e0>)
 8012554:	4013      	ands	r3, r2
 8012556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801255e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	68ba      	ldr	r2, [r7, #8]
 8012566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	4a64      	ldr	r2, [pc, #400]	; (8012700 <HAL_TIM_ConfigClockSource+0x1e4>)
 801256e:	4293      	cmp	r3, r2
 8012570:	f000 80a9 	beq.w	80126c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8012574:	4a62      	ldr	r2, [pc, #392]	; (8012700 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012576:	4293      	cmp	r3, r2
 8012578:	f200 80ae 	bhi.w	80126d8 <HAL_TIM_ConfigClockSource+0x1bc>
 801257c:	4a61      	ldr	r2, [pc, #388]	; (8012704 <HAL_TIM_ConfigClockSource+0x1e8>)
 801257e:	4293      	cmp	r3, r2
 8012580:	f000 80a1 	beq.w	80126c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8012584:	4a5f      	ldr	r2, [pc, #380]	; (8012704 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012586:	4293      	cmp	r3, r2
 8012588:	f200 80a6 	bhi.w	80126d8 <HAL_TIM_ConfigClockSource+0x1bc>
 801258c:	4a5e      	ldr	r2, [pc, #376]	; (8012708 <HAL_TIM_ConfigClockSource+0x1ec>)
 801258e:	4293      	cmp	r3, r2
 8012590:	f000 8099 	beq.w	80126c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8012594:	4a5c      	ldr	r2, [pc, #368]	; (8012708 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012596:	4293      	cmp	r3, r2
 8012598:	f200 809e 	bhi.w	80126d8 <HAL_TIM_ConfigClockSource+0x1bc>
 801259c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80125a0:	f000 8091 	beq.w	80126c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80125a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80125a8:	f200 8096 	bhi.w	80126d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80125ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80125b0:	f000 8089 	beq.w	80126c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80125b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80125b8:	f200 808e 	bhi.w	80126d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80125bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80125c0:	d03e      	beq.n	8012640 <HAL_TIM_ConfigClockSource+0x124>
 80125c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80125c6:	f200 8087 	bhi.w	80126d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80125ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80125ce:	f000 8086 	beq.w	80126de <HAL_TIM_ConfigClockSource+0x1c2>
 80125d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80125d6:	d87f      	bhi.n	80126d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80125d8:	2b70      	cmp	r3, #112	; 0x70
 80125da:	d01a      	beq.n	8012612 <HAL_TIM_ConfigClockSource+0xf6>
 80125dc:	2b70      	cmp	r3, #112	; 0x70
 80125de:	d87b      	bhi.n	80126d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80125e0:	2b60      	cmp	r3, #96	; 0x60
 80125e2:	d050      	beq.n	8012686 <HAL_TIM_ConfigClockSource+0x16a>
 80125e4:	2b60      	cmp	r3, #96	; 0x60
 80125e6:	d877      	bhi.n	80126d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80125e8:	2b50      	cmp	r3, #80	; 0x50
 80125ea:	d03c      	beq.n	8012666 <HAL_TIM_ConfigClockSource+0x14a>
 80125ec:	2b50      	cmp	r3, #80	; 0x50
 80125ee:	d873      	bhi.n	80126d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80125f0:	2b40      	cmp	r3, #64	; 0x40
 80125f2:	d058      	beq.n	80126a6 <HAL_TIM_ConfigClockSource+0x18a>
 80125f4:	2b40      	cmp	r3, #64	; 0x40
 80125f6:	d86f      	bhi.n	80126d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80125f8:	2b30      	cmp	r3, #48	; 0x30
 80125fa:	d064      	beq.n	80126c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80125fc:	2b30      	cmp	r3, #48	; 0x30
 80125fe:	d86b      	bhi.n	80126d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8012600:	2b20      	cmp	r3, #32
 8012602:	d060      	beq.n	80126c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8012604:	2b20      	cmp	r3, #32
 8012606:	d867      	bhi.n	80126d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8012608:	2b00      	cmp	r3, #0
 801260a:	d05c      	beq.n	80126c6 <HAL_TIM_ConfigClockSource+0x1aa>
 801260c:	2b10      	cmp	r3, #16
 801260e:	d05a      	beq.n	80126c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8012610:	e062      	b.n	80126d8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6818      	ldr	r0, [r3, #0]
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	6899      	ldr	r1, [r3, #8]
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	685a      	ldr	r2, [r3, #4]
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	68db      	ldr	r3, [r3, #12]
 8012622:	f000 fc8b 	bl	8012f3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	689b      	ldr	r3, [r3, #8]
 801262c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012634:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	68ba      	ldr	r2, [r7, #8]
 801263c:	609a      	str	r2, [r3, #8]
      break;
 801263e:	e04f      	b.n	80126e0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6818      	ldr	r0, [r3, #0]
 8012644:	683b      	ldr	r3, [r7, #0]
 8012646:	6899      	ldr	r1, [r3, #8]
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	685a      	ldr	r2, [r3, #4]
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	68db      	ldr	r3, [r3, #12]
 8012650:	f000 fc74 	bl	8012f3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	689a      	ldr	r2, [r3, #8]
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012662:	609a      	str	r2, [r3, #8]
      break;
 8012664:	e03c      	b.n	80126e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6818      	ldr	r0, [r3, #0]
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	6859      	ldr	r1, [r3, #4]
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	68db      	ldr	r3, [r3, #12]
 8012672:	461a      	mov	r2, r3
 8012674:	f000 fbe4 	bl	8012e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	2150      	movs	r1, #80	; 0x50
 801267e:	4618      	mov	r0, r3
 8012680:	f000 fc3e 	bl	8012f00 <TIM_ITRx_SetConfig>
      break;
 8012684:	e02c      	b.n	80126e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6818      	ldr	r0, [r3, #0]
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	6859      	ldr	r1, [r3, #4]
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	68db      	ldr	r3, [r3, #12]
 8012692:	461a      	mov	r2, r3
 8012694:	f000 fc03 	bl	8012e9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	2160      	movs	r1, #96	; 0x60
 801269e:	4618      	mov	r0, r3
 80126a0:	f000 fc2e 	bl	8012f00 <TIM_ITRx_SetConfig>
      break;
 80126a4:	e01c      	b.n	80126e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	6818      	ldr	r0, [r3, #0]
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	6859      	ldr	r1, [r3, #4]
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	68db      	ldr	r3, [r3, #12]
 80126b2:	461a      	mov	r2, r3
 80126b4:	f000 fbc4 	bl	8012e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	2140      	movs	r1, #64	; 0x40
 80126be:	4618      	mov	r0, r3
 80126c0:	f000 fc1e 	bl	8012f00 <TIM_ITRx_SetConfig>
      break;
 80126c4:	e00c      	b.n	80126e0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681a      	ldr	r2, [r3, #0]
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	4619      	mov	r1, r3
 80126d0:	4610      	mov	r0, r2
 80126d2:	f000 fc15 	bl	8012f00 <TIM_ITRx_SetConfig>
      break;
 80126d6:	e003      	b.n	80126e0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80126d8:	2301      	movs	r3, #1
 80126da:	73fb      	strb	r3, [r7, #15]
      break;
 80126dc:	e000      	b.n	80126e0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80126de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2201      	movs	r2, #1
 80126e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2200      	movs	r2, #0
 80126ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80126f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3710      	adds	r7, #16
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	ffceff88 	.word	0xffceff88
 8012700:	00100040 	.word	0x00100040
 8012704:	00100030 	.word	0x00100030
 8012708:	00100020 	.word	0x00100020

0801270c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801270c:	b480      	push	{r7}
 801270e:	b083      	sub	sp, #12
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012714:	bf00      	nop
 8012716:	370c      	adds	r7, #12
 8012718:	46bd      	mov	sp, r7
 801271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271e:	4770      	bx	lr

08012720 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012720:	b480      	push	{r7}
 8012722:	b083      	sub	sp, #12
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012728:	bf00      	nop
 801272a:	370c      	adds	r7, #12
 801272c:	46bd      	mov	sp, r7
 801272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012732:	4770      	bx	lr

08012734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012734:	b480      	push	{r7}
 8012736:	b083      	sub	sp, #12
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801273c:	bf00      	nop
 801273e:	370c      	adds	r7, #12
 8012740:	46bd      	mov	sp, r7
 8012742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012746:	4770      	bx	lr

08012748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012748:	b480      	push	{r7}
 801274a:	b085      	sub	sp, #20
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	4a44      	ldr	r2, [pc, #272]	; (801286c <TIM_Base_SetConfig+0x124>)
 801275c:	4293      	cmp	r3, r2
 801275e:	d013      	beq.n	8012788 <TIM_Base_SetConfig+0x40>
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012766:	d00f      	beq.n	8012788 <TIM_Base_SetConfig+0x40>
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	4a41      	ldr	r2, [pc, #260]	; (8012870 <TIM_Base_SetConfig+0x128>)
 801276c:	4293      	cmp	r3, r2
 801276e:	d00b      	beq.n	8012788 <TIM_Base_SetConfig+0x40>
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	4a40      	ldr	r2, [pc, #256]	; (8012874 <TIM_Base_SetConfig+0x12c>)
 8012774:	4293      	cmp	r3, r2
 8012776:	d007      	beq.n	8012788 <TIM_Base_SetConfig+0x40>
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	4a3f      	ldr	r2, [pc, #252]	; (8012878 <TIM_Base_SetConfig+0x130>)
 801277c:	4293      	cmp	r3, r2
 801277e:	d003      	beq.n	8012788 <TIM_Base_SetConfig+0x40>
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	4a3e      	ldr	r2, [pc, #248]	; (801287c <TIM_Base_SetConfig+0x134>)
 8012784:	4293      	cmp	r3, r2
 8012786:	d108      	bne.n	801279a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801278e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	685b      	ldr	r3, [r3, #4]
 8012794:	68fa      	ldr	r2, [r7, #12]
 8012796:	4313      	orrs	r3, r2
 8012798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	4a33      	ldr	r2, [pc, #204]	; (801286c <TIM_Base_SetConfig+0x124>)
 801279e:	4293      	cmp	r3, r2
 80127a0:	d027      	beq.n	80127f2 <TIM_Base_SetConfig+0xaa>
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80127a8:	d023      	beq.n	80127f2 <TIM_Base_SetConfig+0xaa>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	4a30      	ldr	r2, [pc, #192]	; (8012870 <TIM_Base_SetConfig+0x128>)
 80127ae:	4293      	cmp	r3, r2
 80127b0:	d01f      	beq.n	80127f2 <TIM_Base_SetConfig+0xaa>
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	4a2f      	ldr	r2, [pc, #188]	; (8012874 <TIM_Base_SetConfig+0x12c>)
 80127b6:	4293      	cmp	r3, r2
 80127b8:	d01b      	beq.n	80127f2 <TIM_Base_SetConfig+0xaa>
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	4a2e      	ldr	r2, [pc, #184]	; (8012878 <TIM_Base_SetConfig+0x130>)
 80127be:	4293      	cmp	r3, r2
 80127c0:	d017      	beq.n	80127f2 <TIM_Base_SetConfig+0xaa>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	4a2d      	ldr	r2, [pc, #180]	; (801287c <TIM_Base_SetConfig+0x134>)
 80127c6:	4293      	cmp	r3, r2
 80127c8:	d013      	beq.n	80127f2 <TIM_Base_SetConfig+0xaa>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	4a2c      	ldr	r2, [pc, #176]	; (8012880 <TIM_Base_SetConfig+0x138>)
 80127ce:	4293      	cmp	r3, r2
 80127d0:	d00f      	beq.n	80127f2 <TIM_Base_SetConfig+0xaa>
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	4a2b      	ldr	r2, [pc, #172]	; (8012884 <TIM_Base_SetConfig+0x13c>)
 80127d6:	4293      	cmp	r3, r2
 80127d8:	d00b      	beq.n	80127f2 <TIM_Base_SetConfig+0xaa>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	4a2a      	ldr	r2, [pc, #168]	; (8012888 <TIM_Base_SetConfig+0x140>)
 80127de:	4293      	cmp	r3, r2
 80127e0:	d007      	beq.n	80127f2 <TIM_Base_SetConfig+0xaa>
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	4a29      	ldr	r2, [pc, #164]	; (801288c <TIM_Base_SetConfig+0x144>)
 80127e6:	4293      	cmp	r3, r2
 80127e8:	d003      	beq.n	80127f2 <TIM_Base_SetConfig+0xaa>
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	4a28      	ldr	r2, [pc, #160]	; (8012890 <TIM_Base_SetConfig+0x148>)
 80127ee:	4293      	cmp	r3, r2
 80127f0:	d108      	bne.n	8012804 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80127f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	68fa      	ldr	r2, [r7, #12]
 8012800:	4313      	orrs	r3, r2
 8012802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	695b      	ldr	r3, [r3, #20]
 801280e:	4313      	orrs	r3, r2
 8012810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	68fa      	ldr	r2, [r7, #12]
 8012816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	689a      	ldr	r2, [r3, #8]
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	681a      	ldr	r2, [r3, #0]
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	4a10      	ldr	r2, [pc, #64]	; (801286c <TIM_Base_SetConfig+0x124>)
 801282c:	4293      	cmp	r3, r2
 801282e:	d00f      	beq.n	8012850 <TIM_Base_SetConfig+0x108>
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	4a12      	ldr	r2, [pc, #72]	; (801287c <TIM_Base_SetConfig+0x134>)
 8012834:	4293      	cmp	r3, r2
 8012836:	d00b      	beq.n	8012850 <TIM_Base_SetConfig+0x108>
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	4a11      	ldr	r2, [pc, #68]	; (8012880 <TIM_Base_SetConfig+0x138>)
 801283c:	4293      	cmp	r3, r2
 801283e:	d007      	beq.n	8012850 <TIM_Base_SetConfig+0x108>
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	4a10      	ldr	r2, [pc, #64]	; (8012884 <TIM_Base_SetConfig+0x13c>)
 8012844:	4293      	cmp	r3, r2
 8012846:	d003      	beq.n	8012850 <TIM_Base_SetConfig+0x108>
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	4a0f      	ldr	r2, [pc, #60]	; (8012888 <TIM_Base_SetConfig+0x140>)
 801284c:	4293      	cmp	r3, r2
 801284e:	d103      	bne.n	8012858 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	691a      	ldr	r2, [r3, #16]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2201      	movs	r2, #1
 801285c:	615a      	str	r2, [r3, #20]
}
 801285e:	bf00      	nop
 8012860:	3714      	adds	r7, #20
 8012862:	46bd      	mov	sp, r7
 8012864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012868:	4770      	bx	lr
 801286a:	bf00      	nop
 801286c:	40010000 	.word	0x40010000
 8012870:	40000400 	.word	0x40000400
 8012874:	40000800 	.word	0x40000800
 8012878:	40000c00 	.word	0x40000c00
 801287c:	40010400 	.word	0x40010400
 8012880:	40014000 	.word	0x40014000
 8012884:	40014400 	.word	0x40014400
 8012888:	40014800 	.word	0x40014800
 801288c:	4000e000 	.word	0x4000e000
 8012890:	4000e400 	.word	0x4000e400

08012894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012894:	b480      	push	{r7}
 8012896:	b087      	sub	sp, #28
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6a1b      	ldr	r3, [r3, #32]
 80128a2:	f023 0201 	bic.w	r2, r3, #1
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6a1b      	ldr	r3, [r3, #32]
 80128ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	685b      	ldr	r3, [r3, #4]
 80128b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	699b      	ldr	r3, [r3, #24]
 80128ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80128bc:	68fa      	ldr	r2, [r7, #12]
 80128be:	4b37      	ldr	r3, [pc, #220]	; (801299c <TIM_OC1_SetConfig+0x108>)
 80128c0:	4013      	ands	r3, r2
 80128c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	f023 0303 	bic.w	r3, r3, #3
 80128ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	68fa      	ldr	r2, [r7, #12]
 80128d2:	4313      	orrs	r3, r2
 80128d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80128d6:	697b      	ldr	r3, [r7, #20]
 80128d8:	f023 0302 	bic.w	r3, r3, #2
 80128dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	689b      	ldr	r3, [r3, #8]
 80128e2:	697a      	ldr	r2, [r7, #20]
 80128e4:	4313      	orrs	r3, r2
 80128e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	4a2d      	ldr	r2, [pc, #180]	; (80129a0 <TIM_OC1_SetConfig+0x10c>)
 80128ec:	4293      	cmp	r3, r2
 80128ee:	d00f      	beq.n	8012910 <TIM_OC1_SetConfig+0x7c>
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	4a2c      	ldr	r2, [pc, #176]	; (80129a4 <TIM_OC1_SetConfig+0x110>)
 80128f4:	4293      	cmp	r3, r2
 80128f6:	d00b      	beq.n	8012910 <TIM_OC1_SetConfig+0x7c>
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	4a2b      	ldr	r2, [pc, #172]	; (80129a8 <TIM_OC1_SetConfig+0x114>)
 80128fc:	4293      	cmp	r3, r2
 80128fe:	d007      	beq.n	8012910 <TIM_OC1_SetConfig+0x7c>
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	4a2a      	ldr	r2, [pc, #168]	; (80129ac <TIM_OC1_SetConfig+0x118>)
 8012904:	4293      	cmp	r3, r2
 8012906:	d003      	beq.n	8012910 <TIM_OC1_SetConfig+0x7c>
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	4a29      	ldr	r2, [pc, #164]	; (80129b0 <TIM_OC1_SetConfig+0x11c>)
 801290c:	4293      	cmp	r3, r2
 801290e:	d10c      	bne.n	801292a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012910:	697b      	ldr	r3, [r7, #20]
 8012912:	f023 0308 	bic.w	r3, r3, #8
 8012916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	68db      	ldr	r3, [r3, #12]
 801291c:	697a      	ldr	r2, [r7, #20]
 801291e:	4313      	orrs	r3, r2
 8012920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	f023 0304 	bic.w	r3, r3, #4
 8012928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	4a1c      	ldr	r2, [pc, #112]	; (80129a0 <TIM_OC1_SetConfig+0x10c>)
 801292e:	4293      	cmp	r3, r2
 8012930:	d00f      	beq.n	8012952 <TIM_OC1_SetConfig+0xbe>
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	4a1b      	ldr	r2, [pc, #108]	; (80129a4 <TIM_OC1_SetConfig+0x110>)
 8012936:	4293      	cmp	r3, r2
 8012938:	d00b      	beq.n	8012952 <TIM_OC1_SetConfig+0xbe>
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	4a1a      	ldr	r2, [pc, #104]	; (80129a8 <TIM_OC1_SetConfig+0x114>)
 801293e:	4293      	cmp	r3, r2
 8012940:	d007      	beq.n	8012952 <TIM_OC1_SetConfig+0xbe>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	4a19      	ldr	r2, [pc, #100]	; (80129ac <TIM_OC1_SetConfig+0x118>)
 8012946:	4293      	cmp	r3, r2
 8012948:	d003      	beq.n	8012952 <TIM_OC1_SetConfig+0xbe>
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	4a18      	ldr	r2, [pc, #96]	; (80129b0 <TIM_OC1_SetConfig+0x11c>)
 801294e:	4293      	cmp	r3, r2
 8012950:	d111      	bne.n	8012976 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801295a:	693b      	ldr	r3, [r7, #16]
 801295c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	695b      	ldr	r3, [r3, #20]
 8012966:	693a      	ldr	r2, [r7, #16]
 8012968:	4313      	orrs	r3, r2
 801296a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	699b      	ldr	r3, [r3, #24]
 8012970:	693a      	ldr	r2, [r7, #16]
 8012972:	4313      	orrs	r3, r2
 8012974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	693a      	ldr	r2, [r7, #16]
 801297a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	68fa      	ldr	r2, [r7, #12]
 8012980:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	685a      	ldr	r2, [r3, #4]
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	697a      	ldr	r2, [r7, #20]
 801298e:	621a      	str	r2, [r3, #32]
}
 8012990:	bf00      	nop
 8012992:	371c      	adds	r7, #28
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr
 801299c:	fffeff8f 	.word	0xfffeff8f
 80129a0:	40010000 	.word	0x40010000
 80129a4:	40010400 	.word	0x40010400
 80129a8:	40014000 	.word	0x40014000
 80129ac:	40014400 	.word	0x40014400
 80129b0:	40014800 	.word	0x40014800

080129b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80129b4:	b480      	push	{r7}
 80129b6:	b087      	sub	sp, #28
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	6a1b      	ldr	r3, [r3, #32]
 80129c2:	f023 0210 	bic.w	r2, r3, #16
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6a1b      	ldr	r3, [r3, #32]
 80129ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	699b      	ldr	r3, [r3, #24]
 80129da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80129dc:	68fa      	ldr	r2, [r7, #12]
 80129de:	4b34      	ldr	r3, [pc, #208]	; (8012ab0 <TIM_OC2_SetConfig+0xfc>)
 80129e0:	4013      	ands	r3, r2
 80129e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80129ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	021b      	lsls	r3, r3, #8
 80129f2:	68fa      	ldr	r2, [r7, #12]
 80129f4:	4313      	orrs	r3, r2
 80129f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	f023 0320 	bic.w	r3, r3, #32
 80129fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	689b      	ldr	r3, [r3, #8]
 8012a04:	011b      	lsls	r3, r3, #4
 8012a06:	697a      	ldr	r2, [r7, #20]
 8012a08:	4313      	orrs	r3, r2
 8012a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	4a29      	ldr	r2, [pc, #164]	; (8012ab4 <TIM_OC2_SetConfig+0x100>)
 8012a10:	4293      	cmp	r3, r2
 8012a12:	d003      	beq.n	8012a1c <TIM_OC2_SetConfig+0x68>
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	4a28      	ldr	r2, [pc, #160]	; (8012ab8 <TIM_OC2_SetConfig+0x104>)
 8012a18:	4293      	cmp	r3, r2
 8012a1a:	d10d      	bne.n	8012a38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	011b      	lsls	r3, r3, #4
 8012a2a:	697a      	ldr	r2, [r7, #20]
 8012a2c:	4313      	orrs	r3, r2
 8012a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012a36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	4a1e      	ldr	r2, [pc, #120]	; (8012ab4 <TIM_OC2_SetConfig+0x100>)
 8012a3c:	4293      	cmp	r3, r2
 8012a3e:	d00f      	beq.n	8012a60 <TIM_OC2_SetConfig+0xac>
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	4a1d      	ldr	r2, [pc, #116]	; (8012ab8 <TIM_OC2_SetConfig+0x104>)
 8012a44:	4293      	cmp	r3, r2
 8012a46:	d00b      	beq.n	8012a60 <TIM_OC2_SetConfig+0xac>
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	4a1c      	ldr	r2, [pc, #112]	; (8012abc <TIM_OC2_SetConfig+0x108>)
 8012a4c:	4293      	cmp	r3, r2
 8012a4e:	d007      	beq.n	8012a60 <TIM_OC2_SetConfig+0xac>
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	4a1b      	ldr	r2, [pc, #108]	; (8012ac0 <TIM_OC2_SetConfig+0x10c>)
 8012a54:	4293      	cmp	r3, r2
 8012a56:	d003      	beq.n	8012a60 <TIM_OC2_SetConfig+0xac>
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	4a1a      	ldr	r2, [pc, #104]	; (8012ac4 <TIM_OC2_SetConfig+0x110>)
 8012a5c:	4293      	cmp	r3, r2
 8012a5e:	d113      	bne.n	8012a88 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012a66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012a68:	693b      	ldr	r3, [r7, #16]
 8012a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	695b      	ldr	r3, [r3, #20]
 8012a74:	009b      	lsls	r3, r3, #2
 8012a76:	693a      	ldr	r2, [r7, #16]
 8012a78:	4313      	orrs	r3, r2
 8012a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	699b      	ldr	r3, [r3, #24]
 8012a80:	009b      	lsls	r3, r3, #2
 8012a82:	693a      	ldr	r2, [r7, #16]
 8012a84:	4313      	orrs	r3, r2
 8012a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	693a      	ldr	r2, [r7, #16]
 8012a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	68fa      	ldr	r2, [r7, #12]
 8012a92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	685a      	ldr	r2, [r3, #4]
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	697a      	ldr	r2, [r7, #20]
 8012aa0:	621a      	str	r2, [r3, #32]
}
 8012aa2:	bf00      	nop
 8012aa4:	371c      	adds	r7, #28
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr
 8012aae:	bf00      	nop
 8012ab0:	feff8fff 	.word	0xfeff8fff
 8012ab4:	40010000 	.word	0x40010000
 8012ab8:	40010400 	.word	0x40010400
 8012abc:	40014000 	.word	0x40014000
 8012ac0:	40014400 	.word	0x40014400
 8012ac4:	40014800 	.word	0x40014800

08012ac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b087      	sub	sp, #28
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	6a1b      	ldr	r3, [r3, #32]
 8012ad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	6a1b      	ldr	r3, [r3, #32]
 8012ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	685b      	ldr	r3, [r3, #4]
 8012ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	69db      	ldr	r3, [r3, #28]
 8012aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012af0:	68fa      	ldr	r2, [r7, #12]
 8012af2:	4b33      	ldr	r3, [pc, #204]	; (8012bc0 <TIM_OC3_SetConfig+0xf8>)
 8012af4:	4013      	ands	r3, r2
 8012af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	f023 0303 	bic.w	r3, r3, #3
 8012afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	68fa      	ldr	r2, [r7, #12]
 8012b06:	4313      	orrs	r3, r2
 8012b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	689b      	ldr	r3, [r3, #8]
 8012b16:	021b      	lsls	r3, r3, #8
 8012b18:	697a      	ldr	r2, [r7, #20]
 8012b1a:	4313      	orrs	r3, r2
 8012b1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	4a28      	ldr	r2, [pc, #160]	; (8012bc4 <TIM_OC3_SetConfig+0xfc>)
 8012b22:	4293      	cmp	r3, r2
 8012b24:	d003      	beq.n	8012b2e <TIM_OC3_SetConfig+0x66>
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	4a27      	ldr	r2, [pc, #156]	; (8012bc8 <TIM_OC3_SetConfig+0x100>)
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d10d      	bne.n	8012b4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012b34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	68db      	ldr	r3, [r3, #12]
 8012b3a:	021b      	lsls	r3, r3, #8
 8012b3c:	697a      	ldr	r2, [r7, #20]
 8012b3e:	4313      	orrs	r3, r2
 8012b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	4a1d      	ldr	r2, [pc, #116]	; (8012bc4 <TIM_OC3_SetConfig+0xfc>)
 8012b4e:	4293      	cmp	r3, r2
 8012b50:	d00f      	beq.n	8012b72 <TIM_OC3_SetConfig+0xaa>
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	4a1c      	ldr	r2, [pc, #112]	; (8012bc8 <TIM_OC3_SetConfig+0x100>)
 8012b56:	4293      	cmp	r3, r2
 8012b58:	d00b      	beq.n	8012b72 <TIM_OC3_SetConfig+0xaa>
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	4a1b      	ldr	r2, [pc, #108]	; (8012bcc <TIM_OC3_SetConfig+0x104>)
 8012b5e:	4293      	cmp	r3, r2
 8012b60:	d007      	beq.n	8012b72 <TIM_OC3_SetConfig+0xaa>
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	4a1a      	ldr	r2, [pc, #104]	; (8012bd0 <TIM_OC3_SetConfig+0x108>)
 8012b66:	4293      	cmp	r3, r2
 8012b68:	d003      	beq.n	8012b72 <TIM_OC3_SetConfig+0xaa>
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	4a19      	ldr	r2, [pc, #100]	; (8012bd4 <TIM_OC3_SetConfig+0x10c>)
 8012b6e:	4293      	cmp	r3, r2
 8012b70:	d113      	bne.n	8012b9a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	695b      	ldr	r3, [r3, #20]
 8012b86:	011b      	lsls	r3, r3, #4
 8012b88:	693a      	ldr	r2, [r7, #16]
 8012b8a:	4313      	orrs	r3, r2
 8012b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	699b      	ldr	r3, [r3, #24]
 8012b92:	011b      	lsls	r3, r3, #4
 8012b94:	693a      	ldr	r2, [r7, #16]
 8012b96:	4313      	orrs	r3, r2
 8012b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	693a      	ldr	r2, [r7, #16]
 8012b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	68fa      	ldr	r2, [r7, #12]
 8012ba4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	685a      	ldr	r2, [r3, #4]
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	697a      	ldr	r2, [r7, #20]
 8012bb2:	621a      	str	r2, [r3, #32]
}
 8012bb4:	bf00      	nop
 8012bb6:	371c      	adds	r7, #28
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr
 8012bc0:	fffeff8f 	.word	0xfffeff8f
 8012bc4:	40010000 	.word	0x40010000
 8012bc8:	40010400 	.word	0x40010400
 8012bcc:	40014000 	.word	0x40014000
 8012bd0:	40014400 	.word	0x40014400
 8012bd4:	40014800 	.word	0x40014800

08012bd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012bd8:	b480      	push	{r7}
 8012bda:	b087      	sub	sp, #28
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
 8012be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6a1b      	ldr	r3, [r3, #32]
 8012be6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	6a1b      	ldr	r3, [r3, #32]
 8012bf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	685b      	ldr	r3, [r3, #4]
 8012bf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	69db      	ldr	r3, [r3, #28]
 8012bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012c00:	68fa      	ldr	r2, [r7, #12]
 8012c02:	4b24      	ldr	r3, [pc, #144]	; (8012c94 <TIM_OC4_SetConfig+0xbc>)
 8012c04:	4013      	ands	r3, r2
 8012c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	021b      	lsls	r3, r3, #8
 8012c16:	68fa      	ldr	r2, [r7, #12]
 8012c18:	4313      	orrs	r3, r2
 8012c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012c1c:	693b      	ldr	r3, [r7, #16]
 8012c1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	689b      	ldr	r3, [r3, #8]
 8012c28:	031b      	lsls	r3, r3, #12
 8012c2a:	693a      	ldr	r2, [r7, #16]
 8012c2c:	4313      	orrs	r3, r2
 8012c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	4a19      	ldr	r2, [pc, #100]	; (8012c98 <TIM_OC4_SetConfig+0xc0>)
 8012c34:	4293      	cmp	r3, r2
 8012c36:	d00f      	beq.n	8012c58 <TIM_OC4_SetConfig+0x80>
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	4a18      	ldr	r2, [pc, #96]	; (8012c9c <TIM_OC4_SetConfig+0xc4>)
 8012c3c:	4293      	cmp	r3, r2
 8012c3e:	d00b      	beq.n	8012c58 <TIM_OC4_SetConfig+0x80>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	4a17      	ldr	r2, [pc, #92]	; (8012ca0 <TIM_OC4_SetConfig+0xc8>)
 8012c44:	4293      	cmp	r3, r2
 8012c46:	d007      	beq.n	8012c58 <TIM_OC4_SetConfig+0x80>
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	4a16      	ldr	r2, [pc, #88]	; (8012ca4 <TIM_OC4_SetConfig+0xcc>)
 8012c4c:	4293      	cmp	r3, r2
 8012c4e:	d003      	beq.n	8012c58 <TIM_OC4_SetConfig+0x80>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	4a15      	ldr	r2, [pc, #84]	; (8012ca8 <TIM_OC4_SetConfig+0xd0>)
 8012c54:	4293      	cmp	r3, r2
 8012c56:	d109      	bne.n	8012c6c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012c5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	695b      	ldr	r3, [r3, #20]
 8012c64:	019b      	lsls	r3, r3, #6
 8012c66:	697a      	ldr	r2, [r7, #20]
 8012c68:	4313      	orrs	r3, r2
 8012c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	697a      	ldr	r2, [r7, #20]
 8012c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	68fa      	ldr	r2, [r7, #12]
 8012c76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	685a      	ldr	r2, [r3, #4]
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	693a      	ldr	r2, [r7, #16]
 8012c84:	621a      	str	r2, [r3, #32]
}
 8012c86:	bf00      	nop
 8012c88:	371c      	adds	r7, #28
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c90:	4770      	bx	lr
 8012c92:	bf00      	nop
 8012c94:	feff8fff 	.word	0xfeff8fff
 8012c98:	40010000 	.word	0x40010000
 8012c9c:	40010400 	.word	0x40010400
 8012ca0:	40014000 	.word	0x40014000
 8012ca4:	40014400 	.word	0x40014400
 8012ca8:	40014800 	.word	0x40014800

08012cac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8012cac:	b480      	push	{r7}
 8012cae:	b087      	sub	sp, #28
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
 8012cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6a1b      	ldr	r3, [r3, #32]
 8012cba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	6a1b      	ldr	r3, [r3, #32]
 8012cc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	685b      	ldr	r3, [r3, #4]
 8012ccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012cd4:	68fa      	ldr	r2, [r7, #12]
 8012cd6:	4b21      	ldr	r3, [pc, #132]	; (8012d5c <TIM_OC5_SetConfig+0xb0>)
 8012cd8:	4013      	ands	r3, r2
 8012cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	68fa      	ldr	r2, [r7, #12]
 8012ce2:	4313      	orrs	r3, r2
 8012ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012ce6:	693b      	ldr	r3, [r7, #16]
 8012ce8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8012cec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	689b      	ldr	r3, [r3, #8]
 8012cf2:	041b      	lsls	r3, r3, #16
 8012cf4:	693a      	ldr	r2, [r7, #16]
 8012cf6:	4313      	orrs	r3, r2
 8012cf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	4a18      	ldr	r2, [pc, #96]	; (8012d60 <TIM_OC5_SetConfig+0xb4>)
 8012cfe:	4293      	cmp	r3, r2
 8012d00:	d00f      	beq.n	8012d22 <TIM_OC5_SetConfig+0x76>
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	4a17      	ldr	r2, [pc, #92]	; (8012d64 <TIM_OC5_SetConfig+0xb8>)
 8012d06:	4293      	cmp	r3, r2
 8012d08:	d00b      	beq.n	8012d22 <TIM_OC5_SetConfig+0x76>
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	4a16      	ldr	r2, [pc, #88]	; (8012d68 <TIM_OC5_SetConfig+0xbc>)
 8012d0e:	4293      	cmp	r3, r2
 8012d10:	d007      	beq.n	8012d22 <TIM_OC5_SetConfig+0x76>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	4a15      	ldr	r2, [pc, #84]	; (8012d6c <TIM_OC5_SetConfig+0xc0>)
 8012d16:	4293      	cmp	r3, r2
 8012d18:	d003      	beq.n	8012d22 <TIM_OC5_SetConfig+0x76>
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	4a14      	ldr	r2, [pc, #80]	; (8012d70 <TIM_OC5_SetConfig+0xc4>)
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	d109      	bne.n	8012d36 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012d28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012d2a:	683b      	ldr	r3, [r7, #0]
 8012d2c:	695b      	ldr	r3, [r3, #20]
 8012d2e:	021b      	lsls	r3, r3, #8
 8012d30:	697a      	ldr	r2, [r7, #20]
 8012d32:	4313      	orrs	r3, r2
 8012d34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	697a      	ldr	r2, [r7, #20]
 8012d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	68fa      	ldr	r2, [r7, #12]
 8012d40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	685a      	ldr	r2, [r3, #4]
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	693a      	ldr	r2, [r7, #16]
 8012d4e:	621a      	str	r2, [r3, #32]
}
 8012d50:	bf00      	nop
 8012d52:	371c      	adds	r7, #28
 8012d54:	46bd      	mov	sp, r7
 8012d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5a:	4770      	bx	lr
 8012d5c:	fffeff8f 	.word	0xfffeff8f
 8012d60:	40010000 	.word	0x40010000
 8012d64:	40010400 	.word	0x40010400
 8012d68:	40014000 	.word	0x40014000
 8012d6c:	40014400 	.word	0x40014400
 8012d70:	40014800 	.word	0x40014800

08012d74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8012d74:	b480      	push	{r7}
 8012d76:	b087      	sub	sp, #28
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
 8012d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	6a1b      	ldr	r3, [r3, #32]
 8012d82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	6a1b      	ldr	r3, [r3, #32]
 8012d8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	685b      	ldr	r3, [r3, #4]
 8012d94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012d9c:	68fa      	ldr	r2, [r7, #12]
 8012d9e:	4b22      	ldr	r3, [pc, #136]	; (8012e28 <TIM_OC6_SetConfig+0xb4>)
 8012da0:	4013      	ands	r3, r2
 8012da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	021b      	lsls	r3, r3, #8
 8012daa:	68fa      	ldr	r2, [r7, #12]
 8012dac:	4313      	orrs	r3, r2
 8012dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012db0:	693b      	ldr	r3, [r7, #16]
 8012db2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	689b      	ldr	r3, [r3, #8]
 8012dbc:	051b      	lsls	r3, r3, #20
 8012dbe:	693a      	ldr	r2, [r7, #16]
 8012dc0:	4313      	orrs	r3, r2
 8012dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	4a19      	ldr	r2, [pc, #100]	; (8012e2c <TIM_OC6_SetConfig+0xb8>)
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	d00f      	beq.n	8012dec <TIM_OC6_SetConfig+0x78>
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	4a18      	ldr	r2, [pc, #96]	; (8012e30 <TIM_OC6_SetConfig+0xbc>)
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	d00b      	beq.n	8012dec <TIM_OC6_SetConfig+0x78>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	4a17      	ldr	r2, [pc, #92]	; (8012e34 <TIM_OC6_SetConfig+0xc0>)
 8012dd8:	4293      	cmp	r3, r2
 8012dda:	d007      	beq.n	8012dec <TIM_OC6_SetConfig+0x78>
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	4a16      	ldr	r2, [pc, #88]	; (8012e38 <TIM_OC6_SetConfig+0xc4>)
 8012de0:	4293      	cmp	r3, r2
 8012de2:	d003      	beq.n	8012dec <TIM_OC6_SetConfig+0x78>
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	4a15      	ldr	r2, [pc, #84]	; (8012e3c <TIM_OC6_SetConfig+0xc8>)
 8012de8:	4293      	cmp	r3, r2
 8012dea:	d109      	bne.n	8012e00 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012dec:	697b      	ldr	r3, [r7, #20]
 8012dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012df2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	695b      	ldr	r3, [r3, #20]
 8012df8:	029b      	lsls	r3, r3, #10
 8012dfa:	697a      	ldr	r2, [r7, #20]
 8012dfc:	4313      	orrs	r3, r2
 8012dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	697a      	ldr	r2, [r7, #20]
 8012e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	68fa      	ldr	r2, [r7, #12]
 8012e0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	685a      	ldr	r2, [r3, #4]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	693a      	ldr	r2, [r7, #16]
 8012e18:	621a      	str	r2, [r3, #32]
}
 8012e1a:	bf00      	nop
 8012e1c:	371c      	adds	r7, #28
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e24:	4770      	bx	lr
 8012e26:	bf00      	nop
 8012e28:	feff8fff 	.word	0xfeff8fff
 8012e2c:	40010000 	.word	0x40010000
 8012e30:	40010400 	.word	0x40010400
 8012e34:	40014000 	.word	0x40014000
 8012e38:	40014400 	.word	0x40014400
 8012e3c:	40014800 	.word	0x40014800

08012e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012e40:	b480      	push	{r7}
 8012e42:	b087      	sub	sp, #28
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	60f8      	str	r0, [r7, #12]
 8012e48:	60b9      	str	r1, [r7, #8]
 8012e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	6a1b      	ldr	r3, [r3, #32]
 8012e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	6a1b      	ldr	r3, [r3, #32]
 8012e56:	f023 0201 	bic.w	r2, r3, #1
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	699b      	ldr	r3, [r3, #24]
 8012e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	011b      	lsls	r3, r3, #4
 8012e70:	693a      	ldr	r2, [r7, #16]
 8012e72:	4313      	orrs	r3, r2
 8012e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	f023 030a 	bic.w	r3, r3, #10
 8012e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012e7e:	697a      	ldr	r2, [r7, #20]
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	4313      	orrs	r3, r2
 8012e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	693a      	ldr	r2, [r7, #16]
 8012e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	697a      	ldr	r2, [r7, #20]
 8012e90:	621a      	str	r2, [r3, #32]
}
 8012e92:	bf00      	nop
 8012e94:	371c      	adds	r7, #28
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr

08012e9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012e9e:	b480      	push	{r7}
 8012ea0:	b087      	sub	sp, #28
 8012ea2:	af00      	add	r7, sp, #0
 8012ea4:	60f8      	str	r0, [r7, #12]
 8012ea6:	60b9      	str	r1, [r7, #8]
 8012ea8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	6a1b      	ldr	r3, [r3, #32]
 8012eae:	f023 0210 	bic.w	r2, r3, #16
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	699b      	ldr	r3, [r3, #24]
 8012eba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	6a1b      	ldr	r3, [r3, #32]
 8012ec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012ec2:	697b      	ldr	r3, [r7, #20]
 8012ec4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012ec8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	031b      	lsls	r3, r3, #12
 8012ece:	697a      	ldr	r2, [r7, #20]
 8012ed0:	4313      	orrs	r3, r2
 8012ed2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012eda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	011b      	lsls	r3, r3, #4
 8012ee0:	693a      	ldr	r2, [r7, #16]
 8012ee2:	4313      	orrs	r3, r2
 8012ee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	697a      	ldr	r2, [r7, #20]
 8012eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	693a      	ldr	r2, [r7, #16]
 8012ef0:	621a      	str	r2, [r3, #32]
}
 8012ef2:	bf00      	nop
 8012ef4:	371c      	adds	r7, #28
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efc:	4770      	bx	lr
	...

08012f00 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012f00:	b480      	push	{r7}
 8012f02:	b085      	sub	sp, #20
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
 8012f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	689b      	ldr	r3, [r3, #8]
 8012f0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012f10:	68fa      	ldr	r2, [r7, #12]
 8012f12:	4b09      	ldr	r3, [pc, #36]	; (8012f38 <TIM_ITRx_SetConfig+0x38>)
 8012f14:	4013      	ands	r3, r2
 8012f16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012f18:	683a      	ldr	r2, [r7, #0]
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	4313      	orrs	r3, r2
 8012f1e:	f043 0307 	orr.w	r3, r3, #7
 8012f22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	68fa      	ldr	r2, [r7, #12]
 8012f28:	609a      	str	r2, [r3, #8]
}
 8012f2a:	bf00      	nop
 8012f2c:	3714      	adds	r7, #20
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f34:	4770      	bx	lr
 8012f36:	bf00      	nop
 8012f38:	ffcfff8f 	.word	0xffcfff8f

08012f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012f3c:	b480      	push	{r7}
 8012f3e:	b087      	sub	sp, #28
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	60f8      	str	r0, [r7, #12]
 8012f44:	60b9      	str	r1, [r7, #8]
 8012f46:	607a      	str	r2, [r7, #4]
 8012f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	689b      	ldr	r3, [r3, #8]
 8012f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	021a      	lsls	r2, r3, #8
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	431a      	orrs	r2, r3
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	4313      	orrs	r3, r2
 8012f64:	697a      	ldr	r2, [r7, #20]
 8012f66:	4313      	orrs	r3, r2
 8012f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	697a      	ldr	r2, [r7, #20]
 8012f6e:	609a      	str	r2, [r3, #8]
}
 8012f70:	bf00      	nop
 8012f72:	371c      	adds	r7, #28
 8012f74:	46bd      	mov	sp, r7
 8012f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7a:	4770      	bx	lr

08012f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b087      	sub	sp, #28
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60f8      	str	r0, [r7, #12]
 8012f84:	60b9      	str	r1, [r7, #8]
 8012f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	f003 031f 	and.w	r3, r3, #31
 8012f8e:	2201      	movs	r2, #1
 8012f90:	fa02 f303 	lsl.w	r3, r2, r3
 8012f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	6a1a      	ldr	r2, [r3, #32]
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	43db      	mvns	r3, r3
 8012f9e:	401a      	ands	r2, r3
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	6a1a      	ldr	r2, [r3, #32]
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	f003 031f 	and.w	r3, r3, #31
 8012fae:	6879      	ldr	r1, [r7, #4]
 8012fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8012fb4:	431a      	orrs	r2, r3
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	621a      	str	r2, [r3, #32]
}
 8012fba:	bf00      	nop
 8012fbc:	371c      	adds	r7, #28
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc4:	4770      	bx	lr
	...

08012fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012fc8:	b480      	push	{r7}
 8012fca:	b085      	sub	sp, #20
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
 8012fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012fd8:	2b01      	cmp	r3, #1
 8012fda:	d101      	bne.n	8012fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012fdc:	2302      	movs	r3, #2
 8012fde:	e077      	b.n	80130d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2201      	movs	r2, #1
 8012fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	2202      	movs	r2, #2
 8012fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	689b      	ldr	r3, [r3, #8]
 8012ffe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	4a35      	ldr	r2, [pc, #212]	; (80130dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013006:	4293      	cmp	r3, r2
 8013008:	d004      	beq.n	8013014 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	4a34      	ldr	r2, [pc, #208]	; (80130e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013010:	4293      	cmp	r3, r2
 8013012:	d108      	bne.n	8013026 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801301a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	68fa      	ldr	r2, [r7, #12]
 8013022:	4313      	orrs	r3, r2
 8013024:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801302c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	68fa      	ldr	r2, [r7, #12]
 8013034:	4313      	orrs	r3, r2
 8013036:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	68fa      	ldr	r2, [r7, #12]
 801303e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	4a25      	ldr	r2, [pc, #148]	; (80130dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013046:	4293      	cmp	r3, r2
 8013048:	d02c      	beq.n	80130a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013052:	d027      	beq.n	80130a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	4a22      	ldr	r2, [pc, #136]	; (80130e4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801305a:	4293      	cmp	r3, r2
 801305c:	d022      	beq.n	80130a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	4a21      	ldr	r2, [pc, #132]	; (80130e8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8013064:	4293      	cmp	r3, r2
 8013066:	d01d      	beq.n	80130a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	4a1f      	ldr	r2, [pc, #124]	; (80130ec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801306e:	4293      	cmp	r3, r2
 8013070:	d018      	beq.n	80130a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	4a1a      	ldr	r2, [pc, #104]	; (80130e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013078:	4293      	cmp	r3, r2
 801307a:	d013      	beq.n	80130a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	4a1b      	ldr	r2, [pc, #108]	; (80130f0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8013082:	4293      	cmp	r3, r2
 8013084:	d00e      	beq.n	80130a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	4a1a      	ldr	r2, [pc, #104]	; (80130f4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 801308c:	4293      	cmp	r3, r2
 801308e:	d009      	beq.n	80130a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	4a18      	ldr	r2, [pc, #96]	; (80130f8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8013096:	4293      	cmp	r3, r2
 8013098:	d004      	beq.n	80130a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	4a17      	ldr	r2, [pc, #92]	; (80130fc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80130a0:	4293      	cmp	r3, r2
 80130a2:	d10c      	bne.n	80130be <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80130aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	689b      	ldr	r3, [r3, #8]
 80130b0:	68ba      	ldr	r2, [r7, #8]
 80130b2:	4313      	orrs	r3, r2
 80130b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	68ba      	ldr	r2, [r7, #8]
 80130bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2201      	movs	r2, #1
 80130c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2200      	movs	r2, #0
 80130ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80130ce:	2300      	movs	r3, #0
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3714      	adds	r7, #20
 80130d4:	46bd      	mov	sp, r7
 80130d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130da:	4770      	bx	lr
 80130dc:	40010000 	.word	0x40010000
 80130e0:	40010400 	.word	0x40010400
 80130e4:	40000400 	.word	0x40000400
 80130e8:	40000800 	.word	0x40000800
 80130ec:	40000c00 	.word	0x40000c00
 80130f0:	40001800 	.word	0x40001800
 80130f4:	40014000 	.word	0x40014000
 80130f8:	4000e000 	.word	0x4000e000
 80130fc:	4000e400 	.word	0x4000e400

08013100 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013100:	b480      	push	{r7}
 8013102:	b085      	sub	sp, #20
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801310a:	2300      	movs	r3, #0
 801310c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013114:	2b01      	cmp	r3, #1
 8013116:	d101      	bne.n	801311c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013118:	2302      	movs	r3, #2
 801311a:	e087      	b.n	801322c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	2201      	movs	r2, #1
 8013120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	68db      	ldr	r3, [r3, #12]
 801312e:	4313      	orrs	r3, r2
 8013130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	689b      	ldr	r3, [r3, #8]
 801313c:	4313      	orrs	r3, r2
 801313e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	685b      	ldr	r3, [r3, #4]
 801314a:	4313      	orrs	r3, r2
 801314c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	4313      	orrs	r3, r2
 801315a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	691b      	ldr	r3, [r3, #16]
 8013166:	4313      	orrs	r3, r2
 8013168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	695b      	ldr	r3, [r3, #20]
 8013174:	4313      	orrs	r3, r2
 8013176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013182:	4313      	orrs	r3, r2
 8013184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	699b      	ldr	r3, [r3, #24]
 8013190:	041b      	lsls	r3, r3, #16
 8013192:	4313      	orrs	r3, r2
 8013194:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	4a27      	ldr	r2, [pc, #156]	; (8013238 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801319c:	4293      	cmp	r3, r2
 801319e:	d004      	beq.n	80131aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	4a25      	ldr	r2, [pc, #148]	; (801323c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80131a6:	4293      	cmp	r3, r2
 80131a8:	d106      	bne.n	80131b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	69db      	ldr	r3, [r3, #28]
 80131b4:	4313      	orrs	r3, r2
 80131b6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	4a1e      	ldr	r2, [pc, #120]	; (8013238 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80131be:	4293      	cmp	r3, r2
 80131c0:	d004      	beq.n	80131cc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	4a1d      	ldr	r2, [pc, #116]	; (801323c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80131c8:	4293      	cmp	r3, r2
 80131ca:	d126      	bne.n	801321a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131d6:	051b      	lsls	r3, r3, #20
 80131d8:	4313      	orrs	r3, r2
 80131da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	6a1b      	ldr	r3, [r3, #32]
 80131e6:	4313      	orrs	r3, r2
 80131e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131f4:	4313      	orrs	r3, r2
 80131f6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	4a0e      	ldr	r2, [pc, #56]	; (8013238 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80131fe:	4293      	cmp	r3, r2
 8013200:	d004      	beq.n	801320c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	4a0d      	ldr	r2, [pc, #52]	; (801323c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8013208:	4293      	cmp	r3, r2
 801320a:	d106      	bne.n	801321a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013216:	4313      	orrs	r3, r2
 8013218:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	68fa      	ldr	r2, [r7, #12]
 8013220:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	2200      	movs	r2, #0
 8013226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801322a:	2300      	movs	r3, #0
}
 801322c:	4618      	mov	r0, r3
 801322e:	3714      	adds	r7, #20
 8013230:	46bd      	mov	sp, r7
 8013232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013236:	4770      	bx	lr
 8013238:	40010000 	.word	0x40010000
 801323c:	40010400 	.word	0x40010400

08013240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013240:	b480      	push	{r7}
 8013242:	b083      	sub	sp, #12
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013248:	bf00      	nop
 801324a:	370c      	adds	r7, #12
 801324c:	46bd      	mov	sp, r7
 801324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013252:	4770      	bx	lr

08013254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013254:	b480      	push	{r7}
 8013256:	b083      	sub	sp, #12
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801325c:	bf00      	nop
 801325e:	370c      	adds	r7, #12
 8013260:	46bd      	mov	sp, r7
 8013262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013266:	4770      	bx	lr

08013268 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013268:	b480      	push	{r7}
 801326a:	b083      	sub	sp, #12
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013270:	bf00      	nop
 8013272:	370c      	adds	r7, #12
 8013274:	46bd      	mov	sp, r7
 8013276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327a:	4770      	bx	lr

0801327c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d101      	bne.n	801328e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801328a:	2301      	movs	r3, #1
 801328c:	e042      	b.n	8013314 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013294:	2b00      	cmp	r3, #0
 8013296:	d106      	bne.n	80132a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2200      	movs	r2, #0
 801329c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80132a0:	6878      	ldr	r0, [r7, #4]
 80132a2:	f7f3 fc91 	bl	8006bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	2224      	movs	r2, #36	; 0x24
 80132aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	681a      	ldr	r2, [r3, #0]
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	f022 0201 	bic.w	r2, r2, #1
 80132bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f000 fce8 	bl	8013c94 <UART_SetConfig>
 80132c4:	4603      	mov	r3, r0
 80132c6:	2b01      	cmp	r3, #1
 80132c8:	d101      	bne.n	80132ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80132ca:	2301      	movs	r3, #1
 80132cc:	e022      	b.n	8013314 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d002      	beq.n	80132dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f001 fb48 	bl	801496c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	685a      	ldr	r2, [r3, #4]
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80132ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	689a      	ldr	r2, [r3, #8]
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80132fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	681a      	ldr	r2, [r3, #0]
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	f042 0201 	orr.w	r2, r2, #1
 801330a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f001 fbcf 	bl	8014ab0 <UART_CheckIdleState>
 8013312:	4603      	mov	r3, r0
}
 8013314:	4618      	mov	r0, r3
 8013316:	3708      	adds	r7, #8
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}

0801331c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801331c:	b480      	push	{r7}
 801331e:	b091      	sub	sp, #68	; 0x44
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	4613      	mov	r3, r2
 8013328:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013330:	2b20      	cmp	r3, #32
 8013332:	f040 808c 	bne.w	801344e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d002      	beq.n	8013342 <HAL_UART_Transmit_IT+0x26>
 801333c:	88fb      	ldrh	r3, [r7, #6]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d101      	bne.n	8013346 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8013342:	2301      	movs	r3, #1
 8013344:	e084      	b.n	8013450 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801334c:	2b01      	cmp	r3, #1
 801334e:	d101      	bne.n	8013354 <HAL_UART_Transmit_IT+0x38>
 8013350:	2302      	movs	r3, #2
 8013352:	e07d      	b.n	8013450 <HAL_UART_Transmit_IT+0x134>
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	2201      	movs	r2, #1
 8013358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	68ba      	ldr	r2, [r7, #8]
 8013360:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	88fa      	ldrh	r2, [r7, #6]
 8013366:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	88fa      	ldrh	r2, [r7, #6]
 801336e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	2200      	movs	r2, #0
 8013376:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	2200      	movs	r2, #0
 801337c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	2221      	movs	r2, #33	; 0x21
 8013384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801338c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013390:	d12e      	bne.n	80133f0 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	689b      	ldr	r3, [r3, #8]
 8013396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801339a:	d107      	bne.n	80133ac <HAL_UART_Transmit_IT+0x90>
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	691b      	ldr	r3, [r3, #16]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d103      	bne.n	80133ac <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	4a2d      	ldr	r2, [pc, #180]	; (801345c <HAL_UART_Transmit_IT+0x140>)
 80133a8:	675a      	str	r2, [r3, #116]	; 0x74
 80133aa:	e002      	b.n	80133b2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	4a2c      	ldr	r2, [pc, #176]	; (8013460 <HAL_UART_Transmit_IT+0x144>)
 80133b0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	2200      	movs	r2, #0
 80133b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	3308      	adds	r3, #8
 80133c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c4:	e853 3f00 	ldrex	r3, [r3]
 80133c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80133ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80133d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	3308      	adds	r3, #8
 80133d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80133da:	637a      	str	r2, [r7, #52]	; 0x34
 80133dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80133e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133e2:	e841 2300 	strex	r3, r2, [r1]
 80133e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80133e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d1e5      	bne.n	80133ba <HAL_UART_Transmit_IT+0x9e>
 80133ee:	e02c      	b.n	801344a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	689b      	ldr	r3, [r3, #8]
 80133f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80133f8:	d107      	bne.n	801340a <HAL_UART_Transmit_IT+0xee>
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	691b      	ldr	r3, [r3, #16]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d103      	bne.n	801340a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	4a17      	ldr	r2, [pc, #92]	; (8013464 <HAL_UART_Transmit_IT+0x148>)
 8013406:	675a      	str	r2, [r3, #116]	; 0x74
 8013408:	e002      	b.n	8013410 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	4a16      	ldr	r2, [pc, #88]	; (8013468 <HAL_UART_Transmit_IT+0x14c>)
 801340e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	2200      	movs	r2, #0
 8013414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	e853 3f00 	ldrex	r3, [r3]
 8013424:	613b      	str	r3, [r7, #16]
   return(result);
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801342c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	461a      	mov	r2, r3
 8013434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013436:	623b      	str	r3, [r7, #32]
 8013438:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801343a:	69f9      	ldr	r1, [r7, #28]
 801343c:	6a3a      	ldr	r2, [r7, #32]
 801343e:	e841 2300 	strex	r3, r2, [r1]
 8013442:	61bb      	str	r3, [r7, #24]
   return(result);
 8013444:	69bb      	ldr	r3, [r7, #24]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d1e6      	bne.n	8013418 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 801344a:	2300      	movs	r3, #0
 801344c:	e000      	b.n	8013450 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 801344e:	2302      	movs	r3, #2
  }
}
 8013450:	4618      	mov	r0, r3
 8013452:	3744      	adds	r7, #68	; 0x44
 8013454:	46bd      	mov	sp, r7
 8013456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345a:	4770      	bx	lr
 801345c:	0801527f 	.word	0x0801527f
 8013460:	0801519f 	.word	0x0801519f
 8013464:	080150dd 	.word	0x080150dd
 8013468:	08015025 	.word	0x08015025

0801346c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b08a      	sub	sp, #40	; 0x28
 8013470:	af00      	add	r7, sp, #0
 8013472:	60f8      	str	r0, [r7, #12]
 8013474:	60b9      	str	r1, [r7, #8]
 8013476:	4613      	mov	r3, r2
 8013478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013480:	2b20      	cmp	r3, #32
 8013482:	d142      	bne.n	801350a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8013484:	68bb      	ldr	r3, [r7, #8]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d002      	beq.n	8013490 <HAL_UART_Receive_IT+0x24>
 801348a:	88fb      	ldrh	r3, [r7, #6]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d101      	bne.n	8013494 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8013490:	2301      	movs	r3, #1
 8013492:	e03b      	b.n	801350c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801349a:	2b01      	cmp	r3, #1
 801349c:	d101      	bne.n	80134a2 <HAL_UART_Receive_IT+0x36>
 801349e:	2302      	movs	r3, #2
 80134a0:	e034      	b.n	801350c <HAL_UART_Receive_IT+0xa0>
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	2201      	movs	r2, #1
 80134a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	2200      	movs	r2, #0
 80134ae:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	4a17      	ldr	r2, [pc, #92]	; (8013514 <HAL_UART_Receive_IT+0xa8>)
 80134b6:	4293      	cmp	r3, r2
 80134b8:	d01f      	beq.n	80134fa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	685b      	ldr	r3, [r3, #4]
 80134c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d018      	beq.n	80134fa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	e853 3f00 	ldrex	r3, [r3]
 80134d4:	613b      	str	r3, [r7, #16]
   return(result);
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80134dc:	627b      	str	r3, [r7, #36]	; 0x24
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	461a      	mov	r2, r3
 80134e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e6:	623b      	str	r3, [r7, #32]
 80134e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134ea:	69f9      	ldr	r1, [r7, #28]
 80134ec:	6a3a      	ldr	r2, [r7, #32]
 80134ee:	e841 2300 	strex	r3, r2, [r1]
 80134f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80134f4:	69bb      	ldr	r3, [r7, #24]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d1e6      	bne.n	80134c8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80134fa:	88fb      	ldrh	r3, [r7, #6]
 80134fc:	461a      	mov	r2, r3
 80134fe:	68b9      	ldr	r1, [r7, #8]
 8013500:	68f8      	ldr	r0, [r7, #12]
 8013502:	f001 fbe9 	bl	8014cd8 <UART_Start_Receive_IT>
 8013506:	4603      	mov	r3, r0
 8013508:	e000      	b.n	801350c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801350a:	2302      	movs	r3, #2
  }
}
 801350c:	4618      	mov	r0, r3
 801350e:	3728      	adds	r7, #40	; 0x28
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}
 8013514:	58000c00 	.word	0x58000c00

08013518 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b0ba      	sub	sp, #232	; 0xe8
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	69db      	ldr	r3, [r3, #28]
 8013526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	689b      	ldr	r3, [r3, #8]
 801353a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801353e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013542:	f640 030f 	movw	r3, #2063	; 0x80f
 8013546:	4013      	ands	r3, r2
 8013548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801354c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013550:	2b00      	cmp	r3, #0
 8013552:	d11b      	bne.n	801358c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013558:	f003 0320 	and.w	r3, r3, #32
 801355c:	2b00      	cmp	r3, #0
 801355e:	d015      	beq.n	801358c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013564:	f003 0320 	and.w	r3, r3, #32
 8013568:	2b00      	cmp	r3, #0
 801356a:	d105      	bne.n	8013578 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801356c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013574:	2b00      	cmp	r3, #0
 8013576:	d009      	beq.n	801358c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801357c:	2b00      	cmp	r3, #0
 801357e:	f000 835a 	beq.w	8013c36 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	4798      	blx	r3
      }
      return;
 801358a:	e354      	b.n	8013c36 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801358c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013590:	2b00      	cmp	r3, #0
 8013592:	f000 811f 	beq.w	80137d4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8013596:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801359a:	4b8b      	ldr	r3, [pc, #556]	; (80137c8 <HAL_UART_IRQHandler+0x2b0>)
 801359c:	4013      	ands	r3, r2
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d106      	bne.n	80135b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80135a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80135a6:	4b89      	ldr	r3, [pc, #548]	; (80137cc <HAL_UART_IRQHandler+0x2b4>)
 80135a8:	4013      	ands	r3, r2
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	f000 8112 	beq.w	80137d4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80135b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80135b4:	f003 0301 	and.w	r3, r3, #1
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d011      	beq.n	80135e0 <HAL_UART_IRQHandler+0xc8>
 80135bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80135c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d00b      	beq.n	80135e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	2201      	movs	r2, #1
 80135ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80135d6:	f043 0201 	orr.w	r2, r3, #1
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80135e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80135e4:	f003 0302 	and.w	r3, r3, #2
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d011      	beq.n	8013610 <HAL_UART_IRQHandler+0xf8>
 80135ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80135f0:	f003 0301 	and.w	r3, r3, #1
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d00b      	beq.n	8013610 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	2202      	movs	r2, #2
 80135fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013606:	f043 0204 	orr.w	r2, r3, #4
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013614:	f003 0304 	and.w	r3, r3, #4
 8013618:	2b00      	cmp	r3, #0
 801361a:	d011      	beq.n	8013640 <HAL_UART_IRQHandler+0x128>
 801361c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013620:	f003 0301 	and.w	r3, r3, #1
 8013624:	2b00      	cmp	r3, #0
 8013626:	d00b      	beq.n	8013640 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	2204      	movs	r2, #4
 801362e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013636:	f043 0202 	orr.w	r2, r3, #2
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013644:	f003 0308 	and.w	r3, r3, #8
 8013648:	2b00      	cmp	r3, #0
 801364a:	d017      	beq.n	801367c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801364c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013650:	f003 0320 	and.w	r3, r3, #32
 8013654:	2b00      	cmp	r3, #0
 8013656:	d105      	bne.n	8013664 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013658:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801365c:	4b5a      	ldr	r3, [pc, #360]	; (80137c8 <HAL_UART_IRQHandler+0x2b0>)
 801365e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013660:	2b00      	cmp	r3, #0
 8013662:	d00b      	beq.n	801367c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	2208      	movs	r2, #8
 801366a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013672:	f043 0208 	orr.w	r2, r3, #8
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801367c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013684:	2b00      	cmp	r3, #0
 8013686:	d012      	beq.n	80136ae <HAL_UART_IRQHandler+0x196>
 8013688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801368c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013690:	2b00      	cmp	r3, #0
 8013692:	d00c      	beq.n	80136ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801369c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136a4:	f043 0220 	orr.w	r2, r3, #32
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	f000 82c0 	beq.w	8013c3a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80136ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80136be:	f003 0320 	and.w	r3, r3, #32
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d013      	beq.n	80136ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80136c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80136ca:	f003 0320 	and.w	r3, r3, #32
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d105      	bne.n	80136de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80136d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80136d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d007      	beq.n	80136ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d003      	beq.n	80136ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80136f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	689b      	ldr	r3, [r3, #8]
 80136fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013702:	2b40      	cmp	r3, #64	; 0x40
 8013704:	d005      	beq.n	8013712 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801370a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801370e:	2b00      	cmp	r3, #0
 8013710:	d04f      	beq.n	80137b2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f001 fc0a 	bl	8014f2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	689b      	ldr	r3, [r3, #8]
 801371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013722:	2b40      	cmp	r3, #64	; 0x40
 8013724:	d141      	bne.n	80137aa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	3308      	adds	r3, #8
 801372c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013734:	e853 3f00 	ldrex	r3, [r3]
 8013738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801373c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	3308      	adds	r3, #8
 801374e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8013752:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801375a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801375e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013762:	e841 2300 	strex	r3, r2, [r1]
 8013766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801376a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801376e:	2b00      	cmp	r3, #0
 8013770:	d1d9      	bne.n	8013726 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013776:	2b00      	cmp	r3, #0
 8013778:	d013      	beq.n	80137a2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801377e:	4a14      	ldr	r2, [pc, #80]	; (80137d0 <HAL_UART_IRQHandler+0x2b8>)
 8013780:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013786:	4618      	mov	r0, r3
 8013788:	f7f6 ff02 	bl	800a590 <HAL_DMA_Abort_IT>
 801378c:	4603      	mov	r3, r0
 801378e:	2b00      	cmp	r3, #0
 8013790:	d017      	beq.n	80137c2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013798:	687a      	ldr	r2, [r7, #4]
 801379a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 801379c:	4610      	mov	r0, r2
 801379e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80137a0:	e00f      	b.n	80137c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80137a2:	6878      	ldr	r0, [r7, #4]
 80137a4:	f000 fa60 	bl	8013c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80137a8:	e00b      	b.n	80137c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f000 fa5c 	bl	8013c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80137b0:	e007      	b.n	80137c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80137b2:	6878      	ldr	r0, [r7, #4]
 80137b4:	f000 fa58 	bl	8013c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2200      	movs	r2, #0
 80137bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80137c0:	e23b      	b.n	8013c3a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80137c2:	bf00      	nop
    return;
 80137c4:	e239      	b.n	8013c3a <HAL_UART_IRQHandler+0x722>
 80137c6:	bf00      	nop
 80137c8:	10000001 	.word	0x10000001
 80137cc:	04000120 	.word	0x04000120
 80137d0:	08014ff9 	.word	0x08014ff9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137d8:	2b01      	cmp	r3, #1
 80137da:	f040 81ce 	bne.w	8013b7a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80137de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80137e2:	f003 0310 	and.w	r3, r3, #16
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	f000 81c7 	beq.w	8013b7a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80137ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80137f0:	f003 0310 	and.w	r3, r3, #16
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	f000 81c0 	beq.w	8013b7a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	2210      	movs	r2, #16
 8013800:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	689b      	ldr	r3, [r3, #8]
 8013808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801380c:	2b40      	cmp	r3, #64	; 0x40
 801380e:	f040 813b 	bne.w	8013a88 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	4a8b      	ldr	r2, [pc, #556]	; (8013a48 <HAL_UART_IRQHandler+0x530>)
 801381a:	4293      	cmp	r3, r2
 801381c:	d059      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	4a89      	ldr	r2, [pc, #548]	; (8013a4c <HAL_UART_IRQHandler+0x534>)
 8013826:	4293      	cmp	r3, r2
 8013828:	d053      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	4a87      	ldr	r2, [pc, #540]	; (8013a50 <HAL_UART_IRQHandler+0x538>)
 8013832:	4293      	cmp	r3, r2
 8013834:	d04d      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	4a85      	ldr	r2, [pc, #532]	; (8013a54 <HAL_UART_IRQHandler+0x53c>)
 801383e:	4293      	cmp	r3, r2
 8013840:	d047      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	4a83      	ldr	r2, [pc, #524]	; (8013a58 <HAL_UART_IRQHandler+0x540>)
 801384a:	4293      	cmp	r3, r2
 801384c:	d041      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	4a81      	ldr	r2, [pc, #516]	; (8013a5c <HAL_UART_IRQHandler+0x544>)
 8013856:	4293      	cmp	r3, r2
 8013858:	d03b      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	4a7f      	ldr	r2, [pc, #508]	; (8013a60 <HAL_UART_IRQHandler+0x548>)
 8013862:	4293      	cmp	r3, r2
 8013864:	d035      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	4a7d      	ldr	r2, [pc, #500]	; (8013a64 <HAL_UART_IRQHandler+0x54c>)
 801386e:	4293      	cmp	r3, r2
 8013870:	d02f      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	4a7b      	ldr	r2, [pc, #492]	; (8013a68 <HAL_UART_IRQHandler+0x550>)
 801387a:	4293      	cmp	r3, r2
 801387c:	d029      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	4a79      	ldr	r2, [pc, #484]	; (8013a6c <HAL_UART_IRQHandler+0x554>)
 8013886:	4293      	cmp	r3, r2
 8013888:	d023      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	4a77      	ldr	r2, [pc, #476]	; (8013a70 <HAL_UART_IRQHandler+0x558>)
 8013892:	4293      	cmp	r3, r2
 8013894:	d01d      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	4a75      	ldr	r2, [pc, #468]	; (8013a74 <HAL_UART_IRQHandler+0x55c>)
 801389e:	4293      	cmp	r3, r2
 80138a0:	d017      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	4a73      	ldr	r2, [pc, #460]	; (8013a78 <HAL_UART_IRQHandler+0x560>)
 80138aa:	4293      	cmp	r3, r2
 80138ac:	d011      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	4a71      	ldr	r2, [pc, #452]	; (8013a7c <HAL_UART_IRQHandler+0x564>)
 80138b6:	4293      	cmp	r3, r2
 80138b8:	d00b      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	4a6f      	ldr	r2, [pc, #444]	; (8013a80 <HAL_UART_IRQHandler+0x568>)
 80138c2:	4293      	cmp	r3, r2
 80138c4:	d005      	beq.n	80138d2 <HAL_UART_IRQHandler+0x3ba>
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	4a6d      	ldr	r2, [pc, #436]	; (8013a84 <HAL_UART_IRQHandler+0x56c>)
 80138ce:	4293      	cmp	r3, r2
 80138d0:	d105      	bne.n	80138de <HAL_UART_IRQHandler+0x3c6>
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	b29b      	uxth	r3, r3
 80138dc:	e004      	b.n	80138e8 <HAL_UART_IRQHandler+0x3d0>
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	685b      	ldr	r3, [r3, #4]
 80138e6:	b29b      	uxth	r3, r3
 80138e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80138ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	f000 81a4 	beq.w	8013c3e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80138fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013900:	429a      	cmp	r2, r3
 8013902:	f080 819c 	bcs.w	8013c3e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801390c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013914:	69db      	ldr	r3, [r3, #28]
 8013916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801391a:	f000 8086 	beq.w	8013a2a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013926:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801392a:	e853 3f00 	ldrex	r3, [r3]
 801392e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8013932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013936:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801393a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	461a      	mov	r2, r3
 8013944:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801394c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013950:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8013954:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013958:	e841 2300 	strex	r3, r2, [r1]
 801395c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8013960:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013964:	2b00      	cmp	r3, #0
 8013966:	d1da      	bne.n	801391e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	3308      	adds	r3, #8
 801396e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013972:	e853 3f00 	ldrex	r3, [r3]
 8013976:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8013978:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801397a:	f023 0301 	bic.w	r3, r3, #1
 801397e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	3308      	adds	r3, #8
 8013988:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801398c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8013990:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013992:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8013994:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013998:	e841 2300 	strex	r3, r2, [r1]
 801399c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801399e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d1e1      	bne.n	8013968 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	3308      	adds	r3, #8
 80139aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80139ae:	e853 3f00 	ldrex	r3, [r3]
 80139b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80139b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80139b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80139ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	3308      	adds	r3, #8
 80139c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80139c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80139ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80139ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80139d0:	e841 2300 	strex	r3, r2, [r1]
 80139d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80139d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d1e3      	bne.n	80139a4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2220      	movs	r2, #32
 80139e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2200      	movs	r2, #0
 80139e8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139f2:	e853 3f00 	ldrex	r3, [r3]
 80139f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80139f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139fa:	f023 0310 	bic.w	r3, r3, #16
 80139fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	461a      	mov	r2, r3
 8013a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013a0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8013a0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013a12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013a14:	e841 2300 	strex	r3, r2, [r1]
 8013a18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d1e4      	bne.n	80139ea <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7f6 fa95 	bl	8009f54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013a36:	b29b      	uxth	r3, r3
 8013a38:	1ad3      	subs	r3, r2, r3
 8013a3a:	b29b      	uxth	r3, r3
 8013a3c:	4619      	mov	r1, r3
 8013a3e:	6878      	ldr	r0, [r7, #4]
 8013a40:	f000 f91c 	bl	8013c7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013a44:	e0fb      	b.n	8013c3e <HAL_UART_IRQHandler+0x726>
 8013a46:	bf00      	nop
 8013a48:	40020010 	.word	0x40020010
 8013a4c:	40020028 	.word	0x40020028
 8013a50:	40020040 	.word	0x40020040
 8013a54:	40020058 	.word	0x40020058
 8013a58:	40020070 	.word	0x40020070
 8013a5c:	40020088 	.word	0x40020088
 8013a60:	400200a0 	.word	0x400200a0
 8013a64:	400200b8 	.word	0x400200b8
 8013a68:	40020410 	.word	0x40020410
 8013a6c:	40020428 	.word	0x40020428
 8013a70:	40020440 	.word	0x40020440
 8013a74:	40020458 	.word	0x40020458
 8013a78:	40020470 	.word	0x40020470
 8013a7c:	40020488 	.word	0x40020488
 8013a80:	400204a0 	.word	0x400204a0
 8013a84:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013a94:	b29b      	uxth	r3, r3
 8013a96:	1ad3      	subs	r3, r2, r3
 8013a98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013aa2:	b29b      	uxth	r3, r3
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	f000 80cc 	beq.w	8013c42 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8013aaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	f000 80c7 	beq.w	8013c42 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013abc:	e853 3f00 	ldrex	r3, [r3]
 8013ac0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ac4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8013ad8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ada:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013adc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ade:	e841 2300 	strex	r3, r2, [r1]
 8013ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d1e4      	bne.n	8013ab4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	3308      	adds	r3, #8
 8013af0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af4:	e853 3f00 	ldrex	r3, [r3]
 8013af8:	623b      	str	r3, [r7, #32]
   return(result);
 8013afa:	6a3a      	ldr	r2, [r7, #32]
 8013afc:	4b54      	ldr	r3, [pc, #336]	; (8013c50 <HAL_UART_IRQHandler+0x738>)
 8013afe:	4013      	ands	r3, r2
 8013b00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	3308      	adds	r3, #8
 8013b0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013b0e:	633a      	str	r2, [r7, #48]	; 0x30
 8013b10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b16:	e841 2300 	strex	r3, r2, [r1]
 8013b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d1e3      	bne.n	8013aea <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	2220      	movs	r2, #32
 8013b26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2200      	movs	r2, #0
 8013b34:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	e853 3f00 	ldrex	r3, [r3]
 8013b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	f023 0310 	bic.w	r3, r3, #16
 8013b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	461a      	mov	r2, r3
 8013b54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013b58:	61fb      	str	r3, [r7, #28]
 8013b5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b5c:	69b9      	ldr	r1, [r7, #24]
 8013b5e:	69fa      	ldr	r2, [r7, #28]
 8013b60:	e841 2300 	strex	r3, r2, [r1]
 8013b64:	617b      	str	r3, [r7, #20]
   return(result);
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d1e4      	bne.n	8013b36 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013b70:	4619      	mov	r1, r3
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f000 f882 	bl	8013c7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013b78:	e063      	b.n	8013c42 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d00e      	beq.n	8013ba4 <HAL_UART_IRQHandler+0x68c>
 8013b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d008      	beq.n	8013ba4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013b9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8013b9c:	6878      	ldr	r0, [r7, #4]
 8013b9e:	f002 f86b 	bl	8015c78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013ba2:	e051      	b.n	8013c48 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8013ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d014      	beq.n	8013bda <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8013bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d105      	bne.n	8013bc8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8013bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d008      	beq.n	8013bda <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d03a      	beq.n	8013c46 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	4798      	blx	r3
    }
    return;
 8013bd8:	e035      	b.n	8013c46 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d009      	beq.n	8013bfa <HAL_UART_IRQHandler+0x6e2>
 8013be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d003      	beq.n	8013bfa <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f001 fbb8 	bl	8015368 <UART_EndTransmit_IT>
    return;
 8013bf8:	e026      	b.n	8013c48 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8013bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d009      	beq.n	8013c1a <HAL_UART_IRQHandler+0x702>
 8013c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013c0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d003      	beq.n	8013c1a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f002 f844 	bl	8015ca0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013c18:	e016      	b.n	8013c48 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d010      	beq.n	8013c48 <HAL_UART_IRQHandler+0x730>
 8013c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	da0c      	bge.n	8013c48 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013c2e:	6878      	ldr	r0, [r7, #4]
 8013c30:	f002 f82c 	bl	8015c8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013c34:	e008      	b.n	8013c48 <HAL_UART_IRQHandler+0x730>
      return;
 8013c36:	bf00      	nop
 8013c38:	e006      	b.n	8013c48 <HAL_UART_IRQHandler+0x730>
    return;
 8013c3a:	bf00      	nop
 8013c3c:	e004      	b.n	8013c48 <HAL_UART_IRQHandler+0x730>
      return;
 8013c3e:	bf00      	nop
 8013c40:	e002      	b.n	8013c48 <HAL_UART_IRQHandler+0x730>
      return;
 8013c42:	bf00      	nop
 8013c44:	e000      	b.n	8013c48 <HAL_UART_IRQHandler+0x730>
    return;
 8013c46:	bf00      	nop
  }
}
 8013c48:	37e8      	adds	r7, #232	; 0xe8
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}
 8013c4e:	bf00      	nop
 8013c50:	effffffe 	.word	0xeffffffe

08013c54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013c54:	b480      	push	{r7}
 8013c56:	b083      	sub	sp, #12
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013c5c:	bf00      	nop
 8013c5e:	370c      	adds	r7, #12
 8013c60:	46bd      	mov	sp, r7
 8013c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c66:	4770      	bx	lr

08013c68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013c68:	b480      	push	{r7}
 8013c6a:	b083      	sub	sp, #12
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013c70:	bf00      	nop
 8013c72:	370c      	adds	r7, #12
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr

08013c7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013c7c:	b480      	push	{r7}
 8013c7e:	b083      	sub	sp, #12
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
 8013c84:	460b      	mov	r3, r1
 8013c86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013c88:	bf00      	nop
 8013c8a:	370c      	adds	r7, #12
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c92:	4770      	bx	lr

08013c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013c98:	b092      	sub	sp, #72	; 0x48
 8013c9a:	af00      	add	r7, sp, #0
 8013c9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	689a      	ldr	r2, [r3, #8]
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	691b      	ldr	r3, [r3, #16]
 8013cac:	431a      	orrs	r2, r3
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	695b      	ldr	r3, [r3, #20]
 8013cb2:	431a      	orrs	r2, r3
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	69db      	ldr	r3, [r3, #28]
 8013cb8:	4313      	orrs	r3, r2
 8013cba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	681a      	ldr	r2, [r3, #0]
 8013cc2:	4bbe      	ldr	r3, [pc, #760]	; (8013fbc <UART_SetConfig+0x328>)
 8013cc4:	4013      	ands	r3, r2
 8013cc6:	697a      	ldr	r2, [r7, #20]
 8013cc8:	6812      	ldr	r2, [r2, #0]
 8013cca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013ccc:	430b      	orrs	r3, r1
 8013cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	685b      	ldr	r3, [r3, #4]
 8013cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013cda:	697b      	ldr	r3, [r7, #20]
 8013cdc:	68da      	ldr	r2, [r3, #12]
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	430a      	orrs	r2, r1
 8013ce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	699b      	ldr	r3, [r3, #24]
 8013cea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4ab3      	ldr	r2, [pc, #716]	; (8013fc0 <UART_SetConfig+0x32c>)
 8013cf2:	4293      	cmp	r3, r2
 8013cf4:	d004      	beq.n	8013d00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	6a1b      	ldr	r3, [r3, #32]
 8013cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013cfc:	4313      	orrs	r3, r2
 8013cfe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013d00:	697b      	ldr	r3, [r7, #20]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	689a      	ldr	r2, [r3, #8]
 8013d06:	4baf      	ldr	r3, [pc, #700]	; (8013fc4 <UART_SetConfig+0x330>)
 8013d08:	4013      	ands	r3, r2
 8013d0a:	697a      	ldr	r2, [r7, #20]
 8013d0c:	6812      	ldr	r2, [r2, #0]
 8013d0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013d10:	430b      	orrs	r3, r1
 8013d12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013d14:	697b      	ldr	r3, [r7, #20]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d1a:	f023 010f 	bic.w	r1, r3, #15
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d22:	697b      	ldr	r3, [r7, #20]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	430a      	orrs	r2, r1
 8013d28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013d2a:	697b      	ldr	r3, [r7, #20]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	4aa6      	ldr	r2, [pc, #664]	; (8013fc8 <UART_SetConfig+0x334>)
 8013d30:	4293      	cmp	r3, r2
 8013d32:	d177      	bne.n	8013e24 <UART_SetConfig+0x190>
 8013d34:	4ba5      	ldr	r3, [pc, #660]	; (8013fcc <UART_SetConfig+0x338>)
 8013d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013d3c:	2b28      	cmp	r3, #40	; 0x28
 8013d3e:	d86d      	bhi.n	8013e1c <UART_SetConfig+0x188>
 8013d40:	a201      	add	r2, pc, #4	; (adr r2, 8013d48 <UART_SetConfig+0xb4>)
 8013d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d46:	bf00      	nop
 8013d48:	08013ded 	.word	0x08013ded
 8013d4c:	08013e1d 	.word	0x08013e1d
 8013d50:	08013e1d 	.word	0x08013e1d
 8013d54:	08013e1d 	.word	0x08013e1d
 8013d58:	08013e1d 	.word	0x08013e1d
 8013d5c:	08013e1d 	.word	0x08013e1d
 8013d60:	08013e1d 	.word	0x08013e1d
 8013d64:	08013e1d 	.word	0x08013e1d
 8013d68:	08013df5 	.word	0x08013df5
 8013d6c:	08013e1d 	.word	0x08013e1d
 8013d70:	08013e1d 	.word	0x08013e1d
 8013d74:	08013e1d 	.word	0x08013e1d
 8013d78:	08013e1d 	.word	0x08013e1d
 8013d7c:	08013e1d 	.word	0x08013e1d
 8013d80:	08013e1d 	.word	0x08013e1d
 8013d84:	08013e1d 	.word	0x08013e1d
 8013d88:	08013dfd 	.word	0x08013dfd
 8013d8c:	08013e1d 	.word	0x08013e1d
 8013d90:	08013e1d 	.word	0x08013e1d
 8013d94:	08013e1d 	.word	0x08013e1d
 8013d98:	08013e1d 	.word	0x08013e1d
 8013d9c:	08013e1d 	.word	0x08013e1d
 8013da0:	08013e1d 	.word	0x08013e1d
 8013da4:	08013e1d 	.word	0x08013e1d
 8013da8:	08013e05 	.word	0x08013e05
 8013dac:	08013e1d 	.word	0x08013e1d
 8013db0:	08013e1d 	.word	0x08013e1d
 8013db4:	08013e1d 	.word	0x08013e1d
 8013db8:	08013e1d 	.word	0x08013e1d
 8013dbc:	08013e1d 	.word	0x08013e1d
 8013dc0:	08013e1d 	.word	0x08013e1d
 8013dc4:	08013e1d 	.word	0x08013e1d
 8013dc8:	08013e0d 	.word	0x08013e0d
 8013dcc:	08013e1d 	.word	0x08013e1d
 8013dd0:	08013e1d 	.word	0x08013e1d
 8013dd4:	08013e1d 	.word	0x08013e1d
 8013dd8:	08013e1d 	.word	0x08013e1d
 8013ddc:	08013e1d 	.word	0x08013e1d
 8013de0:	08013e1d 	.word	0x08013e1d
 8013de4:	08013e1d 	.word	0x08013e1d
 8013de8:	08013e15 	.word	0x08013e15
 8013dec:	2301      	movs	r3, #1
 8013dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013df2:	e326      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013df4:	2304      	movs	r3, #4
 8013df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013dfa:	e322      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013dfc:	2308      	movs	r3, #8
 8013dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e02:	e31e      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013e04:	2310      	movs	r3, #16
 8013e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e0a:	e31a      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013e0c:	2320      	movs	r3, #32
 8013e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e12:	e316      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013e14:	2340      	movs	r3, #64	; 0x40
 8013e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e1a:	e312      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013e1c:	2380      	movs	r3, #128	; 0x80
 8013e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e22:	e30e      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	4a69      	ldr	r2, [pc, #420]	; (8013fd0 <UART_SetConfig+0x33c>)
 8013e2a:	4293      	cmp	r3, r2
 8013e2c:	d130      	bne.n	8013e90 <UART_SetConfig+0x1fc>
 8013e2e:	4b67      	ldr	r3, [pc, #412]	; (8013fcc <UART_SetConfig+0x338>)
 8013e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e32:	f003 0307 	and.w	r3, r3, #7
 8013e36:	2b05      	cmp	r3, #5
 8013e38:	d826      	bhi.n	8013e88 <UART_SetConfig+0x1f4>
 8013e3a:	a201      	add	r2, pc, #4	; (adr r2, 8013e40 <UART_SetConfig+0x1ac>)
 8013e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e40:	08013e59 	.word	0x08013e59
 8013e44:	08013e61 	.word	0x08013e61
 8013e48:	08013e69 	.word	0x08013e69
 8013e4c:	08013e71 	.word	0x08013e71
 8013e50:	08013e79 	.word	0x08013e79
 8013e54:	08013e81 	.word	0x08013e81
 8013e58:	2300      	movs	r3, #0
 8013e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e5e:	e2f0      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013e60:	2304      	movs	r3, #4
 8013e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e66:	e2ec      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013e68:	2308      	movs	r3, #8
 8013e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e6e:	e2e8      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013e70:	2310      	movs	r3, #16
 8013e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e76:	e2e4      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013e78:	2320      	movs	r3, #32
 8013e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e7e:	e2e0      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013e80:	2340      	movs	r3, #64	; 0x40
 8013e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e86:	e2dc      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013e88:	2380      	movs	r3, #128	; 0x80
 8013e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e8e:	e2d8      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	4a4f      	ldr	r2, [pc, #316]	; (8013fd4 <UART_SetConfig+0x340>)
 8013e96:	4293      	cmp	r3, r2
 8013e98:	d130      	bne.n	8013efc <UART_SetConfig+0x268>
 8013e9a:	4b4c      	ldr	r3, [pc, #304]	; (8013fcc <UART_SetConfig+0x338>)
 8013e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e9e:	f003 0307 	and.w	r3, r3, #7
 8013ea2:	2b05      	cmp	r3, #5
 8013ea4:	d826      	bhi.n	8013ef4 <UART_SetConfig+0x260>
 8013ea6:	a201      	add	r2, pc, #4	; (adr r2, 8013eac <UART_SetConfig+0x218>)
 8013ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013eac:	08013ec5 	.word	0x08013ec5
 8013eb0:	08013ecd 	.word	0x08013ecd
 8013eb4:	08013ed5 	.word	0x08013ed5
 8013eb8:	08013edd 	.word	0x08013edd
 8013ebc:	08013ee5 	.word	0x08013ee5
 8013ec0:	08013eed 	.word	0x08013eed
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013eca:	e2ba      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013ecc:	2304      	movs	r3, #4
 8013ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ed2:	e2b6      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013ed4:	2308      	movs	r3, #8
 8013ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013eda:	e2b2      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013edc:	2310      	movs	r3, #16
 8013ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ee2:	e2ae      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013ee4:	2320      	movs	r3, #32
 8013ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013eea:	e2aa      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013eec:	2340      	movs	r3, #64	; 0x40
 8013eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ef2:	e2a6      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013ef4:	2380      	movs	r3, #128	; 0x80
 8013ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013efa:	e2a2      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	4a35      	ldr	r2, [pc, #212]	; (8013fd8 <UART_SetConfig+0x344>)
 8013f02:	4293      	cmp	r3, r2
 8013f04:	d130      	bne.n	8013f68 <UART_SetConfig+0x2d4>
 8013f06:	4b31      	ldr	r3, [pc, #196]	; (8013fcc <UART_SetConfig+0x338>)
 8013f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f0a:	f003 0307 	and.w	r3, r3, #7
 8013f0e:	2b05      	cmp	r3, #5
 8013f10:	d826      	bhi.n	8013f60 <UART_SetConfig+0x2cc>
 8013f12:	a201      	add	r2, pc, #4	; (adr r2, 8013f18 <UART_SetConfig+0x284>)
 8013f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f18:	08013f31 	.word	0x08013f31
 8013f1c:	08013f39 	.word	0x08013f39
 8013f20:	08013f41 	.word	0x08013f41
 8013f24:	08013f49 	.word	0x08013f49
 8013f28:	08013f51 	.word	0x08013f51
 8013f2c:	08013f59 	.word	0x08013f59
 8013f30:	2300      	movs	r3, #0
 8013f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f36:	e284      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013f38:	2304      	movs	r3, #4
 8013f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f3e:	e280      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013f40:	2308      	movs	r3, #8
 8013f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f46:	e27c      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013f48:	2310      	movs	r3, #16
 8013f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f4e:	e278      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013f50:	2320      	movs	r3, #32
 8013f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f56:	e274      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013f58:	2340      	movs	r3, #64	; 0x40
 8013f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f5e:	e270      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013f60:	2380      	movs	r3, #128	; 0x80
 8013f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f66:	e26c      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013f68:	697b      	ldr	r3, [r7, #20]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	4a1b      	ldr	r2, [pc, #108]	; (8013fdc <UART_SetConfig+0x348>)
 8013f6e:	4293      	cmp	r3, r2
 8013f70:	d142      	bne.n	8013ff8 <UART_SetConfig+0x364>
 8013f72:	4b16      	ldr	r3, [pc, #88]	; (8013fcc <UART_SetConfig+0x338>)
 8013f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f76:	f003 0307 	and.w	r3, r3, #7
 8013f7a:	2b05      	cmp	r3, #5
 8013f7c:	d838      	bhi.n	8013ff0 <UART_SetConfig+0x35c>
 8013f7e:	a201      	add	r2, pc, #4	; (adr r2, 8013f84 <UART_SetConfig+0x2f0>)
 8013f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f84:	08013f9d 	.word	0x08013f9d
 8013f88:	08013fa5 	.word	0x08013fa5
 8013f8c:	08013fad 	.word	0x08013fad
 8013f90:	08013fb5 	.word	0x08013fb5
 8013f94:	08013fe1 	.word	0x08013fe1
 8013f98:	08013fe9 	.word	0x08013fe9
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fa2:	e24e      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013fa4:	2304      	movs	r3, #4
 8013fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013faa:	e24a      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013fac:	2308      	movs	r3, #8
 8013fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fb2:	e246      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013fb4:	2310      	movs	r3, #16
 8013fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fba:	e242      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013fbc:	cfff69f3 	.word	0xcfff69f3
 8013fc0:	58000c00 	.word	0x58000c00
 8013fc4:	11fff4ff 	.word	0x11fff4ff
 8013fc8:	40011000 	.word	0x40011000
 8013fcc:	58024400 	.word	0x58024400
 8013fd0:	40004400 	.word	0x40004400
 8013fd4:	40004800 	.word	0x40004800
 8013fd8:	40004c00 	.word	0x40004c00
 8013fdc:	40005000 	.word	0x40005000
 8013fe0:	2320      	movs	r3, #32
 8013fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fe6:	e22c      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013fe8:	2340      	movs	r3, #64	; 0x40
 8013fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fee:	e228      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013ff0:	2380      	movs	r3, #128	; 0x80
 8013ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ff6:	e224      	b.n	8014442 <UART_SetConfig+0x7ae>
 8013ff8:	697b      	ldr	r3, [r7, #20]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	4ab1      	ldr	r2, [pc, #708]	; (80142c4 <UART_SetConfig+0x630>)
 8013ffe:	4293      	cmp	r3, r2
 8014000:	d176      	bne.n	80140f0 <UART_SetConfig+0x45c>
 8014002:	4bb1      	ldr	r3, [pc, #708]	; (80142c8 <UART_SetConfig+0x634>)
 8014004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801400a:	2b28      	cmp	r3, #40	; 0x28
 801400c:	d86c      	bhi.n	80140e8 <UART_SetConfig+0x454>
 801400e:	a201      	add	r2, pc, #4	; (adr r2, 8014014 <UART_SetConfig+0x380>)
 8014010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014014:	080140b9 	.word	0x080140b9
 8014018:	080140e9 	.word	0x080140e9
 801401c:	080140e9 	.word	0x080140e9
 8014020:	080140e9 	.word	0x080140e9
 8014024:	080140e9 	.word	0x080140e9
 8014028:	080140e9 	.word	0x080140e9
 801402c:	080140e9 	.word	0x080140e9
 8014030:	080140e9 	.word	0x080140e9
 8014034:	080140c1 	.word	0x080140c1
 8014038:	080140e9 	.word	0x080140e9
 801403c:	080140e9 	.word	0x080140e9
 8014040:	080140e9 	.word	0x080140e9
 8014044:	080140e9 	.word	0x080140e9
 8014048:	080140e9 	.word	0x080140e9
 801404c:	080140e9 	.word	0x080140e9
 8014050:	080140e9 	.word	0x080140e9
 8014054:	080140c9 	.word	0x080140c9
 8014058:	080140e9 	.word	0x080140e9
 801405c:	080140e9 	.word	0x080140e9
 8014060:	080140e9 	.word	0x080140e9
 8014064:	080140e9 	.word	0x080140e9
 8014068:	080140e9 	.word	0x080140e9
 801406c:	080140e9 	.word	0x080140e9
 8014070:	080140e9 	.word	0x080140e9
 8014074:	080140d1 	.word	0x080140d1
 8014078:	080140e9 	.word	0x080140e9
 801407c:	080140e9 	.word	0x080140e9
 8014080:	080140e9 	.word	0x080140e9
 8014084:	080140e9 	.word	0x080140e9
 8014088:	080140e9 	.word	0x080140e9
 801408c:	080140e9 	.word	0x080140e9
 8014090:	080140e9 	.word	0x080140e9
 8014094:	080140d9 	.word	0x080140d9
 8014098:	080140e9 	.word	0x080140e9
 801409c:	080140e9 	.word	0x080140e9
 80140a0:	080140e9 	.word	0x080140e9
 80140a4:	080140e9 	.word	0x080140e9
 80140a8:	080140e9 	.word	0x080140e9
 80140ac:	080140e9 	.word	0x080140e9
 80140b0:	080140e9 	.word	0x080140e9
 80140b4:	080140e1 	.word	0x080140e1
 80140b8:	2301      	movs	r3, #1
 80140ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80140be:	e1c0      	b.n	8014442 <UART_SetConfig+0x7ae>
 80140c0:	2304      	movs	r3, #4
 80140c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80140c6:	e1bc      	b.n	8014442 <UART_SetConfig+0x7ae>
 80140c8:	2308      	movs	r3, #8
 80140ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80140ce:	e1b8      	b.n	8014442 <UART_SetConfig+0x7ae>
 80140d0:	2310      	movs	r3, #16
 80140d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80140d6:	e1b4      	b.n	8014442 <UART_SetConfig+0x7ae>
 80140d8:	2320      	movs	r3, #32
 80140da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80140de:	e1b0      	b.n	8014442 <UART_SetConfig+0x7ae>
 80140e0:	2340      	movs	r3, #64	; 0x40
 80140e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80140e6:	e1ac      	b.n	8014442 <UART_SetConfig+0x7ae>
 80140e8:	2380      	movs	r3, #128	; 0x80
 80140ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80140ee:	e1a8      	b.n	8014442 <UART_SetConfig+0x7ae>
 80140f0:	697b      	ldr	r3, [r7, #20]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	4a75      	ldr	r2, [pc, #468]	; (80142cc <UART_SetConfig+0x638>)
 80140f6:	4293      	cmp	r3, r2
 80140f8:	d130      	bne.n	801415c <UART_SetConfig+0x4c8>
 80140fa:	4b73      	ldr	r3, [pc, #460]	; (80142c8 <UART_SetConfig+0x634>)
 80140fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140fe:	f003 0307 	and.w	r3, r3, #7
 8014102:	2b05      	cmp	r3, #5
 8014104:	d826      	bhi.n	8014154 <UART_SetConfig+0x4c0>
 8014106:	a201      	add	r2, pc, #4	; (adr r2, 801410c <UART_SetConfig+0x478>)
 8014108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801410c:	08014125 	.word	0x08014125
 8014110:	0801412d 	.word	0x0801412d
 8014114:	08014135 	.word	0x08014135
 8014118:	0801413d 	.word	0x0801413d
 801411c:	08014145 	.word	0x08014145
 8014120:	0801414d 	.word	0x0801414d
 8014124:	2300      	movs	r3, #0
 8014126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801412a:	e18a      	b.n	8014442 <UART_SetConfig+0x7ae>
 801412c:	2304      	movs	r3, #4
 801412e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014132:	e186      	b.n	8014442 <UART_SetConfig+0x7ae>
 8014134:	2308      	movs	r3, #8
 8014136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801413a:	e182      	b.n	8014442 <UART_SetConfig+0x7ae>
 801413c:	2310      	movs	r3, #16
 801413e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014142:	e17e      	b.n	8014442 <UART_SetConfig+0x7ae>
 8014144:	2320      	movs	r3, #32
 8014146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801414a:	e17a      	b.n	8014442 <UART_SetConfig+0x7ae>
 801414c:	2340      	movs	r3, #64	; 0x40
 801414e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014152:	e176      	b.n	8014442 <UART_SetConfig+0x7ae>
 8014154:	2380      	movs	r3, #128	; 0x80
 8014156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801415a:	e172      	b.n	8014442 <UART_SetConfig+0x7ae>
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	4a5b      	ldr	r2, [pc, #364]	; (80142d0 <UART_SetConfig+0x63c>)
 8014162:	4293      	cmp	r3, r2
 8014164:	d130      	bne.n	80141c8 <UART_SetConfig+0x534>
 8014166:	4b58      	ldr	r3, [pc, #352]	; (80142c8 <UART_SetConfig+0x634>)
 8014168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801416a:	f003 0307 	and.w	r3, r3, #7
 801416e:	2b05      	cmp	r3, #5
 8014170:	d826      	bhi.n	80141c0 <UART_SetConfig+0x52c>
 8014172:	a201      	add	r2, pc, #4	; (adr r2, 8014178 <UART_SetConfig+0x4e4>)
 8014174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014178:	08014191 	.word	0x08014191
 801417c:	08014199 	.word	0x08014199
 8014180:	080141a1 	.word	0x080141a1
 8014184:	080141a9 	.word	0x080141a9
 8014188:	080141b1 	.word	0x080141b1
 801418c:	080141b9 	.word	0x080141b9
 8014190:	2300      	movs	r3, #0
 8014192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014196:	e154      	b.n	8014442 <UART_SetConfig+0x7ae>
 8014198:	2304      	movs	r3, #4
 801419a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801419e:	e150      	b.n	8014442 <UART_SetConfig+0x7ae>
 80141a0:	2308      	movs	r3, #8
 80141a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141a6:	e14c      	b.n	8014442 <UART_SetConfig+0x7ae>
 80141a8:	2310      	movs	r3, #16
 80141aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141ae:	e148      	b.n	8014442 <UART_SetConfig+0x7ae>
 80141b0:	2320      	movs	r3, #32
 80141b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141b6:	e144      	b.n	8014442 <UART_SetConfig+0x7ae>
 80141b8:	2340      	movs	r3, #64	; 0x40
 80141ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141be:	e140      	b.n	8014442 <UART_SetConfig+0x7ae>
 80141c0:	2380      	movs	r3, #128	; 0x80
 80141c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141c6:	e13c      	b.n	8014442 <UART_SetConfig+0x7ae>
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	4a41      	ldr	r2, [pc, #260]	; (80142d4 <UART_SetConfig+0x640>)
 80141ce:	4293      	cmp	r3, r2
 80141d0:	f040 8082 	bne.w	80142d8 <UART_SetConfig+0x644>
 80141d4:	4b3c      	ldr	r3, [pc, #240]	; (80142c8 <UART_SetConfig+0x634>)
 80141d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80141dc:	2b28      	cmp	r3, #40	; 0x28
 80141de:	d86d      	bhi.n	80142bc <UART_SetConfig+0x628>
 80141e0:	a201      	add	r2, pc, #4	; (adr r2, 80141e8 <UART_SetConfig+0x554>)
 80141e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141e6:	bf00      	nop
 80141e8:	0801428d 	.word	0x0801428d
 80141ec:	080142bd 	.word	0x080142bd
 80141f0:	080142bd 	.word	0x080142bd
 80141f4:	080142bd 	.word	0x080142bd
 80141f8:	080142bd 	.word	0x080142bd
 80141fc:	080142bd 	.word	0x080142bd
 8014200:	080142bd 	.word	0x080142bd
 8014204:	080142bd 	.word	0x080142bd
 8014208:	08014295 	.word	0x08014295
 801420c:	080142bd 	.word	0x080142bd
 8014210:	080142bd 	.word	0x080142bd
 8014214:	080142bd 	.word	0x080142bd
 8014218:	080142bd 	.word	0x080142bd
 801421c:	080142bd 	.word	0x080142bd
 8014220:	080142bd 	.word	0x080142bd
 8014224:	080142bd 	.word	0x080142bd
 8014228:	0801429d 	.word	0x0801429d
 801422c:	080142bd 	.word	0x080142bd
 8014230:	080142bd 	.word	0x080142bd
 8014234:	080142bd 	.word	0x080142bd
 8014238:	080142bd 	.word	0x080142bd
 801423c:	080142bd 	.word	0x080142bd
 8014240:	080142bd 	.word	0x080142bd
 8014244:	080142bd 	.word	0x080142bd
 8014248:	080142a5 	.word	0x080142a5
 801424c:	080142bd 	.word	0x080142bd
 8014250:	080142bd 	.word	0x080142bd
 8014254:	080142bd 	.word	0x080142bd
 8014258:	080142bd 	.word	0x080142bd
 801425c:	080142bd 	.word	0x080142bd
 8014260:	080142bd 	.word	0x080142bd
 8014264:	080142bd 	.word	0x080142bd
 8014268:	080142ad 	.word	0x080142ad
 801426c:	080142bd 	.word	0x080142bd
 8014270:	080142bd 	.word	0x080142bd
 8014274:	080142bd 	.word	0x080142bd
 8014278:	080142bd 	.word	0x080142bd
 801427c:	080142bd 	.word	0x080142bd
 8014280:	080142bd 	.word	0x080142bd
 8014284:	080142bd 	.word	0x080142bd
 8014288:	080142b5 	.word	0x080142b5
 801428c:	2301      	movs	r3, #1
 801428e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014292:	e0d6      	b.n	8014442 <UART_SetConfig+0x7ae>
 8014294:	2304      	movs	r3, #4
 8014296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801429a:	e0d2      	b.n	8014442 <UART_SetConfig+0x7ae>
 801429c:	2308      	movs	r3, #8
 801429e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142a2:	e0ce      	b.n	8014442 <UART_SetConfig+0x7ae>
 80142a4:	2310      	movs	r3, #16
 80142a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142aa:	e0ca      	b.n	8014442 <UART_SetConfig+0x7ae>
 80142ac:	2320      	movs	r3, #32
 80142ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142b2:	e0c6      	b.n	8014442 <UART_SetConfig+0x7ae>
 80142b4:	2340      	movs	r3, #64	; 0x40
 80142b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142ba:	e0c2      	b.n	8014442 <UART_SetConfig+0x7ae>
 80142bc:	2380      	movs	r3, #128	; 0x80
 80142be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142c2:	e0be      	b.n	8014442 <UART_SetConfig+0x7ae>
 80142c4:	40011400 	.word	0x40011400
 80142c8:	58024400 	.word	0x58024400
 80142cc:	40007800 	.word	0x40007800
 80142d0:	40007c00 	.word	0x40007c00
 80142d4:	40011800 	.word	0x40011800
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	4aad      	ldr	r2, [pc, #692]	; (8014594 <UART_SetConfig+0x900>)
 80142de:	4293      	cmp	r3, r2
 80142e0:	d176      	bne.n	80143d0 <UART_SetConfig+0x73c>
 80142e2:	4bad      	ldr	r3, [pc, #692]	; (8014598 <UART_SetConfig+0x904>)
 80142e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80142ea:	2b28      	cmp	r3, #40	; 0x28
 80142ec:	d86c      	bhi.n	80143c8 <UART_SetConfig+0x734>
 80142ee:	a201      	add	r2, pc, #4	; (adr r2, 80142f4 <UART_SetConfig+0x660>)
 80142f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142f4:	08014399 	.word	0x08014399
 80142f8:	080143c9 	.word	0x080143c9
 80142fc:	080143c9 	.word	0x080143c9
 8014300:	080143c9 	.word	0x080143c9
 8014304:	080143c9 	.word	0x080143c9
 8014308:	080143c9 	.word	0x080143c9
 801430c:	080143c9 	.word	0x080143c9
 8014310:	080143c9 	.word	0x080143c9
 8014314:	080143a1 	.word	0x080143a1
 8014318:	080143c9 	.word	0x080143c9
 801431c:	080143c9 	.word	0x080143c9
 8014320:	080143c9 	.word	0x080143c9
 8014324:	080143c9 	.word	0x080143c9
 8014328:	080143c9 	.word	0x080143c9
 801432c:	080143c9 	.word	0x080143c9
 8014330:	080143c9 	.word	0x080143c9
 8014334:	080143a9 	.word	0x080143a9
 8014338:	080143c9 	.word	0x080143c9
 801433c:	080143c9 	.word	0x080143c9
 8014340:	080143c9 	.word	0x080143c9
 8014344:	080143c9 	.word	0x080143c9
 8014348:	080143c9 	.word	0x080143c9
 801434c:	080143c9 	.word	0x080143c9
 8014350:	080143c9 	.word	0x080143c9
 8014354:	080143b1 	.word	0x080143b1
 8014358:	080143c9 	.word	0x080143c9
 801435c:	080143c9 	.word	0x080143c9
 8014360:	080143c9 	.word	0x080143c9
 8014364:	080143c9 	.word	0x080143c9
 8014368:	080143c9 	.word	0x080143c9
 801436c:	080143c9 	.word	0x080143c9
 8014370:	080143c9 	.word	0x080143c9
 8014374:	080143b9 	.word	0x080143b9
 8014378:	080143c9 	.word	0x080143c9
 801437c:	080143c9 	.word	0x080143c9
 8014380:	080143c9 	.word	0x080143c9
 8014384:	080143c9 	.word	0x080143c9
 8014388:	080143c9 	.word	0x080143c9
 801438c:	080143c9 	.word	0x080143c9
 8014390:	080143c9 	.word	0x080143c9
 8014394:	080143c1 	.word	0x080143c1
 8014398:	2301      	movs	r3, #1
 801439a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801439e:	e050      	b.n	8014442 <UART_SetConfig+0x7ae>
 80143a0:	2304      	movs	r3, #4
 80143a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143a6:	e04c      	b.n	8014442 <UART_SetConfig+0x7ae>
 80143a8:	2308      	movs	r3, #8
 80143aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143ae:	e048      	b.n	8014442 <UART_SetConfig+0x7ae>
 80143b0:	2310      	movs	r3, #16
 80143b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143b6:	e044      	b.n	8014442 <UART_SetConfig+0x7ae>
 80143b8:	2320      	movs	r3, #32
 80143ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143be:	e040      	b.n	8014442 <UART_SetConfig+0x7ae>
 80143c0:	2340      	movs	r3, #64	; 0x40
 80143c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143c6:	e03c      	b.n	8014442 <UART_SetConfig+0x7ae>
 80143c8:	2380      	movs	r3, #128	; 0x80
 80143ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143ce:	e038      	b.n	8014442 <UART_SetConfig+0x7ae>
 80143d0:	697b      	ldr	r3, [r7, #20]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	4a71      	ldr	r2, [pc, #452]	; (801459c <UART_SetConfig+0x908>)
 80143d6:	4293      	cmp	r3, r2
 80143d8:	d130      	bne.n	801443c <UART_SetConfig+0x7a8>
 80143da:	4b6f      	ldr	r3, [pc, #444]	; (8014598 <UART_SetConfig+0x904>)
 80143dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80143de:	f003 0307 	and.w	r3, r3, #7
 80143e2:	2b05      	cmp	r3, #5
 80143e4:	d826      	bhi.n	8014434 <UART_SetConfig+0x7a0>
 80143e6:	a201      	add	r2, pc, #4	; (adr r2, 80143ec <UART_SetConfig+0x758>)
 80143e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143ec:	08014405 	.word	0x08014405
 80143f0:	0801440d 	.word	0x0801440d
 80143f4:	08014415 	.word	0x08014415
 80143f8:	0801441d 	.word	0x0801441d
 80143fc:	08014425 	.word	0x08014425
 8014400:	0801442d 	.word	0x0801442d
 8014404:	2302      	movs	r3, #2
 8014406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801440a:	e01a      	b.n	8014442 <UART_SetConfig+0x7ae>
 801440c:	2304      	movs	r3, #4
 801440e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014412:	e016      	b.n	8014442 <UART_SetConfig+0x7ae>
 8014414:	2308      	movs	r3, #8
 8014416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801441a:	e012      	b.n	8014442 <UART_SetConfig+0x7ae>
 801441c:	2310      	movs	r3, #16
 801441e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014422:	e00e      	b.n	8014442 <UART_SetConfig+0x7ae>
 8014424:	2320      	movs	r3, #32
 8014426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801442a:	e00a      	b.n	8014442 <UART_SetConfig+0x7ae>
 801442c:	2340      	movs	r3, #64	; 0x40
 801442e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014432:	e006      	b.n	8014442 <UART_SetConfig+0x7ae>
 8014434:	2380      	movs	r3, #128	; 0x80
 8014436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801443a:	e002      	b.n	8014442 <UART_SetConfig+0x7ae>
 801443c:	2380      	movs	r3, #128	; 0x80
 801443e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	4a55      	ldr	r2, [pc, #340]	; (801459c <UART_SetConfig+0x908>)
 8014448:	4293      	cmp	r3, r2
 801444a:	f040 80f8 	bne.w	801463e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801444e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014452:	2b20      	cmp	r3, #32
 8014454:	dc46      	bgt.n	80144e4 <UART_SetConfig+0x850>
 8014456:	2b02      	cmp	r3, #2
 8014458:	db75      	blt.n	8014546 <UART_SetConfig+0x8b2>
 801445a:	3b02      	subs	r3, #2
 801445c:	2b1e      	cmp	r3, #30
 801445e:	d872      	bhi.n	8014546 <UART_SetConfig+0x8b2>
 8014460:	a201      	add	r2, pc, #4	; (adr r2, 8014468 <UART_SetConfig+0x7d4>)
 8014462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014466:	bf00      	nop
 8014468:	080144eb 	.word	0x080144eb
 801446c:	08014547 	.word	0x08014547
 8014470:	080144f3 	.word	0x080144f3
 8014474:	08014547 	.word	0x08014547
 8014478:	08014547 	.word	0x08014547
 801447c:	08014547 	.word	0x08014547
 8014480:	08014503 	.word	0x08014503
 8014484:	08014547 	.word	0x08014547
 8014488:	08014547 	.word	0x08014547
 801448c:	08014547 	.word	0x08014547
 8014490:	08014547 	.word	0x08014547
 8014494:	08014547 	.word	0x08014547
 8014498:	08014547 	.word	0x08014547
 801449c:	08014547 	.word	0x08014547
 80144a0:	08014513 	.word	0x08014513
 80144a4:	08014547 	.word	0x08014547
 80144a8:	08014547 	.word	0x08014547
 80144ac:	08014547 	.word	0x08014547
 80144b0:	08014547 	.word	0x08014547
 80144b4:	08014547 	.word	0x08014547
 80144b8:	08014547 	.word	0x08014547
 80144bc:	08014547 	.word	0x08014547
 80144c0:	08014547 	.word	0x08014547
 80144c4:	08014547 	.word	0x08014547
 80144c8:	08014547 	.word	0x08014547
 80144cc:	08014547 	.word	0x08014547
 80144d0:	08014547 	.word	0x08014547
 80144d4:	08014547 	.word	0x08014547
 80144d8:	08014547 	.word	0x08014547
 80144dc:	08014547 	.word	0x08014547
 80144e0:	08014539 	.word	0x08014539
 80144e4:	2b40      	cmp	r3, #64	; 0x40
 80144e6:	d02a      	beq.n	801453e <UART_SetConfig+0x8aa>
 80144e8:	e02d      	b.n	8014546 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80144ea:	f7fb fc4d 	bl	800fd88 <HAL_RCCEx_GetD3PCLK1Freq>
 80144ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80144f0:	e02f      	b.n	8014552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80144f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80144f6:	4618      	mov	r0, r3
 80144f8:	f7fb fc5c 	bl	800fdb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80144fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014500:	e027      	b.n	8014552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014502:	f107 0318 	add.w	r3, r7, #24
 8014506:	4618      	mov	r0, r3
 8014508:	f7fb fda8 	bl	801005c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801450c:	69fb      	ldr	r3, [r7, #28]
 801450e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014510:	e01f      	b.n	8014552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014512:	4b21      	ldr	r3, [pc, #132]	; (8014598 <UART_SetConfig+0x904>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	f003 0320 	and.w	r3, r3, #32
 801451a:	2b00      	cmp	r3, #0
 801451c:	d009      	beq.n	8014532 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801451e:	4b1e      	ldr	r3, [pc, #120]	; (8014598 <UART_SetConfig+0x904>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	08db      	lsrs	r3, r3, #3
 8014524:	f003 0303 	and.w	r3, r3, #3
 8014528:	4a1d      	ldr	r2, [pc, #116]	; (80145a0 <UART_SetConfig+0x90c>)
 801452a:	fa22 f303 	lsr.w	r3, r2, r3
 801452e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014530:	e00f      	b.n	8014552 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8014532:	4b1b      	ldr	r3, [pc, #108]	; (80145a0 <UART_SetConfig+0x90c>)
 8014534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014536:	e00c      	b.n	8014552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014538:	4b1a      	ldr	r3, [pc, #104]	; (80145a4 <UART_SetConfig+0x910>)
 801453a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801453c:	e009      	b.n	8014552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801453e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014544:	e005      	b.n	8014552 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8014546:	2300      	movs	r3, #0
 8014548:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801454a:	2301      	movs	r3, #1
 801454c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014550:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014554:	2b00      	cmp	r3, #0
 8014556:	f000 81ee 	beq.w	8014936 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801455e:	4a12      	ldr	r2, [pc, #72]	; (80145a8 <UART_SetConfig+0x914>)
 8014560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014564:	461a      	mov	r2, r3
 8014566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014568:	fbb3 f3f2 	udiv	r3, r3, r2
 801456c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	685a      	ldr	r2, [r3, #4]
 8014572:	4613      	mov	r3, r2
 8014574:	005b      	lsls	r3, r3, #1
 8014576:	4413      	add	r3, r2
 8014578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801457a:	429a      	cmp	r2, r3
 801457c:	d305      	bcc.n	801458a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	685b      	ldr	r3, [r3, #4]
 8014582:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014586:	429a      	cmp	r2, r3
 8014588:	d910      	bls.n	80145ac <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801458a:	2301      	movs	r3, #1
 801458c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014590:	e1d1      	b.n	8014936 <UART_SetConfig+0xca2>
 8014592:	bf00      	nop
 8014594:	40011c00 	.word	0x40011c00
 8014598:	58024400 	.word	0x58024400
 801459c:	58000c00 	.word	0x58000c00
 80145a0:	03d09000 	.word	0x03d09000
 80145a4:	003d0900 	.word	0x003d0900
 80145a8:	08016ff8 	.word	0x08016ff8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80145ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145ae:	2200      	movs	r2, #0
 80145b0:	60bb      	str	r3, [r7, #8]
 80145b2:	60fa      	str	r2, [r7, #12]
 80145b4:	697b      	ldr	r3, [r7, #20]
 80145b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145b8:	4ac0      	ldr	r2, [pc, #768]	; (80148bc <UART_SetConfig+0xc28>)
 80145ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145be:	b29b      	uxth	r3, r3
 80145c0:	2200      	movs	r2, #0
 80145c2:	603b      	str	r3, [r7, #0]
 80145c4:	607a      	str	r2, [r7, #4]
 80145c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80145ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80145ce:	f7eb fe9f 	bl	8000310 <__aeabi_uldivmod>
 80145d2:	4602      	mov	r2, r0
 80145d4:	460b      	mov	r3, r1
 80145d6:	4610      	mov	r0, r2
 80145d8:	4619      	mov	r1, r3
 80145da:	f04f 0200 	mov.w	r2, #0
 80145de:	f04f 0300 	mov.w	r3, #0
 80145e2:	020b      	lsls	r3, r1, #8
 80145e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80145e8:	0202      	lsls	r2, r0, #8
 80145ea:	6979      	ldr	r1, [r7, #20]
 80145ec:	6849      	ldr	r1, [r1, #4]
 80145ee:	0849      	lsrs	r1, r1, #1
 80145f0:	2000      	movs	r0, #0
 80145f2:	460c      	mov	r4, r1
 80145f4:	4605      	mov	r5, r0
 80145f6:	eb12 0804 	adds.w	r8, r2, r4
 80145fa:	eb43 0905 	adc.w	r9, r3, r5
 80145fe:	697b      	ldr	r3, [r7, #20]
 8014600:	685b      	ldr	r3, [r3, #4]
 8014602:	2200      	movs	r2, #0
 8014604:	469a      	mov	sl, r3
 8014606:	4693      	mov	fp, r2
 8014608:	4652      	mov	r2, sl
 801460a:	465b      	mov	r3, fp
 801460c:	4640      	mov	r0, r8
 801460e:	4649      	mov	r1, r9
 8014610:	f7eb fe7e 	bl	8000310 <__aeabi_uldivmod>
 8014614:	4602      	mov	r2, r0
 8014616:	460b      	mov	r3, r1
 8014618:	4613      	mov	r3, r2
 801461a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801461c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801461e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014622:	d308      	bcc.n	8014636 <UART_SetConfig+0x9a2>
 8014624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801462a:	d204      	bcs.n	8014636 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801462c:	697b      	ldr	r3, [r7, #20]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014632:	60da      	str	r2, [r3, #12]
 8014634:	e17f      	b.n	8014936 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8014636:	2301      	movs	r3, #1
 8014638:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801463c:	e17b      	b.n	8014936 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801463e:	697b      	ldr	r3, [r7, #20]
 8014640:	69db      	ldr	r3, [r3, #28]
 8014642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014646:	f040 80bd 	bne.w	80147c4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801464a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801464e:	2b20      	cmp	r3, #32
 8014650:	dc48      	bgt.n	80146e4 <UART_SetConfig+0xa50>
 8014652:	2b00      	cmp	r3, #0
 8014654:	db7b      	blt.n	801474e <UART_SetConfig+0xaba>
 8014656:	2b20      	cmp	r3, #32
 8014658:	d879      	bhi.n	801474e <UART_SetConfig+0xaba>
 801465a:	a201      	add	r2, pc, #4	; (adr r2, 8014660 <UART_SetConfig+0x9cc>)
 801465c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014660:	080146eb 	.word	0x080146eb
 8014664:	080146f3 	.word	0x080146f3
 8014668:	0801474f 	.word	0x0801474f
 801466c:	0801474f 	.word	0x0801474f
 8014670:	080146fb 	.word	0x080146fb
 8014674:	0801474f 	.word	0x0801474f
 8014678:	0801474f 	.word	0x0801474f
 801467c:	0801474f 	.word	0x0801474f
 8014680:	0801470b 	.word	0x0801470b
 8014684:	0801474f 	.word	0x0801474f
 8014688:	0801474f 	.word	0x0801474f
 801468c:	0801474f 	.word	0x0801474f
 8014690:	0801474f 	.word	0x0801474f
 8014694:	0801474f 	.word	0x0801474f
 8014698:	0801474f 	.word	0x0801474f
 801469c:	0801474f 	.word	0x0801474f
 80146a0:	0801471b 	.word	0x0801471b
 80146a4:	0801474f 	.word	0x0801474f
 80146a8:	0801474f 	.word	0x0801474f
 80146ac:	0801474f 	.word	0x0801474f
 80146b0:	0801474f 	.word	0x0801474f
 80146b4:	0801474f 	.word	0x0801474f
 80146b8:	0801474f 	.word	0x0801474f
 80146bc:	0801474f 	.word	0x0801474f
 80146c0:	0801474f 	.word	0x0801474f
 80146c4:	0801474f 	.word	0x0801474f
 80146c8:	0801474f 	.word	0x0801474f
 80146cc:	0801474f 	.word	0x0801474f
 80146d0:	0801474f 	.word	0x0801474f
 80146d4:	0801474f 	.word	0x0801474f
 80146d8:	0801474f 	.word	0x0801474f
 80146dc:	0801474f 	.word	0x0801474f
 80146e0:	08014741 	.word	0x08014741
 80146e4:	2b40      	cmp	r3, #64	; 0x40
 80146e6:	d02e      	beq.n	8014746 <UART_SetConfig+0xab2>
 80146e8:	e031      	b.n	801474e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80146ea:	f7fa f801 	bl	800e6f0 <HAL_RCC_GetPCLK1Freq>
 80146ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80146f0:	e033      	b.n	801475a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80146f2:	f7fa f813 	bl	800e71c <HAL_RCC_GetPCLK2Freq>
 80146f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80146f8:	e02f      	b.n	801475a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80146fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80146fe:	4618      	mov	r0, r3
 8014700:	f7fb fb58 	bl	800fdb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014708:	e027      	b.n	801475a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801470a:	f107 0318 	add.w	r3, r7, #24
 801470e:	4618      	mov	r0, r3
 8014710:	f7fb fca4 	bl	801005c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014714:	69fb      	ldr	r3, [r7, #28]
 8014716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014718:	e01f      	b.n	801475a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801471a:	4b69      	ldr	r3, [pc, #420]	; (80148c0 <UART_SetConfig+0xc2c>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	f003 0320 	and.w	r3, r3, #32
 8014722:	2b00      	cmp	r3, #0
 8014724:	d009      	beq.n	801473a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014726:	4b66      	ldr	r3, [pc, #408]	; (80148c0 <UART_SetConfig+0xc2c>)
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	08db      	lsrs	r3, r3, #3
 801472c:	f003 0303 	and.w	r3, r3, #3
 8014730:	4a64      	ldr	r2, [pc, #400]	; (80148c4 <UART_SetConfig+0xc30>)
 8014732:	fa22 f303 	lsr.w	r3, r2, r3
 8014736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014738:	e00f      	b.n	801475a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801473a:	4b62      	ldr	r3, [pc, #392]	; (80148c4 <UART_SetConfig+0xc30>)
 801473c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801473e:	e00c      	b.n	801475a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014740:	4b61      	ldr	r3, [pc, #388]	; (80148c8 <UART_SetConfig+0xc34>)
 8014742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014744:	e009      	b.n	801475a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801474a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801474c:	e005      	b.n	801475a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801474e:	2300      	movs	r3, #0
 8014750:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014752:	2301      	movs	r3, #1
 8014754:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014758:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801475a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801475c:	2b00      	cmp	r3, #0
 801475e:	f000 80ea 	beq.w	8014936 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014762:	697b      	ldr	r3, [r7, #20]
 8014764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014766:	4a55      	ldr	r2, [pc, #340]	; (80148bc <UART_SetConfig+0xc28>)
 8014768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801476c:	461a      	mov	r2, r3
 801476e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014770:	fbb3 f3f2 	udiv	r3, r3, r2
 8014774:	005a      	lsls	r2, r3, #1
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	685b      	ldr	r3, [r3, #4]
 801477a:	085b      	lsrs	r3, r3, #1
 801477c:	441a      	add	r2, r3
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	685b      	ldr	r3, [r3, #4]
 8014782:	fbb2 f3f3 	udiv	r3, r2, r3
 8014786:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801478a:	2b0f      	cmp	r3, #15
 801478c:	d916      	bls.n	80147bc <UART_SetConfig+0xb28>
 801478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014794:	d212      	bcs.n	80147bc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014798:	b29b      	uxth	r3, r3
 801479a:	f023 030f 	bic.w	r3, r3, #15
 801479e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80147a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147a2:	085b      	lsrs	r3, r3, #1
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	f003 0307 	and.w	r3, r3, #7
 80147aa:	b29a      	uxth	r2, r3
 80147ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80147ae:	4313      	orrs	r3, r2
 80147b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80147b8:	60da      	str	r2, [r3, #12]
 80147ba:	e0bc      	b.n	8014936 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80147bc:	2301      	movs	r3, #1
 80147be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80147c2:	e0b8      	b.n	8014936 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80147c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80147c8:	2b20      	cmp	r3, #32
 80147ca:	dc4b      	bgt.n	8014864 <UART_SetConfig+0xbd0>
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	f2c0 8087 	blt.w	80148e0 <UART_SetConfig+0xc4c>
 80147d2:	2b20      	cmp	r3, #32
 80147d4:	f200 8084 	bhi.w	80148e0 <UART_SetConfig+0xc4c>
 80147d8:	a201      	add	r2, pc, #4	; (adr r2, 80147e0 <UART_SetConfig+0xb4c>)
 80147da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147de:	bf00      	nop
 80147e0:	0801486b 	.word	0x0801486b
 80147e4:	08014873 	.word	0x08014873
 80147e8:	080148e1 	.word	0x080148e1
 80147ec:	080148e1 	.word	0x080148e1
 80147f0:	0801487b 	.word	0x0801487b
 80147f4:	080148e1 	.word	0x080148e1
 80147f8:	080148e1 	.word	0x080148e1
 80147fc:	080148e1 	.word	0x080148e1
 8014800:	0801488b 	.word	0x0801488b
 8014804:	080148e1 	.word	0x080148e1
 8014808:	080148e1 	.word	0x080148e1
 801480c:	080148e1 	.word	0x080148e1
 8014810:	080148e1 	.word	0x080148e1
 8014814:	080148e1 	.word	0x080148e1
 8014818:	080148e1 	.word	0x080148e1
 801481c:	080148e1 	.word	0x080148e1
 8014820:	0801489b 	.word	0x0801489b
 8014824:	080148e1 	.word	0x080148e1
 8014828:	080148e1 	.word	0x080148e1
 801482c:	080148e1 	.word	0x080148e1
 8014830:	080148e1 	.word	0x080148e1
 8014834:	080148e1 	.word	0x080148e1
 8014838:	080148e1 	.word	0x080148e1
 801483c:	080148e1 	.word	0x080148e1
 8014840:	080148e1 	.word	0x080148e1
 8014844:	080148e1 	.word	0x080148e1
 8014848:	080148e1 	.word	0x080148e1
 801484c:	080148e1 	.word	0x080148e1
 8014850:	080148e1 	.word	0x080148e1
 8014854:	080148e1 	.word	0x080148e1
 8014858:	080148e1 	.word	0x080148e1
 801485c:	080148e1 	.word	0x080148e1
 8014860:	080148d3 	.word	0x080148d3
 8014864:	2b40      	cmp	r3, #64	; 0x40
 8014866:	d037      	beq.n	80148d8 <UART_SetConfig+0xc44>
 8014868:	e03a      	b.n	80148e0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801486a:	f7f9 ff41 	bl	800e6f0 <HAL_RCC_GetPCLK1Freq>
 801486e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014870:	e03c      	b.n	80148ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014872:	f7f9 ff53 	bl	800e71c <HAL_RCC_GetPCLK2Freq>
 8014876:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014878:	e038      	b.n	80148ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801487a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801487e:	4618      	mov	r0, r3
 8014880:	f7fb fa98 	bl	800fdb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014888:	e030      	b.n	80148ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801488a:	f107 0318 	add.w	r3, r7, #24
 801488e:	4618      	mov	r0, r3
 8014890:	f7fb fbe4 	bl	801005c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014894:	69fb      	ldr	r3, [r7, #28]
 8014896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014898:	e028      	b.n	80148ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801489a:	4b09      	ldr	r3, [pc, #36]	; (80148c0 <UART_SetConfig+0xc2c>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	f003 0320 	and.w	r3, r3, #32
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d012      	beq.n	80148cc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80148a6:	4b06      	ldr	r3, [pc, #24]	; (80148c0 <UART_SetConfig+0xc2c>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	08db      	lsrs	r3, r3, #3
 80148ac:	f003 0303 	and.w	r3, r3, #3
 80148b0:	4a04      	ldr	r2, [pc, #16]	; (80148c4 <UART_SetConfig+0xc30>)
 80148b2:	fa22 f303 	lsr.w	r3, r2, r3
 80148b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80148b8:	e018      	b.n	80148ec <UART_SetConfig+0xc58>
 80148ba:	bf00      	nop
 80148bc:	08016ff8 	.word	0x08016ff8
 80148c0:	58024400 	.word	0x58024400
 80148c4:	03d09000 	.word	0x03d09000
 80148c8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80148cc:	4b24      	ldr	r3, [pc, #144]	; (8014960 <UART_SetConfig+0xccc>)
 80148ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80148d0:	e00c      	b.n	80148ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80148d2:	4b24      	ldr	r3, [pc, #144]	; (8014964 <UART_SetConfig+0xcd0>)
 80148d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80148d6:	e009      	b.n	80148ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80148d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80148dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80148de:	e005      	b.n	80148ec <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80148e0:	2300      	movs	r3, #0
 80148e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80148e4:	2301      	movs	r3, #1
 80148e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80148ea:	bf00      	nop
    }

    if (pclk != 0U)
 80148ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d021      	beq.n	8014936 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80148f2:	697b      	ldr	r3, [r7, #20]
 80148f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148f6:	4a1c      	ldr	r2, [pc, #112]	; (8014968 <UART_SetConfig+0xcd4>)
 80148f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148fc:	461a      	mov	r2, r3
 80148fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014900:	fbb3 f2f2 	udiv	r2, r3, r2
 8014904:	697b      	ldr	r3, [r7, #20]
 8014906:	685b      	ldr	r3, [r3, #4]
 8014908:	085b      	lsrs	r3, r3, #1
 801490a:	441a      	add	r2, r3
 801490c:	697b      	ldr	r3, [r7, #20]
 801490e:	685b      	ldr	r3, [r3, #4]
 8014910:	fbb2 f3f3 	udiv	r3, r2, r3
 8014914:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014918:	2b0f      	cmp	r3, #15
 801491a:	d909      	bls.n	8014930 <UART_SetConfig+0xc9c>
 801491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801491e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014922:	d205      	bcs.n	8014930 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014926:	b29a      	uxth	r2, r3
 8014928:	697b      	ldr	r3, [r7, #20]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	60da      	str	r2, [r3, #12]
 801492e:	e002      	b.n	8014936 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8014930:	2301      	movs	r3, #1
 8014932:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	2201      	movs	r2, #1
 801493a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801493e:	697b      	ldr	r3, [r7, #20]
 8014940:	2201      	movs	r2, #1
 8014942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014946:	697b      	ldr	r3, [r7, #20]
 8014948:	2200      	movs	r2, #0
 801494a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801494c:	697b      	ldr	r3, [r7, #20]
 801494e:	2200      	movs	r2, #0
 8014950:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8014952:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8014956:	4618      	mov	r0, r3
 8014958:	3748      	adds	r7, #72	; 0x48
 801495a:	46bd      	mov	sp, r7
 801495c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014960:	03d09000 	.word	0x03d09000
 8014964:	003d0900 	.word	0x003d0900
 8014968:	08016ff8 	.word	0x08016ff8

0801496c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801496c:	b480      	push	{r7}
 801496e:	b083      	sub	sp, #12
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014978:	f003 0301 	and.w	r3, r3, #1
 801497c:	2b00      	cmp	r3, #0
 801497e:	d00a      	beq.n	8014996 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	685b      	ldr	r3, [r3, #4]
 8014986:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	430a      	orrs	r2, r1
 8014994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801499a:	f003 0302 	and.w	r3, r3, #2
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d00a      	beq.n	80149b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	685b      	ldr	r3, [r3, #4]
 80149a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	430a      	orrs	r2, r1
 80149b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149bc:	f003 0304 	and.w	r3, r3, #4
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d00a      	beq.n	80149da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	685b      	ldr	r3, [r3, #4]
 80149ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	430a      	orrs	r2, r1
 80149d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149de:	f003 0308 	and.w	r3, r3, #8
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d00a      	beq.n	80149fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	685b      	ldr	r3, [r3, #4]
 80149ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	430a      	orrs	r2, r1
 80149fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a00:	f003 0310 	and.w	r3, r3, #16
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d00a      	beq.n	8014a1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	689b      	ldr	r3, [r3, #8]
 8014a0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	430a      	orrs	r2, r1
 8014a1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a22:	f003 0320 	and.w	r3, r3, #32
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d00a      	beq.n	8014a40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	689b      	ldr	r3, [r3, #8]
 8014a30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	430a      	orrs	r2, r1
 8014a3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d01a      	beq.n	8014a82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	685b      	ldr	r3, [r3, #4]
 8014a52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	430a      	orrs	r2, r1
 8014a60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014a6a:	d10a      	bne.n	8014a82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	685b      	ldr	r3, [r3, #4]
 8014a72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	430a      	orrs	r2, r1
 8014a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d00a      	beq.n	8014aa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	430a      	orrs	r2, r1
 8014aa2:	605a      	str	r2, [r3, #4]
  }
}
 8014aa4:	bf00      	nop
 8014aa6:	370c      	adds	r7, #12
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aae:	4770      	bx	lr

08014ab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b086      	sub	sp, #24
 8014ab4:	af02      	add	r7, sp, #8
 8014ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2200      	movs	r2, #0
 8014abc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014ac0:	f7f2 fa62 	bl	8006f88 <HAL_GetTick>
 8014ac4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	f003 0308 	and.w	r3, r3, #8
 8014ad0:	2b08      	cmp	r3, #8
 8014ad2:	d10e      	bne.n	8014af2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014ad8:	9300      	str	r3, [sp, #0]
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	2200      	movs	r2, #0
 8014ade:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	f000 f82f 	bl	8014b46 <UART_WaitOnFlagUntilTimeout>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d001      	beq.n	8014af2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014aee:	2303      	movs	r3, #3
 8014af0:	e025      	b.n	8014b3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	f003 0304 	and.w	r3, r3, #4
 8014afc:	2b04      	cmp	r3, #4
 8014afe:	d10e      	bne.n	8014b1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014b04:	9300      	str	r3, [sp, #0]
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	2200      	movs	r2, #0
 8014b0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	f000 f819 	bl	8014b46 <UART_WaitOnFlagUntilTimeout>
 8014b14:	4603      	mov	r3, r0
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d001      	beq.n	8014b1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014b1a:	2303      	movs	r3, #3
 8014b1c:	e00f      	b.n	8014b3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	2220      	movs	r2, #32
 8014b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	2220      	movs	r2, #32
 8014b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	2200      	movs	r2, #0
 8014b32:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	2200      	movs	r2, #0
 8014b38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014b3c:	2300      	movs	r3, #0
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3710      	adds	r7, #16
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}

08014b46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014b46:	b580      	push	{r7, lr}
 8014b48:	b09c      	sub	sp, #112	; 0x70
 8014b4a:	af00      	add	r7, sp, #0
 8014b4c:	60f8      	str	r0, [r7, #12]
 8014b4e:	60b9      	str	r1, [r7, #8]
 8014b50:	603b      	str	r3, [r7, #0]
 8014b52:	4613      	mov	r3, r2
 8014b54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014b56:	e0a9      	b.n	8014cac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b5e:	f000 80a5 	beq.w	8014cac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014b62:	f7f2 fa11 	bl	8006f88 <HAL_GetTick>
 8014b66:	4602      	mov	r2, r0
 8014b68:	683b      	ldr	r3, [r7, #0]
 8014b6a:	1ad3      	subs	r3, r2, r3
 8014b6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014b6e:	429a      	cmp	r2, r3
 8014b70:	d302      	bcc.n	8014b78 <UART_WaitOnFlagUntilTimeout+0x32>
 8014b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d140      	bne.n	8014bfa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b80:	e853 3f00 	ldrex	r3, [r3]
 8014b84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014b8c:	667b      	str	r3, [r7, #100]	; 0x64
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	461a      	mov	r2, r3
 8014b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014b98:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014b9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014b9e:	e841 2300 	strex	r3, r2, [r1]
 8014ba2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d1e6      	bne.n	8014b78 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	3308      	adds	r3, #8
 8014bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bb4:	e853 3f00 	ldrex	r3, [r3]
 8014bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bbc:	f023 0301 	bic.w	r3, r3, #1
 8014bc0:	663b      	str	r3, [r7, #96]	; 0x60
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	3308      	adds	r3, #8
 8014bc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014bca:	64ba      	str	r2, [r7, #72]	; 0x48
 8014bcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014bd2:	e841 2300 	strex	r3, r2, [r1]
 8014bd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d1e5      	bne.n	8014baa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2220      	movs	r2, #32
 8014be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	2220      	movs	r2, #32
 8014bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8014bf6:	2303      	movs	r3, #3
 8014bf8:	e069      	b.n	8014cce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	f003 0304 	and.w	r3, r3, #4
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d051      	beq.n	8014cac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	69db      	ldr	r3, [r3, #28]
 8014c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014c16:	d149      	bne.n	8014cac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c2a:	e853 3f00 	ldrex	r3, [r3]
 8014c2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014c36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	461a      	mov	r2, r3
 8014c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c40:	637b      	str	r3, [r7, #52]	; 0x34
 8014c42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c48:	e841 2300 	strex	r3, r2, [r1]
 8014c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d1e6      	bne.n	8014c22 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	3308      	adds	r3, #8
 8014c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	e853 3f00 	ldrex	r3, [r3]
 8014c62:	613b      	str	r3, [r7, #16]
   return(result);
 8014c64:	693b      	ldr	r3, [r7, #16]
 8014c66:	f023 0301 	bic.w	r3, r3, #1
 8014c6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	3308      	adds	r3, #8
 8014c72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014c74:	623a      	str	r2, [r7, #32]
 8014c76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c78:	69f9      	ldr	r1, [r7, #28]
 8014c7a:	6a3a      	ldr	r2, [r7, #32]
 8014c7c:	e841 2300 	strex	r3, r2, [r1]
 8014c80:	61bb      	str	r3, [r7, #24]
   return(result);
 8014c82:	69bb      	ldr	r3, [r7, #24]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d1e5      	bne.n	8014c54 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	2220      	movs	r2, #32
 8014c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	2220      	movs	r2, #32
 8014c94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	2220      	movs	r2, #32
 8014c9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8014ca8:	2303      	movs	r3, #3
 8014caa:	e010      	b.n	8014cce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	69da      	ldr	r2, [r3, #28]
 8014cb2:	68bb      	ldr	r3, [r7, #8]
 8014cb4:	4013      	ands	r3, r2
 8014cb6:	68ba      	ldr	r2, [r7, #8]
 8014cb8:	429a      	cmp	r2, r3
 8014cba:	bf0c      	ite	eq
 8014cbc:	2301      	moveq	r3, #1
 8014cbe:	2300      	movne	r3, #0
 8014cc0:	b2db      	uxtb	r3, r3
 8014cc2:	461a      	mov	r2, r3
 8014cc4:	79fb      	ldrb	r3, [r7, #7]
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	f43f af46 	beq.w	8014b58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014ccc:	2300      	movs	r3, #0
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3770      	adds	r7, #112	; 0x70
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}
	...

08014cd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b0a3      	sub	sp, #140	; 0x8c
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	60f8      	str	r0, [r7, #12]
 8014ce0:	60b9      	str	r1, [r7, #8]
 8014ce2:	4613      	mov	r3, r2
 8014ce4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	68ba      	ldr	r2, [r7, #8]
 8014cea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	88fa      	ldrh	r2, [r7, #6]
 8014cf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	88fa      	ldrh	r2, [r7, #6]
 8014cf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	689b      	ldr	r3, [r3, #8]
 8014d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014d0a:	d10e      	bne.n	8014d2a <UART_Start_Receive_IT+0x52>
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	691b      	ldr	r3, [r3, #16]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d105      	bne.n	8014d20 <UART_Start_Receive_IT+0x48>
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014d1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014d1e:	e02d      	b.n	8014d7c <UART_Start_Receive_IT+0xa4>
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	22ff      	movs	r2, #255	; 0xff
 8014d24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014d28:	e028      	b.n	8014d7c <UART_Start_Receive_IT+0xa4>
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	689b      	ldr	r3, [r3, #8]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d10d      	bne.n	8014d4e <UART_Start_Receive_IT+0x76>
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	691b      	ldr	r3, [r3, #16]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d104      	bne.n	8014d44 <UART_Start_Receive_IT+0x6c>
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	22ff      	movs	r2, #255	; 0xff
 8014d3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014d42:	e01b      	b.n	8014d7c <UART_Start_Receive_IT+0xa4>
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	227f      	movs	r2, #127	; 0x7f
 8014d48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014d4c:	e016      	b.n	8014d7c <UART_Start_Receive_IT+0xa4>
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	689b      	ldr	r3, [r3, #8]
 8014d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014d56:	d10d      	bne.n	8014d74 <UART_Start_Receive_IT+0x9c>
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	691b      	ldr	r3, [r3, #16]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d104      	bne.n	8014d6a <UART_Start_Receive_IT+0x92>
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	227f      	movs	r2, #127	; 0x7f
 8014d64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014d68:	e008      	b.n	8014d7c <UART_Start_Receive_IT+0xa4>
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	223f      	movs	r2, #63	; 0x3f
 8014d6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014d72:	e003      	b.n	8014d7c <UART_Start_Receive_IT+0xa4>
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	2200      	movs	r2, #0
 8014d78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	2222      	movs	r2, #34	; 0x22
 8014d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	3308      	adds	r3, #8
 8014d92:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014d96:	e853 3f00 	ldrex	r3, [r3]
 8014d9a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8014d9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d9e:	f043 0301 	orr.w	r3, r3, #1
 8014da2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	3308      	adds	r3, #8
 8014dac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014db0:	673a      	str	r2, [r7, #112]	; 0x70
 8014db2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014db4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8014db6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014db8:	e841 2300 	strex	r3, r2, [r1]
 8014dbc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8014dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d1e3      	bne.n	8014d8c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014dcc:	d153      	bne.n	8014e76 <UART_Start_Receive_IT+0x19e>
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014dd4:	88fa      	ldrh	r2, [r7, #6]
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	d34d      	bcc.n	8014e76 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	689b      	ldr	r3, [r3, #8]
 8014dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014de2:	d107      	bne.n	8014df4 <UART_Start_Receive_IT+0x11c>
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	691b      	ldr	r3, [r3, #16]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d103      	bne.n	8014df4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	4a4b      	ldr	r2, [pc, #300]	; (8014f1c <UART_Start_Receive_IT+0x244>)
 8014df0:	671a      	str	r2, [r3, #112]	; 0x70
 8014df2:	e002      	b.n	8014dfa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	4a4a      	ldr	r2, [pc, #296]	; (8014f20 <UART_Start_Receive_IT+0x248>)
 8014df8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	691b      	ldr	r3, [r3, #16]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d01a      	beq.n	8014e40 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e12:	e853 3f00 	ldrex	r3, [r3]
 8014e16:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014e1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	461a      	mov	r2, r3
 8014e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014e2e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014e32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014e34:	e841 2300 	strex	r3, r2, [r1]
 8014e38:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d1e4      	bne.n	8014e0a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	3308      	adds	r3, #8
 8014e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e4a:	e853 3f00 	ldrex	r3, [r3]
 8014e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014e56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	3308      	adds	r3, #8
 8014e5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014e60:	64ba      	str	r2, [r7, #72]	; 0x48
 8014e62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014e66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014e68:	e841 2300 	strex	r3, r2, [r1]
 8014e6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d1e5      	bne.n	8014e40 <UART_Start_Receive_IT+0x168>
 8014e74:	e04a      	b.n	8014f0c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	689b      	ldr	r3, [r3, #8]
 8014e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014e7e:	d107      	bne.n	8014e90 <UART_Start_Receive_IT+0x1b8>
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	691b      	ldr	r3, [r3, #16]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d103      	bne.n	8014e90 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	4a26      	ldr	r2, [pc, #152]	; (8014f24 <UART_Start_Receive_IT+0x24c>)
 8014e8c:	671a      	str	r2, [r3, #112]	; 0x70
 8014e8e:	e002      	b.n	8014e96 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	4a25      	ldr	r2, [pc, #148]	; (8014f28 <UART_Start_Receive_IT+0x250>)
 8014e94:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	2200      	movs	r2, #0
 8014e9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	691b      	ldr	r3, [r3, #16]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d019      	beq.n	8014eda <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eae:	e853 3f00 	ldrex	r3, [r3]
 8014eb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eb6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8014eba:	677b      	str	r3, [r7, #116]	; 0x74
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	461a      	mov	r2, r3
 8014ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8014ec6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ec8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ecc:	e841 2300 	strex	r3, r2, [r1]
 8014ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d1e6      	bne.n	8014ea6 <UART_Start_Receive_IT+0x1ce>
 8014ed8:	e018      	b.n	8014f0c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	e853 3f00 	ldrex	r3, [r3]
 8014ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8014ee8:	693b      	ldr	r3, [r7, #16]
 8014eea:	f043 0320 	orr.w	r3, r3, #32
 8014eee:	67bb      	str	r3, [r7, #120]	; 0x78
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	461a      	mov	r2, r3
 8014ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014ef8:	623b      	str	r3, [r7, #32]
 8014efa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014efc:	69f9      	ldr	r1, [r7, #28]
 8014efe:	6a3a      	ldr	r2, [r7, #32]
 8014f00:	e841 2300 	strex	r3, r2, [r1]
 8014f04:	61bb      	str	r3, [r7, #24]
   return(result);
 8014f06:	69bb      	ldr	r3, [r7, #24]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d1e6      	bne.n	8014eda <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8014f0c:	2300      	movs	r3, #0
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	378c      	adds	r7, #140	; 0x8c
 8014f12:	46bd      	mov	sp, r7
 8014f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f18:	4770      	bx	lr
 8014f1a:	bf00      	nop
 8014f1c:	08015979 	.word	0x08015979
 8014f20:	08015681 	.word	0x08015681
 8014f24:	0801551f 	.word	0x0801551f
 8014f28:	080153bf 	.word	0x080153bf

08014f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b095      	sub	sp, #84	; 0x54
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f3c:	e853 3f00 	ldrex	r3, [r3]
 8014f40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014f48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	461a      	mov	r2, r3
 8014f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f52:	643b      	str	r3, [r7, #64]	; 0x40
 8014f54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014f58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014f5a:	e841 2300 	strex	r3, r2, [r1]
 8014f5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d1e6      	bne.n	8014f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	3308      	adds	r3, #8
 8014f6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f6e:	6a3b      	ldr	r3, [r7, #32]
 8014f70:	e853 3f00 	ldrex	r3, [r3]
 8014f74:	61fb      	str	r3, [r7, #28]
   return(result);
 8014f76:	69fa      	ldr	r2, [r7, #28]
 8014f78:	4b1e      	ldr	r3, [pc, #120]	; (8014ff4 <UART_EndRxTransfer+0xc8>)
 8014f7a:	4013      	ands	r3, r2
 8014f7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	3308      	adds	r3, #8
 8014f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014f88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014f8e:	e841 2300 	strex	r3, r2, [r1]
 8014f92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d1e5      	bne.n	8014f66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f9e:	2b01      	cmp	r3, #1
 8014fa0:	d118      	bne.n	8014fd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	e853 3f00 	ldrex	r3, [r3]
 8014fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	f023 0310 	bic.w	r3, r3, #16
 8014fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	461a      	mov	r2, r3
 8014fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014fc0:	61bb      	str	r3, [r7, #24]
 8014fc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fc4:	6979      	ldr	r1, [r7, #20]
 8014fc6:	69ba      	ldr	r2, [r7, #24]
 8014fc8:	e841 2300 	strex	r3, r2, [r1]
 8014fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8014fce:	693b      	ldr	r3, [r7, #16]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d1e6      	bne.n	8014fa2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	2220      	movs	r2, #32
 8014fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2200      	movs	r2, #0
 8014fe0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8014fe8:	bf00      	nop
 8014fea:	3754      	adds	r7, #84	; 0x54
 8014fec:	46bd      	mov	sp, r7
 8014fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff2:	4770      	bx	lr
 8014ff4:	effffffe 	.word	0xeffffffe

08014ff8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b084      	sub	sp, #16
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	2200      	movs	r2, #0
 801500a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	2200      	movs	r2, #0
 8015012:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015016:	68f8      	ldr	r0, [r7, #12]
 8015018:	f7fe fe26 	bl	8013c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801501c:	bf00      	nop
 801501e:	3710      	adds	r7, #16
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}

08015024 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015024:	b480      	push	{r7}
 8015026:	b08f      	sub	sp, #60	; 0x3c
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015032:	2b21      	cmp	r3, #33	; 0x21
 8015034:	d14c      	bne.n	80150d0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801503c:	b29b      	uxth	r3, r3
 801503e:	2b00      	cmp	r3, #0
 8015040:	d132      	bne.n	80150a8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015048:	6a3b      	ldr	r3, [r7, #32]
 801504a:	e853 3f00 	ldrex	r3, [r3]
 801504e:	61fb      	str	r3, [r7, #28]
   return(result);
 8015050:	69fb      	ldr	r3, [r7, #28]
 8015052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015056:	637b      	str	r3, [r7, #52]	; 0x34
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	461a      	mov	r2, r3
 801505e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015062:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015068:	e841 2300 	strex	r3, r2, [r1]
 801506c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015070:	2b00      	cmp	r3, #0
 8015072:	d1e6      	bne.n	8015042 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	e853 3f00 	ldrex	r3, [r3]
 8015080:	60bb      	str	r3, [r7, #8]
   return(result);
 8015082:	68bb      	ldr	r3, [r7, #8]
 8015084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015088:	633b      	str	r3, [r7, #48]	; 0x30
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	461a      	mov	r2, r3
 8015090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015092:	61bb      	str	r3, [r7, #24]
 8015094:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015096:	6979      	ldr	r1, [r7, #20]
 8015098:	69ba      	ldr	r2, [r7, #24]
 801509a:	e841 2300 	strex	r3, r2, [r1]
 801509e:	613b      	str	r3, [r7, #16]
   return(result);
 80150a0:	693b      	ldr	r3, [r7, #16]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d1e6      	bne.n	8015074 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80150a6:	e013      	b.n	80150d0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150ac:	781a      	ldrb	r2, [r3, #0]
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150b8:	1c5a      	adds	r2, r3, #1
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	3b01      	subs	r3, #1
 80150c8:	b29a      	uxth	r2, r3
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80150d0:	bf00      	nop
 80150d2:	373c      	adds	r7, #60	; 0x3c
 80150d4:	46bd      	mov	sp, r7
 80150d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150da:	4770      	bx	lr

080150dc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80150dc:	b480      	push	{r7}
 80150de:	b091      	sub	sp, #68	; 0x44
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80150ea:	2b21      	cmp	r3, #33	; 0x21
 80150ec:	d151      	bne.n	8015192 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80150f4:	b29b      	uxth	r3, r3
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d132      	bne.n	8015160 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015102:	e853 3f00 	ldrex	r3, [r3]
 8015106:	623b      	str	r3, [r7, #32]
   return(result);
 8015108:	6a3b      	ldr	r3, [r7, #32]
 801510a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801510e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	461a      	mov	r2, r3
 8015116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015118:	633b      	str	r3, [r7, #48]	; 0x30
 801511a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801511c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801511e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015120:	e841 2300 	strex	r3, r2, [r1]
 8015124:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015128:	2b00      	cmp	r3, #0
 801512a:	d1e6      	bne.n	80150fa <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015132:	693b      	ldr	r3, [r7, #16]
 8015134:	e853 3f00 	ldrex	r3, [r3]
 8015138:	60fb      	str	r3, [r7, #12]
   return(result);
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015140:	637b      	str	r3, [r7, #52]	; 0x34
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	461a      	mov	r2, r3
 8015148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801514a:	61fb      	str	r3, [r7, #28]
 801514c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801514e:	69b9      	ldr	r1, [r7, #24]
 8015150:	69fa      	ldr	r2, [r7, #28]
 8015152:	e841 2300 	strex	r3, r2, [r1]
 8015156:	617b      	str	r3, [r7, #20]
   return(result);
 8015158:	697b      	ldr	r3, [r7, #20]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d1e6      	bne.n	801512c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801515e:	e018      	b.n	8015192 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015164:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8015166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015168:	881b      	ldrh	r3, [r3, #0]
 801516a:	461a      	mov	r2, r3
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015174:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801517a:	1c9a      	adds	r2, r3, #2
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015186:	b29b      	uxth	r3, r3
 8015188:	3b01      	subs	r3, #1
 801518a:	b29a      	uxth	r2, r3
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8015192:	bf00      	nop
 8015194:	3744      	adds	r7, #68	; 0x44
 8015196:	46bd      	mov	sp, r7
 8015198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519c:	4770      	bx	lr

0801519e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801519e:	b480      	push	{r7}
 80151a0:	b091      	sub	sp, #68	; 0x44
 80151a2:	af00      	add	r7, sp, #0
 80151a4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80151ac:	2b21      	cmp	r3, #33	; 0x21
 80151ae:	d160      	bne.n	8015272 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80151b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80151b8:	e057      	b.n	801526a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80151c0:	b29b      	uxth	r3, r3
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d133      	bne.n	801522e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	3308      	adds	r3, #8
 80151cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d0:	e853 3f00 	ldrex	r3, [r3]
 80151d4:	623b      	str	r3, [r7, #32]
   return(result);
 80151d6:	6a3b      	ldr	r3, [r7, #32]
 80151d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80151dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	3308      	adds	r3, #8
 80151e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80151e6:	633a      	str	r2, [r7, #48]	; 0x30
 80151e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80151ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80151ee:	e841 2300 	strex	r3, r2, [r1]
 80151f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80151f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d1e5      	bne.n	80151c6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015200:	693b      	ldr	r3, [r7, #16]
 8015202:	e853 3f00 	ldrex	r3, [r3]
 8015206:	60fb      	str	r3, [r7, #12]
   return(result);
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801520e:	637b      	str	r3, [r7, #52]	; 0x34
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	461a      	mov	r2, r3
 8015216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015218:	61fb      	str	r3, [r7, #28]
 801521a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801521c:	69b9      	ldr	r1, [r7, #24]
 801521e:	69fa      	ldr	r2, [r7, #28]
 8015220:	e841 2300 	strex	r3, r2, [r1]
 8015224:	617b      	str	r3, [r7, #20]
   return(result);
 8015226:	697b      	ldr	r3, [r7, #20]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d1e6      	bne.n	80151fa <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801522c:	e021      	b.n	8015272 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	69db      	ldr	r3, [r3, #28]
 8015234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015238:	2b00      	cmp	r3, #0
 801523a:	d013      	beq.n	8015264 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015240:	781a      	ldrb	r2, [r3, #0]
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801524c:	1c5a      	adds	r2, r3, #1
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015258:	b29b      	uxth	r3, r3
 801525a:	3b01      	subs	r3, #1
 801525c:	b29a      	uxth	r2, r3
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8015264:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015266:	3b01      	subs	r3, #1
 8015268:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801526a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801526c:	2b00      	cmp	r3, #0
 801526e:	d1a4      	bne.n	80151ba <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8015270:	e7ff      	b.n	8015272 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8015272:	bf00      	nop
 8015274:	3744      	adds	r7, #68	; 0x44
 8015276:	46bd      	mov	sp, r7
 8015278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527c:	4770      	bx	lr

0801527e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801527e:	b480      	push	{r7}
 8015280:	b091      	sub	sp, #68	; 0x44
 8015282:	af00      	add	r7, sp, #0
 8015284:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801528c:	2b21      	cmp	r3, #33	; 0x21
 801528e:	d165      	bne.n	801535c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015296:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8015298:	e05c      	b.n	8015354 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80152a0:	b29b      	uxth	r3, r3
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d133      	bne.n	801530e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	3308      	adds	r3, #8
 80152ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152ae:	6a3b      	ldr	r3, [r7, #32]
 80152b0:	e853 3f00 	ldrex	r3, [r3]
 80152b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80152b6:	69fb      	ldr	r3, [r7, #28]
 80152b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80152bc:	637b      	str	r3, [r7, #52]	; 0x34
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	3308      	adds	r3, #8
 80152c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80152c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80152c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80152cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80152ce:	e841 2300 	strex	r3, r2, [r1]
 80152d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80152d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d1e5      	bne.n	80152a6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	e853 3f00 	ldrex	r3, [r3]
 80152e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152ee:	633b      	str	r3, [r7, #48]	; 0x30
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	461a      	mov	r2, r3
 80152f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152f8:	61bb      	str	r3, [r7, #24]
 80152fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152fc:	6979      	ldr	r1, [r7, #20]
 80152fe:	69ba      	ldr	r2, [r7, #24]
 8015300:	e841 2300 	strex	r3, r2, [r1]
 8015304:	613b      	str	r3, [r7, #16]
   return(result);
 8015306:	693b      	ldr	r3, [r7, #16]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d1e6      	bne.n	80152da <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801530c:	e026      	b.n	801535c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	69db      	ldr	r3, [r3, #28]
 8015314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015318:	2b00      	cmp	r3, #0
 801531a:	d018      	beq.n	801534e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015320:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8015322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015324:	881b      	ldrh	r3, [r3, #0]
 8015326:	461a      	mov	r2, r3
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015330:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015336:	1c9a      	adds	r2, r3, #2
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015342:	b29b      	uxth	r3, r3
 8015344:	3b01      	subs	r3, #1
 8015346:	b29a      	uxth	r2, r3
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801534e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015350:	3b01      	subs	r3, #1
 8015352:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8015354:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015356:	2b00      	cmp	r3, #0
 8015358:	d19f      	bne.n	801529a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801535a:	e7ff      	b.n	801535c <UART_TxISR_16BIT_FIFOEN+0xde>
 801535c:	bf00      	nop
 801535e:	3744      	adds	r7, #68	; 0x44
 8015360:	46bd      	mov	sp, r7
 8015362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015366:	4770      	bx	lr

08015368 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b088      	sub	sp, #32
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	e853 3f00 	ldrex	r3, [r3]
 801537c:	60bb      	str	r3, [r7, #8]
   return(result);
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015384:	61fb      	str	r3, [r7, #28]
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	461a      	mov	r2, r3
 801538c:	69fb      	ldr	r3, [r7, #28]
 801538e:	61bb      	str	r3, [r7, #24]
 8015390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015392:	6979      	ldr	r1, [r7, #20]
 8015394:	69ba      	ldr	r2, [r7, #24]
 8015396:	e841 2300 	strex	r3, r2, [r1]
 801539a:	613b      	str	r3, [r7, #16]
   return(result);
 801539c:	693b      	ldr	r3, [r7, #16]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d1e6      	bne.n	8015370 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	2220      	movs	r2, #32
 80153a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2200      	movs	r2, #0
 80153ae:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80153b0:	6878      	ldr	r0, [r7, #4]
 80153b2:	f7fe fc4f 	bl	8013c54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80153b6:	bf00      	nop
 80153b8:	3720      	adds	r7, #32
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}

080153be <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80153be:	b580      	push	{r7, lr}
 80153c0:	b096      	sub	sp, #88	; 0x58
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80153cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80153d6:	2b22      	cmp	r3, #34	; 0x22
 80153d8:	f040 8095 	bne.w	8015506 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153e2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80153e6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80153ea:	b2d9      	uxtb	r1, r3
 80153ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80153f0:	b2da      	uxtb	r2, r3
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80153f6:	400a      	ands	r2, r1
 80153f8:	b2d2      	uxtb	r2, r2
 80153fa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015400:	1c5a      	adds	r2, r3, #1
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801540c:	b29b      	uxth	r3, r3
 801540e:	3b01      	subs	r3, #1
 8015410:	b29a      	uxth	r2, r3
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801541e:	b29b      	uxth	r3, r3
 8015420:	2b00      	cmp	r3, #0
 8015422:	d178      	bne.n	8015516 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801542c:	e853 3f00 	ldrex	r3, [r3]
 8015430:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015438:	653b      	str	r3, [r7, #80]	; 0x50
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	461a      	mov	r2, r3
 8015440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015442:	647b      	str	r3, [r7, #68]	; 0x44
 8015444:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015446:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015448:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801544a:	e841 2300 	strex	r3, r2, [r1]
 801544e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015452:	2b00      	cmp	r3, #0
 8015454:	d1e6      	bne.n	8015424 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	3308      	adds	r3, #8
 801545c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015460:	e853 3f00 	ldrex	r3, [r3]
 8015464:	623b      	str	r3, [r7, #32]
   return(result);
 8015466:	6a3b      	ldr	r3, [r7, #32]
 8015468:	f023 0301 	bic.w	r3, r3, #1
 801546c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	3308      	adds	r3, #8
 8015474:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015476:	633a      	str	r2, [r7, #48]	; 0x30
 8015478:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801547a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801547c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801547e:	e841 2300 	strex	r3, r2, [r1]
 8015482:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015486:	2b00      	cmp	r3, #0
 8015488:	d1e5      	bne.n	8015456 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	2220      	movs	r2, #32
 801548e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2200      	movs	r2, #0
 8015496:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801549c:	2b01      	cmp	r3, #1
 801549e:	d12e      	bne.n	80154fe <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	2200      	movs	r2, #0
 80154a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154ac:	693b      	ldr	r3, [r7, #16]
 80154ae:	e853 3f00 	ldrex	r3, [r3]
 80154b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	f023 0310 	bic.w	r3, r3, #16
 80154ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	461a      	mov	r2, r3
 80154c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80154c4:	61fb      	str	r3, [r7, #28]
 80154c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154c8:	69b9      	ldr	r1, [r7, #24]
 80154ca:	69fa      	ldr	r2, [r7, #28]
 80154cc:	e841 2300 	strex	r3, r2, [r1]
 80154d0:	617b      	str	r3, [r7, #20]
   return(result);
 80154d2:	697b      	ldr	r3, [r7, #20]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d1e6      	bne.n	80154a6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	69db      	ldr	r3, [r3, #28]
 80154de:	f003 0310 	and.w	r3, r3, #16
 80154e2:	2b10      	cmp	r3, #16
 80154e4:	d103      	bne.n	80154ee <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2210      	movs	r2, #16
 80154ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80154f4:	4619      	mov	r1, r3
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f7fe fbc0 	bl	8013c7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80154fc:	e00b      	b.n	8015516 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80154fe:	6878      	ldr	r0, [r7, #4]
 8015500:	f7ed ff9c 	bl	800343c <HAL_UART_RxCpltCallback>
}
 8015504:	e007      	b.n	8015516 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	699a      	ldr	r2, [r3, #24]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	f042 0208 	orr.w	r2, r2, #8
 8015514:	619a      	str	r2, [r3, #24]
}
 8015516:	bf00      	nop
 8015518:	3758      	adds	r7, #88	; 0x58
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}

0801551e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801551e:	b580      	push	{r7, lr}
 8015520:	b096      	sub	sp, #88	; 0x58
 8015522:	af00      	add	r7, sp, #0
 8015524:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801552c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015536:	2b22      	cmp	r3, #34	; 0x22
 8015538:	f040 8095 	bne.w	8015666 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015542:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801554a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801554c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8015550:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015554:	4013      	ands	r3, r2
 8015556:	b29a      	uxth	r2, r3
 8015558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801555a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015560:	1c9a      	adds	r2, r3, #2
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801556c:	b29b      	uxth	r3, r3
 801556e:	3b01      	subs	r3, #1
 8015570:	b29a      	uxth	r2, r3
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801557e:	b29b      	uxth	r3, r3
 8015580:	2b00      	cmp	r3, #0
 8015582:	d178      	bne.n	8015676 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801558a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801558c:	e853 3f00 	ldrex	r3, [r3]
 8015590:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015594:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015598:	64fb      	str	r3, [r7, #76]	; 0x4c
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	461a      	mov	r2, r3
 80155a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80155a2:	643b      	str	r3, [r7, #64]	; 0x40
 80155a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80155a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80155aa:	e841 2300 	strex	r3, r2, [r1]
 80155ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80155b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d1e6      	bne.n	8015584 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	3308      	adds	r3, #8
 80155bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155be:	6a3b      	ldr	r3, [r7, #32]
 80155c0:	e853 3f00 	ldrex	r3, [r3]
 80155c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80155c6:	69fb      	ldr	r3, [r7, #28]
 80155c8:	f023 0301 	bic.w	r3, r3, #1
 80155cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	3308      	adds	r3, #8
 80155d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80155d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80155d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80155dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155de:	e841 2300 	strex	r3, r2, [r1]
 80155e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80155e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d1e5      	bne.n	80155b6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	2220      	movs	r2, #32
 80155ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	2200      	movs	r2, #0
 80155f6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155fc:	2b01      	cmp	r3, #1
 80155fe:	d12e      	bne.n	801565e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2200      	movs	r2, #0
 8015604:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	e853 3f00 	ldrex	r3, [r3]
 8015612:	60bb      	str	r3, [r7, #8]
   return(result);
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	f023 0310 	bic.w	r3, r3, #16
 801561a:	647b      	str	r3, [r7, #68]	; 0x44
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	461a      	mov	r2, r3
 8015622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015624:	61bb      	str	r3, [r7, #24]
 8015626:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015628:	6979      	ldr	r1, [r7, #20]
 801562a:	69ba      	ldr	r2, [r7, #24]
 801562c:	e841 2300 	strex	r3, r2, [r1]
 8015630:	613b      	str	r3, [r7, #16]
   return(result);
 8015632:	693b      	ldr	r3, [r7, #16]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d1e6      	bne.n	8015606 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	69db      	ldr	r3, [r3, #28]
 801563e:	f003 0310 	and.w	r3, r3, #16
 8015642:	2b10      	cmp	r3, #16
 8015644:	d103      	bne.n	801564e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	2210      	movs	r2, #16
 801564c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015654:	4619      	mov	r1, r3
 8015656:	6878      	ldr	r0, [r7, #4]
 8015658:	f7fe fb10 	bl	8013c7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801565c:	e00b      	b.n	8015676 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f7ed feec 	bl	800343c <HAL_UART_RxCpltCallback>
}
 8015664:	e007      	b.n	8015676 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	699a      	ldr	r2, [r3, #24]
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	f042 0208 	orr.w	r2, r2, #8
 8015674:	619a      	str	r2, [r3, #24]
}
 8015676:	bf00      	nop
 8015678:	3758      	adds	r7, #88	; 0x58
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}
	...

08015680 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b0a6      	sub	sp, #152	; 0x98
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801568e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	69db      	ldr	r3, [r3, #28]
 8015698:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	689b      	ldr	r3, [r3, #8]
 80156ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80156b6:	2b22      	cmp	r3, #34	; 0x22
 80156b8:	f040 814d 	bne.w	8015956 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80156c2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80156c6:	e0f4      	b.n	80158b2 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156ce:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80156d2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80156d6:	b2d9      	uxtb	r1, r3
 80156d8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80156dc:	b2da      	uxtb	r2, r3
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156e2:	400a      	ands	r2, r1
 80156e4:	b2d2      	uxtb	r2, r2
 80156e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156ec:	1c5a      	adds	r2, r3, #1
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80156f8:	b29b      	uxth	r3, r3
 80156fa:	3b01      	subs	r3, #1
 80156fc:	b29a      	uxth	r2, r3
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	69db      	ldr	r3, [r3, #28]
 801570a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801570e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015712:	f003 0307 	and.w	r3, r3, #7
 8015716:	2b00      	cmp	r3, #0
 8015718:	d053      	beq.n	80157c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801571a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801571e:	f003 0301 	and.w	r3, r3, #1
 8015722:	2b00      	cmp	r3, #0
 8015724:	d011      	beq.n	801574a <UART_RxISR_8BIT_FIFOEN+0xca>
 8015726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801572e:	2b00      	cmp	r3, #0
 8015730:	d00b      	beq.n	801574a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	2201      	movs	r2, #1
 8015738:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015740:	f043 0201 	orr.w	r2, r3, #1
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801574a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801574e:	f003 0302 	and.w	r3, r3, #2
 8015752:	2b00      	cmp	r3, #0
 8015754:	d011      	beq.n	801577a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8015756:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801575a:	f003 0301 	and.w	r3, r3, #1
 801575e:	2b00      	cmp	r3, #0
 8015760:	d00b      	beq.n	801577a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	2202      	movs	r2, #2
 8015768:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015770:	f043 0204 	orr.w	r2, r3, #4
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801577a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801577e:	f003 0304 	and.w	r3, r3, #4
 8015782:	2b00      	cmp	r3, #0
 8015784:	d011      	beq.n	80157aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8015786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801578a:	f003 0301 	and.w	r3, r3, #1
 801578e:	2b00      	cmp	r3, #0
 8015790:	d00b      	beq.n	80157aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	2204      	movs	r2, #4
 8015798:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80157a0:	f043 0202 	orr.w	r2, r3, #2
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d006      	beq.n	80157c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80157b4:	6878      	ldr	r0, [r7, #4]
 80157b6:	f7fe fa57 	bl	8013c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	2200      	movs	r2, #0
 80157be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80157c8:	b29b      	uxth	r3, r3
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d171      	bne.n	80158b2 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80157d6:	e853 3f00 	ldrex	r3, [r3]
 80157da:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80157dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80157de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80157e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	461a      	mov	r2, r3
 80157ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80157f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80157f2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157f4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80157f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80157f8:	e841 2300 	strex	r3, r2, [r1]
 80157fc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80157fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015800:	2b00      	cmp	r3, #0
 8015802:	d1e4      	bne.n	80157ce <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	3308      	adds	r3, #8
 801580a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801580c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801580e:	e853 3f00 	ldrex	r3, [r3]
 8015812:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015814:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015816:	4b56      	ldr	r3, [pc, #344]	; (8015970 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8015818:	4013      	ands	r3, r2
 801581a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	3308      	adds	r3, #8
 8015822:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015824:	657a      	str	r2, [r7, #84]	; 0x54
 8015826:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015828:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801582a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801582c:	e841 2300 	strex	r3, r2, [r1]
 8015830:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015834:	2b00      	cmp	r3, #0
 8015836:	d1e5      	bne.n	8015804 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	2220      	movs	r2, #32
 801583c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	2200      	movs	r2, #0
 8015844:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801584a:	2b01      	cmp	r3, #1
 801584c:	d12e      	bne.n	80158ac <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	2200      	movs	r2, #0
 8015852:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801585a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801585c:	e853 3f00 	ldrex	r3, [r3]
 8015860:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015864:	f023 0310 	bic.w	r3, r3, #16
 8015868:	67bb      	str	r3, [r7, #120]	; 0x78
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	461a      	mov	r2, r3
 8015870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015872:	643b      	str	r3, [r7, #64]	; 0x40
 8015874:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015876:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015878:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801587a:	e841 2300 	strex	r3, r2, [r1]
 801587e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015882:	2b00      	cmp	r3, #0
 8015884:	d1e6      	bne.n	8015854 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	69db      	ldr	r3, [r3, #28]
 801588c:	f003 0310 	and.w	r3, r3, #16
 8015890:	2b10      	cmp	r3, #16
 8015892:	d103      	bne.n	801589c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	2210      	movs	r2, #16
 801589a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80158a2:	4619      	mov	r1, r3
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	f7fe f9e9 	bl	8013c7c <HAL_UARTEx_RxEventCallback>
 80158aa:	e002      	b.n	80158b2 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80158ac:	6878      	ldr	r0, [r7, #4]
 80158ae:	f7ed fdc5 	bl	800343c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80158b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d006      	beq.n	80158c8 <UART_RxISR_8BIT_FIFOEN+0x248>
 80158ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80158be:	f003 0320 	and.w	r3, r3, #32
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	f47f af00 	bne.w	80156c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80158ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80158d2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d045      	beq.n	8015966 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80158e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80158e4:	429a      	cmp	r2, r3
 80158e6:	d23e      	bcs.n	8015966 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	3308      	adds	r3, #8
 80158ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158f0:	6a3b      	ldr	r3, [r7, #32]
 80158f2:	e853 3f00 	ldrex	r3, [r3]
 80158f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80158f8:	69fb      	ldr	r3, [r7, #28]
 80158fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80158fe:	673b      	str	r3, [r7, #112]	; 0x70
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	3308      	adds	r3, #8
 8015906:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015908:	62fa      	str	r2, [r7, #44]	; 0x2c
 801590a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801590c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801590e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015910:	e841 2300 	strex	r3, r2, [r1]
 8015914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015918:	2b00      	cmp	r3, #0
 801591a:	d1e5      	bne.n	80158e8 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	4a15      	ldr	r2, [pc, #84]	; (8015974 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8015920:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	e853 3f00 	ldrex	r3, [r3]
 801592e:	60bb      	str	r3, [r7, #8]
   return(result);
 8015930:	68bb      	ldr	r3, [r7, #8]
 8015932:	f043 0320 	orr.w	r3, r3, #32
 8015936:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	461a      	mov	r2, r3
 801593e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015940:	61bb      	str	r3, [r7, #24]
 8015942:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015944:	6979      	ldr	r1, [r7, #20]
 8015946:	69ba      	ldr	r2, [r7, #24]
 8015948:	e841 2300 	strex	r3, r2, [r1]
 801594c:	613b      	str	r3, [r7, #16]
   return(result);
 801594e:	693b      	ldr	r3, [r7, #16]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d1e6      	bne.n	8015922 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015954:	e007      	b.n	8015966 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	699a      	ldr	r2, [r3, #24]
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	f042 0208 	orr.w	r2, r2, #8
 8015964:	619a      	str	r2, [r3, #24]
}
 8015966:	bf00      	nop
 8015968:	3798      	adds	r7, #152	; 0x98
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	effffffe 	.word	0xeffffffe
 8015974:	080153bf 	.word	0x080153bf

08015978 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b0a8      	sub	sp, #160	; 0xa0
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015986:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	69db      	ldr	r3, [r3, #28]
 8015990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	689b      	ldr	r3, [r3, #8]
 80159a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80159ae:	2b22      	cmp	r3, #34	; 0x22
 80159b0:	f040 8151 	bne.w	8015c56 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80159ba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80159be:	e0f8      	b.n	8015bb2 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159c6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80159ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80159d2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80159d6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80159da:	4013      	ands	r3, r2
 80159dc:	b29a      	uxth	r2, r3
 80159de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80159e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80159e8:	1c9a      	adds	r2, r3, #2
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80159f4:	b29b      	uxth	r3, r3
 80159f6:	3b01      	subs	r3, #1
 80159f8:	b29a      	uxth	r2, r3
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	69db      	ldr	r3, [r3, #28]
 8015a06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8015a0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015a0e:	f003 0307 	and.w	r3, r3, #7
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d053      	beq.n	8015abe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015a16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015a1a:	f003 0301 	and.w	r3, r3, #1
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d011      	beq.n	8015a46 <UART_RxISR_16BIT_FIFOEN+0xce>
 8015a22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d00b      	beq.n	8015a46 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	2201      	movs	r2, #1
 8015a34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015a3c:	f043 0201 	orr.w	r2, r3, #1
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015a46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015a4a:	f003 0302 	and.w	r3, r3, #2
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d011      	beq.n	8015a76 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8015a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015a56:	f003 0301 	and.w	r3, r3, #1
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d00b      	beq.n	8015a76 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	2202      	movs	r2, #2
 8015a64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015a6c:	f043 0204 	orr.w	r2, r3, #4
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015a76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015a7a:	f003 0304 	and.w	r3, r3, #4
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d011      	beq.n	8015aa6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8015a82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015a86:	f003 0301 	and.w	r3, r3, #1
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d00b      	beq.n	8015aa6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	2204      	movs	r2, #4
 8015a94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015a9c:	f043 0202 	orr.w	r2, r3, #2
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d006      	beq.n	8015abe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f7fe f8d9 	bl	8013c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	2200      	movs	r2, #0
 8015aba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015ac4:	b29b      	uxth	r3, r3
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d173      	bne.n	8015bb2 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015ad2:	e853 3f00 	ldrex	r3, [r3]
 8015ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8015ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	461a      	mov	r2, r3
 8015ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015aec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015aee:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015af0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015af2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015af4:	e841 2300 	strex	r3, r2, [r1]
 8015af8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8015afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d1e4      	bne.n	8015aca <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	3308      	adds	r3, #8
 8015b06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b0a:	e853 3f00 	ldrex	r3, [r3]
 8015b0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015b10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015b12:	4b57      	ldr	r3, [pc, #348]	; (8015c70 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8015b14:	4013      	ands	r3, r2
 8015b16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	3308      	adds	r3, #8
 8015b20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015b24:	65ba      	str	r2, [r7, #88]	; 0x58
 8015b26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015b2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015b2c:	e841 2300 	strex	r3, r2, [r1]
 8015b30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d1e3      	bne.n	8015b00 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	2220      	movs	r2, #32
 8015b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	2200      	movs	r2, #0
 8015b44:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b4a:	2b01      	cmp	r3, #1
 8015b4c:	d12e      	bne.n	8015bac <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	2200      	movs	r2, #0
 8015b52:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b5c:	e853 3f00 	ldrex	r3, [r3]
 8015b60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b64:	f023 0310 	bic.w	r3, r3, #16
 8015b68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	461a      	mov	r2, r3
 8015b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015b72:	647b      	str	r3, [r7, #68]	; 0x44
 8015b74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015b78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b7a:	e841 2300 	strex	r3, r2, [r1]
 8015b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d1e6      	bne.n	8015b54 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	69db      	ldr	r3, [r3, #28]
 8015b8c:	f003 0310 	and.w	r3, r3, #16
 8015b90:	2b10      	cmp	r3, #16
 8015b92:	d103      	bne.n	8015b9c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	2210      	movs	r2, #16
 8015b9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015ba2:	4619      	mov	r1, r3
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	f7fe f869 	bl	8013c7c <HAL_UARTEx_RxEventCallback>
 8015baa:	e002      	b.n	8015bb2 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	f7ed fc45 	bl	800343c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015bb2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d006      	beq.n	8015bc8 <UART_RxISR_16BIT_FIFOEN+0x250>
 8015bba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015bbe:	f003 0320 	and.w	r3, r3, #32
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	f47f aefc 	bne.w	80159c0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015bce:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015bd2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d045      	beq.n	8015c66 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015be0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8015be4:	429a      	cmp	r2, r3
 8015be6:	d23e      	bcs.n	8015c66 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	3308      	adds	r3, #8
 8015bee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf2:	e853 3f00 	ldrex	r3, [r3]
 8015bf6:	623b      	str	r3, [r7, #32]
   return(result);
 8015bf8:	6a3b      	ldr	r3, [r7, #32]
 8015bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015bfe:	677b      	str	r3, [r7, #116]	; 0x74
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	3308      	adds	r3, #8
 8015c06:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015c08:	633a      	str	r2, [r7, #48]	; 0x30
 8015c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c10:	e841 2300 	strex	r3, r2, [r1]
 8015c14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d1e5      	bne.n	8015be8 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	4a15      	ldr	r2, [pc, #84]	; (8015c74 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8015c20:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c28:	693b      	ldr	r3, [r7, #16]
 8015c2a:	e853 3f00 	ldrex	r3, [r3]
 8015c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	f043 0320 	orr.w	r3, r3, #32
 8015c36:	673b      	str	r3, [r7, #112]	; 0x70
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	461a      	mov	r2, r3
 8015c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015c40:	61fb      	str	r3, [r7, #28]
 8015c42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c44:	69b9      	ldr	r1, [r7, #24]
 8015c46:	69fa      	ldr	r2, [r7, #28]
 8015c48:	e841 2300 	strex	r3, r2, [r1]
 8015c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8015c4e:	697b      	ldr	r3, [r7, #20]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d1e6      	bne.n	8015c22 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015c54:	e007      	b.n	8015c66 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	699a      	ldr	r2, [r3, #24]
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	f042 0208 	orr.w	r2, r2, #8
 8015c64:	619a      	str	r2, [r3, #24]
}
 8015c66:	bf00      	nop
 8015c68:	37a0      	adds	r7, #160	; 0xa0
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	effffffe 	.word	0xeffffffe
 8015c74:	0801551f 	.word	0x0801551f

08015c78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8015c78:	b480      	push	{r7}
 8015c7a:	b083      	sub	sp, #12
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8015c80:	bf00      	nop
 8015c82:	370c      	adds	r7, #12
 8015c84:	46bd      	mov	sp, r7
 8015c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8a:	4770      	bx	lr

08015c8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8015c8c:	b480      	push	{r7}
 8015c8e:	b083      	sub	sp, #12
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8015c94:	bf00      	nop
 8015c96:	370c      	adds	r7, #12
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9e:	4770      	bx	lr

08015ca0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8015ca0:	b480      	push	{r7}
 8015ca2:	b083      	sub	sp, #12
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8015ca8:	bf00      	nop
 8015caa:	370c      	adds	r7, #12
 8015cac:	46bd      	mov	sp, r7
 8015cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb2:	4770      	bx	lr

08015cb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8015cb4:	b480      	push	{r7}
 8015cb6:	b085      	sub	sp, #20
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015cc2:	2b01      	cmp	r3, #1
 8015cc4:	d101      	bne.n	8015cca <HAL_UARTEx_DisableFifoMode+0x16>
 8015cc6:	2302      	movs	r3, #2
 8015cc8:	e027      	b.n	8015d1a <HAL_UARTEx_DisableFifoMode+0x66>
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2201      	movs	r2, #1
 8015cce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	2224      	movs	r2, #36	; 0x24
 8015cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	681a      	ldr	r2, [r3, #0]
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	f022 0201 	bic.w	r2, r2, #1
 8015cf0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8015cf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	68fa      	ldr	r2, [r7, #12]
 8015d06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2220      	movs	r2, #32
 8015d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	2200      	movs	r2, #0
 8015d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015d18:	2300      	movs	r3, #0
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3714      	adds	r7, #20
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d24:	4770      	bx	lr

08015d26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015d26:	b580      	push	{r7, lr}
 8015d28:	b084      	sub	sp, #16
 8015d2a:	af00      	add	r7, sp, #0
 8015d2c:	6078      	str	r0, [r7, #4]
 8015d2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015d36:	2b01      	cmp	r3, #1
 8015d38:	d101      	bne.n	8015d3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8015d3a:	2302      	movs	r3, #2
 8015d3c:	e02d      	b.n	8015d9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	2201      	movs	r2, #1
 8015d42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	2224      	movs	r2, #36	; 0x24
 8015d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	681a      	ldr	r2, [r3, #0]
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	f022 0201 	bic.w	r2, r2, #1
 8015d64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	689b      	ldr	r3, [r3, #8]
 8015d6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	683a      	ldr	r2, [r7, #0]
 8015d76:	430a      	orrs	r2, r1
 8015d78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f000 f850 	bl	8015e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	68fa      	ldr	r2, [r7, #12]
 8015d86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2220      	movs	r2, #32
 8015d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2200      	movs	r2, #0
 8015d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015d98:	2300      	movs	r3, #0
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3710      	adds	r7, #16
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}

08015da2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015da2:	b580      	push	{r7, lr}
 8015da4:	b084      	sub	sp, #16
 8015da6:	af00      	add	r7, sp, #0
 8015da8:	6078      	str	r0, [r7, #4]
 8015daa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015db2:	2b01      	cmp	r3, #1
 8015db4:	d101      	bne.n	8015dba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8015db6:	2302      	movs	r3, #2
 8015db8:	e02d      	b.n	8015e16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	2201      	movs	r2, #1
 8015dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	2224      	movs	r2, #36	; 0x24
 8015dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	681a      	ldr	r2, [r3, #0]
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	f022 0201 	bic.w	r2, r2, #1
 8015de0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	689b      	ldr	r3, [r3, #8]
 8015de8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	683a      	ldr	r2, [r7, #0]
 8015df2:	430a      	orrs	r2, r1
 8015df4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	f000 f812 	bl	8015e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	68fa      	ldr	r2, [r7, #12]
 8015e02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	2220      	movs	r2, #32
 8015e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	2200      	movs	r2, #0
 8015e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015e14:	2300      	movs	r3, #0
}
 8015e16:	4618      	mov	r0, r3
 8015e18:	3710      	adds	r7, #16
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}
	...

08015e20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015e20:	b480      	push	{r7}
 8015e22:	b085      	sub	sp, #20
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d108      	bne.n	8015e42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2201      	movs	r2, #1
 8015e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2201      	movs	r2, #1
 8015e3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015e40:	e031      	b.n	8015ea6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015e42:	2310      	movs	r3, #16
 8015e44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8015e46:	2310      	movs	r3, #16
 8015e48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	689b      	ldr	r3, [r3, #8]
 8015e50:	0e5b      	lsrs	r3, r3, #25
 8015e52:	b2db      	uxtb	r3, r3
 8015e54:	f003 0307 	and.w	r3, r3, #7
 8015e58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	689b      	ldr	r3, [r3, #8]
 8015e60:	0f5b      	lsrs	r3, r3, #29
 8015e62:	b2db      	uxtb	r3, r3
 8015e64:	f003 0307 	and.w	r3, r3, #7
 8015e68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015e6a:	7bbb      	ldrb	r3, [r7, #14]
 8015e6c:	7b3a      	ldrb	r2, [r7, #12]
 8015e6e:	4911      	ldr	r1, [pc, #68]	; (8015eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8015e70:	5c8a      	ldrb	r2, [r1, r2]
 8015e72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8015e76:	7b3a      	ldrb	r2, [r7, #12]
 8015e78:	490f      	ldr	r1, [pc, #60]	; (8015eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8015e7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015e7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015e80:	b29a      	uxth	r2, r3
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015e88:	7bfb      	ldrb	r3, [r7, #15]
 8015e8a:	7b7a      	ldrb	r2, [r7, #13]
 8015e8c:	4909      	ldr	r1, [pc, #36]	; (8015eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8015e8e:	5c8a      	ldrb	r2, [r1, r2]
 8015e90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015e94:	7b7a      	ldrb	r2, [r7, #13]
 8015e96:	4908      	ldr	r1, [pc, #32]	; (8015eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8015e98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015e9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8015e9e:	b29a      	uxth	r2, r3
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8015ea6:	bf00      	nop
 8015ea8:	3714      	adds	r7, #20
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb0:	4770      	bx	lr
 8015eb2:	bf00      	nop
 8015eb4:	08017010 	.word	0x08017010
 8015eb8:	08017018 	.word	0x08017018

08015ebc <__errno>:
 8015ebc:	4b01      	ldr	r3, [pc, #4]	; (8015ec4 <__errno+0x8>)
 8015ebe:	6818      	ldr	r0, [r3, #0]
 8015ec0:	4770      	bx	lr
 8015ec2:	bf00      	nop
 8015ec4:	20000030 	.word	0x20000030

08015ec8 <__libc_init_array>:
 8015ec8:	b570      	push	{r4, r5, r6, lr}
 8015eca:	4d0d      	ldr	r5, [pc, #52]	; (8015f00 <__libc_init_array+0x38>)
 8015ecc:	4c0d      	ldr	r4, [pc, #52]	; (8015f04 <__libc_init_array+0x3c>)
 8015ece:	1b64      	subs	r4, r4, r5
 8015ed0:	10a4      	asrs	r4, r4, #2
 8015ed2:	2600      	movs	r6, #0
 8015ed4:	42a6      	cmp	r6, r4
 8015ed6:	d109      	bne.n	8015eec <__libc_init_array+0x24>
 8015ed8:	4d0b      	ldr	r5, [pc, #44]	; (8015f08 <__libc_init_array+0x40>)
 8015eda:	4c0c      	ldr	r4, [pc, #48]	; (8015f0c <__libc_init_array+0x44>)
 8015edc:	f001 f846 	bl	8016f6c <_init>
 8015ee0:	1b64      	subs	r4, r4, r5
 8015ee2:	10a4      	asrs	r4, r4, #2
 8015ee4:	2600      	movs	r6, #0
 8015ee6:	42a6      	cmp	r6, r4
 8015ee8:	d105      	bne.n	8015ef6 <__libc_init_array+0x2e>
 8015eea:	bd70      	pop	{r4, r5, r6, pc}
 8015eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8015ef0:	4798      	blx	r3
 8015ef2:	3601      	adds	r6, #1
 8015ef4:	e7ee      	b.n	8015ed4 <__libc_init_array+0xc>
 8015ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8015efa:	4798      	blx	r3
 8015efc:	3601      	adds	r6, #1
 8015efe:	e7f2      	b.n	8015ee6 <__libc_init_array+0x1e>
 8015f00:	08017270 	.word	0x08017270
 8015f04:	08017270 	.word	0x08017270
 8015f08:	08017270 	.word	0x08017270
 8015f0c:	08017274 	.word	0x08017274

08015f10 <memset>:
 8015f10:	4402      	add	r2, r0
 8015f12:	4603      	mov	r3, r0
 8015f14:	4293      	cmp	r3, r2
 8015f16:	d100      	bne.n	8015f1a <memset+0xa>
 8015f18:	4770      	bx	lr
 8015f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8015f1e:	e7f9      	b.n	8015f14 <memset+0x4>

08015f20 <cos>:
 8015f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015f22:	eeb0 7b40 	vmov.f64	d7, d0
 8015f26:	ee17 3a90 	vmov	r3, s15
 8015f2a:	4a21      	ldr	r2, [pc, #132]	; (8015fb0 <cos+0x90>)
 8015f2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015f30:	4293      	cmp	r3, r2
 8015f32:	dc06      	bgt.n	8015f42 <cos+0x22>
 8015f34:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8015fa8 <cos+0x88>
 8015f38:	b005      	add	sp, #20
 8015f3a:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f3e:	f000 bab7 	b.w	80164b0 <__kernel_cos>
 8015f42:	4a1c      	ldr	r2, [pc, #112]	; (8015fb4 <cos+0x94>)
 8015f44:	4293      	cmp	r3, r2
 8015f46:	dd04      	ble.n	8015f52 <cos+0x32>
 8015f48:	ee30 0b40 	vsub.f64	d0, d0, d0
 8015f4c:	b005      	add	sp, #20
 8015f4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015f52:	4668      	mov	r0, sp
 8015f54:	f000 f964 	bl	8016220 <__ieee754_rem_pio2>
 8015f58:	f000 0003 	and.w	r0, r0, #3
 8015f5c:	2801      	cmp	r0, #1
 8015f5e:	d009      	beq.n	8015f74 <cos+0x54>
 8015f60:	2802      	cmp	r0, #2
 8015f62:	d010      	beq.n	8015f86 <cos+0x66>
 8015f64:	b9b0      	cbnz	r0, 8015f94 <cos+0x74>
 8015f66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015f6a:	ed9d 0b00 	vldr	d0, [sp]
 8015f6e:	f000 fa9f 	bl	80164b0 <__kernel_cos>
 8015f72:	e7eb      	b.n	8015f4c <cos+0x2c>
 8015f74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015f78:	ed9d 0b00 	vldr	d0, [sp]
 8015f7c:	f000 fd9c 	bl	8016ab8 <__kernel_sin>
 8015f80:	eeb1 0b40 	vneg.f64	d0, d0
 8015f84:	e7e2      	b.n	8015f4c <cos+0x2c>
 8015f86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015f8a:	ed9d 0b00 	vldr	d0, [sp]
 8015f8e:	f000 fa8f 	bl	80164b0 <__kernel_cos>
 8015f92:	e7f5      	b.n	8015f80 <cos+0x60>
 8015f94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015f98:	ed9d 0b00 	vldr	d0, [sp]
 8015f9c:	2001      	movs	r0, #1
 8015f9e:	f000 fd8b 	bl	8016ab8 <__kernel_sin>
 8015fa2:	e7d3      	b.n	8015f4c <cos+0x2c>
 8015fa4:	f3af 8000 	nop.w
	...
 8015fb0:	3fe921fb 	.word	0x3fe921fb
 8015fb4:	7fefffff 	.word	0x7fefffff

08015fb8 <sin>:
 8015fb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015fba:	eeb0 7b40 	vmov.f64	d7, d0
 8015fbe:	ee17 3a90 	vmov	r3, s15
 8015fc2:	4a21      	ldr	r2, [pc, #132]	; (8016048 <sin+0x90>)
 8015fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015fc8:	4293      	cmp	r3, r2
 8015fca:	dc07      	bgt.n	8015fdc <sin+0x24>
 8015fcc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8016040 <sin+0x88>
 8015fd0:	2000      	movs	r0, #0
 8015fd2:	b005      	add	sp, #20
 8015fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015fd8:	f000 bd6e 	b.w	8016ab8 <__kernel_sin>
 8015fdc:	4a1b      	ldr	r2, [pc, #108]	; (801604c <sin+0x94>)
 8015fde:	4293      	cmp	r3, r2
 8015fe0:	dd04      	ble.n	8015fec <sin+0x34>
 8015fe2:	ee30 0b40 	vsub.f64	d0, d0, d0
 8015fe6:	b005      	add	sp, #20
 8015fe8:	f85d fb04 	ldr.w	pc, [sp], #4
 8015fec:	4668      	mov	r0, sp
 8015fee:	f000 f917 	bl	8016220 <__ieee754_rem_pio2>
 8015ff2:	f000 0003 	and.w	r0, r0, #3
 8015ff6:	2801      	cmp	r0, #1
 8015ff8:	d00a      	beq.n	8016010 <sin+0x58>
 8015ffa:	2802      	cmp	r0, #2
 8015ffc:	d00f      	beq.n	801601e <sin+0x66>
 8015ffe:	b9c0      	cbnz	r0, 8016032 <sin+0x7a>
 8016000:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016004:	ed9d 0b00 	vldr	d0, [sp]
 8016008:	2001      	movs	r0, #1
 801600a:	f000 fd55 	bl	8016ab8 <__kernel_sin>
 801600e:	e7ea      	b.n	8015fe6 <sin+0x2e>
 8016010:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016014:	ed9d 0b00 	vldr	d0, [sp]
 8016018:	f000 fa4a 	bl	80164b0 <__kernel_cos>
 801601c:	e7e3      	b.n	8015fe6 <sin+0x2e>
 801601e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016022:	ed9d 0b00 	vldr	d0, [sp]
 8016026:	2001      	movs	r0, #1
 8016028:	f000 fd46 	bl	8016ab8 <__kernel_sin>
 801602c:	eeb1 0b40 	vneg.f64	d0, d0
 8016030:	e7d9      	b.n	8015fe6 <sin+0x2e>
 8016032:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016036:	ed9d 0b00 	vldr	d0, [sp]
 801603a:	f000 fa39 	bl	80164b0 <__kernel_cos>
 801603e:	e7f5      	b.n	801602c <sin+0x74>
	...
 8016048:	3fe921fb 	.word	0x3fe921fb
 801604c:	7fefffff 	.word	0x7fefffff

08016050 <atan2>:
 8016050:	f000 b822 	b.w	8016098 <__ieee754_atan2>
 8016054:	0000      	movs	r0, r0
	...

08016058 <sqrt>:
 8016058:	b508      	push	{r3, lr}
 801605a:	ed2d 8b04 	vpush	{d8-d9}
 801605e:	eeb0 8b40 	vmov.f64	d8, d0
 8016062:	f000 fa21 	bl	80164a8 <__ieee754_sqrt>
 8016066:	eeb4 8b48 	vcmp.f64	d8, d8
 801606a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801606e:	d60c      	bvs.n	801608a <sqrt+0x32>
 8016070:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8016090 <sqrt+0x38>
 8016074:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8016078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801607c:	d505      	bpl.n	801608a <sqrt+0x32>
 801607e:	f7ff ff1d 	bl	8015ebc <__errno>
 8016082:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8016086:	2321      	movs	r3, #33	; 0x21
 8016088:	6003      	str	r3, [r0, #0]
 801608a:	ecbd 8b04 	vpop	{d8-d9}
 801608e:	bd08      	pop	{r3, pc}
	...

08016098 <__ieee754_atan2>:
 8016098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801609a:	eeb0 7b40 	vmov.f64	d7, d0
 801609e:	ee11 6a10 	vmov	r6, s2
 80160a2:	ee11 0a90 	vmov	r0, s3
 80160a6:	4273      	negs	r3, r6
 80160a8:	4f59      	ldr	r7, [pc, #356]	; (8016210 <__ieee754_atan2+0x178>)
 80160aa:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80160ae:	4333      	orrs	r3, r6
 80160b0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80160b4:	42bb      	cmp	r3, r7
 80160b6:	d80d      	bhi.n	80160d4 <__ieee754_atan2+0x3c>
 80160b8:	ee10 ca10 	vmov	ip, s0
 80160bc:	ee17 5a90 	vmov	r5, s15
 80160c0:	f1cc 0100 	rsb	r1, ip, #0
 80160c4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80160c8:	ea41 010c 	orr.w	r1, r1, ip
 80160cc:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80160d0:	42b9      	cmp	r1, r7
 80160d2:	d904      	bls.n	80160de <__ieee754_atan2+0x46>
 80160d4:	ee37 7b01 	vadd.f64	d7, d7, d1
 80160d8:	eeb0 0b47 	vmov.f64	d0, d7
 80160dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160de:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 80160e2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80160e6:	4331      	orrs	r1, r6
 80160e8:	d103      	bne.n	80160f2 <__ieee754_atan2+0x5a>
 80160ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80160ee:	f000 bd3b 	b.w	8016b68 <atan>
 80160f2:	1784      	asrs	r4, r0, #30
 80160f4:	f004 0402 	and.w	r4, r4, #2
 80160f8:	ea53 010c 	orrs.w	r1, r3, ip
 80160fc:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8016100:	d107      	bne.n	8016112 <__ieee754_atan2+0x7a>
 8016102:	2c02      	cmp	r4, #2
 8016104:	d05d      	beq.n	80161c2 <__ieee754_atan2+0x12a>
 8016106:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80161d8 <__ieee754_atan2+0x140>
 801610a:	2c03      	cmp	r4, #3
 801610c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8016110:	e7e2      	b.n	80160d8 <__ieee754_atan2+0x40>
 8016112:	ea52 0106 	orrs.w	r1, r2, r6
 8016116:	d107      	bne.n	8016128 <__ieee754_atan2+0x90>
 8016118:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80161e0 <__ieee754_atan2+0x148>
 801611c:	ed9f 0b32 	vldr	d0, [pc, #200]	; 80161e8 <__ieee754_atan2+0x150>
 8016120:	2d00      	cmp	r5, #0
 8016122:	fe27 7b00 	vselge.f64	d7, d7, d0
 8016126:	e7d7      	b.n	80160d8 <__ieee754_atan2+0x40>
 8016128:	42ba      	cmp	r2, r7
 801612a:	d10f      	bne.n	801614c <__ieee754_atan2+0xb4>
 801612c:	4293      	cmp	r3, r2
 801612e:	f104 34ff 	add.w	r4, r4, #4294967295
 8016132:	d107      	bne.n	8016144 <__ieee754_atan2+0xac>
 8016134:	2c02      	cmp	r4, #2
 8016136:	d847      	bhi.n	80161c8 <__ieee754_atan2+0x130>
 8016138:	4b36      	ldr	r3, [pc, #216]	; (8016214 <__ieee754_atan2+0x17c>)
 801613a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801613e:	ed94 7b00 	vldr	d7, [r4]
 8016142:	e7c9      	b.n	80160d8 <__ieee754_atan2+0x40>
 8016144:	2c02      	cmp	r4, #2
 8016146:	d842      	bhi.n	80161ce <__ieee754_atan2+0x136>
 8016148:	4b33      	ldr	r3, [pc, #204]	; (8016218 <__ieee754_atan2+0x180>)
 801614a:	e7f6      	b.n	801613a <__ieee754_atan2+0xa2>
 801614c:	42bb      	cmp	r3, r7
 801614e:	d0e3      	beq.n	8016118 <__ieee754_atan2+0x80>
 8016150:	1a9b      	subs	r3, r3, r2
 8016152:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8016156:	ea4f 5223 	mov.w	r2, r3, asr #20
 801615a:	da1a      	bge.n	8016192 <__ieee754_atan2+0xfa>
 801615c:	2800      	cmp	r0, #0
 801615e:	da01      	bge.n	8016164 <__ieee754_atan2+0xcc>
 8016160:	323c      	adds	r2, #60	; 0x3c
 8016162:	db19      	blt.n	8016198 <__ieee754_atan2+0x100>
 8016164:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8016168:	f000 fdf8 	bl	8016d5c <fabs>
 801616c:	f000 fcfc 	bl	8016b68 <atan>
 8016170:	eeb0 7b40 	vmov.f64	d7, d0
 8016174:	2c01      	cmp	r4, #1
 8016176:	d012      	beq.n	801619e <__ieee754_atan2+0x106>
 8016178:	2c02      	cmp	r4, #2
 801617a:	d019      	beq.n	80161b0 <__ieee754_atan2+0x118>
 801617c:	2c00      	cmp	r4, #0
 801617e:	d0ab      	beq.n	80160d8 <__ieee754_atan2+0x40>
 8016180:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 80161f0 <__ieee754_atan2+0x158>
 8016184:	ee37 7b40 	vsub.f64	d7, d7, d0
 8016188:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 80161f8 <__ieee754_atan2+0x160>
 801618c:	ee37 7b40 	vsub.f64	d7, d7, d0
 8016190:	e7a2      	b.n	80160d8 <__ieee754_atan2+0x40>
 8016192:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80161e0 <__ieee754_atan2+0x148>
 8016196:	e7ed      	b.n	8016174 <__ieee754_atan2+0xdc>
 8016198:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8016200 <__ieee754_atan2+0x168>
 801619c:	e7ea      	b.n	8016174 <__ieee754_atan2+0xdc>
 801619e:	ee17 1a90 	vmov	r1, s15
 80161a2:	ec53 2b17 	vmov	r2, r3, d7
 80161a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80161aa:	ec43 2b17 	vmov	d7, r2, r3
 80161ae:	e793      	b.n	80160d8 <__ieee754_atan2+0x40>
 80161b0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80161f0 <__ieee754_atan2+0x158>
 80161b4:	ee37 7b40 	vsub.f64	d7, d7, d0
 80161b8:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80161f8 <__ieee754_atan2+0x160>
 80161bc:	ee30 7b47 	vsub.f64	d7, d0, d7
 80161c0:	e78a      	b.n	80160d8 <__ieee754_atan2+0x40>
 80161c2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80161f8 <__ieee754_atan2+0x160>
 80161c6:	e787      	b.n	80160d8 <__ieee754_atan2+0x40>
 80161c8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8016208 <__ieee754_atan2+0x170>
 80161cc:	e784      	b.n	80160d8 <__ieee754_atan2+0x40>
 80161ce:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8016200 <__ieee754_atan2+0x168>
 80161d2:	e781      	b.n	80160d8 <__ieee754_atan2+0x40>
 80161d4:	f3af 8000 	nop.w
 80161d8:	54442d18 	.word	0x54442d18
 80161dc:	c00921fb 	.word	0xc00921fb
 80161e0:	54442d18 	.word	0x54442d18
 80161e4:	3ff921fb 	.word	0x3ff921fb
 80161e8:	54442d18 	.word	0x54442d18
 80161ec:	bff921fb 	.word	0xbff921fb
 80161f0:	33145c07 	.word	0x33145c07
 80161f4:	3ca1a626 	.word	0x3ca1a626
 80161f8:	54442d18 	.word	0x54442d18
 80161fc:	400921fb 	.word	0x400921fb
	...
 8016208:	54442d18 	.word	0x54442d18
 801620c:	3fe921fb 	.word	0x3fe921fb
 8016210:	7ff00000 	.word	0x7ff00000
 8016214:	08017020 	.word	0x08017020
 8016218:	08017038 	.word	0x08017038
 801621c:	00000000 	.word	0x00000000

08016220 <__ieee754_rem_pio2>:
 8016220:	b570      	push	{r4, r5, r6, lr}
 8016222:	eeb0 7b40 	vmov.f64	d7, d0
 8016226:	ee17 5a90 	vmov	r5, s15
 801622a:	4b99      	ldr	r3, [pc, #612]	; (8016490 <__ieee754_rem_pio2+0x270>)
 801622c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016230:	429e      	cmp	r6, r3
 8016232:	b088      	sub	sp, #32
 8016234:	4604      	mov	r4, r0
 8016236:	dc07      	bgt.n	8016248 <__ieee754_rem_pio2+0x28>
 8016238:	2200      	movs	r2, #0
 801623a:	2300      	movs	r3, #0
 801623c:	ed84 0b00 	vstr	d0, [r4]
 8016240:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016244:	2000      	movs	r0, #0
 8016246:	e01b      	b.n	8016280 <__ieee754_rem_pio2+0x60>
 8016248:	4b92      	ldr	r3, [pc, #584]	; (8016494 <__ieee754_rem_pio2+0x274>)
 801624a:	429e      	cmp	r6, r3
 801624c:	dc3b      	bgt.n	80162c6 <__ieee754_rem_pio2+0xa6>
 801624e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8016252:	2d00      	cmp	r5, #0
 8016254:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8016450 <__ieee754_rem_pio2+0x230>
 8016258:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801625c:	dd19      	ble.n	8016292 <__ieee754_rem_pio2+0x72>
 801625e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8016262:	429e      	cmp	r6, r3
 8016264:	d00e      	beq.n	8016284 <__ieee754_rem_pio2+0x64>
 8016266:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8016458 <__ieee754_rem_pio2+0x238>
 801626a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801626e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8016272:	ed84 5b00 	vstr	d5, [r4]
 8016276:	ee37 7b46 	vsub.f64	d7, d7, d6
 801627a:	ed84 7b02 	vstr	d7, [r4, #8]
 801627e:	2001      	movs	r0, #1
 8016280:	b008      	add	sp, #32
 8016282:	bd70      	pop	{r4, r5, r6, pc}
 8016284:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8016460 <__ieee754_rem_pio2+0x240>
 8016288:	ee37 7b46 	vsub.f64	d7, d7, d6
 801628c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8016468 <__ieee754_rem_pio2+0x248>
 8016290:	e7eb      	b.n	801626a <__ieee754_rem_pio2+0x4a>
 8016292:	429e      	cmp	r6, r3
 8016294:	ee30 7b06 	vadd.f64	d7, d0, d6
 8016298:	d00e      	beq.n	80162b8 <__ieee754_rem_pio2+0x98>
 801629a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8016458 <__ieee754_rem_pio2+0x238>
 801629e:	ee37 5b06 	vadd.f64	d5, d7, d6
 80162a2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80162a6:	ed84 5b00 	vstr	d5, [r4]
 80162aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80162ae:	f04f 30ff 	mov.w	r0, #4294967295
 80162b2:	ed84 7b02 	vstr	d7, [r4, #8]
 80162b6:	e7e3      	b.n	8016280 <__ieee754_rem_pio2+0x60>
 80162b8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8016460 <__ieee754_rem_pio2+0x240>
 80162bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80162c0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8016468 <__ieee754_rem_pio2+0x248>
 80162c4:	e7eb      	b.n	801629e <__ieee754_rem_pio2+0x7e>
 80162c6:	4b74      	ldr	r3, [pc, #464]	; (8016498 <__ieee754_rem_pio2+0x278>)
 80162c8:	429e      	cmp	r6, r3
 80162ca:	dc70      	bgt.n	80163ae <__ieee754_rem_pio2+0x18e>
 80162cc:	f000 fd46 	bl	8016d5c <fabs>
 80162d0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80162d4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8016470 <__ieee754_rem_pio2+0x250>
 80162d8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80162dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80162e0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80162e4:	ee17 0a90 	vmov	r0, s15
 80162e8:	eeb1 4b45 	vneg.f64	d4, d5
 80162ec:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8016450 <__ieee754_rem_pio2+0x230>
 80162f0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80162f4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8016458 <__ieee754_rem_pio2+0x238>
 80162f8:	281f      	cmp	r0, #31
 80162fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80162fe:	ee30 6b47 	vsub.f64	d6, d0, d7
 8016302:	dc08      	bgt.n	8016316 <__ieee754_rem_pio2+0xf6>
 8016304:	4b65      	ldr	r3, [pc, #404]	; (801649c <__ieee754_rem_pio2+0x27c>)
 8016306:	1e42      	subs	r2, r0, #1
 8016308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801630c:	42b3      	cmp	r3, r6
 801630e:	d002      	beq.n	8016316 <__ieee754_rem_pio2+0xf6>
 8016310:	ed84 6b00 	vstr	d6, [r4]
 8016314:	e026      	b.n	8016364 <__ieee754_rem_pio2+0x144>
 8016316:	ee16 3a90 	vmov	r3, s13
 801631a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801631e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8016322:	2b10      	cmp	r3, #16
 8016324:	ea4f 5226 	mov.w	r2, r6, asr #20
 8016328:	ddf2      	ble.n	8016310 <__ieee754_rem_pio2+0xf0>
 801632a:	eeb0 6b40 	vmov.f64	d6, d0
 801632e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8016460 <__ieee754_rem_pio2+0x240>
 8016332:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8016468 <__ieee754_rem_pio2+0x248>
 8016336:	eea4 6b07 	vfma.f64	d6, d4, d7
 801633a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801633e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8016342:	eeb0 7b40 	vmov.f64	d7, d0
 8016346:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801634a:	ee36 3b47 	vsub.f64	d3, d6, d7
 801634e:	ee13 3a90 	vmov	r3, s7
 8016352:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8016356:	1ad3      	subs	r3, r2, r3
 8016358:	2b31      	cmp	r3, #49	; 0x31
 801635a:	dc17      	bgt.n	801638c <__ieee754_rem_pio2+0x16c>
 801635c:	eeb0 0b46 	vmov.f64	d0, d6
 8016360:	ed84 3b00 	vstr	d3, [r4]
 8016364:	ed94 6b00 	vldr	d6, [r4]
 8016368:	2d00      	cmp	r5, #0
 801636a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801636e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8016372:	ed84 0b02 	vstr	d0, [r4, #8]
 8016376:	da83      	bge.n	8016280 <__ieee754_rem_pio2+0x60>
 8016378:	eeb1 6b46 	vneg.f64	d6, d6
 801637c:	eeb1 0b40 	vneg.f64	d0, d0
 8016380:	ed84 6b00 	vstr	d6, [r4]
 8016384:	ed84 0b02 	vstr	d0, [r4, #8]
 8016388:	4240      	negs	r0, r0
 801638a:	e779      	b.n	8016280 <__ieee754_rem_pio2+0x60>
 801638c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8016478 <__ieee754_rem_pio2+0x258>
 8016390:	eeb0 0b46 	vmov.f64	d0, d6
 8016394:	eea4 0b03 	vfma.f64	d0, d4, d3
 8016398:	ee36 7b40 	vsub.f64	d7, d6, d0
 801639c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8016480 <__ieee754_rem_pio2+0x260>
 80163a0:	eea4 7b03 	vfma.f64	d7, d4, d3
 80163a4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80163a8:	ee30 6b47 	vsub.f64	d6, d0, d7
 80163ac:	e7b0      	b.n	8016310 <__ieee754_rem_pio2+0xf0>
 80163ae:	4b3c      	ldr	r3, [pc, #240]	; (80164a0 <__ieee754_rem_pio2+0x280>)
 80163b0:	429e      	cmp	r6, r3
 80163b2:	dd06      	ble.n	80163c2 <__ieee754_rem_pio2+0x1a2>
 80163b4:	ee30 7b40 	vsub.f64	d7, d0, d0
 80163b8:	ed80 7b02 	vstr	d7, [r0, #8]
 80163bc:	ed80 7b00 	vstr	d7, [r0]
 80163c0:	e740      	b.n	8016244 <__ieee754_rem_pio2+0x24>
 80163c2:	1532      	asrs	r2, r6, #20
 80163c4:	ee10 0a10 	vmov	r0, s0
 80163c8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80163cc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80163d0:	ec41 0b17 	vmov	d7, r0, r1
 80163d4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80163d8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8016488 <__ieee754_rem_pio2+0x268>
 80163dc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80163e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80163e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80163e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80163ec:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80163f0:	a902      	add	r1, sp, #8
 80163f2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80163f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80163fa:	ed8d 6b04 	vstr	d6, [sp, #16]
 80163fe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016402:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016406:	2603      	movs	r6, #3
 8016408:	4608      	mov	r0, r1
 801640a:	ed91 7b04 	vldr	d7, [r1, #16]
 801640e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016416:	4633      	mov	r3, r6
 8016418:	f1a1 0108 	sub.w	r1, r1, #8
 801641c:	f106 36ff 	add.w	r6, r6, #4294967295
 8016420:	d0f3      	beq.n	801640a <__ieee754_rem_pio2+0x1ea>
 8016422:	4920      	ldr	r1, [pc, #128]	; (80164a4 <__ieee754_rem_pio2+0x284>)
 8016424:	9101      	str	r1, [sp, #4]
 8016426:	2102      	movs	r1, #2
 8016428:	9100      	str	r1, [sp, #0]
 801642a:	4621      	mov	r1, r4
 801642c:	f000 f8ac 	bl	8016588 <__kernel_rem_pio2>
 8016430:	2d00      	cmp	r5, #0
 8016432:	f6bf af25 	bge.w	8016280 <__ieee754_rem_pio2+0x60>
 8016436:	ed94 7b00 	vldr	d7, [r4]
 801643a:	eeb1 7b47 	vneg.f64	d7, d7
 801643e:	ed84 7b00 	vstr	d7, [r4]
 8016442:	ed94 7b02 	vldr	d7, [r4, #8]
 8016446:	eeb1 7b47 	vneg.f64	d7, d7
 801644a:	ed84 7b02 	vstr	d7, [r4, #8]
 801644e:	e79b      	b.n	8016388 <__ieee754_rem_pio2+0x168>
 8016450:	54400000 	.word	0x54400000
 8016454:	3ff921fb 	.word	0x3ff921fb
 8016458:	1a626331 	.word	0x1a626331
 801645c:	3dd0b461 	.word	0x3dd0b461
 8016460:	1a600000 	.word	0x1a600000
 8016464:	3dd0b461 	.word	0x3dd0b461
 8016468:	2e037073 	.word	0x2e037073
 801646c:	3ba3198a 	.word	0x3ba3198a
 8016470:	6dc9c883 	.word	0x6dc9c883
 8016474:	3fe45f30 	.word	0x3fe45f30
 8016478:	2e000000 	.word	0x2e000000
 801647c:	3ba3198a 	.word	0x3ba3198a
 8016480:	252049c1 	.word	0x252049c1
 8016484:	397b839a 	.word	0x397b839a
 8016488:	00000000 	.word	0x00000000
 801648c:	41700000 	.word	0x41700000
 8016490:	3fe921fb 	.word	0x3fe921fb
 8016494:	4002d97b 	.word	0x4002d97b
 8016498:	413921fb 	.word	0x413921fb
 801649c:	08017050 	.word	0x08017050
 80164a0:	7fefffff 	.word	0x7fefffff
 80164a4:	080170d0 	.word	0x080170d0

080164a8 <__ieee754_sqrt>:
 80164a8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80164ac:	4770      	bx	lr
	...

080164b0 <__kernel_cos>:
 80164b0:	ee10 1a90 	vmov	r1, s1
 80164b4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80164b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80164bc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80164c0:	da05      	bge.n	80164ce <__kernel_cos+0x1e>
 80164c2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80164c6:	ee17 3a90 	vmov	r3, s15
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d03d      	beq.n	801654a <__kernel_cos+0x9a>
 80164ce:	ee20 3b00 	vmul.f64	d3, d0, d0
 80164d2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8016550 <__kernel_cos+0xa0>
 80164d6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8016558 <__kernel_cos+0xa8>
 80164da:	eea3 6b07 	vfma.f64	d6, d3, d7
 80164de:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8016560 <__kernel_cos+0xb0>
 80164e2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80164e6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8016568 <__kernel_cos+0xb8>
 80164ea:	eea7 6b03 	vfma.f64	d6, d7, d3
 80164ee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8016570 <__kernel_cos+0xc0>
 80164f2:	4b23      	ldr	r3, [pc, #140]	; (8016580 <__kernel_cos+0xd0>)
 80164f4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80164f8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8016578 <__kernel_cos+0xc8>
 80164fc:	4299      	cmp	r1, r3
 80164fe:	eea7 6b03 	vfma.f64	d6, d7, d3
 8016502:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8016506:	ee26 5b03 	vmul.f64	d5, d6, d3
 801650a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801650e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8016512:	eea3 6b05 	vfma.f64	d6, d3, d5
 8016516:	dc04      	bgt.n	8016522 <__kernel_cos+0x72>
 8016518:	ee37 6b46 	vsub.f64	d6, d7, d6
 801651c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8016520:	4770      	bx	lr
 8016522:	4b18      	ldr	r3, [pc, #96]	; (8016584 <__kernel_cos+0xd4>)
 8016524:	4299      	cmp	r1, r3
 8016526:	dc0d      	bgt.n	8016544 <__kernel_cos+0x94>
 8016528:	2200      	movs	r2, #0
 801652a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801652e:	ec43 2b15 	vmov	d5, r2, r3
 8016532:	ee34 0b45 	vsub.f64	d0, d4, d5
 8016536:	ee37 7b45 	vsub.f64	d7, d7, d5
 801653a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801653e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8016542:	4770      	bx	lr
 8016544:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8016548:	e7f3      	b.n	8016532 <__kernel_cos+0x82>
 801654a:	eeb0 0b44 	vmov.f64	d0, d4
 801654e:	4770      	bx	lr
 8016550:	be8838d4 	.word	0xbe8838d4
 8016554:	bda8fae9 	.word	0xbda8fae9
 8016558:	bdb4b1c4 	.word	0xbdb4b1c4
 801655c:	3e21ee9e 	.word	0x3e21ee9e
 8016560:	809c52ad 	.word	0x809c52ad
 8016564:	be927e4f 	.word	0xbe927e4f
 8016568:	19cb1590 	.word	0x19cb1590
 801656c:	3efa01a0 	.word	0x3efa01a0
 8016570:	16c15177 	.word	0x16c15177
 8016574:	bf56c16c 	.word	0xbf56c16c
 8016578:	5555554c 	.word	0x5555554c
 801657c:	3fa55555 	.word	0x3fa55555
 8016580:	3fd33332 	.word	0x3fd33332
 8016584:	3fe90000 	.word	0x3fe90000

08016588 <__kernel_rem_pio2>:
 8016588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801658c:	ed2d 8b06 	vpush	{d8-d10}
 8016590:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8016594:	460f      	mov	r7, r1
 8016596:	9002      	str	r0, [sp, #8]
 8016598:	49c5      	ldr	r1, [pc, #788]	; (80168b0 <__kernel_rem_pio2+0x328>)
 801659a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801659c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 80165a0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80165a4:	9301      	str	r3, [sp, #4]
 80165a6:	f112 0f14 	cmn.w	r2, #20
 80165aa:	bfa8      	it	ge
 80165ac:	2018      	movge	r0, #24
 80165ae:	f103 31ff 	add.w	r1, r3, #4294967295
 80165b2:	bfb8      	it	lt
 80165b4:	2000      	movlt	r0, #0
 80165b6:	f06f 0417 	mvn.w	r4, #23
 80165ba:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8016898 <__kernel_rem_pio2+0x310>
 80165be:	bfa4      	itt	ge
 80165c0:	f1a2 0a03 	subge.w	sl, r2, #3
 80165c4:	fb9a f0f0 	sdivge	r0, sl, r0
 80165c8:	fb00 4404 	mla	r4, r0, r4, r4
 80165cc:	1a46      	subs	r6, r0, r1
 80165ce:	4414      	add	r4, r2
 80165d0:	eb09 0c01 	add.w	ip, r9, r1
 80165d4:	ad1a      	add	r5, sp, #104	; 0x68
 80165d6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80165da:	2200      	movs	r2, #0
 80165dc:	4562      	cmp	r2, ip
 80165de:	dd10      	ble.n	8016602 <__kernel_rem_pio2+0x7a>
 80165e0:	9a01      	ldr	r2, [sp, #4]
 80165e2:	ab1a      	add	r3, sp, #104	; 0x68
 80165e4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80165e8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80165ec:	f04f 0c00 	mov.w	ip, #0
 80165f0:	45cc      	cmp	ip, r9
 80165f2:	dc26      	bgt.n	8016642 <__kernel_rem_pio2+0xba>
 80165f4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8016898 <__kernel_rem_pio2+0x310>
 80165f8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80165fc:	4616      	mov	r6, r2
 80165fe:	2500      	movs	r5, #0
 8016600:	e015      	b.n	801662e <__kernel_rem_pio2+0xa6>
 8016602:	42d6      	cmn	r6, r2
 8016604:	d409      	bmi.n	801661a <__kernel_rem_pio2+0x92>
 8016606:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801660a:	ee07 3a90 	vmov	s15, r3
 801660e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016612:	eca5 7b02 	vstmia	r5!, {d7}
 8016616:	3201      	adds	r2, #1
 8016618:	e7e0      	b.n	80165dc <__kernel_rem_pio2+0x54>
 801661a:	eeb0 7b46 	vmov.f64	d7, d6
 801661e:	e7f8      	b.n	8016612 <__kernel_rem_pio2+0x8a>
 8016620:	ecb8 5b02 	vldmia	r8!, {d5}
 8016624:	ed96 6b00 	vldr	d6, [r6]
 8016628:	3501      	adds	r5, #1
 801662a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801662e:	428d      	cmp	r5, r1
 8016630:	f1a6 0608 	sub.w	r6, r6, #8
 8016634:	ddf4      	ble.n	8016620 <__kernel_rem_pio2+0x98>
 8016636:	ecaa 7b02 	vstmia	sl!, {d7}
 801663a:	f10c 0c01 	add.w	ip, ip, #1
 801663e:	3208      	adds	r2, #8
 8016640:	e7d6      	b.n	80165f0 <__kernel_rem_pio2+0x68>
 8016642:	ab06      	add	r3, sp, #24
 8016644:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80168a0 <__kernel_rem_pio2+0x318>
 8016648:	ed9f ab97 	vldr	d10, [pc, #604]	; 80168a8 <__kernel_rem_pio2+0x320>
 801664c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8016650:	9303      	str	r3, [sp, #12]
 8016652:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8016656:	464d      	mov	r5, r9
 8016658:	00eb      	lsls	r3, r5, #3
 801665a:	9304      	str	r3, [sp, #16]
 801665c:	ab92      	add	r3, sp, #584	; 0x248
 801665e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8016662:	f10d 0b18 	add.w	fp, sp, #24
 8016666:	ab6a      	add	r3, sp, #424	; 0x1a8
 8016668:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801666c:	465e      	mov	r6, fp
 801666e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8016672:	4628      	mov	r0, r5
 8016674:	2800      	cmp	r0, #0
 8016676:	f1a2 0208 	sub.w	r2, r2, #8
 801667a:	dc4c      	bgt.n	8016716 <__kernel_rem_pio2+0x18e>
 801667c:	4620      	mov	r0, r4
 801667e:	9105      	str	r1, [sp, #20]
 8016680:	f000 fbea 	bl	8016e58 <scalbn>
 8016684:	eeb0 8b40 	vmov.f64	d8, d0
 8016688:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801668c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8016690:	f000 fb6e 	bl	8016d70 <floor>
 8016694:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8016698:	eea0 8b47 	vfms.f64	d8, d0, d7
 801669c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80166a0:	2c00      	cmp	r4, #0
 80166a2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80166a6:	ee17 8a90 	vmov	r8, s15
 80166aa:	ee38 8b40 	vsub.f64	d8, d8, d0
 80166ae:	9905      	ldr	r1, [sp, #20]
 80166b0:	dd43      	ble.n	801673a <__kernel_rem_pio2+0x1b2>
 80166b2:	1e68      	subs	r0, r5, #1
 80166b4:	ab06      	add	r3, sp, #24
 80166b6:	f1c4 0c18 	rsb	ip, r4, #24
 80166ba:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80166be:	fa46 f20c 	asr.w	r2, r6, ip
 80166c2:	4490      	add	r8, r2
 80166c4:	fa02 f20c 	lsl.w	r2, r2, ip
 80166c8:	1ab6      	subs	r6, r6, r2
 80166ca:	f1c4 0217 	rsb	r2, r4, #23
 80166ce:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80166d2:	4116      	asrs	r6, r2
 80166d4:	2e00      	cmp	r6, #0
 80166d6:	dd3f      	ble.n	8016758 <__kernel_rem_pio2+0x1d0>
 80166d8:	f04f 0c00 	mov.w	ip, #0
 80166dc:	f108 0801 	add.w	r8, r8, #1
 80166e0:	4660      	mov	r0, ip
 80166e2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80166e6:	4565      	cmp	r5, ip
 80166e8:	dc6e      	bgt.n	80167c8 <__kernel_rem_pio2+0x240>
 80166ea:	2c00      	cmp	r4, #0
 80166ec:	dd04      	ble.n	80166f8 <__kernel_rem_pio2+0x170>
 80166ee:	2c01      	cmp	r4, #1
 80166f0:	d07f      	beq.n	80167f2 <__kernel_rem_pio2+0x26a>
 80166f2:	2c02      	cmp	r4, #2
 80166f4:	f000 8087 	beq.w	8016806 <__kernel_rem_pio2+0x27e>
 80166f8:	2e02      	cmp	r6, #2
 80166fa:	d12d      	bne.n	8016758 <__kernel_rem_pio2+0x1d0>
 80166fc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016700:	ee30 8b48 	vsub.f64	d8, d0, d8
 8016704:	b340      	cbz	r0, 8016758 <__kernel_rem_pio2+0x1d0>
 8016706:	4620      	mov	r0, r4
 8016708:	9105      	str	r1, [sp, #20]
 801670a:	f000 fba5 	bl	8016e58 <scalbn>
 801670e:	9905      	ldr	r1, [sp, #20]
 8016710:	ee38 8b40 	vsub.f64	d8, d8, d0
 8016714:	e020      	b.n	8016758 <__kernel_rem_pio2+0x1d0>
 8016716:	ee20 7b09 	vmul.f64	d7, d0, d9
 801671a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801671e:	3801      	subs	r0, #1
 8016720:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8016724:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8016728:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801672c:	eca6 0a01 	vstmia	r6!, {s0}
 8016730:	ed92 0b00 	vldr	d0, [r2]
 8016734:	ee37 0b00 	vadd.f64	d0, d7, d0
 8016738:	e79c      	b.n	8016674 <__kernel_rem_pio2+0xec>
 801673a:	d105      	bne.n	8016748 <__kernel_rem_pio2+0x1c0>
 801673c:	1e6a      	subs	r2, r5, #1
 801673e:	ab06      	add	r3, sp, #24
 8016740:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8016744:	15f6      	asrs	r6, r6, #23
 8016746:	e7c5      	b.n	80166d4 <__kernel_rem_pio2+0x14c>
 8016748:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801674c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016754:	da36      	bge.n	80167c4 <__kernel_rem_pio2+0x23c>
 8016756:	2600      	movs	r6, #0
 8016758:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801675c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016760:	f040 80aa 	bne.w	80168b8 <__kernel_rem_pio2+0x330>
 8016764:	f105 3bff 	add.w	fp, r5, #4294967295
 8016768:	4658      	mov	r0, fp
 801676a:	2200      	movs	r2, #0
 801676c:	4548      	cmp	r0, r9
 801676e:	da52      	bge.n	8016816 <__kernel_rem_pio2+0x28e>
 8016770:	2a00      	cmp	r2, #0
 8016772:	f000 8081 	beq.w	8016878 <__kernel_rem_pio2+0x2f0>
 8016776:	ab06      	add	r3, sp, #24
 8016778:	3c18      	subs	r4, #24
 801677a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801677e:	2b00      	cmp	r3, #0
 8016780:	f000 8087 	beq.w	8016892 <__kernel_rem_pio2+0x30a>
 8016784:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016788:	4620      	mov	r0, r4
 801678a:	f000 fb65 	bl	8016e58 <scalbn>
 801678e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8016792:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80168a0 <__kernel_rem_pio2+0x318>
 8016796:	a96a      	add	r1, sp, #424	; 0x1a8
 8016798:	f103 0208 	add.w	r2, r3, #8
 801679c:	1888      	adds	r0, r1, r2
 801679e:	4659      	mov	r1, fp
 80167a0:	2900      	cmp	r1, #0
 80167a2:	f280 80b7 	bge.w	8016914 <__kernel_rem_pio2+0x38c>
 80167a6:	4659      	mov	r1, fp
 80167a8:	2900      	cmp	r1, #0
 80167aa:	f2c0 80d5 	blt.w	8016958 <__kernel_rem_pio2+0x3d0>
 80167ae:	a86a      	add	r0, sp, #424	; 0x1a8
 80167b0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80167b4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8016898 <__kernel_rem_pio2+0x310>
 80167b8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80168b4 <__kernel_rem_pio2+0x32c>
 80167bc:	2400      	movs	r4, #0
 80167be:	ebab 0001 	sub.w	r0, fp, r1
 80167c2:	e0be      	b.n	8016942 <__kernel_rem_pio2+0x3ba>
 80167c4:	2602      	movs	r6, #2
 80167c6:	e787      	b.n	80166d8 <__kernel_rem_pio2+0x150>
 80167c8:	f8db 2000 	ldr.w	r2, [fp]
 80167cc:	b958      	cbnz	r0, 80167e6 <__kernel_rem_pio2+0x25e>
 80167ce:	b122      	cbz	r2, 80167da <__kernel_rem_pio2+0x252>
 80167d0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80167d4:	f8cb 2000 	str.w	r2, [fp]
 80167d8:	2201      	movs	r2, #1
 80167da:	f10c 0c01 	add.w	ip, ip, #1
 80167de:	f10b 0b04 	add.w	fp, fp, #4
 80167e2:	4610      	mov	r0, r2
 80167e4:	e77f      	b.n	80166e6 <__kernel_rem_pio2+0x15e>
 80167e6:	ebae 0202 	sub.w	r2, lr, r2
 80167ea:	f8cb 2000 	str.w	r2, [fp]
 80167ee:	4602      	mov	r2, r0
 80167f0:	e7f3      	b.n	80167da <__kernel_rem_pio2+0x252>
 80167f2:	f105 3cff 	add.w	ip, r5, #4294967295
 80167f6:	ab06      	add	r3, sp, #24
 80167f8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80167fc:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8016800:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8016804:	e778      	b.n	80166f8 <__kernel_rem_pio2+0x170>
 8016806:	f105 3cff 	add.w	ip, r5, #4294967295
 801680a:	ab06      	add	r3, sp, #24
 801680c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8016810:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8016814:	e7f4      	b.n	8016800 <__kernel_rem_pio2+0x278>
 8016816:	ab06      	add	r3, sp, #24
 8016818:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801681c:	3801      	subs	r0, #1
 801681e:	431a      	orrs	r2, r3
 8016820:	e7a4      	b.n	801676c <__kernel_rem_pio2+0x1e4>
 8016822:	f10c 0c01 	add.w	ip, ip, #1
 8016826:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801682a:	2800      	cmp	r0, #0
 801682c:	d0f9      	beq.n	8016822 <__kernel_rem_pio2+0x29a>
 801682e:	9b04      	ldr	r3, [sp, #16]
 8016830:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8016834:	eb0d 0203 	add.w	r2, sp, r3
 8016838:	9b01      	ldr	r3, [sp, #4]
 801683a:	18e8      	adds	r0, r5, r3
 801683c:	ab1a      	add	r3, sp, #104	; 0x68
 801683e:	1c6e      	adds	r6, r5, #1
 8016840:	3a98      	subs	r2, #152	; 0x98
 8016842:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8016846:	4465      	add	r5, ip
 8016848:	42b5      	cmp	r5, r6
 801684a:	f6ff af05 	blt.w	8016658 <__kernel_rem_pio2+0xd0>
 801684e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8016852:	f8dd e008 	ldr.w	lr, [sp, #8]
 8016856:	ee07 3a90 	vmov	s15, r3
 801685a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801685e:	f04f 0c00 	mov.w	ip, #0
 8016862:	eca0 7b02 	vstmia	r0!, {d7}
 8016866:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8016898 <__kernel_rem_pio2+0x310>
 801686a:	4680      	mov	r8, r0
 801686c:	458c      	cmp	ip, r1
 801686e:	dd07      	ble.n	8016880 <__kernel_rem_pio2+0x2f8>
 8016870:	eca2 7b02 	vstmia	r2!, {d7}
 8016874:	3601      	adds	r6, #1
 8016876:	e7e7      	b.n	8016848 <__kernel_rem_pio2+0x2c0>
 8016878:	9a03      	ldr	r2, [sp, #12]
 801687a:	f04f 0c01 	mov.w	ip, #1
 801687e:	e7d2      	b.n	8016826 <__kernel_rem_pio2+0x29e>
 8016880:	ecbe 5b02 	vldmia	lr!, {d5}
 8016884:	ed38 6b02 	vldmdb	r8!, {d6}
 8016888:	f10c 0c01 	add.w	ip, ip, #1
 801688c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016890:	e7ec      	b.n	801686c <__kernel_rem_pio2+0x2e4>
 8016892:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016896:	e76e      	b.n	8016776 <__kernel_rem_pio2+0x1ee>
	...
 80168a4:	3e700000 	.word	0x3e700000
 80168a8:	00000000 	.word	0x00000000
 80168ac:	41700000 	.word	0x41700000
 80168b0:	08017218 	.word	0x08017218
 80168b4:	080171d8 	.word	0x080171d8
 80168b8:	4260      	negs	r0, r4
 80168ba:	eeb0 0b48 	vmov.f64	d0, d8
 80168be:	f000 facb 	bl	8016e58 <scalbn>
 80168c2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8016aa0 <__kernel_rem_pio2+0x518>
 80168c6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80168ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ce:	db18      	blt.n	8016902 <__kernel_rem_pio2+0x37a>
 80168d0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8016aa8 <__kernel_rem_pio2+0x520>
 80168d4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80168d8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80168dc:	aa06      	add	r2, sp, #24
 80168de:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80168e2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80168e6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80168ea:	f105 0b01 	add.w	fp, r5, #1
 80168ee:	ee10 3a10 	vmov	r3, s0
 80168f2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80168f6:	ee17 3a10 	vmov	r3, s14
 80168fa:	3418      	adds	r4, #24
 80168fc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8016900:	e740      	b.n	8016784 <__kernel_rem_pio2+0x1fc>
 8016902:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8016906:	aa06      	add	r2, sp, #24
 8016908:	ee10 3a10 	vmov	r3, s0
 801690c:	46ab      	mov	fp, r5
 801690e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8016912:	e737      	b.n	8016784 <__kernel_rem_pio2+0x1fc>
 8016914:	ac06      	add	r4, sp, #24
 8016916:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801691a:	9401      	str	r4, [sp, #4]
 801691c:	ee07 4a90 	vmov	s15, r4
 8016920:	3901      	subs	r1, #1
 8016922:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016926:	ee27 7b00 	vmul.f64	d7, d7, d0
 801692a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801692e:	ed20 7b02 	vstmdb	r0!, {d7}
 8016932:	e735      	b.n	80167a0 <__kernel_rem_pio2+0x218>
 8016934:	ecbc 5b02 	vldmia	ip!, {d5}
 8016938:	ecb5 6b02 	vldmia	r5!, {d6}
 801693c:	3401      	adds	r4, #1
 801693e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016942:	454c      	cmp	r4, r9
 8016944:	dc01      	bgt.n	801694a <__kernel_rem_pio2+0x3c2>
 8016946:	4284      	cmp	r4, r0
 8016948:	ddf4      	ble.n	8016934 <__kernel_rem_pio2+0x3ac>
 801694a:	ac42      	add	r4, sp, #264	; 0x108
 801694c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8016950:	ed80 7b00 	vstr	d7, [r0]
 8016954:	3901      	subs	r1, #1
 8016956:	e727      	b.n	80167a8 <__kernel_rem_pio2+0x220>
 8016958:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801695a:	2902      	cmp	r1, #2
 801695c:	dc0a      	bgt.n	8016974 <__kernel_rem_pio2+0x3ec>
 801695e:	2900      	cmp	r1, #0
 8016960:	dc2c      	bgt.n	80169bc <__kernel_rem_pio2+0x434>
 8016962:	d045      	beq.n	80169f0 <__kernel_rem_pio2+0x468>
 8016964:	f008 0007 	and.w	r0, r8, #7
 8016968:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801696c:	ecbd 8b06 	vpop	{d8-d10}
 8016970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016974:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8016976:	2a03      	cmp	r2, #3
 8016978:	d1f4      	bne.n	8016964 <__kernel_rem_pio2+0x3dc>
 801697a:	aa42      	add	r2, sp, #264	; 0x108
 801697c:	4413      	add	r3, r2
 801697e:	461a      	mov	r2, r3
 8016980:	4619      	mov	r1, r3
 8016982:	4658      	mov	r0, fp
 8016984:	2800      	cmp	r0, #0
 8016986:	f1a1 0108 	sub.w	r1, r1, #8
 801698a:	dc54      	bgt.n	8016a36 <__kernel_rem_pio2+0x4ae>
 801698c:	4659      	mov	r1, fp
 801698e:	2901      	cmp	r1, #1
 8016990:	f1a2 0208 	sub.w	r2, r2, #8
 8016994:	dc5f      	bgt.n	8016a56 <__kernel_rem_pio2+0x4ce>
 8016996:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8016ab0 <__kernel_rem_pio2+0x528>
 801699a:	3308      	adds	r3, #8
 801699c:	f1bb 0f01 	cmp.w	fp, #1
 80169a0:	dc69      	bgt.n	8016a76 <__kernel_rem_pio2+0x4ee>
 80169a2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80169a6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80169aa:	2e00      	cmp	r6, #0
 80169ac:	d16a      	bne.n	8016a84 <__kernel_rem_pio2+0x4fc>
 80169ae:	ed87 5b00 	vstr	d5, [r7]
 80169b2:	ed87 6b02 	vstr	d6, [r7, #8]
 80169b6:	ed87 7b04 	vstr	d7, [r7, #16]
 80169ba:	e7d3      	b.n	8016964 <__kernel_rem_pio2+0x3dc>
 80169bc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016ab0 <__kernel_rem_pio2+0x528>
 80169c0:	ab42      	add	r3, sp, #264	; 0x108
 80169c2:	441a      	add	r2, r3
 80169c4:	465b      	mov	r3, fp
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	da26      	bge.n	8016a18 <__kernel_rem_pio2+0x490>
 80169ca:	b35e      	cbz	r6, 8016a24 <__kernel_rem_pio2+0x49c>
 80169cc:	eeb1 7b46 	vneg.f64	d7, d6
 80169d0:	ed87 7b00 	vstr	d7, [r7]
 80169d4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80169d8:	aa44      	add	r2, sp, #272	; 0x110
 80169da:	2301      	movs	r3, #1
 80169dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80169e0:	459b      	cmp	fp, r3
 80169e2:	da22      	bge.n	8016a2a <__kernel_rem_pio2+0x4a2>
 80169e4:	b10e      	cbz	r6, 80169ea <__kernel_rem_pio2+0x462>
 80169e6:	eeb1 7b47 	vneg.f64	d7, d7
 80169ea:	ed87 7b02 	vstr	d7, [r7, #8]
 80169ee:	e7b9      	b.n	8016964 <__kernel_rem_pio2+0x3dc>
 80169f0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8016ab0 <__kernel_rem_pio2+0x528>
 80169f4:	ab42      	add	r3, sp, #264	; 0x108
 80169f6:	441a      	add	r2, r3
 80169f8:	f1bb 0f00 	cmp.w	fp, #0
 80169fc:	da05      	bge.n	8016a0a <__kernel_rem_pio2+0x482>
 80169fe:	b10e      	cbz	r6, 8016a04 <__kernel_rem_pio2+0x47c>
 8016a00:	eeb1 7b47 	vneg.f64	d7, d7
 8016a04:	ed87 7b00 	vstr	d7, [r7]
 8016a08:	e7ac      	b.n	8016964 <__kernel_rem_pio2+0x3dc>
 8016a0a:	ed32 6b02 	vldmdb	r2!, {d6}
 8016a0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016a12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016a16:	e7ef      	b.n	80169f8 <__kernel_rem_pio2+0x470>
 8016a18:	ed32 7b02 	vldmdb	r2!, {d7}
 8016a1c:	3b01      	subs	r3, #1
 8016a1e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8016a22:	e7d0      	b.n	80169c6 <__kernel_rem_pio2+0x43e>
 8016a24:	eeb0 7b46 	vmov.f64	d7, d6
 8016a28:	e7d2      	b.n	80169d0 <__kernel_rem_pio2+0x448>
 8016a2a:	ecb2 6b02 	vldmia	r2!, {d6}
 8016a2e:	3301      	adds	r3, #1
 8016a30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016a34:	e7d4      	b.n	80169e0 <__kernel_rem_pio2+0x458>
 8016a36:	ed91 7b00 	vldr	d7, [r1]
 8016a3a:	ed91 5b02 	vldr	d5, [r1, #8]
 8016a3e:	3801      	subs	r0, #1
 8016a40:	ee37 6b05 	vadd.f64	d6, d7, d5
 8016a44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016a48:	ed81 6b00 	vstr	d6, [r1]
 8016a4c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016a50:	ed81 7b02 	vstr	d7, [r1, #8]
 8016a54:	e796      	b.n	8016984 <__kernel_rem_pio2+0x3fc>
 8016a56:	ed92 7b00 	vldr	d7, [r2]
 8016a5a:	ed92 5b02 	vldr	d5, [r2, #8]
 8016a5e:	3901      	subs	r1, #1
 8016a60:	ee37 6b05 	vadd.f64	d6, d7, d5
 8016a64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016a68:	ed82 6b00 	vstr	d6, [r2]
 8016a6c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016a70:	ed82 7b02 	vstr	d7, [r2, #8]
 8016a74:	e78b      	b.n	801698e <__kernel_rem_pio2+0x406>
 8016a76:	ed33 6b02 	vldmdb	r3!, {d6}
 8016a7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016a7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016a82:	e78b      	b.n	801699c <__kernel_rem_pio2+0x414>
 8016a84:	eeb1 5b45 	vneg.f64	d5, d5
 8016a88:	eeb1 6b46 	vneg.f64	d6, d6
 8016a8c:	ed87 5b00 	vstr	d5, [r7]
 8016a90:	eeb1 7b47 	vneg.f64	d7, d7
 8016a94:	ed87 6b02 	vstr	d6, [r7, #8]
 8016a98:	e78d      	b.n	80169b6 <__kernel_rem_pio2+0x42e>
 8016a9a:	bf00      	nop
 8016a9c:	f3af 8000 	nop.w
 8016aa0:	00000000 	.word	0x00000000
 8016aa4:	41700000 	.word	0x41700000
 8016aa8:	00000000 	.word	0x00000000
 8016aac:	3e700000 	.word	0x3e700000
	...

08016ab8 <__kernel_sin>:
 8016ab8:	ee10 3a90 	vmov	r3, s1
 8016abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016ac0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8016ac4:	da04      	bge.n	8016ad0 <__kernel_sin+0x18>
 8016ac6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8016aca:	ee17 3a90 	vmov	r3, s15
 8016ace:	b35b      	cbz	r3, 8016b28 <__kernel_sin+0x70>
 8016ad0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8016ad4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8016ad8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8016b30 <__kernel_sin+0x78>
 8016adc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8016b38 <__kernel_sin+0x80>
 8016ae0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8016ae4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8016b40 <__kernel_sin+0x88>
 8016ae8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8016aec:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8016b48 <__kernel_sin+0x90>
 8016af0:	eea7 4b06 	vfma.f64	d4, d7, d6
 8016af4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8016b50 <__kernel_sin+0x98>
 8016af8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8016afc:	b930      	cbnz	r0, 8016b0c <__kernel_sin+0x54>
 8016afe:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8016b58 <__kernel_sin+0xa0>
 8016b02:	eea6 4b07 	vfma.f64	d4, d6, d7
 8016b06:	eea4 0b05 	vfma.f64	d0, d4, d5
 8016b0a:	4770      	bx	lr
 8016b0c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8016b10:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8016b14:	eea1 7b04 	vfma.f64	d7, d1, d4
 8016b18:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8016b1c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8016b60 <__kernel_sin+0xa8>
 8016b20:	eea5 1b07 	vfma.f64	d1, d5, d7
 8016b24:	ee30 0b41 	vsub.f64	d0, d0, d1
 8016b28:	4770      	bx	lr
 8016b2a:	bf00      	nop
 8016b2c:	f3af 8000 	nop.w
 8016b30:	5acfd57c 	.word	0x5acfd57c
 8016b34:	3de5d93a 	.word	0x3de5d93a
 8016b38:	8a2b9ceb 	.word	0x8a2b9ceb
 8016b3c:	be5ae5e6 	.word	0xbe5ae5e6
 8016b40:	57b1fe7d 	.word	0x57b1fe7d
 8016b44:	3ec71de3 	.word	0x3ec71de3
 8016b48:	19c161d5 	.word	0x19c161d5
 8016b4c:	bf2a01a0 	.word	0xbf2a01a0
 8016b50:	1110f8a6 	.word	0x1110f8a6
 8016b54:	3f811111 	.word	0x3f811111
 8016b58:	55555549 	.word	0x55555549
 8016b5c:	bfc55555 	.word	0xbfc55555
 8016b60:	55555549 	.word	0x55555549
 8016b64:	3fc55555 	.word	0x3fc55555

08016b68 <atan>:
 8016b68:	b538      	push	{r3, r4, r5, lr}
 8016b6a:	eeb0 7b40 	vmov.f64	d7, d0
 8016b6e:	ee17 5a90 	vmov	r5, s15
 8016b72:	4b73      	ldr	r3, [pc, #460]	; (8016d40 <atan+0x1d8>)
 8016b74:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8016b78:	429c      	cmp	r4, r3
 8016b7a:	dd13      	ble.n	8016ba4 <atan+0x3c>
 8016b7c:	4b71      	ldr	r3, [pc, #452]	; (8016d44 <atan+0x1dc>)
 8016b7e:	429c      	cmp	r4, r3
 8016b80:	dc03      	bgt.n	8016b8a <atan+0x22>
 8016b82:	d107      	bne.n	8016b94 <atan+0x2c>
 8016b84:	ee10 3a10 	vmov	r3, s0
 8016b88:	b123      	cbz	r3, 8016b94 <atan+0x2c>
 8016b8a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016b8e:	eeb0 0b47 	vmov.f64	d0, d7
 8016b92:	bd38      	pop	{r3, r4, r5, pc}
 8016b94:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8016cd0 <atan+0x168>
 8016b98:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8016cd8 <atan+0x170>
 8016b9c:	2d00      	cmp	r5, #0
 8016b9e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8016ba2:	e7f4      	b.n	8016b8e <atan+0x26>
 8016ba4:	4b68      	ldr	r3, [pc, #416]	; (8016d48 <atan+0x1e0>)
 8016ba6:	429c      	cmp	r4, r3
 8016ba8:	dc11      	bgt.n	8016bce <atan+0x66>
 8016baa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8016bae:	429c      	cmp	r4, r3
 8016bb0:	dc0a      	bgt.n	8016bc8 <atan+0x60>
 8016bb2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8016bb6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8016ce0 <atan+0x178>
 8016bba:	ee30 6b06 	vadd.f64	d6, d0, d6
 8016bbe:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8016bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bc6:	dce2      	bgt.n	8016b8e <atan+0x26>
 8016bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8016bcc:	e013      	b.n	8016bf6 <atan+0x8e>
 8016bce:	f000 f8c5 	bl	8016d5c <fabs>
 8016bd2:	4b5e      	ldr	r3, [pc, #376]	; (8016d4c <atan+0x1e4>)
 8016bd4:	429c      	cmp	r4, r3
 8016bd6:	dc4f      	bgt.n	8016c78 <atan+0x110>
 8016bd8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8016bdc:	429c      	cmp	r4, r3
 8016bde:	dc41      	bgt.n	8016c64 <atan+0xfc>
 8016be0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8016be4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8016be8:	2300      	movs	r3, #0
 8016bea:	eea0 6b07 	vfma.f64	d6, d0, d7
 8016bee:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016bf2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8016bf6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016ce8 <atan+0x180>
 8016bfa:	ee27 4b07 	vmul.f64	d4, d7, d7
 8016bfe:	ee24 5b04 	vmul.f64	d5, d4, d4
 8016c02:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8016cf0 <atan+0x188>
 8016c06:	eea5 3b06 	vfma.f64	d3, d5, d6
 8016c0a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8016cf8 <atan+0x190>
 8016c0e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8016c12:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8016d00 <atan+0x198>
 8016c16:	eea6 3b05 	vfma.f64	d3, d6, d5
 8016c1a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8016d08 <atan+0x1a0>
 8016c1e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8016c22:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8016d10 <atan+0x1a8>
 8016c26:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8016d18 <atan+0x1b0>
 8016c2a:	eea6 3b05 	vfma.f64	d3, d6, d5
 8016c2e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016d20 <atan+0x1b8>
 8016c32:	eea5 2b06 	vfma.f64	d2, d5, d6
 8016c36:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016d28 <atan+0x1c0>
 8016c3a:	eea2 6b05 	vfma.f64	d6, d2, d5
 8016c3e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8016d30 <atan+0x1c8>
 8016c42:	eea6 2b05 	vfma.f64	d2, d6, d5
 8016c46:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016d38 <atan+0x1d0>
 8016c4a:	1c5a      	adds	r2, r3, #1
 8016c4c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8016c50:	ee26 6b05 	vmul.f64	d6, d6, d5
 8016c54:	eea3 6b04 	vfma.f64	d6, d3, d4
 8016c58:	ee27 6b06 	vmul.f64	d6, d7, d6
 8016c5c:	d121      	bne.n	8016ca2 <atan+0x13a>
 8016c5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016c62:	e794      	b.n	8016b8e <atan+0x26>
 8016c64:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8016c68:	2301      	movs	r3, #1
 8016c6a:	ee30 6b47 	vsub.f64	d6, d0, d7
 8016c6e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016c72:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8016c76:	e7be      	b.n	8016bf6 <atan+0x8e>
 8016c78:	4b35      	ldr	r3, [pc, #212]	; (8016d50 <atan+0x1e8>)
 8016c7a:	429c      	cmp	r4, r3
 8016c7c:	da0b      	bge.n	8016c96 <atan+0x12e>
 8016c7e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8016c82:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8016c86:	ee30 5b47 	vsub.f64	d5, d0, d7
 8016c8a:	eea0 6b07 	vfma.f64	d6, d0, d7
 8016c8e:	2302      	movs	r3, #2
 8016c90:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8016c94:	e7af      	b.n	8016bf6 <atan+0x8e>
 8016c96:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8016c9a:	2303      	movs	r3, #3
 8016c9c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8016ca0:	e7a9      	b.n	8016bf6 <atan+0x8e>
 8016ca2:	4a2c      	ldr	r2, [pc, #176]	; (8016d54 <atan+0x1ec>)
 8016ca4:	492c      	ldr	r1, [pc, #176]	; (8016d58 <atan+0x1f0>)
 8016ca6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016caa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8016cae:	ed93 5b00 	vldr	d5, [r3]
 8016cb2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016cb6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8016cba:	ed92 6b00 	vldr	d6, [r2]
 8016cbe:	2d00      	cmp	r5, #0
 8016cc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8016cc4:	bfb8      	it	lt
 8016cc6:	eeb1 7b47 	vneglt.f64	d7, d7
 8016cca:	e760      	b.n	8016b8e <atan+0x26>
 8016ccc:	f3af 8000 	nop.w
 8016cd0:	54442d18 	.word	0x54442d18
 8016cd4:	3ff921fb 	.word	0x3ff921fb
 8016cd8:	54442d18 	.word	0x54442d18
 8016cdc:	bff921fb 	.word	0xbff921fb
 8016ce0:	8800759c 	.word	0x8800759c
 8016ce4:	7e37e43c 	.word	0x7e37e43c
 8016ce8:	e322da11 	.word	0xe322da11
 8016cec:	3f90ad3a 	.word	0x3f90ad3a
 8016cf0:	24760deb 	.word	0x24760deb
 8016cf4:	3fa97b4b 	.word	0x3fa97b4b
 8016cf8:	a0d03d51 	.word	0xa0d03d51
 8016cfc:	3fb10d66 	.word	0x3fb10d66
 8016d00:	c54c206e 	.word	0xc54c206e
 8016d04:	3fb745cd 	.word	0x3fb745cd
 8016d08:	920083ff 	.word	0x920083ff
 8016d0c:	3fc24924 	.word	0x3fc24924
 8016d10:	5555550d 	.word	0x5555550d
 8016d14:	3fd55555 	.word	0x3fd55555
 8016d18:	52defd9a 	.word	0x52defd9a
 8016d1c:	bfadde2d 	.word	0xbfadde2d
 8016d20:	2c6a6c2f 	.word	0x2c6a6c2f
 8016d24:	bfa2b444 	.word	0xbfa2b444
 8016d28:	af749a6d 	.word	0xaf749a6d
 8016d2c:	bfb3b0f2 	.word	0xbfb3b0f2
 8016d30:	fe231671 	.word	0xfe231671
 8016d34:	bfbc71c6 	.word	0xbfbc71c6
 8016d38:	9998ebc4 	.word	0x9998ebc4
 8016d3c:	bfc99999 	.word	0xbfc99999
 8016d40:	440fffff 	.word	0x440fffff
 8016d44:	7ff00000 	.word	0x7ff00000
 8016d48:	3fdbffff 	.word	0x3fdbffff
 8016d4c:	3ff2ffff 	.word	0x3ff2ffff
 8016d50:	40038000 	.word	0x40038000
 8016d54:	08017228 	.word	0x08017228
 8016d58:	08017248 	.word	0x08017248

08016d5c <fabs>:
 8016d5c:	ec51 0b10 	vmov	r0, r1, d0
 8016d60:	ee10 2a10 	vmov	r2, s0
 8016d64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016d68:	ec43 2b10 	vmov	d0, r2, r3
 8016d6c:	4770      	bx	lr
	...

08016d70 <floor>:
 8016d70:	ee10 1a90 	vmov	r1, s1
 8016d74:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016d78:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8016d7c:	2b13      	cmp	r3, #19
 8016d7e:	b530      	push	{r4, r5, lr}
 8016d80:	ee10 0a10 	vmov	r0, s0
 8016d84:	ee10 5a10 	vmov	r5, s0
 8016d88:	dc31      	bgt.n	8016dee <floor+0x7e>
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	da15      	bge.n	8016dba <floor+0x4a>
 8016d8e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016e48 <floor+0xd8>
 8016d92:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016d96:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d9e:	dd07      	ble.n	8016db0 <floor+0x40>
 8016da0:	2900      	cmp	r1, #0
 8016da2:	da4e      	bge.n	8016e42 <floor+0xd2>
 8016da4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016da8:	4318      	orrs	r0, r3
 8016daa:	d001      	beq.n	8016db0 <floor+0x40>
 8016dac:	4928      	ldr	r1, [pc, #160]	; (8016e50 <floor+0xe0>)
 8016dae:	2000      	movs	r0, #0
 8016db0:	460b      	mov	r3, r1
 8016db2:	4602      	mov	r2, r0
 8016db4:	ec43 2b10 	vmov	d0, r2, r3
 8016db8:	e020      	b.n	8016dfc <floor+0x8c>
 8016dba:	4a26      	ldr	r2, [pc, #152]	; (8016e54 <floor+0xe4>)
 8016dbc:	411a      	asrs	r2, r3
 8016dbe:	ea01 0402 	and.w	r4, r1, r2
 8016dc2:	4304      	orrs	r4, r0
 8016dc4:	d01a      	beq.n	8016dfc <floor+0x8c>
 8016dc6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8016e48 <floor+0xd8>
 8016dca:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016dce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dd6:	ddeb      	ble.n	8016db0 <floor+0x40>
 8016dd8:	2900      	cmp	r1, #0
 8016dda:	bfbe      	ittt	lt
 8016ddc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8016de0:	fa40 f303 	asrlt.w	r3, r0, r3
 8016de4:	18c9      	addlt	r1, r1, r3
 8016de6:	ea21 0102 	bic.w	r1, r1, r2
 8016dea:	2000      	movs	r0, #0
 8016dec:	e7e0      	b.n	8016db0 <floor+0x40>
 8016dee:	2b33      	cmp	r3, #51	; 0x33
 8016df0:	dd05      	ble.n	8016dfe <floor+0x8e>
 8016df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016df6:	d101      	bne.n	8016dfc <floor+0x8c>
 8016df8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016dfc:	bd30      	pop	{r4, r5, pc}
 8016dfe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8016e02:	f04f 32ff 	mov.w	r2, #4294967295
 8016e06:	40e2      	lsrs	r2, r4
 8016e08:	4202      	tst	r2, r0
 8016e0a:	d0f7      	beq.n	8016dfc <floor+0x8c>
 8016e0c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8016e48 <floor+0xd8>
 8016e10:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016e14:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e1c:	ddc8      	ble.n	8016db0 <floor+0x40>
 8016e1e:	2900      	cmp	r1, #0
 8016e20:	da02      	bge.n	8016e28 <floor+0xb8>
 8016e22:	2b14      	cmp	r3, #20
 8016e24:	d103      	bne.n	8016e2e <floor+0xbe>
 8016e26:	3101      	adds	r1, #1
 8016e28:	ea20 0002 	bic.w	r0, r0, r2
 8016e2c:	e7c0      	b.n	8016db0 <floor+0x40>
 8016e2e:	2401      	movs	r4, #1
 8016e30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016e34:	fa04 f303 	lsl.w	r3, r4, r3
 8016e38:	4418      	add	r0, r3
 8016e3a:	42a8      	cmp	r0, r5
 8016e3c:	bf38      	it	cc
 8016e3e:	1909      	addcc	r1, r1, r4
 8016e40:	e7f2      	b.n	8016e28 <floor+0xb8>
 8016e42:	2000      	movs	r0, #0
 8016e44:	4601      	mov	r1, r0
 8016e46:	e7b3      	b.n	8016db0 <floor+0x40>
 8016e48:	8800759c 	.word	0x8800759c
 8016e4c:	7e37e43c 	.word	0x7e37e43c
 8016e50:	bff00000 	.word	0xbff00000
 8016e54:	000fffff 	.word	0x000fffff

08016e58 <scalbn>:
 8016e58:	ee10 1a90 	vmov	r1, s1
 8016e5c:	b510      	push	{r4, lr}
 8016e5e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8016e62:	b98c      	cbnz	r4, 8016e88 <scalbn+0x30>
 8016e64:	ee10 3a10 	vmov	r3, s0
 8016e68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8016e6c:	430b      	orrs	r3, r1
 8016e6e:	d011      	beq.n	8016e94 <scalbn+0x3c>
 8016e70:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8016f38 <scalbn+0xe0>
 8016e74:	4b3c      	ldr	r3, [pc, #240]	; (8016f68 <scalbn+0x110>)
 8016e76:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016e7a:	4298      	cmp	r0, r3
 8016e7c:	da0b      	bge.n	8016e96 <scalbn+0x3e>
 8016e7e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8016f40 <scalbn+0xe8>
 8016e82:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016e86:	e005      	b.n	8016e94 <scalbn+0x3c>
 8016e88:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8016e8c:	429c      	cmp	r4, r3
 8016e8e:	d107      	bne.n	8016ea0 <scalbn+0x48>
 8016e90:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016e94:	bd10      	pop	{r4, pc}
 8016e96:	ee10 1a90 	vmov	r1, s1
 8016e9a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8016e9e:	3c36      	subs	r4, #54	; 0x36
 8016ea0:	4404      	add	r4, r0
 8016ea2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8016ea6:	429c      	cmp	r4, r3
 8016ea8:	dd0d      	ble.n	8016ec6 <scalbn+0x6e>
 8016eaa:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8016f48 <scalbn+0xf0>
 8016eae:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8016f50 <scalbn+0xf8>
 8016eb2:	eeb0 6b47 	vmov.f64	d6, d7
 8016eb6:	ee10 3a90 	vmov	r3, s1
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	fe27 7b05 	vselge.f64	d7, d7, d5
 8016ec0:	ee27 0b06 	vmul.f64	d0, d7, d6
 8016ec4:	e7e6      	b.n	8016e94 <scalbn+0x3c>
 8016ec6:	2c00      	cmp	r4, #0
 8016ec8:	dd0a      	ble.n	8016ee0 <scalbn+0x88>
 8016eca:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8016ece:	ec53 2b10 	vmov	r2, r3, d0
 8016ed2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8016ed6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8016eda:	ec43 2b10 	vmov	d0, r2, r3
 8016ede:	e7d9      	b.n	8016e94 <scalbn+0x3c>
 8016ee0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8016ee4:	da19      	bge.n	8016f1a <scalbn+0xc2>
 8016ee6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016eea:	4298      	cmp	r0, r3
 8016eec:	ee10 3a90 	vmov	r3, s1
 8016ef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016ef4:	dd09      	ble.n	8016f0a <scalbn+0xb2>
 8016ef6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8016f48 <scalbn+0xf0>
 8016efa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8016f50 <scalbn+0xf8>
 8016efe:	eeb0 7b40 	vmov.f64	d7, d0
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8016f08:	e7bb      	b.n	8016e82 <scalbn+0x2a>
 8016f0a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8016f40 <scalbn+0xe8>
 8016f0e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8016f58 <scalbn+0x100>
 8016f12:	eeb0 7b40 	vmov.f64	d7, d0
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	e7f4      	b.n	8016f04 <scalbn+0xac>
 8016f1a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8016f1e:	ec53 2b10 	vmov	r2, r3, d0
 8016f22:	3436      	adds	r4, #54	; 0x36
 8016f24:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8016f28:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8016f2c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8016f60 <scalbn+0x108>
 8016f30:	ec43 2b10 	vmov	d0, r2, r3
 8016f34:	e7a5      	b.n	8016e82 <scalbn+0x2a>
 8016f36:	bf00      	nop
 8016f38:	00000000 	.word	0x00000000
 8016f3c:	43500000 	.word	0x43500000
 8016f40:	c2f8f359 	.word	0xc2f8f359
 8016f44:	01a56e1f 	.word	0x01a56e1f
 8016f48:	8800759c 	.word	0x8800759c
 8016f4c:	7e37e43c 	.word	0x7e37e43c
 8016f50:	8800759c 	.word	0x8800759c
 8016f54:	fe37e43c 	.word	0xfe37e43c
 8016f58:	c2f8f359 	.word	0xc2f8f359
 8016f5c:	81a56e1f 	.word	0x81a56e1f
 8016f60:	00000000 	.word	0x00000000
 8016f64:	3c900000 	.word	0x3c900000
 8016f68:	ffff3cb0 	.word	0xffff3cb0

08016f6c <_init>:
 8016f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f6e:	bf00      	nop
 8016f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f72:	bc08      	pop	{r3}
 8016f74:	469e      	mov	lr, r3
 8016f76:	4770      	bx	lr

08016f78 <_fini>:
 8016f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f7a:	bf00      	nop
 8016f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f7e:	bc08      	pop	{r3}
 8016f80:	469e      	mov	lr, r3
 8016f82:	4770      	bx	lr
